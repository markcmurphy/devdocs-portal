title: Dev Center
header:
  nav:
    left:
      - title: API Docs
        path: /api-docs
      - title: API Reference
        path: /api-reference
      - title: Theme Docs
        path: /stencil-docs
      - title: Tools
        path: /tools-resources
      - title: Changelog
        path: /changelog
    right:
      - title: My Apps
        path: 'https://devtools.bigcommerce.com'
      - title: Create Account
        path: 'https://login.bigcommerce.com/signup'
pages:
  /:
    title: BigCommerce Dev Center - API & Theme Documentation
    data:
      $ref: ./Home.html
  /api-docs:
    title: API Docs
    data:
      blocks:
        - type: html
          data: |-
            <div class="docs-landing bg-bclightblue">
              <div class="cBrLandingTiles">
                <div class="ui-widget">
                  <div>
                    <div style="padding: 62px 0px 0px;">
                      <div>
                        <h1 class="h1 panel-title__text-dark">API Documentation</h1>
                      </div>
                    </div>
                  </div>
                </div>
              </div><!-- landing tiles -->
              <div class="cBrLandingTiles" style="margin-bottom: 5%;">
                <div data-region-name="landingTiles">
                  <div class="ui-widget">
                    <div class="lift-content">
                      <div>
                        <div>
                          <div class="row row--pad">
                            <div class="column-md-12 column-lg-6 column--pad m-bottom-25"><a href="/api-docs/getting-started/basics/making-requests" class="cursor-pointer">
                              <div class="panel-media doc-landing">
                                <div class="panel-media__wrap-icon">
                                  <div class="panel-media__icon">
                                    <img alt="" src="https://storage.googleapis.com/bigcommerce-production-dev-center/images/Getting-Started.svg">
                                  </div>
                                </div>
                                <div class="panel-media__wrap-content">
                                  <h4 class="h4 panel-media__title">Getting Started</h4>
                                  <p class="panel-media__text type--sm">Get up to speed. Follow our Quick Start Guide to begin building flexible, scalable technical solutions for businesses.</p>
                                </div>
                              </div>
                              </a>
                            </div>
                            <div class="column-md-12 column-lg-6 column--pad m-bottom-25"><a href="/api-docs/getting-started/webhooks/about-webhooks" class="cursor-pointer">
                              <div class="panel-media doc-landing">
                                <div class="panel-media__wrap-icon">
                                  <div class="panel-media__icon">
                                    <img alt="" src="https://storage.googleapis.com/bigcommerce-production-dev-center/images/Webhooks.svg">
                                  </div>
                                </div>
                                <div class="panel-media__wrap-content">
                                  <h4 class="h4 panel-media__title">Webhooks</h4>
                                  <p class="panel-media__text type--sm">Respond in real time. Utilize webhooks to subscribe to events in a BigCommerce store. </p>
                                </div>
                              </div>
                              </a>
                            </div>
                            <div class="column-md-12 column-lg-6 column--pad m-bottom-25"><a href="/api-docs/orders/orders-overview" class="cursor-pointer">
                              <div class="panel-media doc-landing">
                                <div class="panel-media__wrap-icon">
                                  <div class="panel-media__icon">
                                    <img alt="" src="https://storage.googleapis.com/bigcommerce-production-dev-center/images/Orders-API.svg">
                                  </div>
                                </div>
                                <div class="panel-media__wrap-content">
                                  <h4 class="h4 panel-media__title">Orders API</h4>
                                  <p class="panel-media__text type--sm">Plug in and connect. Access BigCommerce order data to boost your POS and fulfillment solutions.</p>
                                </div>
                              </div>
                              </a>
                            </div>
                            <div class="column-md-12 column-lg-6 column--pad m-bottom-25"><a href="/api-docs/cart-and-checkout/cart-and-checkout-overview" class="cursor-pointer">
                              <div class="panel-media doc-landing">
                                <div class="panel-media__wrap-icon">
                                  <div class="panel-media__icon">
                                    <img alt="" src="https://storage.googleapis.com/bigcommerce-production-dev-center/images/Storefront-API.svg">
                                  </div>
                                </div>
                                <div class="panel-media__wrap-content">
                                  <h4 class="h4 panel-media__title">Storefront APIs</h4>
                                  <p class="panel-media__text type--sm">Build flexible solutions. Access and modify store data client-side using JavaScript. </p>
                                </div>
                              </div>
                              </a>
                            </div>
                            <div class="column-md-12 column-lg-6 column--pad m-bottom-25"><a href="/api-docs/catalog/products-overview" class="cursor-pointer">
                              <div class="panel-media doc-landing">
                                <div class="panel-media__wrap-icon">
                                  <div class="panel-media__icon">
                                    <img alt="" src="https://storage.googleapis.com/bigcommerce-production-dev-center/images/Catelog-API.svg">
                                  </div>
                                </div>
                                <div class="panel-media__wrap-content">
                                  <h4 class="h4 panel-media__title">Catalog API</h4>
                                  <p class="panel-media__text type--sm">Channel your product data. Link your catalog to power inventory, omni channel selling, and more.</p>
                                </div>
                              </div>
                              </a>
                            </div>
                            <div class="column-md-12 column-lg-6 column--pad"><a href="https://developer.bigcommerce.com/api-docs/partner/becoming-a-partner" target="_blank" class="cursor-pointer">
                              <div class="panel-media doc-landing">
                                <div class="panel-media__wrap-icon">
                                  <div class="panel-media__icon">
                                    <img alt="" src="https://storage.googleapis.com/bigcommerce-production-dev-center/images/Marketplace.svg">
                                  </div>
                                </div>
                                <div class="panel-media__wrap-content">
                                  <h4 class="h4 panel-media__title">Join the App Marketplace</h4>
                                  <p class="panel-media__text type--sm">Ready to monetize your app? Become a BigCommerce Tech Partner and list your solution on the App Marketplace.</p>
                                </div>
                              </div>
                              </a>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
      children:
        - title: Getting Started
          route:
            path: /getting-started
          data:
            children:
              - title: Quick Start
                route:
                  path: /making-requests
                data:
                  blocks:
                    - type: html
                      data: "<h1>Quick Start</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    \t\t<li><a href=\"#making-requests_prerequisites\">Overview<a/></li>\n        <li><a href=\"#making-requests_get-products\">Getting a List of Products</a></li>\n        <li><a href=\"#making-requests_create-a-product\">Creating a Product</a></li>\n        <li><a href=\"#making-requests_troubleshooting\">Troubleshooting</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Overview


                        This Quick Start guide will take you through the minimum
                        required steps to begin making API requests. By the end
                        of this guide, you’ll be able to retrieve a store’s
                        product catalog, create a new product, and troubleshoot
                        common errors.


                        Before we begin, here are a few key concepts:

                        * API requests are always made against a single store’s
                        data, and API tokens are issued on a per-store basis.
                        The first step to using the BigCommerce API is creating
                        a BigCommerce store.

                        * API Credentials can be generated from a store’s
                        control panel. If you’re testing requests or writing a
                        script for a single store, start here to quickly get
                        your token and begin making API calls. 

                        * If you’re building an app that will install in a
                        store’s control panel, you’ll need to generate an API
                        token programmatically during the [app installation
                        process](/api-docs/getting-started/building-apps-bigcommerce/building-apps#building-apps_installation-update-sequence).
                        However in the beginning, it’s still a good idea to
                        generate API credentials from the control panel to start
                        testing requests with minimal effort.



                        ### Prerequisites

                        * [API
                        Credentials](/api-docs/getting-started/authentication#authentication_getting-api-credentials)

                        *
                        [Scope](/api-docs/getting-started/authentication#authentication_oauth-scopes)
                        set to `Products Modify`

                        * BigCommerce Store (`store_hash`)


                        *Note: You can use any API client (like Postman) for
                        this walkthrough, but these steps are written with the
                        built-in HTTP request maker in mind.*
                      header:
                        anchor: making-requests_prerequisites
                    - type: text
                      data: "## Getting a List of Products\n\nIn this walkthrough, we'll get a list of products from the store, use a limit filter to only show the first 10 products, and sort products by name. \n\nIn the request maker below, we've prefilled the URL to /GET products: `https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products`\n\nTo add [filters](/api-docs/getting-started/filtering), append `?page=10&sort=name` to the end of the request URL.\n\n\nIn the request maker tabs, replace these placeholders with the appropriate values:  \n- {X-Auth-Token} Header - Access Token from API Credentials\n- {X-Auth-Client} Header - Client Id from API Credentials\n- store_hash variable - the hash in your api path \n\t- https://api.bigcommerce.com/stores/{store_hash}/v3/\n\n \nHit the send button and review your response."
                      header:
                        anchor: making-requests_get-products
                    - type: http
                      data:
                        method: get
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Token: '{X-Auth-Token}'
                          X-Auth-Client: '{X-Auth-Client}'
                        query:
                          limit: '10'
                          sort: name
                      header:
                        title: Get a List of Products
                    - type: code
                      data: |-
                        {
                          "data": [
                            {
                              "id": 174,
                              "name": "1L Le Parfait Jar",
                              "type": "physical",
                              "sku": "",
                              "description": "<p><span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vel metus ac est egestas porta sed quis erat. Integer id nulla massa. Proin vitae enim nisi. Praesent non dignissim nulla. Nulla mattis id massa ac pharetra. Mauris et nisi in dolor aliquam sodales. Aliquam dui nisl, dictum quis leo sit amet, rutrum volutpat metus. Curabitur libero nunc, interdum ac libero non, tristique porttitor metus. Ut non dignissim lorem, in vestibulum leo. Vivamus sodales quis turpis eget.</span></p>",
                              "weight": 1,
                              "width": 0,
                              "depth": 0,
                              "height": 0,
                              "price": 7.95,
                              "cost_price": 0,
                              "retail_price": 10,
                              "sale_price": 0,
                              "map_price": 0,
                              "tax_class_id": 0,
                              "product_tax_code": "",
                              "calculated_price": 7.95,
                              "categories": [
                                23,
                                21
                              ],
                              "brand_id": 36,
                              "option_set_id": null,
                              "option_set_display": "right",
                              "inventory_level": 0,
                              "inventory_warning_level": 0,
                              "inventory_tracking": "none",
                              "reviews_rating_sum": 0,
                              "reviews_count": 0,
                              "total_sold": 7,
                              "fixed_cost_shipping_price": 0,
                              "is_free_shipping": false,
                              "is_visible": true,
                              "is_featured": false,
                              "related_products": [
                                -1
                              ],
                              "warranty": "",
                              "bin_picking_number": "",
                              "layout_file": "product.html",
                              "upc": "",
                              "mpn": "",
                              "gtin": "",
                              "search_keywords": "jar, glass",
                              "availability": "available",
                              "availability_description": "",
                              "gift_wrapping_options_type": "any",
                              "gift_wrapping_options_list": [],
                              "sort_order": 0,
                              "condition": "New",
                              "is_condition_shown": false,
                              "order_quantity_minimum": 0,
                              "order_quantity_maximum": 0,
                              "page_title": "",
                              "meta_keywords": [],
                              "meta_description": "",
                              "date_created": "2018-08-15T14:48:46+00:00",
                              "date_modified": "2018-09-12T17:32:23+00:00",
                              "view_count": 14,
                              "preorder_release_date": null,
                              "preorder_message": "",
                              "is_preorder_only": false,
                              "is_price_hidden": false,
                              "price_hidden_label": "",
                              "custom_url": {
                                "url": "/all/1l-le-parfait-jar/",
                                "is_customized": true
                              },
                              "base_variant_id": 345,
                              "open_graph_type": "product",
                              "open_graph_title": "",
                              "open_graph_description": "",
                              "open_graph_use_meta_description": true,
                              "open_graph_use_product_name": true,
                              "open_graph_use_image": true
                            },
                            {
                              "id": 167,
                              "name": "Able Brewing System",
                              "type": "physical",
                              "sku": "",
                              "description": "<p><span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vel metus ac est egestas porta sed quis erat. Integer id nulla massa. Proin vitae enim nisi. Praesent non dignissim nulla. Nulla mattis id massa ac pharetra. Mauris et nisi in dolor aliquam sodales. Aliquam dui nisl, dictum quis leo sit amet, rutrum volutpat metus. Curabitur libero nunc, interdum ac libero non, tristique porttitor metus. Ut non dignissim lorem, in vestibulum leo. Vivamus sodales quis turpis eget.</span></p>",
                              "weight": 1,
                              "width": 0,
                              "depth": 0,
                              "height": 0,
                              "price": 225,
                              "cost_price": 0,
                              "retail_price": 0,
                              "sale_price": 0,
                              "map_price": 0,
                              "tax_class_id": 0,
                              "product_tax_code": "",
                              "calculated_price": 225,
                              "categories": [
                                23,
                                21
                              ],
                              "brand_id": 43,
                              "option_set_id": 52,
                              "option_set_display": "right",
                              "inventory_level": 0,
                              "inventory_warning_level": 0,
                              "inventory_tracking": "none",
                              "reviews_rating_sum": 0,
                              "reviews_count": 0,
                              "total_sold": 2,
                              "fixed_cost_shipping_price": 0,
                              "is_free_shipping": false,
                              "is_visible": true,
                              "is_featured": false,
                              "related_products": [
                                -1
                              ],
                              "warranty": "",
                              "bin_picking_number": "",
                              "layout_file": "product.html",
                              "upc": "",
                              "mpn": "",
                              "gtin": "",
                              "search_keywords": "",
                              "availability": "available",
                              "availability_description": "",
                              "gift_wrapping_options_type": "any",
                              "gift_wrapping_options_list": [],
                              "sort_order": 0,
                              "condition": "New",
                              "is_condition_shown": false,
                              "order_quantity_minimum": 0,
                              "order_quantity_maximum": 0,
                              "page_title": "",
                              "meta_keywords": [],
                              "meta_description": "",
                              "date_created": "2018-08-15T14:48:36+00:00",
                              "date_modified": "2018-08-20T15:11:17+00:00",
                              "view_count": 21,
                              "preorder_release_date": null,
                              "preorder_message": "",
                              "is_preorder_only": false,
                              "is_price_hidden": false,
                              "price_hidden_label": "",
                              "custom_url": {
                                "url": "/all/able-brewing-system/",
                                "is_customized": true
                              },
                              "base_variant_id": 338,
                              "open_graph_type": "product",
                              "open_graph_title": "",
                              "open_graph_description": "",
                              "open_graph_use_meta_description": true,
                              "open_graph_use_product_name": true,
                              "open_graph_use_image": true
                            },
                            {
                              "id": 181,
                              "name": "All Purpose Cleaner",
                              "type": "physical",
                              "sku": "",
                              "description": "<p><span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vel metus ac est egestas porta sed quis erat. Integer id nulla massa. Proin vitae enim nisi. Praesent non dignissim nulla. Nulla mattis id massa ac pharetra. Mauris et nisi in dolor aliquam sodales. Aliquam dui nisl, dictum quis leo sit amet, rutrum volutpat metus. Curabitur libero nunc, interdum ac libero non, tristique porttitor metus. Ut non dignissim lorem, in vestibulum leo. Vivamus sodales quis turpis eget.</span></p>",
                              "weight": 1,
                              "width": 0,
                              "depth": 0,
                              "height": 0,
                              "price": 15,
                              "cost_price": 0,
                              "retail_price": 0,
                              "sale_price": 0,
                              "map_price": 0,
                              "tax_class_id": 0,
                              "product_tax_code": "",
                              "calculated_price": 15,
                              "categories": [
                                21,
                                22
                              ],
                              "brand_id": 37,
                              "option_set_id": null,
                              "option_set_display": "right",
                              "inventory_level": 0,
                              "inventory_warning_level": 0,
                              "inventory_tracking": "none",
                              "reviews_rating_sum": 0,
                              "reviews_count": 0,
                              "total_sold": 0,
                              "fixed_cost_shipping_price": 0,
                              "is_free_shipping": false,
                              "is_visible": true,
                              "is_featured": false,
                              "related_products": [
                                -1
                              ],
                              "warranty": "",
                              "bin_picking_number": "",
                              "layout_file": "product.html",
                              "upc": "",
                              "mpn": "",
                              "gtin": "",
                              "search_keywords": "",
                              "availability": "available",
                              "availability_description": "",
                              "gift_wrapping_options_type": "any",
                              "gift_wrapping_options_list": [],
                              "sort_order": 0,
                              "condition": "New",
                              "is_condition_shown": false,
                              "order_quantity_minimum": 0,
                              "order_quantity_maximum": 0,
                              "page_title": "",
                              "meta_keywords": [],
                              "meta_description": "",
                              "date_created": "2018-08-15T14:48:51+00:00",
                              "date_modified": "2018-08-15T15:01:15+00:00",
                              "view_count": 0,
                              "preorder_release_date": null,
                              "preorder_message": "",
                              "is_preorder_only": false,
                              "is_price_hidden": false,
                              "price_hidden_label": "",
                              "custom_url": {
                                "url": "/all/all-purpose-cleaner/",
                                "is_customized": true
                              },
                              "base_variant_id": 352,
                              "open_graph_type": "product",
                              "open_graph_title": "",
                              "open_graph_description": "",
                              "open_graph_use_meta_description": true,
                              "open_graph_use_product_name": true,
                              "open_graph_use_image": true
                            }

                          ],
                          "meta": {
                            "pagination": {
                              "total": 39,
                              "count": 10,
                              "per_page": 10,
                              "current_page": 1,
                              "total_pages": 4,
                              "links": {
                                "next": "?limit=10&sort=name&page=2",
                                "current": "?limit=10&sort=name&page=1"
                              },
                              "too_many": false
                            }
                          }
                        }
                      header:
                        title: GET Products Response
                        subtitle: 200 OK
                    - type: text
                      data: >-
                        The products are returned in a data array that contains
                        each product object. Located at the bottom of the
                        response is the meta object that shows the total number
                        of products being returned, but also the products
                        `per_page` which is 10, set using the limit query in the
                        request.


                        ### Next Steps

                        * Try including other filter paramters such as name or
                        include and exclude. See [Get All
                        Products](/api-reference/catalog/catalog-api/products/getproducts)
                        for a full list of available filters. 
                    - type: text
                      data: '---'
                    - type: text
                      data: "## Create a Product\n\nIn this walkthrough, we'll create an example product: BigCommerce Hoodie. The minimum parameters to create a product are: name, price, category, type and weight. \n\n* **Name**: The name of your product as a string.\n* **Price**: How much the items costs in number format. \n* **Category**: The `{category_id}` for the category this product belongs to. An item can be assigned to more than one category. You can /GET the category id by using:\n\n`https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/categories`\n\n* **Type**: Is the item physical or digital?\n\t- Physical items are anything that is shipped to the customer, such as a t-shirt.\n\t- Digital items are products that the customer downloads, such as a PDF of an ebook. \n* **Weight**: How much the product weighs as a number. The measurement unit is determined by the [store settings](https://forum.bigcommerce.com/s/article/Store-Settings#physical). \n\nReview the information pre-populated in the Body tab below. Make sure to run a GET request for the categories first and update request with the appropriate category ID."
                      header:
                        anchor: making-requests_create-a-product
                    - type: http
                      data:
                        method: post
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products
                        headers:
                          Accept: application/sjon
                          X-Auth-Token: '{X-Auth-Token}'
                          X-Auth-Client: '{X-Auth-Client}'
                          Content-Type: application/json
                        body: |
                          {
                            "name": "BigCommerce Hoodie",
                            "type": "physical",
                            "description": "A super soft hoodie to wear",
                            "weight": 5,
                            "width": 12,
                            "price": 25.99,
                            "categories": [
                              // set your category here. Accepts a comma seperated list
                            ],
                            "condition": "New"
                          }
                      header:
                        title: Create a Product
                    - type: code
                      data: |-
                        {
                            "data": {
                                "id": 196,
                                "name": "BigCommerce Hoodie",
                                "type": "physical",
                                "sku": "",
                                "description": "A super soft hoodie to wear",
                                "weight": 5,
                                "width": 12,
                                "depth": 0,
                                "height": 0,
                                "price": 25.99,
                                "cost_price": 0,
                                "retail_price": 0,
                                "sale_price": 0,
                                "map_price": 0,
                                "tax_class_id": 0,
                                "product_tax_code": "",
                                "calculated_price": 25.99,
                                "categories": [
                                    20,
                                    21
                                ],
                                "brand_id": 0,
                                "option_set_id": null,
                                "option_set_display": "right",
                                "inventory_level": 0,
                                "inventory_warning_level": 0,
                                "inventory_tracking": "none",
                                "reviews_rating_sum": 0,
                                "reviews_count": 0,
                                "total_sold": 0,
                                "fixed_cost_shipping_price": 0,
                                "is_free_shipping": false,
                                "is_visible": true,
                                "is_featured": false,
                                "related_products": [
                                    -1
                                ],
                                "warranty": "",
                                "bin_picking_number": "",
                                "layout_file": "",
                                "upc": "",
                                "mpn": "",
                                "gtin": "",
                                "search_keywords": "",
                                "availability": "available",
                                "availability_description": "",
                                "gift_wrapping_options_type": "any",
                                "gift_wrapping_options_list": [],
                                "sort_order": 0,
                                "condition": "New",
                                "is_condition_shown": false,
                                "order_quantity_minimum": 0,
                                "order_quantity_maximum": 0,
                                "page_title": "",
                                "meta_keywords": [],
                                "meta_description": "",
                                "date_created": "2018-09-21T17:12:59+00:00",
                                "date_modified": "2018-09-21T17:12:59+00:00",
                                "view_count": 0,
                                "preorder_release_date": null,
                                "preorder_message": "",
                                "is_preorder_only": false,
                                "is_price_hidden": false,
                                "price_hidden_label": "",
                                "custom_url": {
                                    "url": "/bigcommerce-hoodie/",
                                    "is_customized": false
                                },
                                "base_variant_id": 402,
                                "open_graph_type": "product",
                                "open_graph_title": "",
                                "open_graph_description": "",
                                "open_graph_use_meta_description": true,
                                "open_graph_use_product_name": true,
                                "open_graph_use_image": true,
                                "variants": [
                                    {
                                        "id": 402,
                                        "product_id": 196,
                                        "sku": "",
                                        "sku_id": null,
                                        "price": 25.99,
                                        "calculated_price": 25.99,
                                        "sale_price": 0,
                                        "retail_price": 0,
                                        "map_price": 0,
                                        "weight": 5,
                                        "width": 12,
                                        "height": 0,
                                        "depth": 0,
                                        "is_free_shipping": false,
                                        "fixed_cost_shipping_price": 0,
                                        "calculated_weight": 5,
                                        "purchasing_disabled": false,
                                        "purchasing_disabled_message": "",
                                        "image_url": "",
                                        "cost_price": 0,
                                        "upc": "",
                                        "mpn": "",
                                        "gtin": "",
                                        "inventory_level": 0,
                                        "inventory_warning_level": 0,
                                        "bin_picking_number": "",
                                        "option_values": []
                                    }
                                ],
                                "images": [],
                                "primary_image": null,
                                "videos": [],
                                "custom_fields": [],
                                "bulk_pricing_rules": [],
                                "reviews": []
                            },
                            "meta": {}
                        }
                      header:
                        title: Response POST Products
                        subtitle: 200 OK
                      config:
                        mode: json
                    - type: text
                      data: >-
                        ### Next Steps

                        * To see a full list of fields that can be sent in a
                        request see [Create a
                        Product](/api-reference/catalog/catalog-api/products/createproduct)

                        * Try to make a different product with new attributes.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Troubleshooting


                        Did you get a status of 403 Forbidden?

                        * Check the Client ID and Client Token.

                        * Make sure your request headers are correct.

                        * Be sure you replaced `{store_hash}` with your store
                        hash. 

                        * Make sure the request url is correct.


                        Did you get a 200 but nothing was returned?

                        * Make sure your store has products.


                        Did you get a status of 404?

                        * Check the request url for errors.
                      header:
                        anchor: making-requests_troubleshooting
              - title: About Our API
                route:
                  path: /about-our-api
                data:
                  blocks:
                    - type: html
                      data: "<h1>About Our API</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#about-api_api-enviroment\">API Environment</a></li>\n        <li><a href=\"#about-api__available-api\">Available APIs</a></li>\n        <li><a href=\"#about-api_request-headers\">Request Headers</a></li>\n        <li><a href=\"#about-api_response-headers\">Response Headers</a></li>\n        <li><a href=\"#about-api_media-types\">Media Types</a></li>\n        <li><a href=\"#about-api_content-types\">Content Types</a></li>\n    <li><a href=\"#  about-api_request-and-response-structure\">Request and Response Structure</a></li>\n    \t\t<li><a href=\"#about-api_get-help\">Support</a></li>\n    \t\t<li><a href=\"https://www.bigcommerce.com/terms/api-terms/\">Terms of Service</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        Want to get started making API Requests right away?
                        Check out the [Quick
                        Start](/api-docs/getting-started/basics/making-requests).


                        The BigCommerce set of APIs allow you to create apps,
                        automate store processes or build headless ecommerce
                        solutions. Need inspiration on what to build? Visit our
                        [App Marketplace](https://www.bigcommerce.com/apps/). 
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## API Environment 


                        BigCommerce API requests can be made in the context of
                        the storefront or server-to-server.  


                        * Storefront APIs use the store url:
                        `https://your-store.mybigcommerce.com/api/{endpoint}`

                        * Server-to-Server requests use the base url: 
                        `https://api.bigcommerce.com/stores/{store_hash}/v3/`

                        * V2 API Requests use the base url:
                        `https://api.bigcommerce.com/stores/{store_hash}/v2/`
                      header:
                        anchor: about-api_api-enviroment
                    - type: text
                      data: >-
                        ## Available APIs



                        |API | Description | Download Schema |

                        |--|--| -- |

                        | [Catalog](/api-reference/catalog/catalog-api) | The
                        Catalog API manages products, brands and categories for
                        a store. | [Download Catalog
                        API](https://developer.bigcommerce.com/api-reference/catalog/catalog-api/BigCommerce_Catalog_API.oas2.json)

                        | [Store
                        Infomation](/api-reference/store-management/store-information-api)
                        | Get system time stamp and basic store information. |
                        [Download Store Information
                        API](https://developer.bigcommerce.com/api-reference/store-management/store-information-api/BigCommerce_Store_Information_API.oas2.json)
                        |

                        | [Currency](/api-reference/store/currency-api) | Manage
                        currency displayed on the storefront | [Download
                        Currency
                        API](https://developer.bigcommerce.com/api-reference/store-management/currency-api/BigCommerce_Currency_API.oas2.json)

                        | [Geography](/api-reference/store/geography-api) | Get
                        a list of states and countries  | [Download Geography
                        API](https://developer.bigcommerce.com/api-reference/store-management/geography-api/BigCommerce_Geography_API.oas2.json)

                        | [Tax Class](/api-reference/store/tax-classes-api) |
                        Get available tax classes on a store | [Download Tax
                        Class
                        API](https://developer.bigcommerce.com/api-reference/store-management/tax-classes-api/BigCommerce_Tax_Class_API.oas2.json)

                        | [Storefront
                        Cart](/api-reference/cart-checkout/storefront-cart-api)
                        | Create a cart or scrape cart data from the front end |
                        [Download Storefront Cart
                        API](https://developer.bigcommerce.com/api-reference/cart-checkout/storefront-cart-api/BigCommerce_Storefront_Cart_API.oas2.json)

                        | [Storefront
                        Checkout](/api-reference/cart-checkout/storefront-checkout-api)
                        | Create a checkout or scrape checkout data from the
                        front end |[Download Storefront Checkout
                        API](https://developer.bigcommerce.com/api-reference/cart-checkout/storefront-checkout-api/BigCommerce_Storefront_Checkout_API.oas2.json)

                        | [Server-to-Server
                        Cart](/api-reference/cart-checkout/server-server-cart-api)
                        | Create a cart and bypass the BigCommerce front end |
                        [Download Server-to-Server Cart
                        API](https://developer.bigcommerce.com/api-reference/cart-checkout/server-server-cart-api/BigCommerce_Server_to_Server_Cart_API.oas2.json)

                        | [Server-to-Server
                        Checkout](/api-reference/cart-checkout/server-server-checkout-api)
                        | Create a checkout and bypass the BigCommerce front end
                        | [Download Server-Server Checkout
                        API](https://developer.bigcommerce.com/api-reference/cart-checkout/server-server-checkout-api/BigCommerce_Server_to_Server_Checkout_API.oas2.json)

                        | [Orders](/api-reference/orders/orders-api) | Create
                        and manage orders | [Download Orders
                        API](https://developer.bigcommerce.com/api-reference/orders/orders-api/BigCommerce_Orders_API.oas2.json)

                        | [Order
                        Transactions](/api-reference/orders/orders-transactions-api)
                        | View order payment information | [Download Order
                        Transactions
                        API](https://developer.bigcommerce.com/api-reference/orders/orders-transactions-api/BigCommerce_Order_Transactions_API.oas2.json)

                        | [Storefront
                        Orders](/api-reference/orders/storefront-orders-api) |
                        View storefront order information | [Download Storefront
                        Orders
                        API](https://developer.bigcommerce.com/api-reference/orders/storefront-orders-api/BigCommerce_Storefront_Orders_API.oas2.json)

                        |
                        [Customers](/api-reference/customer-subscribers/customers-api)
                        | Manage store customers  | [Download Customers
                        API](https://developer.bigcommerce.com/api-reference/customer-subscribers/customers-api/BigCommerce_Customers_API.oas2.json)

                        |
                        [Subscribers](/api-reference/customer-subscribers/subscribers-api)
                        | Manage newsletter subscribers | [Download Subscribers
                        API](https://developer.bigcommerce.com/api-reference/customer-subscribers/subscribers-api/BigCommerce_Subscribers_API.oas2.json)

                        | [Price
                        Lists](/api-reference/price-lists/pricelists-api) |
                        Create variations of catalog pricing. | [Download Price
                        Lists
                        API](https://developer.bigcommerce.com/api-reference/catalog/pricelists-api/BigCommerce_Price_Lists_API.oas2.json)
                        |

                        | [Scripts](/api-reference/content/content-scripts-api)
                        | Add a script to a stores page | [Download Scripts
                        API](https://developer.bigcommerce.com/api-reference/storefront/content-scripts-api/BigCommerce_Scripts_API.oas2.json)

                        | [Marketing](/api-reference/marketing/marketing-api) |
                        Create and manage Coupons, Banners and Gift
                        Certificates. | [Download Marketing
                        API](https://developer.bigcommerce.com/api-reference/marketing/marketing-api/BigCommerce_Marketing_API.oas2.json)

                        | [Payment
                        Methods](/api-reference/payments/payment-methods-api) |
                        Get a list of available payment methods. | [Download
                        Payment Methods
                        API](https://developer.bigcommerce.com/api-reference/payments/payment-methods-api/BigCommerce_Payment_Methods_API.oas2.json)

                        | [Shipping](/api-reference/shipping/shipping-api) |
                        Create and manage shipping methods and zones. |[Download
                        Shipping
                        API](https://developer.bigcommerce.com/api-reference/store-management/shipping-api/BigCommerce_Shipping_API.oas2.json)

                        | [Store
                        Content](/api-reference/content/store-content-api) |
                        Mange the store's blog, web pages and redirects. |
                        [Download Store Content
                        API](https://developer.bigcommerce.com/api-reference/marketing/store-content-api/BigCommerce_Store_Content_API.oas2.json)

                        | [Themes](/api-reference/themes/themes-api) | Manage
                        store's themes. |[Download Themes
                        API](https://developer.bigcommerce.com/api-reference/storefront/themes-api/BigCommerce_Themes_API.oas2.json)
                      header:
                        anchor: about-api__available-api
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Request Headers


                        Server-to-Server request headers require Accept,
                        X-Auth-Client, X-Auth-Token and Content-Type at a
                        minimum.



                        | Header | Allowed Values | Description | Example |

                        | --- | --- | --- | --- |

                        | `Accept` | `application/json` (for .json requests)
                        `application/xml` (for .xml requests) | The MIME type
                        for the format you want to receive a response
                        in.|`application/xml` |

                        | `Content-Type` | `application/json` (for JSON
                        requests) `application/xml` (for XML requests) | The
                        MIME type of the request body. Used to validate and
                        parse the request to the API. | `application/json` |

                        | `User-Agent` | String | While it is not required, we
                        ask that you specify a user agent which identifies your
                        integration/client with your requests. |

                        | `X-Auth-Client` | String | Client ID of the requesting
                        app |

                        | `X-Auth-Token` | String | Access token authorizing the
                        app to access resources on behalf of a user |
                      header:
                        anchor: about-api_request-headers
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Response Headers 

                        ​

                        | Header | Possible Values | Description | Example |

                        | ------ | --------------- | ----------- | ------- |

                        | Date | An <a
                        href="http://tools.ietf.org/html/rfc2822#section-3.3"
                        target="_blank">RFC 2822</a> date. | The date the
                        response was sent. | `Tue, 15 Nov 2011 12:45:26 GMT` |

                        | last-modified | An <a
                        href="http://tools.ietf.org/html/rfc2822#section-3.3"
                        target="_blank">RFC 2822</a> date. | The date the
                        resource was last modified. Please refer to the
                        individual resource pages for support for this header. |
                        `Tue, 15 Nov 2011 12:45:26 GMT` |

                        | Content-Type | `application/json` | The MIME type of
                        the response, dependent on the extension of the endpoint
                        that was requested. | `application/json` |

                        | Content-Location | A URI | Sent if the request was
                        redirected. | `/api/v2/orders/5.json` |

                        | Location | A URI | The URI of a newly created
                        resource. Sent with a `201 Created` response. |
                        `/api/v2/products/7` |

                        | X-Retry-After | integer | Rate limited response,
                        indicating the number of seconds before the quota
                        refreshes. See [Rate
                        Limits](/api-docs/getting-started/basics/best-practices#best-practices_rate-limits)
                        for more information. | `15` |

                        | X-BC-ApiLimit-Remaining | integer | The number of API
                        requests remaining for the current period (rolling one
                        hour). See [Rate
                        Limits](/api-docs/getting-started/basics/best-practices#best-practices_rate-limits)
                        for more information. | `987` |

                        | X-BC-Store-Version | A version number | The version of
                        BigCommerce the store is running on. This header is
                        available on versions 7.3.6+. | ` 7.3.6` |

                        | Content-Encoding | `gzip` | Allows API clients to
                        request content to be compressed before being sent back
                        in the response to an API request. | `gzip` |

                        | Transfer-Encoding | `chunked` | Specifies the form of
                        encoding used to transfer the resource. | `chunked`

                        | X-Rate-Limit-Requests-Left | number | Details how many
                        remaining requests your client can make in the current
                        window before being rate-limited. In this case, you
                        would expect to be able to make 6 more requests in the
                        next 3000 milliseconds; on the 7th request within 3000
                        milliseconds, you would be rate-limited and would
                        receive an HTTP 429 response. | `16101491` |

                        | X-Rate-Limit-Requests-Quota | number | Shows how many
                        API requests are allowed in the current window for your
                        client. | `16101495` |

                        | X-Rate-Limit-Time-Reset-Ms  | number | Shows how many
                        milliseconds are remaining in the window. In this case,
                        3000 milliseconds – so, 3000 milliseconds after this
                        request, the API quota will be refreshed. |`30000 `|

                        | X-Rate-Limit-Time-Window-Ms | number | Shows the size
                        of your current rate-limiting window. | `9762` |
                      header:
                        anchor: about-api_response-headers
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Media Types


                        A media type is the format of the request or response
                        body. The BigCommerce API accepts requests and responds
                        in JSON. You should encode requests using the UTF-8
                        character set. (Other character sets might have
                        unpredictable results).
                      header:
                        anchor: about-api_media-types
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Content Types


                        ### Request Content Type

                        When performing a request that contains a body (eg. POST
                        or PUT), the type of content you are sending needs to be
                        specified in the Content-Type header. 


                        ### Response Content Type

                        There are two ways you can specify the type of content
                        you would like to receive. The first method is to
                        specify an Accept header. The second is to supply an
                        extension to the resource you are requesting. 


                        The priority in which these methods are processed are:

                        * Accept header high-priority types (eg. `Accept:
                        application/json`) extensions on the resource (e.g.
                        `customers.json`).

                        * Accept header low priority types (priorities less than
                        1, e.g. `Accept: application/json;q=0.9`)
                      header:
                        anchor: about-api_content-types
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Request and Response Structure


                        ### Request Structure

                        The body of a JSON request is an object containing a set
                        of key-value pairs. A simple representation of a product
                        object is:


                        ```

                        {
                             "id": 5,
                             "name": "iPod",
                             "description": "A portable MP3 music player."
                         } 
                        ```


                        ### Response Structure

                        Responses are structured similarly to requests. If a
                        request returns a single object, then the response will
                        contain a single object, containing the fields for that
                        resource.
                      header:
                        anchor: about-api_request-and-response-structure
                    - type: code
                      data: |-
                        {
                          "data": {
                            "id": 39,
                            "parent_id": 19,
                            "name": "Bath",
                            "description": "",
                            "views": 0,
                            "sort_order": 0,
                            "page_title": "",
                            "meta_keywords": [
                              ""
                            ],
                            "meta_description": "",
                            "layout_file": "category.html",
                            "image_url": "",
                            "is_visible": true,
                            "search_keywords": "",
                            "default_product_sort": "use_store_settings",
                            "custom_url": {
                              "url": "/garden/bath/",
                              "is_customized": false
                            }
                          },
                          "meta": {}
                        }
                      header:
                        title: Single Category Response
                      config:
                        mode: json
                    - type: code
                      data: |-
                        {
                          "data": [
                            {
                              "id": 19,
                              "parent_id": 0,
                              "name": "Garden",
                              "description": "<p>A collection of products for the garden.</p>",
                              "views": 0,
                              "sort_order": 2,
                              "page_title": "page title",
                              "meta_keywords": [
                                "meta keyword"
                              ],
                              "meta_description": "meta description",
                              "layout_file": "category.html",
                              "image_url": "",
                              "is_visible": true,
                              "search_keywords": "search keywords",
                              "default_product_sort": "use_store_settings",
                              "custom_url": {
                                "url": "/garden/",
                                "is_customized": false
                              }
                            },
                            {
                              "id": 20,
                              "parent_id": 0,
                              "name": "Publications",
                              "description": "",
                              "views": 0,
                              "sort_order": 4,
                              "page_title": "",
                              "meta_keywords": [
                                ""
                              ],
                              "meta_description": "",
                              "layout_file": "category_with_facets.html",
                              "image_url": "",
                              "is_visible": true,
                              "search_keywords": "",
                              "default_product_sort": "use_store_settings",
                              "custom_url": {
                                "url": "/publications/",
                                "is_customized": false
                              }
                            },
                            {
                              "id": 21,
                              "parent_id": 0,
                              "name": "Kitchen",
                              "description": "",
                              "views": 0,
                              "sort_order": 3,
                              "page_title": "",
                              "meta_keywords": [
                                ""
                              ],
                              "meta_description": "",
                              "layout_file": "category_with_facets.html",
                              "image_url": "",
                              "is_visible": true,
                              "search_keywords": "",
                              "default_product_sort": "use_store_settings",
                              "custom_url": {
                                "url": "/kitchen/",
                                "is_customized": false
                              }
                            },
                            {
                              "id": 22,
                              "parent_id": 0,
                              "name": "Utility",
                              "description": "",
                              "views": 0,
                              "sort_order": 5,
                              "page_title": "",
                              "meta_keywords": [
                                ""
                              ],
                              "meta_description": "",
                              "layout_file": "category_with_facets.html",
                              "image_url": "",
                              "is_visible": true,
                              "search_keywords": "",
                              "default_product_sort": "use_store_settings",
                              "custom_url": {
                                "url": "/utility/",
                                "is_customized": false
                              }
                            },
                            {
                              "id": 23,
                              "parent_id": 0,
                              "name": "Shop All",
                              "description": "<h1>Browse our full collection</h1>",
                              "views": 0,
                              "sort_order": 0,
                              "page_title": "",
                              "meta_keywords": [
                                ""
                              ],
                              "meta_description": "",
                              "layout_file": "category_with_facets.html",
                              "image_url": "",
                              "is_visible": true,
                              "search_keywords": "",
                              "default_product_sort": "use_store_settings",
                              "custom_url": {
                                "url": "/shop-all/",
                                "is_customized": false
                              }
                            },
                            {
                              "id": 39,
                              "parent_id": 19,
                              "name": "Bath",
                              "description": "",
                              "views": 0,
                              "sort_order": 0,
                              "page_title": "",
                              "meta_keywords": [
                                ""
                              ],
                              "meta_description": "",
                              "layout_file": "category.html",
                              "image_url": "",
                              "is_visible": true,
                              "search_keywords": "",
                              "default_product_sort": "use_store_settings",
                              "custom_url": {
                                "url": "/garden/bath/",
                                "is_customized": false
                              }
                            }
                          ],
                          "meta": {
                            "pagination": {
                              "total": 6,
                              "count": 6,
                              "per_page": 50,
                              "current_page": 1,
                              "total_pages": 1,
                              "links": {
                                "current": "?page=1&limit=50"
                              }
                            }
                          }
                        }
                      header:
                        title: Multiple Categories Response
                    - type: text
                      data: >-
                        ## Support


                        ### [Developer
                        Community](https://forum.bigcommerce.com/s/group/0F913000000HLjECAW/bigcommerce-developers)

                        This is a great place to get help from other developers
                        who work on the BigCommerce platform. If you have
                        BigCommerce specific questions this is the best place to
                        ask. It's also great for beginners to get assistance. 


                        ###
                        [StackOverflow](https://stackoverflow.com/questions/tagged/bigcommerce)

                        Are you a more experienced developer or have a
                        programming language specific question? This is a good
                        place to ask questions and get help. The developer
                        community is the best place to get answers about the
                        BigCommerce platform specifically.  
                      header:
                        anchor: about-api_get-help
              - title: Authentication
                route:
                  path: /authentication
                data:
                  blocks:
                    - type: html
                      data: "<h1>Authentication</h1>\n\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#authentication_what-are-oauth-credentials\">What are OAuth Credentials?</a></li>\n\t\t<li><a href=\"#authentication_getting-api-credentials\"> Getting API Credentials </a></li>\n\t\t<li><a href=\"#authentication_revoking-api-credentials\"> Revoking API Credentials</a></li>\n\t\t<li><a href=\"#authentication_client-id-secret\"> Getting Client ID and Client Secret</a></li>\n\t\t<li><a href=\"#authentication_when-to-use\"> Use Cases by Token Type</a></li>\n    <li><a href=\"#authentication_migration-legacy-oauth\">Migrating from Legacy to OAuth</a></li>\n\t\t<li><a href=\"#authentication_oauth-scopes\"> OAuth Scopes</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## What are OAuth Credentials?


                        BigCommerce uses [OAuth
                        authentication](https://dev.to/anabella/dancing-with-oauth-emp)
                        for all API and app usage. Currently, there are two
                        workflows to generate tokens, with different use cases. 


                        ### API Credentials

                        Credentials for making API requests are created in the
                        control panel and can only be created by the store
                        owner. Tokens created manually through the control panel
                        are referred to in this documentation as API Credentials
                        to distinguish them from tokens created
                        programmatically. API Credentials are used for testing
                        purposes and authenticating scripts, and they are tied
                        solely to the store used to generate them.


                        ### Client ID and Client Secret

                        Credentials for creating apps for sale in the
                        marketplace or private apps are created in [Dev
                        Tools](https://devtools.bigcommerce.com), the developer
                        workspace for managing apps. They are referred to as
                        Client ID and Client Secret in this documentation.  The
                        Client ID and Client Secret are used by an app to
                        generate an authorization token per store. This allows
                        your app to generate an Oauth token programmatically,
                        eliminating the need to have a merchant manually
                        generate API Credentials to connect an app to their
                        store and allowing your app to generate tokens for
                        multiple stores with a single Client ID and Secret. 
                      header:
                        anchor: authentication_what-are-oauth-credentials
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Getting API Credentials

                        You can create and manage API Credentials in the
                        BigCommerce control panel by creating an API account, as
                        described below. Only the store owner can create API
                        accounts; accounts are limited to 50 per store.


                        To create your API account and its corresponding token,
                        use the following steps:

                        1. Log into the store, using the store owner’s
                        username/password.

                        2. Select **Advanced Settings**.

                        3. Select **API Accounts**. This will display the Store
                        API Accounts page.

                        4. Select **Create API Account**. This will display the
                        Create API Account page shown above.

                        5. In the Name field, summarize the purpose for which
                        you will use these credentials. This name is for
                        internal use only, so assign any name that you will
                        recognize.

                        6. In the OAuth Scopes section, select at least the
                        minimum scopes your app will require.

                        7. Select **Save** at the page’s lower right-hand
                        corner.


                        A successful save will display a pop-up containing the
                        API credentials that your app will need to run
                        authenticated requests – your Client ID and Access
                        Token. A .txt file containing the same credentials will
                        (on most browsers) automatically download to your
                        computer. This file also contains the base API Path for
                        your store, preconfigured for the v3 API.


                        The base api path will look something like this:


                        `https://api.bigcommerce.com/stores/123456/`

                        In the base path, the store hash is the 123456. This
                        will be used to make api requests.


                        From a security perspective, these credentials are
                        sensitive – please treat them with the same caution that
                        you would treat a private key or root password


                        To get started making requests, see [API
                        Requests](/api-docs/getting-started/basics/making-requests).
                      header:
                        anchor: authentication_getting-api-credentials
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1536087816482
                      header:
                        title: Create an API Account
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          There is no way to re-display this pop-up after you
                          select Done to dismiss it. 

                          Make sure you store your credentials before dismissing
                          the popup, either by copying/pasting the contents of
                          each field or by keeping the downloaded .txt file.
                          Otherwise, you will need to repeat all the above steps
                          to generate new credentials. 
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Revoking API Credentials


                        To revoke an OAuth token, use the following steps to
                        delete the associated API account:

                        1. Log into the store, using the store owner’s
                        username/password.

                        2. Select **Advanced Settings**.

                        3. Select **API Accounts**. This will display the Store
                        API Accounts page, shown below.

                        4. In the Actions column at right, select the trash-can
                        button next to the account you want to delete.
                      header:
                        anchor: authentication_revoking-api-credentials
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1537388177603
                      header:
                        title: Revoking API Credentials
                    - type: callout
                      data:
                        type: error
                        title: Delete Carefully
                        body: >-
                          There is no undo, so be sure before you delete an
                          account. You can also use the checkboxes on the left
                          side to delete multiple accounts at once – but be
                          especially careful when using this option.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Getting Client ID and Client Secret


                        * The Client ID value uniquely identifies your app. You
                        will need to pass it in the header of all your requests
                        to the API.

                        * The Client Secret value is a secret that your app and
                        BigCommerce share. You only need to pass the Client
                        Secret value once, during the app installation sequence.
                        Thereafter, BigCommerce uses it to sign payloads in
                        load, uninstall, and remove user requests, and your app
                        uses it to verify the signature to ensure that the
                        request is coming from BigCommerce.


                        To get a Client ID and Client Secret you will need to
                        log in to Dev Tools. Dev Tools can be accessed by
                        clicking **My Apps** in the top-right corner of the
                        Developer Portal.


                        1. Click **Create an app**  

                        2. Give your app a name. This will only be visible to
                        you

                        3. A pop up box will display showing Your Profile, App
                        Summary and Category. 
                      header:
                        anchor: authentication_client-id-secret
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1537389767940
                      header:
                        title: Create an App
                    - type: text
                      data: >-
                        4. Click on **Step 3 - Technical**. Fill out the App
                        Features sections with App Type, Callback URLs and
                        Scope.
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1537389883100
                      header:
                        title: Step 3 - Technical
                    - type: text
                      data: >-
                        5. In the lower right-hand corner of the popup box,
                        click **Update & Close**.

                        6. A new pop up will show asking if you want to change
                        the OAuth Scopes. Click **Confirm Update**.

                        7. You will be routed back to the Dev Tools home page
                        and your app will be listed. Click **View Client ID**. 
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1537390078741
                      header:
                        title: View Client Id
                    - type: text
                      data: >-
                        9. Copy your Client ID and Client Secret. The Client ID
                        and Client Secret can be accessed at any time by
                        clicking **View Client ID**. 
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1537390135692
                      header:
                        title: Client Id and Client Secret
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          If you delete the app, there is no way to recover the
                          Client Id and Client Secret.
                    - type: text
                      data: >-
                        ### Next Steps


                        During the app installation process, your app will use
                        the Client Id and Client Secret to obtain an Oauth token
                        authorized against the store installing the app. For a
                        detailed look at this process, see [Building an
                        App](/api-docs/getting-started/building-apps-bigcommerce/building-apps).
                    - type: text
                      data: '---'
                    - type: text
                      data: |-
                        ## Use Cases by Token Type

                        |  | Client ID / Client Secret | API Credentials |
                        |---|:---:|:---:|
                        | From Dev Tools| X | |
                        |From Store Control Panel| | X |
                        | Single Click Apps (Marketplace)| X | |
                        | Private Apps | X |
                        | Hidden Apps | X | |
                        | Connector Apps | | X |
                        |Scripts| | X |
                        |Testing | | X |
                        | V2 | X | X |
                        | V3 | X | X |
                        |Webhooks | X | X |
                      header:
                        anchor: authentication_when-to-use
                    - type: text
                      data: '---'
                      header: {}
                    - type: text
                      data: '## Migrating from Legacy to OAuth'
                      header:
                        anchor: authentication_migration-legacy-oauth
                    - type: callout
                      data:
                        type: error
                        body: >-
                          As of July 31, 2018, new BigCommerce stores are no
                          longer able to create Legacy API Accounts (accounts
                          using HTTP Basic Auth) within their control panels.
                          Existing Legacy API Accounts will continue to work
                          until further notice, but we strongly recommend
                          migrating to OAuth as soon as possible.
                    - type: text
                      data: "### Migrating to OAuth comes with several benefits:\n\n* All OAuth requests are sent to a common hostname: `https://api.bigcommerce.com`. Using a single hostname prevents any interruption of service when the domain or SSL on a particular store changes or expires.\n\n* All of BigCommerce’s newest V3 APIs are exclusively available via OAuth.\n\n* OAuth API accounts have access to subscribe to BigCommerce’s Webhooks for real-time event notifications\n\n* The ability to use new APIs that require a shared secret, such as the Storefront Login API or the Storefront Current Customer identification endpoint.\n\n* Gzip compression on API responses to reduce bandwidth usage\n\n* Better security as all OAuth tokens are scoped to particular endpoints\n\n### How to Migrate\n\nFirst, consider whether your application should reside within the public App Marketplace, where any BigCommerce merchant can quickly discover and install it. To learn more about how to set up this kind of app, see [Becoming a Partner](/api-docs/partner/becoming-a-partner).\n\nIf you would like to update your API connection from Basic Authentication to OAuth, you will need to make the following changes:\n\n- Get a Client ID and an Access Token, by creating an API Account within the control panel. You’ll want to make sure the account has the correct Scopes for the API endpoints you need to access. We recommend that you provide the minimum scopes that your application requires to function, as a good security practice.\n- If you use one of the Client Libraries, follow the relevant guide (within the library’s documentation) for establishing an OAuth connection.\n- If you have created your connection, you’ll want to update your connection parameters:\n\t- Where you previously used the BigCommerce store’s secure hostname, you will instead use the `https://api.bigcommerce.com` gateway URL.\nAs an example, requests to `https://store-abc123.mybigcommerce.com/api/v2/orders/123` or `https://my-custom-store-domain.com/api/v2/orders/123 `would instead go to `https://api.bigcommerce.com/stores/{store_hash}/v2/orders/123`.\n- With Basic Auth, you use an Authentication HTTP Header to authenticate your connection. With OAuth, you’ll want to use two headers:\n\t- X-Client-Id for your Client ID\n\t- X-Auth-Token header for your Access Token. You can read more [here](/api-docs/getting-started/basics/authentication#authentication_what-are-oauth-credentials-1).\n\nRate limiting of API requests works differently for OAuth API connections. To become familiar with the OAuth system, please see the [Rate Limits](/api-docs/getting-started/basics/best-practices#best-practices_rate-limits)."
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## OAuth Scopes


                        Scope limits ability to read or write to data. Set the
                        scope to the minimum level needed to accomplish the task
                        at hand.


                        All OAuth scopes except `default` have `read_only`
                        scopes that allow only `GET` and `HEAD` requests.


                        - Webhooks are accessible from the default scope that is
                        available when an API Credentials are created.


                        | Scope GUI Name | Resources  | Description |

                        |---|---|---|

                        | Content | store_v2_content | View and modify store
                        content |

                        |||
                        [/v2/pages](/api-reference/content/store-content-api) |

                        ||| [/v2/blog](/api-reference/content/store-content-api)
                        |

                        |||
                        [/v2/redirects](/api-reference/content/store-content-api)
                        |

                        ||| /v3/widgets |

                        ||store_v2_content_read_only| View Site Content |

                        |||
                        [/v2/pages](/api-reference/content/store-content-api) |

                        ||| [/v2/blog](/api-reference/content/store-content-api)
                        |

                        |||
                        [/v2/redirects](/api-reference/content/store-content-api) 
                        |

                        ||| /v3/widgets |

                        | Checkout Content | store_content_checkout | View and
                        modify content on checkout pages |

                        |||
                        [/v3/scripts](/api-reference/content/store-content-api)
                        |

                        | Customers | store_v2_customers | View and modify
                        customer information |

                        |||
                        [/v2/customers]/api-reference/customer-subscribers/customers-api)
                        |

                        |||
                        [/v2/customer_groups](/api-reference/customer-subscribers/customers-api)
                        |

                        |||
                        [/v3/customers/subscribers](/api-reference/customer-subscribers/subscribers-api)
                        |

                        ||store_v2_customers_read_only|View customer information
                        |

                        |||
                        [/v2/customers](/api-reference/customer-subscribers/customers-api)
                        |

                        |||
                        [/v2/customer_groups](/api-reference/customer-subscribers/customers-api)
                        |

                        |||
                        [/v3/customers/subscribers](/api-reference/customer-subscribers/subscribers-api)
                        |

                        | Customers Login | store_v2_customers_login | Log in
                        customers to your storefront |

                        ||| [Access to the Customer Login
                        API](/api-docs/customers/customer-login-api)

                        | Information & Settings| store_v2_information | View
                        and modify general store information and settings |

                        |||
                        [/v2/shipping/methods](/api-reference/shipping/shipping-api)
                        |

                        |||
                        [/v2/shipping/zones](/api-reference/shipping/shipping-api)
                        |

                        |||
                        [/v2/shipping/carrier](/api-reference/shipping/shipping-api)
                        |

                        || store_v2_information_read_only | View general store
                        information and settings |

                        |||
                        [/v2/shipping/methods](/api-reference/shipping/shipping-api)
                        |

                        |||
                        [/v2/shipping/zones](/api-reference/shipping/shipping-api)
                        |

                        |||
                        [/v2/shipping/carrier](/api-reference/shipping/shipping-api)
                        |

                        |||
                        [/v2/payments/methods](/api-reference/shipping/shipping-api)
                        |

                        |||
                        [/v2/tax_classes](/api-reference/store/tax-classes-api)
                        |

                        |||
                        [/v2/store](/api-reference/store/store-information-api)
                        |

                        | Marketing | store_v2_marketing | View and modify
                        marketing information |

                        |||
                        [/v2/coupons](/api-reference/marketing/marketing-api) |

                        |||
                        [/v2/gift_certificates](/api-reference/marketing/marketing-api)
                        |

                        |||
                        [/v2/banners](/api-reference/marketing/marketing-api) |

                        || store_v2_marketing_read_only | View marketing
                        information |

                        |||
                        [/v2/coupons](/api-reference/marketing/marketing-api) |

                        |||
                        [/v2/gift_certificates](/api-reference/marketing/marketing-api)
                        |

                        |||
                        [/v2/banners](/api-reference/marketing/marketing-api) |

                        | Orders | store_v2_orders | View and modify orders |

                        ||| [/v2/orders](/api-reference/orders/orders-api) |

                        |||
                        [/v2/order_statuses](/api-reference/orders/orders-api) |

                        || store_v2_orders_read_only | View orders |

                        ||| [/v2/orders](/api-reference/orders/orders-api) |

                        |||
                        [/v2/order_statuses](/api-reference/orders/orders-api) |

                        | Order Transactions | store_v2_transactions_read_only |
                        View order transactions |

                        |||
                        [/v3/orders/{id}/transactions](/api-reference/orders/orders-transactions-api)
                        |

                        | Products | store_v2_products | View and modify
                        products, brands, categories and other product
                        information. |

                        ||| [/v3/catalog](/api-reference/catalog/catalog-api) |

                        |||
                        [/v3/pricelists](/api-reference/price-lists/pricelists-api)
                        |

                        || store_v2_products_read_only | View products |

                        ||| [/v3/catalog](/api-reference/catalog/catalog-api) |

                        |||
                        [/v3/pricelists](/api-reference/price-lists/pricelists-api)
                        |

                        | Themes | store_themes_manage | View and modify themes
                        |

                        ||| [/v3/themes](/api-reference/themes/themes-api) |

                        || store_themes_read_only | View themes |

                        ||| [/v3/themes](/api-reference/themes/themes-api) |

                        | Carts | store_cart | View and Modify carts |

                        |||
                        [/v3/carts](/api-reference/cart-checkout/storefront-cart-api)
                        |

                        || store_cart_read_only | View Carts |

                        |||
                        [/v3/carts](/api-reference/cart-checkout/storefront-cart-api)
                        |
                      header:
                        anchor: authentication_oauth-scopes
              - title: Filtering
                route:
                  path: /filtering
                data:
                  blocks:
                    - type: html
                      data: <h1>Filtering</h1>
                    - type: text
                      data: >-
                        To filter collections down to a particular set of items,
                        you can add filters to your request as URL query
                        parameters.


                        250 products is the maximum number of products that be
                        returned. To view more than that, a script is needed to
                        loop through each page.


                        These are the most common filter options available for
                        the V3 API: 


                        | Operator | Expression  | Example | 

                        |--|--|--|

                        | Equals/equivalency | attribute=value  |
                        `/v3/catalog/products?price=10`
                        `/v3/catalog/products?name=My Product` |

                        | Greater than or equal to (for numbers or dates) |
                        attribute:min=value  |
                        `/v3/catalog/products?price:min=10` |

                        | Less than or equal to (for numbers or dates) |
                        attribute:max=value |
                        `/v3/catalog/products?price:max=10` |

                        | Greater than (for numbers or dates)|
                        attribute:greater=value |
                        `/v3/catalog/products?price:greater=10` |

                        | Less than (for numbers or dates) |
                        attribute:less=value |
                        `/v3/catalog/products?price:less=10` |

                        | SQL LIKE operator (for strings) |
                        attribute:like=pattern |
                        `/v3/catalog/categories?name:like=Shirts` |

                        | SQL IN operator (for arrays) |
                        attribute:in=csv,list,of,values |
                        `/v3/catalog/products?categories:in=123,456` |

                        | SQL NOT IN operator (for arrays) |
                        attribute:not_in=csv,list,of,values |
                        `/v3/catalog/products?categories:not_in=123,456` |


                        Available filters vary by endpoint. Refer to the GET
                        method for an endpoint to see a list of available
                        filters.



                        ### Includes


                        Some endpoints allow an `?include` parameter to include
                        subresources and other information in the primary GET
                        response for a parent object.


                        This allows you to save API calls by getting more
                        information in a response. However, it may slow down
                        your response.


                        As an example, you can include a product's variants and
                        images with the product response:
                        `/v3/catalog/products?include=variants,images`


                        Availability of the `?include` parameter varies by
                        endpoint. Refer to the GET method for an endpoint to see
                        a list of fields that can be included.


                        ### Including and Excluding fields


                        Some endpoints support both `?include_fields` and
                        `?exclude_fields`. 


                        `include_fields` will return ONLY the specified fields
                        in the response. `exclude_fields` will omit the
                        specified fields from the response.


                        You can specify any field that is available on the
                        object. Excluding fields you don't care about
                        (especially large fields like descriptions) can speed up
                        your API request response time.



                        #### Example


                        `https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products?include_fields=name,price`


                        Here, product name and price have been included:


                        ```

                        {
                            "data": [
                                {
                                    "id": 77,
                                    "name": "Red printed scarf",
                                    "price": 12
                                }    
                            ]
                        }    

                        ```


                        ### Pagination and Limit


                        `?page` is the number of pages that are returned via
                        api. 

                        `?limit` is the number of results per page that are
                        returned.


                        ###

                        `page=2&limit=10`

                        This will return page 2 of the results with 10 items per
                        page.
              - title: Best Practices
                route:
                  path: /best-practices
                data:
                  blocks:
                    - type: html
                      data: "<h1>Best Practices</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#best-practices_integration-up-to-date\">Ensure That Your Integration is Up-to-Date</a></li>\n        <li><a href=\"#best-practices_use-webhooks\">Use Webhooks Effectively Within Your Application</a></li>\n        <li><a href=\"#best-practices_thread-api-requests\">Thread Your Requests to the BigCommerce API</a></li>\n        <li><a href=\"#best-practices_marketplace-apps\">Marketplace Apps</a></li>\n        <li><a href=\"#best-practices_rate-limits\">API Rate Limits</a></li>\n        <li><a href=\"#best-practices_platform-limits\">Platform Limits</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Ensure that your integration is up-to-date


                        BigCommerce frequently enhances its core product and is
                        actively developing v3 API endpoints. By using the
                        newest API version, you will ensure that your app has
                        access to the latest resources. You will also be better
                        positioned to provide a user experience consistent with
                        what merchants will see in their BigCommerce store’s
                        control panel. To stay up to date, bookmark our
                        [changelog](/changelog). 
                      header:
                        anchor: best-practices_integration-up-to-date
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Use webhooks effectively within your application


                        To keep data in your application up-to-date,
                        [webhooks](/api-docs/getting-started/webhooks/about-webhooks)
                        provide a great alternative to doing periodic checks. In
                        order to register a webhook event that your application
                        can listen for, you will need to use OAuth (not legacy
                        “Basic Authentication”).


                        BigCommerce will send a partial payload when a
                        subscribed event is triggered, with minimal identifying
                        details (such as the order ID when an order is created).
                        Your application could use the order ID returned in the
                        payload to make a subsequent API request for the full
                        order details.
                      header:
                        anchor: best-practices_use-webhooks
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Thread your requests to the BigCommerce API


                        In order to quickly update information in the API, you
                        can use threaded requests. Threaded requests allow you
                        to send multiple requests at one time. They can come
                        from a different open connection or multiple requests to
                        the same resource. 


                        The [BigCommerce Ruby
                        API](https://github.com/bigcommerce/bigcommerce-api-ruby)
                        client is thread-safe: It satisfies the need for
                        multiple threads to access the same shared data and the
                        need for a shared piece of data to be accessed by only
                        one thread at any given time. These attributes can
                        reduce the total time that your app will require to
                        complete a series of requests.
                      header:
                        anchor: best-practices_thread-api-requests
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Marketplace Apps


                        Merchants often have more than one person working on
                        their store. BigCommerce allows additional users to
                        access your app when the store owner has granted them
                        appropriate permissions. The requirements for supporting
                        multi-user access are:

                        * Tokens must be stored against the store_hash and not
                        against user info.

                        * Within the Dev Tools workspace, you must enable your
                        app’s Technical > Multiple Users option.


                        In the payload returned when a user launches an app,
                        users are distinguished by `owner_email` versus
                        `user_email`. If these two emails match, the user is the
                        store owner.


                        If you wish to enable user removal, you can do by
                        filling in your app’s Technical > Remove User Callback
                        URL field in Dev Tools. (Enabling user removal is
                        optional).

                        For more advanced implementations, you can enable the
                        store owner to grant specific permissions to different
                        non-admin users. For example, person1@email.com could be
                        restricted to editing product inventory but not seeing
                        orders. If you decide to include this feature in your
                        app, it’s a great feature to advertise.
                      header:
                        anchor: best-practices_marketplace-apps
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## API Rate Limits

                        Apps that authenticate with OAuth are rate-limited,
                        based on a quota that is refreshed every few seconds.
                        The maximum quota for a store will vary depending on the
                        store’s plan.


                        * Enterprise plans and Enterprise Sandboxes
                        (Enterprise-Test): Unlimited (7mil / 30sec)

                        * Pro plans: 60k per hour (450 / 30sec)

                        * All other sandboxes (Dev/Partner/Employee): 20k per
                        hour (150 / 30sec)

                        * Plus & Standard plans: 20k per hour (150 / 30sec)


                        Each request to the API consumes one available request
                        from the quota. When an app hits the quota limit,
                        subsequent requests are rejected until the quota is
                        refreshed.


                        The store’s overall quota is distributed across all apps
                        that are accessing the store at a given time. This
                        provides fairness for multiple apps that are accessing
                        the API simultaneously, preventing a single greedy app
                        from consuming the store’s entire quota by itself. The
                        quota might adjust as additional clients connect or
                        disconnect while you’re running requests. 
                      header:
                        anchor: best-practices_rate-limits
                    - type: text
                      data: >
                        ### Playing Nicely with the Platform


                        Every API response’s HTTP headers give you full
                        visibility into your position in the rate-limiting
                        algorithm:

                        ```

                        X-Rate-Limit-Requests-Left →6

                        X-Rate-Limit-Requests-Quota →25

                        X-Rate-Limit-Time-Reset-Ms →3000

                        X-Rate-Limit-Time-Window-Ms →5000

                        ```


                        | Name | Description |

                        | -- | -- |

                        | X-Rate-Limit-Time-Window-Ms| Shows the size of your
                        current rate limiting window. In this case, it’s 5000
                        milliseconds.|

                        | X-Rate-Limit-Time-Reset-Ms | Shows how many
                        milliseconds are remaining in the window. In this case,
                        3000 milliseconds. 3000 milliseconds after this request,
                        the API quota will be refreshed. |

                        | X-Rate-Limit-Requests-Quota | Shows how many API
                        requests are allowed in the current window for your
                        client. In this case, the number is 25 requests. |

                        | X-Rate-Limit-Requests-Left | Details how many
                        remaining requests your client can make in the current
                        window before being rate limited. In this case, you
                        would expect to be able to make 6 more requests in the
                        next 3000 milliseconds; on the 7th request within 3000
                        milliseconds, you would be rate limited and would
                        receive an HTTP 429 response.|


                        If your request to the API triggers a [429 Too Many
                        Requests](/api-docs/getting-started/basics/api-status-codes#api-status-codes_4-client-error)
                        response, then you know you’ve been limited.


                        The rate limited response will contain the
                        `X-Rate-Limit-Time-Reset-Ms` header, specifying a time
                        (in milliseconds) that your client must wait before its
                        quota has refreshed. Retry the request after this time
                        has elapsed, and your API service will resume as normal.
                    - type: text
                      data: "### Example of 429 Status Code\n\nWhen you see a response with an HTTP 429 status code, your client shouldn’t make any further requests until your quota has refreshed:\n\n```\nHTTP/1.1 429 Too Many Requests\n    \tDate: Mon, 03 Feb 2017 20:36:00 GMT\n    \tContent-Type: application/json\n    \tX-Rate-Limit-Time-Reset-Ms: 15000\n```\n\n\nParse the `X-Rate-Limit-Time-Reset-Ms` header to determine how long you have to wait. In this case, it would be 15000 milliseconds.\nYour client can sleep on the specified interval:\n\n```\n   $milliseconds = $response->getHeader(\"X-Rate-Limit-Time-Reset-Ms\");\n    usleep($milliseconds * 1000);\n```\n\n\nAfter waiting for the given number of milliseconds, you can go back to making API requests."
                    - type: text
                      data: >-
                        ### Making Requests in Parallel

                        You might wish to increase the amount of work your
                        application can do in a given unit of time, by sending
                        multiple HTTP requests to the BigCommerce API in
                        parallel. This is perfectly acceptable.

                        However, your application should monitor the rate
                        limiting headers to avoid an HTTP 429 response. Methods
                        for doing this might include:

                        * Slowing your rate of API requests when
                        X-Rate-Limit-Requests-Left is nearing zero.

                        * Determining an acceptable average rate of requests, by
                        dividing X-Rate-Limit-Requests-Quota by
                        X-Rate-Limit-Time-Window-Seconds, and then
                        self-throttling to that rate.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Platform Limits


                        BigCommerce does have limits on the number of products,
                        categories, brands, etc. that can be created in a store.
                        See [Platform
                        Limits](https://forum.bigcommerce.com/s/article/Platform-Limits#product-catalog-limits)
                        for more details.
                      header:
                        anchor: best-practices_platform-limits
              - title: API Status Codes
                route:
                  path: /api-status-codes
                data:
                  blocks:
                    - type: html
                      data: "<h1>API Status Codes</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#api-status-codes_2-success\">2xx Success</a></li>\n        <li><a href=\"#api-status-codes_3-redirection\">3xx Redirection</a></li>\n        <li><a href=\"#api-status-codes_4-client-error\">4xx Client Error</a></li>\n        <li><a href=\"#api-status-codes_5-server-error\">5xx Server Error</a></li>\n        <li><a href=\"#api-status-codes_troubleshooting\">Troubleshooting</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        The API responds to requests with different HTTP status
                        codes depending on the result from the request. Error
                        responses might also include an error message in the
                        body to assist in resolving the problem.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## 2xx Success 


                        2xx codes are returned for requests that were understood
                        and processed successfully.


                        | Code | Definition | Purpose |

                        | --- | --- | --- |

                        | **200** | **OK** | For successful `GET` and `PUT`
                        requests. |

                        | **201** | **Created** | For a successful `POST`
                        request. |

                        | **202** | **Accepted** | For a request that resulted
                        in a scheduled task being created to perform the actual
                        request. |

                        | **204** | **No Content** | For a successful request
                        that produced no response (such as `DELETE` requests). |
                      header:
                        anchor: api-status-codes_2-success
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ### 3xx Redirection 


                        3xx codes are returned for requests that require further
                        action.


                        | Code | Definition | Purpose |

                        | --- | --- | --- |

                        | **301** | **Moved Permanently** | When the API routes
                        have changed (unlikely), or if the incoming request is
                        not secure (`http`), the request will be redirected to
                        the secure (`https`) version. |

                        | **304** | **Not Modified** | This response will be
                        sent if the request included an `If-Modified-Since`
                        header, but the resource has *not* been modified since
                        the specified date. Please refer to individual
                        resources' documentation regarding support for the
                        `If-Modified-Since` header. |
                      header:
                        anchor: api-status-codes_3-redirection
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ### 4xx Client Error 


                        4xx codes are returned for requests that could not be
                        processed due to problems with the request or the data.


                        | Code | Definition | Purpose |

                        | --- | --- | --- |

                        | **400** | **Bad Request** | Issued when a malformed
                        request was sent. Examples are: |

                        |||*   Invalid syntax

                        |||*   Missing required data

                        |||*   Webhook requests missing `Content-Type` in the
                        HTTP header.

                        |

                        | **401** | **Unauthorized** | This response is sent
                        when your client failed to provide credentials or its
                        credentials were invalid. |

                        | **403** | **Forbidden** | Returned when permissions do
                        not allow the operation. To correct:

                        |||*   Check your app in `My Apps` to review the OAuth
                        scopes you requested, and check whether they support the
                        request that you made.

                        |||*   Changes to the store owner's account (including a
                        change to the email address) can also cause this error.
                        Roll back those changes to correct it.

                        |||*   This error can also occur when your request
                        exceeds a limit imposed on the resource in question. For
                        example, a store cannot exceed 16,000 categories. For
                        more information, see the corresponding resource's
                        documentation.

                        |

                        | **404** | **Not Found** | When a particular resource
                        doesn’t exist or couldn’t be found. |

                        | **405** | **Method Not Allowed** | The resource was
                        found, but doesn’t support the request method. Issued
                        when either a specific method isn’t yet implemented on a
                        resource, or the resource doesn’t support the method at
                        all. For example, a `PUT` on `/orders` is invalid, but a
                        `PUT` on `/orders/{_id_}` is valid. |

                        | **406** | **Not Acceptable** | When the client
                        specifies a response content type in the `Accept` header
                        that is not supported. |

                        | **409** | **Conflict** | A change requested by the
                        client is being rejected, due to a condition imposed by
                        the server. The exact reasons for this response will
                        vary from one resource to the next. An example might be
                        attempting to delete a category whose deletion would
                        cause products to be orphaned. Additional information
                        about the conflict, and about how to resolve it, might
                        be available in the response's `details` section. |

                        | **413** | **Request Entity Too Large** | When the
                        client requests too many objects. For example, the
                        `limit` parameter exceeded the maximum. |

                        | **415** | **Unsupported Media Type** | Returned due to
                        issues with the `Content-Type` header. Examples of such
                        issues are:

                        |||*   The header specifies an unsupported content type.

                        |||*   The header is missing (except with the webhooks
                        resource, which returns a 400 in this case).|

                        | **422** | **Missing or Invalid Data** | The request
                        cannot be processed either because it omitted required
                        fields or because it contained invalid data. See the
                        response for more details. |

                        | **429** | **Too Many Requests** | When an OAuth client
                        exceeds the [rate
                        limit](/api-docs/getting-started/basics/best-practices#best-practices_rate-limits)
                        for API requests to a store. |
                      header:
                        anchor: api-status-codes_4-client-error
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ### 5xx Server Error 


                        5xx codes are returned for requests that could not be
                        processed due to an internal error with the API or
                        server.


                        | Code | Definition | Purpose |

                        | --- | --- | --- |

                        | **500** | **Internal Server Error** | When an error
                        has occurred within the API. |

                        | **501** | **Not Implemented** | When a request method
                        is sent that is not supported by the API (e.g., `TRACE`,
                        `PATCH`). |

                        | **503** | **Service Unavailable** | When the store is
                        marked as “Down for Maintenance,” or the store is being
                        upgraded to a new version. |

                        | **507** | **Insufficient Storage** | When the store
                        has reached a limitation for the resource, according to
                        their BigCommerce plan (e.g., 500-product limit). |
                      header:
                        anchor: api-status-codes_5-server-error
                    - type: text
                      data: '---'
                    - type: text
                      data: "## Troubleshooting\n\n### Why am I getting 4xx/5xx errors from the API?\n* A 401 error indicates that your API call is being received but isn’t properly authenticating with our API. Either credentials are absent from the request, or we are receiving invalid credentials. Steps to resolve this:\n\t* Double-check your Access Token and Client ID.\n\t* If your credentials are valid, try sending a cURL request with the same credentials. This will test whether the problem is something within your application, rather than a credentials issue.\n* For 403 errors , there are 4 common causes:\n\t* Your app lacks the appropriate scopes to make the request that it sent. Resolution: Check the OAuth scopes that you requested, either in control panel > API Accounts or in Developer Portal’s My Apps section.\n\t* The store-owner account has changed on a store that installed your app. Resolution: This might require a reinstall by the new store owner, or a rollback of the store-owner changes.\n\t* Your API request exceeded an enforced platform limit. Among other limits, each store is limited to a maximum of 30,000 brands and 16,000 categories. For more information about these limits, see either the API resource you are using or our support documentation on platform limits.\n\t* Check your URL paths. An incorrect path can sometimes trigger a 403 error.\n* 500 errors almost always indicate an internal server error on BigCommerce’s side. Steps to resolve these:\n\t* Re-attempt the request three to five times, with increasing delays of at least a minute between attempts.\n\t* Check our status page.\n\t* 500 errors can also be caused by particularly expensive API calls. To avoid these errors on stores with very complex data, try reducing how many objects you are requesting. In the v2 API, you can request fewer objects by using ?limit={count}. In either the v2 or v3 API, you can request fewer objects by excluding certain fields or only requesting certain fields.\n\t\n### Why am I getting an HTTP 204 or 301/302 response to an API request?\n* Double-check the URL to which you are making an API request. If the response code is 301/302, try the WWW or non-WWW version of the URL."
                      header:
                        anchor: api-status-codes_troubleshooting
              - title: Building Apps With BigCommerce
                route:
                  path: /building-apps-bigcommerce
                data:
                  children:
                    - title: Types of Apps
                      route:
                        path: /types-of-apps
                      data:
                        blocks:
                          - type: html
                            data: "<h1>Types of Apps</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#types-of-apps_single-click-apps\"> Single Click Apps</a></li>\n\t\t<li><a href=\"#types-of-apps_connector-apps\"> Connector Apps</a></li>\n\t\t<li><a href=\"#types-of-apps_unlisted-marketplace-apps\"> Unlisted Marketplace Apps</a></li>\n\t\t<li><a href=\"#types-of-personal_apps\"> Personal Apps</a></li>\n\t\t<li><a href=\"#types-of-apps_scripts\"> Scripts</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Single Click Apps


                              Single-click apps are listed in our App
                              Marketplace, making them available for
                              installation on all BigCommerce stores. The
                              “single-click” app flow does not mean users
                              install the app in a single click, but rather, the
                              app does not require the customer to install OAuth
                              credentials themselves or configure any settings
                              for a third party service.


                              To put an app on the Marketplace, you must first
                              be a BigCommerce partner and have your app
                              approved through the App Submission Process. After
                              becoming a partner and having the app approved you
                              have the option of charging merchants to use the
                              app.

                              Single-click apps use the Client ID and Client
                              Secret obtained from the Dev Tools workspace to
                              request an OAuth token during the [single-click
                              app authentication
                              flow.](/api-docs/getting-started/building-apps-bigcommerce/building-apps#building-apps_oauth-summary)
                            header:
                              anchor: types-of-apps_single-click-apps
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Connector Apps


                              Some apps qualify to be listed in the BigCommerce
                              App Marketplace as “Connector” apps. These apps
                              use manual OAuth token creation instead of the
                              single-click app flow.

                              While we always recommend and prefer the
                              single-click app flow’s programmatic OAuth
                              exchange, certain use cases might not be
                              compatible. 


                              Use Cases:

                              - Customized integrations that vary per store.

                              - Integrations that do not provide any content for
                              an iframe.

                              - Apps that do not provide Web services for OAuth
                              exchange. (For example: offline sync apps.)

                              - Apps that do not provide Web or cloud-hosted
                              components for a dashboard.
                            header:
                              anchor: types-of-apps_connector-apps
                          - type: callout
                            data:
                              body: >-
                                Connector apps require the store owner to create
                                API Credentials in the Control Panel and then
                                pass those values into the app manually. The
                                single-click installation process is preferred
                                since it does not require this step.
                          - type: text
                            data: >-
                              To create a connector app that uses manual OAuth
                              token creation, make the following selections on
                              the Technical tab when registering your app in Dev
                              Tools:


                              1. Set the App Type option to Connector.

                              2. Enter your app’s Signup URL. This is the URL
                              where a user would begin to configure the
                              connection between your service and the
                              BigCommerce store.

                              3. Under OAuth scopes, select the scopes that your
                              app requires for BigCommerce review only. Later,
                              you will need to instruct store users to create a
                              token with the production scopes your app needs.


                              BigCommerce must review and approve your connector
                              app proposal before we will accept the app’s
                              submission to the Marketplace.


                              If you’re interested in submitting your
                              integration as a connector app, please contact out
                              to <a
                              href="mailto:appstore@bigcommerce.com">appstore@bigcommerce.com</a>.
                              to discuss your plan.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Unlisted Marketplace Apps


                              Approved partners have the option of uploading
                              “unlisted” apps to the App Marketplace. An
                              unlisted app is a published app that does not show
                              up in the public BigCommerce marketplace. To
                              create an unlisted app, you need to be a
                              BigCommerce Partner.


                              Use Cases:

                              - A partner is beta-testing an integration before
                              a full Marketplace launch.

                              - A BigCommerce user with several stores wants to
                              install a custom app on all of them. Submitting an
                              unlisted app offers a streamlined alternative to
                              creating separate draft or test apps for each
                              store. To have an app unlisted, please contact
                               <a href="mailto:appstore@bigcommerce.com">appstore@bigcommerce.com</a>.
                            header:
                              anchor: types-of-apps_unlisted-marketplace-apps
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Personal Apps


                              In some cases, you might want to create an app
                              that uses the Single-click Oauth flow to install
                              in a merchant’s control panel, but you do not want
                              to list the app for sale in the App Marketplace.
                              Personal Apps are draft apps, created from the
                              [Dev Tools](https://devtools.bigcommerce.com/)
                              workspace, that are never published to the App
                              Marketplace and remain in draft status
                              permanently.


                              Use Cases:

                              - You are creating a custom application for a
                              single merchant’s store.

                              - You are testing your app before submission, and
                              it doesn’t need to be distributed to other stores.


                              To install a Personal app on a store, your Dev
                              Tools login credentials must be the same as the
                              store owner login credentials for the store where
                              you intend to install the app.
                            header:
                              anchor: types-of-personal_apps
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Scripts


                              You may wish to write a small program that can
                              make requests against a store’s API that does not
                              install in the store’s control panel. Scripts
                              connect to a store solely through API credentials:
                              they don’t install in the control panel or present
                              a UI to the user.


                              To get started with writing scripts, all you need
                              are API Credentials from the store’s Control
                              Panel.  Learn more about [making your first
                              request](/api-docs/getting-started/basics/making-requests)
                              with the BigCommerce API. 
                            header:
                              anchor: types-of-apps_scripts
                    - title: Building an App
                      route:
                        path: /building-apps
                      data:
                        blocks:
                          - type: html
                            data: "<h1>Building an App</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#building-apps_oauth-summary\">OAuth Summary</a></li>\n\t\t<li><a href=\"#building-apps_request-headers\">Request Headers</a></li>\n\t\t<li><a href=\"#building-apps_session-timeouts\">Managing Users Session Timeouts</a></li>\n\t\t<li><a href=\"#building-apps_installation-update-sequence\">App Installation and Update Sequence</a></li>\n\t\t<li><a href=\"#building-apps_recieving-get-request\">Receiving the GET Request</a></li>\n\t\t<li><a href=\"#building-apps_responding-get-request\">Responding to the GET Request</a></li>\n        <li><a href=\"#building-apps_making-post-request\">Making the POST Request</a></li>\n        <li><a href=\"#building-apps_recieving-post-request\">Receiving the POST Response</a></li>\n        <li><a href=\"#building-apps_load-uninstall-removal-requests\">Load, Uninstall, and User Removal Requests</a></li>\n        <li><a href=\"#building-apps_processing-signed-payload\">Processing the Signed Payload</a></li>\n        <li><a href=\"#building-apps_multi-user-support\">Multi-User Support</a></li>\n    <li><a href=\"#building-apps_external-app-installation\">External App Installation</a></li>\n    <li><a href=\"#building-apps_user-interface-constraints\">User Interface Constraints<a/></li>\n    <li><a href=\"#hosting-your-app\">Hosting Your App </a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## OAuth Summary


                              API token creation is a permission reserved for
                              the [store
                              owner](https://forum.bigcommerce.com/s/article/Store-API-Accounts#creating)
                              user account. An app can request authentication
                              “on behalf” of a store owner, allowing the app to
                              make API requests against store data.


                              To test an app before release, apply for a
                              [sandbox](https://www.bigcommerce.com/partners/)
                              store.
                               
                              - When a merchant clicks your app's Install button
                              in the control panel, a [/GET
                              request](#building-apps_recieving-get-request) is
                              sent to your app's [Auth callback
                              URL](#building-apps_recieving-get-request). 

                              - The /GET request sent from BigCommerce contains
                              a `code` or temporary access token, `client_id`,
                              `client_secret`, `scopes` and [other
                              information](#building-apps_recieving-get-request).
                              Your Auth Callback URL needs to be served over
                              https. You should also have access to your app's
                              server logs which will allow you to see the
                              information in the request.

                              - Your app needs to
                              [respond](#building-apps_responding-get-request)
                              to the /GET  with HTML that will be rendered in an
                              iframe in the store's control panel.

                              - Your app then needs to make a /POST request back
                              to BigCommerce that contains the code, client_id
                              and client secret. This should be done
                              programmatically. 

                              - BigCommerce will respond with a permanent Oauth
                              token authorized against the store that has
                              installed your app.

                              - After installation, the store_hash and
                              access_token should be stored somewhere secure so
                              the app does not lose its authorization. 



                              ### FAQ's

                              **How can I make API calls?**   

                              We have built several [Hello
                              World](/tools-resources) apps to get you started
                              quickly. You can use these apps as a starting
                              point or an example for building a Single-click
                              app. 


                              If you'd like to make test API requests without
                              the overhead of installing a draft app, you can
                              generate [API
                              Credentials](/api-docs/getting-started/basics/authentication#authentication_getting-api-credentials)
                              by creating an API Account in your store's control
                              panel.


                              **How can I sell my app?**  

                              The first step to listing an app in the
                              BigCommerce App Marketplace is to apply to the
                              BigCommerce [partner
                              program](https://www.bigcommerce.com/partners/). 


                              For more details on including your app in the
                              Marketplace, see [App Store Approval
                              Requirements](/api-docs/partner/app-store-approval-requirements).


                              **Need a deeper dive on app installation?**  

                              Keep reading below.
                            header:
                              anchor: building-apps_oauth-summary
                          - type: text
                            data: >-
                              ## Request Headers


                              API requests are authenticated by the following
                              HTTP headers:


                              ```

                              X-Auth-Client: The Client ID of the requesting
                              app. 

                              X-Auth-Token: Access token authorizing an app to
                              access store data on behalf of a user

                              ```


                              In addition, while not all resources require the
                              Accept and Content-Type headers, many do. To
                              ensure that your calls succeed, always include
                              these headers. For more details on request headers
                              and their accepted values, see [Request
                              Headers](/api-docs/getting-started/basics/api-environment#api-environment_request-headers).
                            header:
                              anchor: building-apps_request-headers
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Managing Users Session Timeouts


                              We recommend that you add BigCommerce’s JavaScript
                              SDK to your Single-Click Apps, to protect your
                              apps’ users from getting logged out of the
                              BigCommerce control panel after a period of
                              idleness. To include our SDK, add this script tag
                              to your Single-Click App:

                              `<script
                              src="//cdn.bigcommerce.com/jssdk/bc-sdk.js">`



                              Optionally, you can pass a logout callback
                              function within the initialization call:


                              ```

                              Bigcommerce.init({
                                    onLogout: callback
                              });

                              ```



                              This callback function will run when the user
                              explicitly logs out of the BigCommerce control
                              panel, or is automatically logged out. The
                              callback will allow your app to respond to this
                              logout appropriately.
                            header:
                              anchor: building-apps_session-timeouts
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## App Installation and Update Sequence


                              The purpose of the App Installation sequence is to
                              obtain an Oauth token for the store installing the
                              app, using the Client ID and Secret from Dev
                              Tools. 


                              A user kicks off the installation or update
                              sequence from within a store's control panel by
                              clicking the “Install” button from your app
                              details page, or by clicking an installed app to
                              update its scopes. BigCommerce redirects the user
                              to the Auth Callback URI provided during app
                              registration. The Auth Callback URI must be
                              publicly available, fully qualified, and served
                              over TLS.
                            header:
                              anchor: building-apps_installation-update-sequence
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1536263813949
                            header:
                              title: App Installation Sequence
                          - type: text
                            data: >-
                              ### Handling Requests Securely


                              The request comes from the client browser, rather
                              than directly from BigCommerce. This allows you to
                              use a non-publicly-available Auth Callback URI
                              while testing your app.


                              For security, Auth and Load callbacks should be
                              handled server-side. If you are building a
                              client-side application (such as an AngularJS
                              Single Page App), you should handle Auth and Load
                              callbacks outside that application. Use a separate
                              service that accepts the Auth and Load callback
                              requests, generates tokens, validates requests,
                              and then redirects the user to your client-side
                              app’s entry point.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Receiving the GET Request


                              The GET request to your Auth Callback URI contains
                              a temporary code that you can exchange for a
                              permanent OAuth token. It also includes a unique
                              value that identifies the store installing or
                              updating your app, as well as authorized scopes.


                              The following table details the full list of
                              parameters and values included in the GET request
                              from BigCommerce to your Auth Callback URI.
                              BigCommerce passes these within the URI itself as
                              query parameters.


                              | Parameter | Description |

                              | --- | --- |

                              | code | Temporary code to exchange for a
                              permanent OAuth token. See [Making the POST
                              request](#building-apps_making-post-request) below
                              for more information about this exchange. |

                              | scope | List of scopes authorized by the user.
                              As a best practice, your app should validate this
                              list to ensure that it matches the app&#39;s
                              needs, and fail if it does not. However, at this
                              time, the user does not have any opportunity to
                              pick and choose between scopes. The dialog
                              presented to the user requires the user to approve
                              all scopes or none. |

                              | context | The store hash: a unique value that
                              identifies the store on which a logged-in user has
                              clicked to install or your app. BigCommerce passes
                              this along with a context path, as follows:
                              `stores/{store_hash}`. Save the store hash value,
                              because you will need to pass it in all your
                              requests to the API. |


                              ### Example – Initial Installation


                              This example initiates the token exchange, with a
                              requested scope of store_v2_orders:


                              ```

                              GET
                              /auth?code=qr6h3thvbvag2ffq&scope=store_v2_orders&context=stores/g5cd38
                              HTTP/1.1  

                              Host: app.example.com

                              ```



                              ### Example – Updating Scopes

                              The following example requests a scope of
                              store_v2_products, in addition to the initially
                              requested scope of store_v2_orders:


                              ```

                              GET
                              /auth?code=qr6h3thvbvag2ffq&scope=store_v2_orders+store_v2_products&context=stores/g5cd38
                              HTTP/1.1  

                              Host: app.example.com

                              ```
                            header:
                              anchor: building-apps_recieving-get-request
                          - type: callout
                            data:
                              body: >-
                                Note that when your app receives a new token,
                                any previously issued token is invalidated.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Responding to the GET Request


                              Upon receiving the GET request at your Auth
                              Callback URI, your app should return some HTML to
                              the merchant browser. BigCommerce renders this in
                              an iframe inside of the control panel. It could be
                              a form that collects further information from the
                              user, or you could redirect the user to your app’s
                              main page. If you do not pass back some HTML, the
                              user will be left looking at a blank screen. Such
                              an app would not be accepted into the App
                              Marketplace.
                            header:
                              anchor: building-apps_responding-get-request
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Making the POST Request


                              The POST request’s primary purpose is to exchange
                              the temporary access code for a permanent OAuth
                              token. However, your app must pass a number of
                              additional values to accomplish the exchange. Pass
                              the parameters and their values inside the request
                              body, using query parameters and URL-encoding. To
                              achieve this, you must include one of the
                              following HTTP headers:


                              `Content-Type: application/x-www-form-urlencoded`
                              or `Content-Type: application/json`


                              Make the POST request to the following address:
                              `https://login.bigcommerce.com/oauth2/token`


                              ### Initial Installation


                              During initial installation, upon receiving the
                              POST, BigCommerce marks the status of your app as
                              “Installed”, removes the progress-indicator
                              overlay, and places your app icon in the control
                              panel’s left-hand navigation. With the
                              progress-indicator overlay removed, the user can
                              interact with the HTML that you returned in your
                              GET response.
                            header:
                              anchor: building-apps_making-post-request
                          - type: callout
                            data:
                              body: >-
                                During app updates, upon receiving the POST,
                                BigCommerce removes the update prompt from the
                                control panel.
                          - type: text
                            data: >-
                              ### Parameters


                              Include values for each of the following
                              parameters.


                              | Parameter | Description |

                              | --- | --- |

                              | client_id | The Client ID for your app, obtained
                              during
                              [registration](/api-docs/getting-started/basics/authentication#authentication_client-id-secret).
                              |

                              | client_secret | The Client Secret for your app,
                              obtained during
                              [registration](/api-docs/getting-started/basics/authentication#authentication_client-id-secret).
                              |

                              | code | Temporary access code received in the
                              [GET
                              request](/api-docs/getting-started/building-apps-bigcommerce/building-apps#building-apps_recieving-get-request)
                              discussed above. |

                              | scope | List of OAuth scopes received in the
                              [GET
                              request](/api-docs/getting-started/building-apps-bigcommerce/building-apps#building-apps_recieving-get-request)
                              discussed above. |

                              | grant_type | Always use the following:
                              authorization_code. |

                              | redirect_uri | Must be identical to your
                              registered Auth Callback URI. |

                              | context | The store hash received in the [GET
                              request](/api-docs/getting-started/building-apps-bigcommerce/building-apps#building-apps_recieving-get-request),
                              in the format: `stores/{_store_hash_}` |


                              ### Examples – Initial Installation
                          - type: code
                            data: >-
                              POST /oauth2/token HTTP/1.1

                              Host: login.bigcommerce.com

                              Content-Type: application/x-www-form-urlencoded

                              Content-Length: 186

                              client_id={CLIENT_ID}&client_secret={CLIENT_SECRET}&code=qr6h3thvbvag2ffq&scope=store_v2_orders&grant_type=authorization_code&redirect_uri=https://app.example.com/oauth&context=stores/{STORE_HASH}
                            header:
                              title: HTTP
                            config:
                              mode: http
                          - type: code
                            data: >-
                              use Bigcommerce\Api\Connection;

                              $tokenUrl =
                              "https://login.bigcommerce.com/oauth2/token";

                              $connection = new Connection();

                              $connection->useUrlencoded();

                              $response = $connection->post($tokenUrl, array(
                                  "client_id" => "CLIENT_ID",
                                  "client_secret" => "CLIENT_SECRET",
                                  "redirect_uri" => "https://app.example.com/oauth",
                                  "grant_type" => "authorization_code",
                                  "code" => $request->get("code"),
                                  "scope" => $request->get("scope"),
                                  "context" => $request->get("context"),
                              ));

                              $token = $response->access_token;
                            header:
                              title: PHP
                            config:
                              mode: php
                          - type: text
                            data: >-
                              ### Examples – Updating Scopes


                              The following examples request a scope of
                              store_v2_products, in addition to the initially
                              requested scope of store_v2_orders:
                          - type: code
                            data: >-
                              POST /oauth2/token HTTP/1.1

                              Host: login.bigcommerce.com

                              Content-Type: application/x-www-form-urlencoded

                              Content-Length: 186

                              client_id={CLIENT_ID}&client_secret={CLIENT_SECRET}&scope=store_v2_orders+store_v2_products&grant_type=authorization_code&redirect_uri=https://app.example.com/oauth&context=stores/{STORE_HASH}
                            header:
                              title: HTTP
                            config:
                              mode: http
                          - type: code
                            data: >-
                              use Bigcommerce\Api\Connection;

                              $tokenUrl =
                              "https://login.bigcommerce.com/oauth2/token";

                              $connection = new Connection();

                              $connection->useUrlencoded();

                              $response = $connection->post($tokenUrl, array(
                                  "client_id" => "CLIENT_ID",
                                  "client_secret" => "CLIENT_SECRET",
                                  "redirect_uri" => "https://app.example.com/oauth",
                                  "grant_type" => "authorization_code",
                                  "code" => $request->get("code"),
                                  "scope" => $request->get("scope"),
                                  "context" => $request->get("context"),
                              ));


                              $token = $response->access_token;
                            header:
                              title: PHP
                            config:
                              mode: php
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Receiving the POST Response


                              The POST response will include a JSON object
                              containing the permanent OAuth token, user
                              information, and other values. Upon receiving the
                              permanent OAuth token, store it securely. You
                              should also store the user and store hash values,
                              to identify the user and store at load and
                              uninstall. The following sections detail the
                              contents of the JSON body.


                              ### JSON Values

                              | Name | Data Type | Value Description |

                              | --- | --- | --- |

                              | access_token | string | The permanent OAuth
                              token that your app can use to make requests to
                              the Stores API on behalf of the user. Store this
                              value securely. |

                              | scope | string | List of authorization scopes. |

                              | id | integer | Unique identifier for the user.
                              Store this value to identify the user at load and
                              uninstall. |

                              | email | string | The user’s email address. Store
                              this value to identify the user at load and
                              uninstall. |

                              | context | string | The store hash, as well as a
                              base path: `stores/{_store_hash_}` |
                            header:
                              anchor: building-apps_recieving-post-request
                          - type: code
                            data: |-
                              {
                                "access_token": "ACCESS_TOKEN",
                                "scope": "store_v2_orders",
                                "user": {
                                  "id": 24654,
                                  "email": "merchant@mybigcommerce.com"
                                },
                                "context": "stores/STORE_HASH"
                              }
                            header:
                              title: Initial Installation
                              subtitle: JSON
                            config:
                              mode: json
                          - type: text
                            data: >-
                              Update requests will refresh the payload’s
                              access_token and scope values. Here again, the
                              following example requests a scope of
                              store_v2_products, in addition to the initially
                              requested scope of store_v2_orders:
                          - type: code
                            data: |-
                              {
                                "access_token": "ACCESS_TOKEN",
                                "scope": "store_v2_orders store_v2_products",
                                "user": {
                                  "id": 24654,
                                  "email": "merchant@mybigcommerce.com"
                                },
                                "context": "stores/STORE_HASH"
                              }
                            header:
                              subtitle: JSON
                              title: Updating Scopes
                            config:
                              mode: json
                          - type: text
                            data: '---'
                          - type: text
                            data: "## Load, Uninstall, and User Removal Requests\nIn addition to the Auth Callback URI, the following URI’s are required for BigCommerce Apps:\n\n| Name | Required? | Event Discussion |\n| --- | --- | --- |\n| Load Callback URI | Yes | Called when the store owner or user clicks to load your app. |\n| Uninstall Callback URI | No | Called when the store owner clicks to uninstall your app. |\n| Remove User Callback URI | No | Called when the store admin revokes a user's access to your app. |\n\nEach event listed here triggers a GET request from BigCommerce containing a signed payload that allows your app to:\n- Verify that the request came from BigCommerce.\n- Identify the store.\n- Identify the store owner or user.\n\n### Load Request and Response\n\nOnce your app has been installed, the store owner or user can click its icon in the control panel to launch it. This causes BigCommerce to send a GET request to the Load Callback URI that you provided during app registration. In a production environment, the Load Callback URI must be publicly available, fully qualified, and served over TLS/SSL.\n\n```\nThe GET request contains a signed payload, as shown below.\nGET /load?signed_payload=hw9fhkx2ureq.t73sk8y80jx9 HTTP/1.1\nHost: app.example.com\n```\n\nUpon receiving a GET request to the Load Callback URI, your app needs to [process the signed payload](#building-apps_processing-signed-payload). After processing the payload, your app returns its user interface as HTML. BigCommerce renders this inside of an iframe. Please see [User Interface Constraints](#building-apps_user-interface-constraints) for important information about your app’s user interface.\n\n### Uninstall Request (Optional)\n\nStore owners have the option to uninstall any app at any time. When a store owner uninstalls an app, the app’s OAuth token is revoked and the app cannot make requests to the Stores API on the store’s behalf anymore.\n\nYou do not need to provide an Uninstall Callback URI. The lack of an Uninstall Callback URI does not prevent uninstallation. Instead, the Uninstall Callback URI allows you to track store owners who uninstall your app and to run cleanup operations, such as removing the store’s user accounts from your system.\n\nShould you choose to avail of this option and provide an Uninstall Callback URI, please note that it must be publicly available, fully qualified, and served over TLS/SSL. If provided, BigCommerce will send a GET request to your Uninstall Callback URI when a store owner clicks to uninstall your app.\n\nExample of a GET Request sent to the Uninstall Callback URI\n```\nGET /uninstall?signed_payload=hw9fhkx2ureq.t73sk8y80jx9 HTTP/1.1\n\tHost: app.example.com\n```\nUpon receiving the GET request, your app will need to process the signed payload."
                            header:
                              anchor: building-apps_load-uninstall-removal-requests
                          - type: callout
                            data:
                              body: >-
                                Any HTML that you return in your response will
                                not be rendered.
                          - type: text
                            data: >-
                              ### Remove User Request (Optional)


                              If you have not enabled
                              [multi-user](#building-apps_multi-user-support)
                              support, you will not provide a Remove User
                              Callback URI and can ignore this section. If you
                              enable multi-user support, you can optionally
                              specify a Remove User Callback URI. It must be
                              fully qualified, publicly available, and served
                              over TLS/SSL. BigCommerce will send a GETrequest
                              to your Remove User Callback URI when a store
                              admin revokes a user’s access to your app. 


                              Example of a Get Request sent to the Remove User
                              URI


                              ```

                              GET
                              /remove-user?signed_payload=hw9fhkx2ureq.t73sk8y80jx9
                              HTTP/1.1

                              Host: app.example.com

                              ```


                              Upon receiving the GET request, your app will need
                              to process the signed payload.
                          - type: callout
                            data:
                              body: >-
                                Any HTML that you return in your response will
                                not be rendered.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Processing the Signed Payload


                              Processing the signed payload involves splitting
                              and decoding it, verifying the HMAC signature, and
                              processing the JSON object.


                              ### Splitting and Decoding the Signed Payload


                              The signed payload is a string containing a base64
                              url-encoded JSON string and a base64 url-encoded
                              HMAC signature. The parts are delimited by the `.`
                              character:


                              ```

                              encoded_json_string.encoded_hmac_signature

                              ```



                              To decode the signed payload, complete the
                              following steps:

                              1. Split signed_payload into its two parts at the
                              `.` delimiter.

                              2. Decode encoded_json_string using base64url.

                              3. Convert the decoded JSON string into an object.
                              See Processing the JSON object for more about this
                              object.

                              4. Decode encoded_hmac_signature using base64url.

                              5. Use your client secret to verify the signature.
                              See the next section for more details.


                              ### Verifying the HMAC Signature


                              To verify the payload, you need to sign the
                              payload using your client secret, and confirm that
                              it matches the signature that was sent in the
                              request.
                            header:
                              anchor: building-apps_processing-signed-payload
                          - type: callout
                            data:
                              body: >-
                                To limit the vulnerability of your app to timing
                                attacks, we recommend using a constant
                                time-string comparison function, rather than the
                                equality operator, to check that the signatures
                                match.
                          - type: code
                            data: |-
                              function verifySignedRequest($signedRequest)
                              {
                                  list($encodedData, $encodedSignature) = explode('.', $signedRequest, 2);

                                  // decode the data
                                  $signature = base64_decode($encodedSignature);
                                      $jsonStr = base64_decode($encodedData);
                                  $data = json_decode($jsonStr, true);

                                  // confirm the signature
                                  $expectedSignature = hash_hmac('sha256', $jsonStr, $clientSecret(), $raw = false);
                                  if (!hash_equals($expectedSignature, $signature)) {
                                      error_log('Bad signed request from BigCommerce!');
                                      return null;
                                  }
                                  return $data;
                              }
                            header:
                              title: verifySignedRequest
                            config:
                              mode: php
                          - type: callout
                            data:
                              body: >-
                                !hash_equals is available in PHP 5.6 and later.
                                If you are running an older version of PHP, pull
                                in a compatibility library such as the
                                following:
                                https://packagist.org/packages/realityking/hash_equals.
                                BigCommerce’s sample app
                                hello-world-app-php-silex app does this
                                automatically.
                          - type: code
                            data: |
                              require "base64"
                              require "openssl"

                              def verify(signed_payload, client_secret)
                                message_parts = signed_payload.split(".")

                                encoded_json_payload = message_parts[0]
                                encoded_hmac_signature = message_parts[1]

                                payload_object = Base64.strict_decode(encoded_json_payload)
                                provided_signature = Base64.strict_decode(encoded_hmac_signature)

                                expected_signature = OpenSSL::HMAC::hexdigest("sha256", client_secret, payload_object)

                                return false unless secure_compare(expected_signature, provided_signature)

                                JSON.parse(payload_object)
                              end

                              def secure_compare(a, b)
                                return false if a.blank? || b.blank? || a.bytesize != b.bytesize
                                l = a.unpack "C#{a.bytesize}"

                                res = 0
                                b.each_byte { |byte| res |= byte ^ l.shift }
                                res == 0
                              end
                            header:
                              title: verify()
                            config:
                              mode: ruby
                          - type: text
                            data: >-
                              ### Processing the JSON Object


                              The JSON object embedded in the signed_payload
                              contains information about the BigCommerce store
                              and the store owner or user.


                              ### Identifying the Store

                              You should use the store information endpoint to
                              identify the store to which the request pertains.


                              ### Interpreting the User Information


                              Interpreting the user information varies as
                              follows:


                              | Request type | Multiple users enabled | Multiple
                              users not enabled |

                              | --- | --- | --- |

                              | Load | Compare the user information to see if it
                              matches that of the store owner, received at the
                              time of [app
                              installation](#building-apps_installation-update-sequence)
                              or that of an existing user. If the user
                              information does not match either of these, then
                              it represents a new user that you should add to
                              your database or other storage. | The information
                              should match that of the store owner, received at
                              the time of [app
                              installation](#building-apps_installation-update-sequence).
                              |

                              | Uninstall | The user information should match
                              that of the store owner. Only the store owner can
                              uninstall your app. | Should match the store
                              owner. |

                              | Remove user | The user information should match
                              one of the users that you have stored. After
                              locating the stored user, delete it from your
                              database or other storage. | N/A |


                              ### JSON Values


                              | Name | Data Type | Value Description |

                              | --- | --- | --- |

                              | user.id | integer | Unique identifier for the
                              user who initiated the callback. |

                              | user.email | string | Email address of the user
                              who initiated the callback. |

                              | owner.id | integer | Unique identifier for the
                              user listed as the store owner. |

                              | owner.email | string | Email address of the user
                              listed as the store owner. |

                              | context | string | The context value is part of
                              the API path for this store and includes the
                              store_hash. |

                              | store_hash | string |Unique identifier for the
                              store. |

                              | timestamp | float | The time (in Unix time) when
                              the callback was generated.|
                          - type: code
                            data: |-
                              {
                                  "user":
                                       {
                                      "id":9128,
                                      "email":"user@mybigcommerce.com"
                                   },
                                   "owner":
                                        {
                                       "id":9128,
                                       "email":"user@mybigcommerce.com"
                                   },
                                   "context":"stores/z4zn3wo",
                                   "store_hash":"z4zn3wo",
                                   "timestamp":1469823892.9123988
                              }
                            header:
                              title: User Information
                            config:
                              mode: json
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Multi-User Support


                              When you register your app with BigCommerce,
                              enabling multi-user support will allow store
                              admins to manually authorize users – other than
                              the store owner – to load the app. 


                              As soon as you enable multi-user support, the
                              control panel of any store that has your app
                              installed will be affected. If you already have an
                              app published in the App Marketplace, be aware
                              that this setting takes effect immediately.
                              Therefore, we recommend testing your multi-user
                              support using a separate app that is in draft
                              status.


                              Let your customers know that you’ve enabled this
                              feature. Otherwise, they won’t know that they can
                              start granting access to users.


                              If multi-user support is added after your app has
                              launched, the update will cause the app scopes to
                              change and users will be alerted of the new
                              permission request.


                              ### The Control Panel Experience

                              Store admins will be able to adjust user
                              permissions to grant/deny other store users’
                              access to your app. The next time the user logs
                              in, they will see any apps for which they have
                              been granted access. The user can then click on
                              the app icon in the left navigation to load it.

                              Use your draft app and your sandbox store to
                              review this behavior.


                              ### The Load Request

                              Apps that support multiple users can expect the
                              email and ID of the user that initiated the
                              callback in addition to the owner’s email and ID
                              in the JSON object sent in the load request. If a
                              load request is sent with information for a user
                              you haven’t seen yet, you should provision the
                              user account and associate it with the store in
                              your database.


                              Because you know the store owner’s email and ID
                              from the App Installation sequence, your app can
                              distinguish store owners from other users. This
                              allows you to provide different user experiences
                              based on the information in the load request. Here
                              is a summary of the two types of users:


                              - Store owner: Can install, uninstall, and load
                              apps.

                              - Users: Cannot install or uninstall apps.
                              Permitted only to load the apps that a store admin
                              has authorized.


                              For further details, please see [Load Request and
                              Response](#building-apps_load-uninstall-removal-requests).


                              ### The Remove User Request

                              In addition to their ability to add users, store
                              admins can also remove users. This action
                              generates a GET request to the Remove User
                              Callback URI that you provided in My Apps. Your
                              app should delete from its records the user
                              identified in the request.


                              For further information, please see [Remove User
                              Request](#building-apps_load-uninstall-removal-requests).
                            header:
                              anchor: building-apps_multi-user-support
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## External App Installation


                              Apps can be installed from outside the BigCommerce
                              control panel. For example, you could create an
                              install link on your company’s site that directs
                              the merchant to download your app. This section
                              provides a step-by-step guide.


                              ### Create an Install Button


                              First, embed an install button like the one below,
                              at any Web location from which you’d like to
                              enable app installation:
                            header:
                              anchor: building-apps_external-app-installation
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6490/1539297285625
                          - type: text
                            data: >+
                              Redirect anyone who presses your button to:
                              `https://login.bigcommerce.com/app/<your-app's-client-id>/install`

                          - type: text
                            data: >-
                              ### Configure Your Button

                              Upon click, your button should open a modal
                              similar to the image below. We recommend a modal
                              sized 900px wide by 450px high:
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6490/1539297431440
                          - type: text
                            data: >-
                              Your button will link merchants to BigCommerce’s
                              install endpoint for your application. Once the
                              merchant clicks the link, they will be prompted to
                              log in, then authorize your application, just like
                              in the [normal installation
                              flow](#building-apps_installation-update-sequence).
                          - type: text
                            data: >-
                              ### Render Success/Failure Pages


                              Modify your application code to serve either a
                              success or failure page, depending on whether the
                              external installation was successful or
                              unsuccessful.


                              If you skip this step, your application will load
                              in the iframe created by your button. To ensure a
                              good experience for your merchants, we strongly
                              recommend that you return a confirmation page,
                              instead of allowing your application to be loaded
                              in that modal.


                              ### Handling Errors


                              If your application’s installation was initiated
                              and completed through an external link,
                              BigCommerce will send your auth callback endpoint
                              an extra parameter called external_install.

                              If you receive this parameter and there are no
                              errors, call:


                              `https://login.bigcommerce.com/app/<your_app_client_id>/install/succeeded`


                              If there were errors, call:

                              `https://login.bigcommerce.com/app/<your_app_client_id>/install/failed`


                              Below is a sample code snippet of an auth callback
                              that does this:
                            header: {}
                          - type: code
                            data: |2-
                                 if params['external_install']
                                      return get 'https://login.bigcommerce.com/app/m8e1mkkmjw2xjinydqz7ie05to1y2nk/install/succeeded'
                                  end

                                  redirect '/'

                              rescue => e
                                  if params['external_install']
                                      return get 'https://login.bigcommerce.com/app/m8e1mkkmjw2xjinydqz7ie05to1y2nk/install/failed'
                                  end
                            header:
                              title: Auth Callback
                          - type: text
                            data: >-
                              Depending on which endpoint you call, we will
                              render one of the following success/failed pages
                              to the modal.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## User Interface Constraints


                              Single-click apps benefit from a high level of
                              integration with the BigCommerce platform. Users
                              interacting with your app will enjoy a seamless
                              experience. BigCommerce achieves this by rendering
                              your app&#39;s user interface inside of an iframe
                              within the control panel. To ensure acceptance
                              into the App Marketplace, your app should be able
                              to perform all of its functions inside of the
                              iframe.


                              While very usable and friendly, the iframe
                              approach does require special attention from app
                              developers. The remainder of this page discusses
                              several functional areas to consider when
                              designing and developing your app.


                              ### About Mixed Content


                              The BigCommerce control panel is served over
                              TLS/SSL. Your app must be hosted on a web server
                              that accepts and sends TLS/SSL requests. In
                              addition, all of the resources referenced in the
                              HTML that you present to the end users must be
                              served over TLS/SSL. You may find
                              protocol-agnostic addressing helpful.


                              If the user interface retrieves images, scripts,
                              or other assets over a connection not encrypted
                              with TLS/SSL, the user will experience errors and
                              possibly an inability to interact with your app.
                              Before submitting your app, use an <a
                              href="https://www.jitbit.com/sslcheck/"
                              target="_blank">online crawler</a> to check for
                              insecure content.


                              ### About Same-Origin Policies


                              <a
                              href="http://en.wikipedia.org/wiki/Same-origin_policy"
                              target="_blank">Same-origin policies</a> restrict
                              apps running within iframes from performing
                              certain activities, such as interacting with other
                              services and making OAuth connections. While apps
                              that operate within the BigCommerce iframe get
                              strong preference during App Marketplace
                              considerations, we sometimes make exceptions for
                              apps that need to interact with, and authenticate
                              to, other services. If your app requires this, we
                              advise you to open a new tab for actions that
                              cannot occur within the iframe.


                              ### About P3P and Cookies


                              Internet Explorer is one of the browsers that
                              BigCommerce [supports](#supported-browsers), and
                              our merchants do use it to access the control
                              panel. If your app needs to set a cookie, you will
                              need to craft a <a
                              href="http://en.wikipedia.org/wiki/P3P"
                              target="_blank">P3P policy</a>. Otherwise, your
                              app will experience issues on Internet Explorer.
                              Please see the following pages for more
                              information:


                              *   <a
                              href="http://www.techrepublic.com/blog/software-engineer/craft-a-p3p-policy-to-make-ie-behave/"
                              target="_blank">Craft a P3P policy to make IE
                              behave</a>

                              *   <a
                              href="http://blogs.msdn.com/b/ieinternals/archive/2013/09/17/simple-introduction-to-p3p-cookie-blocking-frame.aspx"
                              target="_blank">MSDN Intro to P3P Cookie
                              Blocking</a>
                            header:
                              anchor: building-apps_user-interface-constraints
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Hosting Your App

                              BigCommerce stores are hosted on [Google Cloud
                              Platform](https://cloud.google.com/) in the
                              [us-central1](https://cloud.google.com/compute/docs/regions-zones/)
                              region.


                              Therefore, you can maximize performance of your
                              app (in terms of latency to the public API) by
                              hosting in the same region. There is no
                              requirement to do so, and you may host wherever
                              you like.
              - title: Webhooks
                route:
                  path: /webhooks
                data:
                  children:
                    - title: Overview
                      route:
                        path: /about-webhooks
                      data:
                        blocks:
                          - type: html
                            data: "<h1>About Webhooks</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#about-webhooks_authentication\">Authentication</a></li>\n        <li><a href=\"#about-webhooks_lightweight-callback-payload\">Lightweight Callback Payload</a></li>\n        <li><a href=\"#about-webhooks_request-and-response\">Request and Response</a></li>\n    \t\t<li><a href=\"#about-webhooks_receiving-the-callback\">Recieving the Callback</a></li>\n    \t\t<li><a href=\"#about-webhooks_respond-to-webhook-callbacks\">Responding to the Callback</a></li>\n        <li><a href=\"#about-webhooks_callback-retry-mechanism\">Callback Retry Mechanism</a></li>\n        <li><a href=\"#about-webhooks_webhook-security\">Webhook Security</a></li>\n    \t\t<li><a href=\"#about-webhooks_webhook-troubleshooting\">Troubleshooting</a></li>\n        <li><a href=\"#about-webhooks_tools-for-debugging-and-testing-webhooks\">Tools for Debugging</a></li>\n        <li><a href=\"/api-docs/getting-started/webhooks/webhook-events\">All Available Webhooks</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              Webhooks allow app developers to be notified, in
                              near real-time, when specific events occur on a
                              BigCommerce store. For example, your app may need
                              to perform an action when a new order is created,
                              a product’s inventory decreases, or an item is
                              added to a shopper’s cart. When a subscribed event
                              occurs on a store, BigCommerce will POST a payload
                              to your app’s callback URI so your app can take
                              some action based on that event.
                          - type: callout
                            data:
                              type: warning
                              title: >-
                                Multiple Events Are Triggered during Bulk Data
                                Imports
                              body: >-
                                Bulk data imports will trigger the relevant
                                events for every record affected. For example,
                                if you have a hook on `store/product/created`,
                                when the merchant imports 2,000 products, we
                                will send 2,000 individual callback events.
                            header: {}
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Authentication


                              Webhooks are authenticated using Oauth and support
                              the JSON media type. Basic auth and XML are not
                              supported.


                              Before you  can begin to send and receive
                              requests, you must have the following:


                              * **A store:** You can get a sandbox store by
                              joining the Partner Program.

                              * **OAuth Client ID:** Obtained by creating an API
                              Account.

                              * **OAuth token:** Obtained by creating an API
                              Account.

                              * **Valid TLS/SSL configuration:** Verify your app
                              server’s setup at the following site:
                              [https://sslcheck.globalsign.com](https://sslcheck.globalsign.com)
                            header:
                              anchor: about-webhooks_authentication
                          - type: callout
                            data:
                              type: error
                              title: Connection Breakers
                              body: >-
                                Any one of the following conditions on your app
                                server will cause a connection failure:

                                * Hostname/DNS mismatch.

                                * Self-signed certificate.

                                * Intermediate certificates not loaded.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Lightweight Callback Payload


                              When a subscribed event occurs, we send a light
                              payload with only minimum details regarding the
                              event that’s been triggered. This gives you
                              maximum flexibility as to how you want to handle
                              the notification in your application. For
                              instance, if you subscribe to the
                              `store/order/statusUpdated` event, we’ll send you
                              the order ID when the status is updated. You might
                              want to handle the notification by fetching the
                              full order details via a request to the Orders
                              resource.


                              An example payload follows:


                              ```

                              {
                               "store_id":11111,
                               "producer":"stores/abcde",
                               "scope":"store/order/statusUpdated",
                               "data":{
                                       "type":"order",
                                       "id":173331
                                      },
                               "hash":"3f9ea420af83450d7ef9f78b08c8af25b2213637"
                               }
                              ```


                              | Name | Definition |

                              | -- | -- |

                              | store_id | A numerical identifier that is unique
                              to each store. |

                              | producer | Will always follow the pattern
                              `stores/store_hash`. This is the store that
                              created the webhook. |

                              | scope | The
                              [event](/api-docs/getting-started/webhooks/webhook-events)
                              registered when the webhook was created. |

                              | data | A lightweight description of the
                              [event](/api-docs/getting-started/webhooks/webhook-events)
                              that triggered the webhook. Will vary depending on
                              the event registered. |

                              | hash | The payload data json encoded then passed
                              through sh1 encryption. |
                            header:
                              anchor: about-webhooks_lightweight-callback-payload
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Request and Response


                              *Never worked with webhooks before? Check out the
                              tutorial on creating webhooks.*


                              All webhooks requests must include the following
                              in their HTTP headers:


                              ```
                                   Accept: application/json
                                   Content-Type: application/json
                                   X-Auth-Client: <the OAuth client id>
                                   X-Auth-Token: <the OAuth token>
                              ```
                            header:
                              anchor: about-webhooks_request-and-response
                          - type: code
                            data: |-
                              curl -X POST \
                                https://api.bigcommerce.com/stores/store_hash/v2/hooks \
                                -H 'Accept: application/json' \
                                -H 'X-Auth-Client: your-client-id \
                                -H 'X-Auth-Token: your-auth-token \
                                -d '{
                                "scope": "store/cart/lineItem/*",
                                "destination": "https://myapp.herokuapp.com/",
                                "is_active": true
                            header:
                              title: '/POST Webhook '
                              subtitle: >-
                                Request:
                                https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks
                              anchor: post-webhooks
                            config:
                              mode: shell
                          - type: code
                            data: |2-
                                  {
                                      "id": 14270456,
                                      "client_id": "your-client-id",
                                      "store_hash": "your_store_hash",
                                      "scope": "store/cart/lineItem/*",
                                      "destination": "https://779aca97.ngrok.io/webhooks",
                                      "headers": null,
                                      "is_active": true,
                                      "created_at": 1531326542,
                                      "updated_at": 1531337178
                                  }
                            header:
                              title: Response 201 Created
                              subtitle: /POST Webhook
                              anchor: response-post-webhooks
                            config:
                              mode: json
                          - type: text
                            data: "| Name |Description | Type\n|--|--|--|\n| id | A read-only value that uniquely identifies a webhook object. Do not attempt to set this value in a PUT or POST. | integer|\n| client_id | The OAuth client ID that uniquely identifies your application. BigCommerce returns this name-value pair in the JSON body of its responses. | string |\n| store_hash | \tThe hash value that uniquely identifies the store. Your application does not need to set this value via the JSON object; instead, you pass it in the path of your API requests. | string |\n|scope| Value is the event you would like to listen for. See List of Webhook Events for the full list of possibilities. Wild Cards are supported for scope. **(Required)** | string |\n| destination | value is the callback’s fully qualified URI. This should be an endpoint configured on your app server to receive webhook payloads. **(Required)** | string |\n| headers |The headers object contains one or more name-value pairs, both string values. If you choose to include a headers object, BigCommerce will include the name-value pair(s) in the HTTP header of its POST requests to your callback URI at runtime. While this feature could be used for any purpose, one is to use it to set a secret authorization key and check it at runtime. This provides an additional level of assurance that the POST request came from BigCommerce instead of some other party, such as a malicious actor. (Optional) | string |\n|is_active | Value specifies whether a webhook is active or inactive. By default, new webhooks will be set to be inactive and will have a blank value. If you want to create a webhook that should be active initially, you can pass the following name-value pair: \"is_active\": true. (Optional) | boolean |\n| created_at | The time at which the webhook was created.| date-time Unix Epoch|\n| updated_at | The time at which the webhook was last updated. | date-time Unix Epock|"
                          - type: text
                            data: >-
                              An HTTP 201 response indicates that the webhook
                              was set successfully.
                          - type: callout
                            data:
                              type: warning
                              body: >-
                                Following the creation of a webhook, it can take
                                up to one minute for BigCommerce to start
                                sending POST requests to your callback URI.
                              title: One-Minute Timeout
                          - type: code
                            data: |
                              //Response 200 OK

                              [
                                  {
                                      "id": 14270466,
                                      "client_id": "your-client-id",
                                      "store_hash": "your_store_hash",
                                      "scope": "store/product/created",
                                      "destination": "https://779aca97.ngrok.io/webhooks",
                                      "headers": null,
                                      "is_active": true,
                                      "created_at": 1531326542,
                                      "updated_at": 1531337178
                                  },
                                  {
                                      "id": 14270713,
                                      "client_id": "your-client-id",
                                      "store_hash": "your_store_hash",
                                      "scope": "store/product/updated",
                                      "destination": "https://779aca97.ngrok.io/webhooks",
                                      "headers": null,
                                      "is_active": false,
                                      "created_at": 1531338589,
                                      "updated_at": 1531338589
                                  }
                              ]
                            header:
                              title: /GET All Webhooks
                              subtitle: >-
                                Request:
                                https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks
                              anchor: get-all-webhooks
                            config:
                              mode: json
                          - type: code
                            data: |+
                              {
                                  "id": 14270466,
                                  "client_id": "your-client-id",
                                  "store_hash": "your_store_hash",
                                  "scope": "store/product/created",
                                  "destination": "https://779aca97.ngrok.io/webhooks",
                                  "headers": null,
                                  "is_active": false,
                                  "created_at": 1531326542,
                                  "updated_at": 1531337178
                              }

                            header:
                              subtitle: >-
                                To get a single webhook use the `id`.  Request:
                                https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks/id
                              title: /GET a Single Webhook
                              anchor: get-a-single-webhook
                            config:
                              mode: json
                          - type: code
                            data: |
                              {
                               "scope": "store/product/updated",
                               "destination": "https://779aca97.ngrok.io/webhooks",
                               "is_active": false
                              }


                              //Response 200 OK

                              {
                                  "id": 14270466,
                                  "client_id": "ejoftto9hv8xlip01cckcg53v7g3lrl",
                                  "store_hash": "jrah6gmn",
                                  "scope": "store/product/created",
                                  "destination": "https://779aca97.ngrok.io/webhooks",
                                  "headers": null,
                                  "is_active": false,
                                  "created_at": 1531326542,
                                  "updated_at": 1531337178
                              }
                            header:
                              title: /PUT Webhook
                              subtitle: >-
                                Update a webhook using the id. Once the webhook
                                is created all the fields below can be changed
                                via an update request. Request:
                                https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks/id
                              anchor: update-a-webhook
                            config:
                              mode: json
                          - type: code
                            data: |
                              //Response 200 OK
                              {
                                  "id": 14270466,
                                  "client_id": "ejoftto9hv8xlip01cckcg53v7g3lrl",
                                  "store_hash": "jrah6gmn",
                                  "scope": "store/product/created",
                                  "destination": "https://779aca97.ngrok.io/webhooks",
                                  "headers": null,
                                  "is_active": false,
                                  "created_at": 1531326542,
                                  "updated_at": 1531337178
                              }
                            header:
                              title: /DELETE a Wehbook
                              subtitle: >-
                                Request:
                                https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks/id
                            config:
                              mode: json
                          - type: text
                            data: >-
                              There is not a way to delete all webhooks on a
                              store. Run a GET request for the webhook id, then
                              send a request to the delete URI to remove each
                              one. It returns a 200 OK for the response with the
                              deleted hook. When requesting a list of hook, the
                              hook id is not available.


                              If webhooks are no longer being used, either
                              delete them or set `is_active:false`.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Receiving the Callback


                              You’ll need to build an application and configure
                              your server to receive the callback we send when
                              events are triggered. 


                              Need to set up a quick destination URL for
                              testing? See Tools for Debugging and Testing
                              Webhooks.
                            header:
                              anchor: about-webhooks_receiving-the-callback
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Respond to Webhook Callbacks


                              You’ll need to build an application and configure
                              your server to receive the callback we send when
                              events are triggered.


                              To acknowledge that you received the webhook
                              without issue, your server should return a 200
                              HTTP status code. Any other information you return
                              in the request headers or request body will be
                              ignored. Any response code outside the 200 range,
                              including 3_xx_ codes, will indicate to us that
                              you did not receive the webhook. When a webhook is
                              not received (for whatever reason), we will retry
                              the callback as described below.


                              Need to set up a quick destination URL for
                              testing? See [Tools for testing
                              webhooks.](#about-webhooks_tools-for-debugging-and-testing-webhooks)
                            header:
                              anchor: about-webhooks_respond-to-webhook-callbacks
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Callback Retry Mechanism


                              The webhooks service will do its best to deliver
                              events to your callback URI. If your server
                              indicates that the webhook payload has not been
                              received, the dispatch service will take the
                              following actions:

                              If an app server responds to a webhook payload
                              with anything other than a 2_xx_ response, or
                              times out, the app will be blocked for 60 seconds.

                              Webhooks created during that 60-second block will
                              be queued up to send on the next scheduled retry
                              attempt after the block expires, so that webhooks
                              are not lost.


                              The webhook dispatcher will then attempt several
                              retries (at increasing intervals) until the
                              maximum retry limit is reached.


                              ### Retry Intervals


                              * 60 seconds after the most recent failure  

                              * 180 seconds after the most recent failure  

                              * 180 seconds after the most recent failure  

                              * 300 seconds after the most recent failure  

                              * 600 seconds after the most recent failure  

                              * 900 seconds after the most recent failure  

                              * 1800 seconds after the most recent failure  

                              * 3600 seconds after the most recent failure  

                              * 7200 seconds after the most recent failure  

                              * 21600 seconds after the most recent failure  

                              * 50400 seconds after the most recent failure  

                              * 86400 seconds (24 hours) after the most recent
                              failure


                              After the final retry attempt (cumulatively, 48
                              hours after the first delivery attempt), the
                              webhook will automatically be deactivated, and we
                              will send an email to the developer’s email
                              address registered on the subscribing app. You can
                              reactivate the webhook by setting the `is_active`
                              flag back to true via a `/PUT` request to the
                              hooks resource.
                            header:
                              anchor: about-webhooks_callback-retry-mechanism
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Webhook Security

                              To ensure that webhook payloads are secure against
                              activity by a malicious actor, we take a
                              three-pronged approach:


                              * Webhook payloads contain minimal information
                              about the store and event, for example the ID
                              identifying the order or cart. To access
                              potentially sensitive information on a store, a
                              malicious actor would need to be fully
                              authenticated against that store’s API in order to
                              request full details.

                              * Webhook payloads are sent over a TLS-encrypted
                              connection.

                              * For added security, you can include custom
                              headers in your webhook creation request, and
                              these headers will be sent in the payload when an
                              event you subscribe to occurs. If your app
                              endpoint is secured by basic authentication, you
                              could set your own basic auth headers to
                              authenticate the payload at runtime.
                            header:
                              anchor: about-webhooks_webhook-security
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Troubleshooting


                              ### Why am I not receiving event payloads to my
                              callback URI?

                              If your app does not return an HTTP 2_xx_ to
                              BigCommerce after receiving the webhook event
                              payload, BigCommerce considers it a failure.
                              BigCommerce will keep trying for a little over 48
                              hours. At the end of that time, BigCommerce sends
                              an email to the email address set during app
                              registration and disables the webhook by setting
                              the is_active flag to false.


                              You can proactively check to make sure that
                              everything is OK by periodically making a GET
                              request and checking the is_active flag.


                              If you receive an email or discover that the
                              is_active flag has been flipped to false, try the
                              following:


                              Check to see if your app is responding to the
                              event payload with something other than HTTP 200.

                              Check to make sure that your server has a valid
                              TLS/SSL setup. One way to do this is by visiting
                              the following website:
                              https://sslcheck.globalsign.com. Any of the
                              following will cause the TLS/SSL handshake to
                              fail:

                              Self-signed certificate.

                              Host name of the certificate does not match the
                              server’s DNS.

                              Your server’s key or trust store has not been
                              loaded up with the intermediate certificates
                              necessary to establish the chain of trust.

                              Once you have resolved the issue preventing the
                              connection, send a PUT request to flip the
                              is_active flag back to true. This will cause
                              BigCommerce to start sending the event payloads to
                              your callback URI again.


                              ### Why am I not receiving a 201 response after
                              creating a webhook?

                              After sending a POST request to create a webhook,
                              you should get an HTTP 201 back. If you do not,
                              check your TLS/SSL setup and be sure that your
                              request contains the following headers:


                              ```
                                   Accept: application/json
                                   Content-Type: application/json
                                   X-Auth-Client: <the OAuth client id>
                                   X-Auth-Token: <the OAuth token>
                              ```
                            header:
                              anchor: about-webhooks_troubleshooting
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Tools for Debugging and Testing Webhooks


                              **[ngrok](https://ngrok.com/)**  

                              As you are building your integration, you might
                              want to test webhooks on your local dev machines.


                              We suggest using ngrok, which you can use to
                              easily set up tunnels between a server running on
                              localhost and a public URL. This will enable you
                              to send our webhooks to your localhost
                              environments via a public URL. No production push
                              is required.


                              Need help on ngrok and webhooks see our
                              [tutorial](/api-docs/getting-started/webhooks/setting-up-webhooks).


                              **[Webhook Tester](https://webhook.site/#/)**  

                              This allows for webhooks to be quickly tested or
                              checked. 
                            header:
                              anchor: >-
                                about-webhooks_tools-for-debugging-and-testing-webhooks
                    - title: Webhooks Tutorial
                      config:
                        sidebar:
                          token: Tutorial
                      route:
                        path: /setting-up-webhooks
                      data:
                        blocks:
                          - type: html
                            data: "<h1>Registering and Testing Webhooks</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#setting-up-webhooks_intro\">Intro</a></li>\n    \t\t<li><a href=\"#setting-up-webhooks_prerequisites\">Prerequisites</a></li>\n        <li><a href=\"#setting-up-webhooks_create-project-folder\">Create Project Folder</a></li>\n        <li><a href=\"#setting-up-webhooks_install-ngrok\">Install ngrok</a></li>\n        <li><a href=\"#setting-up-webhooks_create-express-app\">Create Express App</a></li>\n        <li><a href=\"#setting-up-webhooks_start-the-app-ngrok\">Start the App and ngrok</a></li>\n        <li><a href=\"#setting-up-webhooks_fire-webhooks\">Trigger the Webhook Event</a></li>\n        <li><a href=\"#setting-up-webhooks_troubleshooting\">Troubleshooting</a></li>\n        <li><a href=\"#/api-docs/getting-started/webhooks/webhook-events\">All Available Webhooks</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Intro


                              When testing your application locally, ngrok is a
                              helpful tool for viewing the webhook responses
                              that BigCommerce sends to your app. Ngrok creates
                              a publicly accessible tunnel URL to an application
                              running on your machine's localhost. Ngrok also
                              provides a web interface you can use to view HTTP
                              request details.


                              In this tutorial, we'll install ngrok, register a
                              webhook on your store, and then observe the
                              response when the webhook event is triggered.
                            header:
                              anchor: setting-up-webhooks_intro
                          - type: text
                            data: >-
                              ## Prerequisites


                              - NPM is installed (installed automatically with
                              Node)

                              - Familiar with Command Line

                              - Familiar with Postman

                              - [API Access Token & Client
                              ID](/api-docs/getting-started/basics/authentication#authentication_getting-api-credentials)
                              with
                              [scope](/api-docs/getting-started/basics/authentication#authentication_oauth-scopes)
                              set to Information & Settings Read-Only and
                              Products Read-Only.

                              - [Webhooks
                              Overview](/api-docs/getting-started/webhooks/about-webhooks)
                            header:
                              anchor: setting-up-webhooks_prerequisites
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Create Project Folder


                              1. Open the terminal and create a folder that will
                              hold ngrok and the Node app, then move into that
                              directory.


                              ```
                                  mkdir webhooks-test
                                  cd webhooks-test
                              ```
                            header:
                              anchor: setting-up-webhooks_create-project-folder
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Install ngrok


                              ### Mac/Linux


                              1. Visit https://ngrok.com/ and click download.

                              2. Choose the version for your operating system.

                              3. Unzip ngrok and place the application in the
                              project folder that you created.


                              This can be accomplished in one command:

                              unzip "file_to_unzip" -d  destination


                              `unzip
                              /Users/your-computer/Downloads/ngrok-stable-darwin-amd64.zip
                              -d /Users/your-computer/Documents/webhooks-test`


                              ### Windows


                              1. Visit https://ngrok.com/ and click download.

                              2. Choose the version for your operating system.

                              3. Unzip ngrok and place the application in the
                              project folder that you created.

                              4. Make sure ngrok is referenced in your [PATH
                              environment
                              variable](https://superuser.com/questions/284342/what-are-path-and-other-environment-variables-and-how-can-i-set-or-use-them).
                            header:
                              anchor: setting-up-webhooks_install-ngrok
                          - type: callout
                            data:
                              type: success
                              body: >
                                At this point you should have a project folder
                                with ngrok unzipped inside of it. 
                              title: Checkpoint
                          - type: text
                            data: '---'
                          - type: text
                            data: "## Create Express App\n\n1. In the terminal run `npm init`. You will be prompted with several questions about the app setup. Feel free to hit return to accept the default values.  The final screen will look something like this: \n\n```\n{\n  \"name\": \"webhooks-test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"webhooks-test\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n2. Take note of the value in \"main\", `index.js`. \n3. Create a file in your project folder called index.js. `touch index.js` or `copy nul > index.js` for Windows.\n4. Install [Express](https://expressjs.com/en/starter/installing.html) using the terminal in the same project folder. `npm install express --save`\t\t\t "
                            header:
                              anchor: setting-up-webhooks_create-express-app
                          - type: callout
                            data:
                              type: success
                              body: >-
                                At this point your project folder should
                                contain:

                                index.js

                                node_modules

                                package.json

                                ngrok

                                package-lock.json
                              title: Checkpoint
                          - type: text
                            data: >-
                              4. Open index.js in a text editor and add this
                              code snippet: 



                              ```
                                  const express = require('express')
                                  const app = express()
                                      app.post('/webhooks', function (req, res) {
                                      res.send('OK')
                                  })
                                  app.listen(3000, function () {
                                      console.log('Listening for webhooks on port 3000')
                                  })
                              ```



                              The app is starting a server and listening on port
                              3000, then returning a response of ok once it
                              receives a POST to the /webhooks url.


                              ```

                              app.post('/webhooks', function (req, res) {
                               res.send('OK')
                              })

                              ```



                              From Express
                              [Website](https://expressjs.com/en/starter/basic-routing.html):

                              `app.METHOD(PATH, HANDLER)`

                              - app is an instance of express.

                              - METHOD is an [HTTP request
                              method](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods),
                              in lowercase.

                              - PATH is a path on the server.

                              - HANDLER is the function executed when the route
                              is matched.

                              - Res.send is the body parameter that sends the
                              HTTP response.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Start the App and ngrok


                              1. Open two terminal tabs. In both tabs, navigate
                              to your project folder. 

                              2. In one tab run the app. `node index.js`

                              3. In the other start ngrok. `./ngrok http 3000`
                            header:
                              anchor: setting-up-webhooks_start-the-app-ngrok
                          - type: tabs
                            data:
                              children:
                                - title: node index.js
                                  blocks:
                                    - type: text
                                      data: >-
                                        ```

                                        BIGCOMMERCE:webhooks your.computer$ node
                                        index.js

                                        Listening for webhooks on port 3000

                                        ```
                                - title: ngrok http 3000
                                  blocks:
                                    - type: image
                                      data: >-
                                        //s3.amazonaws.com/user-content.stoplight.io/6012/1531500085650
                                      config:
                                        centered: true
                                      header:
                                        title: nrgok terminal
                          - type: text
                            data: >-
                              ngrok returns two values we will need to register
                              a webhook and observe the response: 

                              - **Web Interface:** Where you can monitor the
                              hook from a browser. `https://127.0.0.1:4040`

                              - **Forwarding:** The webhook destination. Make
                              note of the https version. For example,
                              `https://6a35e97b.ngrok.io`.


                              4. Open a web browser and copy in your Web
                              Interface URL: `http://127.0.0.1:4040`.  This is
                              where webhook payloads will appear when they fire.
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1531500191661
                            header:
                              title: ngrok Web Interface
                            config:
                              centered: true
                              maxWidth: '800'
                              maxHeight: '800'
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              Subscribe to the `store/product/updated` event: 


                              1. Create a POST request using the try it now box
                              below or your API enviroment of choice to the
                              request
                              URL:`https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks`. 

                              Replace store_hash with the value from your
                              store's API path.

                              2. Create a request body where "scope" is the
                              webhook event we are subscribing to and
                              "destination" is your ngrok forwarding url with
                              /webhooks appended (the route specified in our
                              Express app):


                              ```

                              {
                               "scope": "store/product/updated",
                               "destination": "https://6a35e97b.ngrok.io/webhooks",
                               "is_active": true
                              }

                              ```
                               

                              3. Update the request headers to contain:

                              ```
                                  Accept: application/json
                                  Content-Type: application/json
                                  X-Auth-Client: {{the OAuth client id}}
                                  X-Auth-Token: {{the OAuth token}}
                              ```

                              4. Check all the values and then hit POST. If
                              successful, the response will be 201 Created.
                          - type: http
                            data:
                              method: post
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v2/hooks
                              headers:
                                Accept: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{the OAuth client id}'
                                X-Auth-Token: '{the OAuth token}'
                              body: |
                                {
                                "scope": "store/product/updated",
                                 "destination": "https://{your-url}.ngrok.io/webhooks",
                                 "is_active": true
                                }
                            header:
                              title: Create a Webhook
                              anchor: create-a-webhook
                          - type: code
                            data: |-
                              {
                                "id": 14263419,
                                "client_id": "your-client-id",
                                "store_hash": "your-store-hash",
                                "scope": "store/product/updated",
                                "destination": "https://6a35e97b.ngrok.io/webhooks",
                                "headers": null,
                                "is_active": true,
                                "created_at": 1531256030,
                                "updated_at": 1531256030
                              }
                            header:
                              title: 201 Created Response
                              anchor: 201-response
                            config:
                              mode: json
                          - type: text
                            data: >-
                              ## Trigger the Webhook Event

                              Webhooks can be triggered by actions performed by
                              a shopper on the storefront or user within the
                              control panel, or actions performed via API. To
                              illustrate this point, we'll demonstrate both
                              methods.


                              ### Update via the Control Panel


                              1. From your store’s control panel, navigate to
                              Products > View. Choose a product and edit product
                              details like name or description. 

                              2. Click **Save**.
                            header:
                              anchor: setting-up-webhooks_fire-webhooks
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1531500906129
                            config:
                              centered: true
                              maxWidth: '800'
                              maxHeight: '800'
                            header:
                              title: BigCommerce Control Panel
                              subtitle: Products > View
                          - type: text
                            data: >-
                              3. Visit the ngrok web interface address  and
                              check for a 200 response. 
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1531500945565
                            config:
                              centered: true
                              maxWidth: '800'
                              maxHeight: '800'
                            header:
                              title: ngrok Web Interface
                          - type: text
                            data: >-
                              The Summary shows that the webhook has fired and
                              our Express app has returned a 200 response along
                              with the text OK. The response is generated by
                              res.send(‘OK’) in our app code, but this text can
                              be changed to say something different or even post
                              the response to another app. For more info, see
                              [Express
                              Routing](https://expressjs.com/en/guide/routing.html).


                              The record of the HTTP request will also show in
                              the terminal tab running ngrok.
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1531500989467
                            header:
                              title: ngrok Terminal Response
                            config:
                              centered: true
                              maxWidth: '800'
                              maxHeight: '800'
                          - type: text
                            data: "### Update Via the API\nCreate a PUT request to the product to be updated, replacing 124 with the product’s ID: \n\n`https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/124`\n\nIn this example, the price of product_id 124 is being changed to 12.99:\n\n```\n{\n\t\"price\": 12.99\n}\n```\n\nAfter hitting send, check the ngrok web interface. You may see a single event or several based on how many times the product has been updated in the previous step."
                          - type: http
                            data:
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}
                              headers:
                                X-Auth-Client: '{Your-X-Auth-Client}'
                                X-Auth-Token: '{Your-X-Auth-Token}'
                                Accept: application/json
                                Content-Type: application/json
                              method: put
                              body: |-
                                {
                                  "price": 12.99
                                }
                            header:
                              title: Update a Product
                              anchor: update-a-product-webhooks
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1531501115256
                            header:
                              title: ngrok Web Interface
                            config:
                              centered: true
                              maxWidth: '800'
                              maxHeight: '800'
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              That’s it! In this walkthrough you created a
                              webhook, set up a server to accept the response,
                              and used ngrok to observe the webhook payload.


                              Want to keep going? Try changing the text in
                              `res.send()` to a custom response, print the
                              response to a webpage, or register a different
                              webhook event. 
                          - type: callout
                            data:
                              body: >-
                                Unless you have a paid ngrok account, the
                                destination URL will only be valid for a few
                                hours. After that, the webhook will stop
                                working. Send a DELETE request to the specific
                                webhook ID to disable the hook. 
                              type: warning
                              title: URL Timeout
                          - type: http
                            data:
                              method: delete
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v2/hooks/{hook_id}
                              headers:
                                X-Auth-Client: '{your-client-id}'
                                X-Auth-Token: '{your-auth-token}'
                                Content-Type: application/json
                                Accept: application/json
                            header:
                              title: Delete the webhook
                              subtitle: >-
                                Get the hook_id by either getting it from the
                                original /POST response or by sending a /GET
                                request to the hooks resource
                              anchor: delete-webhook
                          - type: text
                            data: >-
                              ## Troubleshooting

                              1. Getting a 404 error using the root (/) url?


                              Add this snippet to your code to respond to
                              incoming get requests with 'hello'.


                              ```

                              app.get('/',(req, res)=>{
                                  res.send('Hello!');
                              }); 

                              ```


                              2. Getting error ngrok not found?

                              There are two ways to fix this. Your local setup
                              will determine which command will work.

                              Use the command `mv ngrok /usr/local/bin `to move
                              ngrok to your local bin folder. This way it
                              becomes available globally. 

                              Use the command `./ngrok http 3000` to run ngrok
                              as a sudo user. 


                              3. Windows Users

                              If you are having trouble getting ngrok started
                              try setting the PATH. 
                                  - [What are PATH and other environment variables, and how can I set or use them?](https://superuser.com/questions/284342/what-are-path-and-other-environment-variables-and-how-can-i-set-or-use-them)
                            header:
                              anchor: setting-up-webhooks_troubleshooting
                    - title: Webhook Events
                      route:
                        path: /webhook-events
                      data:
                        blocks:
                          - type: html
                            data: "<h1>List of Webhook Events</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#webhook-events_orders\">Orders</a></li>\n        <li><a href=\"#webhook-events_products\">Products</a></li>\n        <li><a href=\"#webhook-events_category\">Category</a></li>\n        <li><a href=\"#webhook-events_sku\">SKU</a></li>\n        <li><a href=\"#webhook-events_customer\">Customer</a></li>\n        <li><a href=\"#webhook-events_store\">Store</a></li>\n        <li><a href=\"#webhook-events_cart\">Cart</a></li>\n        <li><a href=\"#webhook-events_shipment\">Shipment</a></li>\n    \t\t<li><a href=\"#webhook-events_subscriber\">Subscriber</a></li>\n    \n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Orders


                              | Name | Description |

                              | ---| --- |

                              | store/order/* | Subscribe to all store/order
                              events  |

                              | store/order/created |Fires if an order is
                              created using the control panel, an app or via the
                              API.| 

                              | store/order/updated| Fires when an already
                              created order is updated. Any changes to an
                              existing order will fire this webhook. Updates can
                              include changing the status, updating a coupon or
                              changing an address.|

                              | store/order/archived | Order is archived |

                              | store/order/statusUpdated | This will only fire
                              if the order status has changed. Such as Pending
                              to Awaiting Payment |

                              | store/order/message/created | Order message is
                              created by customer or in control panel |
                            header:
                              anchor: webhook-events_orders
                          - type: code
                            data: |-
                              {
                                "scope": "store/order/statusUpdated",
                                "store_id": "123456",
                                "data": {
                                  "type": "order",
                                  "id": 169,
                                  "status": {
                                    "previous_status_id": 5,
                                    "new_status_id": 9
                                  }
                                },
                                "hash": "6923dda2313a5709b13f9b217a3acd6f8308a0c2",
                                "created_at": 1535486277,
                                "producer": "stores/abcdefg"
                              }
                            header:
                              title: ' store/order/statusUpdated'
                              anchor: order-status-updated
                            config:
                              mode: json
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Products


                              | Name | Description |

                              | --- | --- |

                              | store/product/*| Subscribe to all store/product
                              events |

                              |store/product/deleted| Product is deleted|

                              | store/product/created | A new product is created
                              |

                              | store/product/updated |Occurs when product
                              details are edited. For a full list of product
                              fields that trigger an updated event, see
                              **Product Updated Events** below |

                              | store/product/inventory/updated| Product
                              inventory is updated. |

                              | store/product/inventory/order/updated| Fires if
                              a product’s inventory is decremented or
                              incremented, including when an order is placed.
                              Webhook responds to inventory updates made using
                              the Control Panel, CSV import, API or an app.|


                              ### Notes on
                              `store/product/inventory/order/updated`

                              The response for
                              `store/product/inventory/order/updated` includes
                              an inventory object containing:


                              **value**: the number of items that the inventory
                              changed by. This can be negative if the inventory
                              is decreased `-3` or positive if an item is
                              returned to the inventory from an order, `+2`


                              **method** : Will always return relative.


                              **id**: The product id


                              **product_id**: The product id


                              ### Product Updated Events


                              Changes to any of the following fields will
                              trigger a `store/product/updated` event:


                              - _Brand_

                              - _Product Type_

                              - _Category_

                              - _Inventory_

                              - _Number Sold_

                              - _Availibility_

                              - _Thumbnail Changed_

                              - _Visibility_

                              - _Featured_

                              - _Name_

                              - _Description_

                              - _Sort Order_

                              - _Price_

                              - _Dimensions_

                              - _Condition_

                              - _Tax Price_
                            header:
                              anchor: webhook-events_products
                          - type: code
                            data: |-
                              {
                                "scope": "store/product/inventory/order/updated",
                                "store_id": "123456",
                                "data": {
                                  "type": "product",
                                  "id": 185,
                                  "inventory": {
                                    "product_id": 185,
                                    "method": "relative",
                                    "value": -1
                                  }
                                },
                                "hash": "dc475e1059f2a67a55818bea29bf6b23ebbda707",
                                "created_at": 1535480603,
                                "producer": "stores/abcdefg"
                              }
                            header:
                              title: store/product/inventory/order/updated
                              anchor: product-inventory-order-updated
                            config:
                              mode: json
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Category


                              | Name | Description |

                              |---|---|

                              | store/category/*| Subscribe to all
                              store/category events |

                              | store/category/created | Category is created |

                              | store/category/updated | Category is updated |

                              | store/category/deleted | Category is deleted |
                            header:
                              anchor: webhook-events_category
                          - type: code
                            data: |-
                              {
                                "scope": "store/category/updated",
                                "store_id": "123456",
                                "data": {
                                  "type": "category",
                                  "id": "19"
                                },
                                "hash": "9bb5584b3c28e3bb07164405626bd913c14d2209",
                                "created_at": 1535487935,
                                "producer": "stores/abcdefg"
                              }
                            header:
                              title: store/category/updated
                              anchor: category-updated
                            config:
                              mode: json
                          - type: text
                            data: >-
                              ## SKU


                              | Name | Description |

                              | --- | --- |

                              | store/sku/* |Subscribe to all store/sku events |

                              | store/sku/created | A new sku is created |

                              | store/sku/updated | Sku is updated |

                              | store/sku/deleted| Sku is deleted |

                              | store/sku/inventory/updated| |

                              | store/sku/inventory/order/updated| This will
                              fire when the inventory is updated via API, the
                              Control Panel, when an order is placed and when an
                              order is refunded and the inventory returned to
                              stock. Inventory changes due to an order and
                              determined by the store's settings. |


                              ### Notes on `store/sku/inventory/order/updated`


                              Included in the response is a data object:


                              **value**: the number of items that the inventory
                              changed by. This can be negative if the inventory
                              is decreased `-3` or positive if an item is
                              returned to the inventory from an order, `+2`


                              **method** : Will always return relative.


                              **type**: Will always be sku


                              **variant_id**: Id of the variant
                            header:
                              anchor: webhook-events_sku
                          - type: code
                            data: |-
                              {
                                "scope": "store/sku/inventory/order/updated",
                                "store_id": "123456",
                                "data": {
                                  "type": "sku",
                                  "id": 330,
                                  "inventory": {
                                    "product_id": 184,
                                    "method": "relative",
                                    "value": +2,
                                    "variant_id": 364
                                  }
                                },
                                "hash": "dc475e1059f2a67a55818bea29bf6b23ebbda707",
                                "created_at": 1535480603,
                                "producer": "stores/abcdefg"
                              }
                            header:
                              title: store/sku/inventory/order/updated
                              anchor: sku-inventory-order-updated
                            config:
                              mode: json
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Customer

                              | Name | Description |

                              |---|---|

                              | store/customer/* | Subscribe to all
                              store/customer events |

                              | store/customer/created | A new customer is
                              created|

                              | store/customer/updated | Customer is updated.
                              Does not currently track changes to the customer
                              address. |

                              |store/customer/deleted | Customer is deleted |
                            header:
                              anchor: webhook-events_customer
                          - type: code
                            data: |-
                              {
                                "scope": "store/customer/deleted",
                                "store_id": "123456",
                                "data": {
                                  "type": "customer",
                                  "id": 10
                                },
                                "hash": "4bf08f1ad81eeb460eb12f99f7fd2226b6ea0911",
                                "created_at": 1535488840,
                                "producer": "stores/abcdefg"
                              }
                            header:
                              title: store/customer/deleted
                              anchor: customer-deleted
                            config:
                              mode: json
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Store

                              |Name|Description|

                              |---|---|

                              | store/app/uninstalled | Occurs when a client
                              store is cancelled and uninstalled from the
                              platform |

                              |store/information/updated | Occurs when changes
                              are made to store settings. For a full list of
                              fields that can trigger this event, see **Store
                              Information Updated Events** below |


                              ### Store Information Updated Events


                              Changes to the following store settings will
                              trigger a `store/information/updated` event:


                              * *Store Name*

                              * *Store Address*

                              * *Store Address*

                              * *Store Phone Number*

                              * *Admin Email*

                              * *Order Email*

                              * *Display Date Format*

                              * *Export Date Format*

                              * *Store DTS Correction*

                              * *Store Time Zone*

                              * *Language*

                              * *Default Currency*

                              * *Currency Token*

                              * *Decimal Token*

                              * *Thousands Place*

                              * *Currency Location*

                              * *Weight Measurement*

                              * *Length Measurement*

                              * *Length Measurement*

                              * *Dimensions Decimal Places*

                              * *Dimensions Decimal Token*

                              * *Plan Name*

                              * *Plan Level*

                              * *Store Logo*

                              * *Mobile Template Logo*

                              * *Tax Entered With Prices*

                              * *Stencil Template Enabled* 
                            header:
                              anchor: webhook-events_store
                          - type: code
                            data: |-
                              {
                                "scope": "store/information/updated",
                                "store_id": "123446",
                                "data": {
                                  "type": "store"
                                },
                                "hash": "c553845e0a5e28dc8b0ea494458692a25586a294",
                                "created_at": 1535489273,
                                "producer": "stores/abcdefg"
                              }
                            header:
                              title: store/information/updated
                              anchor: store-information-updated
                            config:
                              mode: json
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              ## Cart


                              | Name | Description |

                              | --- | --- |

                              | store/cart/lineItem/* | This webhook will fire
                              when a change occurs to line items in the cart.
                              This can be items added to a cart, removed or
                              updated.(Ex. change to quantity, product options
                              or price). |

                              | store/cart/lineItem/created | When a new item is
                              added to the cart  |

                              | store/cart/lineItem/updated | When an item’s
                              quantity has changed or the product options
                              change. |

                              | store/cart/lineItem/deleted | When an item is
                              deleted from the cart|

                              | store/cart/created | This webhook will fire
                              whenever a new cart is created either via a
                              storefront shopper adding their first item to the
                              cart or when a new cart being created via an API
                              consumer. If it is from the storefront, then it
                              fires when the first product is added to a new
                              session.(The cart did not exist before) For the
                              API it means a  `POST`  to /carts, (V3 and
                              Storefront API). The  `store/cart/updated`  will
                              also fire.|

                              | store/cart/updated | This webhook is fired
                              whenever a cart is modified through the changes in
                              its line items. Eg. when a new item is added to a
                              cart, an existing item’s quantity is updated, when
                              the email changes during guest checkout or an
                              existing item is deleted, the cart is modified
                              triggering this webhook. The payload will include
                              the ID of the cart being updated. <br> This
                              webhook is also fired along with cart created
                              because the first product being added to an empty
                              cart triggers an update. <br> - Logging into
                              customer account after creating a cart (email is
                              inherited from customer account email) <br>-
                              Entering email address via guest checkout <br>
                              -Changing the email in guest checkout |

                              | store/cart/deleted| This webhook will fire
                              whenever a cart is deleted. This is can be either
                              when all items have been removed from a cart and
                              it was auto-deleted or it was explicitly removed
                              via a DELETE request by an API consumer. This ends
                              the lifecycle of the cart. The 
                              `store/cart/updated`  webhook will also fire when
                              the last item is removed.|

                              | store/cart/couponApplied | This webhook will
                              fire whenever a new coupon code is applied to a
                              cart. It will include the ID of the coupon code |

                              | store/cart/abandoned | This webhook will fire
                              one after a cart is abandoned. A cart is
                              considered abandoned if no changes were made at
                              least one hour after the last modified property. 
                              |

                              | store/cart/converted | This hook fires when a
                              cart is converted into an order, which is
                              typically after the payment step of checkout on
                              the storefront. At this point, the Cart is no
                              longer accessible and has been deleted. This hook
                              returns both the Cart ID and Order ID for
                              correlation purposes. |
                            header:
                              anchor: webhook-events_cart
                          - type: code
                            data: |-
                              {
                                  "scope": "store/cart/lineItem/created",
                                  "store_id": "12074048",
                                  "data": {
                                      "type": "cart_line_item",
                                      "id": "c676e997-10fc-4049-bf18-1077a062e16d",
                                      "cartId": "351a367f-4198-4108-996a-753ffc1bce21"
                                  },
                                  "hash": "23d6ae55d612514cbc3f79619535a184bbf10fc0",
                                  "created_at": 1518405112,
                                  "producer": "stores/ojgwnqqd0g"
                              }
                            header:
                              title: store/cart/lineItem/created
                              anchor: cart-lineitem-created
                            config:
                              mode: json
                          - type: code
                            data: "{\n    \"scope\": \"store/cart/created\",\n    \"store_id\": \"12074048\",\n    \"data\": {\n        \"type\": \"cart\",\n        \"id\": \"6121f45e-e3d9-4fcf-828e-b507594a1f96\"\n    },\n    \"hash\": \"54eef7f35f37d770aefcb61c5d3f1df6ed0d5a31\",\n    \"created_at\": 1518403916,\n  \t\"producer\": \"stores/ojgwnqqd0g\"\n}\n  "
                            header:
                              title: store/cart/created
                              anchor: cart-created
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Shipment


                              | Name | Description |

                              | --- | --- |

                              | store/shipment/* | Subscribe to all
                              store/shipment events |

                              | store/shipment/created | Shipment is created |

                              | store/shipment/updated | Shipment is updated |

                              | store/shipment/deleted | Shipment is deleted |
                            header:
                              anchor: webhook-events_shipment
                          - type: code
                            data: |-
                              {
                                  "scope": "store/shipment/created",
                                  "store_id": "123456",
                                  "data": {
                                      "type": "shipment",
                                      "id": 12,
                                      "orderId": "319"
                                  },
                                  "hash": "a6bc11ea25e8f389a16ee919f0c0db6d4099d7de",
                                  "created_at": 1534951410,
                                  "producer": "stores/abcdefg"
                              }
                            header:
                              title: store/shipment/created
                              anchor: shipment-created
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Subscriber


                              | Name | Description |

                              | --- | --- |

                              | store/subscriber/* | Subscribe to all
                              store/subscriber events |

                              | store/subscriber/created | Subscriber is created
                              |

                              | store/subscriber/updated| Subscriber is updated
                              |

                              | store/subscriber/deleted | Subscriber is deleted
                              |
                            header:
                              anchor: webhook-events_subscriber
                          - type: code
                            data: |-
                              {
                                "scope": "store/subscriber/created",
                                "store_id": "1025646",
                                "data": {
                                  "type": "subscriber",
                                  "id": 1
                                },
                                "hash": "883470faa0d36d25179b620f192f1726356300a9",
                                "created_at": 1543935205,
                                "producer": "stores/abcdefg"
                              }
                            header:
                              title: store/subscriber/created
                              anchor: subscriber-created
        - title: Partner Information
          route:
            path: /partner
          data:
            children:
              - title: Becoming A Partner
                route:
                  path: /becoming-a-partner
                data:
                  blocks:
                    - type: html
                      data: "<h1>Becoming a Partner</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#becoming-a-partner_apply-technology-partner-program\">Apply to the Technology Partner Program </a></li>\n\t\t<li><a href=\"#becoming-a-partner_getting-sandbox-store\">Getting a Sandbox Store</a></li>\n\t\t<li><a href=\"#becoming-a-partner_app-store-approval-requirements\">App Store Approval Requirements</a></li>\n\t\t<li><a href=\"#becoming-a-partner_partner-program-troubleshooting\">Troubleshooting</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        The following sections outline the steps required to
                        become a vendor of Single-Click Apps on the BigCommerce
                        platform. Doing so requires a partnership application,
                        but acceptance will authorize you to provide
                        best-of-breed solutions to the fast-growing online
                        businesses we host.


                        ## Apply to the Technology Partner Program


                        Before you can submit an app to the BigCommerce App
                        Marketplace (which merchants also know as our “app
                        store”), you must become an official Partner.
                        BigCommerce offers app developers free sandbox stores
                        through its Technology Partner Program. To be approved
                        as a partner, you will need:


                        * A website

                        * Intent to offer your app publicly

                        * Ability to support users of your app

                        * Evidence of expertise in app development


                        Once approved, you will receive one or more emails
                        listing your partner credentials and next steps. Your
                        Partner ID will be required to submit your app for App
                        Marketplace consideration. If you do not receive these
                        credentials by email, please contact <a
                        href="mailto:appstore@bigcommerce.com">appstore@bigcommerce.com</a>.
                      header:
                        anchor: becoming-a-partner_apply-technology-partner-program
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Getting a Sandbox Store


                        To build a Marketplace app, you will need to have a
                        sandbox store, a developer account at
                        devtools.bigcommerce.com, and be accepted as a
                        BigCommerce partner. We encourage you to create your
                        sandbox store and your Dev Tools account using the same
                        login credentials. A sandbox store cannot process
                        transactions and is for developing and testing apps
                        without the 15-day time time limit of a trial store. 
                      header:
                        anchor: becoming-a-partner_getting-sandbox-store
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          A sandbox store is not required for app development,
                          but if you develop on a trial store instead, after 15
                          days the store will be erased along with the data and
                          a new store will need to be created. Applying to be a
                          partner and getting a sandbox store is best practice. 
                    - type: text
                      data: >-
                        ### Create a Sandbox Store


                        1. Navigate to the [BigCommerce Pricing
                        page](https://www.bigcommerce.com/pricing/).

                        2. Select **START YOUR FREE TRIAL**.

                        3. Where prompted for an email address, enter the same
                        email that you used when applying to become a Technology
                        Partner. 

                        4. Select **CONTINUE TO STORE DETAILS**.

                        5. In the trial store setup form, enter a store name,
                        password, and other details. Then select **CREATE YOUR
                        STORE**.

                        6. Log in to the [Partner
                        Portal](https://partners.bigcommerce.com) and navigate
                        to Support > Create a Case > Issue Type = Portal and
                        Membership. In the case description, enter your new
                        sandbox store’s friendly URL (for example:
                        http://your-store-name.mybigcommerce.com) and request
                        conversion to a Sandbox. We will flag this as a sandbox
                        store to ensure your continued access to the store, as
                        opposed to the normal 15-day trial. This can take around
                        two days.

                        7. When you log into your new store, use the same email
                        that you used for step 3 above.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ##  Troubleshooting


                        ### Are all fields required?


                        While not all fields are required to publish edits for
                        your listing, they are all highly recommended. Without
                        filling in all fields, your listing will be missing
                        information that merchants have seen on other listings
                        and expect to see throughout the Marketplace.


                        ###  I’ve logged in to Dev Tools, but I don’t see my
                        published listing. Where is it?


                        You may be logged in with the wrong account. Each
                        listing can only be owned by one user, so it is likely
                        assigned to another email address. If you’re unable to
                        track down the correct owner account for your solution,
                        please reach out to <a
                        href="mailto:appstore@bigcommerce.com">appstore@bigcommerce.com</a>.


                        ### I saved my changes, but my listing detail page on
                        BigCommerce.com/Apps has not updated yet. What’s the
                        problem?


                        The changes will be effective immediately in your
                        control panel app card, but the updates can take up to
                        24 hours to appear on the public BigCommerce
                        Marketplace. Feel free to use this as a grace period to
                        make additional edits as needed.
                      header:
                        anchor: becoming-a-partner_partner-program-troubleshooting
                    - type: callout
                      data:
                        type: success
                        body: >-
                          Questions? Please contact <a
                          href="mailto:appstore@bigcommerce.com">appstore@bigcommerce.com</a>
              - title: App Store Approval Requirements
                route:
                  path: /app-store-approval-requirements
                data:
                  blocks:
                    - type: html
                      data: <h1>App Store Approval Requirements</h1>
                    - type: text
                      data: >-
                        Dev Tools is the BigCommerce workspace for developing
                        single-click apps. Within Dev Tools, you'll create the
                        Client Id and Client Secret to authenticate your apps,
                        submit new apps to the App Marketplace, and manage
                        existing Marketplace listings.


                        Dev Tools can be found by clicking [My
                        Apps](https://devtools.bigcommerce.com/) in the upper
                        right corner of the page. 
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## App Store Approval Requirements


                        The requirements to submit an app are listed below, as
                        well as where the information needs to be updated.


                        ### Prerequisites


                        Make sure you’ve applied and been approved for our
                        [Technology Partner
                        Program](https://partners.bigcommerce.com/English/register_email.aspx)
                        before you’re ready to submit your app - you’ll need a
                        valid Partner ID to do so. You’ll also need to accept
                        the Terms & Conditions in the [Partner
                        Portal](https://partners.bigcommerce.com/English/)
                        before we can publish your app.


                        ### General Requirements


                        -   Support resources should be available throughout the
                        app experience, including in your onboarding flow and
                        the app’s dashboard.
                            
                        -   Make sure to reference BigCommerce using the proper
                        formatting. You can visit our [Media
                        Kit](https://www.bigcommerce.com/press/media-kit/) for
                        any BigCommerce branding assets needed.
                            
                        -   The app and app listing should make no references to
                        competitor platforms.


                        -   Use the brand name you’ve given your app for your
                        app title throughout your app content. This listing name
                        should be a concise title for easy identification and
                        should not include additional taglines or descriptors.
                        The name will always appear alongside your summary, so
                        there’s no need to muddy your app’s branding with
                        duplicate content when that tagline is already displayed
                        with it!  
                              
                            - If your solution is a connector to a specific third-party service, or you’re offering only a specific feature, make sure to include both the name of the third party service or feature and your company name (Ex: “Marketplace by BigCommerce”, “Search by BigCommerce”), with your company name following the feature.
                            
                        -   Your app, including any storefront components,
                        should be compatible with all [browsers](#stencil-link)
                        that the BigCommerce platform supports.


                        ### Functionality


                        -   Your app must work as intended, be free of defects,
                        and not conflict with or break any default BigCommerce
                        functionality, including the BigCommerce storefront and
                        checkout.
                            
                        -   Utilize any V3 API resources that are currently
                        available for the data you need from a BigCommerce
                        store.
                            
                        -   The dashboard and callback URLs for your app should
                        operate strictly over HTTPS using a valid SSL
                        certificate.
                            
                        -   Apps should offer [multi-user
                        support](/api-docs/getting-started/building-apps-bigcommerce/building-apps#building-apps_multi-user-support)
                        so that permissions for the app can be distributed by
                        the store owner to additional users, from the
                        BigCommerce control panel.
                            
                        -   Any apps that process transactions or handle credit
                        card data will need to pass a PCI Compliance review with
                        our Security team, and also be compatible with our
                        Optimized One-Page Checkout.
                            
                        -   Avoid copy/paste for storefront code - use the [V3
                        Scripts API](/api-reference/content/content-scripts-api)
                        to programmatically inject code snippets into a store’s
                        Script Manager and storefront theme.
                            
                        -   If your app requires payment, you’ll need to collect
                        payment from the user within your app. See Pricing &
                        Categorization under App Summary for more information.


                        ### Installation


                        -   Apps should be Single-Click and use our OAuth token
                        exchange flow to authenticate the user
                            
                        -   Single-Click does not mean everything  completed in
                        one click, but that authentication is handled in that
                        click - other tasks can be handled post-auth with the
                        user
                            
                        -   When the app is installed, a styled HTML page must
                        be returned in the iframe of the BigCommerce control
                        panel - this content cannot be blank and must follow our
                        [user-interface
                        constraints](/api-docs/getting-started/building-apps-bigcommerce/building-apps#building-apps_user-interface-constraints).
                            
                        -   During the OAuth handshake, be sure to store the
                        user’s token against their store hash - rather than
                        their email address - to avoid any problems with
                        ownership changes or multi-user support.
                    - type: callout
                      data:
                        body: >-
                          If your app cannot meet these requirements, please
                          reach out to <a
                          href="mailto:appstore@bigcommerce.com">appstore@bigcommerce.com</a>
                          in order to discuss the potential for a Connector app
                          listing. In the majority of cases, a Single-Click app
                          will be the more appropriate solution and put your
                          integration on par with other Marketplace partners,
                          but exceptions may be made under certain circumstances
                    - type: text
                      data: >-
                        ### Recommendations


                        -   Have a form to fill out for new users? We recommend
                        auto-filling user input fields with data from the [Store
                        Information API
                        resource](/api-reference/store/store-information-api),
                        which already contains much of the info you might need
                        from a new user.
                            
                        -   No account approval process needed for your app?
                        Consider automatically generating accounts for stores
                        that install your app and don’t match an existing store
                        in your database.
                            
                        -   Require login on launch? Use the information in the
                        BigCommerce payload to your callback URL to authenticate
                        the user without asking for a username and password each
                        time.
                            
                        -   Want to share user testimonials? Add a link to your
                        full case study in the Case Studies field, with a title
                        and short description.
                    - type: text
                      data: '---'
                    - type: tabs
                      data:
                        children:
                          - title: App Summary
                            blocks:
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6012/1536259683439
                                header:
                                  anchor: app-summary
                              - type: text
                                data: >-
                                  ### Contact Name

                                  Use the email address that was created when
                                  applying for your Partner Id. 


                                  ### Partner Name

                                  List the name of your company​, as you want it
                                  to be attributed on the detail page.


                                  ### Partner Website

                                  Provide the URL for your homepage so users can
                                  learn more about your company.


                                  ### Support email

                                  Email where users can get help with the app.
                                  This should be a formal group email at your
                                  company domain (Ex: support@app-partner.com)
                                  rather than a personal email. If not provided,
                                  this option will not be displayed.


                                  ### Support website

                                  A Support email and website for users to reach
                                  out as needed.

                                  These will be publicly visible on the
                                  Marketplace, so make sure to stay away from
                                  personal emails or non-support URLs. Your
                                  public detail page will include a button for
                                  users to “Get Support,” which will take them
                                  to this URL in a new tab. If not provided, the
                                  button will not be displayed on your detail
                                  page.


                                  ### Partner ID

                                  When you’re ready to submit your listing for
                                  review, you will need to enter your [Partner
                                  ID](https://partners.bigcommerce.com/English/register_email.aspx)
                                  for your Technology Partner account. This
                                  field is not required to create, save, or edit
                                  a Draft prior to submission. 
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6012/1536259722234
                              - type: text
                                data: >-
                                  ### App Name

                                  Use the brand name you’ve given your app for
                                  your app title throughout your app content.
                                  This listing name should be a concise title
                                  for easy identification and should not include
                                  additional taglines or descriptors. The name
                                  will always appear alongside your summary, so
                                  there’s no need to muddy your app’s branding
                                  with duplicate content when that tagline is
                                  already displayed with it.


                                  #### Pricing & Categorization

                                  Select one of our pre-formatted pricing
                                  options to call out your app’s starting price.
                                  If you offer a forever-free plan, choose the
                                  “Free” option. If your app does not fit one of
                                  our formatted options, specify your details in
                                  a few words in the “Other” selection.

                                  - If you need to specify more detail on your
                                  pricing options, save it for your app
                                  description.  

                                  Choose the most appropriate category for your
                                  app.
                              - type: callout
                                data:
                                  body: >-
                                    If your solution is a connector to a
                                    specific third-party service, or you’re
                                    offering only a particular feature, make
                                    sure to include both the name of the third
                                    party service or feature and your company
                                    name​ (Ex: “Marketplace by BigCommerce,”
                                    “Search by BigCommerce”). The company name
                                    needs to follow the feature.
                              - type: text
                                data: >-
                                  ### App Logo

                                  Your primary app logo should be 350 x 130px
                                  (or larger at this ratio) with a white
                                  background and dark branding in the
                                  foreground. The logo should only include
                                  branding, no taglines necessary.


                                  ### App Icon

                                  The app icon will be included on the main app
                                  detail page and the sidebar in the BigCommerce
                                  control panel once the app is installed. This
                                  should be a square 200x200px image.


                                  ### Price

                                  Select one of our pre-formatted pricing
                                  options to call out your app’s starting price.
                                  If you offer a forever-free plan, choose the
                                  “Free” option. If your app does not fit one of
                                  our options, specify your details in a few
                                  words in the “Other” selection.
                              - type: callout
                                data:
                                  body: >-
                                    If you need to specify more detail on your
                                    pricing options, save it for your app
                                    description.
                              - type: text
                                data: >-
                                  ### App Summary

                                  A short tagline description of your app that
                                  will be used on your app card in category and
                                  search results within the Marketplace. 128
                                  characters max.


                                  ### App Icon

                                  Your app icon will be included on the main app
                                  detail page and the sidebar in the BigCommerce
                                  control panel once the app is installed. This
                                  should be a square 200 x 200px image.


                                  ### Category

                                  Choose the most appropriate category for your
                                  app. Take a look at the live
                                  [Marketplace](https://www.bigcommerce.com/apps/)
                                  for an idea of where solutions are currently
                                  assigned to help decide the right category.
                                  The category selection will also be a search
                                  attribute for your listing. BigCommerce will
                                  review your category assignment and may
                                  re-categorize your listing prior to launch.
                                  One category maximum.
                          - title: Details
                            blocks:
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6012/1536260365610
                                header:
                                  anchor: app-details
                              - type: text
                                data: >-
                                  ### App Details

                                  A more in-depth value proposition for your
                                  listing, including how your solution works,
                                  why your solution stands out in its category,
                                  and why a merchant should choose you over
                                  other competitors. Avoid using fluff or
                                  buzzwords, as this field will not be indexed
                                  for search. 200 words max recommended.


                                  ### Videos

                                  Include videos that highlight the purpose and
                                  value of your solution. Select the video
                                  hosting platform (YouTube or Vimeo) and enter
                                  the video ID.


                                  #### Video Best Practices


                                  **YouTube**


                                  Turn off ads for any videos you've already
                                  uploaded. 


                                  1. Sign in to YouTube.


                                  2. In the top right, click your account icon >
                                  Creator Studio.


                                  3. On the left, select Video Manager.


                                  4. Select the video(s) where you want to turn
                                  ads off.


                                  5. Click Actions > More actions >
                                  Monetization.


                                  6. Select Off.


                                  7. Click Submit.


                                  **Vimeo**


                                  Per Vimeo’s guidelines, businesses may not use
                                  Basic or Plus accounts to host videos. If you
                                  want to upload commercial videos, you must use
                                  Vimeo PRO or Business. Commercial content
                                  includes:


                                  Videos promoting or representing a for-profit
                                  business or brand 

                                  Videos containing any form of advertising 

                                  Videos hosted on behalf of a business (i.e.,
                                  uploaded to Vimeo and embedded on your
                                  company’s website) 

                                  Product demos and tutorials


                                  *Note:* Ads appear to viewers based on their
                                  level of Vimeo membership - not yours. Basic
                                  and non-logged in viewers may see ad banners
                                  below the video player.


                                  ### Case Studies

                                  These can either be “Thought Leadership” case
                                  studies and/or traditional case studies that
                                  demonstrate how BigCommerce merchants have
                                  benefited from using your solution with their
                                  business. Use the + ​icon to add a case study,
                                  and the x ​icon to remove. Four case studies
                                  maximum.
                              - type: callout
                                data:
                                  type: warning
                                  body: >-
                                    Case studies that include competitor
                                    platforms are not allowed and will be
                                    removed. Partners will be required to
                                    repurpose general case studies, remove
                                    competitor platform mentions, and republish
                                    the asset accordingly.
                              - type: text
                                data: >-
                                  ### Features

                                  Use these fields to enumerate the major
                                  features your platform or solution has to
                                  offer. Include a brief title for each feature,
                                  and a description of the feature to accompany
                                  it. The feature title will be search indexed
                                  in the Marketplace, so be specific with your
                                  feature names and include major functions
                                  potential users will search for. Use the +
                                  icon to add a feature, and the x icon to
                                  remove. Utilize the rich text editing of these
                                  fields to bold, underline, or italicize copy
                                  as needed. 


                                  Up to five features can be added.
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6012/1536260434551
                              - type: text
                                data: >-
                                  ### Legal Terms & Privacy 

                                  Links to your privacy policy and terms of
                                  service. This requirement is in place due to
                                  legal liability and is non-optional. 


                                  ### International Optimization

                                  Please add the countries for which your
                                  solution is optimized and those which your
                                  solution does not currently support. 
                              - type: callout
                                data:
                                  type: info
                                  body: >-
                                    This feature will not currently be utilized
                                    in the Marketplace, but will be a part of
                                    planned internationalization updates.
                              - type: text
                                data: >-
                                  ### Help Guides

                                  Links to your User and Installation Guides as
                                  a reference for existing users and prospects.


                                  We now ask that you include links to your
                                  solution’s user installation guide (PDF,
                                  support articles, etc.) and standard user
                                  guide for prospective users to review before
                                  installation. If you do not submit links, this
                                  field will not be displayed on your listing
                                  detail page, however we highly recommend
                                  including these with your submission.
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6012/1536260486010
                              - type: text
                                data: >-
                                  ### App Screenshot

                                  Add screenshots of your solution’s
                                  functionality or user interface as it appears
                                  when integrated with BigCommerce so users know
                                  what to expect.


                                  ### Alternate Logo

                                  Your alternate logo will be used if your app
                                  is featured on the homepage carousel of the
                                  Marketplace. This image should be 259 x 158px
                                  (or larger at this ratio) with a dark
                                  background and white or light branding in the
                                  foreground. The logo should only include
                                  branding, no taglines necessary.
                          - title: Technical
                            blocks:
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6012/1536260547856
                                header:
                                  anchor: app-technical
                              - type: text
                                data: >-
                                  ### Multiple Users


                                  By default, your app will only be accessible
                                  to the store owner (i.e., the user who created
                                  the store). Optionally, you can allow your app
                                  to be accessible to other store users.
                                  Consider the following before enabling
                                  [multi-user
                                  support](/api-docs/getting-started/building-apps-bigcommerce/building-apps#multi-user-support):


                                  -   Once you enable multi-user support, a
                                  store admin will still need to grant access to
                                  other users from within the store control
                                  panel. For each user account, there are
                                  settings that grant access to specific apps.
                                      
                                  -   Your app should be aware that when it
                                  receives the [Load
                                  Callback](/api-docs/getting-started/building-apps-bigcommerce/building-apps#load-uninstall-removal-requests),
                                  the user information passed in might not be
                                  the store owner’s. You’ll need to determine
                                  how to respond if you see a different user.
                                  For example, you may want to provision a new
                                  user account in order to personalize the
                                  experience.
                                      
                                  -   You can optionally specify a [Remove User
                                  Callback
                                  URI](/api-docs/getting-started/building-apps-bigcommerce/building-apps#load-uninstall-removal-requests)
                                  to receive a callback when a store admin
                                  revokes a user’s access.
                                      
                                  ### App Type


                                  Select the type of app. We recommend [Single
                                  Click
                                  Apps](/api-docs/getting-started/building-apps-bigcommerce/types-of-apps#single-click-apps)
                                  although some qualify to [Connector
                                  Apps.](/api-docs/getting-started/building-apps-bigcommerce/types-of-apps#connector)


                                  ### Callback URLS


                                  You must have an [Auth Callback
                                  URI](/api-docs/getting-started/building-apps-bigcommerce/building-apps#installation-update-sequence)
                                  and a [Load Callback
                                  URI](/api-docs/getting-started/building-apps-bigcommerce/building-apps#installation-update-sequence)
                                  to register your app.


                                  #### Public URIs Required before Submission


                                  Because the Auth Callback URI and Load
                                  Callback URI requests originate from the
                                  browser and not from BigCommerce, you can use
                                  non–publicly-available URIs and a self-signed
                                  certificate for a quick start. However, you
                                  must switch to – and test your app with – a
                                  publicly available Auth Callback URI and Load
                                  Callback URI before submitting your app for
                                  consideration in the App Marketplace.


                                  If you want to receive a callback when the
                                  store owner uninstalls your app, you can
                                  provide an [Uninstall Callback
                                  URI](/api-docs/getting-started/building-apps-bigcommerce/building-apps#load-uninstall-removal-requests).
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6012/1536260600336
                              - type: text
                                data: >-
                                  ### OAuth Scopes

                                  If you know the [OAuth
                                  scopes](/api-docs/getting-started/about-api/authentication#oauth-scopes)
                                  that your app requires, you should select
                                  these. If you do not yet know the scopes that
                                  you need, you can just request minimal
                                  permissions (such as Information: Read-Only)
                                  to get started. However, once you determine
                                  the scopes you need, you must:

                                  - Modify the scopes of your app in My Apps and
                                  save the changes.

                                  - Obtain the new OAuth token during the [App
                                  Installation or Update
                                  flow](https://developer.bigcommerce.com/api/#app-installation-and-update-sequence).

                                  - Retest your app to make sure it still
                                  functions properly with the new token.
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6012/1536260650757
                              - type: text
                                data: >-
                                  Add in any instructions needed to test the app
                                  thoroughly. 
                          - title: Review
                            blocks:
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6012/1536260677950
                                header:
                                  anchor: app-review
                              - type: text
                                data: >-
                                  Review the information added before submitting
                                  the app. Look over this page carefully, once
                                  the app is submitted, if it is rejected there
                                  will be another fee for submission.
                          - title: Preview
                            blocks:
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6012/1536261272003
                                header:
                                  anchor: app-preview
                              - type: text
                                data: >-
                                  This is an approximation of what the app’s
                                  page will look like in the BigCommerce
                                  Marketplace.
                          - title: Payment & Submission
                            blocks:
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6012/1536261347648
                                header:
                                  anchor: app-payment
                              - type: text
                                data: >-
                                  At this point you make sure the information
                                  has been filled out completely and the app has
                                  been thoroughly tested before submitting for
                                  review. Updates to the App will not require
                                  the submission fee again. 
        - title: Catalog
          route:
            path: /catalog
          data:
            children:
              - title: Products
                route:
                  path: /products-overview
                data:
                  blocks:
                    - type: html
                      data: "<h1> Products Overview </h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3>On This Page</h3>\n\t<ul>\n    <li><a href=\"#products-overview_introduction\">Introduction</a></li>\n\t<li><a href=\"#products-overview_products\">Products</a></li>\n    <li><a href=\"#products-overview_product-images\">Product Images</a></li>\n    <li><a href=\"#products-overview_product-videos\">Product Videos</a></li>\n    <li><a href=\"#products-overview_custom_fields\">Custom Fields</a></li>\n    <li><a href=\"#products-overview_bulk-pricing-rules\">Bulk Pricing Rules</a></li>\n     <li><a href=\"#products-overview_metafields\">Product Metafields</a></li>\n     <li><a href=\"#products-overview_reviews\">Product Reviews</a></li>\n     <li><a href=\"#products-overview_brands\">Brands</a></li>\n     <li><a href=\"#products-overview_variant-options\">Variant Options</a></li>\n     <li><a href=\"#products-overview_variants\">Variants</a></li>\n     <li><a href=\"#products-overview_modifier-options\">Modifier Options</a></li>\n    <li><a href=\"#products-overview_complex-rules\">Complex Rules</a></li>\n     <li><a href=\"#products-overview_categories\">Categories</a></li>\n    \n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Introduction


                        The Catalog refers to a store’s collection of physical
                        and digital products. The Catalog includes all the
                        information about a product such as MPN, warranty,
                        price, and images. 
                      header:
                        anchor: products-overview_introduction
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Products


                        [Products](/api-reference/catalog/catalog-api/products/getproducts)
                        are the primary catalog entity, and the primary function
                        of the e-commerce platform is to sell products on the
                        storefront and other selling channels.


                        Products can either be Simple or Complex. 


                        Products can also be Physical or Digital. 


                        * Physical products are typically products that exist in
                        a physical form, have a weight, and are being sold by
                        retailers with the intent of shipping them to
                        customers. 


                        * Digital products, on the other hand, may not have a
                        physical representation in the real world; this includes
                        downloadable products such as computer software, ebooks,
                        music, images, and other digital media. Alternatively, a
                        digital product may be used to sell services such as spa
                        treatments, consulting, and so forth - which also do not
                        require shipping.
                      header:
                        anchor: products-overview_products
                    - type: callout
                      data:
                        title: Product Creation
                        body: Only one Product can be created at a time.
                    - type: text
                      data: >-
                        ### Create a Simple Product


                        Simple products do not have any options, modifiers, or
                        variants, and therefore cannot be configured or modified
                        before they are added to cart. A simple product is its
                        own variant. 
                      header: {}
                    - type: http
                      data:
                        headers:
                          Accepts: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{{CLIENT ID}}'
                          X-Auth-Token: '{{ACCESS TOKEN}}'
                        method: post
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products
                        body: |-
                          {
                            "name": "BigCommerce Coffee Mug",
                            "price": "10.00",
                            "categories": [
                              23,
                              21
                            ],
                            "weight": 4,
                            "type": "physical"
                          }
                      header:
                        title: Try It Now
                        subtitle: >-
                          Use this to create your own Simple Product. Replace
                          the test data with your own.
                    - type: callout
                      data:
                        body: >-
                          When options are created via the /products endpoint,
                          the display_type defaults to radio button.
                        title: Creating Options
                      header: {}
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ### Create a Complex Product


                        Complex products have at least one option and may have
                        modifiers or variants.


                        The [Create
                        Products](/api-reference/catalog/catalog-api/products/getproducts)
                        endpoint supports the creation of multiple variants
                        along with the base product in a single call.
                      header: {}
                    - type: http
                      data:
                        headers:
                          Accepts: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{{CLIENT ID}}'
                          X-Auth-Token: '{{ACCESS TOKEN}}'
                        method: post
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products
                        body: |-
                          {
                            "name": "BigCommerce Coffee Mug",
                            "price": "10.00",
                            "categories": [
                              23,
                              21
                            ],
                            "weight": 4,
                            "type": "physical",
                            "variants": [
                              {
                                "sku": "SKU-BLU",
                                "option_values": [
                                  {
                                    "option_display_name": "Mug Color",
                                    "label": "Blue"
                                  }
                                ]
                              },
                              {
                                "sku": "SKU-GRAY",
                                "option_values": [
                                  {
                                    "option_display_name": "Mug Color",
                                    "label": "Gray"
                                  }
                                ]
                              }
                            ]
                          }
                      header:
                        title: Try It Now
                        subtitle: >-
                          Use this to create your own test product. Replace the
                          test data with your own.
                    - type: text
                      data: >-
                        The [Create a
                        Product](/api-reference/catalog/catalog-api/products/createproduct)
                        endpoint supports the creation of multiple variants
                        along with the base product in a single call.


                        ### Digital Products


                        Digital products are purchaseable items that don't have
                        a physical representation and are not shipped to the
                        customer; for example, manuals, ebooks, or music. A
                        downloadable product file can be associated with a
                        digital product.


                        Downloadable product files are intended for products of
                        the “digital” type, typically for selling some kind of
                        media file or software. Product dimensions are not
                        required because the item is not shipped.


                        Files must be added to digital products using the
                        [Control Panel or
                        WebDav](https://support.bigcommerce.com/articles/Public/Creating-Downloadable-Products/#adding-downloadable-product)
                        (attaching via the API is not supported). Additional
                        settings such as a description of the file and maximum
                        downloads can be set in the Control Panel.
                    - type: http
                      data:
                        headers:
                          Accepts: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{{CLIENT ID}}'
                          X-Auth-Token: '{{ACCESS TOKEN}}'
                        method: post
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products
                        body: |-
                          {
                            "name": "ebook: A Guide to Coffee",
                            "price": "10.00",
                            "categories": [
                              23,
                              21
                            ],
                            "type": "digital",
                            "images": [
                              {
                                "is_thumbnail": true,
                                "image_url": "https://your-custom-image/image_name.png"
                              }
                            ]
                          }
                      header:
                        title: Try It Now
                        subtitle: >-
                          Use this to create your own Digital Product. Replace
                          the test data with your own.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Product Images


                        [Product
                        images](/api-reference/catalog/catalog-api/product-images/getproductimages)
                        are used to show shoppers what they’re buying and
                        merchandise products. When creating an image,
                        `image_url` or an `image_file` can be passed in. 


                        If using `image_file` Content-Type needs to be set to 

                        Content-Type: multipart/form-data. Any other updates
                        using the /POST or /PUT will be rejected with the
                        form-data.
                      header:
                        anchor: products-overview_product-images
                    - type: http
                      data:
                        method: put
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/images
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                        body: |-
                          {
                            "is_thumbnail": true,
                            "sort_order": 1,
                            "description": "Yellow Large Bath Towel",
                            "image_url": "https://your-custom-image/image_name.png"
                          }
                      header:
                        title: Try it Now
                        subtitle: >-
                          Use this to add a Image to your Product. Replace the
                          test data with your own.
                    - type: text
                      data: >-
                        ### Product Thumbnails


                        Only one image can be the [product
                        thumbnail](/api-reference/catalog/catalog-api/models/productimage).
                        The product thumbnail is the image that shows on the
                        product listing page, in search results and any other
                        location that features the product. If only one image is
                        on the product it becomes both the thumbnail and the
                        main product image. Images can also be added to
                        [variants](/api-reference/catalog/catalog-api/product-variants/getvariantsbyproductid). 
                      header: {}
                    - type: code
                      data: |-
                        {
                          "data": {
                            "id": 382,
                            "product_id": 158,
                            "is_thumbnail": true,
                            "sort_order": 0,
                            "description": "",
                            "image_file": "a/521/foglinenbeigestripetowel1b_1024x1024__83011__60806.jpg",
                            "url_zoom": "https://cdn8.bigcommerce.com/s-{{store_hash}}/products/158/images/382/foglinenbeigestripetowel1b_1024x1024__83011__60806.1534344511.1280.1280.jpg?c=2",
                            "url_standard": "https://cdn8.bigcommerce.com/s-{{store_hash}}/products/158/images/382/foglinenbeigestripetowel1b_1024x1024__83011__60806.1534344511.560.850.jpg?c=2",
                            "url_thumbnail": "https://cdn8.bigcommerce.com/s-{{store_hash}}/products/158/images/382/foglinenbeigestripetowel1b_1024x1024__83011__60806.1534344511.330.500.jpg?c=2",
                            "url_tiny": "https://cdn8.bigcommerce.com/s-{{store_hash}}/products/158/images/382/foglinenbeigestripetowel1b_1024x1024__83011__60806.1534344511.66.100.jpg?c=2",
                            "date_modified": "2018-08-15T14:48:31+00:00"
                          },
                          "meta": {}
                        }
                      header:
                        title: Product Thumbnails
                        subtitle: >-
                          GET
                          https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/{{product_id}}/images/{{images_id}}
                      config:
                        mode: json
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Product Videos

                        [Product
                        Videos](/api-reference/catalog/catalog-api/product-videos/getproductvideos),
                        in addition to images, can help shoppers understand what
                        they’re buying and help sell the product. A product can
                        have more than one video.


                        * Product videos must be hosted on YouTube. The video_id
                        corresponds to the “v” parameter in a video url. 


                        Example: https://www.youtube.com/watch?v=***R12345677***
                      header:
                        anchor: products-overview_product-videos
                    - type: http
                      data:
                        method: put
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/videos
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                        body: |-
                          {
                            "title": "BigCommerce Mug Video",
                            "description": "Video Describing the Mug",
                            "sort_order": 1,
                            "type": "youtube",
                            "video_id": "123345AA"
                          }
                      header:
                        subtitle: >-
                          Use this to add a Video to your Product. Replace the
                          test data with your own.
                        title: Try it Now
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Custom Fields


                        [Custom
                        fields](/api-reference/catalog/catalog-api/product-custom-fields/getcustomfields)
                        are a feature intended for product specifications, in a
                        key: value arrangement. As an example, there might be
                        fields indicating technical specifications about an LED
                        TV  such as screen size, maximum resolution, HDR
                        support, etc. Alternatively, if selling wine, I might
                        use Custom Fields for specifications such as vintage,
                        region, grape, etc. Custom fields can not be used to add
                        rules such as changing the weight or price of a
                        product. 
                      header:
                        anchor: products-overview_custom_fields
                    - type: callout
                      data:
                        body: >-
                          There is a limit of 250 characters for custom field
                          values.
                    - type: text
                      data: >-
                        Custom Fields are intended to be used in a couple of
                        contexts:


                        * Displaying specifications on the product detail page
                        and on the product listing pages such as category and
                        brand pages.

                        * Powering faceted search (searching/filtering by custom
                        field values)
                    - type: http
                      data:
                        method: put
                        body: |-
                          {
                            "name": "Release Year",
                            "value": "2018"
                          }
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/custom-fields
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                      header:
                        subtitle: >-
                          Use this to add a Custom Field to your Product.
                          Replace the test data with your own.
                        title: Try It Now
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Bulk Pricing Rules


                        [Bulk Pricing
                        Rules](/api-reference/catalog/catalog-api/product-bulk-pricing-rules/getbulkpricingrules)
                        are intended for merchants who want to offer wholesale
                        discounts for buying in bulk. They apply once products
                        are added to cart, but they are displayed as a callout
                        on the storefront to let shoppers know how they can
                        save.


                        Bulk Pricing rules in the catalog are on the product,
                        meaning that they’ll trigger even if several different
                        variants of the product are in the cart, as long as the
                        total quantity of those variants meets one of the
                        quantity breaks. [Price List bulk
                        pricing](/api-reference/catalog/pricelists-api/price-lists-records/setpricelistrecordcollection)
                        works differently.
                      header:
                        anchor: products-overview_bulk-pricing-rules
                    - type: http
                      data:
                        method: put
                        body: |-
                          {
                            "bulk_pricing_rules": [
                              {
                                "quantity_min": 10,
                                "quantity_max": 15,
                                "type": "price",
                                "amount": 3
                              },
                              {
                                "quantity_min": 16,
                                "quantity_max": 25,
                                "type": "price",
                                "amount": 5
                              }
                            ]
                          }
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/bulk-pricing-rules
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                      header:
                        title: Try It Now
                        subtitle: >-
                          Use this to add Bulk Pricing Rules to your Product.
                          Replace the test data with your own.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Product Metafields


                        [Metafields](/api-reference/catalog/catalog-api/product-metafields/createproductmetafield)
                        allow a developer to set up key and namespace pairs to
                        store data against a resource, like a product. The data
                        does not appear in the storefront or the control panel.
                        This is useful for when information needs to be passed
                        back and forth between an app and the store. 


                        Metafields can be added to variants, products,
                        categories, and brands.
                      header:
                        anchor: products-overview_metafields
                    - type: http
                      data:
                        method: put
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/metafields
                        body: |-
                          {
                            "permission_set": "read",
                            "namespace": "Location",
                            "key": "bin_number",
                            "value": "#4456",
                            "description": "location of the product",
                            "resource_type": "product",
                            "resource_id": 131
                          }
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                      header:
                        subtitle: >-
                          Use this to add a Metafield to your Product. Replace
                          the test data with your own.
                        title: Try It Now
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Product Reviews

                        [Product reviews
                        ](/api-reference/catalog/catalog-api/product-reviews/getproductreviews)contains
                        ratings and feedback from shoppers who have purchased a
                        product. Reviews are displayed on product pages. 


                        Reviews cannot be created in the control panel, but they
                        can be created via API. Creating them via API is useful
                        if you are migrating to BigCommerce from another
                        platform and do not want to lose existing reviews. 


                        Product Reviews are a native platform feature, but they
                        can be turned off in favor of a custom setup.
                      header:
                        anchor: products-overview_reviews
                    - type: http
                      data:
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/reviews
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                        method: post
                        body: |-
                          {
                            "title": "Great Coffee Mug",
                            "text": "This coffee mug kept my liquids hot for several hours.",
                            "status": "pending",
                            "rating": 5,
                            "email": "testing@bigcommerce.com",
                            "name": "BigCommerce",
                            "date_reviewed": "2018-07-20T17:45:13+00:00"
                          }
                      header:
                        subtitle: >-
                          Use this to create a Product Review. Replace the test
                          data with your own.
                        title: Try It Now
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Brands


                        [Brands](/api-reference/catalog/catalog-api/brands/getbrands)
                        are another form of catalog taxonomy, similar to
                        Categories. However, there are a few differences:


                        * Exist as a single “list” on the store, with no tree
                        structure

                        * Can only have a single assignment to a product; a
                        product may have at most one brand, but a brand can have
                        many products.
                         
                        They’re primarily used to tag products so that consumers
                        can find Brands they’re interested in (such as Nike
                        shoes). Brands have their own page on the storefront
                        which shows all the products in that Brand. They’re also
                        used as part of faceted search navigation.
                      header:
                        anchor: products-overview_brands
                    - type: http
                      data:
                        method: post
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/brands
                        body: |-
                          {
                            "name": "BigCommerce",
                            "page_title": "BigCommerce",
                            "meta_keywords": [
                              "ecommerce",
                              "best in class",
                              "grow your business"
                            ],
                            "image_url": "https://your-custom-image.png"
                          }
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                      header:
                        subtitle: >-
                          Use this to create your own Brand. Replace the test
                          data with your own.
                        title: Try It Now
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Variant Options


                        [Variant
                        options](/api-reference/catalog/catalog-api/product-variant-options/getoptions)
                        are any choices that the shopper needs to make that will
                        result in the selection of a variant. Color and Size are
                        typical examples of Variant Options.  A t-shirt can have
                        different combinations of sizes and colors.  


                        Example:

                        * Color is a Variant Option; Red, Orange, and Green are
                        Variant Option Values

                        * Size is a Variant Option; Small, Medium, and Large are
                        Variant Option Values


                        The combination of Small & Red is what is selected on
                        the storefront and correlates to a product variation,
                        also called a SKU. 
                         
                        **Variant options:**


                        * Require the shopper to select a value

                        * Only support “multiple choice” option types

                        * Rectangle

                        * Radio button

                        * Color swatch

                        * Product pick list

                        * Product pick list with images

                        * Will automatically generate variants when created in
                        the CP

                        * Are auto-generated from variants when a product is
                        created with variants via V3 API Product /POST



                        ### Variant Options Example:


                        | If the product is | Variant Option |

                        | -- | -- |

                        | T-Shirt | Blue</br>----------</br> Small<br>
                        Medium</br> Large|

                        | Backpack | Black</br>Yellow<br>----------<br>2L <br>
                        3L<br> 8L |



                        ### Options created on V2 and V3


                        * Variant options created on V3 cannot be accessed from
                        the Control Panel. They can only be accessed via the
                        API.

                        * If a product has options that were created using the
                        V2 API, additional options cannot be added using the V3
                        API.

                        * SKUs in V2 map to variants in V3.

                        * Base variants are not SKUs in V2.
                      header:
                        anchor: products-overview_variant-options
                    - type: callout
                      data:
                        body: >-
                          Creating a variant option does not automatically
                          create SKUs or build out variants. SKUs can be built
                          out later using the [variants
                          endpoint](/api-reference/catalog/catalog-api/product-variants/createvariant).
                    - type: text
                      data: >-
                        ### Create Variant Options

                        The following request will create options that will show
                        on the storefront as choices that can be selected by the
                        customer. In a separate request, you could build out
                        SKUs based on these variant

                        option values or a combination of variant option

                        values. A request like this could also be used to

                        add new choices to a variant that has already been
                        created.
                    - type: code
                      data: |-
                        {
                          "product_id": 134,
                          "name": "Size Rectangle",
                          "display_name": "Size",
                          "type": "rectangles",
                          "option_values": [
                            {
                              "label": "S",
                              "sort_order": 0,
                              "is_default": false
                            },
                            {
                              "label": "M",
                              "sort_order": 1,
                              "is_default": true
                            },
                            {
                              "label": "L",
                              "sort_order": 2,
                              "is_default": false
                            }
                          ]
                        }
                      header:
                        subtitle: >-
                          /POST
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/options
                        title: Create Size Variant Option
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Variant

                        [Variants](/api-reference/catalog/catalog-api/product-variants/getvariantsbyproductid)
                        represent an item as it sits on the shelf in the
                        warehouse or a particular saleable product. A product
                        might be a t-shirt, while the variant would be “a small,
                        red t-shirt”. Variants are selected by shoppers on the
                        storefront via Product Options. In the case where a
                        product is simple, meaning it does not have any options,
                        the product is its own variant - called a base variant.
                        Everything you can buy should be a variant.


                        * Options build out variants. 

                        * Variants are usually what inventory is tracked
                        against 

                        * Can have their own price, weight, dimensions, image,
                        etc - or they can inherit these values from the product
                        if they have not been specified

                        * Must have a SKU code (unless they’re a base variant)

                        * In the case of non-base variants, variants will relate
                        to a particular combination of variant option values -
                        such as “small” and “red”


                        ### Variants:


                        | If the product is | Variant Option | Variant |

                        | -- | -- | -- |

                        | T-Shirt | Blue</br>----------</br> Small<br>
                        Medium</br> Large| SM-BLU<br> SM-MED <br> SM-LARG

                        | Backpack | Black</br>Yellow<br>----------<br>2L <br>
                        3L<br> 8L |BLACK-2L<br>BLACK-3L<br>BLACK
                        8L</br>----------<br>YELLOW-2L<br>YELLOW-3L<br>YELLOW-8L|



                        ## Create a Variant

                        Variants can be created in two ways:

                        * From existing variant options using the variant
                        options endpoint.
                        [v3/catalog/products/{product_id}/options](/api-reference/catalog/catalog-api/product-variants/createvariant)

                        * By adding the variants with variant options and skus
                        when creating the product. See [Create a Complex
                        Product](/api-reference/catalog/catalog-api/products/createproduct).


                        This will go over using existing variant options to
                        create the variants.


                        Use the
                        `https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/131/options`
                        endpoint to get the option information.
                      header:
                        anchor: products-overview_variants
                    - type: code
                      data: |-
                        {
                          "data": [
                            {
                              "id": 193,
                              "product_id": 134,
                              "name": "Size1533313432-134",
                              "display_name": "Size",
                              "type": "rectangles",
                              "sort_order": 0,
                              "option_values": [
                                {
                                  "id": 163,
                                  "label": "S",
                                  "sort_order": 0,
                                  "value_data": null,
                                  "is_default": false
                                },
                                {
                                  "id": 164,
                                  "label": "M",
                                  "sort_order": 1,
                                  "value_data": null,
                                  "is_default": true
                                },
                                {
                                  "id": 165,
                                  "label": "L",
                                  "sort_order": 2,
                                  "value_data": null,
                                  "is_default": false
                                }
                              ],
                              "config": []
                            },
                            {
                              "id": 194,
                              "product_id": 134,
                              "name": "Color1533313946-134",
                              "display_name": "Color",
                              "type": "swatch",
                              "sort_order": 1,
                              "option_values": [
                                {
                                  "id": 166,
                                  "label": "Blue",
                                  "sort_order": 1,
                                  "value_data": {
                                    "colors": [
                                      "#123C91"
                                    ]
                                  },
                                  "is_default": false
                                },
                                {
                                  "id": 167,
                                  "label": "Green",
                                  "sort_order": 2,
                                  "value_data": {
                                    "colors": [
                                      "#0F961E"
                                    ]
                                  },
                                  "is_default": false
                                },
                                {
                                  "id": 168,
                                  "label": "Red",
                                  "sort_order": 3,
                                  "value_data": {
                                    "colors": [
                                      "#E60C0C"
                                    ]
                                  },
                                  "is_default": false
                                }
                              ],
                              "config": []
                            }
                          ],
                          "meta": {
                            "pagination": {
                              "total": 2,
                              "count": 2,
                              "per_page": 50,
                              "current_page": 1,
                              "total_pages": 1,
                              "links": {
                                "current": "?page=1&limit=50"
                              }
                            }
                          }
                        }
                      header:
                        subtitle: >-
                          /GET
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/options
                        title: Example Response
                      config:
                        mode: json
                        highlightRange:
                          - from: '4'
                            to: '12'
                    - type: http
                      data:
                        method: get
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/options
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                      header:
                        subtitle: Get Variant Options
                        title: Try It Now
                    - type: text
                      data: >-
                        In the above response, there are two variant options of
                        size and color with three values each. 


                        To combine the variant option values into variants and
                        build out SKUs use the following endpoint:


                        `https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/131/variants`
                    - type: callout
                      data:
                        body: >-
                          Variants need to be created one at a time using this
                          endpoint. Only one variant option at a time can be
                          created; individual variant options will contain an
                          array of multiple values. To use a variant array and
                          create variants in the same call as the base product,
                          use the
                          [/catalog/product](/api-reference/catalog/catalog-api/products/createproduct)
                          endpoint during product creation.
                    - type: http
                      data:
                        method: put
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/variants
                        body: |-
                          {
                            "cost_price": 3,
                            "price": 12.99,
                            "retail_price": 15.99,
                            "weight": 1,
                            "width": 4,
                            "height": 14.6,
                            "depth": 22,
                            "is_free_shipping": true,
                            "purchasing_disabled": true,
                            "purchasing_disabled_message": "This item not available at this time.",
                            "product_id": 134,
                            "sku": "SMALL-BLUE",
                            "option_values": [
                              {
                                "id": 163,
                                "option_id": 193
                              },
                              {
                                "id": 166,
                                "option_id": 194
                              }
                            ]
                          }
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                      header:
                        subtitle: >-
                          Use this to add Variants to your Product . Replace the
                          test data with your own.
                        title: Try It Now
                    - type: text
                      data: "The `option_values` array combines the options Small and Blue to create the SKU SMALL-BLUE. The id in the option_values array is the id from the variant option response option_values > id. The option_id is the id of the option. \n\n```\n {\n            \"id\": 193, //option_id\n            \"product_id\": 134,\n            \"name\": \"Size1533313432-134\",\n            \"display_name\": \"Size\",\n            \"type\": \"rectangles\",\n            \"sort_order\": 0,\n            \"option_values\": [\n                {\n                    \"id\": 163, //id\n                    \"label\": \"S\",\n                    \"sort_order\": 0,\n                    \"value_data\": null,\n                    \"is_default\": false\n                }\n\t\t\t\t\t\t\t\t...\n```\n\n<br>\n\n### Create a Variant Using the Products Endpoint\n\nThe following example creates a base product, variant options, and variants in a single call to the /products endpoint. You can use this method to create a product and its variants in a single call without creating variant options first, but the option display type will default to radio button."
                    - type: callout
                      data:
                        body: >-
                          Swatch, Radio Buttons, Rectangle, dropdown, Product
                          List and Product List with Images. 
                        title: Supported Types
                    - type: http
                      data:
                        method: post
                        body: |-
                          {
                            "name": "BigCommerce Coffee Mug",
                            "price": "10.00",
                            "categories": [
                              23,
                              21
                            ],
                            "weight": 4,
                            "type": "physical",
                            "variants": [
                              {
                                "sku": "SKU-BLU",
                                "option_values": [
                                  {
                                    "option_display_name": "Mug Color",
                                    "label": "Blue"
                                  }
                                ]
                              },
                              {
                                "sku": "SKU-GRAY",
                                "option_values": [
                                  {
                                    "option_display_name": "Mug Color",
                                    "label": "Gray"
                                  }
                                ]
                              }
                            ]
                          }
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                      header:
                        subtitle: >-
                          Use this to create your own Product using the products
                          endpoint . Replace the test data with your own.
                        title: Try It Now
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Modifier Options


                        [Modifier
                        options](/api-reference/catalog/catalog-api/product-modifiers/getmodifiers)
                        are any choices that the shopper can make that will
                        change the way the merchant fulfills the product.
                        Examples include:

                        * A checkbox to add shipping insurance

                        * Text to be engraved on the product

                        * A color that an unfinished product is to be painted
                        before it’s shipped
                         
                        Critically, the modifier will not change the SKU/variant
                        being fulfilled, and you cannot track inventory against
                        combinations of modifier values. Modifiers typically
                        would not change which product is “picked off the shelf”
                        in the warehouse, but they change what happens to that
                        product before it’s sent to the shopper, or how it’s
                        sent.
                         
                        Modifier options:

                        * May be required or non-required

                        * Support all option types

                        * Cannot be used as part of a variant



                        An adjuster can be added to a modifier option to change
                        things such as increasing the price, changing the
                        weight, or shipping rules.  Adjusters cannot be applied
                        to all modifier types.


                        ### Modifier Options Example:


                        | If the product is | Variant Option | Variant |Modifier
                        |

                        | -- | -- | -- | -- |

                        | T-Shirt | Blue</br>----------</br> Small<br>
                        Medium</br> Large| SM-BLU<br> SM-MED <br> SM-LARG|
                        Checkbox<br>Donate to Charity|

                        | Backpack | Black</br>Yellow<br>----------<br>2L <br>
                        3L<br> 8L |BLACK-2L<br>BLACK-3L<br>BLACK
                        8L</br>----------<br>YELLOW-2L<br>YELLOW-3L<br>YELLOW-8L|
                        Text Field<br> Add Embroidery|
                      header:
                        anchor: products-overview_modifier-options
                    - type: callout
                      data:
                        body: >-
                          Swatch, radio buttons, rectangle list, drop-down,
                          product list, product list with images
                        title: Modifiers that support Adjusters
                    - type: text
                      data: >-
                        ### Add a modifier with price adjuster to an existing
                        product


                        The following example shows how to add a modifier, a
                        checkbox with a price adjuster, that will increase the
                        product's price by five dollars. 


                        Creating a checkbox with an adjuster requires two
                        separate calls: one to create the checkbox and a second
                        to add the adjuster. Adjusters are defined within the
                        `option_values` array, but `option_values` are not
                        allowed in the request to create a checkbox modifier
                        because creating a checkbox automatically generates two
                        mandatory option values: a Yes and a No. Once the
                        checkbox has been created along with its option values,
                        you can update the modifier to add an adjuster. 
                    - type: callout
                      data:
                        body: >-
                          swatch, radio buttons, drop-down, rectangle list,
                          product list, product list with images, and checkbox.
                        title: >-
                          Modifiers that require a second step to add an
                          adjuster
                    - type: text
                      data: 'First, a POST to create the modifier. '
                    - type: http
                      data:
                        method: put
                        body: |-
                          {
                            "type": "checkbox",
                            "required": false,
                            "config": {
                              "default_value": "Yes",
                              "checked_by_default": false,
                              "checkbox_label": "Check for Donation"
                            },
                            "display_name": "Add a $5 Donation"
                          }
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/modifiers
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                      header:
                        subtitle: >-
                          Use this to add a Modifier to your Product. Replace
                          the test data with your own.
                        title: Try It Now
                    - type: text
                      data: >-
                        Since this is a checkbox which has two states,
                        checked/unchecked or yes/no, two option values are
                        created. The default adjuster values are null. 
                    - type: code
                      data: |-
                        {
                          "data": [
                            {
                              "id": 160,
                              "product_id": 131,
                              "name": "Add-a-$5-Donation1535039590-191",
                              "display_name": "Add a $5 Donation",
                              "type": "checkbox",
                              "required": false,
                              "config": {
                                "checkbox_label": "Check for Donation",
                                "checked_by_default": false
                              },
                              "option_values": [
                                {
                                  "id": 149,
                                  "option_id": 160,
                                  "label": "Yes",
                                  "sort_order": 0,
                                  "value_data": {
                                    "checked_value": true
                                  },
                                  "is_default": false,
                                  "adjusters": {
                                    "price": {
                                      "adjuster": null,
                                      "adjuster_value": null
                                    },
                                    "weight": null,
                                    "image_url": "",
                                    "purchasing_disabled": {
                                      "status": false,
                                      "message": ""
                                    }
                                  }
                                },
                                {
                                  "id": 150,
                                  "option_id": 160,
                                  "label": "No",
                                  "sort_order": 1,
                                  "value_data": {
                                    "checked_value": false
                                  },
                                  "is_default": true,
                                  "adjusters": {
                                    "price": null,
                                    "weight": null,
                                    "image_url": "",
                                    "purchasing_disabled": {
                                      "status": false,
                                      "message": ""
                                    }
                                  }
                                }
                              ]
                            }
                          ],
                          "meta": {
                            "pagination": {
                              "total": 1,
                              "count": 1,
                              "per_page": 50,
                              "current_page": 1,
                              "total_pages": 1,
                              "links": {
                                "current": "?page=1&limit=50"
                              }
                            }
                          }
                        }
                      header:
                        subtitle: Create Modifier Option
                        title: Response
                    - type: text
                      data: >-
                        Next send a PUT request to update the modifier value.
                        This increases the price by $5 when the Yes option value
                        is selected.
                    - type: http
                      data:
                        method: put
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/modifiers/{modifier_id}/values
                        body: |-
                          {
                            "is_default": false,
                            "adjusters": {
                              "price": {
                                "adjuster": "relative",
                                "adjuster_value": 5
                              }
                            }
                          }
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                      header:
                        subtitle: >-
                          Use this to add Modifier Values to your Product.
                          Replace the test data with your own.
                        title: Try It Now
                    - type: text
                      data: >-
                        ### Troubleshooting: 422 Error


                        ```

                        {
                            "status": 422,
                            "title": "The product is currently associated with an option set, please remove it before editing an option or modifier.",
                            "type": "https://developer.bigcommerce.com/api#api-status-codes",
                            "errors": {
                                "product_id": "The product is currently associated with an option set, please remove it before editing an option or modifier."
                            }
                        }

                        ```


                        To fix this error:

                        * Modify the products using the V2 API

                        * Remove the option set using the V2 API or the Control
                        Panel, then remake the variants and modifiers using V3
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Complex Rules


                        [Complex
                        rules](/api-reference/catalog/catalog-api/product-complex-rules/getcomplexrules)
                        allow merchants to set up conditions and actions based
                        on shopper option selections on the storefront. You can
                        use them to vary the following based on option
                        selections made by the shopper:

                        * Price

                        * Weight

                        * Image

                        * Purchasability


                        Adjustments made by complex rules are displayed to
                        shoppers in real-time on the storefront.


                        For the majority of merchant use cases, **best
                        practice** will be to either assign values (such as a
                        price) directly to a variant or use adjusters on the
                        modifier option itself. However complex rules exist for
                        rare cases where a rule condition is too complex to
                        express in those forms easily. 


                        Use complex rules when an adjustment should be triggered
                        by:

                        * The selection of values across multiple modifier
                        options

                        * The combination of a particular variant/SKU and a
                        modifier option value.


                        ### Complex Rules Example:


                        | If the product is | Variant Option | Variant |Modifier
                        | Complex Rule |

                        | -- | -- | -- | -- | -- |

                        | T-Shirt | Blue</br>----------</br> Small<br>
                        Medium</br> Large| SM-BLU<br> SM-MED <br> SM-LARG|
                        Checkbox<br>Donate to Charity| Checkox<br> Donate to
                        Charity.<br> Add $5

                        | Backpack | Black</br>Yellow<br>----------<br>2L <br>
                        3L<br> 8L |BLACK-2L<br>BLACK-3L<br>BLACK
                        8L</br>----------<br>YELLOW-2L<br>YELLOW-3L<br>YELLOW-8L|
                        Text Field<br> Add Embroidery| N/A


                        <br>


                        ### Creating Complex Rules Based On Modifiers


                        Complex rules must be based on a combination of two or
                        more modifiers, such as two checkboxes. The following
                        example will add $10 to the product price when both
                        boxes are checked. 
                      header:
                        anchor: products-overview_complex-rules
                    - type: http
                      data:
                        method: put
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/complex-rules
                        body: |-
                          {
                            "product_id": 1200,
                            "enabled": true,
                            "price_adjuster": {
                              "adjuster_value": 10
                            },
                            "conditions": [
                              {
                                "modifier_id": 506,
                                "modifier_value_id": 852
                              },
                              {
                                "modifier_id": 507,
                                "modifier_value_id": 854
                              }
                            ]
                          }
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                      header:
                        subtitle: >-
                          Use this to add a Complex Rules to a Modifier. Replace
                          the test data with your own.
                        title: Try It Now
                    - type: text
                      data: >-
                        ### Troubleshooting


                        Complex rules must consist of multiple conditions that
                        trigger the rule adjustment. If multiple conditions are
                        not specified, the request will return a 422
                        Unprocessable Entity.


                        ```

                        {
                            "status": 422,
                            "title": "The rule must contain multiple modifier conditions with unique modifier ids or a variant condition and modifier condition",
                            "type": "https://developer.bigcommerce.com/api#api-status-codes"
                        }

                        ```
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Categories


                        [Categories](/api-reference/catalog/catalog-api/category/getcategories)
                        are a hierarchy of products available on the store,
                        presented in a tree structure. A store’s category
                        structure determines the primary menu structure of most
                        storefront themes, which are directly tied to it.


                        All products must be associated with at least one
                        Category, although a Category does not need to contain
                        any products. Unlike some e-commerce platforms, products
                        on BigCommerce can be associated with more than one
                        Category. 


                        A product associated with categories does not currently
                        have any priority or weighted order (there’s no “primary
                        category”), which can make it difficult to integrate
                        with some external systems which might wish to use a
                        product’s categories to map to a category structure in
                        that external system.
                      header:
                        anchor: products-overview_categories
                    - type: http
                      data:
                        method: post
                        body: |-
                          {
                            "parent_id": 18,
                            "name": "Shoes",
                            "description": "Shoes Available for purchase",
                            "sort_order": 1,
                            "page_title": "Shoes",
                            "is_visible": true
                          }
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/categories
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                      header:
                        subtitle: >-
                          Create a Category. Replace the test data with your
                          own.
                        title: Try It Now
                    - type: text
                      data: >-
                        ### Category Tree


                        [Category
                        Tree](/api-reference/catalog/catalog-api/catalog/getcatalogsummary)
                        returns a simple view of the parent > child relationship
                        of all categories in the store. This endpoint can be
                        used to fetch the categories if building out a custom
                        navigation for a store.
                    - type: code
                      data: |-
                        {
                          "data": [
                            {
                              "id": 33,
                              "parent_id": 0,
                              "name": "Clothing",
                              "is_visible": true,
                              "url": "/clothing/",
                              "children": []
                            },
                            {
                              "id": 23,
                              "parent_id": 0,
                              "name": "Shop All",
                              "is_visible": true,
                              "url": "/shop-all/",
                              "children": []
                            },
                            {
                              "id": 25,
                              "parent_id": 0,
                              "name": "Towels",
                              "is_visible": true,
                              "url": "/towels/",
                              "children": [
                                {
                                  "id": 26,
                                  "parent_id": 25,
                                  "name": "Bath Towels",
                                  "is_visible": true,
                                  "url": "/towels/bath-towels/",
                                  "children": [
                                    {
                                      "id": 30,
                                      "parent_id": 26,
                                      "name": "Bath Towels",
                                      "is_visible": true,
                                      "url": "/towels/bath-towels/bath-towels/",
                                      "children": []
                                    },
                                    {
                                      "id": 29,
                                      "parent_id": 26,
                                      "name": "Hand Towels",
                                      "is_visible": true,
                                      "url": "/towels/bath-towels/hand-towels/",
                                      "children": [
                                        {
                                          "id": 31,
                                          "parent_id": 29,
                                          "name": "Washcloths",
                                          "is_visible": true,
                                          "url": "/towels/bath-towels/hand-towels/wash-cloths/",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 28,
                                  "parent_id": 25,
                                  "name": "Beach Towels",
                                  "is_visible": true,
                                  "url": "/towels/beach-towels/",
                                  "children": []
                                },
                                {
                                  "id": 27,
                                  "parent_id": 25,
                                  "name": "Kitchen Towels",
                                  "is_visible": true,
                                  "url": "/towels/kitchen-towels/",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "id": 18,
                              "parent_id": 0,
                              "name": "Bath",
                              "is_visible": true,
                              "url": "/bath/",
                              "children": [
                                {
                                  "id": 34,
                                  "parent_id": 18,
                                  "name": "Shoes",
                                  "is_visible": true,
                                  "url": null,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "id": 32,
                              "parent_id": 0,
                              "name": "Hoodies",
                              "is_visible": true,
                              "url": "/hoodies/",
                              "children": []
                            },
                            {
                              "id": 19,
                              "parent_id": 0,
                              "name": "Garden",
                              "is_visible": true,
                              "url": "/garden/",
                              "children": []
                            },
                            {
                              "id": 21,
                              "parent_id": 0,
                              "name": "Kitchen",
                              "is_visible": true,
                              "url": "/kitchen/",
                              "children": []
                            },
                            {
                              "id": 20,
                              "parent_id": 0,
                              "name": "Publications",
                              "is_visible": true,
                              "url": "/publications/",
                              "children": []
                            },
                            {
                              "id": 22,
                              "parent_id": 0,
                              "name": "Utility",
                              "is_visible": true,
                              "url": "/utility/",
                              "children": []
                            }
                          ],
                          "meta": {}
                        }
                      header:
                        title: Category Tree Response Example
                      config:
                        mode: json
                    - type: http
                      data:
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/summary
                        method: get
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                      header:
                        subtitle: Get your store's Category Tree
                        title: 'Try It Now '
              - title: Price Lists
                route:
                  path: /price-list-overview
                data:
                  blocks:
                    - type: html
                      data: "<h1>Price List API</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#pricelist_what-is-a-pricelist\">What is a Price List?</a></li>\n        <li><a href=\"#pricelist_definitions\">Definitions</a></li>\n        <li><a href=\"#pricelist_notes\">Notes</a></li>\n        <li><a href=\"#pricelist_oauth-scopes\">OAuth Scopes</a></li>\n        <li><a href=\"#pricelist_available-webhooks\">Webhooks Available</a></li>\n    \t\t<li><a href=\"#pricelist_related-endpoints\">Related Endpoints</a></li>\n        <li><a href=\"#pricelist_object-properties\">Object Properties</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## What is a Price List?  


                        A Price List allows you to populate different versions
                        of catalog pricing and assign them to different
                        [Customer
                        Groups](/api-reference/customer-subscribers/customers-api).
                        The prices are specified exclusively at the variant
                        level. 


                        If an active Price List does not contain prices for a
                        variant then the Catalog pricing will be used. The
                        association of a Price List to a Customer Group can be
                        done either via the Control Panel or using the [Customer
                        Groups
                        API.](/api-reference/customer-subscribers/customers-api)


                        Price Lists will provide overridden price values to the
                        Stencil storefront. Final price display can be further
                        customized within the Stencil template. See the [Price
                        Object](https://stencil.bigcommerce.com/docs/price-object-properties)
                        in Stencil for further documentation.
                      header:
                        anchor: pricelist_what-is-a-pricelist
                    - type: text
                      data: '---'
                      header: {}
                    - type: text
                      data: "## Definitions\n\n- `Price List` : A collection of price records. `Price Records` make up a price list.\n \n- `Price Record`: A price override for a particular variant - minimally, this is a variant ID, price, and currency.\n        \n```\n\t{\n\t\t\"variant_id\": 3121,\n\t\t\"price\": 10.0,\n\t\t\"sale_price\": 8.0,\n\t\t\"retail_price\": 12.0,\n\t\t\"map_price\": 6.0,\n\t\t\"currency\": \"EUR\"\n\t}\n```\n\n        \n- `PriceRecordBatch`: A way to update several `Price Records` in a `Price List` at once. Using this bulk upsert endpoint, you can upsert up to 1000 Price Records in a single API call.\n\n- `Currency`:  A `Price List` can contain records for multiple currencies. At this time, *only price records that match the store's default currency will be used to determine storefront and in-cart prices.* Although BigCommerce supports a storefront currency selection, this is not currently integrated with Price Lists and will merely convert prices from the store's default currency for display convenience."
                      header:
                        anchor: pricelist_definitions
                    - type: code
                      data: |-
                        [{
                          "variant_id": 3121,
                          "price": 10.0,
                          "sale_price": 8.0,
                          "retail_price": 12.0,
                          "map_price": 6.0,
                          "currency": "USD"
                        }, {
                          "variant_id": 3255,
                          "price": 11.0,
                          "sale_price": 9.0,
                          "retail_price": 13.0,
                          "map_price": 7.0,
                          "currency": "USD"
                        }, {
                          "variant_id": 3256,
                          "price": 12.0,
                          "sale_price": 10.0,
                          "retail_price": 14.0,
                          "map_price": 8.0,
                          "currency": "USD"
                        }, {
                          "variant_id": 3257,
                          "price": 13.0,
                          "sale_price": 11.0,
                          "retail_price": 15.0,
                          "map_price": 9.0,
                          "currency": "USD"
                        }, {
                          "variant_id": 3258,
                          "price": 14.0,
                          "sale_price": 12.0,
                          "retail_price": 16.0,
                          "map_price": 10.0,
                          "currency": "USD"
                        }] 
                      header:
                        title: Example Price List
                      config:
                        mode: json
                    - type: code
                      data: |-
                        [

                            {
                                "id": 1,
                                "name": "Price List Test",
                                "is_default": false,
                                "category_access": {
                                    "type": "all"
                                },
                                "discount_rules": [
                                    {
                                        "type": "price_list",
                                        "price_list_id": 1
                                    }
                                ]
                            }
                        ]
                      header:
                        title: Example Price List assigned to a customer group
                    - type: text
                      data: >-
                        Under `discount_rules` the `type` is set to `price_list`
                        and the `price_list_id` is 1. Which is the id of the
                        price list the group has been assigned to.
                    - type: text
                      data: >-
                        ## Notes


                        - Bulk Pricing Tiers may additionally be associated with
                        a Price Record to indicate different pricing as the
                        quantity in cart increases.
                          
                        - If a variant has a `Price Record` any existing
                        product-level bulk pricing will not apply in the cart. 
                        For variants without `Price Records`, any existing
                        product bulk pricing will apply.
                      header:
                        anchor: pricelist_notes
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## OAuth Scopes

                        *
                        [Products](/api-docs/getting-started/basics/authentication#authentication_oauth-scopes)
                      header:
                        anchor: pricelist_oauth-scopes
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Webhooks Available


                        There are no direct webhooks available for Price Lists.
                        Since Price Lists directly relate to products, webhooks
                        related to products will fire for corresponding changes
                        such as pricing. 


                        *
                        [Products](/api-docs/getting-started/webhooks/webhook-events#webhook-events_products)

                        *
                        [SKU](/api-docs/getting-started/webhooks/webhook-events#webhook-events_sku)
                      header:
                        anchor: pricelist_available-webhooks
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Related Endpoints

                        * [Get Price List
                        Collection](/api-reference/catalog/pricelists-api/price-lists/getpricelistcollection)
                      header:
                        anchor: pricelist_related-endpoints
        - title: Store Management
          route:
            path: /store-management
          data:
            children:
              - title: Shipping
                route:
                  path: /shipping
                data:
                  children:
                    - title: Overview
                      route:
                        path: /shipping-overview
                      data:
                        blocks:
                          - type: html
                            data: "<h1>Shipping</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#shipping_what-is-a-shipment\">What is a Shipment?</a></li>\n        <li><a href=\"#shipping_storefront-server-checkout\">Storefront Checkout and Server to Server Checkout</a></li>\n        <li><a href=\"#shipping_order-shipping-addresses\">Order Shipping Addresses</a></li>\n        <li><a href=\"#shipping_shipping-zone-methods\">Shipping Zone and Shipping Methods</a></li>\n        <li><a href=\"#shipping_real-time-carriers\">Real-Time Carriers</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## What is a Shipment?

                              Shipments are created from orders. A shipment
                              represents a grouping of order line items that are
                              shipped to a customer, and multiple shipments can
                              be created from a single order.


                              The V2 Shipping API allows you to manage Shipping
                              Zones, Shipping Methods, and Shipping Carrier
                              Connections.


                              The Order Shipments resource creates a shipment
                              for an order. You can specify the shipping
                              provider, tracking number and shipping address id
                              when creating a shipment.


                              For more see:

                              * [Create a
                              Shipment](/api-reference/orders/orders-api/order-shipments/postordersorderidshipments)
                            header:
                              anchor: shipping_what-is-a-shipment
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Storefront Checkout and Server-to-Server
                              Checkout API


                              The Storefront and Server-to-Server Checkout APIs
                              provide methods for managing a checkout up until
                              the point when it is finalized into an order.
                              Because shipments can only be created from
                              finalized orders, a shipment cannot be created
                              from Checkout API endpoints. 


                              However, both the Storefront and Server-to-Server
                              Checkout APIs provide methods for creating a
                              Consignment, which specifies the line items that
                              should ship to a particular address. Creating a
                              Consignment corresponds with the actions that a
                              shopper might take when filling out the storefront
                              checkout page, assigning the items in their basket
                              to their respective shipping destinations. 


                              A Checkout will always have one Consignment
                              assigned to it, which is the first shipping
                              address. A Consignment supports multiple shipping
                              addresses, with each address having its own line
                              items.


                              For more see:

                              * [Storefront
                              Checkout](/api-reference/cart-checkout/storefront-checkout-api/checkout/checkoutsconsignmentsbycheckoutidpost)

                              * [Server to Server
                              Checkout](/api-reference/cart-checkout/server-server-checkout-api/checkout/checkoutsconsignmentsbycheckoutidpost)
                            header:
                              anchor: shipping_storefront-server-checkout
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Order Shipping Addresses


                              The Order Shipping Addresses endpoint allows you
                              to view the shipping addresses on an order. This
                              will be the address(es) the items are shipped to. 
                              An order can have more than one shipping address.


                              For more see:

                              * [Order Shipping
                              Addresses](/api-reference/orders/orders-api/order-shipping-addresses)
                            header:
                              anchor: shipping_order-shipping-addresses
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Shipping Zone and Shipping Methods


                              Shipping zones can be configured in the control
                              panel or using the API to designate where a
                              merchant ships their products and which shipping
                              methods should be available in each geographic
                              region. 


                              An example of a shipping zone might be North
                              America, and within that shipping zone, the
                              shipping methods might be Free Shipping,
                              Ship-by-Weight, and USPS.


                              For more see:

                              * [Shipping
                              Zones](/api-reference/shipping/shipping-api/shipping-zones/getshippingzones)

                              * [Shipping
                              Methods](/api-reference/shipping/shipping-api/shipping-method/getshippingzoneszoneidmethods)
                            header:
                              anchor: shipping_shipping-zone-methods
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Real-Time Carriers


                              BigCommerce offers native integrations with many
                              real-time shipping carriers such as UPS, Fedex,
                              and USPS. The Real-Time Carriers resource allows
                              you to connect an account for one of our natively
                              supported shipping carrier integrations. 


                              For a list of all supported carriers, see
                              [Real-Time Quote
                              Providers](https://support.bigcommerce.com/articles/Public/Setting-Up-a-Real-Time-Shipping-Quote-Shipping-Method/#providers).


                              For more see:

                              * [Set Up Real-Time
                              Carriers](/api-reference/shipping/shipping-api/shipping-carrier/postshippingcarrierconnection)

                              * [Configure Real-Time
                              Carriers](/api-reference/shipping/shipping-api/shipping-method/postshippingzoneszoneidmethods)
                            header:
                              anchor: shipping_real-time-carriers
                    - title: Shipper HQ
                      route:
                        path: /shipper-hq
                      data:
                        blocks:
                          - type: html
                            data: "<h1>Shipper HQ Metafields</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#shipper-hq-object-properties\">ShipperHQ Object Properties</a></li>\n        <li><a href=\"#control-panel-behavior\">Control Panel Behavior</a></li>\n        <li><a href=\"#add-shipperhq-metafield\">Add ShipperHQ Metafield</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              When ShipperHQ is enabled on a store, additional
                              fields become available on the product level:

                              * Shipping Origins

                              * Origin Locations

                              * Dimensional Rules are accessible. 


                              These field values can be set in the Control Panel
                              by the merchant as well as using the

                              [Product Metafields
                              Endpoint](/api-reference/catalog/catalog-api/product-metafields/createproductmetafield)
                              or the [Variant Metafields
                              Endpoint](/api-reference/catalog/catalog-api/product-variants-metafields/createvariantmetafield).
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## ShipperHQ Object Properties


                              | Property | Type | Values |

                              |---|---|---|

                              | permission_set | string | This must be set to
                              `write`. Setting to any other field will cause
                              unintended behavior. **required** |

                              | key | enum | Members: `shipping-groups`,
                              `shipping-origins`, `shipping-dimensional-rules`
                              **required** |

                              | value | JSON encoded string | This will be the
                              name of the attribute type in ShipperHQ. This
                              needs to be input exactly how it is listed within
                              ShipperHQ. To pass in more than one Shipping
                              Origin, Origin Location or Dimensional Rule use an
                              array with a comma-separated list. White spaces
                              and special characters need to be escaped. Must be
                              a JSON encoded string `"[\"Origin Name from
                              SHQ-1\",\" Origin Name from SHQ-2\"]"`
                              **required** |

                              | namespace | string | This will always be
                              `shipping.shipperhq` **required** |

                              | resource_type | string | Either `product` or
                              `variant` |

                              | resource_id | string | Id of the product or
                              variant **read-only** |

                              | description | string | ShipperHQ shipping
                              origins associated with this product/sku.
                              **read-only** |

                              | date_created | string | Date and time of the
                              metafield's creation. **read-only** |

                              | date_modified | string | Date and time when the
                              metafield was last updated. **read-only** |

                              | id | number | Id of the Metafield. **read-only**
                              |
                            header:
                              anchor: shipper-hq-object-properties
                          - type: callout
                            data:
                              type: warning
                              body: >-
                                The metafields must be entered exactly,
                                otherwise they will not work. Since metafields
                                can also be used to store information against a
                                product, if the <code>namespace</code> for
                                example is set to shipping and not
                                <code>shipping.shipperhq</code>, it will not
                                update the shipping information.
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              ## Control Panel Behavior


                              When Shipping Origins are set using the API, the
                              fields cannot be deleted using the Control Panel.
                              A /DELETE request must be sent to the metafields
                              resource.


                              `/DELETE
                              https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/{{product_id}}/metafields`
                            header:
                              anchor: control-panel-behavior
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Add ShipperHQ Metafield


                              `/POST
                              https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/{{product_id}}/metafields`
                            header:
                              anchor: add-shipperhq-metafield
                          - type: code
                            data: "{\n\t\"permission_set\": \"write\",\n\t\"key\": \"shipping-origins\",\n\t\"value\": \"[\\\"Alaska\\\",\\\"California\\\"]\",\n\t\"namespace\": \"shipping.shipperhq\"\n}"
                            header:
                              title: SHQ Add Metafield Request
                          - type: code
                            data: "{\n\t\"data\": [{\n\t\t\t\"id\": 51,\n\t\t\t\"key\": \"shipping-origins\",\n\t\t\t\"value\": \"[\\\"Alaska\\\",\\\"California\\\"]\",\n\t\t\t\"namespace\": \"shipping.shipperhq\",\n\t\t\t\"permission_set\": \"write\",\n\t\t\t\"resource_type\": \"product\",\n\t\t\t\"resource_id\": 214,\n\t\t\t\"description\": \"ShipperHQ shipping origins associated with this product/sku\",\n\t\t\t\"date_created\": \"2018-07-19T17:56:08+00:00\",\n\t\t\t\"date_modified\": \"2018-07-24T14:51:43+00:00\"\n\t\t},\n\t\t{\n\t\t\t\"id\": 52,\n\t\t\t\"key\": \"shipping-groups\",\n\t\t\t\"value\": \"[\\\"SHIPPING GROUP NAME\\\"]\",\n\t\t\t\"namespace\": \"shipping.shipperhq\",\n\t\t\t\"permission_set\": \"write\",\n\t\t\t\"resource_type\": \"product\",\n\t\t\t\"resource_id\": 214,\n\t\t\t\"description\": \"ShipperHQ shipping group rules associated with this product/sku\",\n\t\t\t\"date_created\": \"2018-07-24T14:51:43+00:00\",\n\t\t\t\"date_modified\": \"2018-07-24T14:51:43+00:00\"\n\t\t},\n\t\t{\n\t\t\t\"id\": 53,\n\t\t\t\"key\": \"shipping-dimensional-rules\",\n\t\t\t\"value\": \"[\\\"DIMENSIONAL RULES NAME\\\"]\",\n\t\t\t\"namespace\": \"shipping.shipperhq\",\n\t\t\t\"permission_set\": \"write\",\n\t\t\t\"resource_type\": \"product\",\n\t\t\t\"resource_id\": 214,\n\t\t\t\"description\": \"ShipperHQ dimensional rules associated with this product/sku\",\n\t\t\t\"date_created\": \"2018-07-24T14:51:43+00:00\",\n\t\t\t\"date_modified\": \"2018-07-24T14:51:43+00:00\"\n\t\t}\n\t],\n\t\"meta\": {\n\t\t\"pagination\": {\n\t\t\t\"total\": 3,\n\t\t\t\"count\": 3,\n\t\t\t\"per_page\": 50,\n\t\t\t\"current_page\": 1,\n\t\t\t\"total_pages\": 1,\n\t\t\t\"links\": {\n\t\t\t\t\"current\": \"?page=1&limit=50\"\n\t\t\t}\n\t\t}\n\t}\n}"
                            header:
                              title: SHQ Add Metafield Response
                    - title: Shipping Provider API
                      route:
                        path: /shipping-provider-api
                      data:
                        blocks:
                          - type: html
                            data: "<h1> Shipping Provider API </h1>\n<h3> On this Page </h3>\n<ul>\n  <li><a href=\"#carrier_service-signup\">Sign Up</a></li>\n  <li><a href=\"#carrier_service-before_development\">Before Development</a></li>\n  <li><a href=\"#carrier_service-developing-app\">Developing the App</a></li>\n\t<li><a href=\"#carrier_service-return_shipping_quotes\">Return Shipping Quotes</a></li>\n  <li><a href=\"#carrier_service-submitting-app\">Submitting the App</a></li>\n  <li><a href=\"#carrier_service-definitions\">Defintions</a></li>\n  <li><a href=\"#carrier_service-app_diagram\">App Diagram</a></li>\n  <li><a href=\"#carrier_service-related_apis\">Related APIs</a></li>\n  <li><a href=\"#carrier_service-sample_shipping_provider_php\">Sample Shipping Provider (PHP)</a></li>\n</ul>"
                          - type: text
                            data: >-
                              ## Introduction


                              The Shipping Provider API allows third parties to
                              integrate their own shipping carriers into the
                              BigCommerce checkout and control panel. Once
                              integrated, shoppers can fetch quotes on the
                              front-end from the shipping carrier within the
                              cart and checkout pages as they do with any other
                              shipping provider available today. Merchants have
                              access to configure and customize these providers
                              through the control panel as they would any other
                              shipping provider.


                              * A dropshipper that requires thier own rates

                              * A merchant that already has a shipping table

                              * Third party logistics

                              * Create a combination of in store and shipping
                              for shoppers



                              ### Prerequisites

                              **Scopes**  

                              The following OAuth scopes are required:

                              - [Information and
                              Settings](/api-docs/getting-started/authentication#authentication_oauth-scopes)  


                              **Endpoints**  

                              Be familiar with the following API Endpoints:

                              - [Shipping
                              Zones](/api-reference/store-management/shipping-api)

                              - [Shipping
                              Methods](/api-reference/store-management/shipping-api)

                              - [Shipping
                              Carriers](/api-reference/store-management/shipping-api)
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Sign Up


                              When creating your app, the shipping data needs to
                              be added to our Carrier Registry so it returns to
                              shoppers on the front-end.


                              To get your app setup send an email to: 

                              <a
                              href="shippingproviderapi@bigcommerce.com">shippingproviderapi@bigcommerce.com</a>.


                              Please include:

                              * Name

                              * Partner ID

                              * App ID (see below)

                              * Email

                              * Description of the app


                              To get your app ID, create an app in [Developer
                              Tools](https://devtools.bigcommerce.com/), fill
                              out the information on [Step 3
                              Technical](https://developer.bigcommerce.com/api-docs/partner/app-store-approval-requirements).
                              In the URL the app will have a unique ID. This is
                              what is sent in exchange for a carrier ID which
                              can be used to test the app.
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1552664114224
                            header:
                              title: App ID
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Before Development


                              BigCommerce will send requests to your server to
                              get information back about shipping quotes,
                              credential validation and configuration. 


                              ### Your Service URLs

                              Since BigCommerce will be sending requests, you
                              will need to provide BigCommerce with URLs that
                              can accept quote requests and optionally a URL to
                              check and validate connection options during app
                              registration. These can be any valid HTTPS URL
                              using port 443, for example:


                              `https://yourhost.com/rate`


                              Your host and rate should be replaced with your
                              own host and path. 


                              ### Routes


                              You should create a URL to provide shipping quotes
                              on your API. This is the URL used to check the
                              available shipping rates. The second URL
                              (optional) checks the merchant’s connection
                              settings are valid. It can perform any checks
                              necssary to do so such as looking up credentials
                              in your database or calling a downstream service
                              to verify them.


                              ### Requests and Responses


                              BigCommerce will send and receive data using JSON.
                              The request for rates will always be formatted
                              using the [Base Rate Request
                              Model](/carrier-service-api-beta/models/baseraterequest).
                              The response for rates should be formatted using
                              the [Carrier Quote
                              Object](/carrier-service-api-beta/models/carrierquoteobject).
                              The request to check for merchant app credentials
                              will be formatted as Check Connection Options
                              Request Payload and the response should be
                              formatted using the  Check Connection Options
                              Response Payload. 


                              ### Error Handling

                              In the case of errors, error messages should be
                              included in the response payload under the
                              messages key.


                              Example:


                              ```

                              {
                                "valid": false,
                                "messages" [
                                  {
                                    "text": "Your account ID is invalid",
                                    "type": "ERROR"
                                  }
                                ]
                              }

                              ```
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Developing the App


                              The intended use of the Shipping Provider API is
                              to create an app that merchants can install on
                              their store. This can be a standalone app or part
                              of an existing application. When developing the
                              app there are a few things to consider which are
                              listed below.


                              ### Control Panel Installation Workflow


                              During the app setup, if the Check Connection
                              Options URL is configured for the carrier, an
                              attempt to connect the carrier via the Shipping
                              Manager UI or the Connect Carrier API causes a
                              request to be made to that URL with the provided
                              options. The resource should respond indicating if
                              the credentials are valid and should provide an
                              explanation of what is wrong. If no such URL is
                              configured, this check will be skipped and the
                              credentials are assumed valid as long as they pass
                              type checks.
                          - type: code
                            data: |-
                              {
                                "connection_options" {
                                  "account_id": "a1ty"
                                }
                              }
                            header:
                              title: Sample Request
                              subtitle: >-
                                POST
                                https://developerserver.com/check_connection_options
                          - type: code
                            data: |-
                              {
                                "valid": false,
                                "messages" [
                                  {
                                    "text": "Your account ID is invalid",
                                    "type": "ERROR"
                                  }
                                ]
                              }
                            header:
                              subtitle: >-
                                POST
                                https://developerserver.com/check_connection_options
                              title: Sample Response
                          - type: callout
                            data:
                              body: >-
                                The step of validating the credentials is
                                optional. It does not change how the app
                                operates. It is best practice to authenticate
                                the user against your database or the downstream
                                provider service. 
                          - type: text
                            data: >-
                              Once the app is installed, it will be made
                              available for configuration by merchants and API
                              users. A merchant can navigate to the Shipping
                              Manager and enable, configure and disable the
                              carrier for any defined zone.


                              ### API Installation Workflow


                              To set up a carrier using the API, first connect
                              it using the Connect Carrier API. Make a request
                              containing the connection settings required by
                              your carrier. The ID of the carrier is required.
                              The carrier ID will be issued by BigCommerce when
                              your carrier is registered. All connection fields
                              are unique per carrier. If your carrier doesn’t
                              require any connection settings then this object
                              can be left empty.
                          - type: code
                            data: |-
                              {
                                "carrier_id": "carrier_33",
                                "connection": {
                                  "key": "userKey",
                                  "account_number": "userAccountNumber"
                                }
                              }
                            header:
                              subtitle: >-
                                POST
                                https://developerserver.com/shipping/carrier/connection
                              title: 'Sample Request '
                          - type: code
                            data: |-
                              {
                                "carrier_id": "carrier_33",
                                "connection": {}
                              }
                            header:
                              title: Sample Request with Empty Object
                              subtitle: >-
                                POST
                                https://developerserver.com/shipping/carrier/connection
                          - type: text
                            data: >-
                              Once connected, it’s possible to create shipping
                              methods for a connected carrier in any shipping
                              zone. Shipping zones can be queried using the
                              Shipping Zones resource. For any zone, a request
                              can be made to the Shipping Methods resource using
                              the zone ID from the Shipping Zones resource to
                              create a new method for the connected carrier. The
                              shipping carrier’s ID is required in the type
                              field.
                          - type: code
                            data: |-
                              {
                                "name": "Example Shipping Carrier",
                                "type": "carrier_33",
                                "settings": {
                                  "carrier_options": {
                                    "account_id": "a1ty"
                                  }
                                },
                                "enabled": true
                              }
                            header:
                              title: Sample Request
                              subtitle: >-
                                POST
                                https://api.bigcommerce.com/stores/{store_hash}/v2/shipping/zones/{zone_id}/methods
                          - type: code
                            data: |-
                              {
                                "id": 24,
                                "name": "Per Order Test",
                                "type": "perorder",
                                "settings": {
                                  "rate": 8.3
                                },
                                "enabled": true,
                                "handling_fees": {
                                  "fixed_surcharge": 3
                                },
                                "is_fallback": false
                              }
                            header:
                              title: Sample Response
                              subtitle: >-
                                POST
                                https://api.bigcommerce.com/stores/{store_hash}/v2/shipping/zones/{zone_id}/methods
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Returning Shipping Quotes


                              Whenever shipping rates are required, BigCommerce
                              checks its internal cache for valid entries. If a
                              valid entry exists, it will be used and the
                              shipping carrier will not be called. If a valid
                              cache entry does not exist, a request is made to
                              the Quote URL with details of the items to be
                              shipped, the shipping origin, and shipping
                              destination. If any connection settings or zone
                              settings are configured, these are also included.
                              The shipping carrier must then respond with zero
                              or more Shipping Quotes.
                          - type: code
                            data: |-
                              {
                                "base_options": {
                                  "origin": {
                                    "street_1": "685 MARKET ST",
                                    "street_2": "",
                                    "zip": "94105",
                                    "city": "SAN FRANCISCO",
                                    "state_iso2": "CA",
                                    "country_iso2": "US",
                                    "address_type": "commercial"
                                  },
                                  "destination": {
                                    "street_1": "",
                                    "street_2": "",
                                    "zip": "94103",
                                    "city": "",
                                    "state_iso2": "CA",
                                    "country_iso2": "US",
                                    "address_type": "residential"
                                  },
                                  "items": [
                                    {
                                      "sku": "SKU-100",
                                      "variant_id": "1",
                                      "product_id": "1",
                                      "name": "Shirt",
                                      "length": {
                                        "units": "in",
                                        "value": 1
                                      },
                                      "width": {
                                        "units": "in",
                                        "value": 1
                                      },
                                      "height": {
                                        "units": "in",
                                        "value": 1
                                      },
                                      "weight": {
                                        "units": "oz",
                                        "value": 1
                                      },
                                      "discounted_price": {
                                        "currency": "USD",
                                        "amount": "10"
                                      },
                                      "declared_value": {
                                        "currency": "USD",
                                        "amount": "10"
                                      },
                                      "quantity": 1,
                                      "attributes": []
                                    }
                                  ],
                                  "customer": {
                                    "customer_groups": [
                                      {
                                        "customer_group_id": 5,
                                        "customer_group_name": "Retail"
                                      }
                                    ],
                                    "customer_id": 6
                                  },
                                  "store_id": "ru7t7fv9",
                                  "request_context": {
                                    "reference_values": [
                                      {
                                        "name": "cart_id",
                                        "value": "8"
                                      }
                                    ]
                                  }
                                },
                                "connection_options": {
                                  "key": "userKey",
                                  "account_number": "userAccountNumber"
                                },
                                "zone_options": {
                                  "show_transit_time": true
                                },
                                "rate_options": []
                              }
                            header:
                              title: Sample Request
                              subtitle: 'POST https://developerserver.com/rate'
                          - type: code
                            data: |-
                              {
                                "quote_id": "sample_quote",
                                "messages": [],
                                "carrier_quotes": [
                                  {
                                    "carrier_info": {
                                      "code": "usps_pitney_bowes",
                                      "display_name": "USPS"
                                    },
                                    "quotes": [
                                      {
                                        "code": "",
                                        "rate_id": "9vcV1JfckPJZW2pjeNXcKP5y",
                                        "display_name": "USPS Priority Mail",
                                        "cost": {
                                          "currency": "USD",
                                          "amount": 6.35
                                        },
                                        "transit_time": {
                                          "units": "BUSINESS_DAYS",
                                          "duration": 1
                                        },
                                        "dispatch_date": "2018-08-29T00:00:00-05:00"
                                      },
                                      {
                                        "code": "",
                                        "rate_id": "EakTRTvck2XYGVAQw9Mza8WW",
                                        "display_name": "USPS Priority Mail Express",
                                        "cost": {
                                          "currency": "USD",
                                          "amount": 22.98
                                        },
                                        "transit_time": {
                                          "units": "BUSINESS_DAYS",
                                          "duration": 1
                                        },
                                        "dispatch_date": "2018-08-29T00:00:00-05:00"
                                      }
                                    ]
                                  },
                                  {
                                    "carrier_info": {
                                      "code": "fedex",
                                      "display_name": "FedEx"
                                    },
                                    "quotes": [
                                      {
                                        "code": "GND",
                                        "rate_id": "JnQ2MPqkAMX9cBsw0jyt551R",
                                        "display_name": "FedEx Ground",
                                        "cost": {
                                          "currency": "USD",
                                          "amount": 8.53
                                        },
                                        "transit_time": {
                                          "units": "BUSINESS_DAYS",
                                          "duration": 1
                                        },
                                        "dispatch_date": "2018-09-05T11:00:00-05:00"
                                      },
                                      {
                                        "code": "2DA",
                                        "rate_id": "QwygEz9XjZx1bT9rfDZsVxSy",
                                        "display_name": "FedEx 2 Day",
                                        "cost": {
                                          "currency": "USD",
                                          "amount": 10.47
                                        },
                                        "transit_time": {
                                          "units": "BUSINESS_DAYS",
                                          "duration": 2
                                        },
                                        "dispatch_date": "2018-09-05T11:00:00-05:00"
                                      }
                                    ]
                                  }
                                ]
                              }
                            header:
                              title: Sample Response
                              subtitle: 'POST https://developerserver.com/rate'
                          - type: text
                            data: >-
                              When an app with an associated shipping carrier is
                              uninstalled, all of the shipping methods and the
                              connection info for that carrier is automatically
                              removed from the store. Quote requests will no
                              longer be made and users will no longer see
                              shipping quotes for that carrier.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Submitting the App


                              Before submitting your app make sure you have the
                              following information. 


                              **Single Carrier vs Multi Carrier**


                              Whether the app is a single carrier or multiple
                              carriers. A single carrier app will offer one
                              service such as USPS. A multi carrier app will
                              offer more than one carrier such as USPS, DHL and
                              Canada Post. 


                              **Name and Description**


                              Name and description of the shipping carrier or
                              carriers. 


                              **Logo**


                              A 70x70 pixel logo that represents the shipping
                              carrier app. 


                              **Configuration Fields**


                              Any shipping zone-specific or connection-specific
                              fields to be made available to merchants or APIs
                              for configuration. Configuration fields can
                              include which rates to offer, packaging type or
                              packing method.  


                              To sumbit your app send an email to <a
                              href="shippingproviderapi@bigcommerce.com">shippingproviderapi@bigcommerce.com</a>.
                          - type: text
                            data: '---'
                          - type: text
                            data: '## App Diagram'
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1552664566834
                            header:
                              title: Carrier Service API
                          - type: text
                            data: >-
                              Only one registered shipping carrier may be
                              associated with an app. This [registered
                              carrier](#carrier_service-definitions) can provide
                              quotes from multiple downstream carriers if
                              desired. In this case it will become a
                              multi-carrier aggregator.
                          - type: text
                            data: >-
                              ## Definitions


                              | Name | Description |

                              | -- | -- |

                              | Configuration Fields | The fields the merchant
                              will see in the control panel. Merchants can
                              navigate to the Shipping Manager and enable,
                              configure and disable the carrier for any defined
                              zone. They will also be able to activate the app
                              using the Carrier Connection API. Then use the
                              Shipping Zones API and Shipping Methods API to
                              configure the app from there. |

                              | Quote URL | A URL for a resource of the shipping
                              carrier that accepts quote requests and responds
                              with shipping quotes. For more on the Quote URL
                              see typical app workflow below.| 

                              | Single Carrier vs Multi Carrier | A single
                              carrier app will offer only one shipping provider.
                              A multi carrier app will aggregate multiple
                              shipping carriers in one app.| 

                              | Countries Available | A list of countries where
                              the shipping carrier can be used. The default
                              behavior is that the carrier is available for
                              every shipping origin. In most cases this list
                              should be as broad as possible. For example, if
                              your carrier operates worldwide, make it available
                              worldwide. The countries can be limited further
                              than what the shipping carrier has provided. If
                              the service is worldwide, then leave this field
                              blank to specify that it is worldwide. This is an
                              optional step. |

                              | Shipping Carrier |  A shipping carrier is what
                              is built to provide quotes to BigCommerce. If a
                              shipping carrier uses more than one shipping
                              provider then it becomes a multi carrier
                              aggregator. A carrier includes a name, description
                              and a logo. |

                              | Multi-Carrier Aggregator | A shipping solution
                              that provides shipping quotes for multiple
                              carriers.|

                              | Check Connection Options URL | A URL for a
                              shipping carrier resource that accepts check
                              requests containing the connection options
                              provided by a user when enabling the carrier and
                              indicates whether or not those settings are valid.
                              This is an optional step. |

                              | Shipping Quote | An estimation of cost to ship a
                              set of items from an origin to a destination. |

                              | Shipping Zone | Describes a set of destination
                              addresses and the applicable shipping settings,
                              such as handling fees and available shipping
                              methods.|

                              | Shipping Origin | The location from which goods
                              are shipped. This determines which shipping
                              carriers are available for the merchant to
                              configure in the control panel. |
                          - type: text
                            data: '---'
                          - type: text
                            data: |-
                              ## FAQ

                              **What is a Carrier Registry?**
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Resources

                              ### Sample Apps

                              * [Sample Shipping
                              Provider](https://github.com/bigcommerce/sample-shipping-provider)
                              (PHP/Silex)

                              ### Webhooks

                              -
                              [Shipping](/api-docs/getting-started/webhooks/webhook-events#webhook-events_shipment)

                              ### Related Endpoints

                              -   [Shipping
                              Zones](https://developer.bigcommerce.com/api-reference/shipping/shipping-api/shipping-zones/getshippingzones)

                              -   [Shipping
                              Methods](https://developer.bigcommerce.com/api-reference/shipping/shipping-api/shipping-method/getshippingzoneszoneidmethods)

                              -   [Connect
                              Carriers](https://developer.bigcommerce.com/api-reference/shipping/shipping-api/shipping-carrier/postshippingcarrierconnection)
        - title: Customers & Subscribers
          route:
            path: /customers
          data:
            blocks: []
            children:
              - title: 'Overview '
                route:
                  path: /customers-subscribers-overview
                data:
                  blocks:
                    - type: html
                      data: "<h1>Customer & Subscribers</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#customers-subscribers_what-is-a-customer\">What is a Customer?</a></li>\n    \t\t<li><a href=\"#customers-subscribers_what-is-a-subscriber\">What is a Subscriber?</a></li>\n        <li><a href=\"#customers-subscribers_guests\">Guests</a></li>\n        <li><a href=\"#customers-subscribers_subscribers-v-customers\">Subscribers vs. Customers</a></li>\n        <li><a href=\"#customers-subscribers_oauth-scopes\">OAuth Scopes</a></li>\n        <li><a href=\"#customers-subscribers_webhooks\">Webhooks</a></li>\n        <li><a href=\"#customer-subscribers_related-enpoints\">Related Endpoints</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >
                        ## What is a Customer?


                        A customer is anyone who has made a purchase on a store
                        and created an account.  BigCommerce then stores email
                        address, customer address, and name against as a
                        record.  This information can be queried via the API. 


                        ### Customer Groups

                        Customer groups allow you to organize your customers,
                        give them discounts, and restrict access to specific
                        products or categories. For more information see
                        [Customer
                        Groups](https://support.bigcommerce.com/s/article/Customer-Groups).
                      header:
                        anchor: customers-subscribers_what-is-a-customer
                    - type: callout
                      data:
                        body: Customer Groups only available on specific plans
                    - type: text
                      data: >-
                        ### Customer Login API

                        The Customer Login API allows for single sign-on.

                        Once a customer has authenticated by logging in to a
                        third party system (CMS, portal, or app), you can use
                        the customer login API to seamlessly log the customer
                        into their BigCommerce customer account.


                        ### Current Customer API

                        The Current Customer API allows your application to
                        identify logged in customers. This is useful when you
                        need to show customer specific information.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## What is a Subscriber?


                        A subscriber is someone who has signed up for a store's
                        newsletter.  

                        Subscribers can be added by:

                        - Signing up for the newsletter via the signup box
                        located in the footer of most storefront themes

                        - Signing up for the newsletter during checkout

                        - POSTing to the Subscribers API


                        Where possible, the API indicates the origin of the
                        subscriber. If the subscriber was added during checkout,
                        the Order ID is included.
                      header:
                        anchor: customers-subscribers_what-is-a-subscriber
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Guests

                        Store
                        [settings](https://forum.bigcommerce.com/s/article/Checkout-Settings#checkout-settings)
                        can be set to allow a shopper to complete checkout
                        without creating an account. These shoppers are not
                        captured as customers or stored in the BigCommerce
                        system. If you want to capture guest data, using the
                        [Storefront
                        APIs](/api-docs/cart-and-checkout/cart-and-checkout-overview)
                        can help. 
                      header:
                        anchor: customers-subscribers_guests
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Subscribers vs. Customers


                        1. A subscriber is not always a customer. 

                        Someone can signup for the newsletter only and not
                        create an account. 

                        2. A customer is not always a subscriber. 

                        Signing up for the newsletter is a separate action from
                        creating an account and purchasing an item. 

                        3. A customer and a subscriber can be the same. 

                        If a shopper checks out on the storefront and opts into
                        the newsletter, they are not a customer and a
                        subscriber. 
                      header:
                        anchor: customers-subscribers_subscribers-v-customers
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## OAuth Scopes

                        * [Customers
                        Login](/api-docs/getting-started/basics/authentication#authentication_oauth-scopes)

                        *
                        [Customers](/api-docs/getting-started/basics/authentication#authentication_oauth-scopes)
                      header:
                        anchor: customers-subscribers_oauth-scopes
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Wehooks Available

                        *
                        [Customers](/api-docs/getting-started/webhooks/webhook-events#webhook-events_customer)
                      header:
                        anchor: customers-subscribers_webhooks
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Related Endpoints

                        * [Customer Login
                        API](/api-docs/customers/customer-login-api)

                        * [Current Customer
                        API](/api-docs/customers/current-customer-api)

                        * [Customers
                        API](/api-reference/customer-subscribers/customers-api)

                        * [Subscribers
                        API](/api-reference/customer-subscribers/subscribers-api)
                      header:
                        anchor: customer-subscribers_related-enpoints
              - title: Customer Login API
                route:
                  path: /customer-login-api
                data:
                  blocks:
                    - type: html
                      data: "<h1> Customer Login API </h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#customer-login_introduction\"> Introduction</a></li>\n    <li><a href=\"#customer-login_jwt\"> JWT</a></li>\n\t\t<li><a href=\"#customer-login_oauth-scope\">OAuth Scope</a></li>\n    <li><a href=\"#customer-login_sample-code\">Sample Code</a></li>\n    <li><a href=\"#customer-login_access-url\">Acces URL</a></li>\n    <li><a href=\"#customer-login_logging-in-a-customer\">Logging In a Customer</a></li>\n    <li><a href=\"#customer-login_troubleshooting-customer-login-api\">Troubleshooting</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Introduction

                        The Customer Login API enables single sign-on (SSO). It
                        allows your apps to programmatically log in a storefront
                        customer by using the login entry point URL:
                        `/login/token/{token}`. Here, {token} must be a JSON Web
                        Token (JWT) containing the parameters for the customer
                        login request, signed by your application’s Oauth client
                        secret.


                        Example use cases for the Customer Login API include:


                        * Integration with a SSO provider or IdP

                        * Continuous login between a BC storefront and another
                        system, such as a WordPress blog

                        * Any login method other than BC's typical email and
                        password login - for example, if you wanted to enable
                        customers to log in via a phone number and SMS password
                      header:
                        anchor: customer-login_introduction
                    - type: text
                      data: >-
                        ## JWT


                        JWT is a standard for verifying a login signature
                        between two parties. For a full overview of the JWT
                        standard, please see [JWT.IO](https://jwt.io/), where
                        you can find links to client libraries (in many
                        languages) that facilitate the generation and
                        verification of JWT tokens. BigCommerce also supplies
                        helper methods for generating login tokens in our [API
                        Client Libraries](/tools-resources).


                        ### JWT Standard


                        A valid JWT token is a string composed of three parts,
                        separated by periods (“.”), which correspond to the
                        encoded header, the encoded payload, and the signature.
                      header:
                        anchor: customer-login_jwt
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1535390918772
                      header:
                        anchor: example-jwt-token
                        title: Example JWT Token
                      config:
                        centered: true
                        maxWidth: '800'
                        maxHeight: '800'
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1535391044482
                      header:
                        title: Key
                        anchor: token-key
                      config:
                        centered: true
                        maxWidth: '400'
                        maxHeight: '400'
                    - type: text
                      data: "### Header\n\nThe header specifies the type of token (JWT) and the hashing algorithm.\n\n```\n{\n\t\"typ\": \"JWT\",\n\t\"alg\": \"HS256\" \n}\n```\n\nThe type and algorithm are always JWT and HS256. Those are the only values BigCommerce supports."
                      header: {}
                    - type: text
                      data: >-
                        ### Payload

                        The payload contains a series of claims that identify
                        the application requesting the login, the store, and the
                        customer to be logged in. Optionally, you can specify a
                        redirect URL to direct the customer to a page other than
                        the My Account page after login. 


                        Once a request has is made with a given `jti`, it cannot
                        be made again. This parameter is used to prevent replay
                        attacks by malicious actors intercepting the request or
                        obtaining it after the fact.


                        The `request_ip` field can be used as an additional
                        security precaution, to prevent a malicious actor from
                        intercepting the request and making it from another
                        browser or system before you do. If you supply this
                        value, BigCommerce checks the incoming request to ensure
                        that it is being made from the stated IP address
                        otherwise the request fails. We strongly encourage
                        setting this IP address value, but doing so is optional,
                        to support those cases where this information is not
                        available.
                      header: {}
                    - type: code
                      data: |
                        {
                        "iss": "Your app’s Oauth client ID",
                        "iat": "timestamp for when the token was issued",
                        "jti": "randomly generated string",
                        "operation": "customer_login",
                        "store_hash": "abc123",
                        "customer_id": 1234,
                        "redirect_to": "/account.php",
                        "request_ip": "111.222.333.444"
                        }
                      header:
                        anchor: example-payload
                        title: Example Payload
                      config:
                        mode: json
                    - type: text
                      data: >-
                        | Field Name | Type | Description |

                        | --- | --- | --- |

                        | iss | string | Indicates the token's issuer. This is
                        your application's client ID, which is obtained during
                        application registration in Developer Portal. |

                        | iat | integer| Time when the token was generated. This
                        is a numeric value indicating the number of seconds
                        since the [Unix
                        epoch](http://en.wikipedia.org/wiki/Unix_time).|

                        | jti | string | Request ID string that must be unique
                        across all requests made by your app. A UUID or other
                        random string would be an appropriate value. Most
                        libraries contain a method for generating a uuid. For
                        testing a [UUID
                        generator](https://www.uuidgenerator.net/) can be used,
                        but it recommended to use built in libraries.|

                        | operation | string | Must contain the string
                        "customer_login". |

                        | store_hash | string | Store hash identifying the store
                        you are logging into. |

                        | customer_id | integer | ID of the customer you are
                        logging in, as obtained through the Customer API. |

                        | redirect_to | string | Optional field containing a
                        relative path for the shopper's destination after login.
                        Will default to `/account.php`. |

                        | request_ip | string | Optional field containing the
                        expected IP address for the request. If provided,
                        BigCommerce will check that it matches the browser
                        trying to log in. If there is not a match, it will be
                        rejected |
                      header: {}
                    - type: text
                      data: >-
                        ### Signature


                        The signature is created by signing the header and
                        payload with the hashing algorithm specified in the
                        header (HS256) and your application’s Client Secret. 
                      header: {}
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## OAuth Scope

                        Your OAuth API credentials must include the
                        [customers_login](/api-docs/getting-started/basics/authentication#authentication_oauth-scopes)
                        scope.
                      header:
                        anchor: customer-login_oauth-scope
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Access URL

                        After generating the JWT token, your app should
                        immediately redirect the shopper’s browser to the
                        following access point URL to log the customer into
                        their account: `/login/token/{token}`


                        Example:

                        `https://storedomain.com/login/token/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
                        .eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ`
                      header:
                        anchor: customer-login_access-url
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Logging in a Customer

                        The following tutorial will walk through creating a
                        login token. We recommend scripting this process since
                        the iat is invalid after 30 seconds. For the purpose of
                        illustration, this tutorial will walk through creating a
                        token manually using the debugger tool at JWT.io,
                        although doing so can be tricky due to time
                        constraints.  


                        **Prerequisites**:

                        Client ID and Client Secret generated from the store
                        with the scope set to [Customers
                        Login](/api-docs/getting-started/basics/authentication#authentication_oauth-scopes).
                      header:
                        anchor: customer-login_logging-in-a-customer
                    - type: text
                      data: >-
                        ### Create a JWT Token


                        1. Run a /GET request against the
                        [Customers](/api-reference/customer-subscribers/customers-api/customers/getacustomer)
                        resource. Choose a customer and make note of the
                        customer_id. 
                      header: {}
                    - type: callout
                      data:
                        type: success
                        body: >-
                          If you are unsure how to make a /GET request see our
                          tutorial on [making your first request]().
                        title: Making a /GET request
                      header: {}
                    - type: text
                      data: >-
                        2. Create the payload by filling in the PAYLOAD:DATA on
                        jwt.io
                    - type: code
                      data: |-
                        {
                            "iss": "1234r5t6y7u8i9o0p",
                            "iat": 1535393113,
                            "jti": "20b7c03e-00da-4d29-91bf-2aa06a57575b",
                            "operation": "customer_login",
                            "store_hash": "{store_hash}",
                            "customer_id": 2,
                            "redirect_to": "/account.php"
                        }
                      header:
                        title: Create the Payload
                        anchor: create-the-paylpad
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1535469059335
                      header:
                        subtitle: JTW.io fields
                      config:
                        centered: true
                        maxWidth: '800'
                        maxHeight: '800'
                    - type: callout
                      data:
                        type: error
                        title: IAT Claim
                        body: 'The iat claim is only good for 30 seconds. '
                      header:
                        anchor: iat-claim
                    - type: text
                      data: >
                        3.  Add your Client Secret in the Verify Signature
                        Section. Replace the text `your-256-bit-secret` with the
                        Client Secret.

                        4. Copy the token from the encoded box and paste at the
                        end of the login/token url.  


                        *https://store-url/login/token/generated-jwt-token*


                        **Example**: 

                        https://storedomain.com/login/token/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
                        .eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9
                        .TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ


                        5. Paste the URL into the address bar.


                        If the request was successful then you will be logged in
                        as the customer and directed to /account.php. If it was
                        unsuccessful there will be a login attempt message and
                        you will be directed to /login.php
                    - type: text
                      data: >-
                        ## Sample Code


                        Code to generate a valid JWT token for a storefront
                        login request is provided in our API Client Libraries.
                        The list items below link to the repositories maintained
                        by BigCommerce:


                        * [PHP
                        Sample](https://github.com/bigcommerce/bigcommerce-api-php/blob/master/src/Bigcommerce/Api/Client.php#L421)

                        * [Python
                        Sample](https://github.com/bigcommerce/bigcommerce-api-python/blob/master/bigcommerce/customer_login_token.py)

                        * [Ruby
                        Sample](https://github.com/bigcommerce/bigcommerce-api-ruby/blob/master/examples/customers/customer_login.rb)


                        Client libraries in many other languages are at JWT.io.
                      header:
                        anchor: customer-login_sample-code
                    - type: tabs
                      data:
                        children:
                          - title: PHP Sample
                            blocks:
                              - type: code
                                data: |2-
                                      public static function getCustomerLoginToken($id, $redirectUrl = '', $requestIp = '')
                                      {
                                          if (empty(self::$client_secret)) {
                                              throw new Exception('Cannot sign customer login tokens without a client secret');
                                          }

                                          $payload = array(
                                              'iss' => self::$client_id,
                                              'iat' => time(),
                                              'jti' => bin2hex(random_bytes(32)),
                                              'operation' => 'customer_login',
                                              'store_hash' => self::$store_hash,
                                              'customer_id' => $id
                                          );

                                          if (!empty($redirectUrl)) {
                                              $payload['redirect_to'] = $redirectUrl;
                                          }

                                          if (!empty($requestIp)) {
                                              $payload['request_ip'] = $requestIp;
                                          }

                                          return JWT::encode($payload, self::$client_secret, 'HS256');
                                      }
                                header:
                                  subtitle: >-
                                    https://github.com/bigcommerce/bigcommerce-api-php/blob/master/src/Bigcommerce/Api/Client.php#L421
                                  title: Client.php
                                  anchor: php-sample
                                config:
                                  mode: php
                          - title: Python Sample
                            blocks:
                              - type: code
                                data: |+
                                  import os
                                  import time
                                  import uuid
                                  import jwt


                                  class CustomerLoginTokens(object):
                                      @classmethod
                                      def create(cls, client, id, redirect_url=None, request_ip=None):

                                          # Get the client_secret needed to sign tokens from the environment
                                          # Intended to play nice with the Python Hello World sample app
                                          # https://github.com/bigcommerce/hello-world-app-python-flask
                                          client_secret = os.getenv('APP_CLIENT_SECRET')

                                          if not client_secret:
                                              raise AttributeError('No OAuth client secret specified in the environment, '
                                                                   'please specify an APP_CLIENT_SECRET')

                                          try:
                                              client_id = client.connection.client_id
                                              store_hash = client.connection.store_hash
                                          except AttributeError:
                                              raise AttributeError('Store hash or client ID not found in the connection - '
                                                                   'make sure an OAuth API connection is configured. Basic auth is not supported.')

                                          payload = dict(iss=client_id,
                                                         iat=int(time.time()),
                                                         jti=uuid.uuid4().hex,
                                                         operation='customer_login',
                                                         store_hash=store_hash,
                                                         customer_id=id
                                                         )

                                          if redirect_url:
                                              payload['redirect_url'] = redirect_url

                                          if request_ip:
                                              payload['request_ip'] = request_ip

                                          token = jwt.encode(payload, client_secret, algorithm='HS256')

                                          return token.decode('utf-8')

                                      @classmethod
                                      def create_url(cls, client, id, redirect_url=None, request_ip=None):
                                          secure_url = client.Store.all()['secure_url']
                                          login_token = cls.create(client, id, redirect_url, request_ip)
                                          return '%s/login/token/%s' % (secure_url, login_token)

                                header:
                                  title: customer_login_token.py
                                  subtitle: >-
                                    https://github.com/bigcommerce/bigcommerce-api-python/blob/master/bigcommerce/customer_login_token.py
                                  anchor: python-sample
                                config:
                                  mode: python
                          - title: Ruby Sample
                            blocks:
                              - type: code
                                data: >-
                                  require 'bigcommerce'


                                  Bigcommerce.configure do |config|
                                    config.store_hash = ENV['BC_STORE_HASH']
                                    config.client_id = ENV['BC_CLIENT_ID']
                                    config.client_secret = ENV['BC_CLIENT_SECRET']
                                    config.access_token = ENV['BC_ACCESS_TOKEN']
                                  end


                                  # Get a customer

                                  customer = Bigcommerce::Customer.all(page:
                                  1).first


                                  # Generate token login url

                                  puts customer.login_token
                                header:
                                  subtitle: >-
                                    https://github.com/bigcommerce/bigcommerce-api-ruby/blob/master/examples/customers/customer_login.rb
                                  title: customer_login.rb
                                  anchor: ruby-sample
                                config:
                                  mode: ruby
                      header:
                        title: JWT Token Sample Code
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Troubleshooting


                        * If the server generating the iat is out of sync, the
                        login token will fail if the timestamp indicates a time
                        in the future or an expired token.


                        * The login URL can be visited only once. Once a GET
                        request is run against the link, the token is
                        invalidated. 


                        * Tokens can be validated or generated for testing
                        purposes using the debugger at https://jwt.io/.


                        * Tokens will be valid for a very short timeframe after
                        they are first generated, so tokens should not be
                        generated in advance. Instead, the application should
                        generate the token and then immediately redirect the
                        user’s browser to `/login/token/{token}`. If you're
                        seeing issues related to your system time differing from
                        BC's server time, you can use the <a
                        href="/api-reference/store-management/store-information-api/time-zone/gettime">/v2/time</a>
                        endpoint as a source of truth.
                      header:
                        anchor: customer-login_troubleshooting-customer-login-api
              - title: Current Customer API
                route:
                  path: /current-customer-api
                data:
                  blocks:
                    - type: html
                      data: "<h1> Current Customer API </h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#current-customer_identifying-logged-in-customers\">Identifying Logged-In Customers Securely</a></li>\n    <li><a href=\"#current-customer_logged-in-customers-javascript\">Example JavaScript</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Identifying Logged-In Customers Securely


                        If your application interacts dynamically with the
                        BigCommerce storefront, and conveys information that is
                        specific to a particular logged-in customer, you must
                        confirm that customer’s identity within the insecure
                        environment of the user’s browser.


                        To address this need, BigCommerce provides a Current
                        Customer endpoint, which your app can access via
                        JavaScript on the storefront. This endpoint returns a
                        JWT with identifying details about the customer. The
                        information is signed with your [OAuth client
                        secret](/api-docs/getting-started/basics/authentication#authentication_client-id-secret).
                      header:
                        anchor: current-customer_identifying-logged-in-customers
                    - type: text
                      data: >-
                        ## Example JavaScript


                        Below is example JavaScript that will access this JWT.
                        To test the JWT functionality, you can install this
                        JavaScript on your sandbox BigCommerce store. Your
                        application’s Client ID must be included in the request
                        (to identify the requesting application):
                      header:
                        anchor: current-customer_logged-in-customers-javascript
                    - type: code
                      data: |
                        <script type="text/javascript">
                        function customerJWT() {  
                            var appClientId = "**BC_CLIENT_ID**"; // TODO: Fill this in with your app's client ID
                            var xmlhttp = new XMLHttpRequest();
                            xmlhttp.onreadystatechange = function() {
                                if (xmlhttp.readyState == 4 ) {
                                   if (xmlhttp.status == 200) {
                                       alert('Customer JWT:\n' + xmlhttp.responseText);
                                   }
                                   else if (xmlhttp.status == 404) {
                                      alert('Not logged in!');
                                   }
                                   else {
                                       alert('Something went wrong');
                                   }
                                }
                            };
                            xmlhttp.open("GET", "/customer/current.jwt?app_client_id="+appClientId, true);
                            xmlhttp.send();
                        }
                        customerJWT();
                        </script>
                      header:
                        title: Identify Logged In Customers
                        anchor: identify-customers-script
                      config:
                        mode: html
                    - type: text
                      data: >-
                        If you are logged into the storefront with a customer
                        account, the above JavaScript should alert to the
                        browser with a JWT token. If no customer is logged in,
                        BigCommerce will return a 404 response, and you will see
                        an error message. The JWT returned from this endpoint
                        (example below) can be decoded on JWT.IO
                    - type: code
                      data: |-
                        {
                          "customer": {
                            "id": 4927,
                            "email": "john.doe@gmail.com",
                            "group_id": "6"
                          },
                          "iss": "bc/apps",
                          "sub": "abc123",
                          "iat": 1480831863,
                          "exp": 1480832763,
                          "version": 1,
                          "aud": "6sv16tfx3j5gsopm42ss5dd67g2srvq",
                          "application_id": "6sv16tasdgr2b5hs5dd67g2srvq",
                          "store_hash": "abc123",
                          "operation": "current_customer"
                        }
                      header:
                        title: Logged in Customers Response
                        anchor: logged-in-customer-response
                      config:
                        mode: json
                    - type: text
                      data: >-
                        By design, your application should send this token to
                        the application’s server, validate it against your
                        client secret, and then use it as a trusted indication
                        of the logged-in customer’s identity, before displaying
                        confidential information to them. 


                        An end-to-end example, which displays a customer’s
                        recently purchased products, is available in our
                        [Ruby](https://github.com/bigcommerce/hello-world-app-ruby-sinatra/)
                        and
                        [PHP](https://github.com/bigcommerce/hello-world-app-php-silex/)
                        sample apps.
        - title: Storefront
          route:
            path: /storefront
          data:
            children:
              - title: Scripts
                route:
                  path: /scripts-overview
                data:
                  blocks:
                    - type: html
                      data: "<h1>Scripts API</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#scripts_introduction\">Introduction</a></li>\n    \t\t<li><a href=\"#scripts_script-manager-partner-guidelines\">Script Manager API Partner Guidelines</a></li>\n        <li><a href=\"#script_prerequisites\">Prerequisites</a></li>\n        <li><a href=\"#scripts_upgrades-installation\">Upgrades and Installation</a></li>\n        <li><a href=\"#scripts_fixing-missing-scripts\">Fixing Missing Scripts</a></li>\n        <li><a href=\"#scripts_scripts-notes\">Notes</a></li>\n        <li><a href=\"#scripts_scripts-visibility\">Visibility Locations </a></li>\n    \t\t<li><a href=\"#scripts_oauth-scopes\"> OAuth Scopes</a></li>\n    \t\t<li><a href=\"#scripts_related-endpoints\">Related Endpoints</a></li>\n        <li><a href=\"#script_object-properties\">Object Properties</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Introduction


                        The BigCommerce Scripts API can be used to inject a
                        script into a store's template files. Some use cases:

                        * Insert tracking codes

                        * Storefront single-click applications

                        * Live chat, support plugins

                        * Theme extension or connector apps
                      header:
                        anchor: scripts_introduction
                    - type: text
                      data: >-
                        ## Script Manager API Partner Guidelines


                        With the Script Manager API, your Apps now have the
                        ability to insert scripts into a user’s storefront
                        without requiring the user to manually paste a snippet
                        of code into their control panel. You can freely update
                        these scripts while your App is installed, and, if
                        desired, automatically remove scripts if your App is
                        uninstalled.


                        For Apps being installed on our latest theme engine
                        (Stencil), this process is relatively straightforward.
                        However, if your App is already live, you may have
                        already asked merchants to paste a code snippet in one
                        of these two sections in the control panel:


                        - Footer Scripts

                        - Web Analytics


                        Also, since our older (Blueprint-based) themes do not
                        support the Script Manager API, you’ll still need some
                        way of providing users of older themes the documentation
                        they need, without burdening users of newer themes with
                        additional, unnecessary steps.


                        To help you transition to the Script Manager API, we’ve
                        provided some recommended strategies to deal with these
                        different situations. 


                        #### Stencil vs Blueprint


                        As mentioned above, BigCommerce supports two theme
                        engines: Stencil and Blueprint. Stencil is our latest
                        technology, and all new stores only have access to
                        Stencil themes. However, older stores may still be using
                        our legacy theme engine, Blueprint, which does not have
                        the ability to render scripts inserted through the
                        Script Manager API.


                        Because of this, you’ll need to check whether a user is
                        running Stencil to determine if their store supports the
                        Script Manager API. To do this, use the [Get Store
                        Information
                        API](https://developer.bigcommerce.com/api/v2/#store-information-reference)
                        endpoint and check the `stencil_enabled` flag. (requires
                        [store_v2_information_read_only
                        scope](https://developer.bigcommerce.com/api/#oauth-scopes)).
                      header:
                        anchor: scripts_script-manager-partner-guidelines
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Prerequisites


                        To better understand the content of this document, you
                        should be familiar with the app installation procedure,
                        which is outlined here:

                        [App
                        Installation](/api-docs/getting-started/building-apps-bigcommerce/building-apps#building-apps_installation-update-sequence)
                      header:
                        anchor: scripts_script-prerequisites
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Upgrades and Installation


                        ### Installing An App on Stencil


                        For Apps being installed on Stencil stores, we recommend
                        inserting your scripts immediately after receiving the
                        POST response during the Auth Callback flow. Add your
                        scripts using the Create Script endpoint of the Script
                        Manager API.


                        We highly recommend leaving the auto_uninstall flag set
                        to true, so that your App will properly clean itself up
                        when uninstalled. More information about this flag can
                        be found <a href="#script_object-properties">here</a>.


                        #### Upgrading Existing Apps on Stencil


                        If your App has already been released, you may have
                        existing users with pasted-in code somewhere in their
                        control panel. There are a few possible ways to deal
                        with this situation.


                        1.) __Do nothing__


                        If you don’t need to upgrade existing merchants to the
                        Script Manager API, it’s perfectly fine to leave them
                        as-is. You’ll need to maintain documentation for the
                        manual uninstallation process so that merchants with
                        older installations know what to clean up, and you won’t
                        be able to automatically update or add scripts for these
                        users. 


                        2.) __Prompt merchants to upgrade__


                        If you want your merchants to gradually update to the
                        new Script Manager over time, you can prompt them to do
                        so on your App’s landing page. You’ll need to keep track
                        of which of your merchants are not using the Script
                        Manager yet to know whether you need to display this
                        prompt. Also, make sure to check that they are running
                        Stencil (via the Get Store Information endpoint) before
                        prompting them to upgrade.


                        Once a user decides to upgrade, you can walk them
                        through removing the old pasted-in code in their control
                        panel, and then, once the merchant clicks a button,
                        install your scripts through the Script Manager API.


                        3.) __Silently upgrade to the Script Manager API__


                        Finally, if it’s possible for your old, pasted-in
                        scripts to live alongside the new Script Manager API
                        scripts, you may be able to upgrade to using the Script
                        Manager API without any user intervention being
                        required. Whether or not this is possible will vary
                        depending on the implementation of your App.


                        While your merchants will be loading more data on their
                        storefront pages than necessary, this method will allow
                        you to transition to using the Script Manager API for
                        all of your installations immediately. Keep in mind
                        you’ll still need to document the manual uninstallation
                        process for existing installations.


                        ### Installing Apps on Blueprint Stores 


                        As mentioned, the Blueprint theme engine does not
                        support the Script Manager API. Any scripts inserted
                        through this API will not be rendered on any storefront
                        pages. To prevent unpredictable behavior should a user
                        change their theme, we highly recommend checking the Get
                        Store Information endpoint for Stencil support prior to
                        installing any scripts through the Script Manager API.
                        Additionally, you’ll still want to show the old manual
                        installation steps when a store does not support
                        Stencil. 


                        ### Existing Blueprint Installations 


                        Existing blueprint installations won’t be affected, but
                        remember that if you are prompting existing Stencil
                        users to upgrade to the Script Manager, you’ll want to
                        suppress this message for Blueprint users. 
                      header:
                        anchor: scripts_upgrades-installation
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ### Fixing Missing Scripts


                        It’s possible that your App installation may find itself
                        unexpectedly missing one or more scripts. Below are some
                        possible causes of this issue.


                        1.) __The Merchant Deleted Your Script__ 


                        Merchants are given a warning when attempting to delete
                        a script belonging to an App, but we do allow them to do
                        so.


                        If you want to handle this situation gracefully, we
                        recommend you check the [Get
                        Scripts](/api-reference/storefront/content-scripts-api/scripts/getscripts)
                        endpoint on your App Detail Page (returned by the [Load
                        Callback
                        URI](/api-docs/getting-started/building-apps-bigcommerce/building-apps#building-apps_processing-signed-payload)
                        to determine whether the expected scripts are present.
                        If they are not, you can prompt the user to click a
                        button to automatically repair their installation.


                        We ask that you request the user’s permission rather
                        than doing this automatically, as they may have had a
                        good reason for deleting the missing script. 


                        2.) __The Merchant's Theme is Not Set Up Correctly__ 


                        In order to render scripts, the theme templates must
                        have the handlebars expressions {{head.scripts}} and
                        {{footer.scripts}} in the pages where scripts should be
                        rendered. If either of these is absent, scripts on that
                        page with location set to head or footer (respectively)
                        will not be rendered.


                        Of particular note, {{head.scripts}} was only recently
                        added to the checkout and order confirmation pages in
                        our Cornerstone theme, and widespread adoption of this
                        standard outside of Cornerstone is still an ongoing
                        process.


                        To ensure your App is compatible with as many themes as
                        possible, we recommend footer over head for checkout,
                        order_confirmation and all_pages visibilities. 


                        3.) __Scripts Are Not Rendering in the Checkout and
                        Order Confirmation__ 


                        In order to render scripts, the store must have
                        BigCommerce’s Optimized one-page checkout enabled. This
                        is the default checkout type for all new Stencil stores.
                        Existing stores have to manually change the checkout
                        type as detailed in this article. 


                        Stencil themes from the marketplace support the
                        [Optimized One-Page
                        Checkout](https://support.bigcommerce.com/articles/Public/Optimized-Single-Page-Checkout#signup).
                        However, there could be instances where the merchant
                        maintains their own private theme and the theme has not
                        been updated to support the Optimized one-page checkout.
                        In this case, the merchant is required to add the theme
                        support, following the steps
                        [here](https://stencil.bigcommerce.com/docs/optimized-checkout-prereqs).  
                      header:
                        anchor: scripts_fixing-missing-scripts
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Notes


                        - If you are injecting scripts into the Checkout, you
                        will need to update the scope to Checkout Content.
                        Accounts can only be created by the [store
                        owner](https://support.bigcommerce.com/articles/Public/Store-API-Accounts/).

                        - Merchants will be able to see the scripts installed on
                        the store in the Control Panel. Within the native tag
                        manager, merchant actions will be limited to viewing a
                        script and deleting a script.

                        - Scripts can be located in the header
                        `{{head.scripts}}` or footer `{{footer.scripts}}`.

                        - Scripts Manager is only for Stencil themes. Blueprint
                        store users will still need to copy and paste in code.

                        - The current visibility options are `storefront`,
                        `checkout`, `all_pages` and `order_confirmation`.

                        - Scripts injected via the Scripts API will not render
                        when you are developing a theme locally via Stencil CLI.
                      header:
                        anchor: scripts_scripts-notes
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Script Visibility Locations


                        | Scope | Visibility |

                        | -- | -- |

                        | `all_pages` | Add Wishlist </br> Blog List </br> Blog
                        Post</br> Brand Pages </br> All Brands Page </br> Cart
                        </br> Category </br> Checkout </br> Checkout </br>
                        Product Compare </br> Order Confirmation </br> Page
                        </br> Contact Form </br> Product </br> Search </br> All
                        Wishlist </br> Wish List |

                        | `storefront` |  Add Wishlist </br> Blog List </br>
                        Blog Post</br> Brand Pages </br> All Brands Page </br>
                        Cart </br> Category </br> Checkout </br> Checkout </br>
                        Product Compare </br> Page </br> Contact Form </br>
                        Product </br> Search </br> All Wishlist </br> Wish List
                        |

                        | `checkout` | Checkout | 

                        | `order_confirmation` | Order Confirmation | 


                        Scripts can not be injected to:

                        - giftcertificates.php

                        - sitemap.php

                        - account.php

                        - login.php

                        - 404 pages
                      header:
                        anchor: scripts_scripts-visibility
                    - type: text
                      data: '---'
                    - type: text
                      data: "## OAuth Scopes\n* Checkout Content\t\n* Content\n\nFor more details and a full list of available scopes, see [Oauth Scopes](/api-docs/getting-started/basics/authentication#authentication_oauth-scopes)."
                      header:
                        anchor: scripts_oauth-scopes
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Related Endpoints

                        * [Get
                        Scripts](/api-reference/content/content-scripts-api)
                      header:
                        anchor: scripts_related-endpoints
              - title: Widgets
                route:
                  path: /widgets
                data:
                  children:
                    - title: Overview
                      route:
                        path: /widgets-overview
                      data:
                        blocks:
                          - type: html
                            data: "<h1>Widgets API</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#widgets_introduction\">Introduction</a></li>\n        <li><a href=\"#widgets_regions\">Regions</a></li>\n        <li><a href=\"#widgets_widget-templates\">Widget Templates</a></li>\n        <li><a href=\"#widgets_widgets\">Widgets</a></li>\n        <li><a href=\"#widgets_placements\">Placements</a></li>\n        <li><a href=\"#widgets_layouts\">Layouts</a></li>\n    <li><a href=\"#widgets_placement-and-layouts\">Placements and Layouts</a></li>\n    \t\t<li><a href=\"#widgets_storefront\">Widgets on the Storefront</a></li>\n    \t\t<li><a href=\"#widgets_definitions\">Definitions</a></li>\n        <li><a href=\"#widget_resources\">Resources</a></li>\n    <li><a href=\"#widget_next-steps\">Next Steps</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              The Widgets API allows developers to
                              programmatically associate content with regions on
                              a BigCommerce storefront. The content can consist
                              of HTML, CSS, and JavaScript, and the API supports
                              configuration via Handlebars variables. It can
                              support many types of content such as YouTube
                              Videos, image sliders, and chat apps.


                              Some benefits are:

                              * Inject modular, reusable blocks of content
                              inside new and existing store pages

                              * Build tools that allow non-technical users to
                              control content without editing theme files

                              * Target specific products, categories or brands
                              with widgets


                              We are going to review all the components that
                              make a widget. Then, we’ll use what we’ve learned
                              to create a widget .
                            header:
                              anchor: widgets_introduction
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Regions


                              [Regions](/api-reference/storefront/widgets-api/models/themeregion)
                              are specific locations in the Stencil theme files
                              where a widget is placed. A region is added at the
                              file level using the format {{{region
                              name="..."}}}. A region can be named however you
                              like, but it is best practice to give it a name
                              that is descriptive of the location and function.
                              A theme file can have as many regions as you want,
                              with more than one widget assigned to the region
                              and the
                              [Placement](/api-docs/storefront/widgets/widgets-overview#widgets_placements)
                              sort_order controlling how the widgets appear on
                              the Storefront.
                            header:
                              anchor: widgets_regions
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1551970794664
                            header:
                              title: Storefront --Content Region
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1551970767918
                            header:
                              title: Template File -- Content Region
                            config:
                              fluid: true
                              maxWidth: '805'
                          - type: text
                            data: >-
                              Most themes in the BigCommerce marketplace come
                              with predefined regions. It is best to utilize
                              those first. By editing the theme and adding theme
                              regions, updates will need to be manually
                              managed. 
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Widget Templates


                              [Widget
                              Templates](/api-reference/storefront/widgets-api/models/widgettemplate)
                              are handlebars-enabled HTML templates which define
                              the structure of the widget on a page. Widget
                              Templates can use the built in handlebar helpers
                              such as {{if}} and {{each}}. Using the helpers
                              allows for conditional logic to be built into the
                              Widget Templates. Widget templates can be reused
                              to build multiple widgets.


                              ### Widget Template Examples

                              **Simple List**


                              The Simple List template creates a list where each
                              item in the list can have a different color. This
                              example uses the [each block
                              helper](https://handlebarsjs.com/builtin_helpers.html)
                              in handlebars to loop through each item in the
                              list and display it. The text and color are
                              determined by handlebars placeholders that are set
                              when creating the
                              [Widget]((/api-reference/storefront/widgets-api/widget/createwidget).
                            header:
                              anchor: widgets_widget-templates
                          - type: code
                            data: |-
                              {
                                "name": "Simple List",
                                "template": "<ul>{{#each list_items}}<li style=\"color:{{color}};\">{{text}}</li>{{/each}}</ul>"
                              }
                            header:
                              title: Simple List
                              subtitle: >-
                                The list takes advantage of loops to display
                                each list item on the page. 
                            config:
                              mode: json
                          - type: code
                            data: >-
                              {

                              "name": "Simple Slider",

                              "template": "<ul class='slider'>{{#each
                              slides}}<li class='slide'><img
                              src={{image}}'/</li>{{/each}}</ul>"

                              }
                            header:
                              title: Image Slider
                              subtitle: >-
                                The slider takes advantage of loops to display
                                each slide on the page.
                            config:
                              mode: json
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Widgets


                              [Widgets](/api-reference/storefront/widgets-api/models/widget)
                              are a unit of content that are placed on specific
                              pages in a Stencil theme. Widgets are made of a
                              widget configuration written in json and a widget
                              template UUID. Widgets are rendered as part of the
                              HTML on the storefront.
                            header:
                              anchor: widgets_widgets
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1551971053085
                            header:
                              title: Storefront -- Widget
                          - type: text
                            data: >-
                              ### Widget Configuration


                              A Widget Configuration is the JSON payload that
                              defines the content to be rendered with a given
                              Widget Template. In the previous simple list
                              example, the widget template loops over a
                              list_items array using `{{#each}}`. 


                              In the example below, we define the list_items
                              array and supply values for the color and text of
                              each list item. Since the template is created
                              separately from the configuration, the same
                              template UUID can be used multiple times for
                              configuration.
                          - type: code
                            data: |-
                              {
                                "slides": [
                                  {"image":"http://imageurl.com/nh35jn/test.png"},
                                  {"image":"http://imageurl.com/fdhdfh/test2.png"}
                                ]
                              }
                            header:
                              title: Widget Configuration Slides
                            config:
                              mode: json
                          - type: code
                            data: |
                              {
                              "list_items":[
                              { 
                              "color": "orange", 
                              "text": " Item One"
                              },
                              { 
                              "color": "blue", 
                              "text": "Item Two"
                              }
                              ]
                              }
                            header:
                              title: Widget Configuration List Items
                            config:
                              mode: json
                          - type: callout
                            data:
                              body: >-
                                Keep in mind that when reusing the
                                `widget_configuration` the array will have to be
                                called `list_items`. Otherwise, the widget will
                                be created on the frontend, but there will be no
                                data, so nothing is rendered. This is because
                                `list_items` was defined when the widget
                                template was originally created. The widget
                                configuration name can anything that is set when
                                the widget_template is created.
                          - type: code
                            data: |-
                              {
                                "name": "Simple List",
                                "widget_configuration": {
                                  "list_items_two": [
                                    {
                                      "color": "orange",
                                      "text": "Fifth item"
                                    },
                                    {
                                      "color": "blue",
                                      "text": "Sixth item"
                                    }
                                  ]
                                },
                                "widget_template_uuid": "7bfb9a46-75cc-45bc-bf39-a6a43b77111f"
                              }
                            header:
                              title: 'List Items Example: Incorrect'
                            config:
                              mode: json
                              highlightRange:
                                - from: '4'
                                  to: '4'
                          - type: text
                            data: >-
                              The example above uses `list_items_two`, on line
                              four, in the configuration which is not the same
                              as `list_items`. If `list_items` has already been
                              established during the initial configuration it
                              must be set as list_items when being used again. 
                          - type: code
                            data: |-
                              {
                                "name": "Simple List",
                                "widget_configuration": {
                                  "list_items": [
                                    {
                                      "color": "orange",
                                      "text": "Fifth item"
                                    },
                                    {
                                      "color": "blue",
                                      "text": "Sixth item"
                                    }
                                  ]
                                },
                                "widget_template_uuid": "7bfb9a46-75cc-45bc-bf39-a6a43b77111f"
                              }
                            header:
                              title: 'List Items Example: Correct'
                            config:
                              mode: json
                              highlightRange:
                                - from: '4'
                                  to: '4'
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Placements


                              [Placements](/api-reference/storefront/widgets-api/placement/createplacement)
                              determine the Region where the Widget is placed
                              and in what order. The order of the placement is
                              controlled by the sort_order when creating the
                              placement. 

                              A placement must be created in order use a Widget
                              on the storefront.



                              Placements can be used in two ways:

                              * On their own using the sort_order and region to
                              determine placement in a theme.

                              * With a Layout, for more control arranginging
                              widgets such as a table or column. Using Layouts
                              is an optional step. The Widget can still be
                              rendered without a Layout.


                              ### Placements `entity_id`


                              When creating a placement, there is an option to
                              provide an `entity_id`. 

                              This is the ID for a specific page, brand,
                              category or page. For example, if a Widget needs
                              to be on all product pages, leave entity_id blank.
                              If the Widget should only appear on a certain
                              product page, then assign `entity_id` the product
                              ID. 


                              `entity_id` can be used with the following page
                              types:

                              * pages/brand

                              * pages/category

                              * pages/page

                              * pages/product



                              ### Create a Widget Placement with Region


                              Below, the region and sort order have a value, so
                              the widget will appear on the home page. 
                            header:
                              anchor: widgets_placements
                          - type: code
                            data: |-
                              {
                                  "widget_uuid": "2dfeb50e-5f8c-4df2-8525-a338091eed32",
                                  "entity_id": "14",
                                  "sort_order": 1,
                                  "region": "home_header_image",
                                  "template_file": "pages/home",
                                  "status": "active"
                              }
                            header:
                              title: Widget with Region
                            config:
                              mode: json
                              highlightRange:
                                - from: '5'
                                  to: '5'
                          - type: text
                            data: >-
                              ### Create a Widget Placement Without a Region

                              Leaving the region and sort order off the request
                              will return just the placement_id in the response,
                              allowing for the widget to be rendered using
                              Layouts. 
                          - type: code
                            data: |-
                              {
                                  "widget_uuid": "2dfeb50e-5f8c-4df2-8525-a338091eed32",
                                  "entity_id": "14",
                                  "template_file": "pages/home",
                                  "status": "active"
                              }
                            header:
                              title: Widget Without a Region
                            config:
                              mode: json
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ### Layouts

                              [Layouts](/api-reference/storefront/widgets-api/models/layout)
                              allow a developer to control the position of
                              widgets on the storefront. A Layout allows you to
                              style around the Placement. Layout uses the markup
                              field which accepts any valid HTML and CSS. A
                              Layout can contain multiple Placements.
                            header:
                              anchor: widgets_layouts
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1551971170727
                            config:
                              fluid: true
                              maxWidth: '805'
                            header:
                              title: Storefront -- Layouts
                          - type: text
                            data: >-
                              ### Layouts `bc-placements`


                              `bc-placements` is a special field that takes in a
                              placement id and allows the widget to be
                              positioned anywhere in the layout. The `id` is the
                              Placement ID.
                          - type: code
                            data: |-
                              <div>
                                 <div style="width: 33.3%; float: left; display: inline-block; padding: 5px; box-sizing: border-box">
                                   <bc-placement id="73ee60d9-72e4-4dce-be93-c96b861cb5ff"></bc-placement>
                                 </div>
                                 <div style="width: 33.3%; float: left; display: inline-block; padding: 5px; box-sizing: border-box">
                                   <bc-placement id="3466ccb8-cb3e-4811-8266-acae20d1bb93"></bc-placement>
                                 </div>
                                   <div style="width: 33.3%; float: left; display: inline-block; padding: 5px; box-sizing: border-box">
                                   <bc-placement id="73ee60d9-72e4-4dce-be93-c96b861cb5ff"></bc-placement>
                                 </div>
                              </div>
                            header:
                              title: Layouts bc-placements Example
                            config:
                              mode: html
                          - type: text
                            data: '---'
                          - type: text
                            data: "## Placements and Layouts\n\nIn order to position widgets inside a page you need to use placements. Placements determine in which region the widgets is located and in what the order it will be displayed in case there are other widgets in the same region. \n\nPlacements can be used in two ways:\n\n**1. Placement + Widget:**  \nWhen creating a placement with a widget, the widget content takes the full region width. Any additional widgets that are placed onto the same region will be stacked above or below based on the sort_order property for each placement. \n\t\nIf you are creating marketplace applications that create placements directly, you don’t need to use the sort_order property. That way it’s up to the merchant to determine the right sort order if there are more than one placements onto the same region.\n\n**2. Placement + Layout:**  \nIf you want to arrange widgets inside a page using a multi-column style system, then you can create the placement with a Layout. You can also add additional styling around placements when using Layouts.  \n\nUsing Layouts is optional and most recommended when you have multiple placements that you want to arrange in a particular way. You can still arrange content in a multi-column style system using HTML and CSS only without having to use Layouts when creating a single placement. "
                            header:
                              anchor: widgets_placement-and-layouts
                          - type: text
                            data: >-
                              ## Widgets on the Storefront


                              Widgets are rendered on the storefront as a data
                              tag in the HTML.


                              * Region -- data-content-region

                              * Layout -- data-layout-id

                              * Widget -- data-widget-id

                              * Placement does not generate a data tag. Only the
                              Widget.


                              A Region can contain multiple Layouts with Widgets
                              and Placements or Widgets without a Layout. Within
                              a single region, you might have widgets whose
                              positioning is determined by a Layout, as well as
                              widgets whose positioning is determined simply by
                              a Placement. In the example below, the region is
                              named “widget_page.” Nested within that region is
                              a Layout, which contains a widget. The region also
                              contains a Placement, or a widget that’s been
                              placed on the page without a Layout.
                            header:
                              anchor: widgets_storefront
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1551971208326
                            header:
                              title: Storefront
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1551895293134
                            header:
                              title: Widgets Console
                            config:
                              fluid: true
                              maxWidth: '805'
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              | Name | Definition |

                              |--|--|

                              | Widgets | Widgets are the units of content to be
                              placed on specific pages in a Stencil theme. Each
                              widget is comprised of a widget configuration and
                              a widget template. *There is a limit of 1000
                              widgets per store.* | 

                              | Widget Templates | Widget Templates are
                              Handlebars-enabled HTML templates which define the
                              widget’s structure on a page. These templates can
                              include conditional logic as well as looping.
                              *There is a limit of 100 total widget templates
                              per store.* |

                              | Placements | Placements are the records to track
                              which widget appears on which page, and in what
                              order.  Currently, placements can only exist on
                              the following pages: </br>* pages/blog-post </br>
                              * pages/blog</br>* pages/brand</br>*
                              pages/brands</br>* pages/cart</br>*
                              pages/category</br>* pages/home</br>*
                              pages/page</br>* pages/product</br>*
                              pages/search</br> *There is a limit of 75
                              placements per template file and 6500 total
                              placements per store.*|

                              | Regions | Regions are specific spots in a
                              Stencil template file where Widgets can be placed.
                              Regions are defined at the theme file level using
                              the following syntax: `{{{region name="..."}}}`.
                              There can be many widgets inside a given region,
                              and these widgets can have an assigned sort order.
                              |

                              | Widget Configuration | This is a JSON payload
                              that contains data used when rendering the widget.
                              Each widget has a configuration, and there is a
                              64kb limit on the size of the JSON. The widget
                              configuration must be valid JSON, but we don’t
                              enforce any additional requirement on the
                              structure of the configuration. |

                              | Layout | A way to style multiple widgets on a
                              page or position a Widget. A Layout will accept
                              any HTML and CSS. *There is a limit of 1000 total
                              layouts per store.* |
                            header:
                              anchor: widgets_definitions
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Resources


                              ### Related Endpoints

                              * [Widgets
                              API](/api-reference/storefront/widgets-api)
                            header:
                              anchor: widget_resources
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Next Steps

                              * [Widgets
                              Tutorial](/api-docs/storefront/widgets/widgets-tutorial)

                              * [Wigets Code
                              Samples](/api-docs/storefront/widgets/widgets-code-samples)
                            header:
                              anchor: widget_next-steps
                    - title: Widgets Tutorial
                      route:
                        path: /widgets-tutorial
                      config:
                        sidebar:
                          token: tutorial
                      data:
                        blocks:
                          - type: html
                            data: "<h1>Widgets Tutorial</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#widget-tutorial_add-a-region\">Add a Region</a></li>\n        <li><a href=\"#widget-tutorial_create-widget-template\">Create a Widget Template</a></li>\n        <li><a href=\"#widget-tutorial_create-widget\">Create a Widget</a></li>\n        <li><a href=\"#widget-tutorial_create-placement\">Create the Placement</a></li>\n        <li><a href=\"#widgets_placements\">Placements</a></li>\n        <li><a href=\"#widget-tutorial_create-layout\">Create the Layout</a></li>\n    \t\t<li><a href=\"#widget-tutorial_reuse-widget-template\">Reuse the Widget</a></li>\n        <li><a href=\"#widget-tutorial_resources\">Resources</a></li>\n    <li><a href=\"#widget-tutorial_next-steps\">Next Steps</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              In this tutorial, we will cover:

                              * Creating a Region

                              * Creating a Widget Template

                              * Creating a Widget

                              * Placing the Widget

                              * Creating the Layout


                              This tutorial assumes knowlege of
                              [Widgets](/api-docs/storefront/widgets/widgets-overview). 
                          - type: callout
                            data:
                              body: >-
                                The instructions below use the Cornerstone
                                Theme. Your theme may differ.
                          - type: text
                            data: "## Prerequisites:\n* Stencil Theme. This tutorial uses Cornerstone.\n* Scopes  \nThe following Oauth scopes are required:\n\t* [Content](/api-docs/getting-started/authentication#authentication_oauth-scopes) set to Modify\n* Image URL. If you don’t have one, there is an example in the tutorial.\n* Category Page ID. A [GET Categories](/api-reference/catalog/catalog-api/category/getcategories) request will returns a list of category IDs.\n\nWe will be making a widget that shows three images, with a hover effect and each image linking out to a different location. "
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1551898706416
                            header:
                              title: Category Page Widget
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Add a Region

                              Add `{{{region name="category_header_banner"}}}`
                              to the pages>category.html file. This is where the
                              widgets will appear on the category page. In this
                              example, the region is added to line 24. 
                            header:
                              anchor: widget-tutorial_add-a-region
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1551898921184
                            header:
                              title: Add Region to category.html
                          - type: callout
                            data:
                              type: info
                              body: >-
                                Regions can only be added to files under
                                pages/templates, including subfolders.
                          - type: text
                            data: >-
                              To check the region was added successfully, use
                              [Get Content
                              Regions](/api-reference/storefront/widgets-api/regions/getcontentregions).
                          - type: http
                            data:
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/content/regions
                              method: get
                              headers:
                                Accept: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{$$.env.X-Auth-Client}'
                                X-Auth-Token: '{$$.env.X-Auth-Token}'
                              query:
                                templateFile: pages/category
                            header:
                              title: Get Content Region
                          - type: code
                            data: |-
                              {
                                  "data": [
                                      {
                                          "name": "header_bottom"
                                      },
                                      {
                                          "name": "category_header_banner"
                                      }
                                  ],
                                  "meta": {}
                              }
                            header:
                              title: Sample Response
                              subtitle: Get Content Regions
                            config:
                              mode: json
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Create a Widget Template


                              Widget Templates are the reusable piece of
                              structure. In this walkthrough we are creating a
                              header image. `image_source` is set using
                              handlebars so the header image can be changed
                              every time the template is reused. The template
                              also takes advantage of conditional logical with
                              `#each images`. Instead of creating a template
                              with three lines of code for each image, one line
                              can loop through each image provided. 



                              * name -- Name of the widget template (required)

                              * template -- Html to create the widget template
                              (required)


                              In the response the Widget Template UUID returned.
                              Make note of it for use later when creating the
                              Widget.
                            header:
                              anchor: widget-tutorial_create-widget-template
                          - type: http
                            data:
                              method: post
                              body: "{\n\t\"name\": \"Header Images\",\n\t\"template\": \"{{#each images}}<a href='{{image_url}}'><img src={{image_source}} style='width:33.3%'/></a>{{/each}}\"\n}"
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/content/widget-templates
                              headers:
                                Accept: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{$$.env.X-Auth-Client}'
                                X-Auth-Token: '{$$.env.X-Auth-Token}'
                            header:
                              title: Create a Widget Template
                          - type: code
                            data: |-
                              {
                                  "data": {
                                      "uuid": "3a1b0044-c9b3-47d3-9929-01ab0c20243b",
                                      "name": "Header Images",
                                      "schema": [],
                                      "template": "{{#each images}}<a href='{{image_url}}'><img src={{image_source}} style='width:33.3%'/></a>{{/each}}",
                                      "date_created": "2019-02-25T18:35:04.904Z",
                                      "date_modified": "2019-02-25T18:35:04.904Z",
                                      "kind": "custom"
                                  },
                                  "meta": {}
                              }
                            header:
                              title: 'Sample Response '
                              subtitle: Create Widget Template
                            config:
                              mode: json
                              highlightRange:
                                - from: '3'
                                  to: '3'
                          - type: text
                            data: '---'
                          - type: text
                            data: "## Create a Widget\n\nHere, we will use the Widget Template to add the links and the images. There are many ways to use widget templates and we will go over just one. For more examples, see [Code Samples](/api-docs/storefront/widgets/widgets-code-samples). \n\n* name -- Something short and descriptive. (required)\n* description -- a longer explanation if needed (not required)\n* widget_configuration -- Based on the original widget_template configuration and can vary by the widget created.\n\t* image_source -- Since this is the handlebar placeholder, it requires an image value.\n* widget_template_uuid -- UUID from the Widget Template response.\n\nFor widget_configuration `images is the top level array, with `image_url` and `image_source` for each object. There are three images in this example since the width of each was set to 33.3%.\n\nIn the response the Widget UUID is returned. Make note of it for use later when creating the Placement."
                            header:
                              anchor: widget-tutorial_create-widget
                          - type: http
                            data:
                              method: post
                              body: |-
                                {
                                  "name": "Header Images",
                                  "widget_configuration": {
                                    "images": [
                                      {
                                        "image_url": "{where-the-image-should-link-to}",
                                        "image_source": "https://cdn11.bigcommerce.com/s-n0i50vy/images/stencil/1280x1280/products/91/309/thekinfolktablecover_1024x1024__80715.1456436719.jpg?c=2&imbypass=on"
                                      },
                                      {
                                        "image_url": "{where-the-image-should-link-to}",
                                        "image_source": "https://cdn11.bigcommerce.com/s-n0i50vy/images/stencil/1280x1280/products/109/361/kinfolkessentialissue_1024x1024__22507.1456436715.jpg?c=2&imbypass=on"
                                      },
                                      {
                                        "image_url": "{where-the-image-should-link-to}",
                                        "image_source": "https://cdn11.bigcommerce.com/s-n0i50vy/images/stencil/500x659/products/85/282/livingwithplants_grande__26452.1456436666.jpg?c=2&imbypass=on"
                                      }
                                    ]
                                  },
                                  "widget_template_uuid": "{your-widget-template-uuid}"
                                }
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/content/widgets
                              headers:
                                Accept: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{$$.env.X-Auth-Client}'
                                X-Auth-Token: '{$$.env.X-Auth-Token}'
                            header:
                              title: Create a Widget
                          - type: code
                            data: |-
                              {
                                  "data": {
                                      "uuid": "a8940709-5655-4401-a341-62c44e3180b2",
                                      "name": "Header Images",
                                      "widget_configuration": {
                                          "images": [
                                              {
                                                  "image_url": "{where-the-image-should-link-to}",
                                                  "image_source": "https://cdn11.bigcommerce.com/s-n0i50vy/images/stencil/1280x1280/products/91/309/thekinfolktablecover_1024x1024__80715.1456436719.jpg?c=2&imbypass=on"
                                              },
                                              {
                                                  "image_url": "{where-the-image-should-link-to}",
                                                  "image_source": "https://cdn11.bigcommerce.com/s-n0i50vy/images/stencil/1280x1280/products/109/361/kinfolkessentialissue_1024x1024__22507.1456436715.jpg?c=2&imbypass=on"
                                              },
                                              {
                                                  "image_url": "{where-the-image-should-link-to}",
                                                  "image_source": "https://cdn11.bigcommerce.com/s-n0i50vy/images/stencil/500x659/products/85/282/livingwithplants_grande__26452.1456436666.jpg?c=2&imbypass=on"
                                              }
                                          ],
                                          "_": {
                                              "id": "a8940709-5655-4401-a341-62c44e3180b2"
                                          }
                                      },
                                      "widget_template": {
                                          "uuid": "3a1b0044-c9b3-47d3-9929-01ab0c20243b",
                                          "name": "Header Images",
                                          "schema": [],
                                          "template": "{{#each images}}<a href='{{image_url}}'><img src={{image_source}} style='width:33.3%'/></a>{{/each}}",
                                          "date_created": "2019-02-25T18:35:04.904Z",
                                          "date_modified": "2019-02-25T18:35:04.904Z",
                                          "kind": "custom"
                                      },
                                      "date_created": "2019-02-25T18:36:45.238Z",
                                      "date_modified": "2019-02-25T18:36:45.238Z",
                                      "description": ""
                                  },
                                  "meta": {}
                              }
                            header:
                              title: Sample Response
                              subtitle: Create a Widget
                            config:
                              mode: json
                              highlightRange:
                                - from: '3'
                                  to: '3'
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Create the Placement


                              Placement defines the page and region where the
                              widget should appear. Remember that
                              [Placements](/api-docs/storefront/widgets/widgets-overview#widgets_placements)
                              can either lead to a Layout or they can be used on
                              their own. In this walkthrough we will use
                              Layouts. 


                              * widget_uuid -- UUID of the Widget

                              * entity_id -- The page, category, brand or
                              product ID the widget should appear on

                              * sort_order -- If there is more than one Widget
                              on a page, use the sort order to control the order
                              they are displayed

                              * region -- region the template will show. It
                              should match the template file

                              * template_file -- template file the region was
                              added to

                              * status -- if the widget is active or inactive



                              If you wanted to see the results of the Widget
                              without a layout, use the Placement without the
                              layout code sample below. If you would like to
                              learn more about Layouts use the Create Placement
                              code sample below. 
                            header:
                              anchor: widget-tutorial_create-placement
                          - type: http
                            data:
                              method: post
                              body: |-
                                {
                                  "widget_uuid": "{your-widget-uuid}",
                                  "entity_id": "{your-category-id}",
                                  "sort_order": 1,
                                  "region": "category_header_banner",
                                  "template_file": "pages/category",
                                  "status": "active"
                                }
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/content/placements
                              headers:
                                Accept: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{$$.env.X-Auth-Client}'
                                X-Auth-Token: '{$$.env.X-Auth-Token}'
                            header:
                              title: Create Placement Without a Layout
                              subtitle: >-
                                The region and sort_order are filled in to make
                                the Widget appear on the storefront.
                          - type: text
                            data: >-
                              To make use of Layouts for custom markdown use the
                              code sample below. Replace the `widget_uuid` with
                              your own.


                              Make note of the `placement_uuid` for use in
                              Layouts later.
                          - type: http
                            data:
                              method: post
                              body: |-
                                {
                                  "widget_uuid": "{your-widget-uuid}",
                                  "entity_id": "{your-category-id}",
                                  "template_file": "pages/category",
                                  "status": "active"
                                }
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/content/placements
                              headers:
                                Accept: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{$$.env.X-Auth-Client}'
                                X-Auth-Token: '{$$.env.X-Auth-Token}'
                            header:
                              title: Create Placement With a Layout
                          - type: code
                            data: |
                              {
                                  "data": {
                                      "uuid": "bb34b23b-0d4b-4b9b-9e24-c8b0dcfd5e08",
                                      "template_file": "pages/category",
                                      "region": "",
                                      "sort_order": 0,
                                      "entity_id": "21",
                                      "status": "active",
                                      "widget": {
                                          "uuid": "a8940709-5655-4401-a341-62c44e3180b2",
                                          "name": "Header Images",
                                          "widget_configuration": {
                                              "images": [
                                                  {
                                                      "image_url": "{where-the-image-should-link-to}",
                                                      "image_source": "https://cdn11.bigcommerce.com/s-n0i50vy/images/stencil/1280x1280/products/91/309/thekinfolktablecover_1024x1024__80715.1456436719.jpg?c=2&imbypass=on"
                                                  },
                                                  {
                                                      "image_url": "{where-the-image-should-link-to}",
                                                      "image_source": "https://cdn11.bigcommerce.com/s-n0i50vy/images/stencil/1280x1280/products/109/361/kinfolkessentialissue_1024x1024__22507.1456436715.jpg?c=2&imbypass=on"
                                                  },
                                                  {
                                                      "image_url": "{where-the-image-should-link-to}",
                                                      "image_source": "https://cdn11.bigcommerce.com/s-n0i50vy/images/stencil/500x659/products/85/282/livingwithplants_grande__26452.1456436666.jpg?c=2&imbypass=on"
                                                  }
                                              ],
                                              "_": {
                                                  "id": "a8940709-5655-4401-a341-62c44e3180b2"
                                              }
                                          },
                                          "widget_template": {
                                              "uuid": "3a1b0044-c9b3-47d3-9929-01ab0c20243b",
                                              "name": "Header Images",
                                              "schema": [],
                                              "template": "{{#each images}}<a href='{{image_url}}'><img src={{image_source}} style='width:33.3%'/></a>{{/each}}",
                                              "date_created": "2019-02-25T18:35:04.904Z",
                                              "date_modified": "2019-02-25T18:35:04.904Z",
                                              "kind": "custom"
                                          },
                                          "date_created": "2019-02-25T18:36:45.238Z",
                                          "date_modified": "2019-02-25T18:36:45.238Z",
                                          "description": ""
                                      },
                                      "date_created": "2019-02-25T18:37:10.658Z",
                                      "date_modified": "2019-02-25T18:37:10.658Z"
                                  },
                                  "meta": {}
                              }
                            header:
                              title: Sample Response
                              subtitle: Create Placement
                            config:
                              mode: json
                              highlightRange:
                                - from: '3'
                                  to: '3'
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Create a Layout


                              A Layout accepts any html. Using a layout can
                              allow you to create complicated widget placements
                              on the storefront. 


                              * entity_id -- The page, category, brand or
                              product ID the widget should appear on. 

                              * region -- region the template will show. It
                              should match the template file

                              * template_file -- template file the region was
                              added to

                              * markup -- this accepts any valid HTML and CSS
                              including style tags. 

                              * bc-placement -- A special id that is used in
                              layouts. It is populated with the placement ID.


                              The markup in the sample requst body adds the
                              style of opacity to each image on hover.
                            header:
                              anchor: widget-tutorial_create-layout
                          - type: http
                            data:
                              method: post
                              body: |-
                                {
                                  "entity_id": "{your-category-id}",
                                  "region": "category_header_banner",
                                  "template_file": "pages/category",
                                  "markup": "<style>img:hover{opacity: 0.3;}</style><div><div style='padding:5px margin-bottom:40px;'><bc-placement id='bb34b23b-0d4b-4b9b-9e24-c8b0dcfd5e08'></bc-placement></div></div>"
                                }
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/content/layouts
                              headers:
                                Accept: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{$$.env.X-Auth-Client}'
                                X-Auth-Token: '{$$.env.X-Auth-Token}'
                            header:
                              title: Create a Layout
                          - type: code
                            data: |-
                              {
                                  "data": {
                                      "uuid": "cacdadcf-07ec-43f3-aec4-f8e3382d7618",
                                      "template_file": "pages/category",
                                      "entity_id": "21",
                                      "region": "category_header_banner",
                                      "markup": "<style>img:hover{opacity: 0.3;}</style><div><div style='padding:5px;'><bc-placement id='bb34b23b-0d4b-4b9b-9e24-c8b0dcfd5e08'></bc-placement></div></div>",
                                      "date_created": "2019-02-25T18:38:08.455Z",
                                      "date_modified": "2019-02-25T18:38:08.455Z"
                                  },
                                  "meta": {}
                              }
                            header:
                              subtitle: Create Layout
                              title: Sample Response
                          - type: text
                            data: >-
                              At this point you should see the widget on the
                              category page of your choice. 
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Reuse the Widget Template


                              Now that the Widget Template has been created it
                              can be reused on a different page again. 


                              To reuse the Widget Template:

                              * Choose where to display the widget by either
                              creating a
                              [Region](/api-reference/storefront/widgets-api/regions/getcontentregions)
                              or use and existing one

                              * Decide if the Widget should appear on all pages
                              or if it should use an `entity_id`

                              * Get the [Widget Template
                              ID](/api-reference/storefront/widgets-api/widget-template/getwidgettemplates)

                              * [Create the
                              Widget](/api-reference/storefront/widgets-api/widget/createwidget)
                              with the Widget Template ID

                              * Either [Create a
                              Placement](/api-reference/storefront/widgets-api/placement/createplacement)
                              or [Create a
                              Layout](/api-reference/storefront/widgets-api/layout/createlayout)
                              using the Widget
                            header:
                              anchor: widget-tutorial_reuse-widget-template
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Resources


                              ### Related Endpoints

                              * [Widgets
                              API](/api-reference/storefront/widgets-api)


                              ### Related Articles

                              * [Widgets
                              Overview](/api-docs/storefront/widgets/widgets-overview)
                            header:
                              anchor: widget-tutorial_resources
                          - type: text
                            data: '---'
                          - type: text
                            data: >-

                              ### Next Steps

                              * [Wigets Code
                              Samples](/api-docs/storefront/widgets/widgets-code-samples)
                            header:
                              anchor: widget-tutorial_next-steps
                    - title: Widgets Code Samples
                      route:
                        path: /widgets-code-samples
                      config:
                        sidebar:
                          token: code samples
                      data:
                        blocks:
                          - type: html
                            data: "<h1>Widgets Code Samples</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#widget-code-sample_simple-list\">Simple List</a></li>\n        <li><a href=\"#widget-code-sample_simple-html\">Simple HTML</a></li>\n        <li><a href=\"#widget-code-sample_simple-text-styling\">Simple Text with Styling</a></li>\n        <li><a href=\"#widget-code-sample_you-tube-embed\">Youtube Embed with Layout</a></li>\n        <li><a href=\"#widget-code-sample_image-slider\">Image Slider</a></li>\n        <li><a href=\"#widget-code-sample_resources\">Resources</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              Below are widgets that can be used as building
                              blocks to expand on. Widgets are flexible and
                              re-useable making them ideal for creating custom
                              storefront. 
                          - type: text
                            data: '## Simple List'
                            header:
                              anchor: widget-tutorial_simple-list
                          - type: code
                            data: |

                              <ul>
                              {{#each list_items}}
                               <li style="color:{{color}};">{{text}}</li>
                              {{/each}}
                              </ul>
                            header:
                              title: Widget Template
                              subtitle: Simple List
                            config:
                              mode: html
                          - type: code
                            data: "{\n\t\"name\": \"Simple List Test\",\n\t\"widget_configuration\":{\n\t\t\"list_items\":[\n\t\t\t\t{\n\t\t\t\t\t\"color\": \"blue\",\n\t\t\t\t\t\"text\": \"The color is blue\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"color\": \"green\",\n\t\t\t\t\t\"text\": \"The color is green\"\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\t{\n\t\t\t\t\t\"color\": \"red\",\n\t\t\t\t\t\"text\": \"The color is red\"\n\t\t\t\t}\n\t\t\t]\n\t},\n\t\"widget_template_uuid\":\"your-template-uuid\"\n}"
                            header:
                              title: Sample Widget Configuration
                              subtitle: Simple List
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1551901776600
                            header:
                              title: Storefront View
                              subtitle: Simple List
                            config:
                              centered: true
                              fluid: true
                              maxWidth: '805'
                          - type: text
                            data: '---'
                          - type: text
                            data: '## Simple HTML'
                            header:
                              anchor: widget-tutorial_simple-html
                          - type: code
                            data: '{{{html}}}'
                            header:
                              title: Widget Template
                              subtitle: Simple HTML
                            config:
                              mode: html
                          - type: code
                            data: "{\n\t\"name\": \"Simple List Test\",\n\t\"widget_configuration\":{\n\t\t\"html\":\"<h1> This widget will accept any HTML </h1>\"\n\t},\n\t\"widget_template_uuid\":\"your-template-uuid\"\n}"
                            header:
                              title: Sample Widget Configuration
                              subtitle: Simple HTML
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1551901919454
                            header:
                              title: Storefront
                              subtitle: Simple HTML
                            config:
                              centered: true
                              fluid: true
                              maxWidth: '805'
                          - type: text
                            data: '---'
                          - type: text
                            data: '## Simple Text with Styling'
                            header:
                              anchor: widget-tutorial_simple-text-styling
                          - type: code
                            data: >-
                              "<style>#bc-simple-text-{{_.id}} {color:
                              {{color}};background:
                              {{background_color}};font-size:
                              {{font_size}};font-style:
                              {{font_style}};font-weight:
                              {{font_weight}};font-family:
                              {{font_family}};text-align:
                              {{text_align}};margin-top:
                              {{margin_top}};margin-bottom:
                              {{margin_bottom}};margin-left:
                              {{margin_left}};margin-right:
                              {{margin_right}};padding-top:
                              {{padding_top}};padding-bottom:
                              {{padding_bottom}};padding-left:
                              {{padding_left}};padding-right:
                              {{padding_right}};}</style><p
                              id='bc-simple-text-{{_.id}}'>{{text}}</p>"
                            header:
                              subtitle: Simple Text with Styling
                              title: Widget Template
                            config:
                              mode: html
                          - type: code
                            data: "{\n\t\"name\": \"Simple Text with Styling\",\n\t\"widget_configuration\":{\n\t\t\"text\": \"Simple Text with Styling\",\n\t\t\"_.id\": \"1\",\n\t\t\"color\": \"white\",\n\t\t\"background_color\": \"#3C1F8C\",\n\t\t\"font_size\": \"45px\",\n\t\t\"font_weight\": \"bold\",\n\t\t\"font_family\": \"'Palatino Linotype', 'Book Antiqua', Palatino, serif\",\n\t\t\"text_align\": \"center\",\n\t\t\"margin_right\": \"50px\",\n\t\t\"margin_left\": \"50px\",\n\t\t\"padding_top\": \"25px\",\n\t\t\"padding_bottom\": \"25px\"\n\t},\n\t\"widget_template_uuid\":\"your-template-uuid\"\n}"
                            header:
                              title: Sample Widget Configuration
                              subtitle: Simple Text with Styling
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1551902366345
                            header:
                              subtitle: Simple Text with Styling
                              title: Storefront
                            config:
                              centered: true
                              fluid: true
                              maxWidth: '805'
                          - type: text
                            data: '---'
                          - type: text
                            data: '## Youtube Embed with Layout'
                            header:
                              anchor: widget-tutorial_you-tube-embed
                          - type: code
                            data: >-
                              "<iframe    id='ytplayer-{{_.id}}'   
                              type='text/html'    width='{{width}}'   
                              height='{{height}}'   
                              src='https://www.youtube.com/embed/{{video_id}}?autoplay={{autoplay}}&color={{color}}&controls={{controls}}&disablekb={{disablekb}}&fs={{fs}}&rel={{rel}}&showinfo={{showinfo}}'   
                              frameborder='{{frameborder}}'>  </iframe>"
                            header:
                              title: Widget Template
                              subtitle: Youtube Embed with Layout
                            config:
                              mode: html
                          - type: code
                            data: "{\n\t\"name\": \"Website YouTube Embed\",\n\t\"widget_configuration\":{\n        \"width\": \"100%\",\n        \"height\": \"500px\",\n        \"video_id\": \"EhYBjzqd-nI\"\n\n\t},\n\t\"widget_template_uuid\":\"your-template-uuid\"\n}"
                            header:
                              subtitle: Youtube Embed with Layout
                              title: Sample Widget Configuration
                          - type: code
                            data: |-
                              {
                                  "region": "widget_page",
                                  "template_file": "pages/page",
                                  "markup": "<div style='text-align:center'; height:500px;><bc-placement id='c3c12f8b-d198-41b1-b2cc-f0801f6ad2e5'></bc-placement></div>"
                              }
                            header:
                              title: Sample Layout
                              subtitle: Youtube Embed with Layout
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1551902559005
                            header:
                              title: Storefront
                              subtitle: Youtube Embed with Layout
                            config:
                              fluid: true
                              centered: true
                              maxWidth: '805'
                          - type: text
                            data: '---'
                          - type: text
                            data: '## Image Slider'
                            header:
                              anchor: widget-tutorial_image-slider
                          - type: code
                            data: >-
                              "<ul class=\"slider\">\n{{#each slides}}\n<ul
                              class=\"slide\"><img class=\"mySlides\"
                              src=\"{{image}}\"/></ul>\n{{/each}}\n</ul>\n<script>\nvar
                              slideIndex = 0;\ncarousel();\nfunction carousel()
                              {\nvar i;\nvar x =
                              document.getElementsByClassName(\"mySlides\");\nfor
                              (i = 0; i < x.length; i++) {\nx[i].style.display =
                              \"none\"; \n}\nslideIndex++;\nif (slideIndex >
                              x.length) {slideIndex = 1}
                              \nx[slideIndex-1].style.display = \"block\";
                              \nsetTimeout(carousel, 4000); // Change image
                              every 4 seconds\n}\n</script>"
                            header:
                              title: Widget Template
                              subtitle: Image Slider
                          - type: code
                            data: |-
                              {
                                "name": "Home Page Slider",
                                "widget_configuration": {
                                    "slides": [
                                        {
                                            "image": "https://upload.wikimedia.org/wikipedia/commons/3/3f/Puppy_French_Bulldog.jpg"
                                        },
                                        {
                                            "image": "https://upload.wikimedia.org/wikipedia/commons/c/c1/2009-04-21_APBT_pup_on_deck.jpg"
                                        },
                                        {
                                            "image": "https://upload.wikimedia.org/wikipedia/commons/e/e7/Beagle_puppy_Cadet.jpg"
                                        }
                                    ]
                                },
                                "widget_template_uuid":"your-widget-id"
                              }
                            header:
                              subtitle: Image Slider
                              title: Widget Configuration
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1551906683783
                            header:
                              subtitle: Image Slider
                              title: Storefront
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Resources


                              ### Related Endpoints

                              * [Widgets
                              API](/api-reference/storefront/widgets-api)


                              ### Related Articles

                              * [Widgets
                              Overview](/api-docs/storefront/widgets/widgets-overview)

                              * [Widgets
                              Tutorial](/api-docs/storefront/widgets/widgets-tutorial)
                            header:
                              anchor: widget-code-sample_resources
        - title: Cart and Checkout
          route:
            path: /cart-and-checkout
          data:
            children:
              - title: Overview
                route:
                  path: /cart-and-checkout-overview
                data:
                  blocks:
                    - type: html
                      data: "<h1>Cart and Checkout</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#cart-checkout_storefront-cart-and-checkout\">Storefront Cart and Checkout</a></li>\n        <li><a href=\"#cart-checkout_server-to-server-cart-and-checkout\">Server-to-Server Cart and Checkout</a></li>\n    <li><a href=\"#cart-checkout_troubleshooting\">Troubleshooting Cart Errors</a></li>\n        <li><a href=\"#cart-checkout_available-webhooks\">Available Webhooks</a></li>\n    \t\t<li><a href=\"#cart-checkout_oauth-scopes\">OAuth Scopes</a></li>\n        <li><a href=\"#cart-checkout_related-endpoints\">Related Endpoints</a></li>\n    \n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Storefront Cart and Checkout


                        The Storefront APIs are for managing the contents of a
                        shopper's cart and checkout using JavaScript in the
                        context of a storefront session. 


                        ### When to Use the Storefront APIs


                        * Analytics and Tracking

                        * Retrieving cart data client-side

                        * Quick Order Form

                        * Upsell applications


                        ### Using the Fetch API

                        The [Fetch
                        API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)
                        is an alternative to
                        [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest)
                        for making http requests in JavaScript. You can use the
                        Fetch API to interact with the Storefront APIs and
                        return a shopper's cart, checkout or order. 


                        Fetch API is supported by most modern browsers, but it
                        is not supported in Internet Explorer. We recommend
                        using a [Polyfill](https://github.com/github/fetch) for
                        Internet Explorer 10+ and XMLHttpRequest for earlier
                        versions.


                        To learn more about using the Fetch API with the
                        Storefront see our tutorial
                        [here](/api-docs/cart-and-checkout/working-sf-apis). 


                        You can run fetch requests from the browser console to
                        test, or you can  use the [Scripts
                        API](/api-docs/scripts/scripts-overview) to add inject
                        JavaScript into your theme's footer.
                      header:
                        anchor: cart-checkout_storefront-cart-and-checkout
                    - type: code
                      data: |-
                        <script>
                        console.log('Log Cart');
                        fetch('/api/storefront/cart', {
                          credentials: 'include'
                        }).then(function(response) {
                          return response.json();
                        }).then(function(myJson) {
                          console.log(myJson);
                        });
                        </script>
                      header:
                        title: Log Cart Details to the Console
                      config:
                        mode: html
                    - type: code
                      data: >-
                        <script>

                        console.log('Log Checkout');

                        fetch('/api/storefront/cart?includes=consignments.availableShippingOptions',
                        {
                                credentials: 'include'
                              })
                              .then(function(response) {
                                return response.json();
                              }).then(function(cartJson) {
                                console.log(cartJson);
                                return cartJson[0].id;
                              }).catch(function(error) {
                                console.log(error);
                              }).then(function(cartId) {
                                fetch('/api/storefront/checkouts/' + cartId, {
                                  credentials: 'include'
                                }).then(function(response) {
                                  return response.json();
                                }).then(function(checkoutJson) {
                                  console.log(checkoutJson);
                                }).catch(function(error) {
                                  console.log(error);
                                })
                              });

                        </script>
                      header:
                        title: Log Checkout Details to the Console
                      config:
                        mode: html
                    - type: code
                      data: >-
                        <script>

                        console.log("Log Order");

                        fetch('/api/storefront/order/{{checkout.order.id}}',
                        {credentials: 'include'})

                        .then(function(response) {

                        return response.json();

                        })

                        .then(function(myJson) {

                        console.log(myJson);

                        });

                        </script>
                      header:
                        title: Log Order Details to the Console
                      config:
                        mode: html
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Server-to-Server Cart and Checkout


                        *The Server-to-Server Checkout API is currently
                        available to Early Access participants who have opted in
                        to the beta.*


                        The Server-to-Server APIs are for managing the contents
                        of a shopping cart and checkout remotely, from a server.
                        Using the Cart, Checkout and Payment API allows for a
                        fully headless ecommerce solution.


                        ### CaaS


                        [Commerce-as-a-Service](https://www.bigcommerce.com/commerce-as-a-service/)
                        is made possible with the Server-to-Server APIs. It lets
                        the underlying cart, checkout, order and payment APIs be
                        called from a separate app, allowing you to create a
                        completely custom checkout without ever touching the
                        BigCommerce storefront.



                        ## When to Use

                        * Modifying cart contents, such as price matching

                        * Taking a shopper through cart and checkout using an
                        app

                        * Quote Builder - Building a cart then restoring it on
                        the storefront

                        * Native mobile apps

                        * Pre-filling customer information
                      header:
                        anchor: cart-checkout_server-to-server-cart-and-checkout
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Troubleshooting Cart Errors

                        We will go over common Storefront Cart and Checkout as
                        well as Server to Server Cart and Checkout errors. Each
                        scenario will include the error message and how to fix
                        the error. The most common errors are listed below.


                        ### Please create some text for the API option [422]

                        *Server to Server Cart API*


                        ***Issue:*** When a cart is created containing a product
                        that has an incorrect or missing text modifier. 


                        ***Resolution:***

                        Options and modifiers refer to a list of choices on a
                        product. Options are used to build out variants and
                        modifiers are not tied to variants at all. To learn more
                        about options and modifiers see [Products
                        Overview](/api-docs/catalog/products-overview#products-overview_modifier-options).


                        To add a product to the cart that has a single modifier
                        (text field), POST to the [Cart
                        API](/api-reference/cart-checkout/server-server-cart-api/cart/createacart)
                        without the `variant_id`. 
                      header:
                        anchor: cart-checkout_troubleshooting
                    - type: code
                      data: |

                        {
                          "line_items": [
                            {
                              "quantity": 1,
                              "product_id": 1001,
                              "option_selections": [
                                {
                                  "option_id": 123,
                                  "option_value": "Hello!"
                                }
                              ]
                            }
                          ]
                        }
                      header:
                        title: Single Modifier
                      config:
                        mode: json
                    - type: text
                      data: >-
                        To add a product to the cart that has one option (radio
                        button)  associated with it, use just the `variant_id`
                        in the request. 
                    - type: code
                      data: |-
                        {
                          "line_items": [
                            {
                              "quantity": 1,
                              "product_id": 1001,
                              "variant_id": 2331
                            }
                        ]
                        }
                      header:
                        title: Single Option
                      config:
                        mode: json
                    - type: text
                      data: >-
                        To add a product that has both an option and a modifier
                        associated with it, then use the `option_id` and
                        `option_value`. This example uses a radio button
                        (option) and a text field (modifier).
                    - type: code
                      data: |
                        {
                          "line_items": [
                            {
                              "quantity": 1,
                              "product_id": 101,
                              "option_selections": [
                                {
                                  "option_id": 231,
                                  "option_value": 456
                                },

                                {
                                  "option_id": 123,
                                  "option_value": "Hello!"
                                }
                              ]
                            }
                          ]
                      header:
                        title: Modifier and Option
                      config:
                        mode: json
                    - type: text
                      data: >-
                        ### Missing line_items in request body [422]


                        *Server to Server Cart API*


                        ***Issue:*** 

                        When a required product modifier is missing. A product
                        can have a modifier that is not required. In those cases
                        the product can be added to a cart without the
                        modifier. 


                        ***Resolution:***

                        Use the [Get
                        Products](/api-reference/catalog/catalog-api/products/getproducts)
                        or [Get
                        Modifier](/api-reference/catalog/catalog-api/product-modifiers/getmodifiers)
                        endpoints to return the modifier ID. The `modifier_id` =
                        `option_id`. 


                        To create a cart with a product modifier:
                    - type: code
                      data: |

                        {
                          "line_items": [
                            {
                              "quantity": 1,
                              "product_id": 1001,
                              "option_selections": [
                                {
                                  "option_id": 123,
                                  "option_value": "Hello!"
                                }
                              ]
                            }
                          ]
                        }
                      header:
                        title: Create cart with modifier
                    - type: text
                      data: >-
                        ### A shipping address for this order is incomplete
                        [422]

                        *Server to Server Cart API*


                        ***Issue:***

                        This can return when the customer ID of a cart has
                        changed. 


                        ***Resolution:***

                        The customer ID is linked to discounts and pricing
                        available to that customer. If that is changed then
                        anything that affects the cart price is invalidated.
                        This includes coupons, discounts, taxes and shipping.


                        A cart should be created with the `customer_id` as part
                        of the request body. Use the [Get
                        Customers](/api-reference/customer-subscribers/customers-api/customers/getallcustomers)
                        endpoint to get the `customer_id`. 


                        To create a cart with a `customer_id`:
                    - type: code
                      data: |
                        {
                          “customer_id”: 12,
                          "line_items": [
                            {
                              "quantity": 5,
                              "product_id": 191
                            }
                          ]
                        }
                      header:
                        title: Create cart with customer ID
                      config:
                        mode: json
                    - type: text
                      data: >-
                        ### This product has options, variant ID is required
                        [422]

                        *Server to Server Cart API*


                        ***Issue:***  When a product has options and variant ID
                        is not supplied in either the create or update cart
                        request. 


                        ***Resolution:***

                        To get the variant ID use the [Get
                        Products](/api-reference/catalog/catalog-api/products/getproducts)
                        endpoint or the [Get
                        Variants](/api-reference/catalog/catalog-api/product-variants/getvariantsbyproductid)
                        endpoint.

                        To create a cart with a variant ID:
                    - type: code
                      data: |-
                        {
                          "line_items": [
                            {
                              "quantity": 1,
                              "product_id": 1001,
                              "variant_id": 2331
                            }
                        ]
                        }
                      header:
                        title: Create cart with variant ID
                      config:
                        mode: json
                    - type: text
                      data: >-
                        ***Issue:***

                        The incorrect `option_id` is supplied.


                        ***Resolution:***

                        To get the correct option_id make a request to [Get
                        Products

                        ](/api-reference/catalog/catalog-api/products/getproducts)
                        or [Get
                        Options](/api-reference/catalog/catalog-api/product-variant-options/getoptions). 
                    - type: code
                      data: |
                        {
                          "line_item": {
                            "quantity": 1,
                            "product_id": 76,
                            "list_price": 170.00,
                            "option_selections": [
                              {
                                "option_id": 21506,
                                "option_value": 10090
                              }
                            ]
                          }
                        }
                      header:
                        title: Create cart option ID
                    - type: text
                      data: >-
                        *Storefront Cart API*


                        ***Issue:***


                        * Missing required modifier on the storefront. This can
                        include a text modifier with no selection. Make sure the
                        optionValue is not blank.

                        * The variantID is incorrect.

                        * The modifierID is incorrect.



                        **Resolution:**

                        To add a product to the cart that has a single modifier
                        (text field), POST to the [Cart
                        API](/api-reference/cart-checkout/storefront-cart-api/cart/createacart)
                        without the `variant_id`. Use the `optionId` and
                        `optionValue` instead. 
                    - type: code
                      data: |-
                        {
                          "lineItems": [
                            {
                              "quantity": 1,
                              "product_id": 1001,
                              "optionSelections": [
                                {
                                  "optionId": 123,
                                  "optionValue": "Hello!"
                                }
                              ]
                            }
                          ]
                        }
                      header:
                        title: Create cart optionId and optionValue
                      config:
                        mode: json
                    - type: text
                      data: >-
                        To add a product to the cart that has one option (radio
                        button)  associated with it, use just the `variant_id`
                        in the request. 
                    - type: code
                      data: |-
                        {
                          "lineItems": [
                            {
                              "quantity": 1,
                              "productId": 1001,
                              "variantId": 2331
                            }
                        ]
                        }
                      header:
                        title: Create Storefront Cart variantID
                      config:
                        mode: json
                    - type: text
                      data: >-
                        To add a product that has both an option and a modifier
                        associated with it, then use the `option_id` and
                        `option_value`. This example uses a radio button
                        (option) and a text field (modifier).
                    - type: code
                      data: |-
                        {
                          "lineItems": [
                            {
                              "quantity": 1,
                              "product_id": 101,
                              "optionSelections": [
                                {
                                  "optionId": 231,
                                  "optionValue": 456
                                },

                                {
                                  "optionId": 123,
                                  "optionValue": "Hello!"
                                }
                              ]
                            }
                          ]
                        }
                      header:
                        title: Add item with option and modifier
                      config:
                        mode: json
                    - type: text
                      data: >+
                        ### Internal Server Error [500]


                        *Server to Server Cart API* 


                        ***Issue:***

                        When less than a product’s minimum required purchase or
                        more than the maximum allowed purchase is added to cart.


                        ***Resolution:***

                        Check the product for `order_quantity_minimum` and
                        `order_quantity_maximum `for the correct amount to add
                        the cart. Use the [Get
                        Product](/api-reference/catalog/catalog-api/products/getproducts)
                        endpoint.


                        ***Issue:***

                        Adding more product quantity to a cart than what’s in
                        stock. 


                        ***Resolution:***

                        Check the product for `inventory_level` to see how many
                        are in stock. Use the [Get
                        Product](/api-reference/catalog/catalog-api/products/getproducts)
                        endpoint.


                        ***Issue:***

                        Trying to edit a Cart that does not exist. 


                        ***Resolution:***

                        Carts are only valid 30 days past the
                        `date_last_modified`. Check the [Get
                        Carts](/api-reference/cart-checkout/storefront-cart-api/cart/getacart)
                        endpoint for the current available session cart.


                        *Storefront Cart API*


                        ***Issue:***

                        When less than a product’s minimum required purchase or
                        more than the maximum allowed purchase is added to cart.
                        Use the [Get
                        Product](/api-reference/catalog/catalog-api/products/getproducts)
                        endpoint to check for min/max purchase restrictions.


                        ***Resolution:***

                        Check the product for order_quantity_minimum and
                        order_quantity_maximum for the correct amount to add the
                        cart. Use the [Get
                        Product](/api-reference/catalog/catalog-api/products/getproducts)
                        endpoint.

                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Available Webhooks

                        *
                        [Orders](/api-docs/getting-started/webhooks/webhook-events#webhook-events_orders)

                        *
                        [SKU](/api-docs/getting-started/webhooks/webhook-events#webhook-events_sku)

                        *
                        [Cart](/api-docs/getting-started/webhooks/webhook-events#webhook-events_cart)
                      header:
                        anchor: cart-checkout_available-webhooks
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## OAuth Scopes

                        * Carts

                        * Checkouts

                        * Products

                        * Checkout Content

                        * Order Transactions


                        For more details and a full list of available scopes,
                        see [Oauth
                        Scopes](/api-docs/getting-started/basics/authentication#authentication_oauth-scopes).
                      header:
                        anchor: cart-checkout_oauth-scopes
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Related Endpoints

                        * [Storefront
                        Cart](/api-reference/cart-checkout/storefront-cart-api)

                        * [Storefront
                        Checkout](/api-reference/cart-checkout/storefront-checkout-api)

                        * [Server-to-Server
                        Cart](/api-reference/cart-checkout/server-server-cart-api)

                        * [Server-to-Server
                        Checkout](/api-reference/cart-checkout/server-server-checkout-api)
                      header:
                        anchor: cart-checkout_related-endpoints
              - title: Working with Storefront APIs
                config:
                  sidebar:
                    token: tutorial
                route:
                  path: /working-sf-apis
                data:
                  blocks:
                    - type: html
                      data: "<h1>Working with the Storefront APIs</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#working-sf-apis_prerequisites\">Prerequisites</a></li>\n        <li><a href=\"#working-sf-apis_create-postdata\">Create postData() Function</a></li>\n        <li><a href=\"#working-sf-apis_storefront-cart\">Storefront Cart</a></li>\n    \t\t<li><a href=\"#working-sf-apis_storefront-checkout\">Storefront Checkout</a></li>\n        <li><a href=\"#working-sf-apis_troubleshooting\">Troubleshooting</a></li>\n    \t\t<li><a href=\"#working-sf-apis_realated-endpoints\">Related Endpoints</a></li>\n    \n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Prerequisites:

                        * Chrome/Firefox/Safari - Fetch does not work every
                        version of [Internet
                        Explorer](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Browser_compatibility).
                        We recommend installing a
                        [polyfill](https://github.com/github/fetch#html), then
                        use fetch as usual.

                        * BigCommerce Store with at least two
                        [products](/api-reference/catalog/catalog-api/products/createproduct)
                        and a [shipping
                        option](/api-docs/shipping/shipping-overview#shipping_shipping-zone-methods)
                        available. 

                        * Familiar with browser developer console


                        This tutorial reviews the Fetch API and then uses it to
                        complete some storefront actions. 


                        Interaction with the Storefront APIs should be done
                        using JavaScript. The Storefront APIs do not require API
                        Tokens to work. The URL should be served over https and
                        be on the [permanent
                        URL](https://forum.bigcommerce.com/s/article/Changing-Domains);
                        otherwise, it can cause
                        [CORs](https://developers.google.com/web/ilt/pwa/working-with-the-fetch-api#cross-origin_requests)
                        errors in the console.
                      header:
                        anchor: working-sf-apis_prerequisites
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create postData() function


                        Below is the function we are going to use to create a
                        new cart using the Storefront Cart API.
                      header:
                        anchor: working-sf-apis_create-postdata
                    - type: code
                      data: |-
                        postData(`/api/storefront/cart`, {
                                "lineItems": [
                                {
                                    "quantity": 1,
                                    "productId": 196
                                },
                                {
                                    "quantity": 1,
                                    "productId": 184
                                }
                                ]}
                            )
                          .then(data => console.log(JSON.stringify(data))) 
                          .catch(error => console.error(error));

                        function postData(url = ``, cartItems = {}) {
                              return fetch(url, {
                                  method: "POST",
                                  credentials: "same-origin",
                                  headers: {
                                      "Content-Type": "application/json" },
                                  body: JSON.stringify(cartItems), 
                              })
                              .then(response => response.json()); 
                          }
                      header:
                        title: postData
                      config:
                        mode: js
                    - type: text
                      data: >-
                        Let’s review the function. First, we call the
                        `postData()` function, which is defined at the bottom of
                        the code excerpt.
                    - type: callout
                      data:
                        body: >-
                          JavaScript allows function declarations to be
                          [hoisted](https://scotch.io/tutorials/understanding-hoisting-in-javascript#toc-hoisting-functions),
                          so the function postData() can be called before being
                          defined.
                    - type: text
                      data: >-
                        The `postData()` function accepts two arguments: a URL
                        string and a body. 


                        The URL string that we pass in is
                        `/api/storefront/cart`. There is no need to provide the
                        full store URL when making the request in the browser
                        because the URL path appends to the current website URL.


                        For the request body, we pass in the `lineItems` array,
                        which contains the product IDs and quantities to add to
                        cart. 


                        Note that when we define the `postData` function, we set
                        the body parameter to cartItems, which is an empty
                        object. When the `lineItems` array is passed to the
                        function, the cartItems object automatically wraps the
                        array in a set of outer curly braces. Keep this in mind
                        when adapting this code to accept a different request
                        body--otherwise, your request body may wind up with an
                        extra set of curly braces.  


                        After the line items, fetch uses
                        [then()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then)
                        which accepts the data that is returned and prints it to
                        the console. 


                        If there is an error, the next line
                        [catch()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch)
                        prints the returned error to the console. 
                    - type: code
                      data: |-
                        function postData(url = ``, cartItems = {}) {
                              return fetch(url, {
                                  method: "POST",
                                  credentials: "same-origin",
                                  headers: {
                                      "Content-Type": "application/json" },
                                  body: JSON.stringify(cartItems), 
                              })
                             .then(response => response.json()); 
                          }
                    - type: text
                      data: >-
                        Next, we are going to walk through the postData()
                        function above. Here the arguments for `url` and
                        `cartItems` are defined. In later examples, you will see
                        we can pass in different items depending on what we need
                        in the fetch request.  postData() returns another
                        function, fetch(). Fetch takes a URL, method and a body.
                        Other
                        [arguments](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Supplying_request_options)
                        can be added such as credentials, headers, etc. 


                        [Credentials](https://github.com/github/fetch#sending-cookies)
                        are set to
                        [same-origin](https://developer.mozilla.org/en-US/docs/Web/API/Request/credentials).
                        The credentials that you need will depend on your app
                        setup. Review your app setup carefully; otherwise, this
                        will cause
                        [CORs](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
                        errors. Below is a simplified guide on when to use each
                        type of credential.


                        | Credential | When to Use |

                        | -- | -- |

                        | same-origin | If the request and response server is
                        the same. Ex. bigcommerce.com => bigcommerce.com |

                        | include | If the request and response domain are
                        different. Ex. bigcommerce.com =>
                        developers.bigcommerce.com  |

                        | omit | To disable sending cookies to any domain |


                        Content-Type is set to application/json. The body data
                        needs to match the content-type. BigCommerce only sends
                        and accepts the Storefront API  data in json. 

                         The body is set to [JSON.stringify()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) which converts JavaScript values to a string. 

                        Finally, `.then()` is parsing the response to JSON. 


                        Now that we have the basics of creating a function with
                        the fetch() API, we are going to use it to create a
                        cart, get a cart and delete cart items. 
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Storefront Cart


                        ### Create Cart


                        First, we pass in the request URL to create a cart into
                        the function call. 


                        Then we need to pass in the `lineItems` array. The
                        `quantity` and `productId` are required to create a
                        cart. If there are
                        [variants](/api-reference/catalog/catalog-api/product-variants/getvariantsbyproductid)
                        then the variantId or optionId with the optionValues
                        need to be added.  See [Create
                        Cart](/api-reference/cart-checkout/storefront-cart-api/cart/createacart)
                        for more examples. The response will be printed to the
                        browser console.  Make sure to note the value for cartId
                        as it will be used later.
                      header:
                        anchor: working-sf-apis_storefront-cart
                    - type: code
                      data: |-
                        postData(`/api/storefront/cart`, {
                                "lineItems": [
                                {
                                    "quantity": 1,
                                    "productId": 191
                                },
                                {
                                    "quantity": 1,
                                    "productId": 185
                                }
                                ]}
                            )
                          .then(data => console.log(JSON.stringify(data))) 
                          .catch(error => console.error(error));

                        function postData(url = ``, cartItems = {}) {
                              return fetch(url, {
                                  method: "POST",
                                  credentials: "same-origin",
                                  headers: {
                                      "Content-Type": "application/json" },
                                  body: JSON.stringify(cartItems), 
                              })
                              .then(response => response.json()); 
                          }
                      header:
                        title: Create Cart
                      config:
                        mode: js
                    - type: code
                      data: "{\n\t\"id\": \"1650fb51-172b-4cde-a220-90c6a8ef9293\",\n\t\"customerId\": 0,\n\t\"email\": \"\",\n\t\"currency\": {\n\t\t\"name\": \"US Dollars\",\n\t\t\"code\": \"USD\",\n\t\t\"symbol\": \"$\",\n\t\t\"decimalPlaces\": 2\n\t},\n\t\"isTaxIncluded\": false,\n\t\"baseAmount\": 73.95,\n\t\"discountAmount\": 0,\n\t\"cartAmount\": 73.95,\n\t\"coupons\": [],\n\t\"discounts\": [{\n\t\t\"id\": \"7349b13a-1453-4050-a769-1a6ad1823369\",\n\t\t\"discountedAmount\": 0\n\t}, {\n\t\t\"id\": \"4a69cbdf-4320-4e1f-852b-0edc2a55f13a\",\n\t\t\"discountedAmount\": 0\n\t}],\n\t\"lineItems\": {\n\t\t\"physicalItems\": [{\n\t\t\t\"id\": \"7349b13a-1453-4050-a769-1a6ad1823369\",\n\t\t\t\"parentId\": null,\n\t\t\t\"variantId\": 362,\n\t\t\t\"productId\": 191,\n\t\t\t\"sku\": \"\",\n\t\t\t\"name\": \"Openhouse No. 3\",\n\t\t\t\"url\": \"https://{store_url)/all/openhouse-no-3/\",\n\t\t\t\"quantity\": 1,\n\t\t\t\"brand\": \"Openhouse Magazine\",\n\t\t\t\"isTaxable\": true,\n\t\t\t\"imageUrl\": \"https://cdn11.bigcommerce.com/s-{store_hash)/products/191/images/475/openhousevol3_1024x1024__59692__16355.1534344544.330.500.jpg?c=2\",\n\t\t\t\"discounts\": [],\n\t\t\t\"discountAmount\": 0,\n\t\t\t\"couponAmount\": 0,\n\t\t\t\"listPrice\": 27.95,\n\t\t\t\"salePrice\": 27.95,\n\t\t\t\"extendedListPrice\": 27.95,\n\t\t\t\"extendedSalePrice\": 27.95,\n\t\t\t\"isShippingRequired\": true,\n\t\t\t\"type\": \"physical\",\n\t\t\t\"giftWrapping\": null\n\t\t}, {\n\t\t\t\"id\": \"4a69cbdf-4320-4e1f-852b-0edc2a55f13a\",\n\t\t\t\"parentId\": null,\n\t\t\t\"variantId\": 356,\n\t\t\t\"productId\": 185,\n\t\t\t\"sku\": \"\",\n\t\t\t\"name\": \"Utility Caddy\",\n\t\t\t\"url\": \"https://{store_url)/all/utility-caddy/\",\n\t\t\t\"quantity\": 1,\n\t\t\t\"brand\": \"OFS\",\n\t\t\t\"isTaxable\": true,\n\t\t\t\"imageUrl\": \"https://cdn11.bigcommerce.com/s-{store_hash)/products/185/images/449/utilitybucket1_1024x1024__78563__75042.1534344535.330.500.jpg?c=2\",\n\t\t\t\"discounts\": [],\n\t\t\t\"discountAmount\": 0,\n\t\t\t\"couponAmount\": 0,\n\t\t\t\"listPrice\": 46,\n\t\t\t\"salePrice\": 46,\n\t\t\t\"extendedListPrice\": 46,\n\t\t\t\"extendedSalePrice\": 46,\n\t\t\t\"isShippingRequired\": true,\n\t\t\t\"type\": \"physical\",\n\t\t\t\"giftWrapping\": null\n\t\t}],\n\t\t\"digitalItems\": [],\n\t\t\"giftCertificates\": [],\n\t\t\"customItems\": []\n\t},\n\t\"createdTime\": \"2018-11-06T19:22:51+00:00\",\n\t\"updatedTime\": \"2018-11-06T19:22:51+00:00\"\n}"
                      header:
                        title: Create Cart Response
                    - type: text
                      data: >-
                        ### Get Cart


                        The function below is slightly different. The postData()
                        that was present in Create a Cart above is removed since
                        the function only needs to print the response data to
                        the console. To return the full product data in a cart,
                        an include query parameter must be added. See [Get Cart
                        endpoint](/api-reference/cart-checkout/storefront-cart-api/cart/getacart)
                        for more details. 
                    - type: code
                      data: >-
                        fetch('/api/storefront/cart?include=lineItems.digitalItems.options,lineItems.physicalItems.options',
                        {
                          credentials: 'same-origin'}
                             )
                          .then(function(response) {
                            return response.json();
                          })
                          .then(function(myJson) {
                            console.log(JSON.stringify(myJson));
                          });
                      header:
                        title: Get Cart
                    - type: code
                      data: "[{\n\t\"id\": \"1650fb51-172b-4cde-a220-90c6a8ef9293\",\n\t\"customerId\": 0,\n\t\"email\": \"\",\n\t\"currency\": {\n\t\t\"name\": \"US Dollars\",\n\t\t\"code\": \"USD\",\n\t\t\"symbol\": \"$\",\n\t\t\"decimalPlaces\": 2\n\t},\n\t\"isTaxIncluded\": false,\n\t\"baseAmount\": 73.95,\n\t\"discountAmount\": 0,\n\t\"cartAmount\": 73.95,\n\t\"coupons\": [],\n\t\"discounts\": [{\n\t\t\"id\": \"7349b13a-1453-4050-a769-1a6ad1823369\",\n\t\t\"discountedAmount\": 0\n\t}, {\n\t\t\"id\": \"4a69cbdf-4320-4e1f-852b-0edc2a55f13a\",\n\t\t\"discountedAmount\": 0\n\t}],\n\t\"lineItems\": {\n\t\t\"physicalItems\": [{\n\t\t\t\"id\": \"7349b13a-1453-4050-a769-1a6ad1823369\",\n\t\t\t\"parentId\": null,\n\t\t\t\"variantId\": 362,\n\t\t\t\"productId\": 191,\n\t\t\t\"sku\": \"\",\n\t\t\t\"name\": \"Openhouse No. 3\",\n\t\t\t\"url\": \"https://{store_url)/all/openhouse-no-3/\",\n\t\t\t\"quantity\": 1,\n\t\t\t\"brand\": \"Openhouse Magazine\",\n\t\t\t\"isTaxable\": true,\n\t\t\t\"imageUrl\": \"https://cdn11.bigcommerce.com/s-{store_hash)/products/191/images/475/openhousevol3_1024x1024__59692__16355.1534344544.330.500.jpg?c=2\",\n\t\t\t\"discounts\": [],\n\t\t\t\"discountAmount\": 0,\n\t\t\t\"couponAmount\": 0,\n\t\t\t\"listPrice\": 27.95,\n\t\t\t\"salePrice\": 27.95,\n\t\t\t\"extendedListPrice\": 27.95,\n\t\t\t\"extendedSalePrice\": 27.95,\n\t\t\t\"isShippingRequired\": true,\n\t\t\t\"type\": \"physical\",\n\t\t\t\"giftWrapping\": null,\n\t\t\t\"options\": [{\n\t\t\t\t\"name\": \"Add a $5 Donation\",\n\t\t\t\t\"nameId\": 82,\n\t\t\t\t\"value\": \"\",\n\t\t\t\t\"valueId\": 186\n\t\t\t}]\n\t\t}, {\n\t\t\t\"id\": \"4a69cbdf-4320-4e1f-852b-0edc2a55f13a\",\n\t\t\t\"parentId\": null,\n\t\t\t\"variantId\": 356,\n\t\t\t\"productId\": 185,\n\t\t\t\"sku\": \"\",\n\t\t\t\"name\": \"Utility Caddy\",\n\t\t\t\"url\": \"https://{store_url)/all/utility-caddy/\",\n\t\t\t\"quantity\": 1,\n\t\t\t\"brand\": \"OFS\",\n\t\t\t\"isTaxable\": true,\n\t\t\t\"imageUrl\": \"https://cdn11.bigcommerce.com/s-{store_hash)/products/185/images/449/utilitybucket1_1024x1024__78563__75042.1534344535.330.500.jpg?c=2\",\n\t\t\t\"discounts\": [],\n\t\t\t\"discountAmount\": 0,\n\t\t\t\"couponAmount\": 0,\n\t\t\t\"listPrice\": 46,\n\t\t\t\"salePrice\": 46,\n\t\t\t\"extendedListPrice\": 46,\n\t\t\t\"extendedSalePrice\": 46,\n\t\t\t\"isShippingRequired\": true,\n\t\t\t\"type\": \"physical\",\n\t\t\t\"giftWrapping\": null,\n\t\t\t\"options\": []\n\t\t}],\n\t\t\"digitalItems\": [],\n\t\t\"giftCertificates\": [],\n\t\t\"customItems\": []\n\t},\n\t\"createdTime\": \"2018-11-06T19:22:51+00:00\",\n\t\"updatedTime\": \"2018-11-06T19:22:51+00:00\"\n}]"
                      header:
                        title: Get Cart Response
                      config:
                        mode: json
                    - type: text
                      data: >-
                        ### Delete Cart Item


                        In the code below there are a few changes. One is the
                        arguments for deleteCartItem() now accept a cartId and
                        itemId as strings. These are passed into the
                        deleteCartItem() at the top. The URL is being built
                        using concatenation. 


                        We have also introduced a new way to handle errors.
                        Error handling in fetch can be pulled out into a
                        standalone function and be used to return any data or
                        messages you want as a way to keep the code
                        [DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself). 
                    - type: callout
                      data:
                        type: warning
                        body: Deleting the last item in your cart deletes the cart.
                    - type: code
                      data: >-
                        deleteCartItem(`/api/storefront/carts/`,
                        `c057c316-71d8-4b58-86e1-f6f2ed003683`,
                        `94bf4255-13a0-4109-b37a-5122ee3dd18c`)
                          .then(data => console.log(JSON.stringify(data)))
                          .then(handleErrors) 
                          .catch(error => console.error(error));

                        function handleErrors(response) {
                            if (!response.ok) {
                                throw Error(response.statusText);
                            }
                            return response;
                        }


                        function deleteCartItem(url = ``, cartId = ``, itemId =
                        ``) {
                              return fetch(url + cartId + '/items/' + itemId , {
                                  method: "DELETE",
                                  credentials: "same-origin",
                                  headers: {
                                      "Content-Type": "application/json;,          
                                      },
                                 body: JSON.stringify(data),
                              })
                              .then(response => response.json()); 
                          }
                      header:
                        title: Delete Cart Item
                      config:
                        mode: js
                    - type: text
                      data: >-
                        ## Storefront Checkout

                        Next, we will cover using the Storefront Checkout to add
                        a billing address, add a shipping address and update a
                        shipping address to add the shipping option.


                        Make sure you have created a cart using the Storefront
                        Cart, added two different `lineItems` and have a
                        shipping method set up on the store. See [Create
                        Cart](#working-sf-apis_storefront-cart) above if you
                        deleted your cart and need to make a new one. 
                      header:
                        anchor: working-sf-apis_storefront-checkout
                    - type: callout
                      data:
                        body: checkoutId and the cartId are same.
                    - type: text
                      data: >-
                        ### Add billing address to checkout


                        A billing address is required to complete a checkout. In
                        postData() we pass in the `checkoutId` and the billing
                        address object.
                    - type: code
                      data: >
                        postData(`/api/storefront/checkouts/`,
                        `e8b7c677-f67a-4e39-a5ed-f405c9a06bcf`, {

                        "firstName": "Jane",
                                    "lastName": "Doe",
                                    "email": "janedoe@email.com",
                                    "company": "BigCommerce",
                                    "address1": "123 Main Street",
                                    "address2": "Apt 1",
                                    "city": "Austin",
                                    "stateOrProvinceCode": "TX",
                                    "countryCode": "USA",
                                    "postalCode": "78751"
                        })
                          .then(data => console.log(JSON.stringify(data))) 
                          .catch(error => console.error(error));

                        function postData(url = ``, checkoutId = ``, data = {},)
                        {
                            return fetch(url + checkoutId + `/billing-address`,  {
                                method: "POST", 
                                credentials: "same-origin",
                                headers: {
                                    "Content-Type": "application/json",
                                },
                                body: JSON.stringify(data),
                            })
                            .then(response => response.json()); 
                        }
                      header:
                        title: Add billing address
                    - type: text
                      data: >-
                        ### Add shipping address or consignment to checkout 

                        A consignment consists of a shipping address with the
                        associated lineItems.  At a minimum, at least one
                        shipping address with line items and shipping options
                        must be part of the checkout.


                        A shipping address can only be added to checkout with
                        lineItems. If multiple shipping locations are used,
                        match each `lineItem` with the correct shipping address
                        as shown in the example below. For more examples see
                        [Create
                        Consignment](/api-reference/cart-checkout/storefront-checkout-api/checkout/checkoutsconsignmentsbycheckoutidpost).


                        When adding a shipping address to the checkout
                        `?include=consignments.availableShippingOptions` must be
                        included to return the shipping options available for
                        any address. To add the shipping option a [put
                        request](/api-reference/cart-checkout/storefront-checkout-api/checkout/checkoutsconsignmentsbycheckoutidandconsignmentidput)
                        must be sent for each consignment. We will cover this in
                        the next section. 


                        To get the line item IDs needed for consignment, send a
                        request to [/GET
                        Checkout](/api-reference/cart-checkout/storefront-checkout-api/checkout/checkoutsbycheckoutidget).
                        Try to modify the /GET Cart request so it returns
                        Checkout Details. If you are having trouble, see the
                        code sample below. 
                    - type: code
                      data: >-
                        fetch('/api/storefront/checkouts/1650fb51-172b-4cde-a220-90c6a8ef9293',
                        {
                          credentials: 'same-origin'}
                             )
                          .then(function(response) {
                            return response.json();
                          })
                          .then(function(myJson) {
                            console.log(JSON.stringify(myJson));
                          });
                      header:
                        title: Get Checkout by ID
                      config:
                        mode: js
                    - type: code
                      data: "{\n\t\"id\": \"1650fb51-172b-4cde-a220-90c6a8ef9293\",\n\t\"cart\": {\n\t\t\"id\": \"1650fb51-172b-4cde-a220-90c6a8ef9293\",\n\t\t\"customerId\": 0,\n\t\t\"email\": \"janedoe@email.com\",\n\t\t\"currency\": {\n\t\t\t\"name\": \"US Dollars\",\n\t\t\t\"code\": \"USD\",\n\t\t\t\"symbol\": \"$\",\n\t\t\t\"decimalPlaces\": 2\n\t\t},\n\t\t\"isTaxIncluded\": false,\n\t\t\"baseAmount\": 73.95,\n\t\t\"discountAmount\": 0,\n\t\t\"cartAmount\": 73.95,\n\t\t\"coupons\": [],\n\t\t\"discounts\": [{\n\t\t\t\"id\": \"7349b13a-1453-4050-a769-1a6ad1823369\",\n\t\t\t\"discountedAmount\": 0\n\t\t}, {\n\t\t\t\"id\": \"4a69cbdf-4320-4e1f-852b-0edc2a55f13a\",\n\t\t\t\"discountedAmount\": 0\n\t\t}],\n\t\t\"lineItems\": {\n\t\t\t\"physicalItems\": [{\n\t\t\t\t\"id\": \"7349b13a-1453-4050-a769-1a6ad1823369\",\n\t\t\t\t\"parentId\": null,\n\t\t\t\t\"variantId\": 362,\n\t\t\t\t\"productId\": 191,\n\t\t\t\t\"sku\": \"\",\n\t\t\t\t\"name\": \"Openhouse No. 3\",\n\t\t\t\t\"url\": \"https://{store_url)/all/openhouse-no-3/\",\n\t\t\t\t\"quantity\": 1,\n\t\t\t\t\"brand\": \"Openhouse Magazine\",\n\t\t\t\t\"isTaxable\": true,\n\t\t\t\t\"imageUrl\": \"https://cdn11.bigcommerce.com/s-{store_hash)/products/191/images/475/openhousevol3_1024x1024__59692__16355.1534344544.330.500.jpg?c=2\",\n\t\t\t\t\"discounts\": [],\n\t\t\t\t\"discountAmount\": 0,\n\t\t\t\t\"couponAmount\": 0,\n\t\t\t\t\"listPrice\": 27.95,\n\t\t\t\t\"salePrice\": 27.95,\n\t\t\t\t\"extendedListPrice\": 27.95,\n\t\t\t\t\"extendedSalePrice\": 27.95,\n\t\t\t\t\"isShippingRequired\": true,\n\t\t\t\t\"giftWrapping\": null,\n\t\t\t\t\"addedByPromotion\": false\n\t\t\t}, {\n\t\t\t\t\"id\": \"4a69cbdf-4320-4e1f-852b-0edc2a55f13a\",\n\t\t\t\t\"parentId\": null,\n\t\t\t\t\"variantId\": 356,\n\t\t\t\t\"productId\": 185,\n\t\t\t\t\"sku\": \"\",\n\t\t\t\t\"name\": \"Utility Caddy\",\n\t\t\t\t\"url\": \"https://{store_url)/all/utility-caddy/\",\n\t\t\t\t\"quantity\": 1,\n\t\t\t\t\"brand\": \"OFS\",\n\t\t\t\t\"isTaxable\": true,\n\t\t\t\t\"imageUrl\": \"https://cdn11.bigcommerce.com/s-{store_hash)/products/185/images/449/utilitybucket1_1024x1024__78563__75042.1534344535.330.500.jpg?c=2\",\n\t\t\t\t\"discounts\": [],\n\t\t\t\t\"discountAmount\": 0,\n\t\t\t\t\"couponAmount\": 0,\n\t\t\t\t\"listPrice\": 46,\n\t\t\t\t\"salePrice\": 46,\n\t\t\t\t\"extendedListPrice\": 46,\n\t\t\t\t\"extendedSalePrice\": 46,\n\t\t\t\t\"isShippingRequired\": true,\n\t\t\t\t\"giftWrapping\": null,\n\t\t\t\t\"addedByPromotion\": false\n\t\t\t}],\n\t\t\t\"digitalItems\": [],\n\t\t\t\"giftCertificates\": [],\n\t\t\t\"customItems\": []\n\t\t},\n\t\t\"createdTime\": \"2018-11-06T19:22:51+00:00\",\n\t\t\"updatedTime\": \"2018-11-06T19:25:26+00:00\"\n\t},\n\t\"billingAddress\": {\n\t\t\"id\": \"5be1eaa653e37\",\n\t\t\"firstName\": \"Jane\",\n\t\t\"lastName\": \"Doe\",\n\t\t\"email\": \"janedoe@email.com\",\n\t\t\"company\": \"BigCommerce\",\n\t\t\"address1\": \"123 Main Street\",\n\t\t\"address2\": \"Apt 1\",\n\t\t\"city\": \"Austin\",\n\t\t\"stateOrProvince\": \"\",\n\t\t\"stateOrProvinceCode\": \"\",\n\t\t\"country\": \"\",\n\t\t\"countryCode\": \"\",\n\t\t\"postalCode\": \"78751\",\n\t\t\"phone\": \"\",\n\t\t\"customFields\": []\n\t},\n\t\"consignments\": [],\n\t\"orderId\": null,\n\t\"shippingCostTotal\": 0,\n\t\"shippingCostBeforeDiscount\": 0,\n\t\"handlingCostTotal\": 0,\n\t\"taxTotal\": 12.22,\n\t\"coupons\": [],\n\t\"taxes\": [{\n\t\t\"name\": \"This is tax\",\n\t\t\"amount\": 12.22\n\t}],\n\t\"subtotal\": 73.95,\n\t\"grandTotal\": 86.17,\n\t\"giftCertificates\": [],\n\t\"createdTime\": \"2018-11-06T19:22:51+00:00\",\n\t\"updatedTime\": \"2018-11-06T19:25:26+00:00\",\n\t\"customerMessage\": \"\"\n}"
                      header:
                        title: Get Checkout Response
                    - type: callout
                      data:
                        body: ' If your cart only has one lineItem or a quantity of one, run a [POST Cart](//api-reference/cart-checkout/storefront-cart-api/cart/createacart) request with a new lineItem, then come back here.'
                    - type: text
                      data: >-
                        Below, there are two shipping addresses in an array with
                        a lineItem assigned to each. Note that
                        `?include=consignments.availableShippingOptions` is
                        being added as a query parameter. Without this, the
                        `availableShippingOptions` will not return in the
                        response. 
                    - type: code
                      data: >-
                        postData(`/api/storefront/checkouts/`,
                        `1650fb51-172b-4cde-a220-90c6a8ef9293`,

                        [{
                                "shippingAddress": {
                                    "firstName": "Jane",
                                    "lastName": "Doe",
                                    "email": "janedoe@email.com",
                                    "company": "BigCommerce",
                                    "address1": "123 Main Street",
                                    "address2": "Apt 1",
                                    "city": "Austin",
                                    "stateOrProvinceCode": "TX",
                                    "countryCode": "US",
                                    "postalCode": "78751"
                                },
                                "lineItems": [{
                                    "itemId": "fb924c6c-10fb-456a-bccb-02d9fb426199",
                                    "quantity": 1
                                }]
                            },
                            {
                                "shippingAddress": {
                                    "firstName": "John",
                                    "lastName": "Doe",
                                    "email": "johnedoe@email.com",
                                    "company": "BigCommerce",
                                    "address1": "123 South Street",
                                    "address2": "Apt 5",
                                    "city": "Austin",
                                    "stateOrProvinceCode": "TX",
                                    "countryCode": "US",
                                    "postalCode": "78726"
                                },
                                "lineItems": [{
                                    "itemId": "98ceac68-cac9-49af-9050-95494f32474c",
                                    "quantity": 1
                                }]
                            }
                            ]

                        )
                          .then(data => console.log(JSON.stringify(data))) // JSON-string from `response.json()` call
                          .catch(error => console.error(error));

                        function postData(url = ``, checkoutId = ``, data = {},)
                        {
                            return fetch(url + checkoutId + `/consignments?include=consignments.availableShippingOptions`,   {
                                method: "POST", 
                                credentials: "same-origin",
                                headers: {
                                    "Content-Type": "application/json" ,
                                },
                                body: JSON.stringify(data), 
                            })
                            .then(response => response.json()); }
                      header:
                        title: Create Consignment
                      config:
                        mode: js
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          When a signed in customer proceeds to the create
                          consignment step with an incomplete shipping address,
                          the shipping address will auto-populate with the the
                          most recently used address from the customer's address
                          book.
                    - type: code
                      data: "{\n\t\"id\": \"1650fb51-172b-4cde-a220-90c6a8ef9293\",\n\t\"cart\": {\n\t\t\"id\": \"1650fb51-172b-4cde-a220-90c6a8ef9293\",\n\t\t\"customerId\": 0,\n\t\t\"email\": \"janedoe@email.com\",\n\t\t\"currency\": {\n\t\t\t\"name\": \"US Dollars\",\n\t\t\t\"code\": \"USD\",\n\t\t\t\"symbol\": \"$\",\n\t\t\t\"decimalPlaces\": 2\n\t\t},\n\t\t\"isTaxIncluded\": false,\n\t\t\"baseAmount\": 73.95,\n\t\t\"discountAmount\": 0,\n\t\t\"cartAmount\": 73.95,\n\t\t\"coupons\": [],\n\t\t\"discounts\": [{\n\t\t\t\"id\": \"7349b13a-1453-4050-a769-1a6ad1823369\",\n\t\t\t\"discountedAmount\": 0\n\t\t}, {\n\t\t\t\"id\": \"4a69cbdf-4320-4e1f-852b-0edc2a55f13a\",\n\t\t\t\"discountedAmount\": 0\n\t\t}],\n\t\t\"lineItems\": {\n\t\t\t\"physicalItems\": [{\n\t\t\t\t\"id\": \"7349b13a-1453-4050-a769-1a6ad1823369\",\n\t\t\t\t\"parentId\": null,\n\t\t\t\t\"variantId\": 362,\n\t\t\t\t\"productId\": 191,\n\t\t\t\t\"sku\": \"\",\n\t\t\t\t\"name\": \"Openhouse No. 3\",\n\t\t\t\t\"url\": \"https://{store_url)/all/openhouse-no-3/\",\n\t\t\t\t\"quantity\": 1,\n\t\t\t\t\"brand\": \"Openhouse Magazine\",\n\t\t\t\t\"isTaxable\": true,\n\t\t\t\t\"imageUrl\": \"https://cdn11.bigcommerce.com/s-{store_url)/products/191/images/475/openhousevol3_1024x1024__59692__16355.1534344544.330.500.jpg?c=2\",\n\t\t\t\t\"discounts\": [],\n\t\t\t\t\"discountAmount\": 0,\n\t\t\t\t\"couponAmount\": 0,\n\t\t\t\t\"listPrice\": 27.95,\n\t\t\t\t\"salePrice\": 27.95,\n\t\t\t\t\"extendedListPrice\": 27.95,\n\t\t\t\t\"extendedSalePrice\": 27.95,\n\t\t\t\t\"isShippingRequired\": true,\n\t\t\t\t\"giftWrapping\": null,\n\t\t\t\t\"addedByPromotion\": false\n\t\t\t}, {\n\t\t\t\t\"id\": \"4a69cbdf-4320-4e1f-852b-0edc2a55f13a\",\n\t\t\t\t\"parentId\": null,\n\t\t\t\t\"variantId\": 356,\n\t\t\t\t\"productId\": 185,\n\t\t\t\t\"sku\": \"\",\n\t\t\t\t\"name\": \"Utility Caddy\",\n\t\t\t\t\"url\": \"https://{store_url)/all/utility-caddy/\",\n\t\t\t\t\"quantity\": 1,\n\t\t\t\t\"brand\": \"OFS\",\n\t\t\t\t\"isTaxable\": true,\n\t\t\t\t\"imageUrl\": \"https://cdn11.bigcommerce.com/s-{store_url)/products/185/images/449/utilitybucket1_1024x1024__78563__75042.1534344535.330.500.jpg?c=2\",\n\t\t\t\t\"discounts\": [],\n\t\t\t\t\"discountAmount\": 0,\n\t\t\t\t\"couponAmount\": 0,\n\t\t\t\t\"listPrice\": 46,\n\t\t\t\t\"salePrice\": 46,\n\t\t\t\t\"extendedListPrice\": 46,\n\t\t\t\t\"extendedSalePrice\": 46,\n\t\t\t\t\"isShippingRequired\": true,\n\t\t\t\t\"giftWrapping\": null,\n\t\t\t\t\"addedByPromotion\": false\n\t\t\t}],\n\t\t\t\"digitalItems\": [],\n\t\t\t\"giftCertificates\": [],\n\t\t\t\"customItems\": []\n\t\t},\n\t\t\"createdTime\": \"2018-11-06T19:22:51+00:00\",\n\t\t\"updatedTime\": \"2018-11-06T19:53:35+00:00\"\n\t},\n\t\"billingAddress\": {\n\t\t\"id\": \"5be1eaa653e37\",\n\t\t\"firstName\": \"Jane\",\n\t\t\"lastName\": \"Doe\",\n\t\t\"email\": \"janedoe@email.com\",\n\t\t\"company\": \"BigCommerce\",\n\t\t\"address1\": \"123 Main Street\",\n\t\t\"address2\": \"Apt 1\",\n\t\t\"city\": \"Austin\",\n\t\t\"stateOrProvince\": \"\",\n\t\t\"stateOrProvinceCode\": \"\",\n\t\t\"country\": \"\",\n\t\t\"countryCode\": \"\",\n\t\t\"postalCode\": \"78751\",\n\t\t\"phone\": \"\",\n\t\t\"customFields\": []\n\t},\n\t\"consignments\": [{\n\t\t\"id\": \"5be1f13f00e2c\",\n\t\t\"shippingCost\": 0,\n\t\t\"handlingCost\": 0,\n\t\t\"couponDiscounts\": [],\n\t\t\"discounts\": [],\n\t\t\"lineItemIds\": [\"7349b13a-1453-4050-a769-1a6ad1823369\"],\n\t\t\"shippingAddress\": {\n\t\t\t\"firstName\": \"Jane\",\n\t\t\t\"lastName\": \"Doe\",\n\t\t\t\"email\": \"janedoe@email.com\",\n\t\t\t\"company\": \"BigCommerce\",\n\t\t\t\"address1\": \"123 Main Street\",\n\t\t\t\"address2\": \"Apt 1\",\n\t\t\t\"city\": \"Austin\",\n\t\t\t\"stateOrProvince\": \"Texas\",\n\t\t\t\"stateOrProvinceCode\": \"TX\",\n\t\t\t\"country\": \"United States\",\n\t\t\t\"countryCode\": \"US\",\n\t\t\t\"postalCode\": \"78751\",\n\t\t\t\"phone\": \"\",\n\t\t\t\"customFields\": []\n\t\t},\n\t\t\"availableShippingOptions\": [{\n\t\t\t\"id\": \"9363fd74-8508-4f8b-beb2-77ede2beaa1c\",\n\t\t\t\"type\": \"shipping_byweight\",\n\t\t\t\"description\": \"Ship by Weight\",\n\t\t\t\"imageUrl\": \"\",\n\t\t\t\"cost\": 8,\n\t\t\t\"transitTime\": \"\",\n\t\t\t\"isRecommended\": false\n\t\t}, {\n\t\t\t\"id\": \"20ae4fdf-747f-4ec5-86da-11ecd70ae03e\",\n\t\t\t\"type\": \"shipping_flatrate\",\n\t\t\t\"description\": \"Flat Rate\",\n\t\t\t\"imageUrl\": \"\",\n\t\t\t\"cost\": 12,\n\t\t\t\"transitTime\": \"\",\n\t\t\t\"isRecommended\": false\n\t\t}, {\n\t\t\t\"id\": \"b7783bb7-7695-467f-afd0-bf1c84fffdd2\",\n\t\t\t\"type\": \"shipping_upsready\",\n\t\t\t\"description\": \"UPS® (UPS Next Day Air®)\",\n\t\t\t\"imageUrl\": \"/img/shipping-providers/upsready_70x70.png\",\n\t\t\t\"cost\": 44.41,\n\t\t\t\"transitTime\": \"1 business day\",\n\t\t\t\"isRecommended\": false\n\t\t}]\n\t}, {\n\t\t\"id\": \"5be1f13f07bae\",\n\t\t\"shippingCost\": 0,\n\t\t\"handlingCost\": 0,\n\t\t\"couponDiscounts\": [],\n\t\t\"discounts\": [],\n\t\t\"lineItemIds\": [\"4a69cbdf-4320-4e1f-852b-0edc2a55f13a\"],\n\t\t\"shippingAddress\": {\n\t\t\t\"firstName\": \"John\",\n\t\t\t\"lastName\": \"Doe\",\n\t\t\t\"email\": \"johnedoe@email.com\",\n\t\t\t\"company\": \"BigCommerce\",\n\t\t\t\"address1\": \"123 South Street\",\n\t\t\t\"address2\": \"Apt 5\",\n\t\t\t\"city\": \"Austin\",\n\t\t\t\"stateOrProvince\": \"Texas\",\n\t\t\t\"stateOrProvinceCode\": \"TX\",\n\t\t\t\"country\": \"United States\",\n\t\t\t\"countryCode\": \"US\",\n\t\t\t\"postalCode\": \"78726\",\n\t\t\t\"phone\": \"\",\n\t\t\t\"customFields\": []\n\t\t},\n\t\t\"availableShippingOptions\": [{\n\t\t\t\"id\": \"620a7267-8e0d-4868-bf24-2b3983ccc746\",\n\t\t\t\"type\": \"shipping_byweight\",\n\t\t\t\"description\": \"Ship by Weight\",\n\t\t\t\"imageUrl\": \"\",\n\t\t\t\"cost\": 8,\n\t\t\t\"transitTime\": \"\",\n\t\t\t\"isRecommended\": false\n\t\t}, {\n\t\t\t\"id\": \"834a4114-df5e-453d-a476-8de2287d1dfa\",\n\t\t\t\"type\": \"shipping_flatrate\",\n\t\t\t\"description\": \"Flat Rate\",\n\t\t\t\"imageUrl\": \"\",\n\t\t\t\"cost\": 12,\n\t\t\t\"transitTime\": \"\",\n\t\t\t\"isRecommended\": false\n\t\t}, {\n\t\t\t\"id\": \"9f40c667-0ab5-46d4-b436-c678517c5415\",\n\t\t\t\"type\": \"shipping_upsready\",\n\t\t\t\"description\": \"UPS® (UPS Next Day Air®)\",\n\t\t\t\"imageUrl\": \"/img/shipping-providers/upsready_70x70.png\",\n\t\t\t\"cost\": 44.41,\n\t\t\t\"transitTime\": \"1 business day\",\n\t\t\t\"isRecommended\": false\n\t\t}]\n\t}],\n\t\"orderId\": null,\n\t\"shippingCostTotal\": 0,\n\t\"shippingCostBeforeDiscount\": 0,\n\t\"handlingCostTotal\": 0,\n\t\"taxTotal\": 5.92,\n\t\"coupons\": [],\n\t\"taxes\": [{\n\t\t\"name\": \"This is tax\",\n\t\t\"amount\": 5.92\n\t}],\n\t\"subtotal\": 73.95,\n\t\"grandTotal\": 79.87,\n\t\"giftCertificates\": [],\n\t\"createdTime\": \"2018-11-06T19:22:51+00:00\",\n\t\"updatedTime\": \"2018-11-06T19:53:35+00:00\",\n\t\"customerMessage\": \"\"\n}"
                      header:
                        title: Create Consignment Response
                      config:
                        mode: json
                        highlightRange:
                          - from: '96'
                            to: '141'
                    - type: text
                      data: >-
                        ### Update Consignment to Add a Shipping Option


                        So far we have created a cart, added a billing address
                        and shipping address, and assigned the lineItems to the
                        address they should be shipped. Now we are going to make
                        two PUT requests to assign a shipping option for each
                        address. Only one consignment can be updated at a time.
                        If you sent in the
                        `?include=consignments.availableShippingOptions` with
                        the previous request, then pick the appropriate
                        `shippingOptionId` for each consignment. 
                    - type: code
                      data: "\t\"consignments\": [{\n\t\t\"id\": \"5be1f13f00e2c\",\n\t\t\"shippingCost\": 0,\n\t\t\"handlingCost\": 0,\n\t\t\"couponDiscounts\": [],\n\t\t\"discounts\": [],\n\t\t\"lineItemIds\": [\"7349b13a-1453-4050-a769-1a6ad1823369\"],\n\t\t\"shippingAddress\": {\n\t\t\t\"firstName\": \"Jane\",\n\t\t\t\"lastName\": \"Doe\",\n\t\t\t\"email\": \"janedoe@email.com\",\n\t\t\t\"company\": \"BigCommerce\",\n\t\t\t\"address1\": \"123 Main Street\",\n\t\t\t\"address2\": \"Apt 1\",\n\t\t\t\"city\": \"Austin\",\n\t\t\t\"stateOrProvince\": \"Texas\",\n\t\t\t\"stateOrProvinceCode\": \"TX\",\n\t\t\t\"country\": \"United States\",\n\t\t\t\"countryCode\": \"US\",\n\t\t\t\"postalCode\": \"78751\",\n\t\t\t\"phone\": \"\",\n\t\t\t\"customFields\": []\n\t\t},\n\t\t\"availableShippingOptions\": [{\n\t\t\t\"id\": \"9363fd74-8508-4f8b-beb2-77ede2beaa1c\",\n\t\t\t\"type\": \"shipping_byweight\",\n\t\t\t\"description\": \"Ship by Weight\",\n\t\t\t\"imageUrl\": \"\",\n\t\t\t\"cost\": 8,\n\t\t\t\"transitTime\": \"\",\n\t\t\t\"isRecommended\": false\n\t\t}, {\n\t\t\t\"id\": \"20ae4fdf-747f-4ec5-86da-11ecd70ae03e\",\n\t\t\t\"type\": \"shipping_flatrate\",\n\t\t\t\"description\": \"Flat Rate\",\n\t\t\t\"imageUrl\": \"\",\n\t\t\t\"cost\": 12,\n\t\t\t\"transitTime\": \"\",\n\t\t\t\"isRecommended\": false\n\t\t}, {\n\t\t\t\"id\": \"b7783bb7-7695-467f-afd0-bf1c84fffdd2\",\n\t\t\t\"type\": \"shipping_upsready\",\n\t\t\t\"description\": \"UPS® (UPS Next Day Air®)\",\n\t\t\t\"imageUrl\": \"/img/shipping-providers/upsready_70x70.png\",\n\t\t\t\"cost\": 44.41,\n\t\t\t\"transitTime\": \"1 business day\",\n\t\t\t\"isRecommended\": false\n\t\t}]"
                      header:
                        title: Example Consignment with Available Shipping Options
                      config:
                        mode: json
                    - type: code
                      data: >-
                        postData(`/api/storefront/checkouts/`,
                        `1650fb51-172b-4cde-a220-90c6a8ef9293`,
                        `5be1f13f07bae`,{"shippingOptionId":
                        "9f40c667-0ab5-46d4-b436-c678517c5415"})
                          .then(data => console.log(JSON.stringify(data))) 
                          .catch(error => console.error(error));

                        function postData(url = ``, checkoutId = ``,
                        consignmentId = ``, data = {},) {
                            return fetch(url + checkoutId + `/consignments/` + consignmentId,   {
                                method: "PUT", 
                                credentials: "same-origin",
                                headers: {
                                    "Content-Type": "application/json;",
                                },
                                body: JSON.stringify(data), 
                            })
                            .then(response => response.json()); 
                        }
                      header:
                        title: Update Consignment with Available Shipping Options
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Troubleshooting


                        * Did you get a CORs error response? 

                        Check to make sure you have the right credentials set
                        up. Most requests will use same-origin or include. 


                        * Did you get a 404?

                        Make sure you have at least one item in your cart.
                        Deleting all items removes the cart and returns a 404 in
                        the browser console.
                      header:
                        anchor: working-sf-apis_troubleshooting
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Related Endpoints

                        - [Storefront
                        Cart](/api-reference/cart-checkout/storefront-cart-api)

                        - [Storefront
                        Checkout](/api-reference/cart-checkout/storefront-checkout-api)
                      header:
                        anchor: working-sf-apis_realated-endpoints
              - title: Checkout SDK
                route:
                  path: /checkout-sdk
                data:
                  blocks:
                    - type: html
                      data: "<h1> Checkout SDK </h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#checkout-sdk_what-can-i-do\"> What Can I Do with the SDK?</a></li>\n\t\t<li><a href=\"#checkout-sdk_where-to-get\">Where Can I Get the SDK?\n</a></li>\n    <li><a href=\"#checkout-sdk_support-customization\">Support and Customization\n</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        The Checkout JS SDK is a wrapper for the BigCommerce
                        Storefront Checkout API.


                        It allows a developer to create a custom checkout
                        experience to move a customer through the checkout
                        process.

                        The SDK handles all the ‘heavy-lifting’ such as customer
                        login, getting shipping quotes and submitting payment
                        for an order.

                        With the Checkout JS SDK, you can build a [custom
                        checkout
                        presentation](https://github.com/bigcommerce/checkout-sdk-js-example)
                        layer in popular frontend frameworks such as React.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## What Can I Do with the SDK?


                        -   It can initialize payment and shipping providers
                        that require client-side setup through a common
                        interface. Below are some examples of these providers:
                            
                            -   PayPal Express
                            -   Braintree
                            -   Stripe 
                            -   Square
                            -   Amazon
                            -   Klarna
                          
                        -   It provides a JavaScript interface for interacting
                        with the web API.
                            -   Fetch and submit resources:
                                -   Cart
                                -   Order
                                -   Customer
                            -   Fetch available options:
                                -   Shipping addresses
                                -   Shipping countries
                                -   Shipping states
                                -   Billing addresses
                                -   Billing countries
                                -   Billing states
                                -   Shipping methods
                                -   Payment methods
                         
                        The Checkout JS SDK allows you to present the checkout
                        process to the shopper in any way you like, and, through
                        frontend technologies and external web services, augment
                        the checkout with extra information. 


                        However, the Checkout JS SDK does not allow you to
                        change the underpinnings of the checkout - you must
                        still conform to the model of the Checkout API
                        underpinning the SDK to complete a Checkout and create
                        an Order in BigCommerce. 

                        The SDK does not allow you to implement custom payment,
                        shipping, or tax calculation providers into the checkout
                        - instead, the configured providers for these services
                        on a given store are expressed via our Checkout API.
                      header:
                        anchor: checkout-sdk_what-can-i-do
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Where Can I Get the SDK?

                        The Checkout JS SDK and associated documentation is
                        available from the [BigCommerce SDK Repo.](
                        https://github.com/bigcommerce/checkout-sdk-js)
                      header:
                        anchor: checkout-sdk_where-to-get
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Support and Customization

                        - Enterprise clients can reach out to their account
                        manager to review services and resources available.

                        - For more on our design policy please visit [Design
                        Support](https://forum.bigcommerce.com/s/article/BigCommerce-Design-Policy#support).
                      header:
                        anchor: checkout-sdk_support-customization
              - title: Add to Cart URLs
                route:
                  path: /add-to-cart-url
                data:
                  blocks:
                    - type: html
                      data: "<h1>Add to Cart URLs</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#add-cart-url_select-specific-sku\">Select Specific SKU (Product/Variant) on Product Detail Page</a></li>\n        <li><a href=\"#add-cart-url_add-specific-sku-cart\">Add Specific SKU to Cart</a></li>\n        <li><a href=\"#add-cart-url_add-sku-checkout-go-to-cart\">Add Specific SKU to Cart and Go Directly to Checkout</a></li>\n    \t<li><a href=\"#add-cart-url_add-specific-sku-checkout-source\">Add Specific SKU, Go to Checkout, and Include Source</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        Your apps can use a product's or variant's <a
                        href="https://support.bigcommerce.com/s/article/Options-SKUs-Rules"
                        target="_blank">SKU</a> to create custom product URLs in
                        order to perform specific actions, like:


                        * Pre-select a specific SKU’s product option values when
                        loading a product detail page.

                        * Add a specific SKU to the cart.

                        * Add a specific SKU to the cart and go directly to
                        checkout.

                        * Add a specific SKU to the cart, go directly to
                        checkout, and include a source parameter for analytics
                        and conversion tracking.
                    - type: text
                      data: '---'
                    - type: callout
                      data:
                        title: 'Limitation: One Item per URL'
                        body: >-
                          Each of the custom links described here can add only a
                          single item (quantity 1) to the cart at a time.
                    - type: text
                      data: >-
                        ## Select Specific SKU (Product/Variant) on Product
                        Detail Page


                        To link to a specific product variant, append
                        `?sku=INSERT-SKU-HERE` to the product URL, as shown
                        below. This will link to the product page, with the
                        variant's options already selected.


                        ### Structure:

                        `site.com/sample-test-product-w-options/?sku=INSERT-SKU-HERE`



                        ### Example:

                        `myawesomestore.com/shirt/?sku=SHIRT-SM-RED`
                      header:
                        anchor: add-cart-url_select-specific-sku
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Add Specific SKU to Cart


                        To automatically add a product or variant to a shopper's
                        cart and take them directly to the cart page, append   

                        `/cart.php?action=add&sku=INSERT-SKU-HERE` to the
                        store's domain.


                        ### Structure:

                        `/site.com/cart.php?action=add&sku=INSERT-SKU-HERE`


                        ### Example:

                        `myawesomestore.com/cart.php?action=add&sku=SHIRT-SM-RED`
                      header:
                        anchor: add-specific-sku-cart
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Add Specific SKU to Cart and Go Directly to Checkout

                        To automatically add a product or variant to a shopper's
                        cart and forward them directly to checkout, append   

                        `/cart.php?action=buy&sku=INSERT-SKU-HERE` to the
                        store's domain.


                        ### Structure:

                        `/site.com/cart.php?action=buy&sku=INSERT-SKU-HERE`


                        ### Example:

                        `myawesomestore.com/cart.php?action=buy&sku=SHIRT-SM-RED`
                      header:
                        anchor: add-cart-url_add-sku-checkout-go-to-cart
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Add Specific SKU, Go to Checkout, and Include Source


                        To automatically add a product or variant to a shopper's
                        cart, forward them to checkout, and also include a
                        source parameter for analytics/conversion tracking,
                        append
                        `cart.php?action=buy&sku=INSERT-SKU-HERE&source=SOURCE-HERE`
                        to the store's domain. (The&#160;source parameter can be
                        any string.)


                        ### Structure:

                        `site.com/cart.php?action=buy&sku=INSERT-SKU-HERE&source=SOURCE-HERE`


                        ### Example:

                        `myawesomestore.com/cart.php?action=buy&sku=SHIRT-SM-RED&source=JULY-EMAIL-NEWSLETTER`
                      header:
                        anchor: add-cart-url_add-specific-sku-checkout-source
        - title: Orders
          route:
            path: /orders
          data:
            children:
              - title: Overview
                route:
                  path: /orders-overview
                data:
                  blocks:
                    - type: html
                      data: "<h1>Orders</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    \t\t<li><a href=\"#order-overview_what-is-a-order\">What is a Order?</a></li>\n    \t\t<li><a href=\"#order-overview_available-endpoints\">Available Endpoints</a></li>\n        <li><a href=\"#order-overview_storefront-orders\">Storefront Orders API</a></li>\n        <li><a href=\"#order-overview_server-server-checkout\">Server to Server Checkout Orders</a></li>\n        <li><a href=\"#order-overview_v2-orders\">Orders API</a></li>\n    \t\t<li><a href=\"#order-overview_transactions\">Order Transactions</a></li>\n        <li><a href=\"#order-overview_oauth-scopes\">OAuth Scopes</a></li>\n        <li><a href=\"#order-overview_available-webhooks\">Webhooks Available</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## What is an Order?

                        An order is a collection of items, along with customer
                        and shipping information, that has been finalized with a
                        payment or attempted payment. 


                        Orders can contain both digital or physical products.
                        Digital items are delivered via email and do not require
                        a shipping address, whereas physical items require a
                        shipping address and a delivery method. 


                        BigCommerce offers two possible workflows for creating
                        orders via the API: the Server-to-Server Checkout API
                        or  the Orders API.

                        * The Server-to-Server Checkout API represents an
                        extension of the Server-to-Server Cart API and can be
                        used to complete a purchase from product selection to
                        conversion.

                        * The Orders API is used to retrieve or update existing
                        orders or to push orders from a third party, like a POS,
                        to BigCommerce.
                      header:
                        anchor: order-overview_what-is-a-order
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Available Endpoints


                        | Name | Description |

                        | -- | -- |

                        | [Storefront
                        Orders](/api-reference/orders/storefront-orders-api) |
                        Retrieve order information from the Order Confirmation
                        page using JavaScript |

                        | [Server to Server
                        Checkout](/api-reference/cart-checkout/server-server-checkout-api/checkout/createanorder)
                        | Create an order from an existing checkout |

                        | [Orders API](/api-reference/orders/orders-api) |
                        Create and manage orders. Can manage orders created via
                        API or the Control Panel |

                        | [Order
                        Transactions](/api-reference/orders/orders-transactions-api)
                        | Get transaction information for existing orders. Read
                        Only Endpoint |
                      header:
                        anchor: order-overview_available-endpoints
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ##  Storefront Orders API 

                        The Storefront Orders API can be used to return
                        information about a just-placed order on the order
                        confirmation page. You can interact with the Storefront
                        Orders API using an app or a browser API. 


                        For an example using the Fetch API to log order
                        information to the console, see [Storefront Orders
                        API](http://).


                        ### When to Use:

                        * Scrape order information

                        * Send order data to an analytics app
                      header:
                        anchor: order-overview_storefront-orders
                    - type: code
                      data: >-
                        <script>

                        console.log("Log Orders")

                        fetch('/api/storefront/order/{{checkout.order.id}}',
                        {credentials: 'include'})

                        .then(function(response) {

                        return response.json();

                        })

                        .then(function(myJson) {

                        console.log(myJson);

                        });

                        </script>
                      header:
                        title: Log Orders to Console
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Server-to-Server Checkout API


                        The Server-to-Server Checkout API allows you to create a
                        checkout programmatically and then convert it to an
                        order. From there, the order can be managed in the
                        Control Panel or using the V2 Orders API. [See
                        Server-to-Server Checkout](http://) for more.


                        ### When to Use:

                        * Create an order from an existing checkout
                      header:
                        anchor: order-overview_server-server-checkout
                    - type: text
                      data: '---'
                    - type: text
                      data: >-

                        ## Orders API

                        The Orders API can be used to create an order without
                        first creating a cart and checkout. It also allows you
                        to manage an order's billing address, products, coupons,
                        and taxes. See [Orders
                        API](/api-reference/orders/orders-api) for a complete
                        list of methods.


                        ### When to Use: 

                        * Create an order and bypass creating a cart and
                        checkout

                        * Make changes to existing orders

                        * Export or import order information to a third-party
                        system
                      header:
                        anchor: order-overview_v2-orders
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Order Transactions

                        The Order Transactions API is a read-only endpoint that
                        returns transaction or payment data about an order. The
                        data returned does not include payment tokens for a
                        third party such as Braintree. 


                        ### When to Use:

                        * View transaction information about an Order. 
                      header:
                        anchor: order-overview_transactions
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## OAuth Scopes

                        - Orders

                        - Carts

                        - Checkouts


                        For a more details and a full list of available scopes,
                        see [Oauth
                        Scopes](/api-docs/getting-started/basics/authentication#authentication_oauth-scopes).
                      header:
                        anchor: order-oauth-scopes
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Webhooks Available

                        -
                        [Orders](/api-docs/getting-started/webhooks/webhook-events#webhook-events_orders)
                      header:
                        anchor: order-webhooks-available
              - title: Orders API
                route:
                  path: /orders-api-overview
                data:
                  blocks:
                    - type: html
                      data: "<h1>Orders API Overview</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    \t\t<li><a href=\"#orders-api-overview_create-order\">Create an Order</a></li>\n            <ul>\n                <li><a href=\"#orders-api-overview_add-produt-options\">Add an Existing Product with Options</a></li>\n                <li><a href=\"#orders-api-overview_add-custom-product\">Create a Custom Product</a></li>\n                <li><a href=\"#orders-api-overview_order-products\">Order Products</a></li>\n                <li><a href=\"#orders-api-overview_add-billing-address\">Add a Billing Address</a></li>\n                <li><a href=\"#orders-api-overview_add-shipping-address\">Add a Shipping Address</a></li>\n                <li><a href=\"#orders-api-overview_other-recommended-fields\">Other Recommended Fields</a></li>\n                <li><a href=\"#orders-api-overview_create-order-example\">Create Order Example</a></li>\n            </ul>\n            <li><a href=\"#orders-api-guide_order-response\">Order Response</a></li>\n            <li><a href=\"#orders-api-overview_shipping-order\">Shipping an Order</a></li>\n            <ul>\n                <li><a href=\"#orders-api-overview_create-order-shipment\">Create an Order Shipment</a></li>\n                <li><a href=\"#orders-api-overview_multiple-locations\">Multiple Locations</a></li>\n                <li><a href=\"#orders-api-overview_custom-quotes\">Custom Quotes</a></li>\n                <li><a href=\"#orders-api-overview_shipping-carrier\">Shipping Carrier</a></li>\n            </ul>\n            <li><a href=\"#orders-api-overview_taxes\">Taxes</a></li>\n                <ul><li><a href=\"#orders-api-overview_taxes_avalara\">Avalara</a></li></ul>\n            <li><a href=\"#orders-api-overview_calculation_totals\">Calculation of Totals</a></li>\n            <li><a href=\"#orders-api-overview_order_status\">Order Status</a></li>\n            <ul><li><a href=\"#orders-api-overview_custom-order-status\">Custom Order Status</a></li></ul>\n            <li><a href=\"#orders-api-overview_faq\">FAQ</a></li>\n            \n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Introduction


                        The Orders API is used when an order is being created
                        manually. If you are using the Server to Server Checkout
                        an Order can be created using the orders endpoint. The
                        order can then be updated if needed.


                        A sample order workflow might include:

                        * Creating the order for either an existing customer or
                        guest

                        * Taking payment using either the Control Panel or third
                        party payment solutions

                        * Creating a shipment for the order to generate an order
                        confirmation email and mark it as shipped



                        ### Prerequisites:

                        **BigCommerce Store**  

                        An active BigCommerce store with a sellable
                        [product](/api-reference/catalog/catalog-api/products/createproduct)


                        **Scopes**  

                        The following
                        [OAuth](/api-docs/getting-started/authentication#authentication_oauth-scopes)
                        scopes are required:

                        * Modify Orders
                      header:
                        anchor: orders-api-overview_introduction
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create an Order


                        We will go over adding an existing product, adding a
                        custom product, adding a billing address and adding a
                        shipping address. At the end of this section, you will
                        be able to see the full sample request to create an
                        order.


                        Want to skip ahead and see the [full
                        request](/api-docs/orders/orders-api-overview#orders-api-overview_create-order-example)?


                        At a minimum, an order needs products and a billing
                        address. If either of these fields are left off the
                        order is rejected.


                        A order can be created with either an existing Product
                        or using a Custom Product.
                      header:
                        anchor: orders-api-overview_create-order
                    - type: text
                      data: "### Add an Existing Product with Options\n\n**Required Fields:**\n- product_id\n- product_options (required if adding a product with variants)\n\t- product_option > id\n\t- product_option > value\n- quantity\n- price_inc_tax (optional)\n- price_ex_tax (optional)\n\nTo get the `product_option > id` and `product_option > value`, make a request to [Get Variants](/api-reference/catalog/catalog-api/product-variants/getvariantsbyproductid). Variants will return the `option_value > id` and `option_values > option_id`.\n\nMake note of the `option_values > id` and `option_values > option_id`. These will be passed into the products array."
                      header:
                        anchor: orders-api-overview_add-produt-options
                    - type: callout
                      data:
                        body: >-
                          If price_ex_tax or price_inc_tax is set, then they
                          both need to bet specified. Otherwise the order total
                          will not calculate correctly.
                    - type: code
                      data: |-
                        {
                            "data": [
                                {
                                    "id": 421,
                                    "product_id": 184,
                                    "sku": "RED",
                                    "sku_id": 383,
                                    "price": null,
                                    "calculated_price": 249,
                                    "sale_price": null,
                                    "retail_price": null,
                                    "map_price": null,
                                    "weight": null,
                                    "calculated_weight": 15,
                                    "width": null,
                                    "height": null,
                                    "depth": null,
                                    "is_free_shipping": false,
                                    "fixed_cost_shipping_price": null,
                                    "purchasing_disabled": false,
                                    "purchasing_disabled_message": "",
                                    "image_url": "",
                                    "cost_price": 0,
                                    "upc": "",
                                    "mpn": "",
                                    "gtin": "",
                                    "inventory_level": 0,
                                    "inventory_warning_level": 0,
                                    "bin_picking_number": "",
                                    "option_values": [
                                        {
                                            "id": 180,
                                            "label": "Red",
                                            "option_id": 200,
                                            "option_display_name": "Color"
                                        },
                                        {
                                            "id": 192,
                                            "label": "Small",
                                            "option_id": 230,
                                            "option_display_name": "T-Shirt Size"
                                        }
                                    ]
                                }
                        ...
                      header:
                        title: Example /GET Variants Response
                        subtitle: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/variants
                      config:
                        mode: json
                        highlightRange:
                          - from: '30'
                            to: '42'
                    - type: text
                      data: >-
                        Next, create the products array which includes the
                        custom product and the existing product with product
                        options. Using the `option_id` and `option_value > id`
                        from the previous request we can build the products
                        array. 


                        `product_options` > `id` = `option_values` > `option_id`


                        `product_options` > `value` = `option_values` > `id`


                        The `product_options` > `value` must be passed in as a
                        string.
                    - type: code
                      data: |-
                        "products":[
                                  {
                                      "name": "BigCommerce Poster",
                                      "quantity": 1,
                                      "price_inc_tax": 10.98,
                                      "price_ex_tax": 10.00
                                  },
                                  {
                                      "product_id": 184,
                                        "product_options":[
                                            {
                                                "id": 200,
                                                "value": "180"
                                            },
                                            {
                                                "id": 230,
                                                "value": "192"
                                            }
                                        ]

                                  }
                              ]
                      header:
                        title: Example Products Array
                        subtitle: This is an abbreviated request
                      config:
                        mode: json
                    - type: text
                      data: |-
                        ### Create a Custom Product

                        **Required Fields:**
                        * name – Product Name
                        * quantity – Number of items
                        * price_inc_tax – Price including tax
                        * price_ex_tax – Price excluding tax
                        * sku (optional)
                      header:
                        anchor: orders-api-overview_add-custom-product
                    - type: code
                      data: |2-
                          "products": [
                            {
                              "name": "BigCommerce Poster",
                              "quantity": 1,
                              "price_inc_tax": 10.98,
                              "price_ex_tax": 10
                            },

                             {
                              "name": "BigCommerce Coffee Mug",
                              "quantity": 1,
                              "price_inc_tax": 50.00,
                              "price_ex_tax": 45.00
                            }
                          ]
                      header:
                        subtitle: This is an abbreviated request
                        title: Custom Order Products Array
                      config:
                        mode: json
                    - type: callout
                      data:
                        body: >-
                          Creating a custom product does not add it to the
                          catalog. Only to the current order.
                    - type: text
                      data: >-
                        ### Order Products


                        **Pricing**


                        If price is not specified, it will automatically pick up
                        the price from the store’s product catalog. However, you
                        can override this via `price_inc_tax` and
                        `price_ex_tax`.


                        If the `price_inc_tax` or `price_ex_tax` specified then
                        any variant pricing is ignored and the order products
                        base_price is updated according to the store settings.
                        For example, if the store is set to display prices with
                        tax included, then the `base_price` will be
                        `price_inc_tax`.



                        **Stock**


                        For products that are configured to track stock, the
                        quantity specified on the order will reduce the stock on
                        hand. When there is not enough inventory to fulfill the
                        order, the order will be rejected with an “out of stock”
                        error code.


                        **Min and Max Quantities**


                        For products that have min and max quantities specified
                        in their settings, the API will honor these, and will
                        reject orders appropriately.


                        **Options**


                        For products where product options are required, the API
                        will validate these requirements to ensure that the
                        product options are specified.
                      header:
                        anchor: orders-api-overview_order-products
                    - type: text
                      data: |-
                        ### Add a Billing Address

                        **Required Fields:**
                        * first_name 
                        * last_name 
                        * street_1 
                        * city 
                        * state 
                        * zip 
                        * country 
                        * country_iso2 
                        * email
                      header:
                        anchor: orders-api-overview_add-billing-address
                    - type: code
                      data: |2-
                            "billing_address": {
                                "first_name": "Jane",
                                "last_name": "Doe",
                                "company": "",
                                "street_1": "123 Main Street",
                                "street_2": "",
                                "city": "Austin",
                                "state": "Texas",
                                "zip": "78751",
                                "country": "United States",
                                "country_iso2": "US",
                                "email": "janedoe@email.com"
                            }
                      header:
                        title: Add a Billing Address
                        subtitle: This is an abbreviated request
                      config:
                        mode: json
                    - type: callout
                      data:
                        body: >-
                          If a shipping address is not provided, it defaults to
                          the billing address.
                    - type: text
                      data: >-
                        ### Add a Shipping Address - optional


                        **Required Fields:**

                        * first_name 

                        * last_name 

                        * street_1 

                        * city 

                        * state 

                        * zip 

                        * country 

                        * country_iso2 

                        * email


                        The shipping address is input as an array object since
                        more than one shipping address can be added at a time.
                        Adding multiple shipping addresses allows for an order
                        to ship to multiple locations.
                      header:
                        anchor: orders-api-overview_add-shipping-address
                    - type: code
                      data: |2-
                            "shipping_addresses": [
                                {
                                    "first_name": "Trishy",
                                    "last_name": "Test",
                                    "company": "Acme Pty Ltd",
                                    "street_1": "666 Sussex St",
                                    "street_2": "",
                                    "city": "Anywhere",
                                    "state": "Some State",
                                    "zip": "12345",
                                    "country": "United States",
                                    "country_iso2": "US",
                                    "phone": "",
                                    "email": "trish@testing.com"
                                }
                      header:
                        title: Add a shipping address
                        subtitle: This is an abbreviated request
                      config:
                        mode: json
                    - type: text
                      data: >-
                        ### Other Recommended Fields

                        Below are fields which are recommended but not required
                        when creating an order.


                        **Customer ID**


                        The customer_id will determine the price the shopper
                        pays for an item. Customer ID’s are tied to customer
                        group discounts and Price Lists. Set the `customer_id`
                        to 0 when creating a guest order.


                        **Shipping Address**


                        If a shipping address is not provided, it will default
                        to the billing addresses provided.


                        **Status**


                        If a status is not provided, it defaults to a status of
                        1 or Pending. 


                        **Discounts**


                        Manual discounts are supported. To add a manual discount
                        either overwrite the product price or use
                        `discount_amount`. This accepts a fixed dollar amount.
                      header:
                        anchor: orders-api-overview_other-recommended-fields
                    - type: text
                      data: >-
                        ### Create Order Example


                        After the products, billing and shipping address are
                        added, an order can be created.
                      header:
                        anchor: orders-api-overview_create-order-example
                    - type: code
                      data: |-
                        {
                          "status_id": 0,
                          "customer_id": 11,
                          "billing_address": {
                            "first_name": "Jane",
                            "last_name": "Doe",
                            "street_1": "123 Main Street",
                            "city": "Austin",
                            "state": "Texas",
                            "zip": "78751",
                            "country": "United States",
                            "country_iso2": "US",
                            "email": "janedoe@email.com"
                          },
                          "shipping_addresses": [
                            {
                              "first_name": "Trish",
                              "last_name": "Test",
                              "company": "Acme Pty Ltd",
                              "street_1": "666 Sussex St",
                              "city": "Austin",
                              "state": "Texas",
                              "zip": "78751",
                              "country": "United States",
                              "country_iso2": "US",
                              "email": "elsie@example.com"
                            }
                          ],
                          "products": [
                            {
                              "name": "BigCommerce Poster",
                              "quantity": 1,
                              "price_inc_tax": 10.98,
                              "price_ex_tax": 10
                            },
                             {
                              "name": "BigCommerce Coffee Mug",
                              "quantity": 1,
                              "price_inc_tax": 50.00,
                              "price_ex_tax": 45.00
                            },
                                  {
                                      "product_id": 184,
                                        "product_options":[
                                            {
                                                "id": 200,
                                                "value": "180"
                                            },
                                            {
                                                "id": 230,
                                                "value": "192"
                                            }
                                        ]

                                  }
                          ]
                        }
                      header:
                        title: Create an Order Request
                      config:
                        mode: json
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Order Response


                        The response will have abbreviated order contents with
                        sub-resources available to get the full order
                        information. The order is automatically set to a status
                        of 1 or Pending. It also returns an id which is the
                        order id. 


                        In the example below, the order ID is 193.

                        * The order products sub-resource will list the products
                        added.

                        * The shipping_addresses sub-resource will have the
                        shipping addresses.

                        * The coupons sub-resource will have any coupons added
                        to the order.
                      header:
                        anchor: orders-api-guide_order-response
                    - type: callout
                      data:
                        body: >-
                          Coupons can not be added to an order via API. Use the
                          `discount_amount` instead.
                    - type: code
                      data: |-
                        {
                          "id": 193,
                          "customer_id": 0,
                          "date_created": "Fri, 12 Oct 2018 19:06:23 +0000",
                          "date_modified": "Fri, 12 Oct 2018 19:06:23 +0000",
                          "date_shipped": "",
                          "status_id": 1,
                          "status": "Pending",
                          "subtotal_ex_tax": "10.0000",
                          "subtotal_inc_tax": "10.9800",
                          "subtotal_tax": "0.9800",
                          "base_shipping_cost": "0.0000",
                          "shipping_cost_ex_tax": "0.0000",
                          "shipping_cost_inc_tax": "0.0000",
                          "shipping_cost_tax": "0.0000",
                          "shipping_cost_tax_class_id": 0,
                          "base_handling_cost": "0.0000",
                          "handling_cost_ex_tax": "0.0000",
                          "handling_cost_inc_tax": "0.0000",
                          "handling_cost_tax": "0.0000",
                          "handling_cost_tax_class_id": 0,
                          "base_wrapping_cost": "0.0000",
                          "wrapping_cost_ex_tax": "0.0000",
                          "wrapping_cost_inc_tax": "0.0000",
                          "wrapping_cost_tax": "0.0000",
                          "wrapping_cost_tax_class_id": 0,
                          "total_ex_tax": "10.0000",
                          "total_inc_tax": "10.9800",
                          "total_tax": "0.9800",
                          "items_total": 1,
                          "items_shipped": 0,
                          "payment_method": "Manual",
                          "payment_provider_id": null,
                          "payment_status": "",
                          "refunded_amount": "0.0000",
                          "order_is_digital": false,
                          "store_credit_amount": "0.0000",
                          "gift_certificate_amount": "0.0000",
                          "ip_address": "",
                          "geoip_country": "",
                          "geoip_country_iso2": "",
                          "currency_id": 1,
                          "currency_code": "USD",
                          "currency_exchange_rate": "1.0000000000",
                          "default_currency_id": 1,
                          "default_currency_code": "USD",
                          "staff_notes": null,
                          "customer_message": null,
                          "discount_amount": "0.0000",
                          "coupon_discount": "0.0000",
                          "shipping_address_count": 1,
                          "is_deleted": false,
                          "ebay_order_id": "0",
                          "cart_id": null,
                          "billing_address": {
                            "first_name": "Jane",
                            "last_name": "Doe",
                            "company": "",
                            "street_1": "123 Main Street",
                            "street_2": "",
                            "city": "Austin",
                            "state": "Texas",
                            "zip": "78751",
                            "country": "United States",
                            "country_iso2": "US",
                            "phone": "",
                            "email": "janedoe@email.com",
                            "form_fields": []
                          },
                          "is_email_opt_in": false,
                          "credit_card_type": null,
                          "order_source": "external",
                          "external_source": null,
                          "products": {
                            "url": "https://api.bigcommerce.com/stores/{store_hash}/v2/orders/193/products",
                            "resource": "/orders/193/products"
                          },
                          "shipping_addresses": {
                            "url": "https://api.bigcommerce.com/stores/{store_hash}/v2/orders/193/shippingaddresses",
                            "resource": "/orders/193/shippingaddresses"
                          },
                          "coupons": {
                            "url": "https://api.bigcommerce.com/stores/{store_hash}/v2/orders/193/coupons",
                            "resource": "/orders/193/coupons"
                          },
                          "external_id": null,
                          "external_merchant_id": null,
                          "custom_status": "Pending"
                        }
                      header:
                        title: Create Order Response
                      config:
                        mode: json
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Shipping an Order

                        We will go over creating a shipment for an order,
                        shipping quotes, shipping carriers and shipping to
                        multiple locations. 
                      header:
                        anchor: orders-api-overview_shipping-order
                    - type: text
                      data: >-
                        ### Create an Order Shipment


                        **Required Fields:**

                        * order_address_id

                        * shipping_provider

                        * items


                        Once an Order has products, a billing address and at
                        least one shipping address a order shipment can be
                        created. Order shipments are a way to mark an order as
                        shipped with the shipping information. 


                        To get the `order_address_id`  use the ID returned in
                        [Order Shipping
                        Address](https://developer.bigcommerce.com/api-reference/orders/orders-api/order-shipping-addresses/getordersorderidshippingaddressesid).


                        The items array requires the product quantity and
                        `order_product_id`. The `order_product_id` is the ID
                        returned from [Order
                        Products](https://developer.bigcommerce.com/api-reference/orders/orders-api/order-products/getordersorderidproducts).


                        There does not need to be a shipping provider. If the
                        shipping provider is not sent in at all, it will default
                        to custom and a tracking link is not generated. To have
                        the tracking link generated without a shipping provider,
                        provide an empty string. To add a shipping provider, see
                        the available options on [Order
                        Shipment](/api-reference/orders/orders-api/models/ordershipment). 


                        Once the order shipment is created, it will
                        automatically send out an email to the billing address
                        with the shipment confirmation. To stop this behavior
                        adjust the [Order
                        Notification](https://support.bigcommerce.com/s/article/Customer-Order-Notifications#enable)
                        settings in the Control Panel. 


                        If the order shipment is deleted, the status of the
                        shipment is still in shipped. The status will need to be
                        [manually
                        changed](/api-reference/orders/orders-api/order-status/getorderstatuses).
                      header:
                        anchor: orders-api-overview_create-order-shipment
                    - type: code
                      data: |-
                        {
                          "tracking_number": "EJ958083578UK",
                          "comments": "Janes Order",
                          "order_address_id": "128",
                          "shipping_provider": "",
                          "items": [
                                {
                                    "order_product_id": 194,
                                    "product_id": 0,
                                    "quantity": 1
                                },
                                {
                                    "order_product_id": 195,
                                    "product_id": 0,
                                    "quantity": 1
                                }
                          ]
                        }
                      header:
                        title: Create Order Shipment
                      config:
                        mode: json
                    - type: code
                      data: |
                        {
                            "id": 11,
                            "order_id": 228,
                            "customer_id": 11,
                            "order_address_id": 131,
                            "date_created": "Wed, 13 Mar 2019 16:35:37 +0000",
                            "tracking_number": "EJ958083578US",
                            "merchant_shipping_cost": "0.0000",
                            "shipping_method": "None",
                            "comments": "Ready to go...",
                            "shipping_provider": "",
                            "tracking_carrier": "",
                            "billing_address": {
                                "first_name": "Jane",
                                "last_name": "Doe",
                                "company": "",
                                "street_1": "123 Main Street",
                                "street_2": "",
                                "city": "Austin",
                                "state": "Texas",
                                "zip": "78751",
                                "country": "United States",
                                "country_iso2": "US",
                                "phone": "",
                                "email": "janedoe@email.com"
                            },
                            "shipping_address": {
                                "first_name": "Trishy",
                                "last_name": "Test",
                                "company": "Acme Pty Ltd",
                                "street_1": "666 Sussex St",
                                "street_2": "",
                                "city": "Anywhere",
                                "state": "Some State",
                                "zip": "12345",
                                "country": "United States",
                                "country_iso2": "US",
                                "phone": "",
                                "email": "elsie@example.com"
                            },
                            "items": [
                                {
                                    "order_product_id": 194,
                                    "product_id": 0,
                                    "quantity": 1
                                },
                                {
                                    "order_product_id": 195,
                                    "product_id": 0,
                                    "quantity": 1
                                }
                            ]
                        }
                      header:
                        title: Order Shipment Response
                      config:
                        mode: json
                    - type: text
                      data: >-
                        ### Multiple Locations


                        Orders can have multiple shipment locations. There needs
                        to be more than one product or quantity of a product and
                        more than one shipping addresses. A shipping address can
                        be added either during the create or using an update.


                        To ship to multiple locations create an order shipment
                        for each location and items. Only one POST request per
                        shipment.
                      header:
                        anchor: orders-api-overview_multiple-locations
                    - type: callout
                      data:
                        body: >-
                          When adding shipping addresses during an order PUT or
                          POST, the API will allow you to add more than is
                          necessary.
                    - type: text
                      data: >-
                        ### Custom Quotes

                        An order can be created with a `shipping_cost_ex_tax`
                        and `shipping_cost_inc_tax`. This is a way to add a
                        custom shipping amount to an order. This can be added
                        when creating or updating an order. 
                      header:
                        anchor: orders-api-overview_custom-quotes
                    - type: callout
                      data:
                        body: >-
                          Both `shipping_cost_ex_tax` and
                          `shipping_cost_inc_tax` must be included otherwise,
                          the final order amount will not be calculated
                          correctly. 
                    - type: text
                      data: >-
                        ### Shipping Carrier

                        Generating a quote through a shipping carrier is
                        currently not supported. A shipping carrier can be
                        specified when creating an Order Shipment. The quote can
                        be generate elsewhere, then update the
                        `shipping_cost_ex_tax` and `shipping_cost_inc_tax` for
                        the order total to be correct.. 
                      header:
                        anchor: orders-api-overview_shipping-carrier
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Taxes

                        Tax will be calculated based on the tax rules specified
                        in the store, except in the case of automatic taxes.
                        However, in both cases, you can optionally override the
                        tax values by specifying `price_inc_tax` and
                        `price_ex_tax`.


                        If a store has automatic tax enabled, BigCommerce does
                        not compute sales tax on orders created via the API.
                      header:
                        anchor: orders-api-overview_taxes
                    - type: text
                      data: >-
                        ### Avalara

                        When the store is subscribed to Avalara Premium, a value
                        of API Tax Override is written to the Order Tax object’s
                        name field.


                        Abbreviated state names in shipping and billing
                        addresses will prevent tax documents from being
                        submitted to Avalara. To ensure successful Avalara
                        tax-document submission, spell state names out in full.
                        For example, supplying CA as a state name leads to no
                        tax-document submission. Supplying California as a state
                        name leads to a successful submission.


                        POST or PUT orders on stores with Avalara Premium cause
                        tax documents to be submitted. If a store has subscribed
                        to Avalara Premium, BigCommerce automatically submits
                        tax documents to Avalara when the order achieves a paid
                        status. See Order Status below for a list of paid
                        statuses.


                        You can create overrides for calculated values such as
                        product prices, subtotal and totals by sending a fixed
                        value in the request. If values are not supplied for
                        these properties, they will be automatically calculated
                        based on the preset store values and tax rules.



                        | Existing Status | Status Passed | Resultant Status |
                        Avalara Tax Document Submission |

                        | --- | --- | --- | --- |

                        | Any | None | `Pending` | None |

                        | Paid or `Refunded` | Paid | Paid | None |

                        | Unpaid or `Refunded` | Unpaid | Unpaid | None |

                        | Paid or `Refunded` | Unpaid | Unpaid | Tax document
                        voided |

                        | Unpaid or `Refunded` | Paid | Paid | Tax document
                        submitted |
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Overriding Preset Values

                        You can create overrides for calculated values such as
                        product prices, subtotal and totals by sending a fixed
                        value in the request. If values are not supplied for
                        these properties, they will be automatically calculated
                        based on the preset store values and tax rules.
                      header:
                        anchor: '#orders-api-overview_override-preset-values'
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Calculation of Totals

                        When not specified, order subtotal and total are
                        automatically calculated.


                        You can override order subtotal and/or total. If you
                        choose to override one, we strongly recommend that
                        override both, because the system will not be able to
                        accurately calculate the other.


                        Edits to the following properties will trigger a
                        recalculation of the subtotal and total:


                        *   products

                        *   discount_amount

                        *   shipping_cost_ex_tax

                        *   shipping_cost_inc_tax

                        *   handling_cost_ex_tax

                        *   handling_cost_inc_tax

                        *   wrapping_cost_ex_tax

                        *   wrapping_cost_inc_tax

                        *   billing_address

                        *   shipping_addresses
                      header:
                        anchor: orders-api-overview_calculation_totals
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Order Status

                        When moving through order management, the order status
                        is not automatically updated. This needs to be changed
                        as needed. 


                        You can specify `status_id`, which will automatically
                        set the corresponding status. When `status_id` is not
                        specified, it will be automatically set to 1, which will
                        set status to Pending.


                        The following statuses are of the paid type:

                        * Shipped

                        * Partially Shipped

                        * Awaiting Pickup

                        * Awaiting Shipment

                        * Completed

                        * Awaiting Fulfillment


                        BigCommerce considers all statuses other than those
                        above to be of the unpaid type, except Refunded, which
                        is considered neither paid or unpaid. 
                    - type: text
                      data: >-
                        ### Custom Order Status


                        The order status label can be changed in the Control
                        Panel. This **does not** change the underlying
                        functionality. See our support article on [Order
                        Status](https://support.bigcommerce.com/s/article/Order-Statuses#rename).
                      header:
                        anchor: orders-api-overview_custom-order-status
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## FAQ


                        **Is adding coupons available?**


                        Coupon redemption is not currently supported. The
                        `coupon_discount` field can not be written to. A
                        discount can be added to the order by using the
                        `discount_amount`.


                        **How do I create an order for a guest?**


                        To specify a guest checkout, set `customer_id` to 0.


                        **How do I set the order source?**


                        The `order_source` cannot be specified, and will be set
                        to external. You can optionally specify a value for
                        `external_source` to specify which external source the
                        order is coming from - e.g., POS system X, accounting
                        system Y, etc.


                        **Can I create an order with only custom products?**


                        Yes, the products are not added to the store's catalog.


                        **What is the difference between country_ISO2 and
                        country?** 


                        In the shipping and billing addresses, there is no
                        requirement to specify country when `country_ISO2` is
                        specified and vice versa.


                        **How can I take a payment for an Order?**

                        You can either process payment through a third party or
                        using the Control Panel. 


                        **Can I generate a shipping quote from a carrier using
                        the API?**


                        Not at this time. If an order is created either in the
                        Control Panel or via API, then it returns a 204 when
                        trying to get a [Shipping
                        Quote](https://developer.bigcommerce.com/api-reference/orders/orders-api/models/shippingquotes).
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Resources

                        ### Webhooks

                        -
                        [Orders](/api-docs/getting-started/webhooks/webhook-events#webhook-events_orders)


                        ### Related Endpoints

                        -
                        [Orders](/api-reference/orders/orders-api/orders/postorders)

                        - [Order
                        Shipments](/api-reference/orders/orders-api/order-shipments/postordersorderidshipments)

                        - [Order
                        Status](/api-reference/orders/orders-api/order-status/getorderstatuses)

                        - [Shipping
                        Quotes](/api-reference/orders/orders-api/order-shipping-addresses-quotes/getordersorderidshippingaddressesshippingaddressidshippingquotes)

                        - [Order
                        Products](/api-reference/orders/orders-api/order-products/getordersorderidproducts)

                        - [Order Shipping
                        Address](/api-reference/orders/orders-api/order-shipping-addresses/getordersorderidshippingaddresses)

                        - [Order
                        Coupons](/api-reference/orders/orders-api/order-coupons/getordersorderidcoupons)
                            
                        ### Related Articles

                        - [Order
                        Status](https://support.bigcommerce.com/s/article/Order-Statuses#rename)
                        (BigCommerce Support)

                        - [Order
                        Notifications](https://support.bigcommerce.com/s/article/Customer-Order-Notifications#enable)
                        (BigCommerce Support) 
                      header:
                        anchor: orders-api-overview_resources
  /api-reference:
    title: API Reference
    data:
      children:
        - title: Catalog
          route:
            path: /catalog
          data:
            children:
              - title: Catalog API
                route:
                  path: /catalog-api
                data:
                  $ref: ./BigCommerce_Catalog_API.oas2.yml
                config:
                  includeDownloadLink: true
              - title: Price Lists API
                route:
                  path: /pricelists-api
                data:
                  $ref: ./BigCommerce_Price_Lists_API.oas2.yml
                config:
                  includeDownloadLink: true
        - title: Store Management
          route:
            path: /store-management
          data:
            children:
              - title: Store Information API
                route:
                  path: /store-information-api
                data:
                  $ref: ./BigCommerce_Store_Information_API.oas2.yml
                config:
                  includeDownloadLink: true
              - title: ' Currency API'
                route:
                  path: /currency-api
                data:
                  $ref: ./BigCommerce_Currency_API.oas2.yml
                config:
                  includeDownloadLink: true
              - title: Geography API
                route:
                  path: /geography-api
                data:
                  $ref: ./BigCommerce_Geography_API.oas2.yml
                config:
                  includeDownloadLink: true
              - title: Tax Class API
                route:
                  path: /tax-classes-api
                data:
                  $ref: ./BigCommerce_Tax_Class_API.oas2.yml
                config:
                  includeDownloadLink: true
              - title: Shipping API
                route:
                  path: /shipping-api
                data:
                  $ref: ./BigCommerce_Shipping_API.oas2.yml
                config:
                  includeDownloadLink: true
        - title: Customers & Subscribers
          route:
            path: /customer-subscribers
          data:
            children:
              - title: Customers API V3
                route:
                  path: /customers-api-v3
                config:
                  includeDownloadLink: true
                  sidebar:
                    token: Beta
                data:
                  $ref: ./BigCommerce_Customers_V3_API.oas2.yml
              - title: Customers API
                route:
                  path: /customers-api
                data:
                  $ref: ./BigCommerce_Customers_API.oas2.yml
                config:
                  includeDownloadLink: true
              - title: Subscribers API
                route:
                  path: /subscribers-api
                data:
                  $ref: ./BigCommerce_Subscribers_API.oas2.yml
                config:
                  includeDownloadLink: true
              - title: Wishlist API
                route:
                  path: /wishlist-api
                config:
                  sidebar:
                    token: beta
                  includeDownloadLink: true
                data:
                  $ref: ./BigCommerce_Wishlist_API.oas2.yml
        - title: Marketing
          route:
            path: /marketing
          data:
            children:
              - title: Marketing API
                route:
                  path: /marketing-api
                data:
                  $ref: ./BigCommerce_Marketing_API.oas2.yml
                config:
                  includeDownloadLink: true
              - title: Store Content API
                route:
                  path: /store-content-api
                data:
                  $ref: ./BigCommerce_Store_Content_API.oas2.yml
                config:
                  includeDownloadLink: true
        - title: Storefront
          route:
            path: /storefront
          data:
            children:
              - title: Scripts API
                route:
                  path: /content-scripts-api
                data:
                  $ref: ./BigCommerce_Scripts_API.oas2.yml
                config:
                  includeDownloadLink: true
              - title: Themes API
                route:
                  path: /themes-api
                data:
                  $ref: ./BigCommerce_Themes_API.oas2.yml
                config:
                  includeDownloadLink: true
              - title: Widgets API
                route:
                  path: /widgets-api
                data:
                  $ref: ./BigCommerce_Widgets_API.oas2.yml
                config:
                  includeDownloadLink: true
        - title: Cart & Checkout
          route:
            path: /cart-checkout
          data:
            children:
              - title: Storefront Cart API
                route:
                  path: /storefront-cart-api
                data:
                  $ref: ./BigCommerce_Storefront_Cart_API.oas2.yml
                config:
                  includeDownloadLink: true
              - title: Storefront Checkout API
                route:
                  path: /storefront-checkout-api
                data:
                  $ref: ./BigCommerce_Storefront_Checkout_API.oas2.yml
                config:
                  includeDownloadLink: true
              - title: Server to Server Cart API
                route:
                  path: /server-server-cart-api
                data:
                  $ref: ./BigCommerce_Server_to_Server_Cart_API.oas2.yml
                config:
                  includeDownloadLink: true
              - title: Server to Server Checkout API
                route:
                  path: /server-server-checkout-api
                data:
                  $ref: ./BigCommerce_Server_to_Server_Checkout_API.oas2.yml
                config:
                  includeDownloadLink: true
        - title: Orders
          route:
            path: /orders
          data:
            children:
              - title: Orders API
                route:
                  path: /orders-api
                data:
                  $ref: ./BigCommerce_Orders_API.oas2.yml
                config:
                  includeDownloadLink: true
              - title: Order Transactions API
                route:
                  path: /orders-transactions-api
                data:
                  $ref: ./BigCommerce_Order_Transactions_API.oas2.yml
                config:
                  includeDownloadLink: true
              - title: Storefront Orders API
                route:
                  path: /storefront-orders-api
                data:
                  $ref: ./BigCommerce_Storefront_Orders_API.oas2.yml
                config:
                  includeDownloadLink: true
        - title: Payments
          route:
            path: /payments
          data:
            children:
              - title: Payment Methods API
                route:
                  path: /payment-methods-api
                data:
                  $ref: ./BigCommerce_Payment_Methods_API.oas2.yml
                config:
                  includeDownloadLink: true
  /stencil-docs:
    title: Stencil Docs
    data:
      children:
        - title: Getting Started
          route:
            path: /getting-started
          data:
            children:
              - title: About Stencil
                route:
                  path: /about-stencil
                data:
                  blocks:
                    - type: html
                      data: <h1>About Stencil</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#about_what-is-stencil\"> What is Stencil?</a></li>\n\t\t<li><a href=\"#about_features-and-stack\"> Stencil Development Features and Technology Stack</a></li>\n\t\t<li><a href=\"#about_key-components\">Key Components: Video Demo</a></li>\n\t\t<li><a href=\"#about_blueprint\"> Blueprint (Legacy Framework) Documentation </a></li>\n\t</ul>\n</div>\n"
                    - type: text
                      data: >-
                        ## What is Stencil?


                        Stencil is BigCommerce's theme engine. It incorporates
                        industry best practices in technology, design standards,
                        and SEO, and allows you to build a stunning storefront
                        that engages shoppers and encourages checkouts on any
                        device. Stencil themes are supported on the [following
                        browsers](https://support.bigcommerce.com/s/article/Themes-Supported-Browsers).


                        In addition to the features listed below, Stencil allows
                        merchants to customize a storefront’s look and feel with
                        no coding, making it accessible to a wide range of
                        users.


                        Stencil powers BigCommerce’s
                        [Cornerstone](https://github.com/bigcommerce/cornerstone)
                        theme, which serves as your framework for creating
                        custom sites. Cornerstone is available on Github and
                        will be referenced throughout the documentation in order
                        to demonstrate Stencil’s capabilities. See the
                        [Cornerstone theme
                        demo](http://cornerstone-light-demo.mybigcommerce.com/).


                        ### Related Links:

                        * [Cornerstone Github
                        Repository](https://github.com/bigcommerce/cornerstone)

                        * [Cornerstone theme
                        demo](http://cornerstone-light-demo.mybigcommerce.com/)

                        * [Store Design (BigCommerce
                        Support)](https://forum.bigcommerce.com/s/article/Store-Design)
                      header:
                        anchor: about_what-is-stencil
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Stencil Development Features and Technology Stack


                        Stencil provides the following features, allowing
                        BigCommerce theme developers to create beautiful,
                        dynamic, and powerful storefronts.



                        ### Stencil Command Line Interface (Stencil CLI)


                        The Stencil CLI enables developers to locally develop
                        and customize on any Stencil theme with no impact on a
                        merchant's live storefront during the development
                        process. When developing locally, you will have access
                        to real-time Browsersync preview and testing across
                        desktop, mobile, and tablet devices/viewports.


                        Stencil CLI runs on the
                        [Node.js](https://nodejs.org/en/) runtime environment.
                        Installing Node.js also provides the required [npm
                        package manager](https://www.npmjs.com/package/npm).


                        ### Logic-Based Templates


                        Stencil's logic based templates allow BigCommerce
                        developers to customize storefront pages efficiently
                        with the lightweight templating languge, Handlebars.js. 
                        Handlebars allows you to efficiently embed dynamic and
                        conditional logic onto your storefront pages.


                        ### CSS and Design Assets


                        Stencil's Sass and SCSS support allows developers to
                        nest properties, variables, and mix-ins. Cornerstone
                        uses a BigCommerce pattern library called Citadel, which
                        is built on top of the ZURB Foundation framework,
                        version 5.5.3.


                        **Note:** Stencil does not support Foundation 6.x, due
                        to incompatible updates introduced between versions 5.x
                        and 6.x.


                        Foundation offers the framework for creating a
                        responsive theme. You have the option of swapping out
                        Foundation for another framework, although doing so
                        would require significant work.


                        Foundation assets bundled with Cornerstone are located
                        in these subdirectories: 


                        * `Cornerstone/assets/scss/settings/foundation/ `

                        * `Cornerstone/assets/scss/components/foundation/`


                        ### Page-specific Resource Definition


                        YAML front matter allows you to request only the objects
                        you need on the storefront, increasing page speed and
                        allowing you to define the content to render with just a
                        few keystrokes.


                        ### Javascript Event Hooks


                        Stencil themes can access remote objects through event
                        hooks, using the hooks to trigger defined events based
                        on shopper behavior. This will allow you to collect
                        product data and optimize a shopper's experience. To
                        facilitate theme-building, BigCommerce provides the
                        [stencil-utils client-side JavaScript
                        library](/stencil-docs/adding-event-hooks-to-your-theme/stencil-utils-api-reference)
                        for managing event hooks.


                        For more information, see the [Event Hook
                        Overview](/stencil-docs/adding-event-hooks-to-your-theme/event-hook-overview-and-examples#event_event-hook).


                        ---


                        ## Stencil Theme Editor & Store Design


                        The Stencil Theme Editor is a browser-based tool that
                        enables merchants to rapidly customize a theme's look
                        and feel with no coding. 


                        **Note:** _In October 2018, we launched an update for
                        the Stencil Theme Editor experience. The new experience
                        is called **Store Design**. You can easily make the
                        switch from the Theme Editor to the Store Design
                        experience. See our support [Store Design
                        article](https://forum.bigcommerce.com/s/article/Store-Design)
                        for more information._


                        BigCommerce theme developers' configuration choices
                        determine which theme aspects merchants can customize,
                        and the range of choices for each aspect.


                        Stencil's Theme Editor graphical interface enables
                        merchants and store administrators to make styling
                        changes to the theme currently applied to their
                        storefront. 


                        As a theme developer, you have the capability to define
                        which style settings appear in the Stencil Theme Editor.
                        You can grant access to colors, fonts, display/hiding of
                        page features, and number of products/entries to display
                        per feature.


                        ### Stencil Theme Variations


                        Each Stencil theme can contain one to four variations.
                        You can optimize individual variations for specific
                        markets, audiences and styles – while still managing and
                        distributing all of these variations as one theme.

                        Cornerstone comes with 3 variations: Cornerstone Light,
                        Cornerstone Warm, and Cornerstone Bold.


                        ### Responsive, Mobile-Friendly Themes


                        BigCommerce stores powered by Stencil allow shoppers to
                        have a first class experience _across any device_.
                      header:
                        anchor: about_features-and-stack
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Key Components: Video Demo


                        Watch Stencil senior developer's tour of Stencil's key
                        components:


                        <iframe width="560" height="315"
                        src="https://www.youtube.com/embed/p5SR8N0SeCg"
                        frameborder="0" allowfullscreen></iframe>
                      header:
                        anchor: about_key-components
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Blueprint (Legacy Framework) Documentation


                        If you are looking for information on Blueprint,
                        BigCommerce's legacy theme framework, you can access
                        that [here](/legacy/blueprint-themes).
                      header:
                        anchor: about_blueprint
              - title: Transitioning to Stencil
                route:
                  path: /transitionining-to-stencil
                data:
                  blocks:
                    - type: html
                      data: <h1>Transitioning to Stencil</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#choosing-dev-path\"> Choosing a Development Path</a></li>\n\t\t<li><a href=\"#front-matter-quick-start\">Front-Matter Quick Start</a></li>\n    <li><a href=\"#handlebars-matter-quick-start\">Handlebars Quick Start</a></li>\n\t\t<li><a href=\"#seo-tips\">SEO Tips and Best Practices</a></li>\n\t\t<li><a href=\"#blueprint-to-stencil\">Blueprint to Stencil Features Map</a></li>\n    <li><a href=\"#interacting-with-api\">Interacting with the BigCommerce API</a></li>\n    <li><a href=\"#partnering-with-bc\">Partnering with BigCommerce</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Choosing a Development Path


                        Are you approaching Stencil from a different theming
                        framework, like Blueprint, BigCommerce's legacy
                        framework? Or moving to the Stencil templating
                        environment from a pure HTML and CSS-based design?


                        You have four (non-mutually exclusive) options for
                        developing Stencil themes:


                        * Find an Agency Partner

                        * Light Customization using the Theme Editor

                        * Light Customization using HTML and CSS

                        * Adapting a Stencil Theme or Developing from Scratch


                        ###  Find an Agency Partner


                        If you prefer to have an expert collaborator customize
                        your theme, we recommend working with one of our
                        certified certified BigCommerce Agency Partners.
                        Reference the following resources to do so:


                        * [Partner
                        Directory](https://partners.bigcommerce.com/directory/search?i=75)

                        * [Working with a Design
                        Partner](https://support.bigcommerce.com/articles/Learning/Working-with-a-Design-Partner)
                        (Support Guide)


                        ### Light Customization with Stencil Theme Editor


                        Stencil can be customized without the use of any
                        specialized development tools or techniques by using of
                        the Stencil Theme Editor. The Stencil Theme Editor still
                        enables customization of a theme's colors, typography,
                        banners, headings, carousel, and footer. It also enables
                        customization of broader layout characteristics, such as
                        the number of products displayed in various panels,
                        category pages, and brand pages.


                        For details, see the following support resources:


                        * [Theme
                        Editor](https://support.bigcommerce.com/s/article/Stencil-Themes)

                        * [Personalizing Your
                        Theme](https://support.bigcommerce.com/articles/Learning/Personalizing-your-New-Theme) 


                        ### Light Customization with HTML and CSS


                        If you are most comfortable working in HTML and CSS,
                        Stencil's *Edit Theme Files* feature allows you to
                        directly edit most of your theme's files from the
                        Control Panel. For details, see the following resources:


                        * [Editing Stencil Theme
                        Files](https://support.bigcommerce.com/s/article/Stencil-Themes#edit) 

                        * [Getting Started with the Stencil
                        Framework](https://www.youtube.com/watch?v=waJ1dg_dAh8&index=11&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0)
                        (Video overview of copying and editing a theme's files)


                        ### Adapt a Stencil Theme, or Develop from Scratch


                        For complete control over a theme's appearance and logic
                        – including the ability to edit _all_ theme
                        configuration files – you will want to use the Stencil
                        Command-line interface, also known as the Stencil CLI.


                        To learn Stencil CLI's templating conventions, see
                        Installing Stencil CLI. Also take a look at
                        BigCommerce's [Getting Started with the Stencil
                        Framework](https://www.youtube.com/playlist?list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0)
                        video playlist.
                      header:
                        anchor: choosing-dev-path
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Front-Matter Quick Start


                        Stencil templates start with a section of "front matter"
                        where you can and concisely customize each page's design
                        and layout details. 


                        This front-matter section uses conventions from YAML, a
                        simple, widely used markup language. If you haven't used
                        these conventions before, refer to our [Front-Matter
                        Overview](/stencil-docs/front-matter/front-matter-overview).
                      header:
                        anchor: front-matter-quick-start
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Handlebars Quick Start


                        Stencil uses Handlebars.js to assemble dynamic content
                        into the storefront pages that are displayed to
                        shoppers. The dynamic content can be drawn from a few
                        sources, like the store's catalog.


                        Handlebars' syntax is quite simple, and it allows you to
                        accomplish powerful JavaScript operations with minimal
                        JavaScript code. To learn more about Handlebars.js, see
                        these third-party tutorials: 


                        * [Learn Handlebars in 10 Minutes or
                        Less](http://tutorialzine.com/2015/01/learn-handlebars-in-10-minutes/)

                        * [A Beginner’s Guide to
                        Handlebars](https://www.sitepoint.com/a-beginners-guide-to-handlebars/)

                        * [Getting Started with
                        Handlebars.js](http://blog.teamtreehouse.com/getting-started-with-handlebars-js)

                        * [Handlebars interactive
                        tutorial](http://tryhandlebarsjs.com/)
                      header:
                        anchor: handlebars-quick-start
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## SEO Tips and Best Practices


                        Search-engine optimization (SEO) helps translate an
                        elegant theme into a successful, high-conversion
                        storefront. Because so many shoppers reach online stores
                        through a search engine, a search-optimized site will be
                        more visible – attracting more traffic. 


                        The Stencil framework is [designed for high SEO
                        performance](https://www.bigcommerce.com/improve-organic-traffic/).
                        However, you will want to keep SEO in mind as you build
                        out each theme and storefront. For guidelines, please
                        see these BigCommerce support articles (which are a
                        series of intermediate to advanced chapters in our Guide
                        to SEO):


                        * [SEO Do's and
                        Don'ts](https://support.bigcommerce.com/s/article/What-is-SEO)

                        * [Developing a Keyword
                        Strategy](https://support.bigcommerce.com/articles/Learning/Developing-a-Keyword-Strategy/)

                        * [SEO Success
                        Essentials](https://support.bigcommerce.com/articles/Learning/Bigcommerce-SEO-Success-Essentials/)

                        * [Advanced SEO on
                        BigCommerce](https://support.bigcommerce.com/s/article/Advanced-SEO-on-Bigcommerce)


                        Also checkout our [Guide to Keyword
                        Research](https://support.bigcommerce.com/s/article/Value-of-Keywords).
                      header:
                        anchor: seo-tips
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Blueprint-to-Stencil Features Map 


                        This following support and video resurces are designed
                        to help you identify the Stencil counterparts to
                        familiar Blueprint components.


                        * [What to Consider When Changing Your
                        Theme](https://support.bigcommerce.com/s/article/What-to-Consider-When-Changing-Your-Theme)

                        * [Stencil and the BigCommerce Control
                        Panel](https://www.youtube.com/watch?v=d2F6F8LJXzs&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0&index=2)
                        (Video tour of Blueprint-to-Stencil  changes in the
                        BigCommerce control panel)
                      header:
                        anchor: blueprint-to-stencil
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Interacting with the BigCommerce API


                        Interacting with the BigCommerce API

                        BigCommerce's growing API resources enable application
                        developers to create private scripts or apps that
                        support a single store, or to create public apps offered
                        to multiple stores via BigCommerce's App Marketplace.


                        As a theme developer, you can rely on apps to enhance
                        your themes' capabilities, and to extend or complement
                        the storefront features built into the BigCommerce
                        platform. Popular app areas include inventory
                        management, email marketing, coupons, reviews, shipping,
                        tax accounting, and security. For more information, see
                        BigCommerce's:


                        * [App Marketplace](https://www.bigcommerce.com/apps/)

                        * [API
                        documentation](https://developer-beta.bigcommerce.com/api-docs)
                      header:
                        anchor: interacting-with-api
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Partnering with BigCommerce


                        No formal business relationship is required to develop
                        themes on the BigCommerce platform. However, consider
                        applying to become a become a BigCommerce Agency
                        Partner, in order to accelerate your development of new
                        business and revenue. For details, see our:


                        * [Overview of BigCommerce
                        Partnerships](https://www.bigcommerce.com/partners/)

                        * [Agency
                        Partners](https://www.bigcommerce.com/partners/design-solution/)
                        – basics and application links

                        * [Technology
                        Partners](https://www.bigcommerce.com/partners/developers/)
                        – basics and application links

                        * [Partnership
                        Application](https://partners.bigcommerce.com/English/register_email.aspx)
                      header:
                        anchor: partnering-with-bc
              - title: Installing Stencil
                route:
                  path: /installing-stencil
                data:
                  blocks:
                    - type: html
                      data: <h1>Installing Stencil</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#installing_video-demo\">Video Demo</a></li>\n    <li><a href=\"#installing_prerequisites\">Prerequisites by OS</a></li>\n    <li><a href=\"#installing_installing-the-stencil-cli\">Installing the Stencil Command Line Interface (CLI)</a></li>\n    <li><a href=\"#installing_cloning-cornerstone\">Cloning Cornerstone Using Github</a></li>\n    <li><a href=\"#installing_installing-stencils-js-utilities\">Installing Stencil's Javascript Utilities</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        Below you’ll find instructions on installing the Stencil
                        CLI, cloning the Cornerstone theme, and installing
                        Stencil’s Javascript utilities.

                        Each OS has different prerequisites, so check the
                        Prerequisites by OS section before attempting
                        installation.
                    - type: text
                      data: >-
                        ## Video Demo


                        Watch a brief demonstration of the Stencil installation
                        and launch:


                        <iframe width="560" height="315"
                        src="https://www.youtube.com/embed/iWBrJalyM0A"
                        frameborder="0" allow="autoplay; encrypted-media"
                        allowfullscreen></iframe>
                      header:
                        anchor: installing_video-demo
                    - type: tabs
                      data:
                        children:
                          - title: ' Mac OS Prerequisites'
                            blocks:
                              - type: html
                                data: <h1>Mac OS Prerequisites</h1>
                              - type: html
                                data: "<div class=\"otp\" id=\"no-index\">\n\t<h3>On This Tab</h3>\n\t<ul>\n    <li><a href=\"#mac_xcode\">Installing Xcode</a></li>\n    <li><a href=\"#mac_nodejs\">Installing Node.js</a></li>\n    <li><a href=\"#mac_troubleshooting\">Troubleshooting</a></li>\n\t</ul>\n</div>\n"
                              - type: callout
                                data:
                                  body: >-
                                    These instructions have been tested on Mac
                                    OS X Yosemite. Dependencies for other
                                    platforms will be added upon further
                                    testing.
                                  title: Platform Support
                              - type: text
                                data: >-
                                  ## Installing Xcode 


                                  You must install the [Xcode development
                                  tools](https://developer.apple.com/xcode/)
                                  (latest stable version).
                                header:
                                  anchor: mac_xcode
                              - type: text
                                data: '---'
                              - type: text
                                data: >-
                                  ## Node.js 


                                  Stencil requires the <a
                                  href="https://nodejs.org/">Node.js</a> runtime
                                  environment, version <a
                                  href="https://nodejs.org/en/blog/release/">6.x
                                  or later</a>. We have tested Stencil on
                                  selected Node.js versions, from <a
                                  href="https://nodejs.org/en/blog/release/v6.10.3/">6.10.3</a>
                                  to <a
                                  href="https://nodejs.org/en/blog/release/v7.9.0/">7.9.0</a>. 


                                  We recommend that you install or update
                                  Node.js using <a
                                  href="https://github.com/creationix/nvm#installation">nvm</a>.
                                  First install nvm, version <a
                                  href="https://github.com/creationix/nvm/tree/v0.31.0">0.31.0</a>,
                                  as follows:


                                  ```

                                  curl -o-
                                  https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh
                                  | bash

                                  ```


                                  Next, explicitly install a supported Node.js
                                  version, using this convention:<br>


                                  ```

                                  nvm install 6.4.0

                                  ```
                                header:
                                  anchor: mac_nodejs
                              - type: callout
                                data:
                                  body: >-
                                    You can choose to instead download the
                                    latest x.x version of Node.js from the
                                    Node.js Foundation's archives, using URLs of
                                    the form:
                                    https://nodejs.org/dist/latest-v6.x/,
                                    https://nodejs.org/dist/latest-v7.x/, etc.
                                    We recommend installing only LTS ("Long-Term
                                    Support"/"Mature and Dependable") versions.
                                  title: Notes on Dependencies
                              - type: text
                                data: '---'
                              - type: text
                                data: >
                                  ## Troubleshooting


                                  If you run into any problems with Stencil
                                  installation or launch, first consult
                                  [Troubleshooting Your
                                  Setup](/stencil-docs/getting-started/launching-stencil/troubleshooting-your-setup). 


                                  If that does not resolve your issue, consult
                                  our [Support
                                  resources](https://support.bigcommerce.com/s/),
                                  which include community and peer support via
                                  BigCommerce and Stack Overflow forums.
                                header:
                                  anchor: mac_troubleshooting
                          - title: Linux Prerequisites
                            blocks:
                              - type: html
                                data: <h1>Linux Prerequisites</h1>
                              - type: html
                                data: "<div class=\"otp\" id=\"no-index\">\n\t<h3>On This Tab</h3>\n\t<ul>\n    <li><a href=\"#linux_root\">Root Permissions</a></li>\n     <li><a href=\"#linux_git-client\">Git Client</a></li>\n     <li><a href=\"#linux_nodejs\">Node.js</a></li>\n      <li><a href=\"#linux_troubleshooting\">Troubleshooting</a></li>\n\t</ul>\n</div>"
                              - type: callout
                                data:
                                  body: >-
                                    These instructions have been tested on
                                    Linux/Ubuntu v.14.04.4. 
                                  title: Platform Support
                              - type: text
                                data: >-
                                  ## Root Permissions


                                  You should have administrator/root permissions
                                  on your machine. (If not, you may need to
                                  precede some of the below commands with the
                                  `sudo` prefix.)
                                header:
                                  anchor: linux_root
                              - type: text
                                data: '---'
                              - type: text
                                data: >-
                                  ## Git Client


                                  You must have a [Git
                                  client](https://git-scm.com/downloads)
                                  installed.
                                header:
                                  anchor: linux_git-client
                              - type: text
                                data: '---'
                              - type: text
                                data: >-
                                  ## Node.js


                                  Stencil requires the Node.js runtime
                                  environment, version 6.x or later. We have
                                  tested Stencil on selected Node.js versions,
                                  from 6.10.3 to 7.9.0.


                                  We recommend that you install or update
                                  Node.js using nvm. First install nvm, version
                                  0.31.0, as follows:


                                  `curl -o-
                                  https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh
                                  | bash`


                                  Next, explicitly install a supported Node.js
                                  version, using this convention:


                                  `nvm install 6.4.0`
                                header:
                                  anchor: linux_nodejs
                              - type: text
                                data: '---'
                              - type: text
                                data: >-
                                  ## Troubleshooting


                                  If you run into any problems with Stencil
                                  installation or launch, please first see our
                                  Troubleshooting Your Setup page. Next, please
                                  consult our Support resources, which include
                                  community/peer support via BigCommerce and
                                  Stack Overflow forums.
                                header:
                                  anchor: linux_troubleshooting
                          - title: Windows Prerequisites
                            blocks:
                              - type: html
                                data: <h1>Windows Prerequisites</h1>
                              - type: html
                                data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Tab </h3>\n\t<ul>\n     <li><a href=\"#windows_root-permissions\">Root Permissions</a></li>\n     <li><a href=\"#windows_git-client\">Git Client and Git BASH</a></li>\n     <li><a href=\"#windows_python-installation\">Python Installation</a></li>\n     <li><a href=\"#windows_python-node-config\">Python/Node Configuration</a></li>\n     <li><a href=\"#windows_node-installation\">Node.js Installation</a></li>\n     <li><a href=\"#windows_compiler-options\">C++ Compiler Options</a></li>\n    <li><a href=\"#windows_troubleshooting\">Troubleshooting</a></li>\n\t</ul>\n</div>"
                              - type: callout
                                data:
                                  body: >-
                                    The following instructions have been tested
                                    on Windows 10. Dependencies for other
                                    platforms will be added upon further
                                    testing.
                                  title: Platform Support
                              - type: text
                                data: >-
                                  ## Root Permissions


                                  You must have authorization to run Powershell
                                  "as administrator" on your machine.
                                header:
                                  anchor: windows_root-permissions
                              - type: text
                                data: '---'
                              - type: text
                                data: >-
                                  ## Git Client and Git BASH


                                  You must have a Git client installed. The Git
                                  for Windows distribution includes a Git
                                  client, and also provides the Git BASH
                                  emulator for command-line access. All commands
                                  should be run in Git Bash from here.
                                header:
                                  anchor: windows_git-client
                              - type: text
                                data: '---'
                              - type: text
                                data: >-
                                  ## Python Installation


                                  Install [Python 2.7.x for
                                  Windows](https://www.python.org/downloads/windows/).
                                  This is required for Visual Studio's Windows
                                  Build Tools, installed below. **Python 3.x is
                                  not supported.**


                                  In the installer dialog shown below, change
                                  the bottom default, so as to enable the `Add
                                  python.exe to Path` option. This provides
                                  global command-line access to Python.
                                header:
                                  anchor: windows_python-installation
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6116/1539115629012
                              - type: text
                                data: '---'
                              - type: text
                                data: >-
                                  ## Node.js Installation


                                  Stencil requires the
                                  [Node.js](https://nodejs.org/en/) runtime
                                  environment, version 6.x or later.


                                  On Windows, we have tested Stencil CLI on
                                  selected Node.js version
                                  [7.10.0](https://nodejs.org/en/blog/release/v7.10.0/7.10.0).
                                  We recommend that you install only an LTS
                                  ("Long-Term Support"/"Mature and Dependable")
                                  version, and that you download that version's
                                  `.msi` installer (not its `.exe` binary).


                                  **Note:** _You can choose to instead download
                                  the latest x.x version of Node.js from the
                                  Node.js Foundation's archives, using URLs of
                                  the form:
                                  [https://nodejs.org/dist/latest-v8.x/](https://nodejs.org/dist/latest-v8.x/),
                                  [https://nodejs.org/dist/latest-v8.x/](https://nodejs.org/dist/latest-v8.x/),
                                  etc. In all cases, we recommend installing
                                  only LTS ("Long-Term Support"/"Mature and
                                  Dependable") versions, and that you download
                                  the .msi installer, not the .exe binary.

                                  However, please see the restriction on
                                  technical assistance in the Notes on
                                  Dependencies below._


                                  To verify your Node.js installation or
                                  reinstallation, this [blog
                                  post](http://blog.teamtreehouse.com/install-node-js-npm-windows)
                                  provides Windows-specific tips and tests.
                                header:
                                  anchor: windows_node-installation
                              - type: callout
                                data:
                                  body: >-
                                    You will need to restart your computer to
                                    complete Node.js installation.
                                  type: warning
                                  title: Restart Required
                              - type: text
                                data: >-
                                  ## Python/Node Configuration


                                  After installing both Python and Node.js,
                                  configure Python within the Node.js runtime
                                  environment by running this npm command:


                                  `npm config set python python2.7`
                                header:
                                  anchor: windows_python-node-config
                              - type: callout
                                data:
                                  body: >-
                                    The [node package
                                    manager](https://www.npmjs.com/) was
                                    installed as part of Node.js. As you proceed
                                    through Stencil CLI setup (and later
                                    refreshes), you will use this command-line
                                    utility to install packages/modules, and to
                                    configure and manage dependencies and their
                                    versions.
                                  title: About Node Package Manager (npm)
                              - type: text
                                data: >
                                  ## C++ Compiler Options


                                  Choose to either install Turbo C++ or Visual
                                  Studio for your C++ Compiler.


                                  ### Turbo C++


                                  You can install Turbo C++ as a lighter version
                                  instead of Visual Studio. The installation
                                  takes about 5 minutes. After installation, a
                                  box opens that highlights the features of
                                  Turbo C++. This box can be closed since it is
                                  not needed to complete installation. If you
                                  prefer using Visual Studio then use the steps
                                  below.


                                  ### Visual Studio Installation

                                  Install MicroSoft Visual Studio. Stencil
                                  requires a 2013 or later release, Community
                                  Edition (free) or higher.


                                  Be sure to install Visual Studio's "Common
                                  Tools" component. You can also add this
                                  component later in the window shown below.


                                  ### Visual Studio Version/Node Configuration

                                  Finally, configure Visual Studio within the
                                  Node.js runtime environment by running the
                                  following npm command.

                                  (Replace the 2015 parameter with 2013 or 2017,
                                  as needed, to match the Visual Studio release
                                  you have installed:)


                                  `npm config set msvs_version 2015`
                                header:
                                  anchor: windows_compiler-options
                              - type: callout
                                data:
                                  title: Notes on Dependencies
                                  body: >-
                                    While alternate versions might also support
                                    Stencil, BigCommerce does not offer
                                    technical assistance on substitutions for,
                                    or customized versions of, the tested
                                    dependencies listed here.


                                    Once Stencil is fully installed, you can
                                    check dependencies' installed versions by
                                    examining your
                                    `<theme-name>/package.jsonfile`.
                              - type: text
                                data: >-
                                  ## Troubleshooting


                                  If you run into any problems with Stencil
                                  installation or launch, please first see our
                                  [Troubleshooting Your
                                  Setup](/stencil-docs/getting-started/launching-stencil/troubleshooting-your-setup)
                                  article. If that doesn't solve the issue, try
                                  consulting our [Support
                                  resources](https://forum.bigcommerce.com/s/group/0F913000000HLjECAW/bigcommerce-developers).
                                header:
                                  anchor: windows_troubleshooting
                      header:
                        title: Stencil Prerequisites by OS
                        anchor: installing_prerequisites
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Installing the Stencil Command Line Interface


                        The first step toward developing on Stencil is to
                        install the Stencil CLI. 


                        You can do this via the following command (_If you are
                        using Windows, you will need to run this command in git
                        bash._):


                        `npm install -g @bigcommerce/stencil-cli`


                        ### Items to Note


                        * The command above requires <a
                        href="https://www.npmjs.com/">npm</a> to be installed in
                        your local development environment.


                        * In Windows, this `npm` command's execution might at
                        times appear to freeze. However, the installer is
                        running. 

                        Give it several minutes to complete installation.


                        * On Mac OS machines with installed xcode, version 5.x,
                        this `npm` command has generated errors of the form: 

                        `npm ERR! invalid: string_decoder`. The workaround is to
                        upgrade xcode to the latest stable xcode version 

                        (7.3.1 as of this page's last revision). 


                        * If you receive a file-permissions error, and you did
                        not install Node.js via <a
                        href="https://github.com/creationix/nvm#installation">nvm</a>
                        (Node Version Manager), 

                        then either install nvm now, or follow one of the
                        workarounds on [this external
                        page](https://docs.npmjs.com/getting-started/fixing-npm-permissions).
                      header:
                        anchor: installing_installing-the-stencil-cli
                    - type: callout
                      data:
                        body: >-
                          To ensure the Stencil CLI is compatible with all the
                          changes introduced in Cornerstone 2.0.0, you must
                          upgrade to the latest version of Stencil CLI (1.15.1)
                          if using Cornerstone 2.x.x.


                          Occasionally, you will receive a command line prompt
                          to run the installation command when you restart your
                          Stencil server. This occurs when BigCommerce publishes
                          a critical fix in Stencil CLI, to resolve an issue
                          like a newly discovered security exploit.
                        title: CLI Force Upgrade and Cornerstone 2.0.0
                        type: warning
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Cloning Cornerstone using Github


                        _Windows users need to run this in git bash._


                        Navigate to a directory where you would like to install
                        a subdirectory for your theme. You must have appropriate
                        write permissions in this directory. 


                        Execute the following command to clone Stencil's base
                        theme, Cornerstone, into a new subdirectory named
                        `/cornerstone/`


                        `git clone
                        https://github.com/bigcommerce/cornerstone.git`
                          
                        If the above command fails, and you are accessing GitHub
                        anonymously, give the URL this alternate prefix:


                        `git clone git://github.com/bigcommerce/cornerstone.git`


                        In the next step, you will install Stencil's [JavaScript
                        utilities](/stencil-docs/getting-started/installing-stencil#installing_installing-stencils-js-utilities)
                        to enable API access via Ajax.
                      header:
                        anchor: installing_cloning-cornerstone
                    - type: callout
                      data:
                        body: >-
                          If you are reinstalling over a base theme on which you
                          have already begun development, first back up your
                          theme's `.stencil` file. This contains your store URL,
                          BigCommerce username and access tokens, and other
                          basic settings. Preserving those settings will speed
                          up initializing and launching the new version. If you
                          would like to allow for complete rollback, back up
                          your entire theme's directory.
                        type: error
                        title: Back Up before Reinstalling
                    - type: text
                      data: '---'
                    - type: text
                      data: "## Installing Stencil's Javascript Dependencies\n\n_Windows users need to run this in git bash._\n\nComplete the following steps:\n\nNavigate to your Stencil theme directory. This example assumes that this target directory has the default name `cornerstone`.\n\n`cd cornerstone`\n\nNext, execute the following command inside of that directory:\n\t\n`npm install`\n\nThis will install the required npm modules to properly leverage the Stencil event framework.\n\nNow that your installation is complete, you can move on to [preparing your store/tokens](/stencil-docs/getting-started/authentication-and-tokens)"
                      header:
                        anchor: installing_installing-stencils-js-utilities
              - title: Authentication & Tokens
                route:
                  path: /authentication-and-tokens
                data:
                  blocks:
                    - type: html
                      data: <h1>Creating an API Account to Obtain OAuth Tokens</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#authentication_creating-an-api-account\">Creating an API Account</a></li>\n    <li><a href=\"#authentication_issuing-additional\">Issuing Additional Tokens</a></li>\n    <li><a href=\"#authentication_revoking-tokens\">Revoking Tokens</a></li>\n    <li><a href=\"#authentication_copying-oauth-tokens\">Copying OAuth Tokens</a></li>\n\t</ul>\n</div>"
                    - type: callout
                      data:
                        type: error
                        body: >-
                          If you've successfully installed Stencil you're ready
                          to create a BigCommerce API Account. 

                          _If you have not yet installed Stencil, see
                          [Installing
                          Stencil](/stencil-docs/getting-started/installing-stencil)._
                        title: Status Check
                    - type: text
                      data: >-
                        ## Creating an API Account 


                        Follow the steps below to create an API Account and
                        obtain your OAuth Tokens.


                        1. Using the store owner's credentials, log into the
                        control panel of the store for which you are
                        developing. 


                        2. From the left nav, select `Advanced Settings` > `API
                        Accounts`.


                        3. From the resulting Store API Accounts page, select
                        the `Create API Account` button.


                        4. Give your account a name that reflects its purpose.


                        _The BigCommerce platform does not validate this name,
                        however, we recommend naming accounts by purpose to help
                        you keep track of which accounts you need to keep
                        active. You should assign a name that will make the
                        account's purpose clear to you and other store
                        administrators._


                        5. Under OAuth Scopes, set the Themes selector to either
                        `modify` or `read-only`.


                        _The read-only scope is sufficient to
                        authorize/initialize a Stencil theme. However, the
                        modify scope will achieve the same goal, while also
                        authorizing this account to upload themes to the store
                        from the command line._


                        6. Click `Save`. 


                        _Doing so will display a modal, from which you can copy
                        your `Client ID` and `Access Token` values. The modal
                        will also prompt your browser to download a .txt file
                        that contains your credentials. You will need these
                        values to authorize and initialize your Stencil theme.
                        If you're ready to do so now, move ahead to [Authorizing
                        and Initializing
                        Stencil](/stencil-docs/getting-started/launching-stencil/authorizing-and-initializing)._
                      header:
                        anchor: authentication_creating-an-api-account
                    - type: callout
                      data:
                        type: warning
                        title: Reserved Role
                        body: >-
                          Currently, only the store owner can create an OAuth
                          API account according to the instructions below. Also,
                          note that each store is limited to 50 accounts at a
                          time.
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Issuing Additional Tokens


                        To issue store tokens for additional themes or
                        developers, repeat the process outlined in Creating an
                        API Account.


                        (Even if you originally initialized your theme using a
                        legacy API [Basic-Auth] token, you will need to generate
                        any new tokens using the new OAuth flow.)


                        You can create up to 50 API accounts/tokens per store.
                        If you hit this limit and still need to create new
                        tokens, you will need to delete existing accounts.
                        Deleting an account will invalidate the corresponding
                        token, which will affect any developer using that token.
                      header:
                        anchor: authentication_issuing-additional
                    - type: text
                      data: >-
                        ## Revoking OAuth Tokens


                        **Note**: After completing the below process, there is
                        no undo. The following process completely deletes the
                        selected account(s), revoking the corresponding
                        token(s).


                        If you are completely sure you would like to revoke an
                        existing OAuth store token, delete the corresponding
                        Store API account with the following steps:


                        1. Navigate to the Control Panel's `API Accounts` page.


                        2. Select the trash-can button to the right of the
                        account that you want to delete.


                        _*You can also use the check boxes at left to select
                        multiple accounts to delete them all at once._
                      header:
                        anchor: authentication_revoking-tokens
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1537421464104
                    - type: text
                      data: >-
                        ## Copying OAuth Tokens 


                        To access an existing OAuth token to authorize your
                        theme:


                        1. Open the `.txt` file that the BigCommerce control
                        panel generated when you created the API account.


                        _If you did not retain this file, you will need to
                        generate a new token by repeating the Creating an API
                        Account procedure._


                        2. Note the Client ID and Access Token hashes in the
                        file (or in the control-panel modal for your newly
                        created token).


                        3. If you are a merchant granting an outside theme
                        developer access to your store, provide the Client ID
                        and Access Token values to the developer. The developer
                        will need these when [Authorizing and Initializing
                        Stencil](/stencil-docs/getting-started/launching-stencil/authorizing-and-initializing).
                        If you are a merchant developing a theme against your
                        own store, you will use the same two values in the same
                        [Authorizing and Initializing
                        Stencil](/stencil-docs/getting-started/launching-stencil/authorizing-and-initializing)
                        step.
                      header:
                        anchor: 'authentication_copying-oauth-tokens '
              - title: Launching Stencil
                route:
                  path: /launching-stencil
                data:
                  children:
                    - title: Authorizing and Initializing Stencil
                      route:
                        path: /authorizing-and-initializing
                      data:
                        blocks:
                          - type: html
                            data: <h1>Authorizing and Initializing Stencil</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#authorizing_prerequisites\">Prerequisites</a></li>\n    <li><a href=\"#authorizing_authorizing-oauth\">Authorizing with OAuth Tokens</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Prerequisites


                              The following are required from performing
                              previous steps prior to authorizing and
                              Initializing your Stencil theme:


                              * An [API
                              account](/stencil-docs/getting-started/authentication-and-tokens)
                              with the Themes scope set to `read-only` or
                              `modify`

                              * a `Client ID` and `Access Token`, which are both
                              generated when an API account is created


                              **Note:** _`modify` access is required to run the
                              `stencil push` command, which uploads and applies
                              a theme to your store._
                            header:
                              anchor: authorizing_prerequisites
                          - type: callout
                            data:
                              body: >-
                                If you are sharing a theme across storefronts,
                                we strongly recommend that you clone a separate
                                subdirectory (each containing its own `.stencil`
                                file) for each store. This helps isolate and
                                secure each merchant's data.


                                You can clone your `/cornerstone/` subdirectory
                                now to create your first isolated copy, and then
                                switch to the resulting new subdirectory to
                                continue. (Prior to March 2017, Stencil's
                                default subdirectory name was `/stencil/`.)
                              title: ' Best Practice: Isolate Stores by Subdirectory'
                          - type: text
                            data: >-
                              ## Authorizing with OAuth Tokens


                              Use these steps to authorize and initialize
                              Stencil.


                              Use the following steps to authorize your theme
                              using an OAuth API account:


                              1. Have your store API account's `Client ID` and
                              `Access Token` hashes ready. 

                              (Refer back to [Authentication &
                              Tokens](/stencil-docs/getting-started/authentication-and-tokens))


                              2. Starting from the subdirectory for the
                              appropriate theme (and store), initialize Stencil
                              CLI by running the following command (_Windows
                              users need to run this in git bash_):


                              `stencil init`


                              3. You will be prompted to provide the homepage
                              URL of the production store against which you want
                              to develop. This can be your own store, or a
                              client store that you are customizing.


                              4. Next, you will be prompted to enter the port
                              where you would like to run your store on your
                              local machine. This can be any port you like, but
                              we recommend using port 3000.


                              5. Next, you will be prompted: `What is your
                              Stencil OAuth Client ID?` Enter your store API
                              account's Client ID.


                              (If you used this Client ID when you last ran
                              `stencil init`, you'll see it hinted on the
                              command line, and can just confirm it.)


                              6. Finally, you will be prompted: `What is your
                              Stencil OAuth Access Token?` If you entered these
                              credentials when you last ran stencil init, you'll
                              see the token hinted in cleartext. If not, paste
                              your `Access Token` hash onto the command line.
                              Then press Enter.


                              Your terminal window should now confirm that you
                              have successfully initialized Stencil CLI on your
                              local machine. With Stencil CLI initialized, you
                              are ready to start Stencil and begin development.
                            header:
                              anchor: authorizing_authorizing-oauth
                    - title: Troubleshooting Your Setup
                      route:
                        path: /troubleshooting-your-setup
                      data:
                        blocks:
                          - type: html
                            data: <h1>Troubleshooting Your Setup</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#troubleshooting_unsupported\">Unsupported Node Version</a></li>\n    <li><a href=\"#troubleshooting_npm-install\"><code>npm install</code> errors</a></li>\n    <li><a href=\"#troubleshooting_npm-install-stencil-init\">npm install and stencil init Errors</a></li>\n    <li><a href=\"#troubleshooting_stencil-init\">\"stencil init/stencil start errors</a></li>\n    <li><a href=\"#troubleshooting_stencil-start-missing-module\"><code>stencil start</code>/missing module Errors</a></li>\n    <li><a href=\"#troubleshooting_uncaught\">\"Uncaught TypeError: Illegal invocation\" error</a></li>\n    <li><a href=\"#troubleshooting_mac-os\">Mac OS: \"Xcode/iOS license...\" Errors upon Stencil Commands</a></li>\n    <li><a href=\"#troubleshooting_etimeout\">ETIMEOUT Errors on Node >4.4.0</a></li>\n    <li><a href=\"#troubleshooting_stencil-command-not-found\"><code>stencil</code> command not found</a></li>\n    <li><a href=\"#troubleshooting_500-errors\">500 Errors</a></li>\n    <li><a href=\"#troubleshooting_lint-errors\">Lint Errors upon Bundling</a></li>\n    <li><a href=\"#troubleshooting_module-not-found\">\"Module Not Found\" Errors upon Bundling</a></li>\n    <li><a href=\"#troubleshooting_short\">Short or Undescriptive JavaScript Diagnostics</a></li>\n    <li><a href=\"#troubleshooting_tr-300\">TR-300 Error upon Theme Upload</a></li>\n    <li><a href=\"#troubleshooting_uninstalling\">Uninstalling and Reinstalling Stencil CLI</a></li>\n\t</ul>\n</div>"
                          - type: callout
                            data:
                              title: First Check the Terminal Window
                              body: >-
                                For any unexpected behavior that you encounter
                                while developing your Stencil theme, first check
                                your terminal window where you started Stencil
                                CLI. 


                                In some cases, the terminal will provide a
                                verbose error message specifying where to look
                                for problems. In any case, it has the potential
                                to provide further insight on the issue.
                                Diagnostic suggestions are listed on this page
                                for error messages that may not be helpful in
                                revealing the issue you're experiencing.
                          - type: text
                            data: >-
                              ## Unsupported Node Version


                              If you receive the following error message, please
                              reinstall Node.js to a supported "LTS" ("Long-Term
                              Support") version:


                              ```

                              Debug: internal, implementation, error
                                      TypeError: Uncaught error: Object #<Object> has no method 'parse'
                                      at internals.implementation 
                                      (/usr/local/lib/node_modules/stencil-cli/server/plugins/CssCompiler/index.js:32:26)
                              ```


                              On Mac OS, we have tested Stencil CLI most
                              robustly on Node.js version 4.4.0. On Linux, we
                              have tested most robustly on version 4.1.2. On
                              Windows, we have tested most robustly on version
                              4.6.1. You’ll find detailed steps (for each
                              operating system) in these instructions'
                              Installing Stencil Prerequisites by OS section.
                            header:
                              anchor: troubleshooting_unsupported
                          - type: text
                            data: >-
                              ## `npm install` Errors


                              The following headings represent errors that may
                              occur when running the `npm install` command. The
                              content under each heading issues a fix for the
                              issue.


                              ### "Unmet Peer Dependency"


                              If you get any `Unmet Peer Dependency` errors when
                              issuing the `npm install` command – or at other
                              times – make sure you are running the `npm
                              install` command **inside** your theme directory.


                              If running the `npm install ` command inside your
                              theme directory does not resolve the error, try
                              one of the following:


                              * Try removing your theme directory's
                              `/node_modules/` subdirectory, by running `rm -rf
                              node_modules`


                              * Run the `npm cache clean` command


                              * Re-run `npm install`



                              ### Permissions (EPERM or EACCES) Error


                              If you get a file-permissions error such as
                              `EPERM` or `EACCES` when issuing the `npm install`
                              command, try one of the workarounds listed on this
                              [external](https://docs.npmjs.com/getting-started/fixing-npm-permissions)
                              page. 


                              ### "js/bundle" Errors


                              If you get errors of the following type upon
                              executing the `stencil init` command:


                              ```

                              Potentially unhandled rejection [6] TypeError:
                              Error loading "js/bundle" 

                              at
                              file:/Users/<username>/Desktop/Fortune-1.4.6/assets/js/bundle.js


                              Error evaluating
                              file:/Users/<username>/Desktop/Fortune-1.4.6/assets/js/bundle.js


                              Cannot read property 'createElement' of
                              undefined...

                              ```


                              try the following workaround:


                              1. Download and unzip a fresh copy of the theme.


                              3. Refresh theme dependencies by running `npm
                              install && jspm install`


                              3. Run `stencil init`.


                              *You will see the same error message as before,
                              but proceed.*


                              4. Delete the `<theme-name>/assets/js/bundle.js`
                              file.


                              5. Run `stencil init` again.

                              This should now execute properly.

                              6. Run `stencil start`


                              8. Verify your theme's launch at:
                              http://localhost:3000.
                            header:
                              anchor: troubleshooting_npm-install
                          - type: text
                            data: >-
                              ## `npm install` and `stencil init` Errors


                              If you get unexpected error messages when issuing
                              the `npm install` or `stencil init` commands,
                              check your Node.js version and ensure it aligns
                              with a version that is compatible for the Stencil
                              framework.
                            header:
                              anchor: troubleshooting_npm-install-stencil-init
                          - type: text
                            data: >-
                              ## `stencil init`/`stencil start` Errors


                              If you get unexpected error messages or unexpected
                              results upon executing the `stencil init`,
                              `stencil start`, or other Stencil CLI commands,
                              make sure you are working in the subdirectory for
                              the specific theme you intend to launch. 


                              One way of checking what directory you are working
                              in is by running the `pwd` command in your
                              terminal.
                            header:
                              anchor: troubleshooting_stencil-init
                          - type: text
                            data: >-
                              ## `stencil start`/missing module Errors


                              If executing `stencil start` provokes errors like
                              the following


                              ```

                              module.js:327

                              throw err;

                              ^


                              Error: Cannot find module 'webpack'

                              at Function.Module._resolveFilename
                              (module.js:325:15)

                              at Function.Module._load (module.js:276:25)

                              at Module.require (module.js:353:17)

                              at require (internal/module.js:12:17)

                              at Object.
                              (/Users/jane.doe/themes/cornerstone/stencil.conf.js:2:15)

                              at Module._compile (module.js:409:26)

                              at Object.Module._extensions..js
                              (module.js:416:10)

                              at Module.load (module.js:343:32)

                              at Function.Module._load (module.js:300:12)

                              at Module.require (module.js:353:17)

                              ```


                              switch to your theme directory and run `npm
                              install`. Running this command will add the
                              missing JavaScript library dependencies.


                              If you receive the same error again after running
                              `npm install`, you should completely uninstall and
                              reinstall both the Stencil framework and Node.js.
                            header:
                              anchor: troubleshooting_stencil-start-missing-module
                          - type: text
                            data: >-
                              ## "Uncaught TypeError: Illegal invocation" error


                              If you receive an `Uncaught TypeError: Illegal
                              invocation` console error, and previously
                              installed Stencil using the original jspm-based
                              installation flow and later switched to our
                              current webpack installation flow, please remove
                              your theme's `/node_modules/` subdirectory, then
                              re-run `npm install` inside your theme's
                              directory.
                            header:
                              anchor: troubleshooting_uncaught
                          - type: text
                            data: >
                              ## Mac OS: "Xcode/iOS license..." Errors upon
                              Stencil Commands


                              On Mac OS, if you have recently installed a new
                              version of Xcode, the command line will display
                              the following error when you next try to use or
                              reinstall Stencil: 


                              `error: Agreeing to the Xcode/iOS license requires
                              admin privileges, please re-run as root via sudo.`


                              To resolve this error, do the following:

                              * Launch Xcode.

                              * Accept its user agreement.

                              * Quit Xcode.

                              * Re-execute your Stencil command.
                            header:
                              anchor: troubleshooting_mac-os
                          - type: text
                            data: >-
                              ## ETIMEOUT Errors on Node >4.4.0


                              If you are running a version of Node.js higher
                              than 4.4.0, and you receive an `ETIMEOUT` error
                              when running Stencil CLI, re-install the latest
                              version of Stencil CLI to resolve this error by
                              following the workflow in Installing Stencil
                              CLI/Framework.
                            header:
                              anchor: troubleshooting_etimeout
                          - type: text
                            data: >
                              ## `stencil` command not found


                              ### Reinstall Stencil CLI


                              If you receive the error message -bash: `stencil:
                              command not found`, ensure that you have followed
                              the steps on Installing Stencil CLI/Framework or
                              attempt to reinstall the Stencil CLI. 


                              ### Redirect Bash shell


                              If you receive the error message -bash: stencil:
                              command not found, enter echo $NVM_DIR. If this
                              command returns nothing, then run source
                              ~/.bash_profile and try running running stencil
                              commands again.


                              ### Check/Specify `nvm` Version


                              If you receive a `stencil: command not found`
                              error message upon executing stencil start from
                              inside your theme subdirectory: Check whether nvm
                              has installed multiple versions of Node.js, by
                              entering the following command:


                              `ls ~/.nvm/versions/node`


                              If this reports more than one version, specify
                              your platform's supported Node.js
                              `<version_number>` by entering: 


                              `nvm use <version_number>`


                              To prevent this error from recurring, add the same
                              `nvm use <version_number>` command to your
                              ~/.bash_profile file.
                            header:
                              anchor: troubleshooting_stencil-command-not-found
                          - type: text
                            data: >-
                              ## `stencil start` errors


                              ### "Unauthorized...username/token" Error


                              If executing the `stencil start` command generates
                              an `Unauthorized, please use a valid
                              username/token` error: Please make sure that the
                              `.stencil` file contains the correct store URL.
                              Also, verify that you have copied the correct
                              username and token. If you continue to get the
                              same error, please reissue tokens.


                              ### "Unable to load registry %bitbucket%"


                              If you have downloaded and installed a Marketplace
                              theme (other than Cornerstone), and after running
                              stencil start, received the error `Unable to load
                              registry %bitbucket%`: Try this workaround.


                              1. Back up your current theme
                              directory/directories. 

                              (In a default installation, the theme directory is
                              named `.../cornerstone/`. Prior to March 2017,
                              this directory's name defaulted to `.../stencil/`.
                              Use the same substitutions for other code examples
                              on this page.)


                              2. To ensure that you install refreshed
                              dependencies, delete your
                              `<theme-name>/node_modules/` and
                              `<theme-name>/assets/jspm_packages/`
                              subdirectories. (You can check installed versions
                              of dependencies by examining your
                              `<theme-name>/package.json` file.)


                              3. Starting inside your theme directory, enter
                              this alternate sequence of commands:


                              ```

                              npm install -g jspm-git

                              npm install

                              jspm config registries.bitbucket.baseurl
                              git+ssh://git@bitbucket.org/

                              jspm config registries.bitbucket.handler jspm-git

                              jspm install

                              ```


                              4. Re-launch your theme.
                          - type: text
                            data: >-
                              ## 500 Errors


                              If you see errors like or _similar_ to below:


                              `{"statusCode":500,"error":"Internal Server
                              Error","message":"An internal server error
                              occurred"}`


                              they often indicate a template syntax error, such
                              as unmatched or missing punctuation. Check your
                              terminal window for more details.
                            header:
                              anchor: troubleshooting_500-errors
                          - type: text
                            data: >
                              ## Lint Errors upon Bundling


                              If bundling your theme triggers multiple lint
                              errors related to the `bundle.js` file, your theme
                              is missing the `.eslintignore` file. Please
                              retrieve this file from the [Cornerstone
                              repo](https://github.com/bigcommerce/cornerstone),
                              then re-run `stencil bundle`.
                            header:
                              anchor: troubleshooting_lint-errors
                          - type: text
                            data: >-
                              ## "Module Not Found" Errors upon Bundling


                              If you see the following error when running
                              stencil bundle, this is a past bug that has since
                              been corrected.


                              `[ModuleNotFoundError: Module not found: Error:
                              Cannot resolve module 'pace' in...]`


                              To remove the error, please update your
                              Cornerstone version. 
                            header:
                              anchor: troubleshooting_module-not-found
                          - type: text
                            data: >-
                              ## Short or Undescriptive JavaScript Diagnostics


                              If JavaScript errors in your browser's developer
                              tools are not reporting filenames and line
                              numbers, try changing your `webpack.conf.js`
                              file's sourcemap entry from:


                              `devtool: 'eval-cheap-module-source-map'`


                              to:


                              `devtool: 'eval-source-map'`


                              The `eval-cheap-module-source-map` option performs
                              faster rebuilds, but omits line numbers. The
                              `eval-source-map` option is slower, but more
                              verbose. 
                            header:
                              anchor: troubleshooting_short
                          - type: text
                            data: >-
                              ## TR-300 Error upon Theme Upload


                              If uploading your theme triggers a TR-300 error,
                              this can indicate an included source-map file
                              (`bundle.js.map`) that exceeds its size limit of 5
                              MB. If your `bundle.js.map` exceeds that limit,
                              the workaround is to move this file outside your
                              theme directory before re-running `stencil
                              bundle`. 
                            header:
                              anchor: troubleshooting_tr-300
                          - type: text
                            data: >-
                              ## Uninstalling and Reinstalling Stencil CLI


                              If you encounter persistent problems in
                              initializing or starting Stencil, you have the
                              option of completely removing Stencil CLI and
                              doing a fresh reinstall. You would do so as
                              follows:


                              1. From your command line, issue the command:

                              `npm uninstall -g @bigcommerce/stencil-cli`


                              2. Navigate back to the Installing and Launching
                              Stencil section and repeat all installation steps
                              to reinstall dependencies and restore your theme,
                              according to your development scenario.


                              A more-drastic measure is to **also** uninstall
                              and reinstall Stencil CLI's Node.js prerequisites
                              (along with uninstalling Stencil CLI). We do not
                              recommend this, as it might disable other Node.js
                              applications on your local machine.
                            header:
                              anchor: troubleshooting_uninstalling
                    - title: CLI Options and Commands
                      route:
                        path: /stencil-cli-options-and-commands
                      data:
                        blocks:
                          - type: html
                            data: <h1>Stencil CLI Options and Commands</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#stencil_basic-cli\">Basic CLI Options and Commands</a></li>\n    <li><a href=\"#stencil_stencil-start\">Stencil Start Options</a></li>\n    <li><a href=\"#stencil_stencil-push\">Stencil Push Options</a></li>\n    <li><a href=\"#stencil_quick\">Theme Editor Local Launch Quick Reference</a></li>\n    <li><a href=\"#stencil_local-launch-theme\">Local Launch: Theme Only</a></li>\n    <li><a href=\"#stencil_local-launch-theme-and-editor\">Local Launch: Theme and Theme Editor</a>\n    <li><a href=\"#stencil_local-launch-theme-and-editor\">Local Launch: Disabling Caching</a>\n\t</ul>\n</div>"
                          - type: text
                            data: "## Basic CLI Options and Commands\n\nThe syntax to run a basic Stencil CLI command is: `stencil <commands> [options] <parameter>`.\n\nTo see the basic options and commands that the Stencil CLI package supports, enter any of the following forms of the help option on your command line:\n\n```\nstencil\nstencil help\nstencil --help\nstencil -h\n```\n\nYour terminal window will display options and commands listed in the tables below. \n\t\n<table>\n  <tr>\n    <th>Option</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>-h, --help</td>\n    <td>Outputs usage information.</td>\n  </tr>\n  <tr>\n    <td>-V, --version</td>\n    <td>Outputs the version number (which is read from package.json file</span>).</td>\n  </tr>\n</table>\n\n<p></p>\n<table>\n\t\n  <tr>\n    <th>Command</th>\n    <th>Description</th>\n  </tr>\n\t\n  <tr>\n    <td>init</td>\n    <td >Interactively creates a .stencil file, which configures how to run a BigCommerce store locally.</td>\n  </tr>\n\t\n  <tr>\n    <td>start</td>\n    <td>Starts up the BigCommerce store, using theme files in the current directory. \n    </td>\n  </tr>\n\t\n  <tr>\n    <td>bundle</td>\n    <td>Bundles up the theme into a structured .zip file, which can be uploaded to BigCommerce. (Please see restrictions here).</td>\n  </tr>\n  \n  <tr>\n    <td>push</td>\n    <td>Bundles up the theme into a structured .zip file; then directly uploads (pushes) the .zip to BigCommerce.</td>\n  </tr>\n  \n  <tr>\n    <td>release</td>\n    <td>Creates a new release in a theme's GitHub repository. Developers outside BigCommerce can use this for forks (not master) of Stencil's Cornerstone base theme, or for their own parallel themes independent of Cornerstone.</td>\n  </tr>\n  \n  <tr>\n    <td>help &lt;command&gt;</td>\n    <td>display help and return all the options available to use for the specified command. For example, <code>stencil help bundle</code> will return the options that are available to use specifically with the <code>stencil bundle</code> command.\n    </td>\n  </tr> \n\t\n</table>\n"
                            header:
                              anchor: '#stencil_basic-cli'
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1538055264839
                            header:
                              title: Basic Stencil CLI Options and Commands
                          - type: callout
                            data:
                              title: '''stencil start'' and ''stencil push'' Options'
                              body: >-
                                The `stencil start` and `stencil push` CLI
                                Commands have additional custom options that can
                                be used with the command, which are detailed
                                below.
                          - type: text
                            data: "## Stencil Start Options\n\nTo see Stencil CLI's additional options for the `stencil start` command (described above), enter the following on your command line:\n\n`stencil help start` \n\nYour terminal screen should read similar to the table below.\n\n<table>\n\t<tr>\n    <th>Option</th>\n    <th>Definition</th> \n\t</tr>\n  <tr>\n    <td>-V, --version</td>\n    <td>Outputs the version number</td> \n  </tr>\n  <tr>\n    <td>-o, --open</td>\n    <td>Automatically open default browser</td> \n  </tr>\n\t  <tr>\n\t\t\t<td>-v, --variation [name]</td>\n\t\t\t<td>Set which theme variation to use while developing</td> \n  </tr>\n\t  <tr>\n\t\t\t<td>-t, --test</td>\n\t\t\t<td>Enable QA mode which will bundle all javascript for speed to test locally</td> \n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>--tunnel</td>\n\t\t\t<td>Creates a tunnel URL pointing to your local server which is accessible to external visitors</td> \n\t\t</tr>\n\t  <tr>\n\t\t\t<td>-e, --theme-editor</td>\n\t\t\t<td>Run Theme Editor server</td> \n  </tr>\n\t  <tr>\n    <td>-n, --no-cache</td>\n    <td>Turns off caching for API resource data per storefront page. The cache lasts for 5 minutes before automatically refreshing.</td> \n  </tr>\n\t  <tr>\n\t\t\t<td>--theme-editor-port [port]</td>\n\t\t\t<td>Run the Theme Editor on a different port</td> \n  </tr>\n\t  <tr>\n\t\t\t<td>-h, --help</td>\n\t\t\t<td>output usage information</td> \n  </tr>\n</table>\n"
                            header:
                              anchor: '#stencil_stencil-start'
                          - type: text
                            data: "## Stencil Push Options\n\nTo see Stencil CLI's additional options for the stencil push command (described above), enter the following on your command line:\n\n`stencil help push`\n\nYour terminal screen should read similar to the table below.\n\n<table>\n\t<tr>\n    <th>Option</th>\n    <th>Definition</th> \n\t</tr>\n  <tr>\n    <td>-V, --version</td>\n    <td>outputs the version number</td> \n  </tr>\n  <tr>\n    <td>--host [hostname]</td>\n    <td>specify the API host (default: https://api.bigcommerce.com)</td> \n  </tr>\n\t  <tr>\n\t\t\t<td>-f, --file [filename]</td>\n\t\t\t<td>specify the filename of the bundle to upload</td> \n  </tr>\n\t  <tr>\n\t\t\t<td>-s, --save [filename]</td>\n\t\t\t<td>specify the filename to save the bundle as</td> \n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>-a, --activate [variationname]</td>\n\t\t\t<td>This will skip the prompts that normally come up asking if you would like to activate the theme and to specify a variation.\n\nYou can either specify the variation name after the flag or leave it blank to select the first variation (Light for Cornerstone).</td> \n\t\t</tr>\n\t  <tr>\n\t\t\t<td>-h, --help</td>\n\t\t\t<td>Output usage information.</td> \n\t\t</tr>\n</table>"
                            header:
                              anchor: stencil_stencil-push
                          - type: text
                            data: >+
                              You can use the `-f` or `--filename` option in
                              cases where you have already run `stencil bundle`
                              to bundle your theme, but the resulting .zip file
                              has not yet uploaded to BigCommerce. Use the
                              generated .zip file's **filename** as a parameter
                              to identify the generated file in your theme
                              directory. An example of the command is outlined
                              below.


                              `stencil push -f Cornerstone-2.3.2.zip`


                              In this example, `Cornerstone-2.3.2.zip` is the
                              name of the file that was generated after running
                              `stencil bundle`.


                              When you run `stencil push` with the `-f` or
                              `--filename` option, Stencil CLI skips all its
                              bundling steps and diagnostics. It proceeds
                              directly to uploading the specified file,
                              displaying its processing progress bar to show
                              upload status.

                          - type: text
                            data: '---'
                          - type: text
                            data: "## Theme Editor Local Launch Quick Reference\n\n<table> \n\t<tr>\n\t\t<th>Launch type</th>\n\t\t<th>Command</th>\n\t\t<th>Theme Port URL</th>\n\t\t<th>Theme Editor Port URL</th>\n\t</tr>\n\t<tr>\n\t\t<td>Theme Only</td>\n\t\t<td><code>stencil start</code></td>\n\t\t<td>http://localhost:3000 (or custom \n\t\tport)</td>\n\t\t<td>N/A</td>\n\t</tr>\n\t<tr>\n\t\t<td>Theme, Theme Editor</td>\n\t\t<td><code>stencil start -e</code>\n\t\t</td>\n\t\t<td>http://localhost:3000 (or custom \n\t\tport)</td>\n\t\t<td>http://localhost:8181</td>\n\t</tr>\n\t<tr>\n\t\t<td>Theme <b>and</b> Theme Editor \n\t\t</td>\n\t\t<td><code>stencil start -e --theme-\n\t\teditor-port 9000</code></td>\n\t\t<td>http://localhost:3000 (or custom \n\t\tport)</td>\n\t\t<td>http://localhost:9000\n(#### = custom port)</td>\n\t</tr>\n"
                            header:
                              anchor: stencil_quick
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Local Launch: Theme Only


                              After initializing Stencil, issue the following
                              command in your theme directory (_Windows users
                              need to run this in git bash_):


                              `stencil start`


                              When you navigate to your designated port (e.g
                              http://localhost:3000), you should see the
                              storefront you selected with the local Stencil
                              theme applied.


                              ## Troubleshooting Token Errors


                              If you receive the following error message, 


                              `Unauthorized, please use a valid username/token`


                              then store token authentication has failed.


                              In this case, please track back and review the
                              following articles:


                              * [Authentication &
                              Tokens](/stencil-docs/getting-started/authentication-and-tokens):
                              How to issue or reissue tokens in the BigCommerce
                              control panel.

                              * [Authorizing and Initializing
                              Stencil:](/stencil-docs/getting-started/launching-stencil/authorizing-and-initializing):
                              How to initialize Stencil with your username and
                              token.
                            header:
                              anchor: stencil_local-launch-theme
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Local Launch: Theme and Theme Editor


                              If you want to view or reconfigure the Theme
                              Editor/Store Design settings, you can run Stencil
                              locally while also launching a local version of
                              Theme Editor. This will help you see the UX
                              changes that result from editing the `schema.json`
                              file. 


                              To run Stencil locally while also launching a
                              local version of Theme Editor, start in your theme
                              directory and run the same command as above
                              (`stencil start`), but append the `-e` option:


                              `stencil start -e`


                              The Theme Editor server will run in parallel with
                              the stencil theme at
                              [http://localhost:8181](http://localhost:8181/).


                              ### Customizing Theme Editor's Port


                              You can override Theme Editor's default port by
                              appending the "--theme-editor-port [port]" option.
                              For example, to specify port `9000`, you would
                              enter:


                              `stencil start -e --theme-editor-port 9000

                              `


                              To verify Theme Editor's launch, you would then go
                              to http://localhost:9000. Using this option, you
                              can specify any port between `1024` and `65535`.
                            header:
                              anchor: stencil_local-launch-theme-and-editor
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              ## Local Launch: Disabling Caching


                              By default, Stencil caches API resource data per
                              storefront page. This minimizes server traffic
                              while you develop your theme locally.

                              If you prefer to see your changes reflected
                              immediately in your live store, you can turn off
                              caching by appending the `--no-cache` or `-n`
                              option:


                              `stencil start --no-cache`

                              `stencil start -n`


                              ### To re-enable caching:


                              Kill the current Stencil server (_ctrl + c will do
                              the job_) and restart Stencil, this time omitting
                              the `--no-cache` or `-n` option.


                              `stencil start` 
                            header:
                              anchor: stencil_disabling
                          - type: callout
                            data:
                              type: info
                              title: Re-enable Caching
                              body: >-
                                To re-enable caching, kill the current Stencil
                                server by pressing _ctrl + c_ and restart
                                Stencil using the `stencil start` command.
                    - title: Cornerstone File Structure
                      route:
                        path: /cornerstone-file-structure
                      data:
                        blocks:
                          - type: html
                            data: <h1>Cornerstone File Structure</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#cornerstone_cornerstone-file-structure\">The Cornerstone Theme File Structure</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >
                              ## The Cornerstone Theme File Structure


                              Cornerstone is the base Stencil theme, and it is
                              also the default theme for all newly initialized
                              local storefronts. Cornerstone provides the
                              standard file structure, base design pattern, and
                              default file assets necessary to start developing
                              a custom storefront experience.


                              The Cornerstone file structure consists of four
                              main subdirectories. Within those subdirectories,
                              you'll be directed to specific files in the
                              Development Quick Start tutorial and in Stencil
                              reference material:


                              ### `template/pages`

                              `templates/pages` contains all the base template
                              pages used in a BigCommerce online storefront. The
                              pages are grouped by page category. In order to
                              prevent any rendering errors, please avoid
                              changing page names. For details, please see
                              Templates Files > Templates Direcotry > [Pages
                              Subdirectory](/stencil-docs/template-files/templates-directory/pages-subdirectory).



                              ### `template/components`

                              `templates/components` Components consist of code
                              snippets and partials that can be reused
                              throughout your theme. This directory is grouped
                              by component type. For details, please see
                              Templates Files > Templates Direcotry >
                              [Components
                              Subdirectory](/stencil-docs/template-files/templates-directory/components-subdirectory).


                              ### `template/layout`

                              `templates/layout` define the overall structure
                              (header, footer, etc.) for your storefront. You
                              can implement multiple layouts here, for different
                              use cases – to make it easy to switch between
                              different look-and-feel variations for the same
                              theme. For details, please see Templates Files >
                              Templates Direcotry > [Layout
                              Subdirectory](/stencil-docs/template-files/templates-directory/layout-subdirectory).


                              ### `assets/`

                              `assets/` (images, CSS and JavaScript files) will
                              be located in this directory. For details, please
                              see CSS And Design Assets > [Assets
                              Directory](/stencil-docs/css-and-design-assets/assets-directory).


                              ### `lang/`

                              `lang/` contains translation files, including the
                              required `en.json`. For details, please see the
                              _Internationalization/Localization_ section of the
                              documentation.


                              When developing in your local environment, all
                              files that you change in your Stencil theme
                              directory (`/cornerstone/` in our default
                              installation) will be reflected immediately at
                              [http://localhost:3000](http://localhost:3000).
                            header:
                              anchor: cornerstone_cornerstone-file-structure
                  blocks: []
              - title: Advanced Installation Options
                route:
                  path: /advanced-installation-options
                data:
                  blocks: []
                  children:
                    - title: Navigating Your Setup Scenario
                      route:
                        path: /navigating-your-setup-scenario
                      data:
                        blocks:
                          - type: html
                            data: <h1>Navigating Your Setup Scenario</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#navigating_illustration\">Illustration of Stencil's Setup Options</a></li>\n    <li><a href=\"#navigating_initial\">Intial Cornerstone Setup</a></li>\n    <li><a href=\"#navigating_download-and-install\">Download and Install a New Version of Cornerstone</a></li>\n    <li><a href=\"#navigating_download-marketplace\">Download a Marketplace Theme</a></li>\n    <li><a href=\"#navigating_implementing-custom-build\">Implementing a Custom Build System</a></li>\n    <li><a href=\"#navigating_blueprint-store\">Blueprint Store Launched Before January 26th, 2016</a></li>\n\t</ul>\n</div>"
                          - type: callout
                            data:
                              type: warning
                              title: Notes on Dependencies
                              body: >
                                Our installation instructions have been tested
                                on Mac OS X Yosemite, Linux/Ubuntu v.14.04.4,
                                and Windows. Dependencies for other
                                platforms/releases will be added upon further
                                testing.
                          - type: text
                            data: >-
                              ## Illustration of Stencil's Setup Options


                              The diagram below visually illustrates _all_
                              currently supported workflows for setting up a
                              Stencil theme. You will choose one pathway to
                              setup Stencil for your store. The color codes for
                              each setup scenario are as follows: 


                              * [Black arrows: Initial setup with the default
                              Cornerstone theme.](#navigating_initial)


                              * [Orange arrows: Refresh Cornerstone from Theme
                              Marketplace.](#navigating_cornerstone-refresh)


                              * [Purple arrows: Customize a theme (_other than_
                              Cornerstone) downloaded from Theme
                              Marketplace.](#navigating_download-marketplace)


                              * [Green arrows: Configure a custom JavaScript
                              build
                              system](#navigating_implementing-custom-build)


                              * [Blue arrows: Adds onto any of the preceding
                              four scenarios. If developing for a BigCommerce
                              Blueprint production store launched before Jan.
                              26, 2016, you must add one extra step to enable
                              Stencil in the store's control
                              panel.](#navigating_blueprint-store)
                            header:
                              anchor: navigating_illustration
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1538540242143
                            config:
                              centered: true
                              fluid: true
                              bordered: true
                          - type: callout
                            data:
                              title: Detailed Steps Described Below
                              body: >-
                                Continue reading to get a detailed description
                                and breakdown of the steps required for each
                                setup scenario.
                          - type: text
                            data: >-
                              ## Initial Cornerstone Setup 


                              This is the workflow to start developing based on
                              BigCommerce's default Cornerstone theme. This
                              workflow uses Webpack as the JavaScript build
                              system. Steps required:


                              * [Install your necessary
                              prerequisites](/stencil-docs/getting-started/installing-stencil#installing_prerequisites)

                              * [Install Stencil
                              CLI](/stencil-docs/getting-started/installing-stencil#installing_installing-the-stencil-cli)

                              * [Clone the Cornerstone theme using
                              Github](/stencil-docs/getting-started/installing-stencil#installing_cloning-cornerstone)

                              * [Install JavaScript
                              Utilities](/stencil-docs/getting-started/installing-stencil#installing_installing-stencils-js-utilities)

                              * [Create an API Account to prepare store and
                              tokens](/stencil-docs/getting-started/authentication-and-tokens#authentication_creating-an-api-account)



                              Once you have completed these steps, proceed to
                              the _Launching Stencil_ section.
                            header:
                              anchor: navigating_initial
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Download and Install a New Version of
                              Cornerstone 


                              If you would like to download and install a
                              **new** version of Cornerstone from BigCommerce's
                              Theme Marketplace, perform the following steps:


                              * Ensure all necessary prerequisites are installed

                              * [Ensure Stencil CLI is
                              installed](/stencil-docs/getting-started/installing-stencil#installing_installing-the-stencil-cli)

                              * [Download a new Cornerstone .zip
                              file](/stencil-docs/getting-started/advanced-installation-options/downloading-the-cornerstone-theme#downloading_downloading-cornerstone-zip)

                              * [Reinstall JavaScript
                              Utilities](/stencil-docs/getting-started/installing-stencil#installing_installing-stencils-js-utilities)

                              * Repeat steps in _Launching Stencil_
                            header:
                              anchor: navigating_download-and-install
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Download a Marketplace Theme 


                              If you would like to customize a theme _other
                              than_ Cornerstone, follow the required steps to
                              download a theme from BigCommerce's Theme
                              Marketplace. This workflow requires BitBucket.
                              Some earlier theme versions will also require
                              additional steps for the jspm JavaScript build
                              system. Steps required:


                              * [Install all necessary
                              prerequisites](/stencil-docs/getting-started/installing-stencil#installing_prerequisites)

                              * [Install Stencil
                              CLI](/stencil-docs/getting-started/installing-stencil#installing_installing-the-stencil-cli)

                              * [Set up BitBucket and Download the Marketplace
                              theme's .zip
                              file](/stencil-docs/getting-started/advanced-installation-options/downloading-a-marketplace-theme#downloading_setting-up-bitbucket)

                              * [Install JavaScript Utilities within the
                              Marketplace
                              Theme](/stencil-docs/getting-started/installing-stencil#installing_installing-stencils-js-utilities)

                              * [Create an API Account to Prepare Your Store and
                              Tokens](/stencil-docs/getting-started/authentication-and-tokens#authentication_creating-an-api-account)

                              * Complete the steps outlined in _Launching
                              Stencil_
                            header:
                              anchor: navigating_download-marketplace
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Implement a Custom JavaScript Build System 


                              The Stencil framework currently uses Webpack 4 as
                              its default Javascript Build system (jspm for
                              older versions), but if you prefer, you can
                              substitute this for a custom JavaScript build
                              system such as Grunt. Steps recommended:


                              * [Install all necessary
                              prerequisites](/stencil-docs/getting-started/installing-stencil#installing_prerequisites)

                              * [Install Stencil
                              CLI](/stencil-docs/getting-started/installing-stencil#installing_installing-the-stencil-cli)

                              * [Clone the Cornerstone theme using
                              Github](/stencil-docs/getting-started/installing-stencil#installing_cloning-cornerstone)

                              * [Install JavaScript
                              Utilities](/stencil-docs/getting-started/installing-stencil#installing_installing-stencils-js-utilities)

                              * [Configure your custom build
                              system](/stencil-docs/getting-started/advanced-installation-options/configuring-webpack-or-custom-build)

                              * [Create an API Account to Prepare Your Store and
                              Tokens](/stencil-docs/getting-started/authentication-and-tokens)

                              * Proceed to _Launching Stencil_
                            header:
                              anchor: navigating_implementing-custom-build
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Blueprint Store Launched before January 26th,
                              2016


                              If your store is **both**:

                              * running on a Blueprint theme

                              * was launched before Jan. 26th, 2016 


                              and you would like to enable Stencil development
                              on it, you must perform the following steps:


                              * Follow the installation path above that
                              corresponds to your development scenario

                              * Enable Stencil in the store’s control panel
                            header:
                              anchor: navigating_blueprint-store
                    - title: Downloading the Cornerstone Theme
                      route:
                        path: /downloading-the-cornerstone-theme
                      data:
                        blocks:
                          - type: html
                            data: >-
                              <h1>Downloading the Cornerstone Theme from the
                              BigCommerce Control Panel</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#downloading_downloading-cornerstone-zip\">Downloading the Cornerstone .zip file</a></li>\n    <li><a href=\"#downloading_reinstalling-dependencies\">Reinstalling Dependencies and Relaunching</a></li>\n    <li><a href=\"#downloading_next-steps\">Next Steps</a></li>\n\t</ul>\n</div>"
                          - type: callout
                            data:
                              type: error
                              title: Back Up Before Reinstalling
                              body: >-
                                If you are reinstalling over a base theme on
                                which you have already begun development, first
                                back up at least your theme's .stencil file.
                                This file contains your store URL, your
                                BigCommerce username and access tokens, and
                                other basic settings. Preserving those settings
                                will speed up initializing and launching the new
                                version. To allow complete rollback, back up
                                your whole theme directory. (In a current
                                default installation, this directory is named
                                `cornerstone`. Prior to March 2017, this
                                directory's name defaulted to `stencil`).
                          - type: text
                            data: "## Downloading the Cornerstone .zip file from the Control Panel\n\n_If you have not yet added Cornerstone to your store, navigate to `Storefront` > `Themes Marketplace` and add the Cornerstone theme to your store._\n\nUse these steps to download a the Cornerstone theme from the store Control Panel: \n\n**Note:** The steps below are required only if you are downloading a clean copy of Stencil's default Cornerstone theme, specifically from the BigCommerce Theme Marketplace. \n\nIf you are downloading a Marketplace theme other than Cornerstone for customization, you must follow the workflow outlined in [Downloading a Marketplace Themes](/stencil-docs/getting-started/advanced-installation-options/downloading-a-marketplace-theme).\n    \n* Go to `Storefront` -> `My Themes`.\n\n* Click the Cornerstone theme's thumbnail:\n\t* If Cornerstone is the store's currently active theme, click its image thumbnail at the top of the page, under the `Current Theme` heading.\n\t* If Cornerstone is _not_ the current theme, scroll down below the lower My Themes subheading, find, and click the Cornerstone thumbnail.\n\n_The Cornerstone theme's description should zoom to full-page and display a Theme Options drop-down list at the upper right._\n\n* From the `Theme Options` drop-down list, select `Download theme file` to download this Cornerstone release as it was refreshed on Theme Marketplace. \n\n* Unpack the zipped theme to a working directory. This can either be the directory where you have been developing your theme or a new directory.\n"
                            header:
                              anchor: '#downloading_downloading-cornerstone-zip'
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              ## Reinstalling Dependencies and Relaunching


                              * Ensure that your theme includes all current
                              dependencies by repeating the [Stencil Utils
                              installation.](https://developer.bigcommerce.com/stencil-docs/getting-started/installing-stencil#installing_installing-stencils-js-utilities) 


                              * To relaunch, repeat the steps listed in the
                              _Launching Stencil_ section.
                            header:
                              anchor: '#downloading_reinstalling-dependencies'
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Next Steps


                              When you are ready to upload your custom theme to
                              a store, follow the instructions in [Bundling and
                              Uploading a
                              Theme](/stencil-docs/prepare-and-upload-a-theme/bundling-and-uploading).
                            header:
                              anchor: '#downloading_next-steps'
                          - type: callout
                            data:
                              body: >-
                                Distribution of Cornerstone-based themes is
                                subject to BigCommerce's Cornerstone license,
                                including the mandatory incorporation of
                                BigCommerce's copyright statement.
                              title: Distribution of Cornerstone-based Themes
                              type: error
                    - title: Downloading a Marketplace Theme
                      route:
                        path: /downloading-a-marketplace-theme
                      data:
                        blocks:
                          - type: html
                            data: >-
                              <h1>Downloading a Marketplace Theme from the
                              BigCommerce Control Panel</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#downloading_setting-up-bitbucket\">Setting Up BitBucket SSH Keys</a></li>\n    <li><a href=\"#downloading_downloading-a-marketplace-theme\">Downloading a Marketplace Theme for Customization</a></li>\n    <li><a href=\"#downloading_checking-themes-version\">Checking the Theme's Version</a></li>\n    <li><a href=\"#downloading_jspm-steps\">jspm Steps for Earlier Versions</a></li>\n    <li><a href=\"#downloading_installing-modules\">Installing Modules (Webpack themes)</a></li>\n    <li><a href=\"#downloading_next-steps\">Next Steps</a></li>\n    </ul>\n</div>"
                          - type: callout
                            data:
                              body: >
                                BitBucket registry access is required for all
                                Pixel Union Marketplace Themes. See [Setting Up
                                BitBucket SSH Keys for Pixel Union Marketplace
                                Themes](#downloading_setting-up-bitbucket) for
                                steps to complete this. 
                              title: BitBucket Registry Access
                              type: warning
                          - type: text
                            data: >-
                              ## Setting Up BitBucket SSH Keys for Pixel Union
                              Marketplace Themes 


                              To set up Stencil CLI for Pixel Union Themes, you
                              must authorize communication among your local
                              system, the BitBucket registry, and GitHub.
                            header:
                              anchor: downloading_setting-up-bitbucket
                          - type: callout
                            data:
                              type: warning
                              body: >-
                                Steps beyond this point require that you have
                                active accounts on both BitBucket and GitHub.
                              title: BitBucket and Github Accounts Required
                          - type: text
                            data: >+
                              To authorize ongoing communication, you must set
                              up a secure shell (SSH) key that is shared between
                              BitBucket and GitHub. This is a multi-step
                              process, which is beyond the scope of this
                              documentation. However, we have tested the
                              following instructions and found them to be
                              reliable:


                              * [Setting up SSH for Git on BitBucket](

                              https://confluence.atlassian.com/bitbucket/set-up-ssh-for-git-728138079.html)


                              _Follow the default instructions to create a key
                              in your `~/.ssh/config`_


                              * [Setting up SSH on GitHub (a series of linked
                              steps)](

                              https://help.github.com/articles/connecting-to-github-with-ssh/)

                          - type: callout
                            data:
                              body: >-
                                Marketplace themes other than Cornerstone must
                                be purchased in order to be downloadable.


                                You are entitled to customize a free or
                                purchased theme for a store that you support.
                                However, the theme's original creator retains
                                rights to that theme's design. So, except for
                                Cornerstone-based themes, you may not upload a
                                derived theme to a public theme marketplace
                                (whether BigCommerce's or third-party), nor sell
                                it privately.
                              title: ' Theme Access, Copyright/Ownership, and Distribution'
                          - type: text
                            data: "## Downloading a Marketplace Theme for Customization\n\nUse these steps to download a theme (other than Cornerstone) available in the store control panel's Storefront Design area. \n\n1. If you have not yet added the theme to your store, start at **Storefront Design** > **Themes Marketplace**, and add the theme.\n\n2. Go to **Storefront Design** > **My Themes**.\n\n3. Click the theme's thumbnail:\n\t \n\t* To download the store's currently active theme, click the image thumbnail at the top of the page, under the Current Theme heading.\n\t\n\t* To download an inactive theme, scroll down below the lower My Themes subheading, and click the appropriate theme's thumbnail.\n\nYour selected theme will zoom up to a full-page description and display a Theme Options drop-down list at the upper right.\n\n4. Note the version number displayed under the theme's title and credits. At Checking the Theme's Version below, you will use this number to choose between two installation flows.\n\n5. From the Theme Options drop-down list, select the appropriate Download option. (The options visible depend on your theme's current state:)\n\n\t* Download current theme: Download the theme version that is now active on the storefront. (This option appears only if you selected the Current Theme.)\n\n\t* Download your latest customizations: Download the theme's most recently saved version. (This option appears only for themes that have been customized for this store.)\n\n\t* Download theme file: Download the theme as it was originally uploaded to Theme Marketplace. \n\n6. Unpack the zipped theme to a working directory.\n(In the remainder of this documentation, substitute this working directory's name for the default `stencil` path or the `theme-name` placeholder.)"
                            header:
                              anchor: downloading_downloading-a-marketplace-theme
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1538543505088
                            header:
                              title: Theme Options
                              subtitle: 'Dropdown list options as related to step #5'
                            config:
                              centered: true
                              fluid: true
                              bordered: true
                              maxWidth: '600'
                              maxHeight: '1000'
                          - type: callout
                            data:
                              body: >-
                                Some versions of the BigCommerce control panel
                                offer you shortcuts for steps 3–5 above,
                                removing the need to click the theme
                                card/thumbnail:


                                * For your store's currently active theme, look
                                for a version number to the right of the
                                thumbnail. You can select the Advanced drop-down
                                list to display options similar to those at step
                                5 above.


                                * For inactive themes, look for a version number
                                at the theme card's lower left. Also, you can
                                select the "..." menu at the theme card's lower
                                right to display options similar to those at
                                step 5 above.
                              title: Theme Download Shortcuts
                          - type: text
                            data: >
                              ## Checking the Theme's Version


                              Refer to the theme's version number that you noted
                              above at Downloading a Theme for Customization:


                              * If the version number is 1.10.0 or higher, the
                              theme uses Webpack as its JavaScript build system.
                              Skip ahead to the simplified installation
                              instructions in Installing Modules (Webpack
                              Themes).


                              * If the theme's version number is lower than
                              1.10.0, the theme uses jspm as its JavaScript
                              build system. Follow the steps outlined on the
                              jspm tab below on [jspm Steps to install modules
                              for Stencil
                              Themes](#downloading_checking-modules).
                            header:
                              anchor: downloading_checking-themes-version
                          - type: callout
                            data:
                              body: >-
                                For version numbers below 1.10.0, consider using
                                the options My Themes option in the control
                                panel to download a newer version of the same
                                theme. This will allow you to jump ahead to the
                                streamlined instructions below at Installing
                                Modules (Webpack Themes).


                                **Note**: These version numbers do not apply to
                                the Cornerstone theme. All currently supported
                                Cornerstone versions use Webpack. A clean
                                version of the theme can be downloaded using the
                                instructions in [Downloading the Cornerstone
                                Theme]().
                              title: Consider Updating Your Theme
                              type: warning
                          - type: tabs
                            data:
                              children:
                                - title: Webpack
                                  blocks:
                                    - type: text
                                      data: >-
                                        ## Installing Modules for Webpack themes


                                        For Marketplace themes whose version
                                        number is 1.10.0 or higher, simply use
                                        npm to install the modules required to
                                        access Stencil JavaScript events:


                                        1. Navigate to your theme directory.
                                        This example assumes that this target
                                        directory has the default name
                                        Cornerstone:


                                        `cd cornerstone`


                                        2. Within that directory, install the
                                        stencil-utils module to ensure that all
                                        your dependencies are up to date:


                                        `npm install`
                                - title: jspm
                                  blocks:
                                    - type: text
                                      data: >-
                                        ## Legacy: Configuring themes with jspm
                                        (Marketplace theme versions earlier than
                                        1.10.0)


                                        * Installing jspm

                                        * Registering the jspm Instance

                                        * Installing jspm-git

                                        * Adding BitBucket as a jspm registry

                                        * Installing Modules (jspm Themes)
                                    - type: text
                                      data: >-
                                        Use the following steps for Marketplace
                                        themes (other than Cornerstone) for
                                        which the version number is lower than
                                        1.10.0


                                        ## Installing jspm 


                                        You must [install jspm](http://jspm.io)
                                        to manage your pre-1.10.0 theme's
                                        JavaScript dependencies. We have tested
                                        Stencil on jspm version 0.16.30 for Mac
                                        OS and Linux, and on version 0.16.31 for
                                        Windows. Use the following npm command
                                        to install a tested version of jspm with
                                        global scope - for Mac OS or Linux: 


                                        `npm install -g jspm@0.16.30`


                                        Or, for Windows:


                                        `npm install -g jspm@0.16.31`


                                        You can use the same command to upgrade
                                        an earlier jspm installation to a
                                        Stencil-supported version.
                                    - type: text
                                      data: >
                                        ## Registering the jspm Instance 


                                        Next, register your jspm instance with
                                        GitHub.

                                        Navigate to your [GitHub Personal Access
                                        Tokens
                                        page](https://github.com/settings/tokens).


                                        Generate a new personal access token
                                        with the name Stencil and scope repo.
                                        GitHub provides specific instructions
                                        [here](https://help.github.com/articles/generating-an-ssh-key/).


                                        Verify that your new token includes the
                                        following scopes: 


                                        * `repo:status`

                                        * `repo_deployment`

                                        * `public_repo`


                                        Once you have generated your token, run
                                        the following command to associate your
                                        jspm module with your GitHub account:


                                        `jspm registry config github`


                                        You will be prompted (`"Set up GitHub
                                        credentials?`) to enter your
                                        authentication token. Copy the personal
                                        access token you created above and paste
                                        it in.
                                    - type: text
                                      data: >-
                                        ## Installing jspm-git 


                                        For the next step, you will need the
                                        [jspm-git registry
                                        plug-in](https://www.npmjs.com/package/jspm-git\).


                                        To install it with global scope, enter
                                        the following on a command line:

                                        `npm install -g jspm-git`


                                        If you already have an earlier version
                                        of jspm-git installed, you might need to
                                        update it to handle Git projects with
                                        two-digit version numbers (such as
                                        `1.10.0`). If so, use this command:


                                        `npm upgrade jspm-git@latest`
                                    - type: text
                                      data: >-
                                        ## Adding BitBucket as a jspm Registry 


                                        Working with downloaded Marketplace
                                        themes requires that you next add
                                        BitBucket as a registry for jspm. To
                                        proceed, set up a
                                        [BitBucket](https://bitbucket.org/product)
                                        account, if you do not already have one.


                                        Next, enter the following on a command
                                        line:


                                        `jspm registry create bitbucket
                                        jspm-git`


                                        You will be prompted for a base URL for
                                        your git server. Enter the following:
                                        `ssh://git@bitbucket.org`
                                    - type: text
                                      data: "## Installing Modules (jspm Themes)\n\t\nNext, install the npm and jspm modules required to access Stencil JavaScript events: Navigate to your theme directory. \n\nThis example assumes that this target directory has the default name `stencil`\n\n`cd stencil` \n\nWithin that directory, install (or reinstall) the `stencil-utils` module to ensure that all your dependencies are up to date:`npm install` Then execute the following command to complete installation: `jspm install`"
                            header:
                              title: >-
                                Steps to Install Modules for (Webpack or jspm)
                                Stencil Themes 
                              anchor: downloading_checking-modules
                          - type: text
                            data: >
                              ## Next Steps


                              To authorize, initialize, and launch your theme,
                              follow the steps in [Launching
                              Stencil](/stencil-docs/getting-started/launching-stencil)
                              section.


                              Later, when you are ready to upload your
                              customized theme to a store, you should follow the
                              zipping and uploading instructions in Bundling and
                              Submitting a Theme and Troubleshooting Theme
                              Uploads.
                            header:
                              anchor: downloading_next-steps
                          - type: callout
                            data:
                              title: 'BitBucket Reauthentication '
                              body: >-
                                When you issue the `stencil init` command to
                                [authorize and initialize
                                Stencil](/stencil-docs/getting-started/launching-stencil/authorizing-and-initializing),
                                you might receive error messages about resolving
                                BitBucket as an SSH host. These errors occur
                                when you have not recently logged into
                                BitBucket. 


                                When prompted, enter the BitBucket password you
                                used in Setting Up BitBucket SSH Keys above.
                                This will clear the errors and allow you to
                                proceed.
                              type: warning
                    - title: Theme Updates & Version Control
                      route:
                        path: /theme-updates-and-version-control
                      data:
                        blocks:
                          - type: html
                            data: <h1>Theme Updates and Version Control</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#theme-updates_customizing\">Customizing Strategically for Easier Updates</a></li>\n    <li><a href=\"#theme-updates_goruck-best-pracs\">GoRuck's Best Practices for Handling Theme Updates</a></li>\n    <li><a href=\"#theme-updates_synchronizing-cornerstone\">Synchronizing Your Theme With Cornerstone's Updates</a></li>\n    <li><a href=\"#theme-updates_synchronizing-multiple\">Synchronizing Updates for Multiple Themes</a></li>\n\t</ul>\n</div>\n\n"
                          - type: callout
                            data:
                              title: Distributed Version Control via Git
                              body: >-
                                Many techniques discussed below rely on GitHub's
                                _distributed version control_ model and
                                features. For the underlying principles, please
                                see [Git's own
                                documentation](https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control).
                          - type: text
                            data: >-
                              ## Customizing Strategically for Easier Updates


                              In order to keep your store and Stencil theme
                              performant, it's crucial to know the best way to
                              set up your customized Stencil theme in order to
                              smoothly incorporate future bug fixes,
                              enhancements, and updates that are applied to the
                              base theme. 
                            header:
                              anchor: theme-updates_customizing
                          - type: text
                            data: '---'
                          - type: text
                            data: "## GoRuck's Best Practices for Handling Theme Updates\n\nThe guidelines provided are from Web Developement team from the BigCommerce client, [GoRuck](https://www.goruck.com/). \n\nGoRuck's scenario addresses maintaining a single custom theme that is based on a third-party Marketplace theme (a theme other than Cornerstone). These guidelines can also apply to maintaining a custom theme based on Stencil's default Cornerstone theme.\n\n### Handling and Managing Theme Updates\n\n_We've made significant changes to our theme, and one principle that I've found successful is isolating my changes as much as possible. I try to put my changes into their own files, whether they're changes to templates, JavaScript, or SCSS._\n\n_I also name all my files, CSS classes and identifiers, and JavaScript methods and classes with a `gr-` prefix (as an abbreviation for our company, GORUCK LLC). Also, any changes I make to standard theme files are identified with a comment, such as:_\n\n`//Go Ruck Customization`\n\t\t\n_For example, I have a file in `assets/scss/` named `gr-theme.scss`. All of the styles I've added to the theme are either in this file, or imported by this file. So for styling, my only changes to the theme itself are in a handful of places where I had to change an existing theme style (identified with a comment), plus this one line in `templates/layout/base.html`:_\n\n`{{{stylesheet '/assets/css/gr-theme.css'}}}`\n\n_I've found that this approach provides several advantages:_\n\n* It makes it easier to distinguish my custom code from code supplied by the default theme.\n* It makes it less likely that my code will get intermingled with the standard theme code. This, in turn, prevents my code from unexpectedly being affected by theme updates.\n* It makes it easier to merge base-theme updates into my theme code.\n\n### Comparing and Merging Theme Updates\n\n_Having isolated my changes as much as I can, I identify theme changes and updates by comparing base themes, rather than by comparing base themes to my customized theme. When a new version of the theme is released, I download the `.zip` file from the BigCommerce Control Panel._\n\n_I then use a desktop diff tool (Beyond Compare) to \ncompare the new version to the .zip file of the theme's previous release. I ignore changes in the .zip file's\n `meta/` and `parsed/` folders, and to its `manifest.json`, and do a `Compare Contents` on the rest of the files._\n\nUltimately, I need to examine the changes carefully, to identify any changes that might affect, or be affected by, my customizations. And I need to test thoroughly. But comparing the stock themes to each other reduces the number of changes I have to examine. \n\nAlso, because I isolate my changes, most of the theme changes can be copied directly into the corresponding file in my customized theme. In practice, this means that I can limit my testing to the areas affected by changes in the standard theme, rather than having to re-test all my own changes.\n\nI personally find that it is also helpful to migrate *every* theme update into my customized version, as the update is released. If I were to wait, and to allow changes to accumulate and become more substantial, I think it would be more difficult to adequately test – and correctly integrate – the changes. Similarly, I'm grateful to the developer of our base theme (Pixel Union) for updates that have always made small, incremental changes.\n\n### Dynamic Content Injection\n\n_We've also come up with a variety of techniques for dynamically placing content on a page. For example, we can dynamically add tabs to a product page, using content stored on our WebDAV. Similarly, we can inject content from an external file into the body of a page. This allows us to put something that appears in many places, like a sizing chart, in a single place where it can be easily updated._\n\n_Or, we can use the BigCommerce control panel's various HTML editors – for Products, Categories, and Content > Web Pages – to inject content into predefined \"dropzones\" (custom div's). This allows us to generate a wide variety of content pages using a single custom template._\n\nAll of these techniques minimize the complexity of merging base-theme updates into our customized theme. For further details and examples on how we implement these techniques, see [Dynamic Content Rendering on Stencil Storefronts](/stencil-docs/conditional-logic-examples/dynamic-content-rendering)."
                            header:
                              anchor: theme-updates_goruck-best-pracs
                          - type: text
                            data: '---'
                          - type: text
                            data: >+
                              ## Synchronizing Your Theme With Cornerstone's
                              Updates


                              This section addresses two methods that will allow
                              you to keep your customized Stencil theme up to
                              date with Cornerstone's updates, enhancements, and
                              bug fixes:


                              * Updating Lightly Customized Themes

                              * Updating Heavily Customized Themes


                              We've adapted these tips from one a Stencil theme
                              developer who is an active member of the
                              BigCommerce Community.


                              ### Updating Lightly Customized Themes


                              In this scenario, you can use Git's cherry-pick
                              option to merge in specific Cornerstone commits.


                              Use the Stencil Framework Release Notes to look up
                              specific updates' commit hashes on the Cornerstone
                              repository.


                              See [this explanation of how to use the
                              cherry-pick
                              option](https://stackoverflow.com/questions/9339429/what-does-cherry-picking-a-commit-with-git-mean)
                              (Stack Overflow).


                              ### Updating Highly Customized Themes


                              Here, unexpected errors from automatic merges can
                              be time-consuming to undo. So, consider this
                              handtooled approach:


                              Use GitHub's Web interface to inspect each
                              Cornerstone commit (change) of interest. Each
                              commit will show you – for all changed files – a
                              diff view highlighting any deletions (left/red)
                              and any insertions (right/green).


                              For changes that you want to incorporate into your
                              theme, access the source code.


                              As illustrated below, you can either access
                              individual files via Github's Raw view, or you can
                              download a .zip of the whole Cornerstone repo in
                              order to access all files locally.


                              Manually edit the changes into your theme's
                              affected files.


                              ### Accessing Individual Files


                              In the file-by-file approach: For each commit that
                              you would like to incorporate into your custom
                              theme, do the following for each of the commit's
                              changed files.


                              In GitHub's diff view, click the View button at
                              the upper right. (We show it highlighted with a
                              red border and a tooltip.) You will see the file's
                              full contents, as shown below.


                              Click the Raw button at the upper right (which we
                              show highlighted in red). This will reveal the
                              file's full contents as plaintext – allowing you
                              to copy and paste without picking up the table
                              metadata used to display line numbering.


                              ### Downloading the Cornerstone Repository


                              This approach downloads all theme files at once,
                              allowing you to copy/paste their relevant contents
                              locally.


                              1. Navigate to the [Cornerstone Github
                              Repository](https://github.com/bigcommerce/cornerstone).

                              2. On the right hand side of the page, click the
                              green `Clone or download` button, and select
                              Download ZIP.



                            header:
                              anchor: theme-updates_synchronizing-cornerstone
                          - type: text
                            data: >-
                              ## Synchronizing Updates for Multiple Themes


                              These tips run from simpler to more-complex
                              scenarios, with a similar progression from simpler
                              to more-complex tools.


                              ### Enlist Your Clients in Future-Proofing

                              Warn your clients that editing their themes' .html
                              files (via Edit Theme Files) will complicate
                              future theme upgrades. Ask clients to keep a
                              record of such changes, so that when you release a
                              theme update, they can reapply their changes
                              themselves.


                              ### Max Out Variations

                              For very simple theme differences (like changing
                              color values), you can maintain a different theme
                              variation per storefront or use case. Given
                              Stencil's limit of four variations per theme, this
                              approach obviously has limited scalability.


                              ### Customize Outside the Theme

                              Rely as much as possible on dynamic aspects of the
                              BigCommerce control panel, like the Footer Scripts
                              editor. (Control‑panel customizations are saved
                              per store, without complicating your theme's
                              codebase.) For other examples of control-panel
                              options, please see Dynamic Content Injection
                              above.


                              ### Use Conditional Logic within Master Templates

                              For subtle changes to a portion of a template
                              file, use Handlebars helpers and conditionals to
                              render different HTML for each client's flavor of
                              the theme.


                              ### Parallel GitHub Repo's

                              Where different clients' theme flavors diverge
                              into completely custom pages – for example, each
                              client has a wildly different homepage layout –
                              Git's systematic version control helps. You will
                              probably want to fork or branch separate repo's,
                              one per client, and maintain/update them in
                              parallel.


                              As with relying on theme variations, this approach
                              has limited scalability. Beyond a certain number
                              of clients/themes (certainly by 10), it becomes
                              cumbersome.


                              ### Buffered Updates to Multiple Themes

                              For greater scalability, you might choose to
                              create your own master fork/branch of Cornerstone
                              for your group of themes. Keep that fork/branch in
                              sync with Cornerstone updates, then cascade the
                              updates to theme-specific repo's that you
                              fork/branch from this master. (This extends the
                              approach of isolating customizations, outlined
                              above.)
                            header:
                              anchor: theme-updates_synchronizing-multiple
                    - title: Configuring Webpack or a Custom Build System
                      route:
                        path: /configuring-webpack-or-custom-build
                      data:
                        blocks:
                          - type: html
                            data: >-
                              <h1>Configuring Webpack or a Custom Build
                              System</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#configuring_webpack-jspm-other\">Webpack, jspm, or Other JavaScript Managers</a></li>\n    <li><a href=\"#configuring_webpack-specific\">Webpack-Specific Configuration</a></li>\n    <li><a href=\"#configuring_build-system\">Build-System Configuration File</a></li>\n    <li><a href=\"#configuring_watched-folders\">Watched Folders: watchOptions Object</a></li>\n    <li><a href=\"#configuring_javascript-rebundling\">JavaScript Rebundling: development Function</a></li>\n    <li><a href=\"#configuring_theme-packaging\">Theme Packaging: production Function</a></li>\n\t</ul>\n</div>\n\n\n\n\n"
                          - type: text
                            data: >-
                              ## Webpack, jspm, or Other JavaScript Managers


                              Stencil themes are Node.js applications, and
                              therefore contain dependencies on other JavaScript
                              libraries. For the default Cornerstone theme, we
                              provide the
                              [Webpack](https://webpack.github.io/docs/) build
                              manager to handle these dependencies. 


                              As you develop and customize a theme based on
                              Cornerstone, you have option to reconfigure
                              Webpack's watched folders, and to even substitute
                              a different build system. These options are
                              explained below.


                              All themes in the BigCommerce Theme Marketplace
                              use Webpack. However, older versions of certain
                              themes used the jspm JavaScript dependency manager
                              instead of Webpack. Please see this page to
                              determine (by version number) whether you are
                              developing based on one of these earlier versions,
                              and to find the required jspm setup procedures.
                            header:
                              anchor: configuring_webpack-jspm-other
                          - type: callout
                            data:
                              type: info
                              body: >-
                                The steps below are required only if you plan to
                                modify or override the default Webpack-based
                                workflow that installs with Stencil's default
                                Cornerstone theme or and current theme in the
                                BigCommerce Theme Marketplace. If you do not
                                require these advanced configuration options,
                                you can safely skip this page.
                              title: Optional Workflow
                          - type: text
                            data: >-
                              ## Webpack-Specific Javascript Diagnostics


                              The following Webpack configuration options can
                              aid in troubleshooting.


                              If JavaScript errors in your browser's developer
                              tools are not reporting filenames and line
                              numbers, try changing your `webpack.conf.js`
                              file's
                              [sourcemap](https://webpack.js.org/guides/build-performance/#devtool)
                              entry from:


                              ```

                              devtool: 'source-map'

                              ```

                              to:


                              ```

                              devtool: 'eval-source-map'

                              ```


                              The `eval-source-map` option is slower, but more
                              verbose. This [Webpack Devtool
                              Configuration](https://webpack.js.org/configuration/devtool/)
                              article provides an overview of all devtool
                              options and details regarding each.
                            header:
                              anchor: configuring_webpack-specific
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Build-System Configuration File


                              To take advantage of automatic JavaScript bundling
                              and browser refresh, Stencil themes require the
                              [`stencil.conf.js`](https://github.com/bigcommerce/cornerstone/blob/master/stencil.conf.js)
                              file. If you would like to enable a custom build
                              system, you will need to edit this file.


                              Within `stencil.conf.js`, Stencil CLI looks for
                              the exported `watchOptions` object, and
                              `development` and `production` callbacks, shown
                              below. 


                              Continue reading to take a closer look at each of
                              these three references.
                            header:
                              anchor: configuring_build-system
                          - type: text
                            data: >-
                              ## Watched Folders: watchOptions Object


                              The `watchOptions` object defines directories for
                              the [Browsersync](https://browsersync.io/docs)
                              preview engine to watch or ignore, in two
                              respective lists. You are free to edit these
                              lists:


                              ```

                              var watchOptions = {
                                  // If files in these directories change, reload the page.
                                  files: [
                                      '/templates',
                                      '/lang'
                                  ],

                                  //Do not watch files in these directories
                                   ignored: [
                                      '/assets/scss',
                                      '/assets/less',
                                      '/assets/css',
                                      '/assets/dist',
                                  ]
                              };

                              ```
                            header:
                              anchor: configuring_watched-folders
                          - type: text
                            data: >-
                              ### JavaScript Rebundling: `development` Function


                              Upon the command-line instruction `stencil start`,
                              Stencil CLI will look for and call the
                              `development` function. 


                              In the base Cornerstone theme, we have created a
                              Webpack watcher to trigger a browser reload
                              whenever theme edits cause JavaScript to be
                              rebundled to the theme's `bundle.js` file. This
                              watcher uses options configured in the
                              `webpack.conf.js` file passed by `webpackConfig`.
                              So a JavaScript rebuild will refresh the browser:


                              ```

                              function development() {
                                  webpack(webpackConfig).watch({}, err => {
                                      if (err) {
                                          console.error(err.message, err.details);
                                      }

                                      process.send('reload');
                                  });
                              }

                              ```
                            header:
                              anchor: configuring_javascript-rebundling
                          - type: text
                            data: >-
                              ## Theme Packaging: `production` Function 


                              When you issue the command-line instruction
                              `stencil bundle`, to process and package a
                              completed theme for upload to a store, Stencil CLI
                              will look for and call the `production` function.
                              This function passes a callback as its first
                              argument to support asynchronous builds. 


                              The callback must be invoked somewhere inside the
                              `production` function to notify Stencil CLI that
                              the theme-specific build has completed and is
                              ready to package:


                              ```

                              function production() {
                                  webpackConfig.watch = false;
                                  webpackConfig.devtool = false;
                                  webpackConfig.plugins.push(new webpack.LoaderOptionsPlugin({
                                      minimize: true,
                                  }));
                                  webpackConfig.plugins.push(new webpack.optimize.UglifyJsPlugin({
                                      comments: false,
                                      compress: {
                                          warnings: true,
                                      },
                                      sourceMap: false, // Toggle to turn on source maps.
                                  }));

                                  webpack(webpackConfig).run(err => {
                                      if (err) {
                                          console.error(err.message, err.details);
                                          throw err;
                                      }

                                      process.send('done');
                                  });
                              }


                              if (process.send) {
                                  // running as a forked worker
                                  process.on('message', message => {
                                      if (message === 'development') {
                                          development();
                                      }

                                      if (message === 'production') {
                                          production();
                                      }
                                  });

                                  process.send('ready');
                              }

                              ```
                            header:
                              anchor: configuring_theme-packaging
            blocks: []
        - title: Development Quickstart
          route:
            path: /development-quickstart
          data:
            children:
              - title: Customizing a Theme
                route:
                  path: /customizing-a-theme
                data:
                  blocks:
                    - type: html
                      data: <h1>Customizing a Theme</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#customizing_video\">Customizing a Theme: Video Series</a></li>\n\t\t<li><a href=\"#customizing_config-json\">Configuring config.json Keys</a></li>\n    <li><a href=\"#customizing_basic-changes\">Making Basic Design/Layout Changes</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Customizing a Theme: Video Series


                        If you prefer to consume by watching video tutorials,
                        this video series will quickly get you started in
                        editing and customizing your Stencil theme.


                        1. [Customizing a Theme (Part 1) - Config.json and
                        Templates
                        Directory](https://www.youtube.com/watch?v=HORseXHq-nI&index=6&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0)

                        2. [Customizing a Theme (Part 2) - Lang and Assets
                        Directories](https://www.youtube.com/watch?v=OUg8ksWQGA0&index=7&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0)

                        3. [Customizing a Theme (Part 3) - Custom Pages, Fonts,
                        and
                        Icons](https://www.youtube.com/watch?v=ZwrVN5QrEZY&index=8&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0)


                        Continue reading if you would like information to
                        supplement the videos, or if you would get started
                        customizing your theme by reading and following along.
                      header:
                        anchor: customizing_video
                    - type: text
                      data: "## Configuring config.json Keys\n\n**Note:** these instructions will refer to the top-level theme directory as _cornerstone_.\n\nThe first thing you must do when beginning theme developement is configure certain values in the [cornerstone/config.json file](https://github.com/bigcommerce/cornerstone/blob/master/config.json). For example, here are the first few key/value sets in Cornerstone's config.json:\n\n```\n{\n\"name\": \"Cornerstone\",\n\"version\": \"1.0.0\",\n\"meta\": {\n  \"price\": 0,\n   \"documentation_url\": \t\t\n   \"https://support.bigcommerce.com/articles/Public/Cornerstone-\n   \tTheme-Manual\",\n  ...\n  }\n}\n```\n\nFor further details about `config.json` settings and a breakdown of each key/value set, see the in-depth [config.json metadata article](/stencil-docs/stencil-theme-editor/config-json-metadata). \n\nThe next code block shows how you might change these values to reflect your own theme’s name, version number, price on Theme Marketplace, and documentation URL:\n\n```\n{\n\"name\": \"MyTheme\",\n\"version\": \"1.1.2\",\n\"meta\": {\n  \"price\": 10000,\n  \"documentation_url\": \"https://www.mywebsite.com/theme-docs/my-theme.html\",\n  ...\n  }\n}\n```"
                      header:
                        anchor: customizing_config-json
                    - type: text
                      data: >-
                        ## Making Basic Design & Layout Changes


                        ### Changing the Footer’s Background Color (config.json)


                        In a browser, [load the local
                        version](/stencil-docs/getting-started/launching-stencil/running-stencil-locally)
                        of your storefront (by default,
                        [http://localhost:3000](http://localhost:3000). Note the
                        page footer’s appearance.


                        Next, open your `<theme-name>/config.json` in a text
                        editor. Change the page footer’s default background
                        color to red, by changing the value `"585858"` to
                        `"#a96e6e"` as indicated below:

                        ```

                        {
                         "settings": {
                          "footer-backgroundColor": "#a96e6e",
                          }
                        }

                        ```


                        This new value will propagate through the theme’s CSS
                        files and will globally change your footer. Refresh your
                        store’s home page in your browser to verify the change.


                        ### Changing the Product Image Size (config.json and
                        Handlebars)


                        In the `<theme-name>/config.json` file’s `"settings"`
                        section, you can define theme-wide image sizes for
                        rendering dynamic content. The excerpt below shows this
                        section’s predefined keys and values (dimensions in
                        pixels) for product thumbnails, galleries, and other
                        standard sizes.


                        ```

                        {
                          "settings": {
                             //...
                            "logo_size": "250x100",
                            "brand_size": "190x250",
                            "gallery_size": "300x300",
                            "productgallery_size": "500x659",
                            "product_size": "500x659",
                            "productthumb_size": "100x100",
                            "thumb_size": "100x100",
                            "zoom_size": "1280x1280",
                            "blog_size": "190x250",
                            // ...
                          },
                        }

                        ```


                        For definitions of each key’s usage, please see the
                        `config.json` reference. You can also create theme-wide
                        custom sizes by defining new key/value pair properties
                        in the `config.json` file.


                        Below is an example of code that calls one of the above
                        variables, in
                        Cornerstone's,`<theme-name>/templates/components/products/card.html`
                        file. (This file defines the display of products’ panels
                        or "cards" on multiple storefront pages.): 



                        ```<img class="card-image" src="{{getImage image
                        'productgallery_size' (cdn
                        theme_settings.default_image_product)}}"
                        alt="{{image.alt}}">

                        ```


                        Note the `{{getImage image 'productgallery_size'}}`
                        statement, a Handlebars reference to the standard
                        `productgallery_size` size defined in config.json.


                        Further examples will guide you in customizing your
                        storefront using the Handlebars templating language. 

                        For now, open `config.json` and try redefining some of
                        the default size values shown above. Then, refresh your
                        storefront’s home page (or other pages or modals) in
                        your browser, and note how the display of product images
                        changes to match your new global size values.


                        ### Redesigning Page Elements (config.json and
                        Handlebars)


                        The following example demonstrates how to redesign a
                        storefront page’s layout by editing Handlebars
                        statements in the page’s HTML. The goal here is simply
                        to move the Product landing page’s "Customers Also
                        Viewed" panel above that page’s "Product Reviews" panel.


                        With your storefront’s local version loaded in a
                        browser, click through to any product, and note the
                        relative positions of the "Product Reviews" and
                        "Customers Also Viewed" panels.


                        Next, open your working theme’s
                        `<theme-name>/templates/components/products/tabs.html
                        file`. As indicated below, delete or comment out the
                        `similar_by_views` components that are shown below:


                        ```

                        // delete the following component:
                          {{#if product.similar_by_views}}
                              <li class="tab" role="presentational">
                                  <a class="tab-title" href="#tab-similar" role="tab" tabindex="0" aria-selected="false" controls="tab-similar">{{lang 'products.similar_by_views'}}</a>
                              </li>
                          {{/if}}
                        </ul>



                        // delete the following component:


                        {{#if product.similar_by_views}}
                          <div role="tabpanel" aria-hidden="true" class="tab-content has-jsContent" id="tab-similar">
                              {{> components/products/carousel products=product.similar_by_views columns=6}}
                          </div>
                        {{/if}}

                        </div>

                        ```


                        Now open your `/templates/pages/product.html` file. As
                        indicated below (in bold), add the `similar_by_views`
                        component with a reusable carousel wrapper:


                        ```

                        {{#if product.videos.list.length}}
                          {{> components/products/videos product.videos}}
                        {{/if}}


                        {{#if product.similar_by_views}}
                           {{> components/products/carousel products=product.similar_by_views columns=6}}
                        {{/if}}


                        {{#if settings.show_product_reviews}}
                          {{> components/products/reviews reviews=product.reviews product=product urls=urls}}
                        {{/if}}

                        ```


                        In your browser, refresh the product page, and check the
                        new arrangement of these components.
                      header:
                        anchor: customizing_basic-changes
              - title: config.json Resource Interactions
                route:
                  path: /config-json-resource-interactions
                data:
                  blocks:
                    - type: html
                      data: <h1><code>config.json</code> Interactions</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#config_new\">New Products Example</a></li>\n    <li><a href=\"#config_changing\">Changing Page Layout using Local Front Matter</a></li>\n    <li><a href=\"#config_retrieving\">Retrieving Specific config. Values through Sass</a></li>\n    <li><a href=\"#config_adding\">Adding/Removing Components</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >
                        To customize your theme’s appearance at a global level,
                        the values that you define in the 

                        `<theme-name>/config.json` file interact with local
                        resources. Your config.json definitions set global
                        defaults for templates, front-matter attributes, and
                        Handlebars resources throughout your theme. You can also
                        define custom variables in config.json, named according
                        to your needs.


                        ## New Products Example


                        To see how interactions with `config.json` values work,
                        first note the default values in `config.json` for the
                        `homepage_new_products_count` and
                        `product_list_display_mode` keys:


                        ```

                        {

                        "settings": {
                          "homepage_new_products_count": 12,
                          "product_list_display_mode": "grid",
                          }
                        }

                        ```


                        Next, open your `<theme-name>templates/pages/home.html`
                        file. Highlighted in bold below is a statement that uses
                        the theme-wide settings above to customize an API
                        request to the server.


                        (Note the reference to the `homepage_new_products_count`
                        key in the file’s front matter, between the two "---"
                        delimiters. If your current theme’s `home.html` front
                        matter omits this `products:new:limit` definition, paste
                        it in for this demonstration.)


                        ```

                        ---

                        products:
                          new:
                            limit: {{theme_settings.homepage_new_products_count}}
                          featured:
                            limit: {{theme_settings.homepage_featured_products_count}}
                          top_sellers:
                            limit: {{theme_settings.homepage_top_products_count}}
                        carousel: {{theme_settings.homepage_show_carousel}}

                        blog:
                            recent_posts:
                                limit: {{theme_settings.homepage_blog_posts_count}}
                        ---

                        {{#partial "hero"}}


                        <!-- [...] -->


                        {{/partial}}

                        {{> layout/base}}

                        ```


                        If you load your storefront’s home page (by default,
                        [http://localhost:3000](http://localhost:3000), you
                        should see a "New Products" section that displays 12
                        products in a grid.
                      header:
                        anchor: config_new
                    - type: text
                      data: >
                        ## Changing Page Layout Using Local Front Matter


                        Look again at your
                        `<theme-name>templates/pages/home.html` file’s front
                        matter. As in the New Products example above, note how
                        the presence and number of featured products correlates
                        to your theme’s `config.json` setting:


                        ```

                        ---

                        [...]

                        products:
                          featured:
                              limit: {{theme_settings.homepage_featured_products_count}}
                        [...]

                        ---

                        ```


                        Next, try changing the `limit:
                        {{theme_settings.homepage_featured_products_count}}`
                        statement in the `home.html` file to a hard-coded limit:
                        2, as indicated below in bold:


                        ```

                        ---

                        products:
                          // [...]
                          featured:
                              limit: 2
                          // [...]  
                        ---


                        <!-- [...] -->


                        {{#partial "page"}}


                        <!-- [...] -->


                        <div class="main full">
                          {{#if products.featured}}
                              {{> components/products/featured products=products.featured columns=2}}
                          {{/if}}
                        </div>

                        {{/partial}}

                        {{> layout/base}}

                        ```


                        If you now reload your storefront’s home page in your
                        browser, you should see the number of displayed
                        "Featured Products" change from its default number (as
                        specified in `config.json`) to two.
                      header:
                        anchor: config_changing
                    - type: text
                      data: >
                        ## Retrieving Specific config.json Values through Sass


                        In `config.json`, global variables bring dynamic values
                        into the framework. Sass imports these global variables’
                        values to gracefully handle data like theme-wide colors’
                        hexadecimal values, and to make the data available to
                        Theme Editor. Here is one short snippet from
                        `config.json`:


                        ```

                        {

                        // [...]

                        "color-highlight": "#00abc9",

                        "color-highlightDark": "#f2f2f2",

                        "color-highlightDarker": "#dfdfdf",

                        // [...]

                        }

                        ```


                        Here are the corresponding references in the default
                        Stencil theme’s
                        `<theme-name>/assets/scss/settings/global/color/_color.scss`
                        file:


                        ```

                        // [...]

                        $color-highlight:       stencilColor("color-highlight");

                        $color-highlightDarker:
                        stencilColor("color-highlightDarker");

                        $color-highlightDark:  
                        stencilColor("color-highlightDark");

                        // [...]

                        ```


                        In `config.json`, try redefining one or more color
                        variables to hex values of your choice. Then re-render
                        your theme’s home page to see the effects.
                      header:
                        anchor: config_retrieving
                    - type: text
                      data: >
                        ## Adding/Removing Components


                        The storefront properties that Stencil abstracts as
                        Handlebars resources are completely portable between
                        HTML files. For an example of how this works, first open
                        any storefront page in a browser. In the page’s footer,
                        note the appearance of product Categories.


                        Next, open your
                        `<theme-name>/templates/components/common/footer.html`
                        file in a text editor. As indicated below, cut (or copy
                        and comment out) the code section shown below
                        (characterized by the strikethrough), and keep it on
                        your Clipboard:


                        ```

                        <footer class="footer" role="contentinfo">
                          <div class="container">
                              <section class="footer-info">
                                  <!-- [...] -->
                        <article class="footer-info-col footer-info-col--small">
                          <h5 class="footer-info-heading">{{lang 'footer.categories'}}</h5>
                          <ul class="footer-info-list">
                              {{#each categories}}
                              <li>
                                  <a href="{{url}}">{{name}}</a>
                              </li>
                              {{/each}}
                          </ul>
                        </article>

                        ```


                        If you now refresh the storefront page in your browser,
                        the Categories list should disappear from the footer.


                        Next, create a new
                        `<theme-name>/templates/components/footer/
                        `subdirectory. Paste the code block from the previous
                        cut/copy into a new file named
                        `<theme-name>/templates/components/footer/categories.html`,
                        and save it:


                        ```

                        <article class="footer-info-col footer-info-col--small">
                          <h5 class="footer-info-heading">{{lang 'footer.categories'}}</h5>
                          <ul class="footer-info-list">
                              {{#each categories}}
                              <li>
                                  <a href="{{url}}">{{name}}</a>
                              </li>
                              {{/each}}
                          </ul>
                        </article>

                        ```


                        Next, back in
                        `/templates/components/common/footer.html`, add a
                        reference to your new path/file, as indicated below in
                        comments:


                        ```

                        <footer class="footer" role="contentinfo">
                          <div class="container">
                              <section class="footer-info">
                                  <!-- [...] -->
                                  {{> components/footer/categories}}
                                  <!-- [...] -->
                              </section>
                          </div>
                        </footer>

                        ```


                        If you now refresh storefront pages in your browser, the
                        Categories list should reappear in the footer. The
                        component returns even though you have moved its data
                        resources to an arbitrary new location, and referenced
                        them indirectly.
                      header:
                        anchor: config_adding
              - title: Customizing Javascript
                route:
                  path: /customizing-javascript
                data:
                  blocks:
                    - type: html
                      data: <h1>Customizing Javascript</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#customizing-javascript_customizing\">Customizing Javascript for Individual Pages</a></li>\n    \t<li><a href=\"#customizing-javascript_bringing-handlebars\">Bringing Handlebars Context Values into JavaScript</a></li>\n\t\t<li><a href=\"#customizing-javascript_installing-various\">Installing Various JavaScript Libraries</a></li>\n    <li><a href=\"#customizing-example\">Example Links</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Customizing JavaScript for Individual Pages


                        In this article, we are going to add a very simple
                        Javascript customization into the [Cornerstone
                        theme](https://github.com/bigcommerce/cornerstone).
                      header:
                        anchor: customizing-javascript_customizing
                    - type: callout
                      data:
                        type: warning
                        title: >-
                          Compatible with Cornerstone versions earlier than
                          2.x.x
                        body: >-
                          This example will align only with Cornerstone versions
                          earlier than 2.x.x. This is due to changes that
                          occurred in [PR
                          #1229](https://github.com/bigcommerce/cornerstone/pull/1229),
                          which merged the `before`, `loaded`, and `after`
                          functions to `onReady`. See [commit
                          31bdd](https://github.com/bigcommerce/cornerstone/commit/31bdddbf64293d85192cae00e966d531f527b150#diff-eaddb008b4dd357a417047430ec8ea40)
                          for more details.
                    - type: text
                      data: >-
                        In a text editor, open the
                        `cornerstone/assets/js/theme/product.js` file. At the
                        top of the Product class, insert the "Hello World"
                        statement shown in bold below:
                    - type: code
                      data: |-
                        export default class Product extends PageManager {
                          constructor() {
                              super();
                          }

                          before(next) {
                              next();
                          }

                          loaded(next) {
                              console.log("Hello World");
                            // Init collapsible
                            collapsible();
                            [...]
                        }
                      header:
                        subtitle: <theme-name>/assets/js/theme/product.js
                        title: Hello World Statement
                      config:
                        mode: js
                    - type: text
                      data: >-
                        In your browser, refresh any product-details pop-up or
                        page to see your new `"Hello World"` message.
                    - type: text
                      data: >-
                        ## Bringing Handlebars Context Values into JavaScript


                        Within Stencil pages, you can inject any variables from
                        the Handlebars context into your client-side JavaScript.
                        You do so by calling the Stencil custom Handlebars
                        helper named `inject`, shown below:


                        `{{inject 'productThumbSize'
                        theme_settings.productthumb_size}}`


                        You could inject the above statement into a page
                        template rendered with `page_type = "Product"` (for
                        example: `<theme-name>/templates/pages/product.html`).
                        Stencil’s `PageManager` class will be provided this
                        context:
                      header:
                        anchor: customizing-javascript_bringing-handlebars
                    - type: code
                      data: |-
                        export default class Product extends PageManager {
                          constructor() {
                              super();
                          }

                          before(next) {
                              next();
                          }

                          loaded(next) {
                              console.log("Hello World");
                              console.log(this.context.productThumbSize);
                          }
                          
                        }
                      header:
                        title: PageManager class
                        subtitle: <theme-name>/templates/pages/product.html
                      config:
                        mode: js
                    - type: text
                      data: >-
                        Note that the
                        `console.log(this.context.themeImageSizes)`; statement
                        will report your configured image size, following the
                        `"Hello World"` message that you previously defined in
                        the [Customizing JavaScript for Individual
                        Pages](#customizing-javascript_customizing) above.
                    - type: code
                      data: |-
                        export default class Product extends PageManager {
                          constructor() {
                              super();
                          }

                          before(next) {
                              next();
                          }

                          loaded(next) {
                              console.log("Hello World");
                              console.log(this.context.productThumbSize);
                          }

                        }
                      config:
                        mode: js
                    - type: text
                      data: >-
                        ## Installing Various JavaScript Libraries


                        Once you have installed the default Stencil theme, you
                        can add custom JavaScript libraries. To see how this
                        works, find your favorite library on GitHub – for
                        example: https://github.com/jquery/jquery.


                        To install this particular library for Stencil themes,
                        you would entering the following on the command line:


                        `npm install jquery`


                        Next, you would open
                        `<theme-name>/assets/js/theme/product.js`, and insert
                        the statements excerpted below:
                      header:
                        anchor: customizing-javascript_installing-various
                    - type: code
                      data: |-
                        import $ from 'jquery';

                        $('.myElement').click(() => {
                            alert("You clicked myElement");
                        });
                      header:
                        subtitle: <theme-name>/assets/js/theme/product.js
                      config:
                        mode: js
                    - type: text
                      data: >-
                        As always, for specifics, refer to your chosen library’s
                        documentation.
                    - type: text
                      data: >-
                        ## Example Links 


                        For more-extended examples of adding custom JavaScript
                        to a theme, see the [Custom Javascript
                        Implementations](/stencil-docs/custom-javascript-implementations)
                        section.
                      header:
                        anchor: customizing-example
              - title: Rendering HTML with Ajax
                route:
                  path: /rendering-html-with-ajax
                data:
                  blocks:
                    - type: html
                      data: <h1>Rendering HTML with Ajax</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#rendering_rendering-html\">Rendering HTML with Ajax</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: "## Rendering HTML with Ajax\n\nStencil allows you to render dynamic components on the fly. For example, note this default code in `<theme-name>/templates/components/products/quick-view.html` (note also this file name, which Handlebars will reference later in this example):\n\n```\n<div class=\"modal-body quickView\">\n  <a href=\"#\" class=\"modal-close\" aria-label=\"Close\">&#215;</span></a>\n  {{> components/products/product-view}}\n</div>\n```\n\nTo render a different template, you would instead reference that template’s file name. For example, assume that you want to substitute a custom template that you’ve named: `<theme-name>/templates/components/products/quicker-view.html`.\n\nThis next code block is from the Stencil default theme’s `/assets/js/theme/global/quick-view.js` file. Note the `quicker-view.html` statements brought in to reference the new file name:\n\n```\nlet $modal = $('#modal'),\n  $modalContent = $('.modal-content', $modal),\n  $modalOverlay = $('.loadingOverlay', $modal),\n  modalModifierClasses = 'modal--large';\n\n$('body').on('click', '.quickview', (event) => {\n  let productId = $(event.currentTarget).data('product-id');\n\n  event.preventDefault();\n\n  // clear the modal\n  $modalContent.html('');\n  $modalOverlay.show();\n\n  // open modal\n  $modal.foundation('reveal', 'open');\n\n\t//quicker-view.html statement, replacing the standard template's quick-view.html template\n  utils.api.product.getById(productId, {template: 'products/quicker-view'}, function done(err, response) {\n      $modalOverlay.hide();\n      $modalContent.html(response);\n\n      return new ProductDetails($modalContent, context);\n  });\n});\nlet $modal = $('#modal'),\n  $modalContent = $('.modal-content', $modal),\n  $modalOverlay = $('.loadingOverlay', $modal),\n  modalModifierClasses = 'modal--large';\n\n$('body').on('click', '.quickview', (event) => {\n  let productId = $(event.currentTarget).data('product-id');\n\n  event.preventDefault();\n\n  // clear the modal\n  $modalContent.html('');\n  $modalOverlay.show();\n\n  // open modal\n  $modal.foundation('reveal', 'open');\n\n\t// \n  utils.api.product.getById(productId, {template: 'products/quicker-view'}, function done(err, response) {\n      $modalOverlay.hide();\n      $modalContent.html(response);\n\n      return new ProductDetails($modalContent, context);\n  });\n});\n```"
                      header:
                        anchor: rendering_rendering-html
              - title: Testing and Debugging Your Theme
                route:
                  path: /testing-and-debugging-your-theme
                data:
                  blocks:
                    - type: html
                      data: <h1>Testing and Debugging Your Theme</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#testing_testing-and-debugging\">Testing and Debugging Your Theme</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >
                        ## Testing and Debugging Your Theme


                        The Stencil framework provides built-in debugging tools
                        to aid in your custom front-end development.

                        When you want to see what data is available on the page
                        you are working on, you can simply add the `debug` query
                        string to your store’s localhost URL. Here is an
                        example:


                        `http://localhost:3000/product/this-is-a-sample-product?debug=context

                        `


                        This will return a list of all the objects available on
                        the page, in JSON syntax.


                        If you want to view the available JSON objects and
                        rendered page at the same time, simply change the
                        `debug` value to `bar`. Here is an example:


                        `http://localhost:3000/product/this-is-a-sample-product?debug=bar`


                        ### Using Browsersync to Render the Store on
                        Desktop/Tablet/Mobile for Testing


                        The Stencil framework uses Browsersync to help you
                        rapidly test your storefront themes across devices of
                        different viewports. After you launch Stencil with
                        stencil start, your console window will display several
                        IP addresses below the BigCommerce "B".


                        ```
                                                             `+h
                                                           `+ddd
                                                         .oddddd
                                                       .oddddddd
                                                     -sddddddddd
                                                  `-sddddddddddd
                                                 -shdddddddddddd
                                                 ...-:+ydddddddd
                                            `......`   `+ddddddd
                                            -ddddddh-    ddddddd
                                        `   .yyyyyyo.  `+ddddddd
                                      .o/    `````    :ydddddddd
                                    -ohd+   `//////:` `.sddddddd
                                  -sdddd+   -ddddddds   `hdddddd
                                :sdddddd+   .sssssso-   `ddddddd
                              :ydddddddd+              -yddddddd
                            /yddddddddddy+++++++++++oshddddddddd
                         `/hdddddddddddddddddddddddddddddddddddd
                        /hdddddddddddddddddddddddddddddddddddddd

                        _________________________


                        BigCommerce Stencil

                        _________________________


                        [BS] Proxying: http://localhost:4001

                        [BS] Access URLs:

                        ------------------------------------
                              Local: http://localhost:4000
                           External: http://172.24.4.28:4000
                        ------------------------------------
                                 UI: http://localhost:3001
                        UI External: http://172.24.4.28:3001

                        ------------------------------------

                        [BS] Watching files...

                        ```


                        Note the `External` IP address. You can copy/paste this
                        URL to access the Browsersync server from multiple
                        devices. Then, watch as scrolling and other actions sync
                        up across devices. (Note: Firewalls and other security
                        measures might interfere with this feature.)


                        To maximize the adoption of your themes, we recommend
                        that you use such testing to design responsive themes
                        that display and function well across multiple viewport
                        sizes.
                      header:
                        anchor: testing_testing-and-debugging
              - title: Managing Theme Variations
                route:
                  path: /new-subpage
                data:
                  blocks:
                    - type: html
                      data: <h1>Managing Theme Variations</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#managing_creating\">Creating and Naming a New Theme Variation </a></li>\n\t\t<li><a href=\"#managing_changing\">Changing a Theme Variation’s Font Family (config.json)</a></li>\n    <li><a href=\"#managing_preparing\">Preparing a Variation's Thumbnails</a></li>\n    <li><a href=\"#managing_using-cli\">Using Stencil CLI to Change Variations</a></li>\n    <li><a href=\"#managing_bundling-and-uploading\">Bundling and Uploading Your Theme</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Creating and Naming a New Theme Variation  (Cascading
                        Settings from `config.json`)


                        You define variations in your `<theme-name>/config.json`
                        file. From the default Stencil theme’s config.json, here
                        is the Light variation’s definition, followed by the
                        head of the `Bold` variation’s definition:


                        ```

                        "variations": [

                        {
                          "name": "Light",
                          "id": "light",
                          "meta": {
                            "desktop_screenshot": "desktop_screenshot.jpg",
                            "mobile_screenshot": "mobile_screenshot.png",
                            "description": "This is the light style of the Stencil Theme",
                            "demo_url": "https://stencil-light.mybigcommerce.com",
                            "optimized_for": ["fashion", "image_heavy", "etc"],
                            "industries": []
                          },
                        {
                          "name": "Bold",
                          "id": "bold",
                        ...

                        ```


                        Try inserting a new custom variation of your own, below
                        the `"Light"` block shown above. Your variation’s
                        definition might look something like this:


                        ```

                        "variations": [

                        ...

                        {
                          "name": "MyCustomVariation",
                          "id": "my_custom_variation",
                          "meta": {
                            "desktop_screenshot": "my_custom_desktop_screenshot.jpg",
                            "mobile_screenshot": "my_custom_mobile_screenshot.png",
                            "description": "This is a really cool custom style of the Stencil Theme",
                            "demo_url": "https://stencil-custom.mybigcommerce.com",
                            "optimized_for": ["fashion", "image_heavy", "etc"],
                            "industries": []
                          },
                        {
                          "name": "Bold",
                          "id": "bold",
                        ...

                        "variations": [

                        ...

                        {
                          "name": "MyCustomVariation",
                          "id": "my_custom_variation",
                          "meta": {
                            "desktop_screenshot": "my_custom_desktop_screenshot.jpg",
                            "mobile_screenshot": "my_custom_mobile_screenshot.png",
                            "description": "This is a really cool custom style of the Stencil Theme",
                            "demo_url": "https://stencil-custom.mybigcommerce.com",
                            "optimized_for": ["fashion", "image_heavy", "etc"],
                            "industries": []
                          },
                        {
                          "name": "Bold",
                          "id": "bold",
                        ...

                        ```
                      header:
                        anchor: managing_creating
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Changing a Theme Variation’s Font Family
                        (config.json)


                        To learn more about defining variations, see the
                        `config.json` reference for details about each key’s
                        usage and allowable values. 

                        In particular, note the option to configure settings and
                        variables that are scoped to each variation. For
                        example, you could insert the
                        `"settings":...”body-font-family”` block shown below, to
                        set body text throughout this variation (only) to a
                        specific typeface/family:


                        ```

                        {
                          "name": "MyCustomVariation",
                          "id": "my_custom_variation",
                          "settings": {
                            ...
                            "body-font-family": "MyCoolFont, AnotherFont, sans-serif",
                            ...
                          }
                        }

                        ```
                      header:
                        anchor: managing_changing
                    - type: text
                      data: >
                        ## Preparing a Variation's Thumbnails


                        For details on preparing screenshots that enable
                        merchants to preview each variation – and to preview
                        your theme as a whole – in the BigCommerce control panel
                        and Theme Marketplace, see [Preparing Thumbnail
                        Images](/stencil-docs/stencil-theme-editor/preparing-thumbnail-images).
                      header:
                        anchor: managing_preparing
                    - type: text
                      data: >-
                        ## Using Stencil CLI to Change Variations


                        To locally test/debug a specific variation of your
                        theme, launch it by invoking the Stencil CLI’s
                        (command-line interface’s) `stencil start -v` switch.
                        Depending on how you’ve named your variation in
                        `config.json`, you would type something like this on the
                        command line:


                        `stencil start -v MyCustomVariation`
                      header:
                        anchor: managing_using-cli
                    - type: text
                      data: >
                        ## Bundling and Uploading Your Theme


                        If at this stage you are ready to bundle and upload your
                        theme, refer to [Bundling and
                        Uploading](/stencil-docs/prepare-and-upload-a-theme/bunding-and-uploading)
                        a Theme.
                      header:
                        anchor: managing_bundling-and-uploading
        - title: 'Stencil Theme Editor '
          route:
            path: /stencil-theme-editor
          data:
            children:
              - title: Stencil Theme Editor Overview
                route:
                  path: /stencil-theme-editor-overview
                data:
                  blocks:
                    - type: html
                      data: <h1>Stencil Theme Editor Overview</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#stencil_stencil-theme-editor-overview\">Stencil Theme Editor</a></li>\n\t</ul>\n</div>"
                    - type: callout
                      data:
                        type: info
                        body: >
                          We recently launched an update for the Stencil Theme
                          Editor experience (as of October 2018). The new
                          experience is called **Store Design**. You can easily
                          make the switch from the Theme Editor to Store Design
                          experience. See our support [Store Design
                          article](https://forum.bigcommerce.com/s/article/Store-Design)
                          for more information.
                        title: Store Design Launch in October 2018
                    - type: text
                      data: >-
                        ## Stencil Theme Editor

                        The [Stencil Theme
                        Editor](https://forum.bigcommerce.com/s/article/Stencil-Themes?_ga=2.258361674.1984523106.1539568940-967431010.1523308107)
                        is a Graphical User Interface (GUI) that allows
                        BigCommerce merchants to modify a storefront's look and
                        feel without manually entering any code. A merchant
                        using the Stencil Theme Editor can customize a
                        storefront theme by modifying characteristics from a
                        variety of menu options such as Styles, Colors,
                        Typography, Buttons, and more. Furthermore, the Stencil
                        Theme Editor is a useful rapid-customization tool for
                        developers. 


                        As a theme developer, you not only have the opportunity
                        to _use_ the theme editor to rapidly customize your
                        theme, but also _configure your own settings_ for the
                        Theme Editor. This will give merchants who download your
                        theme the ability to use the Theme Editor with your
                        theme in the ways you provide access to. Like previously
                        mentioned, the Theme Editor by default allows merchants
                        to customize everything from Styles, Colors, Typography,
                        Buttons, and more. As a theme developer, you can choose
                        and configure what features can be modified via the
                        Theme Editor for the theme that you develop.


                        To configure and work with the Theme Editor GUI locally,
                        run `stencil start -e` , and point your browser to
                        `localhost:8181`, as described here. This allows you to
                        see and test your personally configured Theme Editor
                        from a merchant's point of view. 


                        The remainder of this section guides you, as a
                        developer, through configuring your own theme options.
                      header:
                        anchor: stencil_stencil-theme-editor-overview
                    - type: callout
                      data:
                        type: error
                        body: >-
                          Open only one instance of Theme Editor at a time
                          against each storefront. There is currently no
                          synchronization mechanism for configuration changes
                          made by multiple Theme Editor instances.
                        title: ' Single Instance per Storefront'
              - title: Configuring Stencil Theme Editor
                route:
                  path: /configuring-stencil-theme-editor
                data:
                  blocks:
                    - type: html
                      data: <h1>Configuring the Stencil Theme Editor</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#configuring_configuration-files\">Configuration Files</a></li>\n    <li><a href=\"#configuring_managing-keys\">Managing Keys between Versions</a></li>\n    <li><a href=\"#configuring_persistent-settings\">Persistent Settings Storage</a></li>\n    <li><a href=\"#configuring_theme-upgrades\">Theme Upgrades and Settings</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Configuration Files


                        Each theme contains two related JSON files of key-value
                        pairs: `config.json` and `schema.json`. These files'
                        keys provide the following features:


                        Keys that you include in `schema.json` – together with
                        their corresponding `config.json` default values –
                        define the settings that merchants can customize through
                        the Theme Editor graphical interface.

                        Other `config.json` keys contain metadata about the
                        theme, such as the theme's name, version, and resource
                        controls.

                        Keys located under the `config.json > variations` object
                        define variations of the theme. For example, a theme
                        might have a "Light" variation and a "Bold" variation,
                        each with different typography and colors. Each theme
                        can include as many variations as you like.

                        Keys located under both files' `settings` objects define
                        the theme's look, feel, and functionality.


                        For documentation on the principal keys included in
                        Stencil's reference Cornerstone theme, see this
                        section's [config.json
                        Metadata](/stencil-docs/stencil-theme-editor/config-json-metadata)
                        and [schema.json
                        Metadata](/stencil-docs/stencil-theme-editor/schema-json-metadata)
                        entries. For an introduction to the graphical editor,
                        see

                        [Stencil Theme Editor
                        Overview](/stencil-docs/stencil-theme-editor/stencil-theme-editor-overview).
                      header:
                        anchor: configuring_configuration-files
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Managing Keys between Versions


                        To make sure revisions to your theme are
                        backward-compatibile, we generally recommend that you
                        manage keys in both your `config.json` and `schema.json`
                        files in an additive way. Specific recommendations:


                        Adding new keys is generally fine. (However, each key in
                        `schema.json` must have a matching default in
                        `config.json`.)

                        * Use caution in deleting any key. Doing so can break
                        your new theme version's backward compatibility.

                        * We do not recommend renaming keys. Instead, we
                        recommend introducing a new key, while maintaining the
                        old key until it is no longer in use by anyone using an
                        older version of your theme.

                        * Each object within your `config.json` > `variations`
                        object defines one theme variation. If you are adapting
                        an existing theme and consciously want to remove one or
                        more variations, you can do so by removing the
                        corresponding key(s).
                      header:
                        anchor: configuring_managing-keys
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Persistent Settings Storage


                        When store administrators use Theme Editor to customize
                        your theme for their store, the store's resulting
                        configuration settings are saved to a separate
                        configuration service at BigCommerce.
                      header:
                        anchor: configuring_persistent-settings
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Theme Upgrades and Settings


                        When a merchant upgrades your theme to a newer version,
                        all key-value pairs that were saved to the BigCommerce
                        configuration service are carried forward. For example,
                        assume this customization/upgrade scenario:


                        You release your Star Glow theme, version 1. This
                        theme's `config.json` includes a key named `logo_size`,
                        establishing a default value of 100x250. The combination
                        of the key and the value compose a `logo_size` setting.

                        The merchant uses Theme Editor to change the `logo_size`
                        setting to 175x275. This customized setting is stored in
                        the BigCommerce configuration service.

                        You release Star Glow, version 1.1. In this theme
                        revision, you have changed the `logo_size` to 300x300.

                        When the merchant applies Star Glow version 1.1 to their
                        store, their custom `logo_size` setting of 175x275
                        remains in effect.

                        If you the merchant creates a second store and applies
                        Star Glow version 1.1 to it, that store has no custom
                        `logo_size` setting – so it will default to the new
                        theme version's 300x300 value.
                      header:
                        anchor: configuring_theme-upgrades
              - title: schema.json/Theme Editor Metadata
                route:
                  path: /schema-json-metadata
                data:
                  blocks:
                    - type: html
                      data: <h1>schema.json/Theme Editor Metadata</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#schema_enabling\">Enabling Theme Editor</a></li>\n    <li><a href=\"#schema_best-practices\">Best Practices</a></li>\n    <li><a href=\"#schema_how-json\">How .json Entries Govern Theme Editor's UI</a></li>\n    <li><a href=\"#schema_theme-editor-data\">Theme Editor Data Types</a></li>\n    <li><a href=\"#schema_data-structure\">Theme Editor/schema.json Data Structure</a></li>\n    <li><a href=\"#schema_ui-scope\">Arbitrary UI Scope and Sequence</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Enabling Theme Editor


                        To provide merchants with Theme Editor support for your
                        theme's settings, you must declare those settings in the
                        theme's `<theme‑name>/schema.json file`. You must also
                        include those settings in your theme's config.json file,
                        templates, and Sass/CSS files. The basic division of
                        labor is this:

                        * `schema.json` is an array of objects, declaring which
                        theme settings are editable in Theme Editor. These
                        objects also declare all possible values to display in
                        Theme Editor's GUI.

                        * `config.json` assigns (and updates) a default value
                        for each of the editable settings.

                        * Each `schema.json` entry has an id element that maps
                        it to its corresponding config.json entry. The id value
                        identifies the relevant config.json key name.

                        * For front-matter properties to be editable, your
                        theme's Handlebars template must call certain Handlebars
                        helpers to transform the config.json entries into
                        JavaScript values.

                        * For fonts to be editable, a Sass stylesheet must call
                        certain custom Sass functions to transform the
                        config.json font entries into CSS values.

                        * For styles to be editable, a Sass stylesheet must call
                        certain custom Handlebars helpers to transform the
                        config.json entries into CSS values.


                        As users select options within the Theme Editor UI (and
                        save their selections), Stencil will automatically
                        rewrite `config.json` to record new defaults for the
                        theme.


                        ### File Management Requirements


                        See Stencil's default Cornerstone theme for examples
                        that fulfill all of the above requirements. However,
                        remember these hard requirements:


                        * For any theme setting (such as a Sass variable or a
                        front-matter value) to be merchant-customizable,

                        that setting – and its possible values – must be present
                        in `schema.json`. You must manually provide these
                        declarations, according to the structure described here.


                        * Also, each key that you create in schema.json must
                        have a corresponding `config.json` key whose name
                        matches its id value. This `config.json` key sets the
                        default value (even if that is simply an empty string).
                        A `schema.json` setting without an `id`-matched
                        `config.json` key will not appear to users in the Theme
                        Editor GUI.
                      header:
                        anchor: schema_enabling
                    - type: text
                      data: >+
                        ## Best Practices


                        Please follow these guidelines to head off errors upon
                        theme upload, and to avoid possible loss of
                        customizations made via the Theme Editor GUI at runtime:


                        * Single-Instance Restriction per Storefront: We
                        strongly recommend opening only one instance of Theme
                        Editor, at a time, against each storefront. This is
                        because there is currently no synchronization mechanism
                        to reconcile configuration changes made by multiple
                        Theme Editor instances. So `schema.json` will record the
                        last changes made by any instance – but changes saved
                        earlier by other instances might be lost.


                        * Single-Storefront Restriction per Editor: In the
                        current release, users can have only one storefront at a
                        time open in Theme Editor. (A workaround is to open an
                        "Incognito"/private-browsing window on an additional
                        storefront, to bypass the cookie that imposes this
                        restriction.)


                        * File Name, Location, and Structure: Your theme's
                        `schema.json` file must be named schema.json, must
                        reside in the root of your `<theme-name>` subdirectory
                        (e.g.: `/cornerstone/schema.json`), and must be valid
                        JSON.


                        * File Size: The maximum allowable size for a theme's
                        `schema.json` file is 64 KB. Exceeding this limit will
                        trigger an error upon uploading the theme to
                        BigCommerce. (Other than this size constraint, there is
                        no limit on the number of keys and values that you can
                        place in a theme's `schema.json`.)

                      header:
                        anchor: schema_best-practices
                    - type: text
                      data: >-
                        ## How .json Entries Govern Theme Editor's UI


                        Your entries in the `schema.json` and `config.json`
                        files directly shape users' options in Theme Editor:

                        * Theme Variations always appear at the top of the Theme
                        Editor panel. These variations are defined only in
                        config.json, and their definition order in that file
                        governs their display order in Theme Editor.

                        * Merchants must select one variation to edit, at a
                        time, in Theme Editor. The selections that they make in
                        the remainder of Theme Editor's UI will apply to only
                        that selected variation.

                        * Theme Editor's remaining sequence of top-level
                        (Section) headings corresponds directly to the sequence
                        of top-level (Section) objects that you declare in
                        `schema.json`


                        The options displayed within these expandable Section
                        headings correspond directly to the keys/values that you
                        nest within `schema.json`'s corresponding Section
                        objects.


                        In all, the structure that you give your theme's
                        `config.json` and `schema.json` files directly governs
                        the UI that Theme Editor exposes to merchants. So these
                        files provide your UI design tools.
                      header:
                        anchor: schema_how-json
                    - type: text
                      data: >-
                        ## Theme Editor Data Types


                        Theme editor supports these data types:

                        * color

                        * font

                        * select [drop-down list]

                        * checkbox

                        * imageDimension

                        * text


                        Within `schema.json`, each object's data type is
                        declared in a statement like the one highlighted here:


                        ```
                         {
                                "type": "color",
                                "label": "Text Color",
                                "id": "body-font-color"
                              },
                        ```


                        ### Types versus "heading" Labels


                        Within `schema.json`, you will also see `"type":
                        "heading"` statements like this one – highlighted
                        earlier in the same object used for the above example:


                        ```
                         {
                            "name": "Colors",
                            "settings": [
                              {
                                "type": "heading",
                                "content": "General"
                              },
                              {
                                "type": "color",
                                "label": "Text Color",
                                "id": "body-font-color"
                              },
                        ```


                        These `"type": "heading"` statements do not reference
                        data types. Rather, they declare display captions for
                        the Theme Editor UI's subcategories – the middle level
                        nested within the Section headings, but outside the
                        individual options from which merchants can select.
                        (Those inner options are designated by `"label":
                        <label-text>` statements.)
                      header:
                        anchor: schema_theme-editor-data
                    - type: text
                      data: >
                        ## Theme Editor/schema.json Data Structure


                        The `schema.json` nesting structure that you just saw
                        maps directly to the Theme Editor UI displayed to
                        merchants: Below the Variations Section (whose data are
                        imported from `config.json`), the order and nesting of
                        options in Theme Editor's UI directly matches the order
                        and nesting of your `schema.json` entries.
                      header:
                        anchor: schema_data-structure
                    - type: text
                      data: >-
                        ## Arbitrary UI Scope and Sequence


                        Once again: You are free to decide which properties of
                        your theme to make editable in Theme Editor, and in
                        which order to display them. Theme Editor can expose any
                        set of properties, as long as your `schema.json`
                        declares them using the data types that Theme Editor
                        supports.
                      header:
                        anchor: schema_ui-scope
              - title: config.json Metadata
                route:
                  path: /config-json-metadata
                data:
                  blocks:
                    - type: html
                      data: <h1><code>config.json</code> Metadata</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#config_configjson-overview\">config.json Overview</a></li>\n    <li><a href=\"#config_keys-and-example\">Keys and Example Values</a></li>\n    <li><a href=\"#config_requirements-and-restrictions\">Requirements and Restrictions</a></li>\n    <li><a href=\"#config_video-demo\">Video Demo</a></li>\n\t</ul>\n</div>\n\n\n"
                    - type: text
                      data: >
                        ## `config.json` Overview


                        You configure the `/theme‑name/config.json` file to
                        properly manage each of your custom theme's front-end
                        aspects. This `config.json` file’s functions are to:


                        * Provide global context for Stencil’s CSS and
                        Handlebars resources.

                        * Provide values for the Theme Editor GUI to manage.

                        * Provide metadata for your theme’s listing in the Theme
                        Marketplace.

                        * Define variations included in your theme.
                      header:
                        anchor: config_configjson-overview
                    - type: text
                      data: '---'
                    - type: text
                      data: '## Keys and Example Values'
                      header:
                        anchor: onfig_keys-and-example
                    - type: jsonSchema
                      data:
                        type: object
                        minProperties: 0
                        properties:
                          name:
                            type: string
                            example: Cornerstone
                            description: The theme name
                          version:
                            type: string
                            example: '"2.6.0"'
                            description: The theme's version number
                          meta:
                            type: object
                            properties:
                              price:
                                type: integer
                              documentation_url:
                                type: string
                              author_name:
                                type: string
                              author_email:
                                type: string
                              author_support_url:
                                type: string
                              composed_image:
                                type: string
                              features:
                                type: array
                                items:
                                  type: string
                          css_compiler:
                            type: string
                          autoprefixer_cascade:
                            type: boolean
                          autoprefixer_browsers:
                            type: array
                            items:
                              type: string
                          settings:
                            type: object
                            properties:
                              homepage_new_products_count:
                                type: integer
                              homepage_featured_products_count:
                                type: integer
                              homepage_top_products_count:
                                type: integer
                              homepage_show_carousel:
                                type: boolean
                              homepage_stretch_carousel_images:
                                type: boolean
                              homepage_new_products_column_count:
                                type: integer
                              homepage_featured_products_column_count:
                                type: integer
                              homepage_top_products_column_count:
                                type: integer
                              homepage_blog_posts_count:
                                type: integer
                              productpage_videos_count:
                                type: integer
                              productpage_reviews_count:
                                type: integer
                              productpage_related_products_count:
                                type: integer
                              productpage_similar_by_views_count:
                                type: integer
                              categorypage_products_per_page:
                                type: integer
                              shop_by_price_visibility:
                                type: boolean
                              brandpage_products_per_page:
                                type: integer
                              searchpage_products_per_page:
                                type: integer
                              show_product_quick_view:
                                type: boolean
                              show_powered_by:
                                type: boolean
                              shop_by_brand_show_footer:
                                type: boolean
                              show_copyright_footer:
                                type: boolean
                              show_accept_amex:
                                type: boolean
                              show_accept_discover:
                                type: boolean
                              show_accept_mastercard:
                                type: boolean
                              show_accept_paypal:
                                type: boolean
                              show_accept_visa:
                                type: boolean
                              show_product_details_tabs:
                                type: boolean
                              show_product_reviews_tabs:
                                type: boolean
                              show_product_weight:
                                type: boolean
                              show_product_dimensions:
                                type: boolean
                              product_list_display_mode:
                                type: string
                              logo-position:
                                type: string
                              logo_size:
                                type: string
                              logo_fontSize:
                                type: integer
                              logo-font:
                                type: string
                              brand_size:
                                type: string
                              gallery_size:
                                type: string
                              productgallery_size:
                                type: string
                              product_size:
                                type: string
                              productview_thumb_size:
                                type: string
                              productthumb_size:
                                type: string
                              thumb_size:
                                type: string
                              zoom_size:
                                type: string
                              blog_size:
                                type: string
                              default_image_brand:
                                type: string
                              default_image_product:
                                type: string
                              default_image_gift_certificate:
                                type: string
                              body-font:
                                type: string
                              headings-font:
                                type: string
                              fontSize-root:
                                type: integer
                              fontSize-h1:
                                type: integer
                              fontSize-h2:
                                type: integer
                              fontSize-h3:
                                type: integer
                              fontSize-h4:
                                type: integer
                              fontSize-h5:
                                type: integer
                              fontSize-h6:
                                type: integer
                              applePay-button:
                                type: string
                              color-textBase:
                                type: string
                              color-textBase--hover:
                                type: string
                              color-textBase--active:
                                type: string
                              color-textSecondary:
                                type: string
                              color-textSecondary--hover:
                                type: string
                              color-textSecondary--active:
                                type: string
                              color-textLink:
                                type: string
                              color-textLink--hover:
                                type: string
                              color-textLink--active:
                                type: string
                              color-textHeading:
                                type: string
                              color-primary:
                                type: string
                              color-primaryDark:
                                type: string
                              color-primaryDarker:
                                type: string
                              color-primaryLight:
                                type: string
                              color-secondary:
                                type: string
                              color-secondaryDark:
                                type: string
                              color-secondaryDarker:
                                type: string
                              color-error:
                                type: string
                              color-errorLight:
                                type: string
                              color-info:
                                type: string
                              color-infoLight:
                                type: string
                              color-success:
                                type: string
                              color-successLight:
                                type: string
                              color-warning:
                                type: string
                              color-warningLight:
                                type: string
                              color-black:
                                type: string
                              color-white:
                                type: string
                              color-whitesBase:
                                type: string
                              color-grey:
                                type: string
                              color-greyDarkest:
                                type: string
                              color-greyDarker:
                                type: string
                              color-greyDark:
                                type: string
                              color-greyMedium:
                                type: string
                              color-greyLight:
                                type: string
                              color-greyLighter:
                                type: string
                              color-greyLightest:
                                type: string
                              button--default-color:
                                type: string
                              button--default-colorHover:
                                type: string
                              button--default-colorActive:
                                type: string
                              button--default-borderColor:
                                type: string
                              button--default-borderColorHover:
                                type: string
                              button--default-borderColorActive:
                                type: string
                              button--primary-color:
                                type: string
                              button--primary-colorHover:
                                type: string
                              button--primary-colorActive:
                                type: string
                              button--primary-backgroundColor:
                                type: string
                              button--primary-backgroundColorHover:
                                type: string
                              button--primary-backgroundColorActive:
                                type: string
                              button--disabled-color:
                                type: string
                              button--disabled-backgroundColor:
                                type: string
                              button--disabled-borderColor:
                                type: string
                              icon-color:
                                type: string
                              icon-color-hover:
                                type: string
                              button--icon-svg-color:
                                type: string
                              icon-ratingEmpty:
                                type: string
                              icon-ratingFull:
                                type: string
                              carousel-bgColor:
                                type: string
                              carousel-title-color:
                                type: string
                              carousel-description-color:
                                type: string
                              carousel-dot-color:
                                type: string
                              carousel-dot-color-active:
                                type: string
                              carousel-dot-bgColor:
                                type: string
                              carousel-arrow-color:
                                type: string
                              carousel-arrow-bgColor:
                                type: string
                              carousel-arrow-borderColor:
                                type: string
                              card-title-color:
                                type: string
                              card-title-color-hover:
                                type: string
                              card-figcaption-button-background:
                                type: string
                              card-figcaption-button-color:
                                type: string
                              card--alternate-backgroundColor:
                                type: string
                              card--alternate-borderColor:
                                type: string
                              card--alternate-color--hover:
                                type: string
                              form-label-font-color:
                                type: string
                              input-font-color:
                                type: string
                              input-border-color:
                                type: string
                              input-border-color-active:
                                type: string
                              input-bg-color:
                                type: string
                              input-disabled-bg:
                                type: string
                              select-bg-color:
                                type: string
                              select-arrow-color:
                                type: string
                              checkRadio-color:
                                type: string
                              checkRadio-backgroundColor:
                                type: string
                              checkRadio-borderColor:
                                type: string
                              alert-backgroundColor:
                                type: string
                              alert-color:
                                type: string
                              alert-color-alt:
                                type: string
                              storeName-color:
                                type: string
                              body-bg:
                                type: string
                              header-backgroundColor:
                                type: string
                              footer-backgroundColor:
                                type: string
                              navUser-color:
                                type: string
                              navUser-color-hover:
                                type: string
                              navUser-dropdown-backgroundColor:
                                type: string
                              navUser-dropdown-borderColor:
                                type: string
                              navUser-indicator-backgroundColor:
                                type: string
                              navPages-color:
                                type: string
                              navPages-color-hover:
                                type: string
                              navPages-subMenu-backgroundColor:
                                type: string
                              navPages-subMenu-separatorColor:
                                type: string
                              dropdown--quickSearch-backgroundColor:
                                type: string
                              dropdown--wishList-backgroundColor:
                                type: string
                              blockquote-cite-font-color:
                                type: string
                              container-border-global-color-base:
                                type: string
                              container-fill-base:
                                type: string
                              container-fill-dark:
                                type: string
                              label-backgroundColor:
                                type: string
                              label-color:
                                type: string
                              overlay-backgroundColor:
                                type: string
                              loadingOverlay-backgroundColor:
                                type: string
                              pace-progress-backgroundColor:
                                type: string
                              spinner-borderColor-dark:
                                type: string
                              spinner-borderColor-light:
                                type: string
                              hide_content_navigation:
                                type: boolean
                              optimizedCheckout-header-backgroundColor:
                                type: string
                              optimizedCheckout-show-backgroundImage:
                                type: boolean
                              optimizedCheckout-backgroundImage:
                                type: string
                              optimizedCheckout-backgroundImage-size:
                                type: string
                              optimizedCheckout-show-logo:
                                type: string
                              optimizedCheckout-logo:
                                type: string
                              optimizedCheckout-logo-size:
                                type: string
                              optimizedCheckout-logo-position:
                                type: string
                              optimizedCheckout-headingPrimary-color:
                                type: string
                              optimizedCheckout-headingPrimary-font:
                                type: string
                              optimizedCheckout-headingSecondary-color:
                                type: string
                              optimizedCheckout-headingSecondary-font:
                                type: string
                              optimizedCheckout-body-backgroundColor:
                                type: string
                              optimizedCheckout-colorFocus:
                                type: string
                              optimizedCheckout-contentPrimary-color:
                                type: string
                              optimizedCheckout-contentPrimary-font:
                                type: string
                              optimizedCheckout-contentSecondary-color:
                                type: string
                              optimizedCheckout-contentSecondary-font:
                                type: string
                              optimizedCheckout-buttonPrimary-font:
                                type: string
                              optimizedCheckout-buttonPrimary-color:
                                type: string
                              optimizedCheckout-buttonPrimary-colorHover:
                                type: string
                              optimizedCheckout-buttonPrimary-colorActive:
                                type: string
                              optimizedCheckout-buttonPrimary-backgroundColor:
                                type: string
                              optimizedCheckout-buttonPrimary-backgroundColorHover:
                                type: string
                              optimizedCheckout-buttonPrimary-backgroundColorActive:
                                type: string
                              optimizedCheckout-buttonPrimary-borderColor:
                                type: string
                              optimizedCheckout-buttonPrimary-borderColorHover:
                                type: string
                              optimizedCheckout-buttonPrimary-borderColorActive:
                                type: string
                              optimizedCheckout-buttonPrimary-borderColorDisabled:
                                type: string
                              optimizedCheckout-buttonPrimary-backgroundColorDisabled:
                                type: string
                              optimizedCheckout-buttonPrimary-colorDisabled:
                                type: string
                              optimizedCheckout-formChecklist-backgroundColor:
                                type: string
                              optimizedCheckout-formChecklist-color:
                                type: string
                              optimizedCheckout-formChecklist-borderColor:
                                type: string
                              optimizedCheckout-formChecklist-backgroundColorSelected:
                                type: string
                              optimizedCheckout-buttonSecondary-font:
                                type: string
                              optimizedCheckout-buttonSecondary-color:
                                type: string
                              optimizedCheckout-buttonSecondary-colorHover:
                                type: string
                              optimizedCheckout-buttonSecondary-colorActive:
                                type: string
                              optimizedCheckout-buttonSecondary-backgroundColor:
                                type: string
                              optimizedCheckout-buttonSecondary-borderColor:
                                type: string
                              optimizedCheckout-buttonSecondary-backgroundColorHover:
                                type: string
                              optimizedCheckout-buttonSecondary-backgroundColorActive:
                                type: string
                              optimizedCheckout-buttonSecondary-borderColorHover:
                                type: string
                              optimizedCheckout-buttonSecondary-borderColorActive:
                                type: string
                              optimizedCheckout-link-color:
                                type: string
                              optimizedCheckout-link-font:
                                type: string
                              optimizedCheckout-discountBanner-backgroundColor:
                                type: string
                              optimizedCheckout-discountBanner-textColor:
                                type: string
                              optimizedCheckout-discountBanner-iconColor:
                                type: string
                              optimizedCheckout-orderSummary-backgroundColor:
                                type: string
                              optimizedCheckout-orderSummary-borderColor:
                                type: string
                              optimizedCheckout-step-backgroundColor:
                                type: string
                              optimizedCheckout-step-textColor:
                                type: string
                              optimizedCheckout-form-textColor:
                                type: string
                              optimizedCheckout-formField-borderColor:
                                type: string
                              optimizedCheckout-formField-textColor:
                                type: string
                              optimizedCheckout-formField-shadowColor:
                                type: string
                              optimizedCheckout-formField-placeholderColor:
                                type: string
                              optimizedCheckout-formField-backgroundColor:
                                type: string
                              optimizedCheckout-formField-errorColor:
                                type: string
                              optimizedCheckout-formField-inputControlColor:
                                type: string
                              optimizedCheckout-step-borderColor:
                                type: string
                              optimizedCheckout-header-borderColor:
                                type: string
                              optimizedCheckout-header-textColor:
                                type: string
                              optimizedCheckout-loadingToaster-backgroundColor:
                                type: string
                              optimizedCheckout-loadingToaster-textColor:
                                type: string
                              optimizedCheckout-link-hoverColor:
                                type: string
                              product_sale_badges:
                                type: string
                              color_badge_product_sale_badges:
                                type: string
                              color_text_product_sale_badges:
                                type: string
                              color_hover_product_sale_badges:
                                type: string
                              restrict_to_login:
                                type: boolean
                              swatch_option_size:
                                type: string
                              social_icon_placement_top:
                                type: boolean
                              social_icon_placement_bottom:
                                type: string
                              geotrust_ssl_common_name:
                                type: string
                              geotrust_ssl_seal_size:
                                type: string
                              navigation_design:
                                type: string
                              price_ranges:
                                type: boolean
                              pdp-price-label:
                                type: string
                              pdp-sale-price-label:
                                type: string
                              pdp-non-sale-price-label:
                                type: string
                              pdp-retail-price-label:
                                type: string
                          read_only_files:
                            type: array
                            items:
                              type: string
                          resources:
                            type: object
                            properties:
                              cart:
                                type: boolean
                              bulk_discount_rates:
                                type: boolean
                              shop_by_brand:
                                type: object
                                properties:
                                  limit:
                                    type: integer
                          variations:
                            type: array
                            items:
                              type: object
                              properties:
                                name:
                                  type: string
                                id:
                                  type: string
                                meta:
                                  type: object
                                  properties:
                                    desktop_screenshot:
                                      type: string
                                    mobile_screenshot:
                                      type: string
                                    description:
                                      type: string
                                    demo_url:
                                      type: string
                                    optimized_for:
                                      type: array
                                      items:
                                        type: string
                                    industries:
                                      type: array
                                      items:
                                        type: string
                                images:
                                  type: object
                                settings:
                                  type: object
                                  properties:
                                    homepage_featured_products_count:
                                      type: integer
                                    homepage_featured_products_column_count:
                                      type: integer
                                    body-font:
                                      type: string
                                    headings-font:
                                      type: string
                                    color-textBase:
                                      type: string
                                    color-textBase--hover:
                                      type: string
                                    color-textBase--active:
                                      type: string
                                    color-textSecondary:
                                      type: string
                                    color-textSecondary--hover:
                                      type: string
                                    color-textSecondary--active:
                                      type: string
                                    color-textLink:
                                      type: string
                                    color-textLink--hover:
                                      type: string
                                    color-textLink--active:
                                      type: string
                                    color-textHeading:
                                      type: string
                                    color-primary:
                                      type: string
                                    color-primaryDark:
                                      type: string
                                    color-primaryDarker:
                                      type: string
                                    color-primaryLight:
                                      type: string
                                    color-secondary:
                                      type: string
                                    color-secondaryDark:
                                      type: string
                                    color-secondaryDarker:
                                      type: string
                                    color-error:
                                      type: string
                                    color-errorLight:
                                      type: string
                                    color-info:
                                      type: string
                                    color-infoLight:
                                      type: string
                                    color-success:
                                      type: string
                                    color-successLight:
                                      type: string
                                    color-warning:
                                      type: string
                                    color-warningLight:
                                      type: string
                                    color-black:
                                      type: string
                                    color-white:
                                      type: string
                                    color-whitesBase:
                                      type: string
                                    color-grey:
                                      type: string
                                    color-greyDarkest:
                                      type: string
                                    color-greyDarker:
                                      type: string
                                    color-greyDark:
                                      type: string
                                    color-greyMedium:
                                      type: string
                                    color-greyLight:
                                      type: string
                                    color-greyLighter:
                                      type: string
                                    color-greyLightest:
                                      type: string
                                    button--default-color:
                                      type: string
                                    button--default-colorHover:
                                      type: string
                                    button--default-colorActive:
                                      type: string
                                    button--default-borderColor:
                                      type: string
                                    button--default-borderColorHover:
                                      type: string
                                    button--default-borderColorActive:
                                      type: string
                                    button--primary-color:
                                      type: string
                                    button--primary-colorHover:
                                      type: string
                                    button--primary-colorActive:
                                      type: string
                                    button--primary-backgroundColor:
                                      type: string
                                    button--primary-backgroundColorHover:
                                      type: string
                                    button--primary-backgroundColorActive:
                                      type: string
                                    button--disabled-color:
                                      type: string
                                    button--disabled-backgroundColor:
                                      type: string
                                    button--disabled-borderColor:
                                      type: string
                                    icon-color:
                                      type: string
                                    icon-color-hover:
                                      type: string
                                    button--icon-svg-color:
                                      type: string
                                    icon-ratingEmpty:
                                      type: string
                                    icon-ratingFull:
                                      type: string
                                    carousel-bgColor:
                                      type: string
                                    carousel-title-color:
                                      type: string
                                    carousel-description-color:
                                      type: string
                                    carousel-dot-color:
                                      type: string
                                    carousel-dot-color-active:
                                      type: string
                                    carousel-dot-bgColor:
                                      type: string
                                    carousel-arrow-color:
                                      type: string
                                    carousel-arrow-bgColor:
                                      type: string
                                    carousel-arrow-borderColor:
                                      type: string
                                    card-title-color:
                                      type: string
                                    card-title-color-hover:
                                      type: string
                                    card-figcaption-button-background:
                                      type: string
                                    card-figcaption-button-color:
                                      type: string
                                    card--alternate-backgroundColor:
                                      type: string
                                    card--alternate-borderColor:
                                      type: string
                                    card--alternate-color--hover:
                                      type: string
                                    form-label-font-color:
                                      type: string
                                    input-font-color:
                                      type: string
                                    input-border-color:
                                      type: string
                                    input-border-color-active:
                                      type: string
                                    input-bg-color:
                                      type: string
                                    input-disabled-bg:
                                      type: string
                                    select-bg-color:
                                      type: string
                                    select-arrow-color:
                                      type: string
                                    checkRadio-color:
                                      type: string
                                    checkRadio-backgroundColor:
                                      type: string
                                    checkRadio-borderColor:
                                      type: string
                                    alert-backgroundColor:
                                      type: string
                                    alert-color:
                                      type: string
                                    alert-color-alt:
                                      type: string
                                    storeName-color:
                                      type: string
                                    body-bg:
                                      type: string
                                    header-backgroundColor:
                                      type: string
                                    footer-backgroundColor:
                                      type: string
                                    navUser-color:
                                      type: string
                                    navUser-color-hover:
                                      type: string
                                    navUser-dropdown-backgroundColor:
                                      type: string
                                    navUser-dropdown-borderColor:
                                      type: string
                                    navUser-indicator-backgroundColor:
                                      type: string
                                    navPages-color:
                                      type: string
                                    navPages-color-hover:
                                      type: string
                                    navPages-subMenu-backgroundColor:
                                      type: string
                                    navPages-subMenu-separatorColor:
                                      type: string
                                    dropdown--quickSearch-backgroundColor:
                                      type: string
                                    dropdown--wishList-backgroundColor:
                                      type: string
                                    blockquote-cite-font-color:
                                      type: string
                                    container-border-global-color-base:
                                      type: string
                                    container-fill-base:
                                      type: string
                                    container-fill-dark:
                                      type: string
                                    label-backgroundColor:
                                      type: string
                                    label-color:
                                      type: string
                                    overlay-backgroundColor:
                                      type: string
                                    loadingOverlay-backgroundColor:
                                      type: string
                                    pace-progress-backgroundColor:
                                      type: string
                                    spinner-borderColor-dark:
                                      type: string
                                    spinner-borderColor-light:
                                      type: string
                                    optimizedCheckout-header-backgroundColor:
                                      type: string
                                    optimizedCheckout-headingPrimary-color:
                                      type: string
                                    optimizedCheckout-headingPrimary-font:
                                      type: string
                                    optimizedCheckout-headingSecondary-color:
                                      type: string
                                    optimizedCheckout-headingSecondary-font:
                                      type: string
                                    optimizedCheckout-body-backgroundColor:
                                      type: string
                                    optimizedCheckout-colorFocus:
                                      type: string
                                    optimizedCheckout-contentPrimary-color:
                                      type: string
                                    optimizedCheckout-contentPrimary-font:
                                      type: string
                                    optimizedCheckout-contentSecondary-color:
                                      type: string
                                    optimizedCheckout-contentSecondary-font:
                                      type: string
                                    optimizedCheckout-buttonPrimary-font:
                                      type: string
                                    optimizedCheckout-buttonPrimary-color:
                                      type: string
                                    optimizedCheckout-buttonPrimary-colorHover:
                                      type: string
                                    optimizedCheckout-buttonPrimary-colorActive:
                                      type: string
                                    optimizedCheckout-buttonPrimary-backgroundColor:
                                      type: string
                                    optimizedCheckout-buttonPrimary-backgroundColorHover:
                                      type: string
                                    optimizedCheckout-buttonPrimary-backgroundColorActive:
                                      type: string
                                    optimizedCheckout-buttonPrimary-borderColor:
                                      type: string
                                    optimizedCheckout-buttonPrimary-borderColorHover:
                                      type: string
                                    optimizedCheckout-buttonPrimary-borderColorActive:
                                      type: string
                                    optimizedCheckout-buttonPrimary-borderColorDisabled:
                                      type: string
                                    optimizedCheckout-buttonPrimary-backgroundColorDisabled:
                                      type: string
                                    optimizedCheckout-buttonPrimary-colorDisabled:
                                      type: string
                                    optimizedCheckout-formChecklist-backgroundColor:
                                      type: string
                                    optimizedCheckout-formChecklist-color:
                                      type: string
                                    optimizedCheckout-formChecklist-borderColor:
                                      type: string
                                    optimizedCheckout-formChecklist-backgroundColorSelected:
                                      type: string
                                    optimizedCheckout-buttonSecondary-font:
                                      type: string
                                    optimizedCheckout-buttonSecondary-color:
                                      type: string
                                    optimizedCheckout-buttonSecondary-colorHover:
                                      type: string
                                    optimizedCheckout-buttonSecondary-colorActive:
                                      type: string
                                    optimizedCheckout-buttonSecondary-backgroundColor:
                                      type: string
                                    optimizedCheckout-buttonSecondary-borderColor:
                                      type: string
                                    optimizedCheckout-buttonSecondary-backgroundColorHover:
                                      type: string
                                    optimizedCheckout-buttonSecondary-backgroundColorActive:
                                      type: string
                                    optimizedCheckout-buttonSecondary-borderColorHover:
                                      type: string
                                    optimizedCheckout-buttonSecondary-borderColorActive:
                                      type: string
                                    optimizedCheckout-link-color:
                                      type: string
                                    optimizedCheckout-link-font:
                                      type: string
                                    optimizedCheckout-discountBanner-backgroundColor:
                                      type: string
                                    optimizedCheckout-discountBanner-textColor:
                                      type: string
                                    optimizedCheckout-discountBanner-iconColor:
                                      type: string
                                    optimizedCheckout-orderSummary-backgroundColor:
                                      type: string
                                    optimizedCheckout-orderSummary-borderColor:
                                      type: string
                                    optimizedCheckout-step-backgroundColor:
                                      type: string
                                    optimizedCheckout-step-textColor:
                                      type: string
                                    optimizedCheckout-form-textColor:
                                      type: string
                                    optimizedCheckout-formField-borderColor:
                                      type: string
                                    optimizedCheckout-formField-textColor:
                                      type: string
                                    optimizedCheckout-formField-shadowColor:
                                      type: string
                                    optimizedCheckout-formField-placeholderColor:
                                      type: string
                                    optimizedCheckout-formField-backgroundColor:
                                      type: string
                                    optimizedCheckout-formField-errorColor:
                                      type: string
                                    optimizedCheckout-formField-inputControlColor:
                                      type: string
                                    optimizedCheckout-step-borderColor:
                                      type: string
                                    optimizedCheckout-header-borderColor:
                                      type: string
                                    optimizedCheckout-header-textColor:
                                      type: string
                                    optimizedCheckout-loadingToaster-backgroundColor:
                                      type: string
                                    optimizedCheckout-loadingToaster-textColor:
                                      type: string
                                    optimizedCheckout-link-hoverColor:
                                      type: string
                                    color_badge_product_sale_badges:
                                      type: string
                                    color_text_product_sale_badges:
                                      type: string
                                    color_hover_product_sale_badges:
                                      type: string
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Requirements and Restrictions


                        Your theme's config.json file must meet the following
                        requirements:


                        * It must be named `config.json`, must reside in the
                        root of your `theme-name` top level subdirectory (e.g.:
                        `/cornerstone/config.json` or `/stencil/config.json`),
                        and must be valid JSON.

                        * The maximum allowable size for a theme's `config.json`
                        file is 64 KB. Exceeding this limit will trigger an
                        error upon uploading the theme to BigCommerce.

                        * Each key's value is restricted to 64 characters.
                        Exceeding this limit will similarly trigger an upload
                        error.

                        * Other than these size constraints, there is no limit
                        on the number of keys and values that you can place in a
                        theme's `config.json`.


                        _Carefully check your theme against all the requirements
                        listed here – including the required keys within the
                        `meta` object and `variations` array. While some
                        requirements are not enforced in local development, they
                        will be validated (and will trigger errors) when you
                        later upload your theme to BigCommerce._


                        ### Required Themewide Keys

                        The `config.json` file must contain at least the
                        following keys, with appropriate values (as outlined
                        above):


                        *name

                        * `version`

                        * `settings` (which must itself be a valid JSON object)

                        * `variations` (an array of at least one, and at most
                        four, variation objects)

                        * `meta` (an object; see specific requirements below)


                        ### Required `meta` Keys


                        The meta object must contain at least the following
                        keys, with appropriate values:


                        * `price`

                        * `author_name`

                        * `author_email`

                        * `author_support_url`

                        * `documentation_url`


                        For illustration, here is a commented excerpt:


                        ```

                        {
                          ...
                          "meta": {
                            "price": 15000, // in cents; non-negative integer, minimum 0
                            "author_name:" "eCommerce Themes, Inc.", // Must be a string, not null
                            "author_email": "support@example.com", // Must be a string, should be a valid email address, not null
                            "author_support_url": "http://example.com/contactus", //  Must be a string, should be a valid URL, not null
                            "documentation_url": "http://example.com/guide", // Must be a string, limit of 255 characters,
                                  not null
                            "composed_image": "path/to/composed.png", // Must be a string path to the composed-image file
                            "features": [ // Array of feature strings, all of which must be in the list enumerated here: 
                                  https://github.com/bigcommerce/theme-registry/blob/master/app/schemas/theme_config.json#L33
                              "fully_responsive" // Must include at least one feature, and no duplicate entries
                            ]
                          },
                          ...
                        }

                        ```


                        ### Required `variation` Keys


                        For each variation that you choose to include in your
                        theme (at least one is required), you must provide at
                        least the following keys and sub-element, with
                        appropriate values:


                        * `name`

                        * `id`

                        * `meta` (an object, containing at least:)

                        * `description`


                        For illustration, here is a redacted excerpt from
                        Cornerstone:


                        ```

                        "variations": [
                            {
                              "name": "Light",
                              "id": "light",
                              "meta": {
                                "desktop_screenshot": "desktop_light.png",
                                "mobile_screenshot": "mobile_light.png",
                                "description": "Ideal for a wide range of businesses and brands, this design is fully responsive, simple, and ready for you to add your branding, logo, and products. ....",
                            ...
                            }
                          ]
                        ```
                      header:
                        anchor: config_requirements-and-restrictions
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Video Demo


                        <iframe width="560" height="315"
                        src="https://www.youtube.com/embed/VZYZsDoEOpQ"
                        frameborder="0" allow="autoplay; encrypted-media"
                        allowfullscreen></iframe>
                      header:
                        anchor: config_video-demo
              - title: Preparing Thumbnail Images
                route:
                  path: /preparing-thumbnail-images
                data:
                  blocks:
                    - type: html
                      data: <h1>Preparing Thumbnail Images</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#preparing_where-and-how-merchants\">Where Merchants See Your Theme's Thumbnail Images</a></li>\n    <li><a href=\"#preparing_general-image\">General Image Requirements</a></li>\n    <li><a href=\"#preparing_themewide-composite\">Themewide Composite Image</a></li>\n    <li><a href=\"#preparing_variations\">Variations: Desktop/Mobile Screenshots</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Where Merchants See Your Theme's Thumbnail Images


                        A complete Stencil theme includes screenshots to show
                        off the theme on cards that appear in two locations
                        within the BigCommerce Control Panel:


                        * **Storefront** › **My Themes**: Each individual card
                        displays a _themewide composite image_, which is an
                        image that contains combination of screenshots of the
                        theme's multiple variations. 

                        * **Storefront** › **Themes Marketplace**: Each card
                        displays one variation of your theme. The three
                        variations of Cornerstone (Light, Warm, and Bold) are
                        displayed across three separate cards.
                      header:
                        anchor: preparing_where-and-how-merchants
                    - type: tabs
                      data:
                        children:
                          - title: Desktop View of My Themes
                            blocks:
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6116/1539625143199
                                header:
                                  title: Storefront › My Themes
                                  subtitle: >-
                                    Each card contains a themewide composite
                                    image, showing all the variations of the
                                    theme in each. In this image, we see 3
                                    variations for the Cornerstone theme and 4
                                    for the Showroom theme.
                                config:
                                  centered: true
                                  fluid: true
                                  bordered: true
                                  maxWidth: '600'
                                  maxHeight: '900'
                          - title: Desktop View of Themes Marketplace
                            blocks:
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6116/1539624737619
                                header:
                                  title: Storefront › Themes Marketplace
                          - title: Mobile View of Themes Marketplace
                            blocks:
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6116/1539625004658
                                config:
                                  centered: true
                                  fluid: true
                                  bordered: true
                                  maxWidth: '500'
                                  maxHeight: '1000'
                                header:
                                  title: Storefront › Themes Marketplace
                      header:
                        title: >-
                          How your theme will appear in the Control Panel and
                          Theme Marketplace
                    - type: text
                      data: >-
                        ## General Image Requirements


                        Below are details about:

                        * how to size and save these images to stage them within
                        your theme's directory structure

                        * how to reference the images in your
                        [config.json](https://github.com/bigcommerce/cornerstone/blob/master/config.json)
                        file.


                        All screenshots described below must meet the following
                        specifications in order for the `stencil bundle` command
                        to be able to process them:


                        * Saved to a supported image file type: .jpg/.jpeg,
                        .png, or .gif.

                        * Be stored in your
                        [<theme‑name>/meta/](https://github.com/bigcommerce/cornerstone/tree/master/meta)
                        subdirectory.

                        * Must be in **portrait aspect ratio**, with specific
                        resolutions listed under [Themewide Composite
                        Image](#preparing_themewide-composite) below.
                      header:
                        anchor: preparing_general-image
                    - type: text
                      data: >
                        ## Themewide Composite Image


                        The themewide composite image represents your theme in
                        the control panel's **Storefront** › **My Themes**,
                        which shows merchants their currently available themes
                        (including any custom uploaded themes). 


                        This file will normally be a mosaic of screenshots from
                        multiple variations within your theme. It must meet the
                        following requirements, beyond the general
                        specifications above:


                        * Resolution of 600 x 760 pixels (horizontal x
                        vertical).

                        * File size smaller than 2 MB.

                        * Arbitrary filename prefix, referenced in your
                        [config.json](https://github.com/bigcommerce/cornerstone/blob/master/config.json)
                        file as the `meta` object's `composed_image` key value.


                        Here is an example of a compliant file type and
                        location:


                        `<theme‑name>/meta/composed.png`


                        Here is how you would reference this file within
                        [config.json](https://github.com/bigcommerce/cornerstone/blob/master/config.json):
                      header:
                        anchor: preparing_themewide-composite
                    - type: code
                      data: "{\n  [...]\n  \"meta\": {\n    [...]\n    \"composed_image\": \"composed.png\",\t\n    [...]\n}"
                      header:
                        title: config.json
                        subtitle: Referencing composed.png
                      config:
                        mode: js
                    - type: text
                      data: "## Variations: Desktop/Mobile Screenshots\n\nEach variation within your theme must be represented by two additional screenshots if you want that variation to appear in the control panel's  **Storefront** › **Themes Marketplace**, which shows merchants the themes that are available for download.\n\n### Desktop Screenshot\n\nThe first screenshot, showing your theme on a desktop viewport, must meet the following requirements beyond the general specifications above: \n* Resolution of 2048 x 2600 pixels (horizontal x vertical).\n* File size smaller than 5 MB\n* Arbitrary filename prefix, referenced in your [config.json](https://github.com/bigcommerce/cornerstone/blob/master/config.json) file as the `variations` object's `desktop_screenshot` key value.\n\t\n### Mobile Screenshot\n\nThe second screenshot, showing your theme on a mobile viewport, must meet the following requirements beyond the general specifications above: \n* Resolution of 304 x 540 pixels (horizontal x vertical).\n* File size smaller than 1 MB.\n* Arbitrary filename prefix, referenced in your [config.json](https://github.com/bigcommerce/cornerstone/blob/master/config.json) file as the `variations` object's `mobile_screenshot` key value.\n\nBelow is an example showing two files of compliant types and location:\n\n* `<theme‑name>/meta/desktop_bright.png`\n* `<theme‑name>/meta/mobile_bright.png`\t\n\nHere is how you would reference these files within [config.json](https://github.com/bigcommerce/cornerstone/blob/master/config.json), for a variation named `Bright`:\n\n\n "
                      header:
                        anchor: preparing_variations
                    - type: code
                      data: |
                        [...]
                          "variations": [
                            {
                              "name": "Bright",
                              "id": "bright",
                              "meta": {
                                "desktop_screenshot": "desktop_bright.png",
                                "mobile_screenshot": "mobile_bright.jpg",
                            [...]
                            }
                          ]
                      header:
                        title: config.json
                        subtitle: Referencing Bright Variation
                      config:
                        mode: js
              - title: Theme Editor Troubleshooting
                route:
                  path: /theme-editor-troubleshooting
                data:
                  blocks:
                    - type: html
                      data: <h1>Theme Editor Troubleshooting</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#theme-editor_empty\">Empty Drop-Down List in Theme Editor Panel</a></li>\n    <li><a href=\"#theme-editor_configured\">Configured Control Missing from Theme Editor Panel</a></li>\n    <li><a href=\"#theme-editor_theme-changes\">Theme Changes Not Saved from Theme Editor UI</a></li>\n\t</ul>\n</div>"
                    - type: callout
                      data:
                        title: Check the Terminal Window
                        body: >-
                          For any unexpected behavior that you encounter while
                          developing your Stencil theme, please also check the
                          terminal window where you started Stencil CLI. In some
                          cases, the terminal will provide a verbose error
                          message specifying where to look for problems. For
                          less-detailed error messages, we list diagnostic
                          suggestions in this documentation.
                    - type: text
                      data: >-
                        ## Empty Drop-Down List in Theme Editor Panel


                        * **Symptom:** A drop-down list's outline appears below
                        its configured label. However, the list appears to be
                        empty.

                        * **Likely Cause:** A default value specified in the
                        theme's config.json file is not enumerated in the
                        schema.json file.

                        * **Resolution:** Update schema.json to include the
                        config.json value.
                      header:
                        anchor: theme-editor_empty
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Configured Control Missing from Theme Editor Panel


                        * **Symptom:** A control that you have configured within
                        schema.json is completely absent from the Theme Editor
                        UI.

                        * **Likely Cause:** The specified "type" is one of:
                        text, text area, radio [button], or image.

                        (Theme Editor does not currently support these data
                        types.)

                        * **Resolution:** Display the user option via one of the
                        supported data types: color, font, select [drop-down
                        list], or checkbox.
                      header:
                        anchor: theme-editor_configured
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Theme Changes Not Saved from Theme Editor UI


                        * **Symptom:** Changes saved in a browser's Theme Editor
                        panel are not reflected in the storefront.

                        * **Likely Cause:** Check whether multiple users are
                        simultaneously using Theme Editor to customize the same
                        storefront.

                        * **Resolution:** We strongly recommend opening only one
                        instance of Theme Editor, at a time, per storefront.
                        BigCommerce currently provides no synchronization
                        mechanism for configuration changes from multiple Theme
                        Editor instances. So the storefront's `schema.json` will
                        record the last changes made by any instance – but
                        changes saved earlier by other instances might be lost.
                      header:
                        anchor: theme-editor_theme-changes
        - title: Front Matter
          route:
            path: /front-matter
          data:
            children:
              - title: 'Front Matter '
                route:
                  path: /front-matter-overview
                data:
                  blocks:
                    - type: html
                      data: <h1>Front Matter Overview</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#front-matter-overview_declaring-objects\">Declaring Objects</a></li>\n    <li><a href=\"#front-matter-overview_yaml-syntax\">YAML Syntax – Requirements</a></li>\n    <li><a href=\"#front-matter-overview_filtering-attributes\">Filtering Attributes</a></li>\n    <li><a href=\"#front-matter-overview_combining-front-matter\">Combining Front Matter with Handlebars Attributes</a></li>\n    <li><a href=\"#front-matter-overview_default-versus-custom\">Default versus Custom Attributes, per Page</a></li>\n    <li><a href=\"#front-matter-overview_declaring-multiple\">Declaring Multiple Attributes</a></li>\n\t</ul>\n</div>\n\n\n\n\n\n\n"
                    - type: text
                      data: "## Declaring Front-Matter Objects\n\nWhen you create a store page that requires specific attributes (such as 'New Products') to be displayed, you must first declare the object and attribute on the page in a front-matter block at the top of the page's HTML template file. The front matter block makes the attribute accessible on the page. Then, to display the attribute on the storefront page, you will reference the the object using Handlebars within the page's HTML.\nFor example, to display 'new products' on a storefront's home page, you first need to make new products accessible on the home page. To achieve this, include the following front matter block at the top of the [home.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/home.html) file to declare the products object with its new attribute. This allows a storefront's home page to access a store's \"New Products.\"\n\n```\n---\nproducts:\n    new:\n    \tlimit: {{theme_settings.homepage_new_products_count}}\n---\n```\n\n**Note:** A 'limit' is required for Product Objects to render on a storefront page. You can hard code the limit value or utilize handlebars.js to reference it from the theme's config.json file. In this case, the limit value is being referenced from the `settings` JSON object in the `config.json` file using handlebars.js. Information on required attributes is detailed in the Front Matter Attributes Reference. \n\nAfter including the front matter block at the top of the home.html file, the New Products attribute will be accessible in the home page's context. As previously stated, simply including the front matter block will not display the attribute on the page. In order to actually display the new products on the desired storefront page, you will refernce the attribute using Handlebars in the same file you have added the front matter block to.\nIn this example, we will include the following code in Cornerstone's [home.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/home.html) file to display New Products on our store's home page. \n\n\n```\n  {{#if products.new}}\n        {{> components/products/new products=products.new columns=theme_settings.homepage_new_products_column_count}}\n    {{/if}}\n```\n"
                      header:
                        anchor: front-matter-overview_declaring-objects
                    - type: text
                      data: >+
                        ## YAML Syntax – Requirements


                        Stencil front matter uses the conventions of [YAML]()
                        (short for the recursive "YAML Ain't Markup Language").
                        Here are the YAML conventions you must follow in front
                        matter:


                        Place the front-matter block at the top of your
                        template.

                        Fence the beginning and end of the front-matter block
                        with a row of three hyphens (---), as you see in the
                        examples here.

                        Show attribute > key relationship (or object > property
                        relationship) by indenting the children. In the example
                        above, products is the object,

                        Place a colon (:) directly after each attribute name,
                        and directly after each key name. (Colons separate
                        key:value pairs.)

                        Identifiers are case-sensitive.


                        ### Restrictions


                        You can use front matter to specify attributes on the
                        tops of pages in your

                        `<theme-name>/templates/pages/` subdirectory.


                        You **cannot** use front matter to accomplish this on
                        pages in the following subdirectories:

                        * `<theme-name>/templates/components/`

                        * `<theme-name>/templates/layout/`

                        * `<theme-name>/templates/pages/custom/` 


                        * Indent using only spaces, not tabs. (YAML forbids
                        tabs, to avoid inconsistent encoding of tabs across
                        platforms.) An indent of even one space indicates a
                        child.


                        * Front matter on a given page cannot exceed 64 KB.


                        * If a front-matter directive contains an invalid
                        option, Stencil CLI will silently ignore that option.

                      header:
                        anchor: front-matter-overview_yaml-syntax
                    - type: text
                      data: >
                        ## Filtering Attributes


                        Some attributes can accept indented keys, or key-value
                        pairs, to further define the attribute. For example,
                        limit is a key commonly used to restrict the number of
                        objects to return for an attribute.

                        To return products similar to the product that a
                        customer is currently viewing – with a limit of six –
                        you would declare front matter as follows:


                        ```

                        ---

                        products:
                            similar_by_views:
                                limit: 6
                        ---

                        ```


                        Most keys have a default value, as listed in the [Front
                        Matter Attributes]() Reference. Specifying the key
                        without a value will call that default value. The
                        default value for `similar_by_views:limit:` happens to
                        be `4`, so inserting `limit` with no integer will
                        display four products:


                        ```

                        ---

                        products:
                            similar_by_views:
                                limit:
                        ---

                        ```
                      header:
                        anchor: front-matter-overview_filtering-attributes
                    - type: callout
                      data:
                        body: >-
                          To keep your pages lightweight, specify only the
                          attributes you need per page. Also, use the limit key
                          (with appropriate values) for attributes that accept
                          it.
                        title: Filtering for Faster Page Loads
                    - type: text
                      data: >-
                        ## Combining Front Matter with Handlebars Attributes


                        The next example builds on front-matter object
                        invocation and filtering, by showing a corresponding
                        Handlebars statement in HTML. Here is how you would
                        declare the `products` object to return four new
                        products, and to then display each product’s name:


                        ```

                        ---

                        products:
                            new:
                                limit: 4
                        ---


                        <h1> This is the HTML for the new-products example </h1>

                        {{#each products.new}}
                            <p>{{ name }}</p>
                        {{/each}}

                        ```
                      header:
                        anchor: front-matter-overview_combining-front-matter
                    - type: callout
                      data:
                        body: >-
                          In the above HTML, the {{ name }} identifier calls an
                          attribute of Stencil’s common product card model,
                          which consolidates details about a given product. For
                          this and other objects that you can access through
                          HTML, please see our reference section on Handlebars
                          objects.
                        title: ' Reading the Handlebars'
                    - type: text
                      data: >-
                        ## Default versus Custom Attributes, per Page


                        To make templates readily useful, they automatically
                        include a page’s default attributes. For example, a
                        theme’s
                        [product.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/product.html)
                        page will automatically include a product attribute.


                        However, if you want to include additional attributes on
                        a page, you can declare those attributes in front matter
                        using the conventions shown above. [The Declaring
                        Objects](#front-matter-overview_declaring-objects)
                        example shows the only way to display a "new products"
                        storefront section, which requires front-matter
                        invocation.
                      header:
                        anchor: front-matter-overview_default-versus-custom
                    - type: text
                      data: >+
                        ## Declaring Multiple Attributes


                        Below is an example that assumes you want to include a
                        product’s reviews and also related products. To display
                        images for the related products, the HTML statement
                        `<img src="{{getImage image 'gallery'}}">` relies on
                        Stencil's `{{getImage}}` custom Handlebars helper:


                        ```

                        ---

                        product:
                           reviews:
                               limit: 9
                           related_products:
                               limit: 10
                        ---



                        <h2>{{ product.name }}</h2>

                        {{#each product.reviews.list}}
                            <p>{{text}}</p>
                        {{/each}}

                        <h3>Related Products</h3>

                        {{#each product.related_products}}
                          <img src="{{getImage image 'gallery'}}">
                          <p>{{ name }}</p>
                        {{/each}}

                        ```

                      header:
                        anchor: front-matter-overview_declaring-multiple
              - title: Front Matter Attributes
                route:
                  path: /front-matter-attributes-reference
                data:
                  blocks:
                    - type: html
                      data: <h1>Front Matter Attributes Reference</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#front-matter-attributes-reference_global\">Global Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_category\">Category Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_blog\">Blog Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_product\">Product Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_brand\">Brand Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_brand-list\">Brand List Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_cart\">Cart Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_search\">Search Attributes</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: "## Global Attributes\n\nGlobal attributes are available on all pages.\n\n<table>\n  <tr>\n    <th>Attribute</th>\n    <th>Option with Sample Assignment</th>\n    <th>Default Value</th>\n    <th>Details and Other \nAllowable Values/Results</th>\n  </tr>\n  <tr>\n    <td>customer:</td>\n    <td></td>\n    <td></td>\n    <td>Customer attributes are always included, and are available if the active shopper is logged in.</td>\n  </tr>\n\n  <tr>\n  \t<td></td>\n  \t<td>addresses: true</td>\n    <td>true – on address page\n\nnull – on all other pages</td>\n    <td>Boolean indicating whether to retrieve addresses for this customer.\n\nNo filtering available. Default sorting is by address id, from lowest to highest.\n\nnull or false: Do not retrieve addresses.\ntrue: Retrieve addresses.</td>\n  </tr>\n  \n  <tr>\n    <td></td>\n    <td>returns: true</td>\n    <td>true – on returns page\n\nnull – on all other pages</td>\n    <td>Boolean indicating whether to retrieve product-return requests for this customer.\n      \n      No filtering available.\n      \n      true: Retrieve requests.\n      \n      null or false: Do not retrieve requests.</td>\n  </tr>\n  \n  <tr>\n    <td></td>\n    <td>wishlists: <br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: No wishlists displayed.\n      <br><p></p>\n      &lt;number&gt; limits the number of wishlists displayed.\n      <br><p></p>\n      If &lt;number&gt; is not defined, retrieves an unlimited number of wishlists.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">orders: <br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">null</td>\n    <td class=\"\">Contains all orders, complete or not.\n      <br><p></p>\n      null: no orders displayed.\n      <br><p></p>\n      &lt;number&gt; limits the number of orders displayed.\n      <br><p></p>\n      If &lt;number&gt; is not defined, displays 20 orders. (Default sorting is by order id, from lowest to highest.)</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">recently_viewed_products:</td>\n    <td class=\"\">null</td>\n    <td class=\"\">Boolean indicating whether to display recently viewed products.<br><p></p>\n\nNo filtering available.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\">products:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">(When filtering/limiting, products' default sorting is by order id, from lowest to highest.)</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">featured: <br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: No featured products displayed.<br><p></p>\n&lt;number&gt; limits the number of featured products displayed.\n      <br><p></p>\n      If &lt;number&gt; is not set, defaults to 4 products.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">new:<br>\n      <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">\nnull</td>\n    <td class=\"\">null: No new products displayed.<br><p></p>\n&lt;number&gt; limits the number of new products displayed. Maximum allowable value is 25.\n      <br><p></p>\n      If &lt;number&gt; is not defined, defaults to 8 products.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">top_sellers: <br>\n      <span class=\"indent1\">limit:  &lt;number&gt;</span></td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: No top-selling products displayed.\n      <br><p></p>\n      &lt;number&gt; limits the number of top sellers displayed.\n      <br><p></p>\n      If &lt;number&gt; is not defined, defaults to all top sellers.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">carousel: true</td>\n    <td class=\"\"></td>\n  <td class=\"\">null</td>\n    <td class=\"\">Boolean indicating whether to display a carousel on storefront.\n      <br><p></p>\n      No filtering available.\n      <br><p></p>\n      null or false: No carousel display.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">blog:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">(Default sorting is by published_date, from most-recent to earliest.)</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">recent_posts:<br>\n      <span class=\"indent1\">limit: &lt;number&gt;</span>\n    </td>\n    <td class=\"\">20</td>\n    <td class=\"\">null: No recent blog posts displayed.\n      <br><p></p>      \n      &lt;number&gt; limits the number of recent blog posts displayed.\n      <br><p></p>      \n      If &lt;number&gt; is not defined, defaults to the maximum of 20 blog posts.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">summary: &lt;number&gt;</td>\n    <td class=\"\">100</td>\n    <td class=\"\"><!-- null: No summary characters displayed.<br><p></p> -->      \n      &lt;number&gt; sets the number of characters to display in each blog-post summary.\n      <br><p></p>\n      If &lt;number&gt; is not defined, displays 100 characters.</td>\n  </tr>\n  \n  <!-- <tr>\n    <td class=\"\">brands:<br>\n        <span class=\"indent1\">&lt;number&gt;</span></td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: Do not display a brand list.<br><p></p>\n&lt;number&gt; limits the number of brands to return.<br><p></p>\nIf &lt;number&gt; is not defined, returns all brands.</td>\n  </tr> -->\n  \n  <tr>\n    <td class=\"\">cart: true</td>\n    <td class=\"\"></td>\n    <td class=\"\">false</td>\n    <td class=\"\">Boolean indicating whether to retrieve cart data.<br><p></p>\ntrue: Return cart data.<br><p></p>\nfalse: Do not return cart data.</td>\n  </tr>\n  \n  <tr>\n    <td>categories: true</td>\n    <td></td>\n    <td>false</td>\n    <td>Boolean indicating whether to retrieve the <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/categories\">category tree</a> during an AJAX request.\n      <br><p></p>\n      true: Retrieve the category tree.\n      <br><p></p>\n      false: Do not retrieve the category tree.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">description: true</td>\n    <td class=\"\">\nfalse</td>\n    <td class=\"\">\nBoolean indicating whether to retrieve category descriptions dynamically from the database.\n      <br><p></p>\n      Set to true for themes that must display category descriptions when pages render. (This can slow page loads.)</td>\n  </tr>\n    \n  <tr>\n    <td>shop_by_brand:</td>\n    <td>limit: &lt;number&gt;</td>\n    <td>null</td>\n    <td>Typically used in a footer or sidebar.<br><p></p>\nnull: Do not display this brand list.<br><p></p>\n&lt;number&gt; limits the number of brands to return.<br><p></p>\nIf &lt;number&gt; is not defined, returns 10 brands, ordered by the number of products per brand.</td>\n  </tr>\n</table>"
                      header:
                        anchor: front-matter-attributes-reference_global
                    - type: text
                      data: >-
                        ## Category Attributes 


                        Category attributes are available in the context of a
                        category.


                        <table>
                          <tr>
                            <th>Attribute</th>
                            <th>Option with Sample Assignment</th>
                            <th>Default Value</th>
                            <th>Details</th>
                          </tr>
                          <tr>
                            <td>category:</td>
                            <td></td>
                            <td></td>
                            <td></td>
                          </tr>

                          <tr>
                            <td></td>
                            <td>shop_by_price:</td>
                            <td>
                        false</td>
                            <td>
                        Boolean indicating whether to display Shop-by-Price
                        controls.</td>
                          </tr>

                          <tr>
                            <td></td>
                            <td>products:<br>
                                <span class="indent1">limit: &lt;number&gt;</span></td>
                            <td>
                        16</td>
                            <td>
                        Defines the number of products displayed per page for
                        this category. Range of possible values is 1&ndash;100
                        products.</td>
                          </tr>
                        </table>
                      header:
                        anchor: front-matter-attributes-reference_category
                    - type: text
                      data: >-
                        ## Blog Attributes


                        Blog attributes are available in the context of a blog.


                        <table>
                          <tr>
                            <th>Attribute</th>
                            <th>Sub-Attribute</th>
                            <th>Option with Sample Assignment</th>
                            <th>Default Value</th>
                            <th>Details</th>
                          </tr>
                          
                          <tr>
                            <td class="">blog:</td>
                            <td class=""></td>
                            <td class=""></td>
                            <td class=""></td>
                            <td class=""></td>
                          </tr>

                          <tr>
                            <td class=""></td>
                            <td class="">posts:</td>
                            <td class=""></td>
                            <td class=""></td>
                            <td class="">(Default sorting is by published_date, from most-recent to earliest.)</td>
                          </tr>

                          <tr>
                            <td class=""></td>
                            <td class=""></td>
                            <td class="">limit: &lt;number&gt;</td>
                            <td class="">null</td>
                            <td class="">null: No blog posts displayed.<br><p></p>
                              &lt;number&gt; limits the number of blog posts displayed.<br><p></p>
                              Maximum is 20 blog posts per page.
                            </td>
                          </tr>
                          
                          <tr>
                            <td class=""></td>
                            <td class=""></td>
                            <td class="">pages: &lt;number&gt;</td>
                            <td class="">5</td>
                            <td class="">
                        null: No pagination.<br><p></p>
                              
                              &lt;number&gt; sets the number of pages to display in pagination links.<br><p></p>
                              
                              If &lt;number&gt; is not defined, defaults to 5 pages.
                            </td>
                          </tr>
                          
                          <tr>
                            <td class=""></td>
                            <td class=""></td>
                            <td class="">summary: &lt;number&gt;</td>
                            <td class="">250</td>
                            <td class=""> <!-- null: No summary characters displayed.<br><p></p> -->  
                              &lt;number&gt; sets the number of characters to display in each blog-post summary.<br><p></p>
                        If &lt;number&gt; is not defined, displays 250
                        characters.</td>
                          </tr>
                        </table>
                      header:
                        anchor: front-matter-attributes-reference_blog
                    - type: text
                      data: >-
                        ## Product Attributes 


                        Product attributes are available in the context of a
                        product.


                        <table>
                          <tr>
                            <td>Attribute</td>
                            <td>Option with Sample Assignment</td>
                            <td>Default Value</td>
                            <td>Details</td>
                          </tr>
                          <tr>
                            <td class="">product:</td>
                            <td class=""></td>
                            <td class=""></td>
                            <td class="">(When filtering/limiting, products' default sorting is by order id, from lowest to highest.)</td>
                          </tr>

                          <tr>
                            <td class=""></td>
                            <td class="">videos:<br>
                                <span class="indent1">limit: &lt;number&gt;</span></td>
                            <td class="">
                        [unlimited]</td>
                            <td class="">If product.videos is not defined, no videos are returned.<br><p></p>
                              
                              If product.videos is defined, the default behavior is to return all videos. <!-- Check & correct this. --> <br><p></p>
                              
                              If product.videos.limit is also defined, &lt;number&gt; sets the maximum number of videos returned.</td>
                          </tr>
                          
                          <tr>
                            <td class=""></td>
                            <td class="">images:<br>
                                <span class="indent1">limit: &lt;number&gt;</span></td>
                            <td class="">
                        [unlimited]</td>
                            <td class="">If product.images is not defined, no images are returned.<br><p></p>
                              
                              If product.images is defined, you must also define product.images.limit, which throttles the number of images returned. <br><p></p>
                        The maximum allowable value for this option's
                        &lt;number&gt; parameter is 5 images.</td>
                          </tr>
                          
                          <tr>
                            <td class=""></td>
                            <td class="">reviews: true<br>
                                <span class="indent1">limit: &lt;number&gt;</span></td>
                            <td>[false]</td>
                            <td>Boolean indicating whether to display product reviews.
                                
                              If product.reviews is present, and is not explicitly set to "false", reviews will appear.
                              
                              If &lt;number&gt; is not defined, defaults to 10 reviews.
                              (When filtering/limiting reviews, default sorting is by review id, from lowest to highest.)</td>
                          </tr>
                          
                          <tr>
                            <td class=""></td>
                            <td class="">related_products:<br>
                                <span class="indent1">limit: &lt;number&gt;</span></td>
                            <td class="">
                        [unlimited]</td>
                            <td class="">Displays products that are related by name.<br><p></p>
                              
                              &lt;number&gt; limits the number of products displayed.<br><p></p>
                              
                              If &lt;limit&gt; is absent or undefined, the default behavior is to display all related products.<br><p></p> 

                        Inserting “limit:” with no integer will display 0
                        products. </td>
                          </tr>
                          
                          <tr>
                            <td></td>
                            <td>similar_by_views:<br>
                                <span class="indent1">limit: &lt;number&gt;</span></td>
                            <td>[unlimited]</td>
                            <td>Displays products similar to those displayed in the current page context.<br><p></p>
                              
                              &lt;number&gt; limits the number of products displayed.
                              
                              If &lt;limit&gt; is absent or undefined, default is to display 4 products.</td>
                          </tr>
                        </table>
                      header:
                        anchor: front-matter-attributes-reference_product
                    - type: text
                      data: >-
                        ## Brand Attributes


                        Brand attributes are available in the context of a
                        brand.<br><br>


                        <table>
                          <tr>
                            <td>Attribute</td>
                            <td>Option with Sample Assignment</td>
                            <td>Default Value</td>
                            <td>Details</td>
                          </tr>
                          <tr>
                            <td>brand:</td>
                            <td></td>
                            <td></td>
                            <td></td>
                          </tr>

                          <tr>
                            <td class=""></td>
                            <td class="">products: <br>
                              <span class="indent1">limit: &lt;number&gt;</span></td>
                            <td class="">
                        50</td>
                            <td class="">
                        Defines the number of products displayed per page for
                        this brand. Range of possible values is 1&ndash;50
                        products.</td>
                          </tr>
                        </table>
                      header:
                        anchor: front-matter-attributes-reference_brand
                    - type: text
                      data: >-
                        ## Brand List Attributes


                        These attributes are available in the context of a list
                        of brands.<br><br>


                        <table>
                          <tr>
                            <td>Attribute</td>
                            <td>Option with Sample Assignment</td>
                            <td>Default Value</td>
                            <td>Details</td>
                          </tr>
                          <tr>
                            <td>brands:</td>
                            <td></td>
                            <td></td>
                            <td>(When retrieving a collection of brands, default sorting is by brand id, from lowest to highest.)</td>
                          </tr>

                          <tr>
                            <td class=""></td>
                            <td class="">limit: &lt;number&gt;</td>
                            <td class="">50</td>
                            <td class="">
                        Sets the number of brands displayed in the list. If
                        &lt;limit&gt; is not defined, returns all brands, up to
                        a maximum of 50.</td>
                          </tr>
                        </table>
                      header:
                        anchor: front-matter-attributes-reference_brand-list
                    - type: text
                      data: >-
                        ## Cart Attributes 


                        Cart attributes are available in the context of a
                        shopper's cart.


                        <table>
                          <tr>
                            <td>Attribute</td>
                            <td>Sub-Attribute</td>
                            <td>Option with Sample Assignment</td>
                            <td>Default Value</td>
                            <td>Details</td>
                          </tr>
                          <tr>
                            <td>cart</td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                          </tr>
                          <tr>
                            <td></td>
                            <td>suggestions:</td>
                            <td></td>
                            <td></td>
                            <td>Suggested products to display to shopper, based on cart contents. <NOBR>(If enabled,</nobr> these suggestions appear only immediately after the shopper adds an item to the cart.)</td>
                          </tr>
                          <tr>
                            <td class=""></td>
                            <td class=""></td>
                            <td class="">limit: &lt;number&gt;</td>
                            <td class="">null</td>
                            <td class="">null: Do not display suggested products.<br><p></p>
                        &lt;number&gt; limits the number of suggested products
                        to return.

                        If &lt;number&gt; is not defined, returns 4 suggested
                        products.</td>
                          </tr>
                        </table>
                      header:
                        anchor: front-matter-attributes-reference_cart
                    - type: text
                      data: >-
                        ## Search Attributes 


                        Search attributes are available in the context of a
                        search results page.


                        <table>
                          <tr>
                            <td>Attribute</td>
                            <td>Sub-Attribute</td>
                            <td>Option with Sample Assignment</td>
                            <td>Default Value</td>
                            <td>Details</td>
                          </tr>
                          <tr>
                            <td>search</td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                          </tr>
                          <tr>
                            <td></td>
                            <td>product_results:</td>
                            <td></td>
                            <td></td>
                            <td></td>
                          </tr>

                          <tr>
                            <td></td>
                            <td></td>
                            <td>limit: &lt;number&gt;</td>
                            <td>16</td>
                            <td>
                        Defines the number of product search results displayed
                        per page. Range of possible values is 1&ndash;100
                        products.</td>
                          </tr>
                        </table>
                      header:
                        anchor: front-matter-attributes-reference_search
        - title: Template Files
          route:
            path: /template-files
          data:
            children:
              - title: Templates Directory
                route:
                  path: /templates-directory
                data:
                  children:
                    - title: Components Subdirectory
                      route:
                        path: /components-subdirectory
                      data:
                        blocks:
                          - type: html
                            data: <h1>Components Subdirectory</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#components_components-subdirectory\">Components Subdirectory</a></li>\n    <li><a href=\"#components_naming-requirements\">Naming Requirements</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Components Subdirectory


                              The `/templates/components/` subdirectory contains
                              Handlebars and HTML components (provided as
                              `.html` files) to create page structure. You can
                              reuse these code snippets and partials throughout
                              your theme.


                              You can take a look at the Cornerstone components
                              subdirectory and its contents in the [Github
                              repository
                              here](https://github.com/bigcommerce/cornerstone/tree/master/templates/components).


                              Subdirectories of `/templates/components/` group
                              together pages that serve a particular storefront
                              function. For example,
                              [here](https://github.com/bigcommerce/cornerstone/tree/master/templates/components/search)
                              are the `.html` files contained in the `/search/`
                              subdirectory.


                              Furthermore, the [`/common/`
                              subdirectory](https://github.com/bigcommerce/cornerstone/tree/master/templates/components/common)
                              contains forms and icons resources, plus a
                              collection of single-purpose files.
                            header:
                              anchor: components_components-subdirectory
                          - type: text
                            data: >-
                              ## Naming Requirements


                              **Important:** Four children of the
                              `/templates/components/` subdirectory each contain
                              a set of templates whose file names must remain
                              constant. However, you are free to move each set
                              of template files to other path locations – as
                              long as you keep each set together in one folder
                              and specify the new location. Those folders are
                              note below:


                              *
                              [common/forms](https://github.com/bigcommerce/cornerstone/tree/master/templates/components/common/forms)

                              *
                              [common/faceted-search/facets](https://github.com/bigcommerce/cornerstone/tree/master/templates/components/faceted-search/facets)

                              *
                              [common/products/customizations](https://github.com/bigcommerce/cornerstone/tree/master/templates/components/products/customizations)

                              *
                              [common/products/options](https://github.com/bigcommerce/cornerstone/tree/master/templates/components/products/options)
                            header:
                              anchor: components_naming-requirements
                          - type: callout
                            data:
                              body: >-
                                You can use front matter to specify resources
                                only on pages in the `/templates/pages/`
                                subdirectory, not on pages here in the
                                `/templates/components/` subdirectory.


                                Please bear in mind that if a front-matter
                                directive contains an invalid option, Stencil
                                CLI will silently ignore that option.
                              title: ' Front-Matter Restrictions'
                              type: warning
                    - title: Layout Subdirectory
                      route:
                        path: /layout-subdirectory
                      data:
                        blocks:
                          - type: html
                            data: <h1>Layout Subdirectory</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#layout_layout-subdirectory\">Layout Subdirectory</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Layout Subdirectory


                              The `/templates/layout/` subdirectory is where you
                              assemble Handlebars resources to define your
                              storefront site’s overall structure (header,
                              footer, etc.). You can implement multiple layouts
                              here for different use cases, making it easy to
                              switch between different look-and-feel variations
                              of the same theme.


                              As prototypes, we have provided a minimal
                              [base.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/layout/base.html)
                              page in this subdirectory. To develop your theme,
                              you can copy and/or modify this prototype.


                              **Note:** _Be sure to set permission `755
                              (drwxr-xr-x)` on any new _subdirectories_ that you
                              add. Also, be sure to set permission `644
                              (rw-r--r--)` on any new _files_ that you add.
                              Without these permissions, running your theme
                              locally will fail with multiple error messages.
                              Bundling your theme will also fail, blocking its
                              upload to a store._
                            header:
                              anchor: layout_layout-subdirectory
                          - type: callout
                            data:
                              body: >-
                                You can use front matter to specify resources
                                only on pages in the `/templates/pages/`
                                subdirectory, but **not** on pages here in the
                                `/templates/layout/` subdirectory. If a
                                front-matter directive contains an invalid
                                option, Stencil CLI will silently ignore that
                                option.
                              title: Front Matter Restrictions
                              type: warning
                    - title: Pages Subdirectory
                      route:
                        path: /pages-subdirectory
                      data:
                        blocks:
                          - type: html
                            data: <h1>Pages Subdirectory</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#pages_pages-subdirectory\">Pages Subdirectory</a></li>\n    <li><a href=\"#pages_naming-requirements\">Naming Requirements</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Pages Subdirectory


                              The `/templates/pages/` subdirectory contains the
                              complete set of base template pages used to
                              construct a BigCommerce online store. These pages
                              call resources from the `/templates/components/`
                              and `/templates/layout/` subdirectories.


                              Children of [this
                              subdirectory](https://github.com/bigcommerce/cornerstone/tree/master/templates/pages)
                              group together pages that serve a particular
                              **storefront function**. For example, you can view
                              contents of the
                              [/errors/](https://github.com/bigcommerce/cornerstone/tree/master/templates/pages/errors)
                              and
                              [/gift-certificate/](https://github.com/bigcommerce/cornerstone/tree/master/templates/pages/gift-certificate)
                              subdirectories.


                              The subdirectory’s [.html
                              files](https://github.com/bigcommerce/cornerstone/tree/master/templates/pages)
                              are single-purpose pages.
                            header:
                              anchor: pages_pages-subdirectory
                          - type: text
                            data: >-
                              ## Naming Requirements


                              Do not change the names of the `/templates/pages/`
                              subdirectory or its contained files. These default
                              names are required for the storefront to compile
                              properly. You can, however, edit pages’
                              front‑matter and Handlebars resources to customize
                              the storefront theme’s look and function.
                            header:
                              anchor: pages_naming-requirements
                          - type: callout
                            data:
                              type: warning
                              body: >-
                                Pages in the `/templates/pages/` subdirectory
                                are the **only** place you can insert and modify

                                YAML front-matter attributes to customize the
                                rendered storefront.
                              title: ' Front-Matter Restriction'
                    - title: Google Analytics Enhanced ECommerce
                      route:
                        path: /google-analytics-enhanced-ecommerce
                      data:
                        blocks:
                          - type: html
                            data: <h1>Google Analytics Enhanced ECommerce</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#google-analytics_overview\">Overview</a></li>\n    <li><a href=\"#google-analytics_prerequisites\">Prerequisites</a></li>\n    <li><a href=\"#google-analytics_implementing\">Implementing Data Tags on a Cornerstone Based Theme</a></li>\n    <li><a href=\"#google-analytics_data-tag-ref\">Data Tag Reference</a></li>\n    <li><a href=\"#google-analytics_additional-resources\">Additional Resources</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Overview


                              Google Analytics is a free analytics tool that
                              helps you track visitors and conversions on your
                              store. BigCommerce has updated the Google
                              Analytics integration to support Enhanced
                              Ecommerce.  As apart of the Enhanced ECommerce
                              feature, Stencil themes now support Data Tags. 


                              Data Tags provide detailed data on the way
                              shoppers interact with your store’s products.
                              However, data tags are not only limited to only
                              product data collection. Data Tags can also track
                              your store’s header and footer for promotions and
                              can collect data on whether those promotions were
                              viewed and/or clicked. BigCommerce’s Data Tags are
                              powered by
                              [Segment](https://segment.com/docs/destinations/google-analytics/)
                              and
                              [Platform.js](https://github.com/segment-integrations/analytics.js-integration-google-analytics/blob/master/lib/index.js),
                              and will send your store’s product data through to
                              Google Analytics. 


                              Cornerstone versions 2.6.0+ will have Data Tags
                              already included in the theme.
                            header:
                              anchor: google-analytics_overview
                          - type: callout
                            data:
                              type: error
                              body: >-
                                While you can implement data tags with Blueprint
                                themes, we do not currently have specific
                                documentation on how to do this. The data tag
                                HTML structure, however, will be the same as it
                                is in a Stencil theme. 
                              title: GAEE for Blueprint
                          - type: text
                            data: >-
                              ## Prerequisites


                              In order to implement Data Tags in your store, you
                              must have an operating ECommerce store on the BC
                              Platform, and your store’s checkout must be using
                              Optimized One-Page Checkout.


                              Data Tags will work on any theme. For this
                              tutorial, we will be adding data tags to the
                              Cornerstone theme. 


                              ### Downloading a Theme

                              This tutorial will be based off of Cornerstone. If
                              you do not already have a local copy of
                              Cornerstone on your machine, see [Downloading the
                              Cornerstone
                              Theme](/stencil-docs/getting-started/advanced-installation-options/downloading-the-cornerstone-theme).


                              If you would like to implement Data Tags on your
                              custom theme and do not already have a copy of
                              your custom theme downloaded, see
                              [Downloading/Customizing Marketplace
                              Themes](/stencil-docs/getting-started/advanced-installation-options/downloading-a-marketplace-theme).


                              Note: the remainder of this tutorial will be
                              working off the refer to the theme’s base folder
                              as ‘cornerstone’.
                            header:
                              anchor: google-analytics_prerequisites
                          - type: text
                            data: >
                              ## Implementing Data Tags on a Cornerstone Based
                              Theme


                              ### Include the Enhanced ECommerce Property


                              1. Open your local copy of your theme and navigate
                              to the theme’s `cornerstone/config.json` file.


                              2. In the config.json file, navigate to the
                              features array. There’s should be a property in
                              this array called `enhanced ecommerce`. If the
                              `enhanced ecommerce` property is not present in
                              the features array, add it. The features object
                              should then look similar to image below.
                            header:
                              anchor: google-analytics_implementing
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1542318949910
                            header:
                              subtitle: config.json
                              title: Enhanced ECommerce Feature
                            config:
                              centered: true
                              fluid: true
                              bordered: true
                              maxWidth: '400'
                              maxHeight: '500'
                          - type: text
                            data: >-
                              You are now ready to begin adding data tags into
                              the HTML files across your Cornerstone theme. 
                          - type: text
                            data: >-
                              ### Adding Data Tags into Cornerstone’s HTML files


                              Data tags must be manually added to a product in
                              order to track shopper events and interactions
                              with a product. Because data tags collect product
                              data at a very granular level, there will be
                              multiple locations you will have to add tags on a
                              singular product in order to get a comprehensive
                              look at the product’s data. For example, if you
                              want to, it is imperative to note that a product
                              can be viewed by clicking any of the following:


                              * The name of the product

                              * The “Quick View” Button

                              * The product image


                              So, if you would like to track the clicks on a
                              specific product, in order to ensure you get a
                              fully comprehensive look at shoppers’ interactions
                              with a product, you will want to include a data
                              tag on each of these fields. If a specific product
                              possesses multiple data tags, the data tag that is
                              closest to the product is the one which will will
                              track clicks, product impressions, or product
                              views.


                              Data tags will be implemented in your store by
                              using simple HTML. In order to begin tracking, you
                              will add data tags as an attribute to the already
                              existing HTML tags present in your theme. 


                              See [Pull Request
                              #1377](https://github.com/bigcommerce/cornerstone/pull/1377/commits/55fc73eeb1edc6e140005ca811f090f06ab35435)
                              to see how Data Tags were implemented in
                              Cornerstone 2.6.0.


                              ### Data Tag Implementation Example


                              You can see a data tag implemented in the HTML
                              form tag in the code sample below:
                          - type: code
                            data: >-
                              <form action="{{urls.compare}}" method='POST'
                              data-list-name="Brand: {{brand.name}}"
                              data-product-compare>
                                  {{#if theme_settings.product_list_display_mode '===' 'grid'}}
                                      {{> components/products/grid products=brand.products show_compare=brand.show_compare theme_settings=theme_settings event="list"}}
                                  {{else}}
                                      {{> components/products/list products=brand.products show_compare=brand.show_compare theme_settings=theme_settings event="list"}}
                                  {{/if}}
                              </form>


                              {{> components/common/paginator pagination.brand}}
                            config:
                              mode: html
                              highlightRange:
                                - from: '1'
                                  to: '2'
                          - type: text
                            data: >-
                              In the above snippet, the data tag is embedded in
                              a `<form>` HTML tag in lines 1 and 2. The data tag
                              is  `data-list-name` and its value is `“Brand:
                              {{brand.name}}”`.
                          - type: text
                            data: >-
                              ## Data Tag Reference


                              Currently, BigCommerce supports 11 different data
                              tags. Below is a table with a breakdown of each
                              tag and its description.
                            header:
                              anchor: google-analytics_data-tag-ref
                          - type: callout
                            data:
                              type: warning
                              body: >-
                                * If tracking promotions data, either
                                `data-banner-id` or `data-name` are required.

                                * If tracking data for a product, either
                                `data-entity-id` or `data-name` are required.

                                * If tracking data for a product list,
                                `data-product-list` or `data-entity-id` are
                                required.


                                The “tracked product” refers to the product on
                                which you are inserting the data tag on.
                              title: Mandatory Data
                          - type: html
                            data: "<table>\n  <tr>\n  \t<th>Data Tag</th>\n    <th>Description</th>\n  \t<th>Value Type</th>\n  \t<th>Example</th>\n  </tr>\n   <tr>\n     <td><code>data-list-name</code></td>\n     <td>The <code>data-list-name</code> tag denotes the name of the list that will be reflected on Google Analytics.</td>\n  \t<td>string or handlebars helper</td>\n     <td> <b>String Example</b>:<code>data-list-name=“Kitchen Appliances”</code> \t\n       <br><br>\n<b>Handlebars Value Example</b>: The <code>data-list-name</code> tag can also get its value using Handlebars. For example, if you are adding a data tag to your carousel products in products/carousel.html, you could create the tag <code>data-list-name=\"{{list}}\"</code> and define the list value in products/new.html to be: <code>list=\"New products\"</code></td>\n  </tr>\n   <tr>\n     <td><code>data-entity-id</code></td>\n     <td>The <code>data-entity-id</code> is equal to the tracked item’s id.</td>\n  \t<td>integer</td>\n    <td><code>data-entity-id=12</code></td>\n  </tr>\n   <tr>\n    <td><code>data-position</code></td>\n       <td>The <code>data-position</code> tag is equal to the tracked product’s position or the tracked promotion’s position.</td>\n  \t<td>Value is an string if creating the data tag for a promotion. The string should denote where the promotion is.\n       <br><br>\n       Value is an integer if creating the data tag for a product. The integer should represent the product’s placement. An example use case for this data tag is to answer a question like, “does the product in position 1 sell more than the product in position 4?”</td>\n       <td><b>String Value Example:</b> <code>data-position=\"center\"</code>\n       <br><br>\n         <b>Integer Value Example:</b> <code>data-position=2\n</code>\n       </td>\n  </tr>\n     <tr>\n    <td><code>data-banner-id</code></td>\n       <td>The <code>data-banner-id</code> tag is the id of the banner being tracked. The banner id is not to be mistaken with the promotion id.</td>\n  \t<td>integer</td>\n       <td><code>data-banner-id=5</code></td>\n  </tr>\n     <tr>\n  \t<td><code>data-event-type</code></td>\n       <td>The <code>data-event-type</code> tag is equal to the shopper event that will be tracked. There are a 4 shopper/product interactions you can measure and set the data-event-type equal to. Custom events are not yet implemented.</td>\n  \t<td>string that can be either:\n      <ul>\n        <li>“promotion”</li> \n        <li>“promotion click”</li>\n        <li>“product”</li>\n        <li>“list”</li>\n       <td><code>data-event-type=“promotion”</code></td>\n  </tr>\n     <tr>\n  \t<td><code>data-name</code></td>\n       <td>The <code>data-name</code> tag is equal to the tracked product’s or banner’s name. The data-name tag is \n</td>\n  \t<td>string or handlebars helper</td>\n       <td><b>String Value Example:</b> <code>data-name=“Ruffle Off-the-Shoulder Top”</code>\n         \n         <br><br>\n         \n         <b>Handlebars Value Example:</b> The <code>data-name</code> tag can also get its value using Handlebars.\n\n For example, if you are adding a data tag to your footer in products/footer.html, you could create the tag: <code>data-name=”{{this.banner-name}}”</code>\n\nOr, if you are adding a data tag to a product list item in products/list-item.html, you could create the tag below <code>data-name=“{{name}}”</code> as long as these values are defined.</td>\n  </tr>\n     <tr>\n  \t<td><code>data-product-category</code></td>\n       <td>The <code>data-product-category</code> tag is equal to the tracked product’s category.\n</td>\n  \t<td>string</td>\n       <td><code>data-product-category=“Women’s Apparel”</code></td>\n  </tr>\n     <tr>\n  \t<td><code>data-product-brand</code></td>\n       <td>The <code>data-product-brand</code> tag is equal to the tracked product’s brand.\n</td>\n  \t<td>string</td>\n       <td><code>data-product-brand=“Ralph Lauren Corporation”</code></td>\n  </tr>\n     <tr>\n  \t<td><code>data-product-price</code></td>\n       <td>The <code>data-product-price</code> tag is equal to the tracked product’s price.\n</td>\n  \t<td>integer</td>\n       <td><code>data-product-price=“27.99”</code></td>\n  </tr>\n     <tr>\n  \t<td><code>data-product-sku</code></td>\n       <td>The <code>data-product-sku</code> tag is equal to the tracked product’s sku value.\n</td>\n  \t<td>string</td>\n       <td><code>data-product-sku=”S18T-Ots-YM”</code></td>\n  </tr>\n     <tr>\n  \t<td><code>data-product-variant</code></td>\n       <td>The <code>data-product-variant</code> is equal to the tracked product’s variant.\n</td>\n  \t<td>string</td>\n       <td><code>data-product-variant=”4-Yellow”</code></td>\n  </tr>\n</table>"
                          - type: text
                            data: >-
                              ## Additional Resources


                              * Cornerstone [PR
                              #1377](https://github.com/bigcommerce/cornerstone/pull/1377/commits/55fc73eeb1edc6e140005ca811f090f06ab35435)

                              * Commit showing the addition of [Google Analytics
                              Product Data
                              Tags](https://github.com/bigcommerce/cornerstone/commit/9a4ddcae7f531a9d542aeb8ebf38c8bda2656b1c)

                              * [Google Analytics Enhanced
                              ECommerce](https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#ecommerce-data)
                            header:
                              anchor: google-analytics_additional-resources
                    - title: Google AMP
                      route:
                        path: /google-amp
                      data:
                        blocks:
                          - type: html
                            data: <h1>Google AMP</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#google-amp_overview\">Google AMP Overview</a></li>\n    <li><a href=\"#google-amp_implement\">Implement Google AMP into your Stencil theme</a></li>\n    <li><a href=\"#google-amp_location-of-amp-files\">Location of AMP Files within Cornerstone</a></li>\n    <li><a href=\"#google-amp_local-testing\">Local Testing</a></li>\n    <li><a href=\"#google-amp_additional-resources\">Additional Resources</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Google AMP Overview


                              Google AMP aka Accelerated Mobile Pages is an
                              [open source
                              initiative](https://www.ampproject.org/) to make
                              websites load faster across mobile devices.
                            header:
                              anchor: google-amp_overview
                          - type: text
                            data: >-
                              ## Implement Google AMP into your Stencil theme


                              Google AMP will be automatically added if your
                              store's theme is based on Cornerstone themes
                              1.6.0+.


                              Please see the user documentation on configuring
                              Google AMP into your store via the [Control
                              Panel](https://support.bigcommerce.com/articles/Public/Google-AMP?_ga=2.135679409.1406470381.1541441523-967431010.1523308107).


                              If you are using a custom theme for your
                              storefront, you will have to perform a few extra
                              steps in order to fully configure Google AMP on
                              your store. Reference the text information and
                              code samples below to do so. If you do not have a
                              custom theme, you can bypass the remainder of this
                              article.


                              After you have completed the previous steps, move
                              onto these steps if you have a custom storefront
                              theme activated.


                              Ensure the Google Analytics ID has been added in
                              the control panel. This is what will be used to
                              track AMP analytics. You can use more than one ID
                              to track [AMP traffic vs non-AMP
                              traffic](https://developers.google.com/analytics/devguides/collection/amp-analytics/#amp_vs_non-amp_traffic).


                              In the `/amp/category.html`, `layout/amp.html` and
                              `amp/product.html` template files replace
                              `theme_settings` with `settings`.


                              Example: In `layout/amp.html` (referenced below)
                              replace `theme_settings.amp_analytics_id` with

                              `settings.amp_analytics_id`.
                            header:
                              anchor: google-amp_implement
                          - type: code
                            data: "{{{snippet 'htmlhead'}}}\n         <script async custom-element=\"amp-form\" src=\"https://cdn.ampproject.org/v0/amp-form-0.1.js\"></script>\n         <script async custom-element=\"amp-sidebar\" src=\"https://cdn.ampproject.org/v0/amp-sidebar-0.1.js\"></script>\n\t\t\t  {{#if settings.amp_analytics_id}}\n         \t\t\t<script async custom-element=\"amp-analytics\" src=\"https://cdn.ampproject.org/v0/amp-analytics-0.1.js\"></script>\n         {{/if}}\n         {{#block \"amp-scripts\"}}{{/block}}"
                            header:
                              title: templates/layout/amp.html
                            config:
                              highlightRange:
                                - from: '4'
                                  to: '4'
                              mode: js
                          - type: text
                            data: >-
                              In
                              [config.json](https://github.com/bigcommerce/cornerstone/blob/master/config.json)
                              (referenced below) make sure `google_amp` is still
                              in the features array. See below for code snippet.
                          - type: code
                            data: |2-
                                "features": [
                                    "fully_responsive",
                                    "mega_navigation",
                                    "multi_tiered_sidebar_menu",
                                    "masonry_design",
                                    "frontpage_slideshow",
                                    "quick_add_to_cart",
                                    "switchable_product_view",
                                    "product_comparison_table",
                                    "complex_search_filtering",
                                    "customizable_product_selector",
                                    "cart_suggested_products",
                                    "free_customer_support",
                                    "free_theme_upgrades",
                                    "high_res_product_images",
                                    "product_filtering",
                                    "advanced_quick_view",
                                    "product_showcase",
                                    "persistent_cart",
                                    "one_page_check_out",
                                    "product_videos",
                                    "google_amp",
                                    "customized_checkout"
                                  ]
                            header:
                              title: config.json
                            config:
                              mode: json
                          - type: text
                            data: >-
                              If you are having any implementation issues,
                              review the [full Pull Request
                              #964](https://github.com/bigcommerce/cornerstone/pull/946/files)
                              for changes that need to be made to implement
                              Google AMP. 
                          - type: text
                            data: >
                              ## Location of AMP Files within Cornerstone



                              In versions 1.6.0+ of Cornerstone, there are a few
                              key file locations where the AMP information is
                              located:


                              * Base AMP layout template is located in
                              [templates/layout/amp.html](https://github.com/bigcommerce/cornerstone/blob/master/config.json).

                              * The files for Google AMP are located in
                              [/templates/pages/amp](https://github.com/bigcommerce/cornerstone/tree/master/templates/pages/amp).
                              This is where `product.html` and `category.html`
                              are located. (Note: there may be other files in
                              this folder, but the product and category pages
                              are the only one pages that currently support
                              Google AMP).

                              * The CSS is located in
                              [templates/components/amp/css](https://github.com/bigcommerce/cornerstone/tree/master/templates/components/amp/css).


                              After the Google Analytics ID has been added via
                              Control Panel, you can toggle AMP on the product
                              and category pages using the
                              [settings](https://support.bigcommerce.com/articles/Public/Google-AMP?_ga=2.205799699.1406470381.1541441523-967431010.1523308107)
                              there.
                            header:
                              anchor: google-amp_location-of-amp-files
                          - type: text
                            data: >-
                              ## Local Testing


                              You are able to test your AMP enabled pages at the
                              following endpoints when running your store
                              locally:


                              * `localhost:3000/amp/category_url/`

                              * `localhost:3000/amp/product_url/`
                            header:
                              anchor: google-amp_local-testing
                          - type: text
                            data: >-
                              ## Additional Resources


                              * [Adding Analytics to your AMP
                              Pages](https://developers.google.com/analytics/devguides/collection/amp-analytics/)

                              * [Adding Google AMP in the Control
                              Panel](https://support.bigcommerce.com/articles/Public/Google-AMP?_ga=2.228533533.1406470381.1541441523-967431010.1523308107)

                              * [Google AMP Home
                              Page](https://www.ampproject.org/)

                              * [Google Developer AMP
                              Resources](https://developers.google.com/amp/)
                            header:
                              anchor: google-amp_additional-resources
                    - title: Using Disqus with Stencil
                      route:
                        path: /new-subpage
                      data:
                        blocks:
                          - type: html
                            data: <h1>Using Disqus with Stencil</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#using-disqus_disqus-overview\">Disqus Overview</a></li>\n    <li><a href=\"#using-disqus_stencil-blog\">Integrating Disqus with your Stencil blog</a></li>\n    <li><a href=\"#using-disqus_stencil-product-pages\">Integrating Disqus with your Stencil Product Pages</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Disqus Overview 


                              Stencil themes have the ability to integrate with
                              Disqus, a third party commenting system that
                              allows users to leave blog comments on blog posts
                              made with Stencil's Built-In Blog. Disqus can also
                              be used with on Stencil product pages to allow
                              comment and review threads on individual products.
                            header:
                              anchor: using-disqus_disqus-overview
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              ## Integrating Disqus with your Stencil blog


                              To use Disqus blog comments in Stencil, follow the
                              steps below:


                              1. Log in to your BigCommerce Control Panel

                              2. Navigate to Storefront Design > My Themes

                              3. Open Edit Theme Files for your theme

                              4. Navigate to Templates > Pages > blog-post.html

                              5. Paste your Disqus Universal Code before the
                              closing {{/partial}} tag

                              6. Save your files

                              7. Apply your theme
                            header:
                              anchor: using-disqus_stencil-blog
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Integrating Disqus with your Stencil Product
                              Pages


                              1. Log in to your BigCommerce Control Panel

                              2. Navigate to Storefront Design > My Themes

                              3. Open Edit Theme Files for your theme

                              4. Navigate to Templates > Pages > product.html

                              5. Paste your Disqus Universal Code before the
                              closing {{/partial}} tag

                              6. In the Disqus Universal Code that you have
                              posted, there is a function that reads like below:


                              ```
                               var disqus_config = function () {
                                      this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
                                      this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
                                  };
                              ```


                              Change the value of this.page.url to be
                              `product.url;`, and the value of
                              this.page.identifier to be `product.id`; so that
                              the function now reads like below:


                              ```

                              var disqus_config = function () {
                                      this.page.url = product.url;
                                      this.page.identifier = product.id;
                                  };
                              ```


                              7. Save your files

                              8. Apply your theme
                            header:
                              anchor: using-disqus_stencil-product-pages
                          - type: text
                            data: >-
                              ## Additional Resources

                              * [Enabling Disqus for Product Reviews
                              (Blueprint)](https://forum.bigcommerce.com/s/article/How-do-I-enable-Disqus-as-my-Comment-Service?_ga=2.224340315.1984523106.1539568940-967431010.1523308107#get-code)

                              * [Using Disqus for Blog
                              Comments](https://forum.bigcommerce.com/s/article/Using-Disqus-Comments?_ga=2.224340315.1984523106.1539568940-967431010.1523308107)
                  blocks: []
              - title: Custom Templates
                route:
                  path: /custom-templates
                data:
                  children:
                    - title: About Custom Templates
                      route:
                        path: /about-custom-templates
                      data:
                        blocks:
                          - type: html
                            data: <h1>About Custom Templates</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#custom-templates_about-custom\">About Custom Templates</a></li>\n\t\t<li><a href=\"#custom-templates_stencil-versus-blueprint\">Stencil versus Blueprint Themes</a></li>\n    <li><a href=\"#custom-templates_video-demo\">Video Demo</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >
                              ## About Custom Templates


                              The Stencil framework allows theme developers and
                              merchants to assign custom layout templates to
                              storefront pages of the following types:


                              * Brand

                              * Category

                              * Product

                              * Page (meaning "Web Pages" – the BigCommerce
                              control panel's designation for static store
                              pages, which can include the store's home page)
                            header:
                              anchor: custom-templates_about-custom
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Stencil versus Blueprint Themes


                              If you are migrating from BigCommerce's legacy
                              Blueprint themes framework, please keep in mind
                              these differences in how Stencil handles custom
                              templates:


                              * The brand option is entirely new in Stencil. If
                              you are running on a Blueprint theme, you will not
                              be able to create a custom template for brand
                              pages.

                              * Unlike Blueprint, Stencil does not require that
                              custom templates' file names start with an
                              underscore (_).

                              * In the current Stencil release, you must create
                              and bundle custom templates using Stencil CLI
                              before you can upload the custom templates to
                              stores. However, once you have created and
                              uploaded templates, authorized store users can
                              assign them to storefront pages through the
                              control panel.
                            header:
                              anchor: custom-templates_stencil-versus-blueprint
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Video Demo


                              <iframe width="560" height="315"
                              src="https://www.youtube.com/embed/qgaDX7bhmd8"
                              frameborder="0" allow="autoplay; encrypted-media"
                              allowfullscreen></iframe>
                            header:
                              anchor: custom-templates_video-demo
                    - title: 'Authoring, Testing, & Uploading Custom Templates'
                      route:
                        path: /authoring-testing-uploading-custom-templates
                      data:
                        blocks:
                          - type: html
                            data: >-
                              <h1>Authoring, Testing, and Uploading Custom
                              Templates</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#authoring-testing-uploading_authoring\">Authoring Templates</a></li>\n    <li><a href=\"#authoring-testing-uploading_local-mapping\">Local Mapping and Testing</a></li>\n\t\t<li><a href=\"#authoring-testing-uploading_theme-upload\">Theme Upload</a></li>\n\t\t<li><a href=\"#authoring-testing-uploading_troubleshooting\">Troubleshooting Template Authoring</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Authoring a Custom Template


                              As a the theme developer, you must first create
                              the `custom` subdirectory in the `templates/pages`
                              directory, and four required subdirectories inside
                              of it (brand, category, product, page), which will
                              result in the following directory paths:


                              * templates/pages/custom/brand 

                              * templates/pages/custom/category

                              * templates/pages/custom/product

                              * templates/pages/custom/page


                              Next,  create the template HTML files, and then
                              place them in the appropriate
                              `<theme-name>/templates/pages/custom/`
                              subdirectories corresponding to the types listed
                              above. 
                            header:
                              anchor: authoring-testing-uploading_authoring
                          - type: callout
                            data:
                              type: warning
                              body: >-
                                Be sure to set permission `755 (drwxr-x-r-x)` on
                                any new subdirectories that you add.

                                Also, be sure to set permission `644 (rw-r–r–)`
                                on any new files that you add.


                                Without these permissions, running your theme
                                locally will fail with multiple error messages.

                                Bundling your theme will also fail, blocking its
                                upload to a store.
                              title: Subdirectory/File Permissions Required
                          - type: text
                            data: '---'
                          - type: text
                            data: "## Local Mapping and Testing\n\nTo test your custom templates locally, you must edit your `<theme-name>/.stencil` file to create mappings between each local template and a corresponding URL. Within the `.stencil` file, look for the following section:\n\n```\n\"customLayouts\": {\n    \"product\": {},\n    \"brand\": {},\n    \"category\": {},\n    \"page\": {}\n  }\n```\n\nIn this section, you would populate keys to create mappings. As a simple example, assume that you have a product custom template named alternate-`product.html`, and you want to see that template locally at the URL: http://localhost:3000/test-url/. In this case, you must populate the product key as follows:\n\n```\n    \"product\": {\n    \t\"alternate-product.html\":\"/test-url/\"\n    },\n```\n\n### Expanded Mapping Example\n\nHere is a more-complete example in which the `brand`, `page`, and `category` keys are also populated:\n\n```\n{\n  \"normalStoreUrl\": \"http://cornerstone-light-demo.mybigcommerce.com\",\n  \"port\": 3000,\n  \"username\": \"stencil\",\n  \"token\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n  \"customLayouts\": {\n    \"product\": {\n      \"custom-product.html\": \"/custom-product/\"\n    },\n    \"brand\": {\n      \"custom-brand.html\": \"/brands/custombrand/\"\n    },\n    \"page\": {\n      \"custom-page.html\": \"/custom-page/\"\n    },\n    \"category\": {\n      \"custom-category.html\": \"/custom-category/\"\n    }\n  }\n}\n```\n\n### Mapping Requirements and Options\n\nIn the .stencil mapping examples above:\n\n* Each mapped URL must be a URL for a brand, category, product, or static page that is _already configured in the store_. This means that you cannot insert a placeholder URL that is an arbitrary string of letters, such as /abcdefghijklmnop/.\n* Each URL’s trailing slash is _optional_.\n* The HTML files must reside in either the brand, category, product, or page subdirectories.\n* All brand URLs are nested under the /brands/ parent. Use URL encoding with brand URLs.\n* That parent for brand URLs is /brands/ (plural), while the corresponding subdirectory for HTML files is /brand/ (singular).\n* After editing your `.stencil` file, you must restart stencil to see your changes locally. Enter `stencil start` on the command line, appending any appropriate switches for your workflow (e.g.: `stencil start -e -n`).\n\n### Why These URL Requirements?\n\nWhen you create a local custom template page for products, you expect that page to have access to all Stencil product objects. However, the server cannot readily determine the page type of each local custom template. So we give it a hint: We instruct the server to look at the page type of the URL to which you have mapped the template.\n\nIn the above `.stencil` configuration example’s final entry, the server will look at the URL `/custom‑category/` within the store, deduce that the page type is `category`, and return a category context to Stencil CLI. This allows Stencil CLI to properly display the page in the browser when you visit http://localhost:3000/custom‑category/ locally, or when shoppers visit the corresponding public store page.\n\n### Mapping Multiple URLs\nBeyond the single URL mapped to each template in the above examples, you have the option of mapping an array of URLs to each template. This is shown in the following example for the product template:\n\n```\n  \"customLayouts\": {\n    \"product\": {\n      \"featured-product.html\": [\"/special-product-one\", \"/special-product-two\"],\n      \"clearance-product.html\": \"/clearance-product\"\n    },\n    \"brands\": {},\n    \"categories\": {},\n    \"page\": {}\n  }\n}\n```"
                            header:
                              anchor: authoring-testing-uploading_local-mapping
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Theme Upload


                              Finally, you must bundle and upload the theme to
                              BigCommerce. See the Bundling and Uploading a
                              Theme article for instructions on how to achieve
                              this.
                            header:
                              anchor: authoring-testing-uploading_theme-upload
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Troubleshooting Template Authoring


                              Here are solutions to some known problems in
                              locally authoring and testing custom templates:


                              ### Viewing Custom Brand Templates Locally


                              If you are having trouble viewing custom brand
                              templates locally, ensure that the URL used in
                              your .stencil file is of the form:
                              /brands/brandname. This is necessary because all
                              the brand pages are located under the /brands/ URL
                              path.

                              Also, bear in mind that currently, all brand URLs
                              are Unicode-encoded. So, for example, you should
                              replace a hyphen with: %252d.


                              ### Outdated Stencil CLI


                              If you have an old version of Stencil CLI
                              installed, it might lack support for custom
                              templates. You can easily update your CLI by
                              executing the following command:


                              `npm install -g bigcommerce/stencil-cli`
                            header:
                              anchor: authoring-testing-uploading_troubleshooting
                    - title: Assigning Templates to Pages
                      route:
                        path: /assigining-templates-to-pages
                      data:
                        blocks:
                          - type: html
                            data: <h1>Assigning Templates to Pages</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#assigning_merchant-performed\">Merchant Performed Actions</a></li>\n\t\t<li><a href=\"#assigning_assigning-a-web-page\">Assigning a Web Page Template</a></li>\n    <li><a href=\"#assigning_assigning-a-product\">Assigning a Product, Brand, or Category Template</a></li>\n    <li><a href=\"#assigning_troubleshooting\">Troubleshooting Template Assignments</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Merchant Performed Actions


                              Once the developer has uploaded a theme to
                              BigCommerce, the merchant (or other authorized
                              store user) can assign custom templates to
                              individual store pages in the BigCommerce Control
                              Panel. The steps are similar whether assigning
                              brands, categories, products, and static Web pages
                              – with slight differences. Below, we show examples
                              for assigning a Web Page and a Category. For
                              further details, please see the [Stencil Custom
                              Templates Knowledge Base
                              article](https://forum.bigcommerce.com/s/article/Stencil-Themes#custom-template).
                            header:
                              anchor: assigning_merchant-performed
                          - type: text
                            data: >-
                              ## Assigining a Web Page Template


                              Starting from the BigCommerce control panel's left
                              navigation pane:


                              1. Select `Storefront` > `Web Pages`.

                              2. From the resulting `View Web Pages` display,
                              select the existing Page 

                              3. Name to which you want to assign a custom
                              template. (Or select `Create a Web Page` to define
                              a new page.)

                              4. From the resulting `Edit a Web Page` display,
                              scroll down to the `Template Layout File`
                              drop-down list. Then select your desired custom
                              template from that list, as shown below.
                            header:
                              anchor: assigning_assigning-a-web-page
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1539930165487
                            config:
                              centered: true
                              fluid: true
                              bordered: true
                              maxWidth: '600'
                              maxHeight: '400'
                          - type: callout
                            data:
                              body: >-
                                Some static page types do not allow you to
                                assign custom templates. You can recognize these
                                excluded pages because their `Edit a Web Page`
                                display will not include a `Template Layout
                                File` drop-down list.
                              title: Static Pages You Can't Assign
                              type: warning
                          - type: text
                            data: >
                              ## Assigning a Product, Brand, or Category
                              Template


                              Starting from the BigCommerce control panel's left
                              navigation pane:


                              1. Select `Products` > `View` (for a product page)
                              `Products` > `Product Categories` (for a category
                              page), or `Products` > `Brands` (for a brand
                              page).

                              2. Select the Product Name, Category Name, or
                              Brand Name to which you want to assign a custom
                              template. (Or select the `Add` or `Create` button
                              at the upper left to define a new product,
                              category, or band.)

                              3. For a product page (only), you must select the
                              `Other Details` tab to proceed to the next step.

                              4. Scroll to the `Template Layout File` drop-down
                              list, and select your desired custom template from
                              that list, as shown below for a Category
                              assignment.

                              5. Click the Save & Exit or Save & Keep Editing
                              button at the lower right.
                            header:
                              anchor: assigning_assigning-a-product
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1539930552310
                            config:
                              fluid: true
                              centered: true
                              bordered: true
                              maxWidth: '500'
                              maxHeight: '200'
                          - type: text
                            data: >-
                              ## Troubleshooting Template Assignments


                              In case of problems a custom template in the
                              control panel: Check whether your theme's root
                              directory contains a file named `manifest.json`.

                              If you theme's root directory contains the file,
                              perofrm the following:

                              * delete the `manifest.json` file

                              * bundle the theme again with the `stencil bundle`
                              command

                              * upload the theme

                              * apply the theme


                              This should enable assigning the template in the
                              control panel.
                            header:
                              anchor: assigning_troubleshooting
                    - title: Customizing Invoices
                      route:
                        path: /customizing-invoices
                      data:
                        blocks:
                          - type: html
                            data: <h1>Customizing Invoices</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#customizing_email\">Customizing the Email Invoice Template</a></li>\n\t\t<li><a href=\"#customizing_merchant\">Customizing the Merchant Printable Invoice</a></li>\n    <li><a href=\"#customizing_customer\">Customizing the Customer Printable Invoice</a></li>\n\t</ul>\n</div>"
                          - type: callout
                            data:
                              body: >-
                                The email invoice (invoice_email.html) is part
                                of Email Templates in the Control Panel. Editing
                                email templates is covered in the BigCommerce
                                Knowledge Base
                                [here](https://support.bigcommerce.com/articles/Public/Customizing-Emails?_ga=2.195511786.718421096.1540222570-967431010.1523308107#editing-email-templates).


                                Typically, edits made through the Control Panel
                                will be explicitly covered in the BigCommerce
                                Knowledge Base. However, since the particular
                                email template we are looking at is the invoice
                                template and this article covers customization
                                of all invoices, it is also covered in this
                                article.
                              title: ' Email Invoice as apart of Email Templates'
                          - type: text
                            data: >-
                              ## Customizing the Email Invoice Template


                              The email invoice template is the contents of the
                              email that is sent to a customer after an order
                              has been completed. The email invoice can be
                              edited in the Control Panel in `Storefront` >
                              `Email Templates` > `invoice_email.html`
                            header:
                              anchor: customizing_email
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1540376724645
                          - type: text
                            data: >-
                              After clicking the `edit` button on the right, the
                              WYSIWYG Editor will appear. Follow the BigCommerce
                              [Knowledge Base
                              Article](https://support.bigcommerce.com/articles/Public/Invoices?&_ga=2.89197149.718421096.1540222570-967431010.1523308107#custom)
                              to complete customization of the Invoice Email
                              template.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Customizing the Merchant Printable Invoice


                              The Merchant Printable Invoice is the invoice that
                              can be printed from the control panel in `Orders`
                              > `View`. Clicking the `...` in the Action column
                              will generate a list of options, one option being
                              `Print Invoice`.
                            header:
                              anchor: customizing_merchant
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1540376852310
                            config:
                              centered: true
                              fluid: true
                              bordered: true
                              maxWidth: '200'
                              maxHeight: '600'
                          - type: text
                            data: >-
                              The invoice that is generated by clicking Print
                              Invoice here relies on a template and variables
                              from BigCommerce's legacy Blueprint themes
                              framework. This invoice can be customized by
                              performing the following steps:


                              1. Download the
                              [invoice_printable.zip](https://storage.googleapis.com/bigcommerce-production-dev-center/template-files/invoice_printable.zip)
                              file, which contains the skeleton of a printable
                              invoice.


                              2. Open the file in the text editor of your choice
                              and edit the HTML file to match your desired
                              customization.
                          - type: callout
                            data:
                              body: >+
                                To navigate through the Blueprint variables
                                contained in the HTML skeleton, please see [this
                                reference
                                material](https://developer.bigcommerce.com/themes/blueprint/?_ga=2.194005739.718421096.1540222570-967431010.1523308107#store-wide-global-variables).

                              title: |2
                                 Blueprint Variables and Customization
                          - type: text
                            data: >-
                              3. In the control panel, set your theme's checkout
                              type to `Custom one-page checkout (for
                              developers)`.


                              (Use the steps in [this support
                              article](https://support.bigcommerce.com/articles/Public/Checkout-Settings?_ga=2.86510302.718421096.1540222570-967431010.1523308107).)


                              4. [Use
                              WebDAV](https://support.bigcommerce.com/articles/Public/How-do-I-add-and-link-to-a-file-in-my-store?_ga=2.200813032.718421096.1540222570-967431010.1523308107#upload-a-file)
                              to upload your customized HTML file to WebDAV's
                              `/template/Snippets/` folder.


                              * This folder becomes available once you enable
                              Custom one-page checkout (for developers).

                              * For specific steps, please see [this support
                              article](https://support.bigcommerce.com/articles/Public/File-Access-WebDAV/?q=webdav&l=en_US&fs=Search&pn=1&_ga=2.200813032.718421096.1540222570-967431010.1523308107).

                              * Also see [this
                              page](/stencil-docs/prepare-and-upload-a-theme/shrinking-your-theme)
                              about using WebDAV with Stencil themes.

                              * We recommend the freeware WebDAV client
                              CyberDuck (Windows and Mac OS), for which your
                              store's control panel offers a downloadable
                              connection file prefilled with most store
                              credentials.


                              5. Once you have completed the above steps, you
                              are free to switch your theme's checkout type to
                              `One-page checkout` or `Optimized one-page
                              checkout`.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Customizing the Customer Printable Invoice


                              The customer printable invoice is the printable
                              invoice that is available on a storefront’s order
                              page for **shoppers that have registered accounts
                              with your store**.
                            header:
                              anchor: customizing_customer
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1540377767108
                          - type: text
                            data: >-
                              This invoice becomes available in a shopper’s
                              orders after completing an order. A shopper can
                              generate this invoice by clicking `Print Invoice`
                              on the right-hand side of the page.


                              As a developer, you can customize this invoice by
                              editing your theme’s `invoice.html` file that is
                              present in your theme's files. In Cornerstone,
                              this file is located in
                              `/cornerstone/templates/pages/account/orders/invoice.html`.
                    - title: Customizing Printable Packing Slips
                      route:
                        path: /customizing-printable-packing-slips
                      data:
                        blocks:
                          - type: html
                            data: <h1>Customizing Printable Packing Slips</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#customizing_packing\">Customizing Printable Packing Slips</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Customizing Printable Packing Slips


                              Customizing your Stencil theme's printable packing
                              slips currently requires a workaround, which
                              relies on a template and variables from
                              BigCommerce's legacy Blueprint themes framework.
                              Here are the workaround steps:


                              1. Download [this printable packing slip .zip
                              file](https://storage.googleapis.com/bigcommerce-production-dev-center/template-files/packing_slip_printable.zip),
                              which contains the skeleton of a printable packing
                              slip.


                              2. Edit the HTML file to match your desired
                              customization.


                              (To navigate through the Blueprint variables
                              contained in the HTML skeleton, please see the
                              reference material starting here.)


                              3. Set your theme's checkout type to Custom
                              one-page checkout (for developers).


                              (Use the steps in this [BigCommerce Support
                              article about
                              WebDAV](https://support.bigcommerce.com/articles/Public/File-Access-WebDAV/).)


                              4. [Use
                              WebDAV](https://support.bigcommerce.com/articles/Public/File-Access-WebDAV/)
                              to upload your customized HTML file to WebDAV's
                              `/template/` folder.


                              * This folder becomes available once you enable
                              `Custom one-page checkout (for developers)`.

                              * For specific steps, see our [Support article
                              about
                              WebDAV](https://support.bigcommerce.com/articles/Public/File-Access-WebDAV/)

                              * Also see [Shrinking Your Theme by Excluding
                              Static
                              Assets](https://developer.bigcommerce.com/stencil-docs/prepare-and-upload-a-theme/shrinking-your-theme)
                              to learn more about using WebDAV with Stencil
                              themes.

                              * We recommend the freeware WebDAV client
                              [CyberDuck](https://cyberduck.io/) (Windows and
                              Mac OS), for which your store's control panel
                              offers a downloadable [connection
                              file](https://forum.bigcommerce.com/s/article/File-Access-WebDAV#login-info)
                              prefilled with most store credentials.


                              5. Once you have completed the above steps, you
                              are free to switch your theme's checkout type to

                              `One-page checkout` or `Optimized one-page
                              checkout`.
                            header:
                              anchor: customizing_packing
              - title: Customize Stencil Checkout
                route:
                  path: /customize-stencil-checkout
                data:
                  children:
                    - title: Stored Credit Card Management
                      route:
                        path: /stored-credit-card-management
                      data:
                        blocks:
                          - type: html
                            data: <h1>Stored Credit Card Management</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#stored-cc-mgmt_overview\">Overview</a></li>\n    <li><a href=\"#stored-cc-mgmt_adding\">Adding Stored Credit Card Management to Your Custom Theme</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >+
                              ## Overview


                              Cornerstone versions 2.6.0+ include the ability to
                              manage [Stored Credit
                              Cards](https://support.bigcommerce.com/s/article/Enabling-Stored-Credit-Cards).


                              Previously, stored credit card management was only
                              accessible via the payment portion of checkout.
                              With the addition of Stored Credit Card
                              management, logged-in shoppers will now be able to
                              manage their stored credit cards from the My
                              Account page of the storefront. In the Cornerstone
                              theme, shoppers with store accounts will have the
                              ability to add new cards, delete cards, select a
                              default card, and edit the billing details of
                              existing cards from their customer account area of
                              your storefront.


                              Card data is stored securely with the payment
                              gateway.

                            header:
                              anchor: stored-cc-mgmt_overview
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1541629003006
                            header:
                              title: 'Stored Credit Card Management '
                            config:
                              centered: true
                              fluid: true
                              bordered: true
                              maxWidth: '500'
                              maxHeight: '500'
                          - type: callout
                            data:
                              type: warning
                              body: >-
                                After adding a card, shoppers will only be able
                                to modify the billing address. If other credit
                                card details need to be modified (such as
                                expiration date), the shopper must delete and
                                readd the card.
                              title: Editing Limitations
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Adding Stored Credit Card Management to Your
                              Custom Theme


                              Stored Credit Card Management was added to
                              Cornerstone in [pull request
                              #1376](https://github.com/bigcommerce/cornerstone/pull/1376).
                              To add Stored Credit Cards to pre-2.6.0
                              Cornerstone or Marketplace themes, copy the
                              changes from [PR
                              #1376](https://github.com/bigcommerce/cornerstone/pull/1376)
                              to your theme. This section will walk through
                              [each individual
                              commit](https://github.com/bigcommerce/cornerstone/pull/1376/commits),
                              highlighting the changes that you will need to
                              make to your template files.
                            header:
                              anchor: stored-cc-mgmt_adding
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              1. [Add the Payment Methods page to the shopper's
                              Account](https://github.com/bigcommerce/cornerstone/pull/1376/commits/24abc038fe346a8572b40da40c98a9465788957a)


                              _The code changes in this step:_


                              * Create the new Payment Methods page on a
                              shopper's account by modifying the `lang/en.json`,
                              `templates/components/account/navigation.html`,
                              and `templates/pages/account/payment-methods.html`
                              files
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1541629154209
                            header:
                              title: Payment Methods Page Addition Example
                            config:
                              centered: true
                              bordered: true
                              fluid: true
                              maxWidth: '700'
                              maxHeight: '700'
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              2. [Add Translations for Payment Methods
                              Titles](https://github.com/bigcommerce/cornerstone/pull/1376/commits/9edf1a0f6907811abf470db1486b4fdb199b27ae)


                              *The code changes in this step:*


                              * Make the Payments Method page translatable by
                              modifying the `lang/en.json` and
                              `templates/components/account/navigation.html`
                              files
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              3. [Include the Credit Card listing, initially
                              without the add, edit, and delete
                              actions](https://github.com/bigcommerce/cornerstone/pull/1376/commits/5574eb98c710f4540e8390420563099b6f5710bf)


                              *The code changes in this step:*


                              * Group the credit cards by payment providers

                              * Include the payment method icons

                              * Account for mobile and desktop layouts

                              * Account for translations


                              *Icons have been used to identify the credit card
                              **type**. The data only provides the card brand in
                              the credit card details.*
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1541630407609
                            config:
                              maxWidth: '600'
                              maxHeight: '600'
                              centered: true
                              fluid: true
                              bordered: true
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              4. [Add the Credit Card Actions (i,e,e Add, Edit,
                              and
                              Delete)](https://github.com/bigcommerce/cornerstone/pull/1376/commits/499016d320995852fe4ef621724e08556896b70d)


                              *The code changes in this step:*


                              *  add `Edit`, `Delete`, and `Add` buttons
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1541655663898
                            header:
                              title: 'Implementation of Add, Edit, and Delete Methods'
                            config:
                              centered: true
                              fluid: true
                              bordered: true
                              maxWidth: '500'
                              maxHeight: '500'
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              5. [Implement the `Delete Payment`
                              Method](https://github.com/bigcommerce/cornerstone/pull/1376/commits/cf102901d9061b7334e8c39f15a8904c37cf0652)


                              *The code changes in this step:*


                              * Bind the delete button's front end and back end


                              First, the click will trigger window confirm. The
                              confirmation modal has been added to prevent
                              unintended action. Then, on confirming, a post
                              request will be sent. The action is initiated
                              through a localized form post request in the
                              template which uses a
                              [`delete_url`](https://github.com/bigcommerce/cornerstone/blob/master/templates/components/account/payment-methods-list.html#L34)
                              key provided in the credit card details data.
                              Finally, there will be a redirect to the credit
                              card listing.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              6. [Implement the `Edit Payment`
                              Method](https://github.com/bigcommerce/cornerstone/pull/1376/commits/ab2fe1df455fa8ac93760904b718fbce7ce361ed)


                              *The code changes in this step:*


                              * Add the design for credit card details and the
                              edit billing address form, synced with existing
                              address fields validation


                              *The action is initiated via a
                              [redirect](https://github.com/bigcommerce/cornerstone/blob/master/templates/components/account/payment-methods-list.html#L36)
                              to the edit page. The page uses HTML, CSS, and
                              JavaScript for the billing address validation. The
                              "name on card" label and values are also removed,
                              as we do not store name along with the vaulted
                              credit card. The full
                              [edit-payment-method.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/account/edit-payment-method.html)
                              can be viewed in the Cornerstone Github Repo.*
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1541654303488
                            header:
                              title: Edit Payment Method Form
                            config:
                              centered: true
                              bordered: true
                              fluid: true
                              maxHeight: '500'
                              maxWidth: '500'
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              7. [Implement the `Add Payment`
                              Method](https://github.com/bigcommerce/cornerstone/pull/1376/commits/c960338c32faa8fb798b2826c72dfe9d74bf9751)


                              *The code changes in this step:* 


                              *  Adding new icon `lock.svg`

                              *  Unify the CSS classes for the add and edit
                              form.

                              *  Add a new template for edit form with an
                              injection of global variables into context.

                              *  Extend the `account.js` file with a new method
                              to initiate credit card and billing address fields
                              validations, mapping form fields name and value to
                              body request.

                              *  Add a `payment-method.js` file for credit card
                              validations and helpers with unit test.


                              *The add form will use ajax to validate and submit
                              the credit card details (this differs from the way
                              the edit form validates and submits). The
                              [payment-method.js
                              file](https://github.com/bigcommerce/cornerstone/blob/master/assets/js/theme/common/payment-method.js)
                              has been designed to be dragged and used in themes
                              to simplify its implementation.*


                              *The [add-payment-method.html
                              template](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/account/add-payment-method.html)
                              also requires some customization because variables
                              need to pass through handlebars in order to be
                              used by JavaScript. From [line 20 to 25 of the
                              template](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/account/add-payment-method.html#L20-L25),
                              we store variables, mostly for building the
                              request url and header. The request body will
                              directly use the form data. [More validations and
                              extra
                              mapping](https://github.com/bigcommerce/cornerstone/blob/24686de577c6ad5409ec8b82f5839c3d083cb760/assets/js/theme/account.js#L211)
                              are added to the `add-payment-method.html`
                              template as well.*
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1541629295212
                            header:
                              title: >-
                                Example of the addition of the Add Payment
                                Method
                            config:
                              centered: true
                              fluid: true
                              bordered: true
                              maxWidth: '500'
                              maxHeight: '700'
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              8. [Add the default Instrument for the add/edit
                              Payment
                              Method](https://github.com/bigcommerce/cornerstone/pull/1376/commits/5576aee5af0194e85cb11dbf44563f89b2687f40)


                              _The code changes in this step:_


                              * Add HTML and CSS for a single checkbox, default
                              instrument

                              * Capture form data on ADD and transform to
                              boolean

                              * Fix HTML credit card for tabulation navigation

                              * Fix for states reload list via AJAX
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1541655424566
                            header:
                              title: >-
                                Add default instrument checkbox to edit and add
                                form
                            config:
                              maxWidth: '400'
                              maxHeight: '400'
                              centered: true
                              fluid: true
                              bordered: true
                          - type: callout
                            data:
                              body: >-
                                Since this feature involves heavy code changes,
                                it may be easier to merge the necessary code
                                into your theme by utilizing Github's automated
                                process for syncing a fork. See Github's
                                documentation on [Syncing a
                                Fork](https://help.github.com/articles/syncing-a-fork/)
                                for more details on this method.
                              title: |
                                Utilizing Github Automation to Merge the Changes
                    - title: PayPal Smart Buttons
                      route:
                        path: /paypal-smart-buttons
                      data:
                        blocks:
                          - type: html
                            data: <h1>PayPal Smart Buttons</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#paypal-smart_overview\">PayPal Smart Buttons Overview</a></li>\n    <li><a href=\"#paypal-smart_include-smart-buttons\">Include Smart Buttons on a Stencil Theme</a></li>\n    <li><a href=\"#paypal-smart_mutually-exclusive\">Mutually Exclusive Options</a></li>\n    <li><a href=\"#paypal-smart_additional-resources\">Additional Resources</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## PayPal Smart Buttons Overview


                              PayPal Smart Buttons are available on Cornerstone
                              versions 2.6.0+. Theme developers can enable Smart
                              Buttons on a custom Stencil theme by adding
                              settings to the `config.json` file. Merchants will
                              have the ability to customize some style aspects
                              of the PayPal payment buttons at checkout using
                              Theme Editor/Store Design for stores that have
                              PayPal powered by Braintree enabled. In order to
                              make PayPal Smart Buttons customizable through
                              Theme Editor/Store Design, a theme developer will
                              need to make its customization properties
                              available by adding its schema to the
                              `schema.json` file. 
                            header:
                              anchor: paypal-smart_overview
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Enable Smart Buttons on Your Stencil Theme


                              To enable Smart Buttons on Cornerstone versions
                              pre-2.6.0 or Marketplace themes, append the
                              following highlighted `paymentbuttons` settings to
                              the `settings` object within your `config.json`
                              file:
                            header:
                              anchor: paypal-smart_include-smart-buttons
                          - type: code
                            data: |2-
                               "settings": {
                                  "...",
                                  "color_badge_product_sale_badges": "#007dc6",
                                  "color_text_product_sale_badges": "#ffffff",
                                  "color_hover_product_sale_badges": "#000000",
                                  "restrict_to_login": false,
                                  "swatch_option_size": "22x22",
                                  "social_icon_placement_top": false,
                                  "social_icon_placement_bottom": "bottom_none",
                                  "geotrust_ssl_common_name": "",
                                  "geotrust_ssl_seal_size": "M",
                                  "navigation_design": "simple",
                                  "price_ranges": true,
                                  "pdp-price-label": "",
                                  "pdp-sale-price-label": "Now:",
                                  "pdp-non-sale-price-label": "Was:",
                                  "pdp-retail-price-label": "MSRP:",
                                  "paymentbuttons-paypal-layout": "horizontal",
                                  "paymentbuttons-paypal-color": "gold",
                                  "paymentbuttons-paypal-shape": "pill",
                                  "paymentbuttons-paypal-size": "small",
                                  "paymentbuttons-paypal-label": "checkout",
                                  "paymentbuttons-paypal-tagline": true,
                                  "paymentbuttons-paypal-fundingicons": false
                                },
                            header:
                              subtitle: config.json
                              title: '"settings" object'
                            config:
                              mode: json
                              highlightRange:
                                - from: '18'
                                  to: '24'
                          - type: callout
                            data:
                              type: warning
                              body: >-
                                Adding the above keys to the `config.json` file
                                will enable Smart Buttons on a Stencil theme,
                                however, the merchant will **not** be able to
                                customize button styles through Theme
                                Editor/Store Design unless setting
                                configurations are added to `schema.json`.
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              ## Making Smart Buttons Customizable via Theme
                              Editor/Store Design


                              Merchants who enable PayPal powered by Braintree
                              can customize PayPal Smart Buttons via the Theme
                              Editor or Store Design. As a theme developer, you
                              can enable PayPal Smart Button customization via
                              [Theme Editor/Store
                              Design](/stencil-docs/stencil-theme-editor/schema-json-metadata),
                              by appending the following object to the
                              `schema.json` file:
                          - type: code
                            data: |
                              {
                                    "name": "Payment Buttons",
                                    "enable": "smartButtons",
                                    "settings": [
                                        {
                                          "type": "checkbox",
                                          "label": "Show Paypal tagline",
                                          "force_reload": true,
                                          "id": "paymentbuttons-paypal-tagline"
                                        },
                                        {
                                          "type": "checkbox",
                                          "label": "Show funding icons",
                                          "force_reload": true,
                                          "id": "paymentbuttons-paypal-fundingicons"
                                        },
                                        {
                                            "type": "select",
                                            "label": "Button color",
                                            "id": "paymentbuttons-paypal-color",
                                            "force_reload": true,
                                            "options": [
                                              {
                                                "value": "gold",
                                                "label": "Gold"
                                              },
                                              {
                                                "value": "blue",
                                                "label": "Blue"
                                              },
                                              {
                                                "value": "silver",
                                                "label": "Silver"
                                              },
                                              {
                                                "value": "black",
                                                "label": "Black"
                                              }
                                            ]
                                        },
                                        {
                                            "type": "select",
                                            "label": "Button shape",
                                            "id": "paymentbuttons-paypal-shape",
                                            "force_reload": true,
                                            "options": [
                                              {
                                                "value": "pill",
                                                "label": "Pill"
                                              },
                                              {
                                                "value": "rect",
                                                "label": "Rectangle"
                                              }
                                            ]
                                        },
                                        {
                                            "type": "select",
                                            "label": "Button size",
                                            "id": "paymentbuttons-paypal-size",
                                            "force_reload": true,
                                            "options": [
                                              {
                                                "value": "small",
                                                "label": "Small"
                                              },
                                              {
                                                "value": "medium",
                                                "label": "Medium"
                                              },
                                              {
                                                "value": "large",
                                                "label": "Large"
                                              },
                                              {
                                                "value": "responsive",
                                                "label": "Responsive"
                                              }
                                            ]
                                        },
                                        {
                                            "type": "select",
                                            "label": "Button content",
                                            "id": "paymentbuttons-paypal-label",
                                            "force_reload": true,
                                            "options": [
                                              {
                                                "value": "checkout",
                                                "label": "Paypal Checkout"
                                              },
                                              {
                                                "value": "pay",
                                                "label": "Pay with Paypal"
                                              },
                                              {
                                                "value": "buynow",
                                                "label": "Buy Now"
                                              },
                                              {
                                                "value": "paypal",
                                                "label": "Paypal"
                                              }
                                            ]
                                        },
                                        {
                                          "type": "select",
                                          "label": "Display style",
                                          "id": "paymentbuttons-paypal-layout",
                                          "force_reload": true,
                                          "options": [
                                            {
                                              "value": "horizontal",
                                              "label": "Show buttons horizontally"
                                            },
                                            {
                                              "value": "vertical",
                                              "label": "Show buttons vertically"
                                            }
                                          ]
                            header:
                              subtitle: schema.json
                              title: >-
                                Addition to schema.json file in order to enable
                                Theme Editor/Store Design customization
                            config:
                              mode: json
                          - type: callout
                            data:
                              body: >-
                                Some customization options are mutually
                                exclusive, meaning when used in combination with
                                other customization options, the smart button
                                button will completely fail to render on the
                                page. 


                                All mutually exclusive options are tied to the
                                layout setting `vertical.` If your layout
                                setting is `vertical,` take note of the
                                following customization **restrictions**:


                                * If you have a layout setting of `vertical`,
                                you **can not** have a button size of `small`.

                                * If you have a layout setting of `vertical`,
                                you **can not** customize the `branding` of the
                                button.

                                * If you have a layout setting of `vertical`,
                                you **can not** customize the `tagline` of the
                                button.

                                * If you have a layout setting of `vertical`,
                                you **can not** customize the `funding icons`
                                settings.
                              title: Mutually Exclusive Options
                              type: error
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              ## Additional Resources


                              * [PayPal Checkout
                              Customization](https://developer.paypal.com/demo/checkout/#/pattern/checkout)
                            header:
                              anchor: paypal-smart_additional-resources
                    - title: Enable & Restyle Optimized One-Page Checkout
                      route:
                        path: /optimized-one-page-checkout
                      data:
                        blocks:
                          - type: html
                            data: >-
                              <h1>Enable and Restyle Optimized One-Page
                              Checkout</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#optimized_enable\">Enable Optimized One Page Checkout</a></li>\n    <li><a href=\"#optimized_working\">Working with the Optimized Checkout SCSS File</a></li>\n    <li><a href=\"#optimized_configuring\">Configuring the Desktop Viewport</a></li>\n    <li><a href=\"#optimized_classes\">Classes Available for Customization</a></li>\n    <li><a href=\"#optimized_providing\">Providing User Options in Theme Editor</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >
                              ## Enable Optimized One Page Checkout


                              In order to customize Stencil's Optimized One Page
                              Checkout, you must first opt into BigCommerce's
                              Optimized One-Page Checkout option if your store
                              is not already running on Optimized One Page
                              Checkout. To do so, use the following steps:


                              1. Update your Stencil CLI installation to the
                              most-recent version, as outlined here.


                              2. Enable `Optimized One-Page Checkout` in the
                              store's control panel, as shown below. For more
                              details about using Optimized One-Page Checkout,
                              see  the [Checkout
                              Settings](https://support.bigcommerce.com/articles/Public/Checkout-Settings?_ga=2.265225801.718421096.1540222570-967431010.1523308107)
                              support article.


                              3. Within your theme's `config.json` file > `meta`
                              section, make sure the `features` array includes
                              the value `customized_checkout`, as shown below:


                              ```
                                 "meta": {
                                   [...]
                                   "features": [
                                     [...]
                                     "customized_checkout"
                              ```


                              4. Within your theme's
                              `<theme-name>/templates/pages/` subdirectory,
                              paste in a clean, uncustomized copy of the
                              `checkout.html` and

                              `order-confirmation.html` files. You can find
                              default templates for each file on our
                              [Cornerstone Github Repository]:


                              *
                              [checkout.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/checkout.html)
                              file template

                              *
                              [order-confirmation.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/order-confirmation.html)
                              file template


                              **Note:** _For Optimized One-Page Checkout to work
                              properly, the `order-confirmation.html` template
                              **must** be present in your theme. If this
                              template is absent, shoppers will receive a server
                              error upon submitting their order.(The
                              corresponding template was named
                              `order-complete.html` in earlier versions of
                              Stencil themes. But that minimal template is
                              **not** a substitute for the required current
                              template.)_
                            header:
                              anchor: optimized_enable
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1540227949000
                            header:
                              title: >-
                                Choosing Optimized One Page Checkout in the
                                Control Panel
                              subtitle: 'Step #2 in the above description'
                            config:
                              centered: true
                              fluid: true
                              bordered: true
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              ## Working with the Optimized Checkout SCSS File 


                              Cornerstone includes an SCSS file that styles the
                              Optimized Checkout page. In your local
                              installation, this file is located at
                              `<theme-name>/assets/scss/optimized-checkout.scss`.


                              You can access the most recent version of this
                              file in the [Cornerstone
                              repository](https://github.com/bigcommerce/cornerstone/blob/master/assets/scss/optimized-checkout.scss)
                              (Github). All themes share the same stylesheet for
                              the Optimized One-Page checkout, even those not
                              based on Cornerstone, so this stylesheet applies
                              universally across Stencil themes.


                              To customize the checkout page, you are free to
                              change classes' _contents_. However, **do not nest
                              elements, nor change any class names**.
                              BigCommerce imposes these restrictions because
                              each class here maps to multiple Optimized
                              Checkout elements. Changing the structure or
                              naming would break updates available in future
                              Optimized Checkout enhancements.
                            header:
                              anchor: optimized_working
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Configuring the Desktop Viewport 


                              Within the `optimized-checkout.scss` file, to set
                              up Optimized Checkout's responsive features, you
                              should configure the following breakpoint to
                              define your preferred desktop viewport size:


                              ```
                                  // TODO:
                                  // Configure media query to be 'desktop' breakpoint size
                                  // -----------------------------------------------------------------------------
                                  @media (min-width: 801px) {
                                      text-align: stencilString("optimizedCheckout-logo-position");
                                  }
                              ```
                            header:
                              anchor: optimized_configuring
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              ## Classes Available for Customization 


                              Below are the classes provided in Cornerstone's
                              `optimized-checkout.scss` file, with the
                              corresponding page elements that they style.
                              _These class names and mappings are subject to
                              change, so please check the inline comments in the
                              `optimized-checkout.scss` file that you downloaded
                              with your current Cornerstone release._


                              | **Class** | **Styles This Optimized One-Page
                              Checkout Element:** |

                              |---|---|

                              | `.optimizedCheckout-header` | Page header. |

                              | `.optimizedCheckout-headingPrimary` | Top-level
                              headings. |

                              | `.optimizedCheckout-headingSecondary` | Certain
                              lower-level elements, such as descriptions of cart
                              items. |

                              | `.optimizedCheckout-overlay` | Shipping Method
                              box. |

                              | `.optimizedCheckout-contentPrimary` | Body text
                              in the desktop `Order Summary`/`Order
                              Confirmation` (cart contents); drop-down-list
                              items; and text that summarizes completed steps. |

                              | `.optimizedCheckout-contentSecondary` | Text
                              labels on check boxes, and lower-level text in the
                              desktop Order Summary. |

                              | `.optimizedCheckout-button--primary` |
                              `CONTINUE` button and final `PAY` button. |

                              | `.optimizedCheckout-button--secondary` | `Edit`
                              buttons.

                              | `.optimizedCheckout-orderSummary` | Colors in
                              the `Order Summary` mobile drawer/modal.

                              | `.optimizedCheckout-step` | Large step-number
                              indicators on the page's left side. |

                              | `.optimizedCheckout-form-label` | Styles form
                              fields like `Email Address` – the field's
                              text-label color. | 

                              | `.optimizedCheckout-form-input` | Styles form
                              fields like `Email Address` – the entry box's
                              background and border colors. |
                            header:
                              anchor: optimized_classes
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Providing User Options in Theme Editor


                              As with other aspects of your theme's styling, you
                              can determine which aspects of Optimized One-Page
                              Checkout users will be able to customize in Theme
                              Editor. 


                              In Stencil's Cornerstone base theme, each
                              class/property available in
                              `optimized-checkout.scss` has a corresponding
                              key/value pair in the `config.json` file. For
                              examples of these key/value pairs, see [this
                              section]().


                              For examples of Theme Editor graphical controls
                              exposed to users through elements included in
                              Cornerstone's `schema.json` file, please see [this
                              section]().
                            header:
                              anchor: optimized_providing
                    - title: Currency Conversion
                      route:
                        path: /currency-conversion
                      data:
                        blocks:
                          - type: html
                            data: <h1>Currency Conversion</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#currency_currency-conversion\">Currency-Conversion Options</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Currency-Conversion Options


                              You can enable the display of alternate currencies
                              on your Stencil theme's Optimized One-Page
                              Checkout and order confirmation pages.
                            header:
                              anchor: currency_currency-conversion
                          - type: callout
                            data:
                              body: >-
                                The options on this page require that you first
                                enable Optimized One-Page Checkout. Find
                                instructions on how to do this in Enable and
                                Restyle Optimized One-Page Checkout.


                                Note that regardless of the display options that
                                you set below, transactions will always be
                                processed in the store's single default
                                currency. To change that setting, see Changing
                                Your Default Currency.
                              title: Restrictions
                              type: warning
                          - type: text
                            data: >-
                              To allow shoppers to view prices in multiple
                              currencies, you will need to add the desired
                              currencies via the BigCommerce control panel.


                              Shoppers will then be able to use the `Currency`
                              drop-down list, throughout the storefront, to
                              switch displayed prices among the currencies you
                              have enabled.


                              At checkout, the shopper will still be billed in
                              the store's default currency. As shown below, the
                              checkout and cart templates will show an
                              annotation about this, while flagging any
                              converted total (in a shopper's selected alternate
                              currency) as an `Estimated Total`:
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1540232528988
                            config:
                              maxWidth: '400'
                              maxHeight: '600'
                              centered: true
                              fluid: true
                              bordered: true
                    - title: Multi Language Checkout
                      route:
                        path: /multi-language-checkout
                      data:
                        blocks:
                          - type: html
                            data: <h1>Multi Language Checkout</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#multi_multi-lang\">Multi Language Setup</a></li>\n    <li><a href=\"#multi_browsing\">Browsing Hidden Translation Keys</a></li>\n    <li><a href=\"#multi_adding\">Adding Your Own Translation Values</a></li>\n    <li><a href=\"#multi_localized\">Localized Country and State Names</a></li>\n    <li><a href=\"#multi_stencils-overall\">Stencil's Overall Limits on Translation</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Multi-Language Setup 


                              In the Cornerstone theme, both the Optimized
                              One-Page Checkout and the [order
                              confirmation](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/order-confirmation.html)
                              pages contain
                              [Handlebars`{{lang}}`](/stencil-docs/handlebars-syntax-and-helpers/handlebars-helpers-reference/string-helpers/custom-string-helpers#handlebars_lang)
                              statements to facilitate translation. The
                              `{{lang}}` statements enable automatic rendering
                              of their parameters into languages that shoppers
                              have selected in their browser preferences.


                              In the [default checkout page template
                              (cornerstone/templates/pages/checkout.html)](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/checkout.html),
                              one example that you can directly view is the page
                              header:
                            header:
                              anchor: multi_multi-lang
                          - type: code
                            data: >
                              {{#partial "head"}}


                              {{{ checkout.checkout_head }}}

                              {{{ stylesheet
                              '/assets/css/optimized-checkout.css' }}}

                              {{ getFontsCollection }}


                              <script type="text/javascript">
                                  window.language = {{{langJson 'optimized_checkout'}}};
                              </script>


                              {{{head.scripts}}}


                              {{/partial}}


                              {{#partial "page"}}

                              <header class="checkoutHeader
                              optimizedCheckout-header">
                                  <div class="checkoutHeader-content">
                                      <h1 class="is-srOnly">{{lang 'checkout.title'}}</h1>
                                      <h2 class="checkoutHeader-heading">
                                          <a class="checkoutHeader-link" href="{{urls.home}}">
                                              {{#if checkout.header_image}}
                                                  <img alt="{{settings.store_logo.title}}" class="checkoutHeader-logo" id="logoImage" src="{{ checkout.header_image }}"/>
                                              {{ else }}
                                                  <span class="header-logo-text">{{settings.store_logo.title}}</span>
                                              {{/if}}
                                          </a>
                                      </h2>
                                  </div>
                              </header>


                              {{{ checkout.checkout_content }}}


                              {{{ footer.scripts }}}


                              {{/partial}}


                              {{> layout/empty}}
                            header:
                              title: checkout.html
                              subtitle: '{{lang}} statement in page header'
                            config:
                              mode: html
                              highlightRange:
                                - from: '18'
                                  to: '18'
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Browsing Hidden Translation Keys


                              BigCommerce exposes only part of the checkout
                              page's structure through the local template
                              referenced above. For security purposes – and also
                              to offer all stores new checkout features
                              simultaneously – most checkout content is hidden.


                              This hidden content includes many more key/value
                              pairs that support translation. However, you can
                              see all the available keys with their default
                              English-language values in the
                              [opt-checkout-en.json.zip
                              file](https://storage.googleapis.com/bigcommerce-production-dev-center/template-files/opt-checkout-en.json.zip)
                            header:
                              anchor: multi_browsing
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Adding Your Own Translation Values


                              You can provide values for all of checkout's
                              supported translation keys – for all the languages
                              you want to support – even without direct access
                              to the hidden parts of the checkout template. Here
                              is how:


                              1. Download and unzip a local copy of the
                              [opt-checkout-en.json.zip
                              file](https://storage.googleapis.com/bigcommerce-production-dev-center/template-files/opt-checkout-en.json.zip),
                              also linked above in [Browsing Hidden Translation
                              Keys](multi_browsing).


                              2. Copy and paste the whole file's contents into
                              your theme's `en.json` file and into the `.json`
                              file for each language you want to translate your
                              checkout page's text. To see requirements for
                              naming and deploying these translation files,
                              please this documentation's [Internationalization
                              section](/stencil-docs/internationalization-and-localization/).


                              3. Replace the keys' values with appropriate
                              phrases in each file's target language.
                            header:
                              anchor: multi_adding
                          - type: text
                            data: >-
                              ## Localized Country and State Names 


                              In the Optimized One-Page Checkout page's
                              `Shipping Address` and `Billing Address` fields,
                              BigCommerce currently provides automatic
                              translation of drop-down lists' displayed
                              `Country` and `State` names into 12 supported
                              languages. Here are the steps for enabling this
                              translation:


                              1. As for the translation options described above,
                              you must enable Optimized One-Page Checkout.


                              2. Within your `<theme-name>/lang/` subdirectory,
                              you must provide a `xx.json` file with the
                              appropriate two-letter prefix for one or more of
                              the `Supported Languages` in the Naming
                              Requirements table below. (The naming conventions
                              we follow are explained on this page.)


                              3. We recommend that you populate that file with
                              the checkout-specific keys/values covered above at
                              Adding Your Own Translation Values. This is not
                              strictly necessary to translate the drop-down
                              lists, but it is necessary to provide a consistent
                              translation of the surrounding Address sections.
                              You do not need to provide any keys/values for the
                              Country/State names, whose translations are
                              predefined within the BigCommerce platform.


                              4. As with the translation options described
                              above, the storefront will automatically display
                              the translated `Country/State` names to visitors
                              who have selected one of the supported languages
                              in their browser's locale preferences.


                              ### Country/State Translation – Naming
                              Requirements


                              BigCommerce Optimized One-Page Checkout will
                              currently translate displayed `Country/State`
                              names if your Stencil theme includes
                              `.../lang/xx.json` files named as shown below.


                              | Supported Language | Required Translation File
                              Name |

                              |------|------|

                              |  German | `de.json` |

                              | Spanish | `es.json` |

                              | French | `fr.json` |

                              | Hindi | `hi.json` |

                              | Italian | `it.json` |

                              | Japanese | `ja.json` |

                              | Korean | `ko.json` |

                              | Dutch | `nl.json` |

                              | Punjabi | `pa.json` |

                              | Tamil | `ta.json` |

                              | Chinese Simplified | `zh-TW.json` |

                              | Chinese Traditional | `zh.json` |
                            header:
                              anchor: multi_localized
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Stencil's Overall Limits on Translation


                              * Your theme's content will translate only to the
                              extent that you have created JSON files in your
                              `<theme-name>/lang/` subdirectory for each
                              language that you choose to support, and have
                              included key/value pairs for the parameters
                              (beyond `Country/State`) that you choose to
                              translate.


                              * Stencil's multi-language capabilities are
                              currently limited to these specific strings that
                              you specify within the theme. The Stencil
                              framework does not currently translate content
                              rendered from a store's database – for example,
                              products' names.


                              * Within these limitations, if you intend to do
                              business internationally, we recommend that you
                              specify appropriate alternate-language strings for
                              key parts of your storefront, product catalog, and
                              checkout. Doing so will make browsing, purchasing,
                              and payment easier for users in your target
                              market(s). For an overview of all localization
                              options, please see [Localizing
                              Stores](/stencil-docs/internationalization-and-localization/localizing-stores).
                            header:
                              anchor: multi_stencils-overall
                    - title: Checkout/Confirmation Injection Options
                      route:
                        path: /checkout-confirmation-injection
                      data:
                        blocks:
                          - type: html
                            data: <h1>Checkout/Confirmation Injection Options</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#checkout_adding\">Adding Storewide Styles</a></li>\n    <li><a href=\"#checkout_applying-storewide-header\">Applying Storewide Header</a></li>\n    <li><a href=\"#checkout_applying-storewide-scripts\">Applying Storewide Scripts</a></li>\n    <li><a href=\"#checkout_adding-trust-seals\">Adding Trust Seals</a></li>\n    <li><a href=\"#checkout_app-injection\">Checkout App Injection</a></li>\n\t</ul>\n</div>\n  \n"
                          - type: text
                            data: >-
                              ## Adding Storewide Styles 


                              A prerequisite for the next two options is to add
                              themewide styles to your Checkout or Order
                              Confirmation page. To do so, add this statement:


                              `{{{stylesheet '/assets/css/theme.css'}}}`


                              ...before this statement, which is already present
                              at the head of each template:


                              `{{{ checkout.checkout_head }}}`
                            header:
                              anchor: checkout_adding
                          - type: text
                            data: >+
                              ## Applying Storewide Header 


                              You can replace each page's predefined header with
                              your storewide header. To do so, first add
                              themewide styles as described above. Next, replace
                              the following code block (if present):


                              ```

                              <header class="checkoutHeader
                              optimizedCheckout-header">
                                  <div class="checkoutHeader-content">
                                      <h1 class="is-srOnly">{{lang 'checkout.title'}}</h1>
                                      <h2 class="checkoutHeader-heading">
                                          <a class="checkoutHeader-link" href="{{urls.home}}">
                                              {{#if checkout.header_image}}
                                                  <img alt="{{settings.store_logo.title}}" class="checkoutHeader-logo" id="logoImage" src="{{ checkout.header_image }}"/>
                                              {{ else }}
                                                  <span class="header-logo-text">{{settings.store_logo.title}}</span>
                                              {{/if}}
                                          </a>
                                      </h2>
                                  </div>
                              </header>

                              ```


                              with this simple Handlebars statement:


                              `{{> components/common/header }}`


                              Ensure that you paste it before this **existing**
                              statement:


                              `{{{ checkout.checkout_head }}}`

                            header:
                              anchor: checkout_applying-storewide-header
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Applying Storewide Scripts 


                              You have the following options to add and
                              customize headers and footers, on either or both
                              templates:


                              * Adding your themewide header/footer.

                              * Adding themewide scripts (for analytics, etc.).

                              * Adding both.


                              If you are working on a theme that does not have
                              the scripts already enabled, here are the steps to
                              enable these options:


                              1. Add themewide styles, as described above.


                              2. Towards the top of the checkout template
                              (`checkout.html`), add this Handlebars statement
                              to enable header scripts:


                              `{{{ head.scripts }}}`


                              Add it between these existing statements, so it
                              will ultimately read as shown below.


                              ```

                              <script type="text/javascript">
                                  window.language = {{{langJson 'optimized_checkout'}}};
                              </script>


                              {{{head.scripts}}}


                              {{/partial}}


                              {{#partial "page"}}

                              ```


                              Additionally, at the bottom of the checkout
                              template (`checkout.html`), add this Handlebars
                              statement to enable footer scripts:


                              `{{{ footer.scripts }}}`


                              Add it between these existing statements, so it
                              will ultimately read as shown below.


                              ```
                                  {{{ checkout.checkout_content }}}

                                  {{{ footer.scripts }}}

                                  {{/partial}}
                              ```


                              3. Towards the top of the order confirmation
                              template (`order-confirmation.html`), add this
                              Handlebars statement to enable header scripts:


                              `{{{ head.scripts }}}`


                              Add it between these existing statements, so it
                              will ultimately read as shown below.


                              ```

                              <script type="text/javascript">
                                  window.language = {{{langJson 'optimized_checkout'}}};
                              </script>


                              {{{head.scripts}}}


                              {{/partial}}


                              {{#partial "page"}}

                              ```


                              Additionally, at the bottom of the order
                              confirmation template (`order-confirmation.html`),
                              insert this Handlebars statement:


                              `{{{ footer.scripts }}}`


                              Insert it between these existing statements, so it
                              will ultimately read as shown below.


                              ```

                              {{{ checkout.order_confirmation_content }}}


                              {{{ footer.scripts }}}


                              {{/partial}}

                              ```


                              4. In your store's BigCommerce control panel,
                              ensure that you have inserted any desired script
                              text in the `Storefront` > `Script Manager` field.
                            header:
                              anchor: checkout_applying-storewide-scripts
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Adding Trust Seals 


                              To add a trust seal to either template:


                              1. Generate a code snippet (seal script) from your
                              trust-seal provider. You can find instructions for
                              GeoTrust seals in [this BigCommerce KB
                              article](https://support.bigcommerce.com/articles/Public/Adding-a-GeoTrust-SSL-seal-to-your--footer?_ga=2.254356814.718421096.1540222570-967431010.1523308107).
                              (Instructions for other providers will vary.)


                              2. Copy and paste the seal script into your
                              checkout or order confirmation template, before or
                              after the `{{{ checkout.checkout_content }}}`
                              Handlebars statement.
                            header:
                              anchor: checkout_adding-trust-seals
                          - type: text
                            data: >
                              ## App Injection: Script Examples 


                              With BigCommerce's extensible software, there are
                              a variety of ways to add scripts to your store.
                              The steps above outline only one method of adding
                              header and footer scripts to your store, which is
                              by directly editing the theme files.


                              As mentioned in the App Injection Script Examples,
                              you can use BigCommerce's Script Manager and
                              Script API to inject scripts to your store. The
                              Script Manager user interface is available to
                              store owners and other users via granted
                              permission directly in the Control Panel, or
                              scripts can be programmatically injected into the
                              store by developers using the Scripts API. These
                              are the recommended methods as they allow seamless
                              and intuitive injection of scripts.


                              The following sections present examples of scripts
                              that inject popular apps into the checkout/order
                              confirmation sequence.


                              ### Olark Live Chat 


                              As an example of injecting an app from the
                              BigCommerce Apps Marketplace, you could enable the
                              Olark Live Chat app on either page by by using the
                              script manager or our new Scripts API:


                              ```

                              <!-- begin olark code -->

                              <script type="text/javascript" async>

                              ;(function(o,l,a,r,k,y){if(o.olark)return;

                              r="script";y=l.createElement(r);r=l.getElementsByTagName(r)[0];

                              y.async=1;y.src="//"+a;r.parentNode.insertBefore(y,r);

                              y=o.olark=function(){k.s.push(arguments);k.t.push(+new
                              Date)};

                              y.extend=function(i,j){y("extend",i,j)};

                              y.identify=function(i){y("identifyv",k.i=i)};

                              y.configure=function(i,j){y("configure",i,j);k.c[i]=j};

                              k=y._={s:[],t:[+new Date],c:{},l:a};

                              })(window,document,"static.olark.com/jsclient/loader.js");

                              /* Add configuration calls bellow this comment */

                              olark.identify('4080-493-10-1035');</script>

                              <!-- end olark code -->

                              ```


                              ### Bluecheck Age Verification


                              Similarly, you could enable the Bluecheck
                              age-verification app by using the script manager
                              or our new Scripts API:


                              ```

                              <!-- Bluecheck AV Start Here -->
                                 <script src="https://api.bluecheck.me/modal/latest/custom/bigcommerce.js"></script>
                                 <script src='//api.bluecheck.me/age-gate/v2/loader.js.php?domain_token=[user-token-value]'></script>
                                 <span style='display:none' id='bc_selected_shipping_info'>%%GLOBAL_ShippingAddress%%</span>
                                 <span style='display:none' id='bc_selected_billing_info'>%%GLOBAL_BillingAddress%%</span>
                                 <span style='display:none' id='bc_customer_acct_email'>%%GLOBAL_CurrentCustomerEmail%%</span>
                                 <span style='display:none' id='bc_customer_acct_id'>%%GLOBAL_CurrentCustomerID%%</span>
                                 <span style='display:none' id='bc_customer_acct_fname'>%%GLOBAL_CurrentCustomerFirstName%%</span>
                                 <span style='display:none' id='bc_customer_acct_lname'>%%GLOBAL_CurrentCustomerLastName%%</span>
                                 <!-- Bluecheck AV End Here -->
                              ```


                              ### Rebillia Recurring Billing


                              To add the Rebillia app, you could add the
                              following tags by using the script manager or our
                              new Scripts API:


                              ```

                              <div id='rebillia_overlay'></div>


                              <script
                              src="https://js.braintreegateway.com/v2/braintree.js"></script>


                              <script type="text/javascript"
                              src="https://js.stripe.com/v2/"></script>


                              <script type="text/javascript">

                              function customerJWT(a){var
                              b="r1sc6nvnnhed377cozp2bfwfa69cfz5",c=new
                              XMLHttpRequest;c.onreadystatechange=function(){if(4==c.readyState)if(200==c.status){var
                              b=new
                              XMLHttpRequest;b.open("GET","https://demo.rebillia.com/storefront/login/"+c.responseText,!0),b.withCredentials=!0,b.send()}else
                              if(404==c.status){var d=new
                              XMLHttpRequest;params="bc_email="+a,d.open("POST","https://demo.rebillia.com/storefront/login/guest",!0),d.setRequestHeader("Content-type","application/x-www-form-urlencoded"),d.withCredentials=!0,d.send(params)}else
                              console.log("Something went
                              wrong")},c.open("GET","/customer/current.jwt?app_client_id="+b,!0),c.send()}var
                              currentcustomeremail="%%GLOBAL_CurrentCustomerEmail%%",shopPath="%%GLOBAL_ShopPathSSL%%",domainName="https://demo.rebillia.com",domainURL="https://demo.rebillia.com/";$(document).ready(function(){$.getScript(domainName+"/js/embed-common.js");var
                              a=window.location.href.match(/[^\/]+$/);if(a&&a.length){var
                              b=a[0].split(".");"account"!=b[0]&&"checkout"!=b[0]&&"finishorder"!=b[0]||$.getScript(domainName+"/js/embed-"+b[0]+".js"),"account"==b[0]&&customerJWT()}});

                              </script>

                              ```


                              ### Conversion Tracking: Conversions on Demand 


                              Here is one final example of an app that you could
                              enable by using the script manager or our new
                              Scripts API. This example enables Conversions on
                              Demand:


                              ```

                              <script type='text/javascript'>// <![CDATA[
                                  var cod_page_guid = 'CHECKOUT';
                                  var COD_CONFIG = {'platform':'bigcommerce', 'stoken':'as2_bcmarket_org'};
                                      (function(){
                                          var divCOD = document.createElement('div');
                                          divCOD.id = 'codScripts';
                                          var bodytag = document.getElementsByTagName('body')[0];
                                          bodytag.appendChild(divCOD);
                                          var cod = document.createElement('script');
                                          cod.type = 'text/javascript';
                                          cod.src = 'https://www.conversionsondemand.com/codadmin2/framework/cod-scripts-loader.js';
                                          var s = document.getElementById('codScripts');
                                          s.parentNode.insertBefore(cod, s);
                                      })(COD_CONFIG);
                              // ]]></script>

                              ```


                              ### Google Analytics: Addrexx Address
                              Verification 


                              The Addrexx app is integrated to the Checkout or
                              Order Confirmation page via the BigCommerce
                              control panel's Google Analytics box, rather than
                              through injection directly into either Stencil
                              template file. Here is the corresponding script to
                              enter into the control panel:


                              ```

                              <!-- START  Addrexx -->

                              <script type="text/javascript">

                              wwPage = window.location.href;

                              if (wwPage.indexOf("billing_address") >= 0 ||
                              wwPage.indexOf("create_account") >= 0 ||
                              wwPage.indexOf("shipping_address") >= 0 ||
                              wwPage.indexOf("checkout") >= 0) {

                              function loadaddrexx() {
                                  var _cc_url = "xxredda.s3.amazonaws.com/bcmarket/loader.js";
                                  var _cc_s = document.createElement('script');
                                  _cc_s.type = 'text/javascript';
                                  _cc_s.src = (("http:" === document.location.protocol) ? "http:" : "https:") + "//" + _cc_url;
                                  document.getElementsByTagName("head")[0].appendChild(_cc_s);
                              };

                              loadaddrexx();

                              }

                              </script>

                              <!-- END  Addrexx -->

                              ```
                            header:
                              anchor: checkout_app-injection
                    - title: Restyling the Apple Pay Button
                      route:
                        path: /restyling-the-apple-pay-button
                      data:
                        blocks:
                          - type: html
                            data: <h1>Restyling the Apple Pay Button</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#restyling_using\">Using Apple Pay</a></li>\n    <li><a href=\"#restyling_apple\">Apple Pay and Stencil Themes</a></li>\n    <li><a href=\"#restyling_implementing\">Implementing the Apple Pay Button</a></li>\n    <li><a href=\"#restyling_apple-pay-identity\">Apple Pay Identity Guidelines</a></li>\n    <li><a href=\"#restyling_styling\">Styling the Apple Pay Button</a></li>\n    <li><a href=\"#restyling_troubleshooting\">Troubleshooting</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Using Apple Pay


                              Apple Pay is a digital wallet that links to a
                              shopper's chosen credit or debit cards. It reduces
                              checkout friction in the same way other digital
                              wallets like PayPal do: Once a shopper has set up
                              Apple Pay, they don't need to enter or transfer
                              their actual credit or debit-card number, nor do
                              they need to re-enter their billing, shipping or
                              contact details.


                              Displaying the Apple Pay button to shoppers on
                              your storefront is subject to Apple's [geographic
                              constraints](https://support.apple.com/en-us/HT204916),
                              [supported devices and
                              software](https://support.apple.com/en-us/KM207105),
                              [industry and conduct
                              restrictions](https://developer.apple.com/apple-pay/acceptable-use-guidelines-for-websites/),
                              and policies regarding store checkout flow. 


                              For details, see the [Apple Pay for
                              Developers](https://developer.apple.com/apple-pay/)
                              site and [this BigCommerce support
                              article](https://support.bigcommerce.com/articles/Public/Connecting-with-Apple-Pay).
                            header:
                              anchor: restyling_using
                          - type: text
                            data: >-
                              ## Apple Pay and Stencil Themes


                              The Apple Pay button is included in most Stencil
                              themes, but its default appearance might not match
                              your store's theme. This article explains how to
                              do the following:

                              * script the button in themes that don't already
                              include it

                              * restyle the button within Apple's guidelines


                              ### Themes Incorporating Apple Pay 


                              Most current Stencil themes incorporate Apple Pay
                              by default. These include Cornerstone 1.4.0 (or
                              later) and most Theme Marketplace themes. 


                              ### Themes Omitting Apple Pay 


                              The following Stencil themes do _not_ include
                              Apple Pay:


                              * Cornerstone 1.3.4 or earlier

                              * Fortune

                              * Geneva

                              * Prosper

                              * Solo

                              * Earlier versions of Marketplace themes that have
                              since added Apple Pay

                              * Custom themes derived from any of the above


                              ### Apple Pay Button's Location 


                              By default, the Apple Pay button will appear on a
                              theme's Cart page. If the store has [enabled
                              site-wide
                              HTTPS](https://support.bigcommerce.com/articles/Public/Site-Wide-HTTPS/),
                              the Apple Pay button will also appear in the Quick
                              Cart modal. The Apple Pay button does _not_ appear
                              on the checkout page, because Apple Pay is
                              designed as a low-friction alternative that
                              bypasses the store's native checkout.
                            header:
                              anchor: restyling_apple
                          - type: text
                            data: >-
                              ## Implementing the Apple Pay Button


                              ### Themes Incorporating Apple Pay


                              To display the Apple Pay button in themes
                              incorporating Apple Pay, a store administrator
                              only needs to enable Apple Pay in the BigCommerce
                              control panel by selecting `Store Setup` >
                              `Payments` > `Digital Wallets` > `Apple Pay` >
                              `Set up`, as outlined in the [Connecting with
                              Apple
                              Pay](https://support.bigcommerce.com/articles/Public/Connecting-with-Apple-Pay#setup)
                              support article. 


                              ### Themes Omitting Apple Pay


                              To display the Apple Pay button on the Cart page
                              of themes omitting Apple Pay, you or a store
                              administrator must paste enabling CSS into the
                              footer script, as follows: 


                              1. Copy the CSS below.

                              2. In the BigCommerce control panel, select
                              `Storefront Design` > `Design Options` and then
                              the `Scripts` tab.

                              3. Paste the copied code into the Footer script
                              box and select `Save`.
                            header:
                              anchor: restyling_implementing
                          - type: code
                            data: >-
                              <style>

                              /* don’t display the button by default */

                              .apple-pay-checkout-button {
                                display: none;
                              }


                              /* display the button if apple pay is supported */

                              .apple-pay-supported .apple-pay-checkout-button {
                                display: inline-block;
                              }


                              /* renders a black background with white logo */

                              .apple-pay-checkout-button {
                                background-size: 100% 60%;
                                background-repeat: no-repeat;
                                background-position: 50% 50%;
                                border-radius: 5px;
                                padding: 0px;
                                box-sizing: border-box;
                                min-width: 175px;
                                min-height: 32px;
                                max-height: 64px;
                                background-image: -webkit-named-image(apple-pay-logo-white);
                                background-color: black;
                                text-indent: -9000em;
                                cursor: pointer;
                              }


                              /* for small screens, you should adjust the width
                              of the button to
                                 span the width of the containing block */
                              @media screen and (max-width: 480px) {
                                .apple-pay-checkout-button {
                                  width: 100%;
                                  height: 60px;
                                }
                              }

                              </style>
                            config:
                              mode: css
                          - type: text
                            data: >-
                              ## Apple Pay Identity Guidelines


                              As a condition for enabling Apple Pay, Apple
                              requires merchants to style and display the button
                              according to [Apple Pay Identity
                              Guidelines](https://developer.apple.com/apple-pay/Apple-Pay-Identity-Guidelines.pdf).
                              For BigCommerce's summary of the relevant
                              guidelines, see the [Integrating the Apple Pay
                              Button](https://support.bigcommerce.com/articles/Public/Integrating-the-Apple-Pay-button/#guidelines)
                              support article.
                            header:
                              anchor: restyling_apple-pay-identity
                          - type: text
                            data: "## Styling the Apple Pay Button\n\nBy default, a black version of the Apple Pay button will display in the storefront. However, Apple permits you to change the following three styling elements of the button, to match the style of your storefront:\n\n* Button background color, which must only be either white or black. A white button can have a black border.\n* Button height\n* Button width\n\n### Button Color – No Custom CSS Required\n\nIn themes incorporating Apple Pay, you or a store administrator can change the Apple Pay button's color in Theme Editor. Select: `Buttons` > `Apple Pay` > Button `Color`. \n\nThe drop-down list offers you the three options shown below: \n\n* Black (white text) – the default\n* White (black text)\n* White (black text with border)\n\n### Button Color – Custom CSS Required\n\nIn themes omitting Apple Pay, you must use custom CSS to change the Apple Pay button's color. Here are CSS snippets to recolor the default black button.\n\nTo render the button with a white background and black text, use this CSS:\n\n```\n.apple-pay-checkout-button {\n  background-image: -webkit-named-image(apple-pay-logo-black);\n  background-color: white;\n}\n```\n\nTo render the white Apple Pay button with black text and a black border, use this CSS:\n\n```\n.apple-pay-checkout-button {\n  background-image: -webkit-named-image(apple-pay-logo-black);\n  background-color: white;\n  border: .5px solid black\n}\n```\n### Button Size – Custom CSS Required \n\nResizing the button normally requires custom CSS. The following example shows how, by targeting the \n`.apple-pay-checkout-button` CSS selector, you can also manipulate the Apple Pay button's width and height. (This&#160;is subject to certain constraints imposed by Apple and BigCommerce, which are listed in the example's comments.)\n\n```\n.apple-pay-checkout-button {\n  width: 200px; /* apple specified minimum is 175px, there is no maximum */\n  height: 60px; /* apple specified minimum is 32px, maximum is 64px */\n}\t\n```"
                            header:
                              anchor: restyling_styling
                          - type: text
                            data: >-
                              ## Troubleshooting


                              Is your Apple Pay button configured but not
                              appearing on the storefront? To troubleshoot
                              issues like this, see the [Integrating the Apple
                              Pay
                              Button](https://support.bigcommerce.com/articles/Public/Integrating-the-Apple-Pay-button/#troubleshoot)
                              support article.
                            header:
                              anchor: restyling_troubleshooting
                    - title: Checkout JS SDK
                      route:
                        path: /checkout-js-sdk
                      data:
                        children:
                          - title: Getting Started in Vanilla JS
                            route:
                              path: /getting-started-in-vanilla-js
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Getting Started in Vanilla JS</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#getting-started_installing\">Installing the Checkout JS SDK</a></li>\n    <li><a href=\"#getting-started_creating\">Creating a <code>checkout.js</code> file</a></li>\n    <li><a href=\"#getting-started_mapping\">Mapping the <code>checkout.js</code> file to the checkout page type</a></li>\t\n    <li><a href=\"#getting-started_preparing\">Preparing the <code>checkout.html</code> template file</a></li>\t\n    <li><a href=\"#getting-started_logging\">Logging the Checkout Object</a></li>\t\n    <li><a href=\"#getting-started_next-steps\">Next Steps</a></li>\t\n</ul>\n</div>\n\n\n\n\n\n\n"
                                - type: text
                                  data: >
                                    The Checkout JS SDK is a JavaScript library
                                    of methods for performing actions related to
                                    checkout. It includes methods for logging in
                                    a customer, adding addresses to the checkout
                                    object, and surfacing the shipping and
                                    payment methods that a merchant has
                                    configured. It’s everything you need to
                                    build your own custom checkout page on
                                    BigCommerce.


                                    We have provided a [sample checkout
                                    app](https://github.com/bigcommerce/checkout-sdk-js-example)
                                    built in React; the React sample app is a
                                    great place to get started if you prefer to
                                    build within a framework. However, because
                                    the SDK is built in vanilla JS, it’s
                                    framework agnostic. To illustrate that
                                    point, this tutorial will walk through the
                                    first steps for building a custom checkout
                                    directly into the theme files using vanilla
                                    JS. At the end of the tutorial, you will
                                    have installed the Checkout SDK, created a
                                    new JavaScript module for your icustom
                                    checkout, and console logged the checkout
                                    object.


                                    Before we get started, ensure your theme is
                                    setup for local development using Stencil
                                    CLI. See [Installing
                                    Stencil](/stencil-docs/getting-started/installing-stencil)
                                    if you have not already done this.
                                - type: text
                                  data: >
                                    ## Installing the Checkout JS SDK


                                    1. Open your terminal and navigate to your
                                    theme’s directory.


                                    For example, `cd cornerstone`


                                    2. Run the following command: 


                                    `npm install --save
                                    @bigcommerce/checkout-sdk`
                                  header:
                                    anchor: getting-started_installing
                                - type: text
                                  data: "## Creating a `checkout.js` file\n\n1. In your text editor, open your theme and create a new file in the assets/js/theme directory.\n\n2. Save the file as checkout.js. You can name your checkout JavaScript file anything you like, but the subsequent steps of this tutorial will assume the filename checkout.js.\n\n3. Add the following to your `checkout.js` file:\n\n```\nimport PageManager from './page-manager';\nimport { createCheckoutService } from '@bigcommerce/checkout-sdk';\n\nconst service = createCheckoutService();\n\nexport default class Checkout extends PageManager {\n\tasync onReady() {\n\t\tconst state = await service.loadCheckout();\nconsole.log(state.data.getCheckout());\n\t}\n}\n```\n\nImporting and extending the PageManager abstract class sets the page context for the `checkout.js` module. We also `import { createCheckoutService }` from the Checkout SDK. \n\nThe async keyword ensures that `onReady()` returns a Promise; the await keyword waits until the Promise resolves to load the checkout. Async/await is supported in nearly all modern browsers, but if you need to support older browsers like IE, you will require the [Promise polyfill](https://github.com/stefanpenner/es6-promise).\n\n4. Save the file. "
                                  header:
                                    anchor: getting-started_creating
                                - type: text
                                  data: >-
                                    ## Mapping the `checkout.js` file to the
                                    checkout page type


                                    1. Open the `app.js` file in your text
                                    editor.


                                    2. Add the following to map your checkout.js
                                    file to the checkout page type:

                                    `checkout: () =>
                                    import('./theme/checkout'),`
                                  header:
                                    anchor: getting-started_mapping
                                - type: image
                                  data: >-
                                    //s3.amazonaws.com/user-content.stoplight.io/6116/1540242854920
                                  config:
                                    centered: true
                                    fluid: true
                                    bordered: true
                                - type: text
                                  data: 3. Save the file.
                                - type: text
                                  data: >+
                                    ## Preparing the `checkout.html` template
                                    file


                                    1. Open the `checkout.html` file in your
                                    text editor.

                                    2. Comment out the `{{{
                                    checkout.checkout_content }}}` statement:

                                    <!--{{{ checkout.checkout_content }}}-->


                                    3. On the next line, add the following:

                                    ```

                                    <script>window.__webpack_public_path__ =
                                    "{{cdn 'assets/dist/'}}";</script>

                                    <script src="{{cdn
                                    'assets/dist/theme-bundle.main.js'}}"></script>


                                    <script>
                                        window.stencilBootstrap("{{page_type}}", {{jsContext}}).load();
                                    </script>


                                    ```


                                    4. Save the file.

                                  header:
                                    anchor: getting-started_preparing
                                - type: text
                                  data: >
                                    ## Logging the Checkout Object


                                    1. Navigate to the storefront and open your
                                    browser console.

                                    2. Add an item to your cart and proceed to
                                    the checkout page. The checkout page will be
                                    blank below the header.

                                    3. Note the checkout object logged to the
                                    console. 
                                  header:
                                    anchor: getting-started_logging
                                - type: text
                                  data: >-
                                    ## Next Steps


                                    Build out your custom checkout page by
                                    entering your HTML into the `checkout.html`
                                    file and JavaScript into checkout.js. For
                                    detailed documentation on all of the
                                    Checkout SDK library methods visit the [SDK
                                    GitHub
                                    repository](https://github.com/bigcommerce/checkout-sdk-js).
                                  header:
                                    anchor: getting-started_next-steps
                          - title: React.js Custom Checkout
                            route:
                              path: /implement-a-custom-checkout
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <h1>Implementing a Custom React.js Checkout
                                    to Cornerstone using the BigCommerce
                                    Checkout SDK</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#implement_tutorial-overview\">Tutorial Overview</a></li>\n    <li><a href=\"#implement_steps\">Steps to Implement a Custom React Checkout</a></li>\n    <li><a href=\"#implement_additional\">Additional Resources</a></li>\t\n</ul>\n</div>\n"
                                - type: text
                                  data: >-
                                    ## Tutorial Overview


                                    This tutorial will take you through the
                                    steps to implement a custom checkout built
                                    with React to the Cornerstone Theme. The
                                    checkout will utilize BigCommerce's Checkout
                                    SDK. This tutorial assumes [Cornerstone
                                    2.4.0](https://github.com/bigcommerce/cornerstone/releases/tag/2.4.0)
                                    as a starting point.
                                  header:
                                    anchor: implement_tutorial-overview
                                - type: callout
                                  data:
                                    type: error
                                    body: >-
                                      Please note that the provided checkout
                                      example is a good starting and reference
                                      point, but is **NOT production ready**.
                                      You should **not** use this custom
                                      checkout in production as it stands.
                                    title: Checkout Example NOT production ready!
                                - type: text
                                  data: >-
                                    ## Steps to Implement a Custom React
                                    Checkout in Cornerstone


                                    ### Tutorial Prerequisites


                                    Before beginning this tutorial, you will
                                    need to have the Stencil CLI installed.


                                    If you do not yet have Stencil CLI
                                    installed, complete the steps in [Installing
                                    Stencil](stencil-docs/getting-started/installing-and-launching/installing-stencil).
                                  header:
                                    anchor: implement_steps
                                - type: callout
                                  data:
                                    type: warning
                                    body: >
                                      This tutorial is **not** currently
                                      compatible with Cornerstone versions 3.0.0
                                      and above. If you would like to implement
                                      this checkout on your Cornerstone theme
                                      using the steps in this tutorial, you need
                                      to be developing on a Cornerstone theme
                                      below version 3.0.0. The tutorial assumes
                                      [Cornerstone
                                      2.4.0](https://github.com/bigcommerce/cornerstone/releases/tag/2.4.0)
                                      as a starting point.
                                    title: >-
                                      Compatible with Cornerstone versions below
                                      3.0
                                - type: text
                                  data: >-
                                    ### Install Dependencies


                                    The React app used to demonstrate the
                                    Checkout SDK has a few additional
                                    dependencies.

                                    In your theme directory (e.g.
                                    /stencil/cornerstone), run the following
                                    command:


                                    `npm install --save react react-dom
                                    react-text-mask classnames accounting
                                    babel-preset-react css-loader node-sass
                                    sass-loader style-loader
                                    @bigcommerce/checkout-sdk`



                                    ### Update webpack.common.js


                                    The React app includes .jsx files which will
                                    not be resolved using the default webpack
                                    configuration in Cornerstone. Additionally,
                                    loaders must be registered for .jsx and
                                    .scss files.


                                    **Note:** _Cornerstone 2.0 and above uses
                                    Webpack 4 which does **not** use a
                                    `webpack.conf.js` file like earlier Webpack
                                    versions. Instead, we will modify
                                    `webpack.common.js`._


                                    #### Register .jsx and .scss loaders


                                    In webpack.common.js, add the following
                                    objects to the `rules` array:


                                    ```

                                    {
                                      test: /\.jsx$/,
                                      exclude: /node_modules/,
                                      use: {
                                          loader: "babel-loader",
                                          options: {
                                              presets: ['react'],
                                          },
                                      }
                                    },


                                    {
                                      test: /\.scss$/,
                                      use:  [
                                          'style-loader',
                                          {
                                              loader: 'css-loader',
                                              options: {
                                                  modules: true
                                              }
                                          },
                                          'sass-loader'
                                      ],
                                    },

                                    ```


                                    Next, in webpack.common.js, add the
                                    following property to the `resolve` object:



                                    `extensions: ['.js', '.jsx']`



                                    ### Add React Checkout Components to Theme


                                    1. Clone or download BigCommerce's [Checkout
                                    SDK JS
                                    Example](https://github.com/bigcommerce/checkout-sdk-js-example)
                                    **outside** of your theme directory


                                    `git clone
                                    https://github.com/bigcommerce/checkout-sdk-js-example.git`


                                    If the above command fails, and you are
                                    accessing GitHub anonymously, give the URL
                                    this alternate prefix:


                                    `git clone
                                    git@github.com:bigcommerce/checkout-sdk-js-example.git`


                                    2. In your theme directory, navigate to
                                    `/assets/js/` and create a `checkout-app`
                                    directory (i.e. `/assets/js/checkout-app`)


                                    3. Copy the contents of
                                    `/checkout-sdk-js-example/src` into your new
                                    `/assets/js/checkout-app` directory 



                                    ### Import Dependencies


                                    Edit `/assets/js/app.js` and add the
                                    following lines toward the beginning with
                                    the other import statements:


                                    ```

                                    import React from 'react';

                                    import ReactDOM from 'react-dom';

                                    import Checkout from
                                    './checkout-app/Checkout/checkout';

                                    ```


                                    ### Define a Function to Initialize React


                                    Edit `/assets/js/app.js` and add the
                                    following lines to the end:


                                    ```

                                    window.initReact = function initReact() {
                                        ReactDOM.render(
                                            React.createElement(Checkout, null, null),
                                            document.getElementById('checkout-app')
                                        );
                                    };

                                    ```


                                    ### Customize the Checkout Template


                                    1. Edit `/templates/pages/checkout.html` and
                                    add the following lines between `{{{
                                    footer.scripts }}}` and `{{/partial}}`


                                    ```

                                    <script src="{{cdn
                                    'assets/dist/theme-bundle.main.js'}}"></script>
                                     
                                    <script type="text/javascript" defer>
                                        // Exported in app.js
                                        window.initReact();
                                    </script>

                                    ```


                                    2. In `/templates/pages/checkout.html`,
                                    replace `{{{ checkout.checkout_content }}}`
                                    with the following:


                                    ```<div id="checkout-app"></div>```


                                    ### Congratulations!


                                    You should now be able to view your example
                                    React checkout by running the `stencil
                                    start` command in your theme directory and
                                    navigating to your storefront at
                                    [http://localhost:3000](http://localhost:3000).


                                    You can make further customizations to the
                                    checkout by modifying the React components
                                    in `/assets/js/checkout-app`.
                                - type: tabs
                                  data:
                                    children:
                                      - title: webpack.common.js
                                        blocks:
                                          - type: code
                                            data: >
                                              LodashPlugin =
                                              require('lodash-webpack-plugin'),

                                              path = require('path'),

                                              webpack = require('webpack');


                                              // Common configuration, with extensions
                                              in webpack.dev.js and webpack.prod.js.

                                              module.exports = {

                                              bail: true,

                                              context: __dirname,

                                              entry: {
                                                main: './assets/js/app.js',
                                              },

                                              module: {
                                                rules: [
                                                    {
                                                        test: /\.js$/,
                                                        include: /(assets\/js|assets\\js|stencil-utils)/,
                                                        use: {
                                                            loader: 'babel-loader',
                                                            options: {
                                                                plugins: [
                                                                    'dynamic-import-webpack', // Needed for dynamic imports.
                                                                    'lodash', // Automagically tree-shakes lodash.
                                                                    'transform-regenerator', // Transforms async and generator functions.
                                                                ],
                                                                presets: [
                                                                    ['env', {
                                                                        loose: true, // Enable "loose" transformations for any plugins in this preset that allow them.
                                                                        modules: false, // Don't transform modules; needed for tree-shaking.
                                                                        useBuiltIns: true, // Tree-shake babel-polyfill.
                                                                    }],
                                                                ],
                                                            },
                                                        },
                                                    },
                                                    {
                                                        test: /jquery-migrate/,
                                                        use: 'imports-loader?define=>false',
                                                    },
                                                    {
                                                        test: /\.jsx$/,
                                                        exclude: /node_modules/,
                                                        use: {
                                                            loader: "babel-loader",
                                                            options: {
                                                                presets: ['react'],
                                                            },
                                                        }
                                                    },
                                                    {
                                                        test: /\.scss$/,
                                                        use:  [
                                                            'style-loader',
                                                            {
                                                                loader: 'css-loader',
                                                                options: {
                                                                    modules: true
                                                                }
                                                            },
                                                            'sass-loader'
                                                        ]
                                                    }
                                                ],
                                              },

                                              output: {
                                                chunkFilename: 'theme-bundle.chunk.[name].js',
                                                filename: 'theme-bundle.[name].js',
                                                path: path.resolve(__dirname, 'assets/dist'),
                                              },

                                              plugins: [
                                                new CleanPlugin(['assets/dist'], {
                                                    verbose: false,
                                                    watch: false,
                                                }),
                                                new LodashPlugin, // Complements babel-plugin-lodash by shrinking its cherry-picked builds further.
                                                new webpack.ProvidePlugin({
                                                    $: 'jquery',
                                                    jQuery: 'jquery',
                                                    'window.jQuery': 'jquery',
                                                }),
                                              ],

                                              resolve: {
                                                alias: {
                                                    'jquery-migrate': path.resolve(__dirname, 'node_modules/jquery-migrate/dist/jquery-migrate.min.js'),
                                                    jstree: path.resolve(__dirname, 'node_modules/jstree/dist/jstree.min.js'),
                                                    lazysizes: path.resolve(__dirname, 'node_modules/lazysizes/lazysizes.min.js'),
                                                    pace: path.resolve(__dirname, 'node_modules/pace/pace.min.js'),
                                                    'slick-carousel': path.resolve(__dirname, 'node_modules/slick-carousel/slick/slick.min.js'),
                                                    'svg-injector': path.resolve(__dirname, 'node_modules/svg-injector/dist/svg-injector.min.js'),
                                                    sweetalert2: path.resolve(__dirname, 'node_modules/sweetalert2/dist/sweetalert2.min.js'),
                                                },
                                                extensions: ['.js', '.jsx'],
                                              },

                                              };
                                            header:
                                              title: webpack.common.js
                                            config:
                                              mode: js
                                      - title: app.js
                                        blocks:
                                          - type: code
                                            data: >
                                              __webpack_public_path__ =
                                              window.__webpack_public_path__; //
                                              eslint-disable-line


                                              import 'babel-polyfill';

                                              import $ from 'jquery';

                                              import 'jquery-migrate';

                                              import Global from './theme/global';

                                              import React from 'react';

                                              import ReactDOM from 'react-dom';

                                              import Checkout from
                                              './checkout-app/Checkout/checkout';


                                              const getAccount = () =>
                                              import('./theme/account');

                                              const getLogin = () =>
                                              import('./theme/auth');

                                              const pageClasses = {
                                                  account_orderstatus: getAccount,
                                                  account_order: getAccount,
                                                  account_addressbook: getAccount,
                                                  shippingaddressform: getAccount,
                                                  account_new_return: getAccount,
                                                  'add-wishlist': () => import('./theme/wishlist'),
                                                  account_recentitems: getAccount,
                                                  account_downloaditem: getAccount,
                                                  editaccount: getAccount,
                                                  account_inbox: getAccount,
                                                  account_saved_return: getAccount,
                                                  account_returns: getAccount,
                                                  login: getLogin,
                                                  createaccount_thanks: getLogin,
                                                  createaccount: getLogin,
                                                  getnewpassword: getLogin,
                                                  forgotpassword: getLogin,
                                                  blog: () => import('./theme/blog'),
                                                  blog_post: () => import('./theme/blog-post'),
                                                  brand: () => import('./theme/brand'),
                                                  brands: () => import('./theme/brands'),
                                                  cart: () => import('./theme/cart'),
                                                  category: () => import('./theme/category'),
                                                  compare: () => import('./theme/compare'),
                                                  page_contact_form: () => import('./theme/contact-us'),
                                                  error: () => import('./theme/errors'),
                                                  404: () => import('./theme/404-error'),
                                                  giftcertificates: () => import('./theme/gift-certificate'),
                                                  giftcertificates_balance: () => import('./theme/gift-certificate'),
                                                  giftcertificates_redeem: () => import('./theme/gift-certificate'),
                                                  default: () => import('./theme/home'),
                                                  page: () => import('./theme/page'),
                                                  product: () => import('./theme/product'),
                                                  amp_product_options: () => import('./theme/product'),
                                                  search: () => import('./theme/search'),
                                                  rss: () => import('./theme/rss'),
                                                  sitemap: () => import('./theme/sitemap'),
                                                  newsletter_subscribe: () => import('./theme/subscribe'),
                                                  wishlist: () => import('./theme/wishlist'),
                                                  wishlists: () => import('./theme/wishlist'),
                                              };


                                              /**
                                               * This function gets added to the global window and then called
                                               * on page load with the current template loaded and JS Context passed in
                                               * @param pageType String
                                               * @param contextJSON
                                               * @returns {*}
                                               */
                                              window.stencilBootstrap = function
                                              stencilBootstrap(pageType, contextJSON =
                                              null, loadGlobal = true) {
                                                  const context = JSON.parse(contextJSON || '{}');

                                                  return {
                                                      load() {
                                                          $(async () => {
                                                              // Load globals
                                                              if (loadGlobal) {
                                                                  Global.load(context);
                                                              }

                                                              // Find the appropriate page loader based on pageType
                                                              const pageClassImporter = pageClasses[pageType];
                                                              if (typeof pageClassImporter === 'function') {
                                                                  const PageClass = (await pageClassImporter()).default;
                                                                  PageClass.load(context);
                                                              }
                                                          });
                                                      },
                                                  };
                                              };


                                              window.initReact = function initReact()
                                              {
                                                  ReactDOM.render(
                                                      React.createElement(Checkout, null, null),
                                                      document.getElementById('checkout-app')
                                                  );
                                              };
                                            header:
                                              title: app.js
                                            config:
                                              mode: js
                                      - title: checkout.html
                                        blocks:
                                          - type: code
                                            data: >-

                                              {{#partial "head"}}
                                               
                                              {{{ checkout.checkout_head }}}

                                              {{{ stylesheet
                                              '/assets/css/optimized-checkout.css' }}}

                                              {{ getFontsCollection }}
                                               
                                              <script type="text/javascript">
                                                  window.language = {{{langJson 'optimized_checkout'}}};
                                              </script>
                                               
                                              {{{head.scripts}}}
                                               
                                              {{/partial}}
                                               
                                              {{#partial "page"}}

                                              <header class="checkoutHeader
                                              optimizedCheckout-header">
                                                  <div class="checkoutHeader-content">
                                                      <h1 class="is-srOnly">{{lang 'checkout.title'}}</h1>
                                                      <h2 class="checkoutHeader-heading">
                                                          <a class="checkoutHeader-link" href="{{urls.home}}">
                                                              {{#if checkout.header_image}}
                                                                  <img alt="{{settings.store_logo.title}}" class="checkoutHeader-logo" id="logoImage" src="{{ checkout.header_image }}"/>
                                                              {{ else }}
                                                                  <span class="header-logo-text">{{settings.store_logo.title}}</span>
                                                              {{/if}}
                                                          </a>
                                                      </h2>
                                                  </div>
                                              </header>
                                               
                                              <div id="checkout-app"></div>
                                               
                                              {{{ footer.scripts }}}

                                              <script src="{{cdn
                                              'assets/dist/theme-bundle.main.js'}}"></script>
                                               
                                              <script type="text/javascript" defer>
                                                  // Exported in app.js
                                                  window.initReact();
                                              </script>

                                              {{/partial}}
                                               
                                              {{> layout/empty}}
                                            header:
                                              title: checkout.html
                                            config:
                                              mode: html
                                  header:
                                    title: >-
                                      Examples of files after completing this
                                      tutorial
                                - type: text
                                  data: >-
                                    ## Additional Resources


                                    * [www.reactjs.org](www.reactjs.org)

                                    *
                                    [www.reactjs.org/tutorial/tutorial.html](www.reactjs.org/tutorial/tutorial.html)
                                    (Tutorial on the basics of React)

                                    *
                                    [https://webpack.js.org/concepts/](https://webpack.js.org/concepts/)
                                  header:
                                    anchor: implement_additional"
        - title: Handlebars and Stencil
          route:
            path: /handlebars-syntax-and-helpers
          data:
            children:
              - title: Handlebars.js
                route:
                  path: /handlebars-overview
                data:
                  blocks:
                    - type: html
                      data: <h1>Handlebars.js Overview</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_handlebars-js\">Handlebars.js</a></li>\n    <li><a href=\"#handlebars_template\">Template Logic</a></li>\n    <li><a href=\"#handlebars_custom\">Custom Handlebars Helpers</a></li>\n    <li><a href=\"#handlebars_stencil\">Stencil Handlebars Resources</a></li>\n    <li><a href=\"#handlebars_rendering\">Rendering Special Characters</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Handlebars.js


                        Handlebars is a minimal templating language that allows
                        you to create dynamic and robust templates for any
                        BigCommerce storefront. A Handlebars template looks just
                        like a regular HTML page, with the addition of
                        Handlebars expressions for all dynamic logic that you
                        embed into the page.


                        A Handlebars expression begins with: ``{{`` and ends
                        with: ``}}``.


                        Here is a basic example that accesses the title and body
                        variables:


                        ```

                        <div class="entry">

                        <div class="entry">
                          <h1>{{ title }}</h1>
                          <div class="body">
                            {{ body }}
                          </div>
                        </div>

                        ```


                        In production, Handlebars statements run on the server
                        side, generating HTML received by the shopper's browser.


                        You can view a [full reference page of all the
                        handlebars helpers available to Stencil
                        here](/stencil-docs/handlebars-syntax-and-helpers/handlebars-helpers-reference/handlebars-full),
                        or explore them using navigation on the left hand side.


                        For a thorough overview of how to use Handlebars inside
                        your templates, review the [Handlebars
                        documentation](http://handlebarsjs.com/) (Handlebars).
                      header:
                        anchor: handlebars_handlebars-js
                    - type: text
                      data: >-
                        ## Template Logic


                        With Handlebars, it’s easy to embed logic right into
                        your templates. Handlebars has built-in helpers for
                        widely used logic and iterator functions. You can find a
                        list of all built-in Handlebars helpers here.
                      header:
                        anchor: handlebars_template
                    - type: text
                      data: >-
                        ## Custom Handlebars Helpers


                        BigCommerce has extended the built-in Handlebars helpers
                        with certain custom Handlebars helpers. For details,
                        please proceed to the reference section.
                      header:
                        anchor: handlebars_custom
                    - type: text
                      data: >-
                        ## Stencil Handlebars Resources


                        For a comprehensive reference to the Stencil data
                        objects that you can manipulate via Handlebars
                        statements, please see the Stencil Object Model
                        Reference.
                      header:
                        anchor: handlebars_stencil
                    - type: text
                      data: >-
                        ## Rendering Special Characters


                        By default, Handlebars HTML-escapes values returned by a
                        Handlebars `{{ expression }}`. So, where a Handlebars
                        expression's referenced content includes special
                        characters, those characters will render literally on
                        the storefront as HTML entities.


                        In the example above, assume that the HTML referenced by
                        `{{ title }}` contains an ampersand and a "straight"
                        apostrophe. You will see the entities &amp; and &#039;
                        displayed literally on the storefront, instead of the
                        intended characters & and '. Similar display errors will
                        be triggered by apostrophes, quotation marks, primes,
                        and other extended characters.


                        The workaround is to place the Handlebars variable in
                        triple braces, like this: `{{{ title }}}`. Handlebars
                        documentation refers to this technique as a
                        "triple-stash."
                      header:
                        anchor: handlebars_rendering
              - title: Handlebars Helpers
                route:
                  path: /handlebars-helpers-reference
                data:
                  blocks: []
                  children:
                    - title: Handlebars Helpers Reference
                      route:
                        path: /handlebars-full
                      data:
                        blocks:
                          - type: html
                            data: <h1>Handlebars Helpers Reference</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li>Array Helpers</li>\n    <li>Collection Helpers</li>\n    <li>Comparison Helpers</li>\n    <li>Control-Flow Helpers</li>\n    <li>Date Helpers</li>\n    <li>HTML Helpers</li>\n    <li>Image Helpers</li>\n    <li>Inflection Helpers</li>\n\t\t<li>Injection Helpers</li>\n\t\t<li>Markdown Helpers</li>\n\t\t<li>Math Helpers</li>\n\t\t<li>Number Helpers</li>\n\t\t<li>Object Helpers</li>\n\t\t<li>Operator Helpers</li>\n\t\t<li>String Helpers</li>\n\t\t<li>URL Helpers</li>\n\t\t<li>Miscellaneous Helpers</li>\n    </ul>\n</div>"
                          - type: text
                            data: >-
                              This page describes all of the Handlebars helpers
                              supported on the Stencil framework. It includes
                              helpers that are custom to, or customized for,
                              Stencil.


                              For background information on using Handlebars
                              helpers, please see the [official Handlebars
                              documentation](http://handlebarsjs.com).
                            header: {}
                          - type: text
                            data: >
                              # <a name="array"></a> Array Helpers


                              The following helpers are available to manage
                              arrays:


                              * [Stencil Custom Array Helpers](#array_custom)

                              * [Standard Array Helpers](#array_std) 


                              ## <a name="array_custom"></a> Stencil Custom
                              Array Helpers


                              The following array helpers are custom to the
                              Stencil framework.

                              ### {{itemAt}}


                              _Block helper that returns the item at the
                              specified index._


                              #### Parameters


                              * `array` {Array}

                              * `idx` {Number}

                              * `returns` {any} `value`


                              #### Example


                              Given the array `['a', 'b', 'c']`:


                              ```handlebars

                              {{itemAt array 1}}

                              //=> 'b'

                              ```


                              ### {{join}}


                              The `join` helper is custom to Stencil. It joins
                              an array of string items, with separators. It
                              returns a string. 


                              #### Parameters


                              - `values`: {Array}

                              - `separator`: {String}

                              - `limit=<number>`: An optional limit.


                              ### {{limit}}


                              The `limit` helper is custom to Stencil. It limits
                              the number of items returned from an array
                              variable, and returns a new array.


                              #### Parameters


                              - `data`: {Array}

                              - `limit`: {Number}


                              #### {{limit}} Example 


                              Assume that `{{cart.items}}` would return 10
                              items. You could use this helper to limit that
                              behavior to only the first four items, by
                              specifying: 


                              ```

                              {{limit cart.items 4}}

                              ```


                              ### {{pluck}}


                              The `pluck` helper is custom to Stencil. For one
                              specified search key(s), it retrieves
                              corresponding values from some or all elements in
                              a specified collection. 


                              The `pluck` helper returns the retrieved values in
                              a comma-separated string. This helper's general
                              form is:


                              ```

                              {{pluck ([limit] <collection> [<limit-value>])
                              '<search-key>'}}

                              ```


                              #### Parameters


                              - `limit`, `limit-value`: Optional parameters to
                              limit the number of results returned.

                              - `collection`: The collection to search.

                              - `search-key`: The string to search for.



                              #### {{pluck}} Example 1


                              Assume that the `categories` collection contains:


                              ```

                              categories: [
                                { "id": 1, "name": "Bakeware" },
                                { "id": 2, "name": "Cookware" },
                                { "id": 3, "name": "Cutlery" }
                              ]

                              ```


                              In this case, this Handlebars statement:


                              ```

                              {{pluck (limit categories 2) 'name'}}

                              ```


                              ...would return:


                              ```

                              "Bakeware,Cookware"

                              ```


                              #### {{pluck}} Example 2


                              If the `categories` themselves each contained an
                              image object, then you could use dot notation to
                              access that image object's children:


                              ```

                              categories: [
                                { "id": 1, "name": "Bakeware", "image": { "data": "http://...", "alt": "Bakeware image"} },
                                { "id": 2, "name": "Cookware" "image": { "data": "http://...", "alt": "Cookware image"} },
                                { "id": 3, "name": "Cutlery" "image": { "data": "http://...", "alt": "Cutlery image"} }
                              ]

                              ```


                              In this case, this Handlebars statement:


                              ```

                              {{pluck (limit categories 2) 'image.data'}}

                              ```


                              ...would return a comma-separated list of image
                              URLs.



                              ## <a name="array_std"></a> Standard Array Helpers


                              The following standard array helpers are supported
                              on the Stencil framework.


                              ### <a name="after"></a> {{after}}


                              Returns all of the items in an array after the
                              specified index. Opposite of [before](#before).


                              Given the array `['a', 'b', 'c']`:


                              #### Parameters


                              * `array` {Array}: Collection.

                              * `n` {Number}: Starting index (number of items to
                              exclude).

                              * `returns` {Array}: Array exluding `n` items.


                              #### Example


                              ```handlebars

                              {{after array 1}}

                              //=> '["c"]'

                              ```


                              ### {{arrayify}}


                              Casts the given `value` to an array.


                              #### Parameters


                              * `value` {any}

                              * `returns` {Array}


                              #### Example


                              ```handlebars

                              {{arrayify "foo"}}

                              //=> '["foo"]'

                              ```


                              ### <a name="before"></a> {{before}}


                              Returns all of the items in the collection before
                              the specified count. Opposite of [after](#after).


                              Given the array `['a', 'b', 'c']`:


                              #### Parameters


                              * `array` {Array}

                              * `n` {Number}

                              * `returns` {Array}: Array excluding items after
                              the given number.


                              #### Example


                              ```handlebars

                              {{before array 2}}

                              //=> '["a", "b"]'

                              ```


                              ### {{eachIndex}}


                              #### Parameters


                              * `array` {Array}

                              * `options` {Object}

                              * `returns` {String}


                              #### Example


                              ```handlebars

                              {{#eachIndex collection}}
                                {{item}} is {{index}}
                              {{/eachIndex}}

                              ```


                              ### {{filter}}


                              Block helper that filters the given array. Renders
                              the block for values that evaluate to `true`;
                              otherwise, returns the inverse block.


                              #### Parameters


                              * `array` {Array}

                              * `value` {any}

                              * `options` {Object}

                              * `returns` {String}


                              #### Example


                              ```handlebars

                              {{#filter array "foo"}}AAA{{else}}BBB{{/filter}}

                              //=> 'BBB

                              ```


                              ### <a name="first"></a> {{first}}


                              Returns the first item, or first `n` items, of an
                              array.


                              #### Parameters


                              * `array` {Array}

                              * `n` {Number}: Number of items to return,
                              starting at `0`.

                              * `returns` {Array}


                              #### Example


                              Given the array `['a', 'b', 'c', 'd', 'e']`:


                              ```handlebars

                              {{first array 2}}

                              //=> '["a", "b"]'

                              ```


                              ### {{forEach}}


                              Iterates over each item in an array, and exposes
                              the current item in the array as context to the
                              inner block. In addition to the current array
                              item, the helper exposes the following variables
                              to the inner block:


                              * `index`

                              * `total`

                              * `isFirst`

                              * `isLast`


                              Also, `@index` is exposed as a private variable,
                              and additional private variables may be defined as
                              hash arguments.


                              #### Parameters


                              * `array` {Array}

                              * `returns` {String}


                              #### Example


                              ```js

                              var accounts = [

                              {'name': 'John', 'email': 'john@example.com'},

                              {'name': 'Malcolm', 'email':
                              'malcolm@example.com'},

                              {'name': 'David', 'email': 'david@example.com'}

                              ];


                              // example usage

                              // {{#forEach accounts}}

                              //   <a href="mailto:{{ email }}" title="Send an
                              email to {{ name }}">

                              //     {{ name }}

                              //   </a>{{#unless isLast}}, {{/unless}}

                              // {{/forEach}}

                              ```


                              ### {{inArray}}


                              Block helper that renders the block if an array
                              has the given `value`. Optionally, you can specify
                              an inverse block to render when the array does not
                              have the given value.


                              #### Parameters


                              * `array` {Array}

                              * `value` {any}

                              * `options` {Object}

                              * `returns` {String}


                              #### Example


                              Given the array `['a', 'b', 'c']`:


                              ```handlebars

                              {{#inArray array "d"}}
                                foo
                              {{else}}
                                bar
                              {{/inArray}}

                              //=> 'bar'

                              ```


                              ### {{isArray}}


                              Returns true if `value` is an es5 array.


                              #### Parameters


                              * `value` {any}: The value to test.

                              * `returns` {Boolean}


                              #### Example


                              ```handlebars

                              {{isArray "abc"}}

                              //=> 'false'

                              ```


                              ### <a name="last"></a> {{last}}


                              Returns the last item, or last `n` items, of an
                              array. Opposite of [first](#first).


                              #### Parameters


                              * `array` {Array}

                              * `n` {Number}: Number of items to return,
                              starting with the last item.

                              * `returns` {Array}


                              #### Example


                              Given the array `['a', 'b', 'c', 'd', 'e']`:


                              ```handlebars

                              {{last array 2}}

                              //=> '["d", "e"]'

                              ```


                              ### {{lengthEqual}}


                              Block helper that compares the length of the given
                              array to the number passed as the second argument.
                              If the array length is equal to the given
                              `length`, the block is returned. Otherwise, you
                              have the option of returning an inverse block.


                              #### Parameters


                              * `array` {Array}

                              * `length` {Number}

                              * `options` {Object}

                              * `returns` {String}


                              #### Example


                              Given the array `['a', 'b', 'c', 'd', 'e']`:


                              ```handlebars

                              {{#lengthEqual array
                              10}}AAA{{else}}BBB{{/lengthEqual}}

                              //=> 'BBB'

                              ```


                              ### {{map}}


                              Returns a new array, created by calling `function`
                              on each element of the given `array`.


                              #### Parameters


                              * `array` {Array}

                              * `fn` {Function}

                              * `returns` {String}


                              #### Example


                              Given an array `['a', 'b', 'c']`:


                              ```js

                              // register `double` as a helper

                              function double(str) {
                                return str + str;
                              }

                              // then used like this:

                              // {{map array double}}

                              //=> '["aa", "bb", "cc"]'

                              ```


                              ### {{some}}


                              Block helper that returns the block *if* the
                              callback returns true for some value in the given
                              array.


                              #### Parameters


                              * `array` {Array}

                              * `cb` {Function}: Callback function.

                              * {Options}: Handlebars-provided options object.

                              * `returns` {Array}


                              #### Example


                              Given the array `[1, 'b', 3]`:


                              ```handlebars

                              {{#some array isString}}
                                Render me if the array has a string.
                              {{else}}
                                Render me if it doesn't.
                              {{/some}}

                              //=> 'Render me if the array has a string.'

                              ```


                              ### {{sort}}


                              Sorts the given `array`. If an array of objects is
                              passed, you may optionally pass (as the second
                              argument) a `key` to sort on. Alternatively, you
                              may pass a sorting function as the second
                              argument.


                              #### Parameters


                              * `array` {Array}: The array to sort.

                              * `key` {String|Function}: The object key to sort
                              by, or a sorting function.


                              #### Example


                              Given an array `['b', 'a', 'c']`:



                              ```handlebars

                              {{sort array}}

                              //=> '["a", "b", "c"]'

                              ```


                              ### {{sortBy}}


                              Sorts an `array`. If an array of objects is
                              passed, you may optionally pass a `key` to sort on
                              as the second argument. You may alternatively pass
                              a sorting function as the second argument.


                              #### Parameters


                              * `array` {Array}: The array to sort.

                              * `props` {String|Function}: One or more
                              properties to sort by, or sorting functions to
                              use.


                              #### Example


                              Given an array `[{a: 'zzz'}, {a: 'aaa'}]`:


                              ```handlebars

                              {{sortBy array "a"}}

                              //=> '[{"a":"aaa"}, {"a":"zzz"}]'

                              ```


                              ### <a name="withAfter"></a> {{withAfter}}


                              Use the items in the array, _after_ the specified
                              index, as context inside a block. Opposite of
                              [withBefore](#withBefore).


                              #### Parameters


                              * `array` {Array}

                              * `idx` {Number}

                              * `options` {Object}

                              * `returns` {Array}


                              #### Example


                              Given the array `['a', 'b', 'c', 'd', 'e']`:


                              ```handlebars

                              {{#withAfter array 3}}
                                {{this}}
                              {{/withAfter}}

                              //=> "de"

                              ```


                              ### <a name="withBefore"></a> {{withBefore}}


                              Use the items in the array, _before_ the specified
                              index, as context inside a block. Opposite of
                              [withAfter](#withAfter).


                              #### Parameters


                              * `array` {Array}

                              * `idx` {Number}

                              * `options` {Object}

                              * `returns` {Array}


                              #### Example


                              Given the array `['a', 'b', 'c', 'd', 'e']`:


                              ```handlebars

                              {{#withBefore array 3}}
                                {{this}}
                              {{/withBefore}}

                              //=> 'ab'

                              ```


                              ### <a name="withFirst"></a> {{withFirst}}


                              Uses a collection's first item inside a Handlebars
                              block expression. Opposite of
                              [withLast](#withLast).


                              #### Parameters


                              * `array` {Array}

                              * `idx` {Number}

                              * `options` {Object}

                              * `returns` {String}


                              #### Example


                              Given the array `['a', 'b', 'c']`:


                              ```handlebars

                              {{#withFirst array}}
                                {{this}}
                              {{/withFirst}}

                              //=> 'a'

                              ```

                              ### <a name="withLast"></a> {{withLast}}


                              Use the last item, or `n` items, in an array as
                              context inside a block. Opposite of
                              [withFirst](#withFirst).


                              #### Parameters


                              * `array` {Array}

                              * `idx` {Number}: The starting index.

                              * `options` {Object}

                              * `returns` {String}


                              #### Example


                              Given the array `['a', 'b', 'c']`:


                              ```handlebars

                              {{#withLast array}}
                                {{this}}
                              {{/withLast}}

                              //=> 'c'

                              ```


                              ### {{withSort}}


                              Block helper that sorts a collection and exposes
                              the sorted collection as context inside the block.


                              #### Parameters


                              * `array` {Array}

                              * `prop` {String}

                              * `options` {Object}: Specify `reverse="true"` to
                              reverse the array.

                              * `returns` {String}


                              #### Example


                              Given the array `['b', 'a', 'c']`:


                              ```handlebars

                              {{#withSort array}}{{this}}{{/withSort}}

                              //=> 'abc'

                              ```


                              # <a name="collection"></a> Collection Helpers


                              The following standard helpers are available to
                              handle collections.


                              ### {{isEmpty}}


                              Block helper that returns a block *if* the given
                              collection is empty. If the collection is not
                              empty, returns the inverse block (if supplied).


                              #### Parameters


                              * `collection` {Object}

                              * `options` {Object}

                              * `returns` {String}


                              ### {{iterate}}


                              Iterates over an array or object.


                              #### Parameters


                              * `context` {Object|Array}: The collection to
                              iterate over.

                              * `options` {Object}

                              * `returns` {String}


                              ### {{length}}


                              Returns the length of the given collection. When
                              using a string literal in the template, the string
                              must be value JSON. See the example below.
                              Otherwise, pass in an array or object from the
                              context.


                              #### Parameters


                              * `value` {Array|Object|String}

                              * `returns` {Number}: The length of the value.


                              #### Example


                              ```handlebars

                              {{length '["a", "b", "c"]'}}

                              //=> 3


                              //=> myArray = ['a', 'b', 'c', 'd', 'e'];

                              {{length myArray}}

                              //=> 5


                              //=> myObject = {'a': 'a', 'b': 'b'};

                              {{length myObject}}

                              //=> 2

                              ```


                              # <a name="comparison"></a> Comparison Helpers


                              The following standard helpers are available to
                              handle comparisons.


                              ### {{and}}


                              Block helper that renders the block if *both* of
                              the given values are truthy. If you specify an
                              inverse block, it will be rendered when falsy.


                              #### Parameters


                              * `a` {any}

                              * `b` {any}

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}


                              ### {{gt}}


                              Block helper that renders a block if `a` is
                              *greater than* `b`.


                              If an inverse block is specified, it will be
                              rendered when falsy. You may optionally use the
                              `compare=""` hash argument for the second value.


                              #### Parameters


                              * `a` {String}

                              * `b` {String}

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}: Block, or inverse block if
                              specified and falsy.


                              ### {{gte}}


                              Block helper that renders a block if `a` is
                              *greater than or equal to* `b`.


                              If an inverse block is specified, it will be
                              rendered when falsy. You may optionally use the
                              `compare=""` hash argument for the second value.


                              #### Parameters


                              * `a` {String}

                              * `b` {String}

                              * `options` {Object}: Handlebars-provided options
                              object

                              * `returns` {String}: Block, or inverse block if
                              specified and falsy.


                              ### {{has}}


                              Block helper that renders a block if `value` has
                              `pattern`. If an inverse block is specified, it
                              will be rendered when falsy.


                              #### Parameters


                              * `val` {any}: The value to check.

                              * `pattern` {any}: The pattern to check for.

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}


                              ### {{eq}}


                              Block helper that renders a block if `a` is *equal
                              to* `b`. If an inverse block is specified,  it
                              will be rendered when falsy. You may optionally
                              use the `compare=""` hash argument for the second
                              value.


                              #### Parameters


                              * `a` {String}

                              * `b` {String}

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}: Block, or inverse block if
                              specified and falsy.


                              ### {{ifEven}}


                              Returns `true` if the given value is an even
                              number.


                              #### Parameters


                              * `number` {Number}

                              * `options` {Object}: Handlebars-provided options
                              object

                              * `returns` {String}: Block, or inverse block if
                              specified and falsy.


                              #### Example


                              ```handlebars

                              {{#ifEven value}}
                                render A
                              {{else}}
                                render B
                              {{/ifEven}}

                              ```


                              ### {{ifNth}}


                              Conditionally renders a block *if* dividing the
                              `a` operand by `b` yields a remainder of zero. If
                              you specify an inverse block, it will be rendered
                              when the remainder is *not* zero.


                              #### Parameters


                              * {}: {Number}

                              * {}: {Number}

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}: Block, or inverse block if
                              specified and falsy.


                              ### {{ifOdd}}


                              Block helper that renders a block if `value` is
                              *an odd number*. If an inverse block is specified,
                              it will be rendered when falsy.


                              #### Parameters


                              * `value` {Object}

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}: Block, or inverse block if
                              specified and falsy.


                              #### Example


                              ```handlebars

                              {{#ifOdd value}}
                                render A
                              {{else}}
                                render B
                              {{/ifOdd}}

                              ```


                              ### {{is}}


                              Block helper that renders a block if `a` is *equal
                              to* `b`. If an inverse block is specified, it will
                              be rendered when falsy.


                              #### Parameters


                              * `a` {any}

                              * `b` {any}

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}


                              ### {{isnt}}


                              Block helper that renders a block if `a` is *not
                              equal to* `b`. If an inverse block is specified,
                              it will be rendered when falsy.


                              #### Parameters


                              * `a` {String}

                              * `b` {String}

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}


                              ### {{lt}}


                              Block helper that renders a block if `a` is *less
                              than* `b`.


                              If an inverse block is specified, it will be
                              rendered when falsy. You may optionally use the
                              `compare=""` hash argument for the second value.


                              #### Parameters


                              * `context` {Object}

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}: Block, or inverse block if
                              specified and falsy.


                              ### {{lte}}


                              Block helper that renders a block if `a` is *less
                              than or equal to* `b`.


                              If an inverse block is specified, it will be
                              rendered when falsy. You may optionally use the
                              `compare=""` hash argument for the second value.


                              #### Parameters


                              * `a` {String}

                              * `b` {String}

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}: Block, or inverse block if
                              specified and falsy.


                              ### {{neither}}


                              Block helper that renders a block if *neither of*
                              the given values are truthy. If you specify an
                              inverse block, it will be rendered when falsy.


                              #### Parameters


                              * `a` {any}

                              * `b` {any}

                              * `options` {}: Handlebars options object.

                              * `returns` {String}: Block, or inverse block if
                              specified and falsy.


                              ### {{unlessEq}}


                              Block helper that always renders the inverse block
                              *unless `a` is equal to `b`*.


                              #### Parameters


                              * `a` {String}

                              * `b` {String}

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}: Inverse block by default, or
                              block if falsy.


                              ### {{unlessGt}}


                              Block helper that always renders the inverse block
                              *unless `a` is greater than `b`*.


                              #### Parameters


                              * `context` {Object}

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}: Inverse block by default, or
                              block if falsy.


                              ### {{unlessLt}}


                              Block helper that always renders the inverse block
                              *unless `a` is less than `b`*.


                              #### Parameters


                              * `context` {Object}

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}: Block, or inverse block if
                              specified and falsy.


                              ### {{unlessGteq}}


                              Block helper that always renders the inverse block
                              *unless `a` is greater than or equal to `b`*.


                              #### Parameters


                              * `context` {Object}

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}: Block, or inverse block if
                              specified and falsy.


                              ### {{unlessLteq}}


                              Block helper that always renders the inverse block
                              *unless `a` is less than or equal to `b`*.


                              #### Parameters


                              * `context` {Object}

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}: Block, or inverse block if
                              specified and falsy.



                              # <a name="control"></a> Control-Flow Helpers


                              The following control-flow helpers have been
                              customized for the Stencil framework:


                              * [Conditional Control Flow](#ctrl_conditional)

                              * [Loop Control Flow](#ctrl_loop)


                              Beyond the formal examples below, syntax and
                              examples for control-flow helpers are covered in
                              the official Handlebars documentation
                              [here](http://handlebarsjs.com/builtin_helpers.html).



                              ## <a name="ctrl_conditional"></a> Conditional
                              Control Flow


                              The following helpers provide control structures
                              that test for conditions, and branch accordingly.


                              ### <a name="if"></a> {{if}}


                              The `if` helper has been customized for Stencil,
                              and has the following syntax:


                              ```

                              {{#if <statement>}}
                                ... 
                              {{else if}}  /* optional else-if block */
                                ...
                              {{else}}  /* optional else block */
                                ...
                              {{/if}}

                              ```


                              The `<statement>` that the `if` helper evaluates
                              can take these forms:


                              - An object, as in: `{{#if object}}`.

                              - A comparison expression, as in: `{{#if <lvalue>
                              <operator> <rvalue>}}`.



                              When you pass only one parameter to the `if`
                              helper, it will return the following:

                              - For an array parameter, the array's length.

                              - For an empty object, a value of `false`.



                              ### {{unless}}


                              The `unless` helper is logically the opposite of
                              the [`if` helper](#if), subject to the
                              [restrictions](#unless_restrix) below. The syntax
                              for `unless` can be found in the official
                              Handlebars documentation
                              [here](http://handlebarsjs.com/builtin_helpers.html).


                              #### Formal Example


                              ```

                              {{#unless statement}}
                                 ... /* block to display/execute unless statement is true */
                              {{/unless}}

                              ```


                              #### <a name="unless_restrix"></a> Restrictions


                              Statements using `unless` can refer to: 


                              * Objects, as in: `{{#unless object}}`.


                              Unlike the `if` helper,  `unless` on the Stencil
                              framework does not support operators for
                              comparison expressions. 

                              So, for example, the following expression would
                              throw an error:


                              ```

                              {{#unless this.alt "===" "hidden"}}

                              ```


                              A workaround for this logic is to recast the
                              expression as `if`/not-equal-to. So the following
                              expression would be valid:


                              ```

                              {{#if this.alt "!==" "hidden"}}

                              ```


                              #### Stencil Example 


                              Here is a usage example from Stencil's Cornerstone
                              base theme: The `templates/pages/search.html`
                              template displays search results. In this
                              template's section that displays search
                              suggestions, an `#unless` loop determines what to
                              output for the final result:


                              ```

                              {{#each category_results}}

                              <li class="category-suggestion">
                                  {{#each this}}
                                      <a href="{{url}}">{{name}}</a>
                                      {{#unless @last}} > {{/unless}}
                                  {{/each}}
                              </li>

                              {{/each}}

                              ```


                              ### Nested if/else Statements to Test for if/and
                              Conditions


                              Handlebars does not provide an `if`/`and`
                              conditional structure. However, to test for
                              multiple conditions, you can nest `if`/`else`
                              statements, as shown in this example:


                              ```
                               <nav class="navigation">
                                    <ul>
                                      {{#each nav_items}}
                                          {{#if name '===' 'About Us'}}
                                          {{else}}
                                            {{#if name '===' 'Contact Us'}}
                                            {{else}}
                                              <li>
                                                <a class="top-level-nav-link" href="{{url}}">
                                                  {{name}}
                                                </a>
                                              </li>
                                            {{/if}}
                                          {{/if}}
                                      {{/each}}
                                    </ul>
                                  </nav>
                              ```


                              ## <a name="ctrl_loop"></a> Loop Control Flow


                              The following helpers are used to control loop
                              execution.


                              ### {{any}}


                              The `any` helper is custom to Stencil. It checks
                              whether at least one parameter evaluates to
                              `true`.  Parameters can be of different types
                              (strings, numbers, arrays, or collections).


                              #### Examples


                              Formally, the `any` helper is invoked as shown
                              here:


                              ```

                              {{#any items selected=true}} 
                                ... /* block to display if any items have selected=true */
                              {{/any}}

                              ```


                              A usage example is
                              http://cornerstone-light-demo.mybigcommerce.com/shop-all/garden,
                              a category page in Stencil's Cornerstone base
                              theme that does _not_ have faceted search turned
                              on. Shoppers will see "Shop by price" filters
                              instead of product filters. 


                              The Stencil code controlling this component
                              resides in the theme's
                              `templates/components/category/shop-by-price.html`
                              file. In this component, the `{{#any...`
                              Handlebars helper is used to determine whether a
                              shopper has selected one of the filters, and
                              whether a "reset" button needs to be displayed:


                              ```

                              {{#any shop_by_price selected=true}}
                                  <li class="navList-item">
                                      <a href="{{category_url}}" class="navList-action">
                                          {{lang 'category.reset'}}
                                      </a>
                                  </li>
                              {{/any}}

                              ```


                              ### {{all}}


                              The `all` helper is custom to Stencil. It checks
                              whether _all_ parameters evaluate to `true`.
                              Parameters can be of different types (strings,
                              numbers, arrays, or collections).


                              #### Example


                              ```

                              {{#all items theme_settings.optionA
                              theme_settings.optionB}}
                                ... /* block to display, if all items evaluate to true */
                              {{/all}}

                              ```


                              ### contains Helper


                              The `contains` helper is custom to Stencil. It
                              checks whether the second parameter is included in
                              the first parameter (typically a collection).


                              #### Example


                              ```

                              {{#contains fonts "Roboto"}}
                                ... /* block to display, if any items contain "Roboto" */
                              {{/contains}}

                              ```


                              ### {{each}}


                              The syntax for the `each` helper can be found in
                              the official Handlebars documentation
                              [here](http://handlebarsjs.com/builtin_helpers.html).


                              #### Example


                              ```

                              {{#each array | object}}
                                ...
                              {{else}} /* optional block to execute if the the
                              list is empty */
                                ...
                              {{/each}}

                              ```


                              #### Notes


                              - Within an each block, use `{{this}}` to
                              reference the current item.

                              - Within an each block, use `{{@index}}` to
                              reference the current item's index number.

                              - When iterating through objects, `{{@key}}`
                              returns the current key name.

                              - `{{each}}` loops can be nested.



                              ### {{for}}


                              The `for` helper is a custom Stencil helper. In
                              particular, this helper is limited to 100
                              iterations, in order to protect against infinite
                              loops. 


                              The `for` helper has the following syntax, where
                              parameters `<from>` and `<to>` are numbers, and
                              `<context>` is an object:


                              ```

                              {{#for <from> <to> <context>}}
                                ...
                              {{/for}}

                              ```



                              # <a name="date"></a> Date Helpers


                              The following standard Handlebars helper handles
                              dates.


                              ### {{moment}}


                              Exposes `helper-date` as `moment`.



                              # <a name="html"></a> HTML Helpers


                              The following standard helpers are available to
                              handle HTML content.


                              ### {{ellipsis}}


                              Truncates a string to the specified `length`, and
                              appends an elipsis, `…`.


                              #### Parameters


                              * `str` {String}

                              * `length` {Number}: The desired length of the
                              returned string.

                              * `returns` {String}: The truncated string.


                              #### Example


                              ```js

                              {{ellipsis "<span>foo bar baz</span>", 7}}

                              //=> 'foo bar…'

                              ```


                              ### {{sanitize}}


                              Strips HTML tags from a string, so that only the
                              text nodes are preserved.


                              #### Parameters


                              * `str` {String}: The string of HTML to sanitize.

                              * `returns` {String}


                              #### Example


                              ```js

                              {{sanitize "<span>foo</span>"}}

                              //=> 'foo'

                              ```


                              ### {{ul}}


                              Block helper for creating unordered lists
                              (`<ul></ul>`).


                              #### Parameters


                              * `context` {Object}

                              * `options` {Object}

                              * `returns` {String}


                              ### {{ol}}


                              Block helper for creating ordered lists 
                              (`<ol></ol>`).


                              #### Parameters


                              * `context` {Object}

                              * `options` {Object}

                              * `returns` {String}


                              ### {{thumbnailImage}}


                              Returns a `<figure>` with a thumbnail linked to a
                              full picture.


                              #### Parameters


                              * `context` {Object}: Object with
                              values/attributes to add to the generated
                              elements:

                              * `context.alt` {String}

                              * `context.src` {String}

                              * `context.width` {Number}

                              * `context.height` {Number}

                              * `returns` {String}: HTML `<figure>` element with
                              image and optional caption/link.



                              # <a name="image"></a> Image Helpers


                              The Stencil framework provides the following
                              custom helper to manage images.


                              ## {{getImage}}


                              The `getImage` helper is custom to Stencil. It
                              returns the URL for an image of the specified
                              size. Values for the size parameter are defined in
                              the `config.json` file’s `settings` section.


                              This helper's parameters are:


                              - `stencilImage`: a StencilImage.

                              - `size`: a string.

                              - `defaultImage` (optional): a string. 


                              Here is an example: 


                              ```

                              {{getImage image "thumbnail"}}

                              ``` 


                              You can use the optional `defaultImage` parameter
                              to specify an image that will be displayed in
                              cases where the passed `stencilImage` value is
                              null.



                              # <a name="inflection"></a> Inflection Helpers


                              The following standard helpers are available to
                              transform strings.


                              ### {{inflect}}


                              Handles singular/plural forms.


                              #### Parameters


                              * `count` {Number}

                              * `singular` {String}: The singular form

                              * `plural` {String}: The plural form

                              * `include` {String}

                              * `returns` {String}


                              ### {{ordinalize}}


                              Returns an ordinalized number (as a string).


                              #### Parameters


                              * `val` {String}: The value to ordinalize.

                              * `returns` {String}: The ordinalized number.


                              #### Example


                              ```handlebars

                              {{ordinalize 1}}

                              //=> '1st'

                              {{ordinalize 21}}

                              //=> '21st'

                              {{ordinalize 29}}

                              //=> '29th'

                              {{ordinalize 22}}

                              //=> '22nd'

                              ```


                              # <a name="injection"></a> Injection Helpers


                              The Stencil framework provides the following
                              custom helpers to insert various resources into a
                              page context:


                              * [{{cdn}}](#cdn)

                              * [{{getFontsCollection}}](#fonts)

                              * [{{inject}} and {{jsContext}}](#inject)

                              * [{{stylesheet}}](#stylesheet)


                              ### <a name="cdn"></a> {{cdn}}


                              The `cdn` helper is custom to Stencil. It is a URL
                              transformer for content delivery networks.


                              When you reference static assets that you have
                              locally staged outside your `<theme-name>`
                              directory and uploaded using WebDAV, place the
                              `webdav:` prefix before each corresponding
                              `assetPath` parameter. For example, a link like:


                              ```

                              <img src="{{cdn "webdav:img/image.jpg"}}">

                              ```


                              ...will be transformed to a result like:


                              ```

                              <img
                              src="https://cdn.bcapp/3dsf74g/content/img/image.jpg">

                              ```


                              The presumed WebDAV root directory is `/content/`.
                              (So, in this example, the `image.jpg` file has
                              been uploaded to the WebDAV `/content/`
                              directory.) The presumed local directory is
                              `<theme-name>/assets/`, so you can omit that path
                              when referencing its contained files or
                              subdirectories.



                              #### <a name="cdn-custom"></a> CDN Custom
                              Endpoints


                              You can define custom CDN endpoints to use with
                              the `cdn` Handlebars helper. This facilitates
                              including large, high-resolution image assets in
                              themes, without exceeding BigCommerce's [50 MB
                              limit](docs/bundling-and-submitting-a-theme#ship-zip-small)
                              when bundling the theme for upload to
                              BigCommerce. 


                              You could use a local version of the image in
                              development, and a version on a CDN (for exampe,
                              Imgix) in production. To do so, define custom CDN
                              endpoints in your theme's [`config.json`
                              file](/docs/configjson-reference#config-theme-settings),
                              as highlighted in this example:


                              ```

                              {
                                "name": "Cornerstone",
                                "version": "1.3.5",
                                "settings": {
                                  "homepage_new_products_count": 12,
                                  "homepage_featured_products_count": 8,
                                  "cdn": {
                                    "customcdn": "https://bigcommerce.customcdn.net"
                                        }
                                   }
                              }

                               
                              ```


                              After defining an endpoint, you can use the short
                              name in the same way as you would use a `webdav:`
                              abbreviation:


                              ```

                              <img src="{{cdn "customcdn:img/image.jpg"}}" />

                              ```


                              In local development, that helper would return:


                              <pre>&lt;img
                              src="<b>/assets/cdn/</b>customcdn/img/image.jpg"
                              /&gt;

                              </pre>


                              Whereas in production, it would return:


                              ```

                              <img
                              src="https://bigcommerce.customcdn.net/img/image.jpg"
                              />

                              ```

                              As highlighted above, the helper is configured to
                              rewrite *local* URLs to a
                              `<theme-name>/assets/cdn/` subfolder. The `stencil
                              bundle` command will exclude this local
                              `assets/cdn/` subfolder from the bundle that it
                              creates. This filtering circumvents the 50 MB size
                              limit on the resulting .zip file.



                              ### <a name="fonts"></a> {{getFontsCollection}}


                              The `getFontsCollection` helper is custom to
                              Stencil. It returns a link tag that loads all
                              selected font collections. It takes no parameters.



                              ### <a name="inject"></a> {{inject}} and
                              {{jsContext}}


                              Occasionally, your theme's client-side application
                              code might need to incorporate dynamic data from
                              the template context. Stencil provides two custom
                              Handlebars helpers to help you achieve this:
                              `inject`  and `jsContext`.


                              #### About the {{inject}} Helper


                              The `inject` helper collects data definitions for
                              injection into the `jsContext` variable. It
                              composes a JSON object containing a subset of the
                              template context to be sent to the browser.
                              Parameters of the `inject` helper are:


                              - `key`: a string.

                              - `value`: multiple types supported. 


                              An `inject` call takes this form:


                              ```

                              {{inject "stringBasedKey" contextValue}}

                              ```


                              #### About the {{jsContext}} Helper


                              The `jsContext` helper takes no parameters; it
                              simply returns a JSON object containing all data
                              collected by the `inject` helper. To retrieve the
                              parsable JSON object, just call `{{jsContext}}`
                              after all of the `{{inject}}` calls.



                              #### {{inject}} + {{jsContext}} Example 1


                              To set up the product name in your client-side
                              app, you can do the following, if you are in the
                              context of a product:


                              ```

                              {{inject "myProductName" product.title}}


                              <script>

                              // Note the lack of quotes around the jsContext
                              handlebars helper, it becomes a string
                              automatically.

                              var jsContext = JSON.parse({{jsContext}}); 


                              // jsContext would output "{\"myProductName\":
                              \"Sample Product\"}" which can feed directly into 

                              your JavaScript.


                              console.log(jsContext.myProductName); // Will
                              output: Sample Product

                              </script>

                              ```


                              ##### Notes on Example 1


                              You can compose your JSON object across multiple
                              pages to create a different set of client-side
                              data, depending on the currently loaded template
                              context.


                              The Stencil theme makes the `jsContext` available
                              on the active page scoped. It also makes it
                              available on the global `PageManager` objects, as
                              `this.context`.


                              #### {{inject}} Example 2


                              The following code uses `inject` to add all
                              product IDs into JavaScript on category pages. It
                              resides in a theme's
                              `<theme-name>/templates/pages/category.html`
                              template. Note the two `inject` calls directly
                              under the front matter:


                              ```

                              ---

                              category:
                                  shop_by_price: true
                                  products:
                                      limit: {{theme_settings.categorypage_products_per_page}}
                              ---

                              {{inject "categoryProductsPerPage"
                              theme_settings.categorypage_products_per_page}}

                              {{inject "productIds" (pluck category.products
                              'id')}}

                              {{#partial "head"}}
                                  {{#if pagination.category.previous}}
                                      <link rel="prev" href="{{pagination.category.previous}}">
                                  {{/if}}
                                  {{#if pagination.category.next}}
                                      <link rel="next" href="{{pagination.category.next}}">
                                  {{/if}}
                              {{/partial}}


                              {{#partial "page"}}


                              {{> components/common/breadcrumbs
                              breadcrumbs=breadcrumbs}}

                              {{#if category.image}}
                                  <img src="{{getImage category.image 'zoom_size'}}">
                              {{/if}}

                              <h1 class="page-heading">{{category.name}}</h1>

                              {{{category.description}}}

                              {{{snippet 'categories'}}}

                              <div class="page">
                                  <aside class="page-sidebar" id="faceted-search-container">
                                      {{> components/category/sidebar}}
                                  </aside>

                                  <main class="page-content" id="product-listing-container">
                                      {{#if category.products}}
                                          {{> components/category/product-listing}}
                                      {{else}}
                                          <p>{{lang 'categories.no_products'}}</p>
                                      {{/if}}
                                  </main>
                              </div>


                              {{/partial}}

                              {{> layout/base}}

                              ```


                              ### <a name="stylesheet"></a> {{stylesheet}}


                              The `stylesheet` helper is custom to Stencil. It
                              renders a link tag to insert a stylesheet into
                              your theme. (This is required if you want Theme
                              Editor to rewrite the stylesheet file when a
                              merchant customizes their theme.) This helper
                              returns an HTML string.


                              #### Parameters


                              - path: String containing the path to the theme's
                              CSS stylesheet file.

                              - Other parameters are optional, appended in the
                              form: `key="value"`.


                              #### Example


                              ```

                              {{{stylesheet "assets/css/style.css"
                              class="myStylesheet"}}}

                              ```



                              # <a name="markdown"></a> Markdown Helpers


                              The following standard helper is available to
                              convert markdown.


                              ### {{markdown}}


                              Block helper that converts a string of inline
                              markdown to HTML.


                              #### Parameters


                              * `context` {Object}

                              * `options` {Object}

                              * `returns` {String}


                              #### Example


                              ```html

                              {{#markdown}}

                              # Foo

                              {{/markdown}}

                              //=> <h1>Foo</h1>

                              ```


                              # <a name="math"></a> Math Helpers


                              The following standard helpers are available to
                              handle mathematical operations.



                              ### {{add}}


                              Returns the sum of `a` plus `b`.


                              #### Parameters


                              * `a` {Number}

                              * `b` {Number}


                              ### {{subtract}}


                              Return the differnece of `a` minus `b`.


                              #### Parameters


                              * `a` {Number}

                              * `b` {Number}


                              ### {{divide}}


                              Divides `a` by `b`.


                              #### Parameters


                              * `a` {Number}: numerator

                              * `b` {Number}: denominator


                              ### {{multiply}}


                              Multiplies `a` by `b`.


                              #### Parameters


                              * `a` {Number}: factor

                              * `b` {Number}: multiplier


                              ### {{floor}}


                              Gets the `Math.floor()` of the given value.


                              #### Parameters


                              * `value` {Number}


                              ### {{ceil}}


                              Gets the `Math.ceil()` [ceiling] of the given
                              value.


                              #### Parameters


                              * `value` {Number}


                              ### {{round}}


                              Rounds the given value.


                              #### Parameters


                              * `value` {Number}


                              ### {{sum}}


                              Returns the sum of all numbers in the given array.


                              #### Parameters


                              * `array` {Array}: Array of numbers to add up.

                              * `returns` {Number}


                              #### Example


                              ```handlebars

                              {{sum "[1, 2, 3, 4, 5]"}}

                              //=> '15'

                              ```


                              ### {{avg}}


                              Returns the average of all numbers in the given
                              array.


                              #### Parameters


                              * `array` {Array}: Array of numbers to add up and
                              average.

                              * `returns` {Number}


                              #### Example


                              ```handlebars

                              {{avg "[1, 2, 3, 4, 5]"}}

                              //=> '3'

                              ```


                              # <a name="number"></a> Number Helpers


                              The following standard helpers are available to
                              handle and transform numbers.


                              ### {{addCommas}}


                              Adds commas to numbers.


                              #### Parameters


                              * `num` {Number}

                              * `returns` {Number}


                              ### {{phoneNumber}}


                              Converts a string or number to a formatted phone
                              number.


                              #### Parameters


                              * `num` {Number|String}: The phone number to
                              format, e.g., `8005551212`

                              * `returns` {Number}: The formatted phone number:
                              `(800) 555-1212`


                              ### {{random}}


                              Generates a random number between two values.


                              #### Parameters


                              * `min` {Number}

                              * `max` {Number}

                              * `returns` {String}


                              ### {{toAbbr}}


                              Abbreviates numbers to the given number of
                              `precision`. This is for general numbers, not size
                              in bytes.


                              #### Parameters


                              * `number` {Number}

                              * `precision` {Number}

                              * `returns` {String}


                              ### {{toExponential}}


                              Returns a string, representing the given number in
                              exponential notation.


                              #### Parameters


                              * `number` {Number}

                              * `fractionDigits` {Number}: Optional. An integer
                              specifying the number of digits to use after the
                              decimal point. Defaults to as many digits as
                              necessary to specify the number.

                              * `returns` {Number}


                              #### Example


                              ```js

                              {{toExponential number digits}};

                              ```


                              ### {{toFixed}}


                              Formats the given number, using fixed-point
                              notation.


                              #### Parameters


                              * `number` {Number}

                              * `digits` {Number}: Optional. The number of
                              digits to use after the decimal point. This can be
                              a value between 0 and 20, inclusive, and
                              implementations may optionally support a larger
                              range of values. If this argument is omitted, it
                              is treated as 0.

                              * `returns` {Number}


                              ### {{toFloat}}


                              #### Parameters


                              * `number` {Number}

                              * `returns` {Number}


                              ### {{toInt}}


                              #### Parameters


                              * `number` {Number}

                              * `returns` {Number}


                              ### {{toPrecision}}


                              #### Parameters


                              * `number` {Number}

                              * `precision` {Number}: Optional. The number of
                              significant digits.

                              * `returns` {Number}



                              # <a name="object"></a> Object Helpers


                              The following standard helpers are available to
                              handle objects.


                              ### {{extend}}


                              Extends the context with the properties of other
                              objects. A shallow merge is performed to avoid
                              mutating the context.


                              #### Parameters


                              * `objects` {Object}: One or more objects to
                              extend.

                              * `returns` {Object}


                              ### {{forIn}}


                              Block helper that iterates over the properties of
                              an object, exposing each key and value on the
                              context.


                              #### Parameters


                              * `context` {Object}

                              * `options` {Object}

                              * `returns` {String}


                              ### {{forOwn}}


                              Block helper that iterates over the *own*
                              properties of an object, exposing each key and
                              value on the context.


                              #### Parameters


                              * `obj` {Object}: The object to iterate over.

                              * `options` {Object}

                              * `returns` {String}


                              ### {{toPath}}


                              Takes arguments and, if they are string or number,
                              converts them to a dot-delineated object property
                              path.


                              #### Parameters


                              * `prop` {String|Number}: The property segments to
                              assemble (can be multiple).

                              * `returns` {String}


                              ### {{get}}


                              Uses property paths (`a.b.c`) to get a value or
                              nested value from the context. Works as a regular
                              helper or block helper.


                              #### Parameters


                              * `prop` {String}: The property to get, optionally
                              using dot notation for nested properties.

                              * `context` {Object}: The context object.

                              * `options` {Object}: The Handlebars options
                              object, if used as a block helper.

                              * `returns` {String}


                              ### {{getObject}}


                              Uses property paths (`a.b.c`) to get an object
                              from the context. Unlike the `get` helper, this
                              helper will return the actual object, including
                              the given property key. Also, this helper does not
                              work as a block helper.


                              #### Parameters


                              * `prop` {String}: The property to get, optionally
                              using dot notation for nested properties.

                              * `context` {Object}: The context object.

                              * `returns` {String}


                              ### {{hasOwn}}


                              Returns true if `key` is an own, enumerable
                              property of the given `context` object.


                              #### Parameters


                              * `key` {String}

                              * `context` {Object}: The context object.

                              * `returns` {Boolean}


                              #### Example


                              ```handlebars

                              {{hasOwn context key}}

                              ```


                              ### {{isObject}}


                              Returns true if `value` is an object.


                              #### Parameters


                              * `value` {String}

                              * `returns` {Boolean}


                              #### Example


                              ```handlebars

                              {{isObject "foo"}}

                              //=> false

                              ```


                              ### {{merge}}


                              Deeply merges the properties of the given
                              `objects` with the context object.


                              #### Parameters


                              * `object` {Object}: The target object. Pass an
                              empty object to shallow-clone.

                              * `objects` {Object}

                              * `returns` {Object}


                              ### {{JSONparse}}


                              Block helper that parses a string using
                              `JSON.parse`, then passes the parsed object to the
                              block as context.


                              #### Parameters


                              * `string` {String}: The string to parse.

                              * `options` {Object}: Handlebars options object.


                              ### {{JSONstringify}}


                              Stringifies an object using `JSON.stringify`.


                              #### Parameters


                              * `obj` {Object}: Object to stringify.

                              * `returns` {String}



                              # <a name="operator"></a> Operator Helpers


                              The Stencil framework supports the following
                              operator helpers:


                              [Comparison Operators](#op_comparison)

                              [Logical {{or}} Operator](#op_logical)

                              [{{typeof}} Operator](#op_type)


                              ## <a name="op_comparison"></a> Comparison
                              Operators


                              The following helpers are available to handle
                              comparisons.


                              | Helper | Definition |

                              |--|--|

                              |`==`| equal to |

                              |`===`| equal to and equal type |

                              |`!=`| not equal |

                              |`<`| less than |

                              |`>`| greater than |

                              |`<=`| less than or equal to |

                              |`>=`| greater than or equal to |


                              ### Equal to and Equal Type Example


                              To compare a string, use the `===` operator, as in
                              this example from
                              `templates/components/common/share.html`: 


                              ```
                                {{#if service '===' 'facebook'}}
                                  <svg>
                                    <use xlink:href="#icon-facebook"/>
                                  </svg>
                                {{/if}}
                              ```


                              ### Not Equal or Not Equal Type Example


                              To improvise a `!==` (not equal or not equal type)
                              comparison operator in Handlebars, you can use an
                              [if](#if)/else structure as shown in this example:


                              ```
                                <nav class="navigation">
                                    <ul>
                                      {{#each nav_items}}
                                          {{#if name '===' 'About Us'}}
                                          {{else}}
                                            <li>
                                              <a class="top-level-nav-link" href="{{url}}">
                                                {{name}}
                                              </a>
                                            </li>
                                          {{/if}}
                                      {{/each}}
                                    </ul>
                                  </nav>
                              ```


                              ## <a name="op_logical"></a> Logical {{or}}
                              Operator


                              The `or` operator has been customized for Stencil.
                              It checks whether at least one of its parameters
                              evaluates to true, and has the following syntax:


                              ```

                              {{#or 1 0 0 0 0 0 0}} 
                                ... /* execute this block if OR evaluates to true */
                              {{/or}}

                              ```


                              ### Example


                              Here is a usage example from Stencil's Cornerstone
                              base theme, where it displays the cart's contents.
                              The `templates/components/cart/content.html`
                              template uses the `or` operator to determine
                              whether an item contains either product options
                              _or_ configurable fields. If at least one
                              condition is true, the template displays an edit
                              link for the item:


                              ```

                              {{#or options configurable_fields}}
                                  <a href="#" data-item-edit="{{id}}">{{lang 'cart.checkout.change'}}</a>
                              {{/or}}

                              ```


                              ### Parameters 


                              The `or` operator's parameters are one or more
                              strings, numbers, arrays, or collections.
                              Parameters can be of mixed types. 



                              ## <a name="op_type"></a> {{typeof}} Operator


                              The `typeof` operator returns the JavaScript type
                              of a variable, such as:


                              - string

                              - number

                              - boolean

                              - object


                              By design, an array will return a `typeof` value
                              of `object`.


                              ### Example


                              ```

                              <script>
                                  if (typeof(addthis) === "object") {
                                      addthis.toolbox('.addthis_toolbox');
                                  }
                              </script>

                              ```



                              # <a name="string"></a> String Helpers


                              The following helpers are available to manipulate
                              strings:


                              * [Stencil Custom String Helpers](#string_custom)

                              * [Standard String Helpers](#string_std)



                              ## <a name="string_custom"></a> Stencil Custom
                              String Helpers


                              The following string helpers are custom to the
                              Stencil framework.


                              ### <a name="block-helper"></a> {{block}} </span>


                              The `block` string helper is custom to Stencil. It
                              defines a block of content, which can be
                              overwritten by the [partial](#partial-helper)
                              helper.


                              ### {{concat}}


                              The `concat` helper is custom to Stencil. It
                              concatenates two string objects from the page's
                              context, which are passed as parameters. It
                              returns a new string object.


                              #### Example


                              ```

                              {{concat breadcrumbs.[0].name
                              breadcrumbs.[0].url}}

                              ```


                              ### {{dynamicComponent}}


                              The `dynamicComponent` string helper is custom to
                              Stencil. It inserts a dynamic partial from within
                              the path that is supplied as its parameter.



                              ### {{json}}


                              The `json` string helper is custom to Stencil. You
                              can use this helper to convert a JavaScript string
                              object (from the page's context) into a JSON
                              string object.



                              ### {{lang}}


                              The `lang` string helper is custom to Stencil. It
                              maps keys to translation files, based on the
                              locale indicated by the visitor’s browser. Its
                              parameters are the following keys:


                              - `translationKey`: a string.

                              - `options`: key-value pairs.



                              ### {{nl2br}}


                              The `nl2br` helper is custom to Stencil. You can
                              call this helper on a string object from the
                              page's context, to convert its contained newline
                              characters (`\r\n`, `\n\r`, `\r`, `\n`) to `<br>`
                              tags. The `nl2br` helper returns a new string
                              object.


                              #### Example


                              This Handlebars statement:


                              ```

                              {{nl2br settings.address}}

                              ```


                              ...will take this example string:


                              ```

                              "settings": {
                                "address": "\r\n685 Market St\r\nSan Francisco\r\n94105\r\nCA\r\n"
                              }

                              ```


                              ...and return


                              ```

                              "<br>685 Market St<br>San
                              Francisco<br>94105<br>CA<br>"

                              ```


                              ### <a name="partial-helper"></a> {{partial}}


                              The `partial` string helper is custom to Stencil.
                              It overrides block content defined by the
                              [block](#block-helper) helper.



                              ### {{replace}}


                              The `replace` string helper is custom to Stencil.
                              It searches for the first parameter within the
                              second parameter and, if it finds it, replaces the
                              first parameter with the contents of the specified
                              Handlebars block.


                              For example, the following code would search for
                              the string `needle` within the scope defined by
                              `haystack`. If found, it would replace that string
                              with the Handlebars block defined by
                              `<context...replacement>`:


                              ```

                              {{#replace "needle" haystack}}
                                {{<context to use as a replacement>}}
                              {{/replace}}

                              ```


                              ### {{toLowerCase}}


                              The `toLowerCase` helper is custom to Stencil. Use
                              this helper to return a copy of a string object,
                              in all-lowercase. The helper returns a new string
                              object.


                              #### Example


                              This Handlebars statement:


                              ```

                              {{toLowerCase head.title}}

                              ```


                              ...will take this example string:


                              ```

                              "head": {
                                "title": "This is my TEST Store"
                              }

                              ```


                              ...and return:


                              ```

                              "this is my test store"

                              ```



                              ## <a name="string_std"></a> Standard String
                              Helpers


                              The following standard string helpers are
                              supported on the Stencil framework.


                              ### {{camelcase}}


                              camelCases the characters in the given `string`.


                              #### Parameters


                              * `string` {String}: The string to camelcase.

                              * `returns` {String}


                              #### Example


                              ```js

                              {{camelcase "foo bar baz"}};

                              //=> 'fooBarBaz'

                              ```


                              ### {{capitalize}}


                              Capitalizes the first word in a sentence.


                              #### Parameters


                              * `str` {String}

                              * `returns` {String}


                              #### Example


                              ```handlebars

                              {{capitalize "foo bar baz"}}

                              //=> "Foo bar baz"

                              ```


                              ### {{capitalizeAll}}


                              Capitalizes all words in a string.


                              #### Parameters


                              * `str` {String}

                              * `returns` {String}


                              #### Example


                              ```handlebars

                              {{capitalizeAll "foo bar baz"}}

                              //=> "Foo Bar Baz"

                              ```


                              ### {{center}}


                              Centers a string, using non-breaking spaces.


                              #### Parameters


                              * `str` {String}

                              * `spaces` {String}

                              * `returns` {String}


                              ### {{chop}}


                              Like `trim`, but removes both extraneous
                              whitespace *and non-word characters* from the
                              beginning and end of a string.


                              #### Parameters


                              * `string` {String}: The string to chop.

                              * `returns` {String}


                              #### Example


                              ```js

                              {{chop "_ABC_"}}

                              //=> 'ABC'


                              {{chop "-ABC-"}}

                              //=> 'ABC'


                              {{chop " ABC "}}

                              //=> 'ABC'

                              ```


                              ### {{dashcase}}


                              dash-cases the characters in `string`. Replaces
                              non-word characters and periods with hyphens.


                              #### Parameters


                              * `string` {String}

                              * `returns` {String}


                              #### Example


                              ```js

                              {{dashcase "a-b-c d_e"}}

                              //=> 'a-b-c-d-e'

                              ```


                              ### {{dotcase}}


                              dot.cases the characters in `string`.


                              #### Parameters


                              * `string` {String}

                              * `returns` {String}


                              #### Example


                              ```js

                              {{dotcase "a-b-c d_e"}}

                              //=> 'a.b.c.d.e'

                              ```


                              ### {{hyphenate}}


                              Replaces spaces in a string with hyphens.


                              #### Parameters


                              * `str` {String}

                              * `returns` {String}


                              #### Example


                              ```handlebars

                              {{hyphenate "foo bar baz qux"}}

                              //=> "foo-bar-baz-qux"

                              ```


                              ### {{isString}}


                              Returns true if `value` is a string.


                              #### Parameters


                              * `value` {String}

                              * `returns` {Boolean}


                              #### Example


                              ```handlebars

                              {{isString "foo"}}

                              //=> 'true'

                              ```


                              ### {{lowercase}}


                              Lowercases all characters in the given string.


                              #### Parameters


                              * `str` {String}

                              * `returns` {String}


                              #### Example


                              ```handlebars

                              {{lowercase "Foo BAR baZ"}}

                              //=> 'foo bar baz'

                              ```


                              ### {{occurrences}}


                              Returns the number of occurrences of `substring`
                              within the given `string`.


                              #### Parameters


                              * `str` {String}

                              * `substring` {String}

                              * `returns` {Number}: Number of occurrences.


                              #### Example


                              ```handlebars

                              {{occurrences "foo bar foo bar baz" "foo"}}

                              //=> 2

                              ```


                              ### {{pascalcase}}


                              PascalCases the characters in `string`.


                              #### Parameters


                              * `string` {String}

                              * `returns` {String}


                              #### Example


                              ```js

                              {{pascalcase "foo bar baz"}}

                              //=> 'FooBarBaz'

                              ```


                              ### {{pathcase}}


                              path/cases the characters in `string`.


                              #### Parameters


                              * `string` {String}

                              * `returns` {String}


                              #### Example


                              ```js

                              {{pathcase "a-b-c d_e"}}

                              //=> 'a/b/c/d/e'

                              ```


                              ### {{plusify}}


                              Replaces spaces in the given string with pluses.


                              #### Parameters


                              * `str` {String}: The input string

                              * `returns` {String}: Input string with spaces
                              replaced by plus signs


                              #### Example


                              ```handlebars

                              {{plusify "foo bar baz"}}

                              //=> 'foo+bar+baz'

                              ```


                              ### {{reverse}}


                              Reverses a string.


                              #### Parameters


                              * `str` {String}

                              * `returns` {String}


                              #### Example


                              ```handlebars

                              {{reverse "abcde"}}

                              //=> 'edcba'

                              ```


                              ### {{sentence}}


                              Sentence-cases the given string.


                              #### Parameters


                              * `str` {String}

                              * `returns` {String}


                              #### Example


                              ```handlebars

                              {{sentence "hello world. goodbye world."}}

                              //=> 'Hello world. Goodbye world.'

                              ```


                              ### {{snakecase}}


                              snake_cases the characters in the given `string`.


                              #### Parameters


                              * `string` {String}

                              * `returns` {String}


                              #### Example


                              ```js

                              {{snakecase "a-b-c d_e"}}

                              //=> 'a_b_c_d_e'

                              ```


                              ### {{split}}


                              Splits `string` at the given `character`.


                              #### Parameters


                              * `string` {String}: The string to split.

                              * `returns` {String} `character`: Default is `,`


                              #### Example


                              ```js

                              {{split "a,b,c" ","}}

                              //=> ['a', 'b', 'c']

                              ```


                              ### {{startsWith}}


                              Tests whether a string begins with the given
                              prefix.


                              #### Parameters


                              * `prefix` {String}

                              * `testString` {String}

                              * `options` {String}

                              * `returns` {String}


                              #### Example


                              ```handlebars

                              {{#startsWith "Goodbye" "Hello, world!"}}
                                Whoops
                              {{else}}
                                Bro, do you even hello world?
                              {{/startsWith}}

                              ```

                              ### {{titleize}}


                              Title-cases the given string.


                              #### Parameters


                              * `str` {String}

                              * `returns` {String}


                              #### Example


                              ```handlebars

                              {{titleize "this is title case"}}

                              //=> 'This Is Title Case'

                              ```


                              ### {{trim}}


                              Removes extraneous whitespace from the beginning
                              and end of a string.


                              #### Parameters


                              * `string` {String}: The string to trim.

                              * `returns` {String}


                              #### Example


                              ```js

                              {{trim " ABC "}}

                              //=> 'ABC'

                              ```


                              ### {{uppercase}}


                              Uppercases all of the characters in the given
                              string. If used as a block helper, it will
                              uppercase the entire block. This helper

                              does not support inverse blocks.


                              #### Parameters


                              * `str` {String}: The string to uppercase.

                              * `options` {Object}: Handlebars options object.

                              * `returns` {String}



                              # <a name="url"></a> URL Helpers


                              The following standard helpers are available to
                              transform URLs.



                              ### {{encodeURI}}


                              Encodes a Uniform Resource Identifier (URI)
                              component, by replacing each instance of certain
                              characters by one, two, three, or four escape
                              sequences that represent the UTF-8 encoding of the
                              character.


                              #### Parameters


                              * `str` {String}: The un-encoded string.

                              * `returns` {String}: The encoded string.


                              ### {{decodeURI}}


                              Decodes a Uniform Resource Identifier (URI)
                              component.


                              #### Parameters


                              * `str` {String}

                              * `returns` {String}


                              ### {{urlResolve}}


                              Takes a base URL, and an href URL, and resolves
                              them as a browser would for an anchor tag.


                              #### Parameters


                              * `base` {String}

                              * `href` {String}

                              * `returns` {String}


                              ### {{urlParse}}


                              Parses a `url` string into an object.


                              #### Parameters


                              * `str` {String}: URL string.

                              * `returns` {String}: Returns stringified JSON.


                              ### {{stripQuerystring}}


                              Strips the query string from a `url`.


                              #### Parameters


                              * `url` {String}

                              * `returns` {String}: The URL without the
                              queryString.


                              ### {{stripProtocol}}


                              Strips the protocol from a `url`.


                              Useful for displaying media that might have an
                              `http` protocol on secure connections. Will change
                              `http://foo.bar` to `//foo.bar`


                              #### Parameters


                              * `str` {String}

                              * `returns` {String}: The URL with the `http`
                              protocol stripped.



                              # <a name="misc"></a> Miscellaneous Helpers


                              The following standard helpers are also supported
                              on the Stencil framework.



                              ### {{default}}


                              Returns the first value, if that value is defined;
                              otherwise, returns the "default" value.


                              #### Parameters


                              * `value` {any}

                              * `defaultValue` {any}

                              * `returns` {String}


                              ### {{option}}


                              Given the context `{options: {a: {b: {c:
                              'ddd'}}}}`, returns the given value of `prop` from
                              `this.options`.


                              #### Parameters


                              * `prop` {String}

                              * `returns` {any}


                              #### Example


                              ```handlebars

                              {{option "a.b.c"}}

                              <!-- results => `ddd` -->

                              ```


                              ### {{noop}}


                              Block helper that renders the block without taking
                              any arguments.


                              #### Parameters


                              * `options` {Object}

                              * `returns` {String}


                              ### {{withHash}}


                              Block helper that builds the context for the block
                              from the options hash.


                              #### Parameters


                              * `options` {Object}: Handlebars-provided options
                              object.
                    - title: Array Helpers
                      route:
                        path: /array-helpers
                      data:
                        children:
                          - title: Standard Array Helpers
                            route:
                              path: /standard-array-helpers
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Standard Array Helpers</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_after\">{{after}}</a></li>\n    <li><a href=\"#handlebars_arrayify\">{{arrayify}}</a></li>\n    <li><a href=\"#handlebars_before\">{{before}}</a></li>\n    <li><a href=\"#handlebars_eachindex\">{{eachIndex}}</a></li>\n    <li><a href=\"#handlebars_filter\">{{filter}}</a></li>\n    <li><a href=\"#handlebars_first\">{{first}}</a></li>\n    <li><a href=\"#handlebars_foreach\">{{forEach}}</a></li>\n    <li><a href=\"#handlebars_inarray\">{{inArray}}</a></li>\n    <li><a href=\"#handlebars_isarray\">{{isArray}}</a></li>\n    <li><a href=\"#handlebars_last\">{{last}}</a></li>\n    <li><a href=\"#handlebars_lengthequal\">{{lengthEqual}}</a></li>\n    <li><a href=\"#handlebars_map\">{{map}}</a></li>\n    <li><a href=\"#handlebars_some\">{{some}}</a></li>\n    <li><a href=\"#handlebars_sort\">{{sort}}</a></li>\n    <li><a href=\"#handlebars_sortby\">{{sortBy}}</a></li>\n    <li><a href=\"#handlebars_withafter\">{{withAfter}}</a></li>\n    <li><a href=\"#handlebars_withbefore\">{{withBefore}}</a></li>\n    <li><a href=\"#handlebars_withfirst\">{{withFirst}}</a></li>\n    <li><a href=\"#handlebars_withlast\">{{withLast}}</a></li>\n    <li><a href=\"#handlebars_withsort\">{{withSort}}</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >-
                                    The following standard array helpers are
                                    supported on the Stencil framework.


                                    ## {{after}}


                                    Returns all of the items in an array after
                                    the specified index. Opposite of
                                    [before](#before).


                                    Given the array `['a', 'b', 'c']`:


                                    #### Parameters


                                    * `array` {Array}: Collection.

                                    * `n` {Number}: Starting index (number of
                                    items to exclude).

                                    * `returns` {Array}: Array exluding `n`
                                    items.


                                    #### Example


                                    ```handlebars

                                    {{after array 1}}

                                    //=> '["c"]'

                                    ```
                                  header:
                                    anchor: handlebars_after
                                - type: text
                                  data: '---'
                                - type: text
                                  data: |-
                                    ## {{arrayify}}

                                    Casts the given `value` to an array.

                                    #### Parameters

                                    * `value` {any}
                                    * `returns` {Array}

                                    #### Example

                                    ```handlebars
                                    {{arrayify "foo"}}
                                    //=> '["foo"]'
                                    ```
                                  header:
                                    anchor: handlebars_arrayify
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{before}}


                                    Returns all of the items in the collection
                                    before the specified count. Opposite of
                                    [after](#after).


                                    Given the array `['a', 'b', 'c']`:


                                    #### Parameters


                                    * `array` {Array}

                                    * `n` {Number}

                                    * `returns` {Array}: Array excluding items
                                    after the given number.


                                    #### Example


                                    ```handlebars

                                    {{before array 2}}

                                    //=> '["a", "b"]'

                                    ```
                                  header:
                                    anchor: handlebars_before
                                - type: text
                                  data: '---'
                                - type: text
                                  data: |-
                                    ## {{eachIndex}}

                                    #### Parameters

                                    * `array` {Array}
                                    * `options` {Object}
                                    * `returns` {String}

                                    #### Example

                                    ```handlebars
                                    {{#eachIndex collection}}
                                      {{item}} is {{index}}
                                    {{/eachIndex}}
                                    ```
                                  header:
                                    anchor: handlebars_eachindex
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{filter}}


                                    Block helper that filters the given array.
                                    Renders the block for values that evaluate
                                    to `true`; otherwise, returns the inverse
                                    block.


                                    #### Parameters


                                    * `array` {Array}

                                    * `value` {any}

                                    * `options` {Object}

                                    * `returns` {String}


                                    #### Example


                                    ```handlebars

                                    {{#filter array
                                    "foo"}}AAA{{else}}BBB{{/filter}}

                                    //=> 'BBB

                                    ```
                                  header:
                                    anchor: handlebars_filter
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{first}}


                                    Returns the first item, or first `n` items,
                                    of an array.


                                    #### Parameters


                                    * `array` {Array}

                                    * `n` {Number}: Number of items to return,
                                    starting at `0`.

                                    * `returns` {Array}


                                    #### Example


                                    Given the array `['a', 'b', 'c', 'd', 'e']`:


                                    ```handlebars

                                    {{first array 2}}

                                    //=> '["a", "b"]'

                                    ```
                                  header:
                                    anchor: handlebars_first
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{forEach}}


                                    Iterates over each item in an array, and
                                    exposes the current item in the array as
                                    context to the inner block. In addition to
                                    the current array item, the helper exposes
                                    the following variables to the inner block:


                                    * `index`

                                    * `total`

                                    * `isFirst`

                                    * `isLast`


                                    Also, `@index` is exposed as a private
                                    variable, and additional private variables
                                    may be defined as hash arguments.


                                    #### Parameters


                                    * `array` {Array}

                                    * `returns` {String}


                                    #### Example


                                    ```js

                                    var accounts = [

                                    {'name': 'John', 'email':
                                    'john@example.com'},

                                    {'name': 'Malcolm', 'email':
                                    'malcolm@example.com'},

                                    {'name': 'David', 'email':
                                    'david@example.com'}

                                    ];


                                    // example usage

                                    // {{#forEach accounts}}

                                    //   <a href="mailto:{{ email }}"
                                    title="Send an email to {{ name }}">

                                    //     {{ name }}

                                    //   </a>{{#unless isLast}}, {{/unless}}

                                    // {{/forEach}}

                                    ```
                                  header:
                                    anchor: handlebars_foreach
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{inArray}}


                                    Block helper that renders the block if an
                                    array has the given `value`. Optionally, you
                                    can specify an inverse block to render when
                                    the array does not have the given value.


                                    #### Parameters


                                    * `array` {Array}

                                    * `value` {any}

                                    * `options` {Object}

                                    * `returns` {String}


                                    #### Example


                                    Given the array `['a', 'b', 'c']`:


                                    ```handlebars

                                    {{#inArray array "d"}}
                                      foo
                                    {{else}}
                                      bar
                                    {{/inArray}}

                                    //=> 'bar'

                                    ```
                                  header:
                                    anchor: handlebars_inarray
                                - type: text
                                  data: '---'
                                - type: text
                                  data: |-
                                    ## {{isArray}}

                                    Returns true if `value` is an es5 array.

                                    #### Parameters

                                    * `value` {any}: The value to test.
                                    * `returns` {Boolean}

                                    #### Example

                                    ```handlebars
                                    {{isArray "abc"}}
                                    //=> 'false'
                                    ```
                                  header:
                                    anchor: handlebars_isarray
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{last}}


                                    Returns the last item, or last `n` items, of
                                    an array. Opposite of [first](#first).


                                    #### Parameters


                                    * `array` {Array}

                                    * `n` {Number}: Number of items to return,
                                    starting with the last item.

                                    * `returns` {Array}


                                    #### Example


                                    Given the array `['a', 'b', 'c', 'd', 'e']`:


                                    ```handlebars

                                    {{last array 2}}

                                    //=> '["d", "e"]'

                                    ```
                                  header:
                                    anchor: handlebars_last
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{lengthEqual}}


                                    Block helper that compares the length of the
                                    given array to the number passed as the
                                    second argument. If the array length is
                                    equal to the given `length`, the block is
                                    returned. Otherwise, you have the option of
                                    returning an inverse block.


                                    #### Parameters


                                    * `array` {Array}

                                    * `length` {Number}

                                    * `options` {Object}

                                    * `returns` {String}


                                    #### Example


                                    Given the array `['a', 'b', 'c', 'd', 'e']`:


                                    ```handlebars

                                    {{#lengthEqual array
                                    10}}AAA{{else}}BBB{{/lengthEqual}}

                                    //=> 'BBB'

                                    ```
                                  header:
                                    anchor: handlebars_lengthequal
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{map}}


                                    Returns a new array, created by calling
                                    `function` on each element of the given
                                    `array`.


                                    #### Parameters


                                    * `array` {Array}

                                    * `fn` {Function}

                                    * `returns` {String}


                                    #### Example


                                    Given an array `['a', 'b', 'c']`:


                                    ```js

                                    // register `double` as a helper

                                    function double(str) {
                                      return str + str;
                                    }

                                    // then used like this:

                                    // {{map array double}}

                                    //=> '["aa", "bb", "cc"]'

                                    ```
                                  header:
                                    anchor: handlebars_map
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{some}}


                                    Block helper that returns the block *if* the
                                    callback returns true for some value in the
                                    given array.


                                    #### Parameters


                                    * `array` {Array}

                                    * `cb` {Function}: Callback function.

                                    * {Options}: Handlebars-provided options
                                    object.

                                    * `returns` {Array}


                                    #### Example


                                    Given the array `[1, 'b', 3]`:


                                    ```handlebars

                                    {{#some array isString}}
                                      Render me if the array has a string.
                                    {{else}}
                                      Render me if it doesn't.
                                    {{/some}}

                                    //=> 'Render me if the array has a string.'

                                    ```
                                  header:
                                    anchor: handlebars_some
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{sort}}


                                    Sorts the given `array`. If an array of
                                    objects is passed, you may optionally pass
                                    (as the second argument) a `key` to sort on.
                                    Alternatively, you may pass a sorting
                                    function as the second argument.


                                    #### Parameters


                                    * `array` {Array}: The array to sort.

                                    * `key` {String|Function}: The object key to
                                    sort by, or a sorting function.


                                    #### Example


                                    Given an array `['b', 'a', 'c']`:



                                    ```handlebars

                                    {{sort array}}

                                    //=> '["a", "b", "c"]'

                                    ```
                                  header:
                                    anchor: handlebars_sort
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{sortBy}}


                                    Sorts an `array`. If an array of objects is
                                    passed, you may optionally pass a `key` to
                                    sort on as the second argument. You may
                                    alternatively pass a sorting function as the
                                    second argument.


                                    #### Parameters


                                    * `array` {Array}: The array to sort.

                                    * `props` {String|Function}: One or more
                                    properties to sort by, or sorting functions
                                    to use.


                                    #### Example


                                    Given an array `[{a: 'zzz'}, {a: 'aaa'}]`:


                                    ```handlebars

                                    {{sortBy array "a"}}

                                    //=> '[{"a":"aaa"}, {"a":"zzz"}]'

                                    ```
                                  header:
                                    anchor: handlebars_sortby
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{withAfter}}


                                    Use the items in the array, _after_ the
                                    specified index, as context inside a block.
                                    Opposite of [withBefore](#withBefore).


                                    #### Parameters


                                    * `array` {Array}

                                    * `idx` {Number}

                                    * `options` {Object}

                                    * `returns` {Array}


                                    #### Example


                                    Given the array `['a', 'b', 'c', 'd', 'e']`:


                                    ```handlebars

                                    {{#withAfter array 3}}
                                      {{this}}
                                    {{/withAfter}}

                                    //=> "de"

                                    ```
                                  header:
                                    anchor: handlebars_withafter
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{withBefore}}


                                    Use the items in the array, _before_ the
                                    specified index, as context inside a block.
                                    Opposite of [withAfter](#withAfter).


                                    #### Parameters


                                    * `array` {Array}

                                    * `idx` {Number}

                                    * `options` {Object}

                                    * `returns` {Array}


                                    #### Example


                                    Given the array `['a', 'b', 'c', 'd', 'e']`:


                                    ```handlebars

                                    {{#withBefore array 3}}
                                      {{this}}
                                    {{/withBefore}}

                                    //=> 'ab'

                                    ```
                                  header:
                                    anchor: handlebars_withbefore
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{withFirst}}


                                    Uses a collection's first item inside a
                                    Handlebars block expression. Opposite of
                                    [withLast](#withLast).


                                    #### Parameters


                                    * `array` {Array}

                                    * `idx` {Number}

                                    * `options` {Object}

                                    * `returns` {String}


                                    #### Example


                                    Given the array `['a', 'b', 'c']`:


                                    ```handlebars

                                    {{#withFirst array}}
                                      {{this}}
                                    {{/withFirst}}

                                    //=> 'a'

                                    ```
                                  header:
                                    anchor: handlebars_withfirst
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{withLast}}


                                    Use the last item, or `n` items, in an array
                                    as context inside a block. Opposite of
                                    [withFirst](#withFirst).


                                    #### Parameters


                                    * `array` {Array}

                                    * `idx` {Number}: The starting index.

                                    * `options` {Object}

                                    * `returns` {String}


                                    #### Example


                                    Given the array `['a', 'b', 'c']`:


                                    ```handlebars

                                    {{#withLast array}}
                                      {{this}}
                                    {{/withLast}}

                                    //=> 'c'

                                    ```
                                  header:
                                    anchor: handlebars_withlast
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{withSort}}


                                    Block helper that sorts a collection and
                                    exposes the sorted collection as context
                                    inside the block.


                                    #### Parameters


                                    * `array` {Array}

                                    * `prop` {String}

                                    * `options` {Object}: Specify
                                    `reverse="true"` to reverse the array.

                                    * `returns` {String}


                                    #### Example


                                    Given the array `['b', 'a', 'c']`:


                                    ```handlebars

                                    {{#withSort array}}{{this}}{{/withSort}}

                                    //=> 'abc'

                                    ```
                                  header:
                                    anchor: handlebars_withsort
                          - title: Custom Array Helpers
                            route:
                              path: /custom-array-helpers
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Custom Array Helpers</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_itemat\">{{itemAt}}</a></li>\n    <li><a href=\"#handlebars_join\">{{join}}</a></li>\n    <li><a href=\"#handlebars_limit\">{{limit}}</a></li>\n    <li><a href=\"#handlebars_pluck\">{{pluck}}</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >-
                                    ## {{itemAt}}


                                    _Block helper that returns the item at the
                                    specified index._


                                    #### Parameters


                                    * `array` {Array}

                                    * `idx` {Number}

                                    * `returns` {any} `value`


                                    #### Example


                                    Given the array `['a', 'b', 'c']`:


                                    ```handlebars

                                    {{itemAt array 1}}

                                    //=> 'b'

                                    ```
                                  header:
                                    anchor: handlebars_itemat
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{join}}


                                    The `join` helper is custom to Stencil. It
                                    joins an array of string items, with
                                    separators. It returns a string. 


                                    #### Parameters


                                    - `values`: {Array}

                                    - `separator`: {String}

                                    - `limit=<number>`: An optional limit.
                                  header:
                                    anchor: handlebars_join
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{limit}}


                                    The `limit` helper is custom to Stencil. It
                                    limits the number of items returned from an
                                    array variable, and returns a new array.


                                    #### Parameters


                                    - `data`: {Array}

                                    - `limit`: {Number}


                                    #### {{limit}} Example 


                                    Assume that `{{cart.items}}` would return 10
                                    items. You could use this helper to limit
                                    that behavior to only the first four items,
                                    by specifying: 


                                    ```

                                    {{limit cart.items 4}}

                                    ```
                                  header:
                                    anchor: handlebars_limit
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >
                                    ## {{pluck}}


                                    The `pluck` helper is custom to Stencil. For
                                    one specified search key(s), it retrieves
                                    corresponding values from some or all
                                    elements in a specified collection. 


                                    The `pluck` helper returns the retrieved
                                    values in a comma-separated string. This
                                    helper's general form is:


                                    ```

                                    {{pluck ([limit] <collection>
                                    [<limit-value>]) '<search-key>'}}

                                    ```


                                    #### Parameters


                                    - `limit`, `limit-value`: Optional
                                    parameters to limit the number of results
                                    returned.

                                    - `collection`: The collection to search.

                                    - `search-key`: The string to search for.



                                    #### {{pluck}} Example 1


                                    Assume that the `categories` collection
                                    contains:


                                    ```

                                    categories: [
                                      { "id": 1, "name": "Bakeware" },
                                      { "id": 2, "name": "Cookware" },
                                      { "id": 3, "name": "Cutlery" }
                                    ]

                                    ```


                                    In this case, this Handlebars statement:


                                    ```

                                    {{pluck (limit categories 2) 'name'}}

                                    ```


                                    ...would return:


                                    ```

                                    "Bakeware,Cookware"

                                    ```


                                    #### {{pluck}} Example 2


                                    If the `categories` themselves each
                                    contained an image object, then you could
                                    use dot notation to access that image
                                    object's children:


                                    ```

                                    categories: [
                                      { "id": 1, "name": "Bakeware", "image": { "data": "http://...", "alt": "Bakeware image"} },
                                      { "id": 2, "name": "Cookware" "image": { "data": "http://...", "alt": "Cookware image"} },
                                      { "id": 3, "name": "Cutlery" "image": { "data": "http://...", "alt": "Cutlery image"} }
                                    ]

                                    ```


                                    In this case, this Handlebars statement:


                                    ```

                                    {{pluck (limit categories 2) 'image.data'}}

                                    ```


                                    ...would return a comma-separated list of
                                    image URLs.
                                  header:
                                    anchor: handlebars_pluck
                    - title: Collection Helpers
                      route:
                        path: /collection-helpers
                      data:
                        children:
                          - title: Standard Collection Helpers
                            route:
                              path: /standard-collection-helpers
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Collection Helpers</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_isempty\">{{isEmpty}}</a></li>\n    <li><a href=\"#handlebars_iterate\">{{iterate}}</a></li>\n    <li><a href=\"#handlebars_length\">{{length}}</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >-
                                    The following standard helpers are available
                                    to handle collections.


                                    ## {{isEmpty}}


                                    Block helper that returns a block *if* the
                                    given collection is empty. If the collection
                                    is not empty, returns the inverse block (if
                                    supplied).


                                    #### Parameters


                                    * `collection` {Object}

                                    * `options` {Object}

                                    * `returns` {String}
                                  header:
                                    anchor: handlebars_isempty
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{iterate}}


                                    Iterates over an array or object.


                                    #### Parameters


                                    * `context` {Object|Array}: The collection
                                    to iterate over.

                                    * `options` {Object}

                                    * `returns` {String}
                                  header:
                                    anchor: handlebars_iterate
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{length}}


                                    Returns the length of the given collection.
                                    When using a string literal in the template,
                                    the string must be value JSON. See the
                                    example below. Otherwise, pass in an array
                                    or object from the context.


                                    #### Parameters


                                    * `value` {Array|Object|String}

                                    * `returns` {Number}: The length of the
                                    value.


                                    #### Example


                                    ```handlebars

                                    {{length '["a", "b", "c"]'}}

                                    //=> 3


                                    //=> myArray = ['a', 'b', 'c', 'd', 'e'];

                                    {{length myArray}}

                                    //=> 5


                                    //=> myObject = {'a': 'a', 'b': 'b'};

                                    {{length myObject}}

                                    //=> 2

                                    ```
                                  header:
                                    anchor: handlebars_length
                        blocks: []
                    - title: Comparison Helpers
                      route:
                        path: /comparison-helpers
                      data:
                        blocks: []
                        children:
                          - title: Standard Comparison Helpers
                            route:
                              path: /standard-comparison-helpers
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Standard Comparison Helpers</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_and\">{{and}}</a></li>\n    <li><a href=\"#handlebars_gt\">{{gt}}</a></li>\n    <li><a href=\"#handlebars_gte\">{{gte}}</a></li>\n    <li><a href=\"#handlebars_has\">{{has}}</a></li>\n    <li><a href=\"#handlebars_eq\">{{eq}}</a></li>\n    <li><a href=\"#handlebars_ifeven\">{{ifeven}}</a></li>\n    <li><a href=\"#handlebars_ifnth\">{{ifNth}}</a></li>\n    <li><a href=\"#handlebars_ifodd\">{{ifOdd}}</a></li>\n    <li><a href=\"#handlebars_is\">{{is}}</a></li>\n    <li><a href=\"#handlebars_isnt\">{{isnt}}</a></li>\n    <li><a href=\"#handlebars_lt\">{{lt}}</a></li>\n    <li><a href=\"#handlebars_lte\">{{lte}}</a></li>\n    <li><a href=\"#handlebars_neither\">{{neither}}</a></li>\n    <li><a href=\"#handlebars_unlesseq\">{{unlessEq}}</a></li>\n    <li><a href=\"#handlebars_unlessgt\">{{unlessGt}}</a></li>\n    <li><a href=\"#handlebars_unlesslt\">{{unlesslt}}</a></li>\n    <li><a href=\"#handlebars_unlessgteq\">{{{unlessGteq}}</a></li>\n    <li><a href=\"#handlebars_unlesslteq\">{{{unlessLteq}}</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >-
                                    The following standard helpers are available
                                    to handle comparisons.


                                    ## {{and}}


                                    Block helper that renders the block if
                                    *both* of the given values are truthy. If
                                    you specify an inverse block, it will be
                                    rendered when falsy.


                                    #### Parameters


                                    * `a` {any}

                                    * `b` {any}

                                    * `options` {Object}: Handlebars-provided
                                    options object.

                                    * `returns` {String}
                                  header:
                                    anchor: handlebars_and
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{gt}}


                                    Block helper that renders a block if `a` is
                                    *greater than* `b`.


                                    If an inverse block is specified, it will be
                                    rendered when falsy. You may optionally use
                                    the `compare=""` hash argument for the
                                    second value.


                                    #### Parameters


                                    * `a` {String}

                                    * `b` {String}

                                    * `options` {Object}: Handlebars-provided
                                    options object.

                                    * `returns` {String}: Block, or inverse
                                    block if specified and falsy.
                                  header:
                                    anchor: handlebars_gt
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{gte}}


                                    Block helper that renders a block if `a` is
                                    *greater than or equal to* `b`.


                                    If an inverse block is specified, it will be
                                    rendered when falsy. You may optionally use
                                    the `compare=""` hash argument for the
                                    second value.


                                    #### Parameters


                                    * `a` {String}

                                    * `b` {String}

                                    * `options` {Object}: Handlebars-provided
                                    options object

                                    * `returns` {String}: Block, or inverse
                                    block if specified and falsy.
                                  header:
                                    anchor: handlebars_gte
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{has}}


                                    Block helper that renders a block if `value`
                                    has `pattern`. If an inverse block is
                                    specified, it will be rendered when falsy.


                                    #### Parameters


                                    * `val` {any}: The value to check.

                                    * `pattern` {any}: The pattern to check for.

                                    * `options` {Object}: Handlebars-provided
                                    options object.

                                    * `returns` {String}
                                  header:
                                    anchor: handlebars_has
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{eq}}


                                    Block helper that renders a block if `a` is
                                    *equal to* `b`. If an inverse block is
                                    specified,  it will be rendered when falsy.
                                    You may optionally use the `compare=""` hash
                                    argument for the second value.


                                    #### Parameters


                                    * `a` {String}

                                    * `b` {String}

                                    * `options` {Object}: Handlebars-provided
                                    options object.

                                    * `returns` {String}: Block, or inverse
                                    block if specified and falsy.
                                  header:
                                    anchor: handlebars_eq
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{ifEven}}


                                    Returns `true` if the given value is an even
                                    number.


                                    #### Parameters


                                    * `number` {Number}

                                    * `options` {Object}: Handlebars-provided
                                    options object

                                    * `returns` {String}: Block, or inverse
                                    block if specified and falsy.


                                    #### Example


                                    ```handlebars

                                    {{#ifEven value}}
                                      render A
                                    {{else}}
                                      render B
                                    {{/ifEven}}

                                    ```
                                  header:
                                    anchor: handlebars_ifeven
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{ifNth}}


                                    Conditionally renders a block *if* dividing
                                    the `a` operand by `b` yields a remainder of
                                    zero. If you specify an inverse block, it
                                    will be rendered when the remainder is *not*
                                    zero.


                                    #### Parameters


                                    * {}: {Number}

                                    * {}: {Number}

                                    * `options` {Object}: Handlebars-provided
                                    options object.

                                    * `returns` {String}: Block, or inverse
                                    block if specified and falsy.
                                  header:
                                    anchor: handlebars_ifNth
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{ifOdd}}


                                    Block helper that renders a block if `value`
                                    is *an odd number*. If an inverse block is
                                    specified, it will be rendered when falsy.


                                    #### Parameters


                                    * `value` {Object}

                                    * `options` {Object}: Handlebars-provided
                                    options object.

                                    * `returns` {String}: Block, or inverse
                                    block if specified and falsy.


                                    #### Example


                                    ```handlebars

                                    {{#ifOdd value}}
                                      render A
                                    {{else}}
                                      render B
                                    {{/ifOdd}}

                                    ```
                                  header:
                                    anchor: handlebars_ifOdd
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{is}}


                                    Block helper that renders a block if `a` is
                                    *equal to* `b`. If an inverse block is
                                    specified, it will be rendered when falsy.


                                    #### Parameters


                                    * `a` {any}

                                    * `b` {any}

                                    * `options` {Object}: Handlebars-provided
                                    options object.

                                    * `returns` {String}
                                  header:
                                    anchor: handlebars_is
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{isnt}}


                                    Block helper that renders a block if `a` is
                                    *not equal to* `b`. If an inverse block is
                                    specified, it will be rendered when falsy.


                                    #### Parameters


                                    * `a` {String}

                                    * `b` {String}

                                    * `options` {Object}: Handlebars-provided
                                    options object.

                                    * `returns` {String}
                                  header:
                                    anchor: handlebars_isnt
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{lt}}


                                    Block helper that renders a block if `a` is
                                    *less than* `b`.


                                    If an inverse block is specified, it will be
                                    rendered when falsy. You may optionally use
                                    the `compare=""` hash argument for the
                                    second value.


                                    #### Parameters


                                    * `context` {Object}

                                    * `options` {Object}: Handlebars-provided
                                    options object.

                                    * `returns` {String}: Block, or inverse
                                    block if specified and falsy.
                                  header:
                                    anchor: handlebars_lt
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{lte}}


                                    Block helper that renders a block if `a` is
                                    *less than or equal to* `b`.


                                    If an inverse block is specified, it will be
                                    rendered when falsy. You may optionally use
                                    the `compare=""` hash argument for the
                                    second value.


                                    #### Parameters


                                    * `a` {String}

                                    * `b` {String}

                                    * `options` {Object}: Handlebars-provided
                                    options object.

                                    * `returns` {String}: Block, or inverse
                                    block if specified and falsy.
                                  header:
                                    anchor: handlebars_lte
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{neither}}


                                    Block helper that renders a block if
                                    *neither of* the given values are truthy. If
                                    you specify an inverse block, it will be
                                    rendered when falsy.


                                    #### Parameters


                                    * `a` {any}

                                    * `b` {any}

                                    * `options` {}: Handlebars options object.

                                    * `returns` {String}: Block, or inverse
                                    block if specified and falsy.
                                  header:
                                    anchor: handlebars_neither
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{unlessEq}}


                                    Block helper that always renders the inverse
                                    block *unless `a` is equal to `b`*.


                                    #### Parameters


                                    * `a` {String}

                                    * `b` {String}

                                    * `options` {Object}: Handlebars-provided
                                    options object.

                                    * `returns` {String}: Inverse block by
                                    default, or block if falsy.
                                  header:
                                    anchor: handlebars_unlesseq
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{unlessGt}}


                                    Block helper that always renders the inverse
                                    block *unless `a` is greater than `b`*.


                                    #### Parameters


                                    * `context` {Object}

                                    * `options` {Object}: Handlebars-provided
                                    options object.

                                    * `returns` {String}: Inverse block by
                                    default, or block if falsy.
                                  header:
                                    anchor: handlebars_unlessgt
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{unlessLt}}


                                    Block helper that always renders the inverse
                                    block *unless `a` is less than `b`*.


                                    #### Parameters


                                    * `context` {Object}

                                    * `options` {Object}: Handlebars-provided
                                    options object.

                                    * `returns` {String}: Block, or inverse
                                    block if specified and falsy.
                                  header:
                                    anchor: handlebars_unlesslt
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{unlessGteq}}


                                    Block helper that always renders the inverse
                                    block *unless `a` is greater than or equal
                                    to `b`*.


                                    #### Parameters


                                    * `context` {Object}

                                    * `options` {Object}: Handlebars-provided
                                    options object.

                                    * `returns` {String}: Block, or inverse
                                    block if specified and falsy.
                                  header:
                                    anchor: handlebars_unlessgteq
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{unlessLteq}}


                                    Block helper that always renders the inverse
                                    block *unless `a` is less than or equal to
                                    `b`*.


                                    #### Parameters


                                    * `context` {Object}

                                    * `options` {Object}: Handlebars-provided
                                    options object.

                                    * `returns` {String}: Block, or inverse
                                    block if specified and falsy.
                                  header:
                                    anchor: handlebars_unlesslteq
                    - title: Control Flow Helpers
                      route:
                        path: /new-subpage
                      data:
                        blocks: []
                        children:
                          - title: Conditional Control Flow Helpers
                            route:
                              path: /conditional-control-flow-helpers
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Conditional Control Flow Helpers</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_if\">{{if}}</a></li>\n    <li><a href=\"#handlebars_unless\">{{unless}}</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >-
                                    The following helpers provide control
                                    structures that test for conditions, and
                                    branch accordingly.


                                    ## {{if}}


                                    The `if` helper has been customized for
                                    Stencil, and has the following syntax:


                                    ```

                                    {{#if <statement>}}
                                      ... 
                                    {{else if}}  /* optional else-if block */
                                      ...
                                    {{else}}  /* optional else block */
                                      ...
                                    {{/if}}

                                    ```


                                    The `<statement>` that the `if` helper
                                    evaluates can take these forms:


                                    - An object, as in: `{{#if object}}`.

                                    - A comparison expression, as in: `{{#if
                                    <lvalue> <operator> <rvalue>}}`.



                                    When you pass only one parameter to the `if`
                                    helper, it will return the following:

                                    - For an array parameter, the array's
                                    length.

                                    - For an empty object, a value of `false`.
                                  header:
                                    anchor: handlebars_if
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >
                                    ## {{unless}}


                                    The `unless` helper is logically the
                                    opposite of the [`if` helper](#if), subject
                                    to the [restrictions](#unless_restrix)
                                    below. The syntax for `unless` can be found
                                    in the official Handlebars documentation
                                    [here](http://handlebarsjs.com/builtin_helpers.html).


                                    #### Formal Example


                                    ```

                                    {{#unless statement}}
                                       ... /* block to display/execute unless statement is true */
                                    {{/unless}}

                                    ```


                                    #### Restrictions


                                    Statements using `unless` can refer to: 


                                    * Objects, as in: `{{#unless object}}`.


                                    Unlike the `if` helper,  `unless` on the
                                    Stencil framework does not support operators
                                    for comparison expressions. 

                                    So, for example, the following expression
                                    would throw an error:


                                    ```

                                    {{#unless this.alt "===" "hidden"}}

                                    ```


                                    A workaround for this logic is to recast the
                                    expression as `if`/not-equal-to. So the
                                    following expression would be valid:


                                    ```

                                    {{#if this.alt "!==" "hidden"}}

                                    ```


                                    #### Stencil Example 


                                    Here is a usage example from Stencil's
                                    Cornerstone base theme: The
                                    `templates/pages/search.html` template
                                    displays search results. In this template's
                                    section that displays search suggestions, an
                                    `#unless` loop determines what to output for
                                    the final result:


                                    ```

                                    {{#each category_results}}

                                    <li class="category-suggestion">
                                        {{#each this}}
                                            <a href="{{url}}">{{name}}</a>
                                            {{#unless @last}} > {{/unless}}
                                        {{/each}}
                                    </li>

                                    {{/each}}

                                    ```


                                    ### Nested if/else Statements to Test for
                                    if/and Conditions


                                    Handlebars does not provide an `if`/`and`
                                    conditional structure. However, to test for
                                    multiple conditions, you can nest
                                    `if`/`else` statements, as shown in this
                                    example:


                                    ```
                                     <nav class="navigation">
                                          <ul>
                                            {{#each nav_items}}
                                                {{#if name '===' 'About Us'}}
                                                {{else}}
                                                  {{#if name '===' 'Contact Us'}}
                                                  {{else}}
                                                    <li>
                                                      <a class="top-level-nav-link" href="{{url}}">
                                                        {{name}}
                                                      </a>
                                                    </li>
                                                  {{/if}}
                                                {{/if}}
                                            {{/each}}
                                          </ul>
                                        </nav>
                                    ```
                                  header:
                                    anchor: handlebars_unless
                          - title: Loop Control Flow Helpers
                            route:
                              path: /loop-control-flow-helpers
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Loop Control Flow Helpers</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_any\">{{any}}</a></li>\n    <li><a href=\"#handlebars_all\">{{all}}</a></li>\n    <li><a href=\"#handlebars_contains\">{{contains}}</a></li>\n    <li><a href=\"#handlebars_each\">{{each}}</a></li>\n    <li><a href=\"#handlebars_for\">{{for}}</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >-
                                    The following helpers are used to control
                                    loop execution.


                                    ## {{any}}


                                    The `any` helper is custom to Stencil. It
                                    checks whether at least one parameter
                                    evaluates to `true`.  Parameters can be of
                                    different types (strings, numbers, arrays,
                                    or collections).


                                    #### Examples


                                    Formally, the `any` helper is invoked as
                                    shown here:


                                    ```

                                    {{#any items selected=true}} 
                                      ... /* block to display if any items have selected=true */
                                    {{/any}}

                                    ```


                                    A usage example is
                                    http://cornerstone-light-demo.mybigcommerce.com/shop-all/garden,
                                    a category page in Stencil's Cornerstone
                                    base theme that does _not_ have faceted
                                    search turned on. Shoppers will see "Shop by
                                    price" filters instead of product filters. 


                                    The Stencil code controlling this component
                                    resides in the theme's
                                    `templates/components/category/shop-by-price.html`
                                    file. In this component, the `{{#any...`
                                    Handlebars helper is used to determine
                                    whether a shopper has selected one of the
                                    filters, and whether a "reset" button needs
                                    to be displayed:


                                    ```

                                    {{#any shop_by_price selected=true}}
                                        <li class="navList-item">
                                            <a href="{{category_url}}" class="navList-action">
                                                {{lang 'category.reset'}}
                                            </a>
                                        </li>
                                    {{/any}}

                                    ```
                                  header:
                                    anchor: handlebars_any
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{all}}


                                    The `all` helper is custom to Stencil. It
                                    checks whether _all_ parameters evaluate to
                                    `true`. Parameters can be of different types
                                    (strings, numbers, arrays, or collections).


                                    #### Example


                                    ```

                                    {{#all items theme_settings.optionA
                                    theme_settings.optionB}}
                                      ... /* block to display, if all items evaluate to true */
                                    {{/all}}

                                    ```
                                  header:
                                    anchor: handlebars_all
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{contains}}


                                    The `contains` helper is custom to Stencil.
                                    It checks whether the second parameter is
                                    included in the first parameter (typically a
                                    collection).


                                    #### Example


                                    ```

                                    {{#contains fonts "Roboto"}}
                                      ... /* block to display, if any items contain "Roboto" */
                                    {{/contains}}

                                    ```
                                  header:
                                    anchor: handlebars_contains
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{each}}


                                    The syntax for the `each` helper can be
                                    found in the official Handlebars
                                    documentation
                                    [here](http://handlebarsjs.com/builtin_helpers.html).


                                    #### Example


                                    ```

                                    {{#each array | object}}
                                      ...
                                    {{else}} /* optional block to execute if the
                                    the list is empty */
                                      ...
                                    {{/each}}

                                    ```


                                    #### Notes


                                    - Within an each block, use `{{this}}` to
                                    reference the current item.

                                    - Within an each block, use `{{@index}}` to
                                    reference the current item's index number.

                                    - When iterating through objects, `{{@key}}`
                                    returns the current key name.

                                    - `{{each}}` loops can be nested.
                                  header:
                                    anchor: handlebars_each
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{for}}


                                    The `for` helper is a custom Stencil helper.
                                    In particular, this helper is limited to 100
                                    iterations, in order to protect against
                                    infinite loops. 


                                    The `for` helper has the following syntax,
                                    where parameters `<from>` and `<to>` are
                                    numbers, and `<context>` is an object:


                                    ```

                                    {{#for <from> <to> <context>}}
                                      ...
                                    {{/for}}

                                    ```
                                  header:
                                    anchor: handlebars_for
                    - title: Date Helpers
                      route:
                        path: /date-helpers
                      data:
                        blocks: []
                        children:
                          - title: Standard Date Helpers
                            route:
                              path: /standard-date-helpers
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Standard Date Helpers</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_moment\">{{moment}}</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >-
                                    The following standard Handlebars helper
                                    handles dates.


                                    ## {{moment}}


                                    Exposes `helper-date` as `moment`.
                                  header:
                                    anchor: handlebars_moment
                    - title: HTML Helpers
                      route:
                        path: /html-helpers
                      data:
                        blocks: []
                        children:
                          - title: Standard HTML Helpers
                            route:
                              path: /standard-html-helpers
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Standard HTML Helpers</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_ellipsis\">{{ellipsis}}</a></li>\n    <li><a href=\"#handlebars_sanitize\">{{sanitize}}</a></li>\n    <li><a href=\"#handlebars_ul\">{{ul}}</a></li>\n    <li><a href=\"#handlebars_ol\">{{ol}}</a></li>\n    <li><a href=\"#handlebars_thumbnailimage\">{{thumbnailImage}}</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >-
                                    The following standard helpers are available
                                    to handle HTML content.


                                    ## {{ellipsis}}


                                    Truncates a string to the specified
                                    `length`, and appends an elipsis, `…`.


                                    #### Parameters


                                    * `str` {String}

                                    * `length` {Number}: The desired length of
                                    the returned string.

                                    * `returns` {String}: The truncated string.


                                    #### Example


                                    ```js

                                    {{ellipsis "<span>foo bar baz</span>" 7}}

                                    //=> 'foo bar…'

                                    ```
                                  header:
                                    anchor: handlebars_ellipsis
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{sanitize}}


                                    Strips HTML tags from a string, so that only
                                    the text nodes are preserved.


                                    #### Parameters


                                    * `str` {String}: The string of HTML to
                                    sanitize.

                                    * `returns` {String}


                                    #### Example


                                    ```js

                                    {{sanitize "<span>foo</span>"}}

                                    //=> 'foo'

                                    ```
                                  header:
                                    anchor: handlebars_sanitize
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{ul}}


                                    Block helper for creating unordered lists
                                    (`<ul></ul>`).


                                    #### Parameters


                                    * `context` {Object}

                                    * `options` {Object}

                                    * `returns` {String}
                                  header:
                                    anchor: handlebars_ul
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{ol}}


                                    Block helper for creating ordered lists 
                                    (`<ol></ol>`).


                                    #### Parameters


                                    * `context` {Object}

                                    * `options` {Object}

                                    * `returns` {String}
                                  header:
                                    anchor: handlebars_ol
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >
                                    ## {{thumbnailImage}}


                                    Returns a `<figure>` with a thumbnail linked
                                    to a full picture.


                                    #### Parameters


                                    * `context` {Object}: Object with
                                    values/attributes to add to the generated
                                    elements:

                                    * `context.alt` {String}

                                    * `context.src` {String}

                                    * `context.width` {Number}

                                    * `context.height` {Number}

                                    * `returns` {String}: HTML `<figure>`
                                    element with image and optional
                                    caption/link.
                                  header:
                                    anchor: handlebars_thumbnailimage
                    - title: Image Helpers
                      route:
                        path: /image-helpers
                      data:
                        blocks: []
                        children:
                          - title: Custom Image Helpers
                            route:
                              path: /custom-image-helpers
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Custom Image Helpers</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_getimage\">{{getImage}}</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >+
                                    The Stencil framework provides the following
                                    custom helper to manage images.


                                    ## {{getImage}}


                                    The `getImage` helper is custom to Stencil.
                                    It returns the URL for an image of the
                                    specified size. Values for the size
                                    parameter are defined in the `config.json`
                                    file’s `settings` section.


                                    This helper's parameters are:


                                    - `stencilImage`: a StencilImage.

                                    - `size`: a string.

                                    - `defaultImage` (optional): a string. 


                                    Here is an example: 


                                    ```

                                    {{getImage image "thumbnail"}}

                                    ``` 


                                    You can use the optional `defaultImage`
                                    parameter to specify an image that will be
                                    displayed in cases where the passed
                                    `stencilImage` value is null.

                                  header:
                                    anchor: handlebars_getimage
                    - title: Inflection Helpers
                      route:
                        path: /inflection-helpers
                      data:
                        blocks: []
                        children:
                          - title: Standard Inflection Helpers
                            route:
                              path: /standard-inflection-helpers
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Standard Inflection Helpers</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_inflect\">{{inflect}}</a></li>\n    <li><a href=\"#handlebars_ordinalize\">{{ordinalize}}</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >-
                                    The following standard helpers are available
                                    to transform strings.


                                    ## {{inflect}}


                                    Handles singular/plural forms.


                                    #### Parameters


                                    * `count` {Number}

                                    * `singular` {String}: The singular form

                                    * `plural` {String}: The plural form

                                    * `include` {String}

                                    * `returns` {String}
                                  header:
                                    anchor: handlebars_inflect
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{ordinalize}}


                                    Returns an ordinalized number (as a string).


                                    #### Parameters


                                    * `val` {String}: The value to ordinalize.

                                    * `returns` {String}: The ordinalized
                                    number.


                                    #### Example


                                    ```handlebars

                                    {{ordinalize 1}}

                                    //=> '1st'

                                    {{ordinalize 21}}

                                    //=> '21st'

                                    {{ordinalize 29}}

                                    //=> '29th'

                                    {{ordinalize 22}}

                                    //=> '22nd'

                                    ```
                                  header:
                                    anchor: handlebars_ordinalize
                    - title: Injection Helpers
                      route:
                        path: /injection-helpers
                      data:
                        blocks: []
                        children:
                          - title: Custom Injection Helpers
                            route:
                              path: /injection-helpers
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Custom Injection Helpers</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_cdn\">{{cdn}}</a></li>\n    <li><a href=\"#handlebars_getfontscollection\">{{getFontsCollection}}</a></li>\n    <li><a href=\"#handlebars_inject-and-jscontext\">{{inject}} and {{jsContext}}</a></li>\n    <li><a href=\"#handlebars_stylesheet\">{{stylesheet}}</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >
                                    The Stencil framework provides the following
                                    custom helpers to inject various resources
                                    into a page context:


                                    ## {{cdn}}


                                    The `cdn` helper is custom to Stencil. It is
                                    a URL transformer for content delivery
                                    networks.


                                    When you reference static assets that you
                                    have locally staged outside your
                                    `<theme-name>` directory and uploaded using
                                    WebDAV, place the `webdav:` prefix before
                                    each corresponding `assetPath` parameter.
                                    For example, a link like:


                                    ```

                                    <img src="{{cdn "webdav:img/image.jpg"}}">

                                    ```


                                    ...will be transformed to a result like:


                                    ```

                                    <img
                                    src="https://cdn.bcapp/3dsf74g/content/img/image.jpg">

                                    ```


                                    The presumed WebDAV root directory is
                                    `/content/`. (So, in this example, the
                                    `image.jpg` file has been uploaded to the
                                    WebDAV `/content/` directory.) The presumed
                                    local directory is `<theme-name>/assets/`,
                                    so you can omit that path when referencing
                                    its contained files or subdirectories.



                                    #### CDN Custom Endpoints


                                    You can define custom CDN endpoints to use
                                    with the `cdn` Handlebars helper. This
                                    facilitates including large, high-resolution
                                    image assets in themes, without exceeding
                                    BigCommerce's [50 MB
                                    limit](/stencil-docs/prepare-and-upload-a-theme/bundling-and-uploading)
                                    when bundling the theme for upload to
                                    BigCommerce. 


                                    You could use a local version of the image
                                    in development, and a version on a CDN (for
                                    exampe, Imgix) in production. To do so,
                                    define custom CDN endpoints in your theme's
                                    [`config.json`
                                    file](/stencil-docs/stencil-theme-editor/config-json-metadata),
                                    as highlighted in this example:


                                    ```

                                    {
                                      "name": "Cornerstone",
                                      "version": "1.3.5",
                                      "settings": {
                                        "homepage_new_products_count": 12,
                                        "homepage_featured_products_count": 8,
                                        "cdn": {
                                          "customcdn": "https://bigcommerce.customcdn.net"
                                              }
                                         }
                                    }

                                     
                                    ```


                                    After defining an endpoint, you can use the
                                    short name in the same way as you would use
                                    a `webdav:` abbreviation:


                                    ```

                                    <img src="{{cdn "customcdn:img/image.jpg"}}"
                                    />

                                    ```


                                    In local development, that helper would
                                    return:


                                    <pre>&lt;img
                                    src="<b>/assets/cdn/</b>customcdn/img/image.jpg"
                                    /&gt;

                                    </pre>


                                    Whereas in production, it would return:


                                    ```

                                    <img
                                    src="https://bigcommerce.customcdn.net/img/image.jpg"
                                    />

                                    ```


                                    As highlighted above, the helper is
                                    configured to rewrite *local* URLs to a
                                    `<theme-name>/assets/cdn/` subfolder. The
                                    `stencil bundle` command will exclude this
                                    local `assets/cdn/` subfolder from the
                                    bundle that it creates. This filtering
                                    circumvents the 50 MB size limit on the
                                    resulting .zip file.
                                  header:
                                    anchor: handlebars_cdn
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ### {{getFontsCollection}}


                                    The `getFontsCollection` helper is custom to
                                    Stencil. It returns a link tag that loads
                                    all selected font collections. It takes no
                                    parameters.
                                  header:
                                    anchor: handlebars_getfontscollection
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ### {{inject}} and {{jsContext}}


                                    Occasionally, your theme's client-side
                                    application code might need to incorporate
                                    dynamic data from the template context.
                                    Stencil provides two custom Handlebars
                                    helpers to help you achieve this: `inject` 
                                    and `jsContext`.


                                    #### About the {{inject}} Helper


                                    The `inject` helper collects data
                                    definitions for injection into the
                                    `jsContext` variable. It composes a JSON
                                    object containing a subset of the template
                                    context to be sent to the browser.
                                    Parameters of the `inject` helper are:


                                    - `key`: a string.

                                    - `value`: multiple types supported. 


                                    An `inject` call takes this form:


                                    ```

                                    {{inject "stringBasedKey" contextValue}}

                                    ```


                                    #### About the {{jsContext}} Helper


                                    The `jsContext` helper takes no parameters;
                                    it simply returns a JSON object containing
                                    all data collected by the `inject` helper.
                                    To retrieve the parsable JSON object, just
                                    call `{{jsContext}}` after all of the
                                    `{{inject}}` calls.



                                    #### {{inject}} + {{jsContext}} Example 1


                                    To set up the product name in your
                                    client-side app, you can do the following,
                                    if you are in the context of a product:


                                    ```

                                    {{inject "myProductName" product.title}}


                                    <script>

                                    // Note the lack of quotes around the
                                    jsContext handlebars helper, it becomes a
                                    string automatically.

                                    var jsContext = JSON.parse({{jsContext}}); 


                                    // jsContext would output
                                    "{\"myProductName\": \"Sample Product\"}"
                                    which can feed directly into 

                                    your JavaScript.


                                    console.log(jsContext.myProductName); //
                                    Will output: Sample Product

                                    </script>

                                    ```


                                    ##### Notes on Example 1


                                    You can compose your JSON object across
                                    multiple pages to create a different set of
                                    client-side data, depending on the currently
                                    loaded template context.


                                    The Stencil theme makes the `jsContext`
                                    available on the active page scoped. It also
                                    makes it available on the global
                                    `PageManager` objects, as `this.context`.


                                    #### {{inject}} Example 2


                                    The following code uses `inject` to add all
                                    product IDs into JavaScript on category
                                    pages. It resides in a theme's
                                    `<theme-name>/templates/pages/category.html`
                                    template. Note the two `inject` calls
                                    directly under the front matter:


                                    ```

                                    ---

                                    category:
                                        shop_by_price: true
                                        products:
                                            limit: {{theme_settings.categorypage_products_per_page}}
                                    ---

                                    {{inject "categoryProductsPerPage"
                                    theme_settings.categorypage_products_per_page}}

                                    {{inject "productIds" (pluck
                                    category.products 'id')}}

                                    {{#partial "head"}}
                                        {{#if pagination.category.previous}}
                                            <link rel="prev" href="{{pagination.category.previous}}">
                                        {{/if}}
                                        {{#if pagination.category.next}}
                                            <link rel="next" href="{{pagination.category.next}}">
                                        {{/if}}
                                    {{/partial}}


                                    {{#partial "page"}}


                                    {{> components/common/breadcrumbs
                                    breadcrumbs=breadcrumbs}}

                                    {{#if category.image}}
                                        <img src="{{getImage category.image 'zoom_size'}}">
                                    {{/if}}

                                    <h1
                                    class="page-heading">{{category.name}}</h1>

                                    {{{category.description}}}

                                    {{{snippet 'categories'}}}

                                    <div class="page">
                                        <aside class="page-sidebar" id="faceted-search-container">
                                            {{> components/category/sidebar}}
                                        </aside>

                                        <main class="page-content" id="product-listing-container">
                                            {{#if category.products}}
                                                {{> components/category/product-listing}}
                                            {{else}}
                                                <p>{{lang 'categories.no_products'}}</p>
                                            {{/if}}
                                        </main>
                                    </div>


                                    {{/partial}}

                                    {{> layout/base}}

                                    ```
                                  header:
                                    anchor: handlebars_inject-and-jscontext
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{stylesheet}}


                                    The `stylesheet` helper is custom to
                                    Stencil. It renders a link tag to insert a
                                    stylesheet into your theme. (This is
                                    required if you want Theme Editor to rewrite
                                    the stylesheet file when a merchant
                                    customizes their theme.) This helper returns
                                    an HTML string.


                                    #### Parameters


                                    - path: String containing the path to the
                                    theme's CSS stylesheet file.

                                    - Other parameters are optional, appended in
                                    the form: `key="value"`.


                                    #### Example


                                    ```

                                    {{{stylesheet "assets/css/style.css"
                                    class="myStylesheet"}}}

                                    ```
                                  header:
                                    anchor: handlebars_stylesheet
                    - title: Markdown Helpers
                      route:
                        path: /markdown-helpers
                      data:
                        blocks: []
                        children:
                          - title: Standard Markdown Helpers
                            route:
                              path: /standard-markdown-helpers
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Standard Markdown Helpers</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_markdown\">{{markdown}}</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >-
                                    The following standard helper is available
                                    to convert markdown.


                                    ## {{markdown}}


                                    Block helper that converts a string of
                                    inline markdown to HTML.


                                    #### Parameters


                                    * `context` {Object}

                                    * `options` {Object}

                                    * `returns` {String}


                                    #### Example


                                    ```html

                                    {{#markdown}}

                                    # Foo

                                    {{/markdown}}

                                    //=> <h1>Foo</h1>

                                    ```
                                  header:
                                    anchor: handlebars_markdown
                    - title: Math Helpers
                      route:
                        path: /math-helpers
                      data:
                        blocks: []
                        children:
                          - title: Standard Math Helpers
                            route:
                              path: /standard-math-helpers
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Standard Math Helpers</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_add\">{{add}}</a></li>\n    <li><a href=\"#handlebars_subtract\">{{subtract}}</a></li>\n    <li><a href=\"#handlebars_divide\">{{divide}}</a></li>\n    <li><a href=\"#handlebars_multiply\">{{multiply}}</a></li>\n    <li><a href=\"#handlebars_floor\">{{floor}}</a></li>\n    <li><a href=\"#handlebars_ceil\">{{ceil}</a></li>\n    <li><a href=\"#handlebars_round\">{{round}}</a></li>\n    <li><a href=\"#handlebars_sum\">{{sum}}</a></li>\n    <li><a href=\"#handlebars_avg\">{{avg}}</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >-
                                    The following standard helpers are available
                                    to handle mathematical operations.


                                    ## {{add}}


                                    Returns the sum of `a` plus `b`.


                                    #### Parameters


                                    * `a` {Number}

                                    * `b` {Number}
                                  header:
                                    anchor: handlebars_add
                                - type: text
                                  data: '---'
                                - type: text
                                  data: |-
                                    ## {{subtract}}

                                    Return the differnece of `a` minus `b`.

                                    #### Parameters

                                    * `a` {Number}
                                    * `b` {Number}
                                  header:
                                    anchor: handlebars_subtract
                                - type: text
                                  data: '---'
                                - type: text
                                  data: |-
                                    ## {{divide}}

                                    Divides `a` by `b`.

                                    #### Parameters

                                    * `a` {Number}: numerator
                                    * `b` {Number}: denominator
                                  header:
                                    anchor: handlebars_divide
                                - type: text
                                  data: '---'
                                - type: text
                                  data: |-
                                    ## {{multiply}}

                                    Multiplies `a` by `b`.

                                    #### Parameters

                                    * `a` {Number}: factor
                                    * `b` {Number}: multiplier
                                  header:
                                    anchor: handlebars_multiply
                                - type: text
                                  data: '---'
                                - type: text
                                  data: |-
                                    ## {{floor}}

                                    Gets the `Math.floor()` of the given value.

                                    #### Parameters

                                    * `value` {Number}
                                  header:
                                    anchor: handlebars_floor
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{ceil}}


                                    Gets the `Math.ceil()` [ceiling] of the
                                    given value.


                                    #### Parameters


                                    * `value` {Number}
                                  header:
                                    anchor: handlebars_ceil
                                - type: text
                                  data: '---'
                                - type: text
                                  data: |-
                                    ## {{round}}

                                    Rounds the given value.

                                    #### Parameters

                                    * `value` {Number}
                                  header:
                                    anchor: handlebars_round
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{sum}}


                                    Returns the sum of all numbers in the given
                                    array.


                                    #### Parameters


                                    * `array` {Array}: Array of numbers to add
                                    up.

                                    * `returns` {Number}


                                    #### Example


                                    ```handlebars

                                    {{sum "[1, 2, 3, 4, 5]"}}

                                    //=> '15'

                                    ```
                                  header:
                                    anchor: handlebars_sum
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{avg}}


                                    Returns the average of all numbers in the
                                    given array.


                                    #### Parameters


                                    * `array` {Array}: Array of numbers to add
                                    up and average.

                                    * `returns` {Number}


                                    #### Example


                                    ```handlebars

                                    {{avg "[1, 2, 3, 4, 5]"}}

                                    //=> '3'

                                    ```
                                  header:
                                    anchor: handlebars_avg
                    - title: Number Helpers
                      route:
                        path: /number-helpers
                      data:
                        children:
                          - title: Standard Number Helpers
                            route:
                              path: /standard-number-helpers
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Standard Number Helpers</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_addcommas\">{{addCommas}}</a></li>\n    <li><a href=\"#handlebars_phonenumber\">{{phoneNumber}}</a></li>\n    <li><a href=\"#handlebars_random\">{{random}}</a></li>\n    <li><a href=\"#handlebars_toabbr\">{{toAbbr}}</a></li>\n    <li><a href=\"#handlebars_toexponential\">{{toExponential}}</a></li>\n    <li><a href=\"#handlebars_tofixed\">{{toFixed}}</a></li>\n    <li><a href=\"#handlebars_tofloat\">{{toFloat}}</a></li>\n    <li><a href=\"#handlebars_toint\">{{toInt}}</a></li>\n    <li><a href=\"#handlebars_toprecision\">{{toPrecision}}</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >-
                                    The following standard helpers are available
                                    to handle and transform numbers.


                                    ## {{addCommas}}


                                    Adds commas to numbers.


                                    #### Parameters


                                    * `num` {Number}

                                    * `returns` {Number}
                                  header:
                                    anchor: handlebars_addcommas
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{phoneNumber}}


                                    Converts a string or number to a formatted
                                    phone number.


                                    #### Parameters


                                    * `num` {Number|String}: The phone number to
                                    format, e.g., `8005551212`

                                    * `returns` {Number}: The formatted phone
                                    number: `(800) 555-1212`
                                  header:
                                    anchor: handlebars_phonenumber
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{random}}


                                    Generates a random number between two
                                    values.


                                    #### Parameters


                                    * `min` {Number}

                                    * `max` {Number}

                                    * `returns` {String}
                                  header:
                                    anchor: handlebars_random
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{toAbbr}}


                                    Abbreviates numbers to the given number of
                                    `precision`. This is for general numbers,
                                    not size in bytes.


                                    #### Parameters


                                    * `number` {Number}

                                    * `precision` {Number}

                                    * `returns` {String}
                                  header:
                                    anchor: handlebars_toabbr
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{toExponential}}


                                    Returns a string, representing the given
                                    number in exponential notation.


                                    #### Parameters


                                    * `number` {Number}

                                    * `fractionDigits` {Number}: Optional. An
                                    integer specifying the number of digits to
                                    use after the decimal point. Defaults to as
                                    many digits as necessary to specify the
                                    number.

                                    * `returns` {Number}


                                    #### Example


                                    ```js

                                    {{toExponential number digits}};

                                    ```
                                  header:
                                    anchor: handlebars_toexponential
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{toFixed}}


                                    Formats the given number, using fixed-point
                                    notation.


                                    #### Parameters


                                    * `number` {Number}

                                    * `digits` {Number}: Optional. The number of
                                    digits to use after the decimal point. This
                                    can be a value between 0 and 20, inclusive,
                                    and implementations may optionally support a
                                    larger range of values. If this argument is
                                    omitted, it is treated as 0.

                                    * `returns` {Number}
                                  header:
                                    anchor: handlebars_tofixed
                                - type: text
                                  data: '---'
                                - type: text
                                  data: |-
                                    ## {{toFloat}}

                                    #### Parameters

                                    * `number` {Number}
                                    * `returns` {Number}
                                  header:
                                    anchor: handlebars_tofloat
                                - type: text
                                  data: '---'
                                - type: text
                                  data: |-
                                    ## {{toInt}}

                                    #### Parameters

                                    * `number` {Number}
                                    * `returns` {Number}
                                  header:
                                    anchor: handlebars_toint
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{toPrecision}}


                                    #### Parameters


                                    * `number` {Number}

                                    * `precision` {Number}: Optional. The number
                                    of significant digits.

                                    * `returns` {Number}
                                  header:
                                    anchor: handlebars_toprecision
                        blocks: []
                    - title: Object Helpers
                      route:
                        path: /object-helpers
                      data:
                        blocks: []
                        children:
                          - title: Standard Object Helpers
                            route:
                              path: /standard-object-helpers
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Standard Object Helpers</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_extend\">{{extend}}</a></li>\n    <li><a href=\"#handlebars_forin\">{{forIn}}</a></li>\n    <li><a href=\"#handlebars_forown\">{{forOwn}}</a></li>\n    <li><a href=\"#handlebars_topath\">{{toPath}}</a></li>\n    <li><a href=\"#handlebars_get\">{{get}}</a></li>\n    <li><a href=\"#handlebars_getobject\">{{getObject}}</a></li>\n    <li><a href=\"#handlebars_hasown\">{{hasOwn}}</a></li>\n    <li><a href=\"#handlebars_isobject\">{{isObject}}</a></li>\n    <li><a href=\"#handlebars_merge\">{{merge}}</a></li>\n    <li><a href=\"#handlebars_jsonparse\">{{JSONparse}}</a></li>\n    <li><a href=\"#handlebars_jsonstringify\">{{JSONstringify}}</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >-
                                    The following standard helpers are available
                                    to handle objects.


                                    ## {{extend}}


                                    Extends the context with the properties of
                                    other objects. A shallow merge is performed
                                    to avoid mutating the context.


                                    #### Parameters


                                    * `objects` {Object}: One or more objects to
                                    extend.

                                    * `returns` {Object}
                                  header:
                                    anchor: handlebars_extend
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{forIn}}


                                    Block helper that iterates over the
                                    properties of an object, exposing each key
                                    and value on the context.


                                    #### Parameters


                                    * `context` {Object}

                                    * `options` {Object}

                                    * `returns` {String}
                                  header:
                                    anchor: handlebars_forin
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{forOwn}}


                                    Block helper that iterates over the *own*
                                    properties of an object, exposing each key
                                    and value on the context.


                                    #### Parameters


                                    * `obj` {Object}: The object to iterate
                                    over.

                                    * `options` {Object}

                                    * `returns` {String}
                                  header:
                                    anchor: handlebars_forown
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{toPath}}


                                    Takes arguments and, if they are string or
                                    number, converts them to a dot-delineated
                                    object property path.


                                    #### Parameters


                                    * `prop` {String|Number}: The property
                                    segments to assemble (can be multiple).

                                    * `returns` {String}
                                  header:
                                    anchor: handlebars_topath
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{get}}


                                    Uses property paths (`a.b.c`) to get a value
                                    or nested value from the context. Works as a
                                    regular helper or block helper.


                                    #### Parameters


                                    * `prop` {String}: The property to get,
                                    optionally using dot notation for nested
                                    properties.

                                    * `context` {Object}: The context object.

                                    * `options` {Object}: The Handlebars options
                                    object, if used as a block helper.

                                    * `returns` {String}
                                  header:
                                    anchor: handlebars_get
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{getObject}}


                                    Uses property paths (`a.b.c`) to get an
                                    object from the context. Unlike the `get`
                                    helper, this helper will return the actual
                                    object, including the given property key.
                                    Also, this helper does not work as a block
                                    helper.


                                    #### Parameters


                                    * `prop` {String}: The property to get,
                                    optionally using dot notation for nested
                                    properties.

                                    * `context` {Object}: The context object.

                                    * `returns` {String}
                                  header:
                                    anchor: handlebars_getobject
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{hasOwn}}


                                    Returns true if `key` is an own, enumerable
                                    property of the given `context` object.


                                    #### Parameters


                                    * `key` {String}

                                    * `context` {Object}: The context object.

                                    * `returns` {Boolean}


                                    #### Example


                                    ```handlebars

                                    {{hasOwn context key}}

                                    ```
                                  header:
                                    anchor: handlebars_hasown
                                - type: text
                                  data: '---'
                                - type: text
                                  data: |-
                                    ## {{isObject}}

                                    Returns true if `value` is an object.

                                    #### Parameters

                                    * `value` {String}
                                    * `returns` {Boolean}

                                    #### Example

                                    ```handlebars
                                    {{isObject "foo"}}
                                    //=> false
                                    ```
                                  header:
                                    anchor: handlebars_isobject
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{merge}}


                                    Deeply merges the properties of the given
                                    `objects` with the context object.


                                    #### Parameters


                                    * `object` {Object}: The target object. Pass
                                    an empty object to shallow-clone.

                                    * `objects` {Object}

                                    * `returns` {Object}
                                  header:
                                    anchor: handlebars_merge
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{JSONparse}}


                                    Block helper that parses a string using
                                    `JSON.parse`, then passes the parsed object
                                    to the block as context.


                                    #### Parameters


                                    * `string` {String}: The string to parse.

                                    * `options` {Object}: Handlebars options
                                    object.
                                  header:
                                    anchor: handlebars_jsonparse
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >
                                    ## {{JSONstringify}}


                                    Stringifies an object using
                                    `JSON.stringify`.


                                    #### Parameters


                                    * `obj` {Object}: Object to stringify.

                                    * `returns` {String}
                                  header:
                                    anchor: handlebars_jsonstringify
                    - title: Operator Helpers
                      route:
                        path: /operator-helpers
                      data:
                        blocks: []
                        children:
                          - title: Standard Operator Helpers
                            route:
                              path: /standard-operator-helpers
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Standard Operator Helpers</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_comparison\">Comparison Operators</a></li>\n    <li><a href=\"#handlebars_or\">{{or}}</a></li>\n    <li><a href=\"#handlebars_typeof\">{{forOwn}}</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >-
                                    ## Comparison Operators


                                    The following helpers are available to
                                    handle comparisons.


                                    | Helper | Definition |

                                    |--|--|

                                    |`==`| equal to |

                                    |`===`| equal to and equal type |

                                    |`!=`| not equal |

                                    |`<`| less than |

                                    |`>`| greater than |

                                    |`<=`| less than or equal to |

                                    |`>=`| greater than or equal to |


                                    ### Equal to and Equal Type Example


                                    To compare a string, use the `===` operator,
                                    as in this example from
                                    `templates/components/common/share.html`: 


                                    ```
                                      {{#if service '===' 'facebook'}}
                                        <svg>
                                          <use xlink:href="#icon-facebook"/>
                                        </svg>
                                      {{/if}}
                                    ```


                                    ### Not Equal or Not Equal Type Example


                                    To improvise a `!==` (not equal or not equal
                                    type) comparison operator in Handlebars, you
                                    can use an [if](#if)/else structure as shown
                                    in this example:


                                    ```
                                      <nav class="navigation">
                                          <ul>
                                            {{#each nav_items}}
                                                {{#if name '===' 'About Us'}}
                                                {{else}}
                                                  <li>
                                                    <a class="top-level-nav-link" href="{{url}}">
                                                      {{name}}
                                                    </a>
                                                  </li>
                                                {{/if}}
                                            {{/each}}
                                          </ul>
                                        </nav>
                                    ```
                                  header:
                                    anchor: handlebars-comparison
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## Logical {{or}} Operator


                                    The `or` operator has been customized for
                                    Stencil. It checks whether at least one of
                                    its parameters evaluates to true, and has
                                    the following syntax:


                                    ```

                                    {{#or 1 0 0 0 0 0 0}} 
                                      ... /* execute this block if OR evaluates to true */
                                    {{/or}}

                                    ```


                                    ### Example


                                    Here is a usage example from Stencil's
                                    Cornerstone base theme, where it displays
                                    the cart's contents. The
                                    `templates/components/cart/content.html`
                                    template uses the `or` operator to determine
                                    whether an item contains either product
                                    options _or_ configurable fields. If at
                                    least one condition is true, the template
                                    displays an edit link for the item:


                                    ```

                                    {{#or options configurable_fields}}
                                        <a href="#" data-item-edit="{{id}}">{{lang 'cart.checkout.change'}}</a>
                                    {{/or}}

                                    ```


                                    ### Parameters 


                                    The `or` operator's parameters are one or
                                    more strings, numbers, arrays, or
                                    collections. Parameters can be of mixed
                                    types. 
                                  header:
                                    anchor: handlebars_or
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{typeof}} Operator


                                    The `typeof` operator returns the JavaScript
                                    type of a variable, such as:


                                    - string

                                    - number

                                    - boolean

                                    - object


                                    By design, an array will return a `typeof`
                                    value of `object`.


                                    ### Example


                                    ```

                                    <script>
                                        if (typeof(addthis) === "object") {
                                            addthis.toolbox('.addthis_toolbox');
                                        }
                                    </script>

                                    ```
                                  header:
                                    anchor: handlebars_typeof
                    - title: String Helpers
                      route:
                        path: /string-helpers
                      data:
                        children:
                          - title: Custom String Helpers
                            route:
                              path: /custom-string-helpers
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Custom String Helpers</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_block\">{{block}}</a></li>\n    <li><a href=\"#handlebars_concat\">{{concat}}</a></li>\n    <li><a href=\"#handlebars_dynamiccomponent\">{{dynamicComponent}}</a></li>\n    <li><a href=\"#handlebars_json\">{{json}}</a></li>\n    <li><a href=\"#handlebars_lang\">{{lang}}</a></li>\n    <li><a href=\"#handlebars_nl2br\">{{nl2br}}</a></li>\n    <li><a href=\"#handlebars_partial\">{{partial}}</a></li>\n    <li><a href=\"#handlebars_replace\">{{replace}}</a></li>\n    <li><a href=\"#handlebars_tolowercase\">{{toLowerCase}}</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >-
                                    The following custom helpers are available
                                    to manipulate strings:


                                    ## {{block}} 


                                    The `block` string helper is custom to
                                    Stencil. It defines a block of content,
                                    which can be overwritten by the
                                    [partial](#partial-helper) helper.
                                  header:
                                    anchor: handlebars_block
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{concat}}


                                    The `concat` helper is custom to Stencil. It
                                    concatenates two string objects from the
                                    page's context, which are passed as
                                    parameters. It returns a new string object.


                                    #### Example


                                    ```

                                    {{concat breadcrumbs.[0].name
                                    breadcrumbs.[0].url}}

                                    ```
                                  header:
                                    anchor: handlebars_concat
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{dynamicComponent}}


                                    The `dynamicComponent` string helper is
                                    custom to Stencil. It inserts a dynamic
                                    partial from within the path that is
                                    supplied as its parameter.
                                  header:
                                    anchor: handlebars_dynamiccomponent
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{json}}


                                    The `json` string helper is custom to
                                    Stencil. You can use this helper to convert
                                    a JavaScript string object (from the page's
                                    context) into a JSON string object.
                                  header:
                                    anchor: handlebars_json
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{lang}}


                                    The `lang` string helper is custom to
                                    Stencil. It maps keys to translation files,
                                    based on the locale indicated by the
                                    visitor’s browser. Its parameters are the
                                    following keys:


                                    - `translationKey`: a string.

                                    - `options`: key-value pairs.
                                  header:
                                    anchor: handlebars_lang
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{nl2br}}


                                    The `nl2br` helper is custom to Stencil. You
                                    can call this helper on a string object from
                                    the page's context, to convert its contained
                                    newline characters (`\r\n`, `\n\r`, `\r`,
                                    `\n`) to `<br>` tags. The `nl2br` helper
                                    returns a new string object.


                                    #### Example


                                    This Handlebars statement:


                                    ```

                                    {{nl2br settings.address}}

                                    ```


                                    ...will take this example string:


                                    ```

                                    "settings": {
                                      "address": "\r\n685 Market St\r\nSan Francisco\r\n94105\r\nCA\r\n"
                                    }

                                    ```


                                    ...and return


                                    ```

                                    "<br>685 Market St<br>San
                                    Francisco<br>94105<br>CA<br>"

                                    ```
                                  header:
                                    anchor: handlebars_nl2br
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{partial}}


                                    The `partial` string helper is custom to
                                    Stencil. It overrides block content defined
                                    by the [block](#block-helper) helper.
                                  header:
                                    anchor: handlebars_partial
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{replace}}


                                    The `replace` string helper is custom to
                                    Stencil. It searches for the first parameter
                                    within the second parameter and, if it finds
                                    it, replaces the first parameter with the
                                    contents of the specified Handlebars block.


                                    For example, the following code would search
                                    for the string `needle` within the scope
                                    defined by `haystack`. If found, it would
                                    replace that string with the Handlebars
                                    block defined by `<context...replacement>`:


                                    ```

                                    {{#replace "needle" haystack}}
                                      {{<context to use as a replacement>}}
                                    {{/replace}}

                                    ```
                                  header:
                                    anchor: handlebars_replace
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{toLowerCase}}


                                    The `toLowerCase` helper is custom to
                                    Stencil. Use this helper to return a copy of
                                    a string object, in all-lowercase. The
                                    helper returns a new string object.


                                    #### Example


                                    This Handlebars statement:


                                    ```

                                    {{toLowerCase head.title}}

                                    ```


                                    ...will take this example string:


                                    ```

                                    "head": {
                                      "title": "This is my TEST Store"
                                    }

                                    ```


                                    ...and return:


                                    ```

                                    "this is my test store"

                                    ```
                                  header:
                                    anchor: handlebars_toLowerCase
                          - title: Standard String Helpers
                            route:
                              path: /new-subpage
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Standard String Helpers</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_camelcase\">{{camelcase}}</a></li>\n    <li><a href=\"#handlebars_capitalize\">{{capitalize}}</a></li>\n    <li><a href=\"#handlebars_capitalizeall\">{{capitalizeAll}}</a></li>\n    <li><a href=\"#handlebars_center\">{{center}}</a></li>\n    <li><a href=\"#handlebars_chop\">{{chop}}</a></li>\n    <li><a href=\"#handlebars_dashcase\">{{dashcase}}</a></li>\n    <li><a href=\"#handlebars_dotcase\">{{dotcase}}</a></li>\n    <li><a href=\"#handlebars_hyphenate\">{{hyphenate}}</a></li>\n    <li><a href=\"#handlebars_isstring\">{{isString}}</a></li>\n    <li><a href=\"#handlebars_lowercase\">{{lowercase}}</a></li>\n    <li><a href=\"#handlebars_occurrences\">{{occurrences}}</a></li>\n    <li><a href=\"#handlebars_pascalcase\">{{pascalcase}}</a></li>\n    <li><a href=\"#handlebars_pathcase\">{{pathcase}}</a></li>\n    <li><a href=\"#handlebars_plusify\">{{plusify}}</a></li>\n    <li><a href=\"#handlebars_reverse\">{{reverse}}</a></li>\n    <li><a href=\"#handlebars_sentence\">{{sentence}}</a></li>\n    <li><a href=\"#handlebars_snakecase\">{{snakecase}}</a></li>\n    <li><a href=\"#handlebars_split\">{{split}}</a></li>\n    <li><a href=\"#handlebars_startswith\">{{startsWith}}</a></li>\n    <li><a href=\"#handlebars_titleize\">{{titleize}}</a></li>\n    <li><a href=\"#handlebars_trim\">{{trim}}</a></li>\n    <li><a href=\"#handlebars_uppercase\">{{uppercase}}</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >-
                                    ## {{camelcase}}


                                    camelCases the characters in the given
                                    `string`.


                                    #### Parameters


                                    * `string` {String}: The string to
                                    camelcase.

                                    * `returns` {String}


                                    #### Example


                                    ```js

                                    {{camelcase "foo bar baz"}};

                                    //=> 'fooBarBaz'

                                    ```
                                  header:
                                    anchor: handlebars_camelcase
                                - type: text
                                  data: '---'
                                - type: text
                                  data: |-
                                    ## {{capitalize}}

                                    Capitalizes the first word in a sentence.

                                    #### Parameters

                                    * `str` {String}
                                    * `returns` {String}

                                    #### Example

                                    ```handlebars
                                    {{capitalize "foo bar baz"}}
                                    //=> "Foo bar baz"
                                    ```
                                  header:
                                    anchor: handlebars_capitalize
                                - type: text
                                  data: '---'
                                - type: text
                                  data: |-
                                    ## {{capitalizeAll}}

                                    Capitalizes all words in a string.

                                    #### Parameters

                                    * `str` {String}
                                    * `returns` {String}

                                    #### Example

                                    ```handlebars
                                    {{capitalizeAll "foo bar baz"}}
                                    //=> "Foo Bar Baz"
                                    ```
                                  header:
                                    anchor: handlebars_capitalizeall
                                - type: text
                                  data: '---'
                                - type: text
                                  data: |-
                                    ## {{center}}

                                    Centers a string, using non-breaking spaces.

                                    #### Parameters

                                    * `str` {String}
                                    * `spaces` {String}
                                    * `returns` {String}
                                  header:
                                    anchor: handlebars_center
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{chop}}


                                    Like `trim`, but removes both extraneous
                                    whitespace *and non-word characters* from
                                    the beginning and end of a string.


                                    #### Parameters


                                    * `string` {String}: The string to chop.

                                    * `returns` {String}


                                    #### Example


                                    ```js

                                    {{chop "_ABC_"}}

                                    //=> 'ABC'


                                    {{chop "-ABC-"}}

                                    //=> 'ABC'


                                    {{chop " ABC "}}

                                    //=> 'ABC'

                                    ```
                                  header:
                                    anchor: handlebars_chop
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{dashcase}}


                                    dash-cases the characters in `string`.
                                    Replaces non-word characters and periods
                                    with hyphens.


                                    #### Parameters


                                    * `string` {String}

                                    * `returns` {String}


                                    #### Example


                                    ```js

                                    {{dashcase "a-b-c d_e"}}

                                    //=> 'a-b-c-d-e'

                                    ```
                                  header:
                                    anchor: handlebars_dashcase
                                - type: text
                                  data: '---'
                                - type: text
                                  data: |-
                                    ## {{dotcase}}

                                    dot.cases the characters in `string`.

                                    #### Parameters

                                    * `string` {String}
                                    * `returns` {String}

                                    #### Example

                                    ```js
                                    {{dotcase "a-b-c d_e"}}
                                    //=> 'a.b.c.d.e'
                                    ```
                                  header:
                                    anchor: handlebars_dotcase
                                - type: text
                                  data: '---'
                                - type: text
                                  data: |-
                                    ## {{hyphenate}}

                                    Replaces spaces in a string with hyphens.

                                    #### Parameters

                                    * `str` {String}
                                    * `returns` {String}

                                    #### Example

                                    ```handlebars
                                    {{hyphenate "foo bar baz qux"}}
                                    //=> "foo-bar-baz-qux"
                                    ```
                                  header:
                                    anchor: handlebars_hyphenate
                                - type: text
                                  data: '---'
                                - type: text
                                  data: |-
                                    ## {{isString}}

                                    Returns true if `value` is a string.

                                    #### Parameters

                                    * `value` {String}
                                    * `returns` {Boolean}

                                    #### Example

                                    ```handlebars
                                    {{isString "foo"}}
                                    //=> 'true'
                                    ```
                                  header:
                                    anchor: handlebars_isstring
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{lowercase}}


                                    Lowercases all characters in the given
                                    string.


                                    #### Parameters


                                    * `str` {String}

                                    * `returns` {String}


                                    #### Example


                                    ```handlebars

                                    {{lowercase "Foo BAR baZ"}}

                                    //=> 'foo bar baz'

                                    ```
                                  header:
                                    anchor: handlebars_lowercase
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{occurrences}}


                                    Returns the number of occurrences of
                                    `substring` within the given `string`.


                                    #### Parameters


                                    * `str` {String}

                                    * `substring` {String}

                                    * `returns` {Number}: Number of occurrences.


                                    #### Example


                                    ```handlebars

                                    {{occurrences "foo bar foo bar baz" "foo"}}

                                    //=> 2

                                    ```
                                  header:
                                    anchor: handlebars_occurrences
                                - type: text
                                  data: '---'
                                - type: text
                                  data: |-
                                    ## {{pascalcase}}

                                    PascalCases the characters in `string`.

                                    #### Parameters

                                    * `string` {String}
                                    * `returns` {String}

                                    #### Example

                                    ```js
                                    {{pascalcase "foo bar baz"}}
                                    //=> 'FooBarBaz'
                                    ```
                                  header:
                                    anchor: handlebars_pascalcase
                                - type: text
                                  data: '---'
                                - type: text
                                  data: |-
                                    ## {{pathcase}}

                                    path/cases the characters in `string`.

                                    #### Parameters

                                    * `string` {String}
                                    * `returns` {String}

                                    #### Example

                                    ```js
                                    {{pathcase "a-b-c d_e"}}
                                    //=> 'a/b/c/d/e'
                                    ```
                                  header:
                                    anchor: handlebars_pathcase
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{plusify}}


                                    Replaces spaces in the given string with
                                    pluses.


                                    #### Parameters


                                    * `str` {String}: The input string

                                    * `returns` {String}: Input string with
                                    spaces replaced by plus signs


                                    #### Example


                                    ```handlebars

                                    {{plusify "foo bar baz"}}

                                    //=> 'foo+bar+baz'

                                    ```
                                  header:
                                    anchor: handlebars_plusify
                                - type: text
                                  data: '---'
                                - type: text
                                  data: |-
                                    ## {{reverse}}

                                    Reverses a string.

                                    #### Parameters

                                    * `str` {String}
                                    * `returns` {String}

                                    #### Example

                                    ```handlebars
                                    {{reverse "abcde"}}
                                    //=> 'edcba'
                                    ```
                                  header:
                                    anchor: handlebars_reverse
                                - type: text
                                  data: '---'
                                - type: text
                                  data: |-
                                    ## {{sentence}}

                                    Sentence-cases the given string.

                                    #### Parameters

                                    * `str` {String}
                                    * `returns` {String}

                                    #### Example

                                    ```handlebars
                                    {{sentence "hello world. goodbye world."}}
                                    //=> 'Hello world. Goodbye world.'
                                    ```
                                  header:
                                    anchor: handlebars_sentence
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{snakecase}}


                                    snake_cases the characters in the given
                                    `string`.


                                    #### Parameters


                                    * `string` {String}

                                    * `returns` {String}


                                    #### Example


                                    ```js

                                    {{snakecase "a-b-c d_e"}}

                                    //=> 'a_b_c_d_e'

                                    ```
                                  header:
                                    anchor: handlebars_snakecase
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{split}}


                                    Splits `string` at the given `character`.


                                    #### Parameters


                                    * `string` {String}: The string to split.

                                    * `returns` {String} `character`: Default is
                                    `,`


                                    #### Example


                                    ```js

                                    {{split "a,b,c" ","}}

                                    //=> ['a', 'b', 'c']

                                    ```
                                  header:
                                    anchor: handlebars_split
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{startsWith}}


                                    Tests whether a string begins with the given
                                    prefix.


                                    #### Parameters


                                    * `prefix` {String}

                                    * `testString` {String}

                                    * `options` {String}

                                    * `returns` {String}


                                    #### Example


                                    ```handlebars

                                    {{#startsWith "Goodbye" "Hello, world!"}}
                                      Whoops
                                    {{else}}
                                      Bro, do you even hello world?
                                    {{/startsWith}}

                                    ```
                                  header:
                                    anchor: handlebars_startswith
                                - type: text
                                  data: '---'
                                - type: text
                                  data: |-
                                    ## {{titleize}}

                                    Title-cases the given string.

                                    #### Parameters

                                    * `str` {String}
                                    * `returns` {String}

                                    #### Example

                                    ```handlebars
                                    {{titleize "this is title case"}}
                                    //=> 'This Is Title Case'
                                    ```
                                  header:
                                    anchor: handlebars_titleize
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{trim}}


                                    Removes extraneous whitespace from the
                                    beginning and end of a string.


                                    #### Parameters


                                    * `string` {String}: The string to trim.

                                    * `returns` {String}


                                    #### Example


                                    ```js

                                    {{trim " ABC "}}

                                    //=> 'ABC'

                                    ```
                                  header:
                                    anchor: handlebars_trim
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{uppercase}}


                                    Uppercases all of the characters in the
                                    given string. If used as a block helper, it
                                    will uppercase the entire block. This helper

                                    does not support inverse blocks.


                                    #### Parameters


                                    * `str` {String}: The string to uppercase.

                                    * `options` {Object}: Handlebars options
                                    object.

                                    * `returns` {String}
                                  header:
                                    anchor: handlebars_uppercase
                        blocks: []
                    - title: URL Helpers
                      route:
                        path: /url-helpers
                      data:
                        children:
                          - title: Standard URL Helpers
                            route:
                              path: /standard-url-helpers
                            data:
                              blocks:
                                - type: html
                                  data: "<h1>Standard URL Helpers</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_encodeuri\">{{encodeURI}}</a></li>\n    <li><a href=\"#handlebars_decodeuri\">{{decodeURI}}</a></li>\n    <li><a href=\"#handlebars_urlresolve\">{{urlResolve}}</a></li>\n    <li><a href=\"#handlebars_urlparse\">{{urlParse}}</a></li>\n    <li><a href=\"#handlebars_stripquerystring\">{{stripQuerystring}}</a></li>\n    <li><a href=\"#handlebars_stripprotocol\">{{stripProtocol}}</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >-
                                    The following standard helpers are available
                                    to transform URLs.


                                    ## {{encodeURI}}


                                    Encodes a Uniform Resource Identifier (URI)
                                    component, by replacing each instance of
                                    certain characters by one, two, three, or
                                    four escape sequences that represent the
                                    UTF-8 encoding of the character.


                                    #### Parameters


                                    * `str` {String}: The un-encoded string.

                                    * `returns` {String}: The encoded string.
                                  header:
                                    anchor: handlebars_encodeuri
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{decodeURI}}


                                    Decodes a Uniform Resource Identifier (URI)
                                    component.


                                    #### Parameters


                                    * `str` {String}

                                    * `returns` {String}
                                  header:
                                    anchor: handlebars_decodeuri
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{urlResolve}}


                                    Takes a base URL, and an href URL, and
                                    resolves them as a browser would for an
                                    anchor tag.


                                    #### Parameters


                                    * `base` {String}

                                    * `href` {String}

                                    * `returns` {String}
                                  header:
                                    anchor: handlebars_urlresolve
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{urlParse}}


                                    Parses a `url` string into an object.


                                    #### Parameters


                                    * `str` {String}: URL string.

                                    * `returns` {String}: Returns stringified
                                    JSON.
                                  header:
                                    anchor: handlebars_urlparse
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{stripQuerystring}}


                                    Strips the query string from a `url`.


                                    #### Parameters


                                    * `url` {String}

                                    * `returns` {String}: The URL without the
                                    queryString.
                                  header:
                                    anchor: handlebars_stripquerystring
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{stripProtocol}}


                                    Strips the protocol from a `url`.


                                    Useful for displaying media that might have
                                    an `http` protocol on secure connections.
                                    Will change `http://foo.bar` to `//foo.bar`


                                    #### Parameters


                                    * `str` {String}

                                    * `returns` {String}: The URL with the
                                    `http` protocol stripped.
                                  header:
                                    anchor: handlebars_stripprotocol
                    - title: Miscellaneous Helpers
                      route:
                        path: /misc-helpers
                      data:
                        children:
                          - title: Standard Miscellaneous Helpers
                            route:
                              path: /standard-miscellaneous-helpers
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Standard Miscellaneous Helpers</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_default\">{{default}}</a></li>\n    <li><a href=\"#handlebars_option\">{{option}}</a></li>\n    <li><a href=\"#handlebars_noop\">{{noop}}</a></li>\n    <li><a href=\"#handlebars_withhash\">{{withHash}}</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >-
                                    The following standard helpers are also
                                    supported on the Stencil framework.


                                    ## {{default}}


                                    Returns the first value, if that value is
                                    defined; otherwise, returns the "default"
                                    value.


                                    #### Parameters


                                    * `value` {any}

                                    * `defaultValue` {any}

                                    * `returns` {String}
                                  header:
                                    anchor: handlebars_default
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{option}}


                                    Given the context `{options: {a: {b: {c:
                                    'ddd'}}}}`, returns the given value of
                                    `prop` from `this.options`.


                                    #### Parameters


                                    * `prop` {String}

                                    * `returns` {any}


                                    #### Example


                                    ```handlebars

                                    {{option "a.b.c"}}

                                    <!-- results => `ddd` -->

                                    ```
                                  header:
                                    anchor: handlebars_option
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{noop}}


                                    Block helper that renders the block without
                                    taking any arguments.


                                    #### Parameters


                                    * `options` {Object}

                                    * `returns` {String}
                                  header:
                                    anchor: handlebars_noop
                                - type: text
                                  data: '---'
                                - type: text
                                  data: >-
                                    ## {{withHash}}


                                    Block helper that builds the context for the
                                    block from the options hash.


                                    #### Parameters


                                    * `options` {Object}: Handlebars-provided
                                    options object.
                                  header:
                                    anchor: handlebars_withhash
        - title: 'Stencil Object Model '
          route:
            path: /stencil-object-model-reference
          data:
            children:
              - title: Stencil Objects
                route:
                  path: /stencil-objects
                data:
                  children:
                    - title: Global Objects & Properties
                      route:
                        path: /global-objects
                      data:
                        children:
                          - title: 'Global Objects & Properties '
                            route:
                              path: /global-objects-and-properties-overview
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <h1>Global Objects and Properties
                                    Overview</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#global_global-objects\">Global Objects and Properties Overview</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >-
                                    ## Global Objects Overview 


                                    Global objects and properties are common
                                    components shared across the entire
                                    BigCommerce storefront. The
                                    objects/properties covered in this
                                    subsection are:


                                    *
                                    [Banner](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/banner)

                                    *
                                    [Breadcrumbs](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/breadcrumbs)

                                    *
                                    [Categories](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/)

                                    * [Currency
                                    Selector](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/breadcrumbs)

                                    * [Faceted
                                    Search](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/faceted-search)

                                    * [Featured
                                    Products](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/featured-products)

                                    *
                                    [Footer](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/footer)

                                    *
                                    [Carousel](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/carousel)

                                    * [HTML
                                    Head](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/html-head)

                                    *
                                    [Is_Ajax](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/is-ajax)

                                    *
                                    [Login](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/login)

                                    * [New
                                    Products](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/new-products)

                                    * [Page
                                    Content](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/page-content)

                                    *
                                    [Pages](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/pages)

                                    * [Page
                                    Type](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/page-type)

                                    *
                                    [Pagination](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/pagination)

                                    *
                                    [Search](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/search)

                                    *
                                    [Settings](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/settings)

                                    *
                                    [Sitemap](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/sitemap)

                                    * [Social
                                    Links](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/social-links)

                                    *
                                    [Template](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/template)

                                    * [Top
                                    Sellers](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/top-sellers)
                                  header:
                                    anchor: global_global-objects
                          - title: Banner
                            route:
                              path: /banner
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Banners</h1>
                                - type: text
                                  data: "<b>Description:</b> Elements of marketing banners at page’s top and/or bottom\n\n<b>Handlebars Expressions:</b> `{{banner}}`, `{{{banner}}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n\t\t<td>banners</td>\n    <td>Blocks of static HTML content to define banners</td>\n  </tr>\n  <tr>\n\t\t<td><span class=\"indent1\">top</span></td>\n    <td>Array of HTML content/strings, for custom top-banner content; banners are populated from the BigCommerce control panel</td>\n  </tr>\n  <tr>\n\t\t<td><span class=\"indent1\">bottom</span></td>\n    <td>Array of HTML content/strings, for custom bottom-banner content; banners are populated from the BigCommerce control panel</td>\n  </tr>\n</table>"
                                - type: callout
                                  data:
                                    title: ' Handlebars Formatting Exception'
                                    type: warning
                                    body: >+
                                      Where a banner contains HTML, the banner
                                      helper must be placed in triple braces, as
                                      in this

                                      example: `{{{banner}}}`. (Double braces
                                      would escape the HTML.)

                          - title: Breadcrumbs
                            route:
                              path: /breadcrumbs
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Breadcrumbs</h1>
                                - type: text
                                  data: >-
                                    <b>Description:</b> Defines a page's
                                    breadcrumbs – available on virtually all
                                    pages that have a breadcrumb trail


                                    <b>Handlebars Expression:</b>
                                    `{{breadcrumbs}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>name</td>
                                        <td>Displayed name of this breadcrumb element</td>
                                      </tr>
                                      <tr>
                                        <td>url</td>
                                        <td>URL of this breadcrumb element</td>
                                      </tr>
                                    </table>
                          - title: Carousel
                            route:
                              path: /carousel
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Carousel</h1>
                                - type: text
                                  data: >-
                                    <b>Description:</b> A list of images, text,
                                    and style assets for a storefront’s image
                                    slide show


                                    <b>Handlebars Expression: </b>
                                    `{{carousel}}`


                                    <b>Object Properties:</b>


                                    <table>  
                                      <tr>    
                                        <td>Property</td>    
                                        <td>Description</td>  
                                      </tr>    
                                      <tr>    
                                        <td>swap_frequency</td>    
                                        <td>Indicates how often (in seconds) the slides will change; the value must be between 1 and 90,000 seconds</td>  
                                      </tr>    
                                      <tr>    
                                        <td>slides</td>    
                                        <td>Object containing properties for each slide in the slideshow</td>  
                                      </tr>    
                                      <tr>    
                                        <td><span class="indent1">image</span></td>    
                                        <td>Path to the image file used on this slide</td>  
                                      </tr>  
                                      <tr>    
                                        <td><span class="indent1">alt_text</span></td>    
                                        <td>Alt text for the image</td>  
                                      </tr>  
                                      <tr>    
                                        <td><span class="indent1">url</span></td>    
                                        <td>URL to which the image will link</td>  
                                      </tr>  
                                      <tr>    
                                        <td><span class="indent1">heading</span></td>    
                                        <td>Heading message defined by the merchant</td>  
                                      </tr>  
                                      <tr>    
                                      <td><span class="indent1">heading_color</span></td>    
                                      <td>Color of the heading text</td>  
                                      </tr>  
                                      <tr>    
                                        <td><span class="indent1">text</span></td>    
                                        <td>Subheading defined by the merchant</td>  
                                      </tr>  
                                      <tr>    
                                        <td><span class="indent1">text_color</span></td>    
                                        <td>Color of the subheading text</td>  
                                      </tr>  
                                      <tr>    
                                        <td><span class="indent1">button_text</span></td>    
                                        <td>Text displayed on a call-to-action button defined by the merchant</td>  
                                    </tr>  
                                      <tr>    
                                      <td><span class="indent1">button_text_color</span></td>    
                                      <td>Color of the button</td>  
                                    </tr>

                                    </table>
                          - title: Currency Selector
                            route:
                              path: /currency-selector
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Currency Selector</h1>
                                - type: text
                                  data: >-
                                    <b>Description:</b> A list of all supported
                                    currencies, and the currency that is
                                    actively in use in the storefront


                                    <b>Handlebars Expression:</b>
                                    `{{currency_selector}}`


                                    <b>Object Properties:</b>


                                    <table>  

                                    <tr>    
                                      <th>Property</th>   
                                      <th>Description</th>  
                                    </tr>  

                                    <tr>    
                                      <td>active_currency_id</td>    
                                      <td>ID of the currency actively in use in the storefront</td>  
                                    </tr>  

                                    <tr>    
                                      <td>active_currency_flag</td>    
                                      <td>Country flag used to represent the active currency</td>  
                                    </tr> 

                                    <tr>    
                                      <td>active_currency_name</td>    
                                      <td>Name of the active currency</td>  
                                    </tr>

                                    <tr>    
                                      <td>active_currency_code</td>    
                                      <td>Code for the active currency</td>  
                                    </tr>  

                                    <tr>    
                                      <td>currencies</td>    
                                      <td>List of all the currencies supported for this storefront</td>  
                                    </tr> 

                                    <tr>    
                                      <td><span class="indent1">is_active</span></td>    
                                      <td>Boolean that indicates whether this currency is active for use in the storefront</td>  
                                    </tr> 

                                    <tr>    
                                      <td><span class="indent1">switch_url</span></td>    
                                      <td>The URL to invoke a switch to this currency</td> 
                                    </tr> 

                                    <tr>    
                                     <td><span class="indent1"> id</span></td>    
                                     <td>ID of the currency</td>  
                                    </tr> 

                                    <tr>    
                                     <td><span class="indent1"> name</span></td>    
                                     <td>Name of the currency</td>  
                                    </tr> 
                                     <tr>    
                                      <td><span class="indent1"> flag</span></td>    
                                      <td>Country flag used to visually represent the currency</td>  
                                     </tr>
                                     </table>
                          - title: Categories
                            route:
                              path: /categories
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Categories</h1>
                                - type: text
                                  data: >-
                                    <b>Description:</b> A list of all product
                                    categories shown in the current page
                                    context; default sorting is by category id,
                                    from lowest to highest


                                    <b>Handlebars Expression:</b>
                                    `{{categories}}`


                                    <b>Object Properties:</b>


                                    <b>Object Properties:</b>

                                    <table>  
                                      <tr>   
                                        <td>Property</td>    
                                        <td>Description</td>  
                                      </tr>  
                                      <tr>    
                                        <td>id</td>    
                                        <td>ID of the top-level category listed</td>  
                                      </tr>  
                                      <tr>    
                                        <td>name</td>    
                                        <td>Name of the top-level category</td>  
                                      </tr>  
                                      <tr>    
                                        <td>description</td>    
                                        <td>Description of the top-level category (optional &ndash; when requested in front matter)</td>  
                                      </tr>  
                                      <tr>    
                                        <td>url</td>    
                                        <td>URL to the category page</td>  
                                      </tr>  
                                      <tr>    
                                        <td>count</td>    
                                        <td>Number of products in this category</td>  
                                      </tr>  
                                      <tr>    
                                        <td>children</td>    
                                        <td>List of child categories for this top-level category</td>  
                                      </tr>  
                                      <tr>    
                                        <td><span class="indent1"> id</span></td>    
                                        <td>ID of the child category</td>  
                                      </tr>  
                                      <tr>    
                                        <td><span class="indent1"> name</span></td>    
                                        <td>Name of the child category</td>  
                                      </tr>    
                                      <tr>    
                                        <td><span class="indent1"> description</span></td>    
                                        <td>Description of the child category (optional &ndash; when requested in front matter)</td>  
                                      </tr>  
                                      <tr>    
                                        <td><span class="indent1"> url</span></td>    
                                        <td>URL of the child category</td>  
                                      </tr>  
                                      <tr>    
                                        <td><span class="indent1"> count</span></td>    
                                        <td>Number of products in this child category</td> 
                                      </tr>
                                    </table>
                          - title: Faceted Search
                            route:
                              path: /faceted-search
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Faceted Search</h1>
                                - type: text
                                  data: "<b>Description:</b> Faceted-search object for searching globally, by category, or by brand\n\n<b>Handlebars Expression:</b> `{{faceted_search}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>facets</td>\n    <td>List of all search facets available</td>\n  </tr>\n  <tr>\n\t\t<td><b>selected</b></td>\n\t\t<td>Container for the selected search facets (selected facets contain properties below</i>)</td>\n  </tr>\n  <tr>\n\t<td><span class=\"indent1\">remove_all_url</span></td>\n    <td>URL to remove all selected search restrictions</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">items</span></td>\n    <td>Currently enabled search facets</td>\n  </tr>\n</table>"
                          - title: Featured Products
                            route:
                              path: /featured-products
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Featured Products</h1>
                                - type: text
                                  data: >-
                                    <b>Description:</b> Renders a list of all
                                    the featured products for the BigCommerce
                                    storefront.


                                    <b>Handlebars Expression:</b>
                                    `{{products.featured}}`


                                    <b>Object Properties:</b> References the
                                    [product card
                                    model](/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/common-product-card-model).


                                    <b> Usage Example: </b>


                                    The code example below displays the global
                                    `{{products.featured}}` object on the
                                    `cornerstone/templates/pages/home.html` page
                                    template from [Stencil's base Cornerstone
                                    theme](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/home.html#L5)
                                    (Github).


                                    First, you must declare the object using
                                    Front Matter. To declare the object, the
                                    following front matter must be placed at the
                                    top of the template HTML page. This
                                    following declaration also limits the number
                                    of featured products to be displayed:
                                - type: code
                                  data: |-
                                    ---
                                    products:
                                        [...]
                                        featured:
                                            limit: {{theme_settings.homepage_featured_products_count}} //limits the number of featured products to be displayed
                                    ---
                                  header:
                                    title: >-
                                      {{products.featured}} Front Matter
                                      Declaration
                                    subtitle: cornerstone/templates/pages/home.html
                                  config:
                                    mode: js
                                - type: text
                                  data: >+
                                    The `homepage_featured_products_count` limit
                                    is one of two relevant variables defined in
                                    [Cornerstone's `config.json`
                                    file](https://github.com/bigcommerce/cornerstone/blob/master/config.json#L45)
                                    (Github).

                                - type: code
                                  data: |-
                                    "settings": {
                                        [...]
                                        "homepage_featured_products_count": 8,
                                        [...]
                                        "homepage_featured_products_column_count": 4,
                                        [...]    
                                  header:
                                    subtitle: cornerstone/config.json
                                    title: '"settings" object'
                                - type: text
                                  data: >-
                                    In the body of [Cornerstone's `home.html`
                                    template](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/home.html#L27)
                                    (Github), the below Handlebars conditional
                                    statement is responsible for displaying the
                                    `{{products.featured}}` object. This is the
                                    object that we declared above using front
                                    matter.
                                - type: code
                                  data: "{{#if products.featured}}\n\t\t{{> components/products/featured products=products.featured \n    columns=theme_settings.homepage_featured_products_column_count}}\n{{/if}}\n"
                                  header:
                                    subtitle: cornerstone/templates/pages/home.html
                                    title: 'conditional {{products.featured}} view'
                                  config:
                                    mode: js
                                - type: text
                                  data: >-
                                    This above statement formats the _Featured
                                    Products_ display according to the
                                    `homepage_featured_products_column_count`
                                    variable, which is the second relevant
                                    variable defined in [Cornerstone's
                                    `config.json`
                                    file](https://github.com/bigcommerce/cornerstone/blob/master/config.json#L53)
                                    (Github).
                          - title: Footer
                            route:
                              path: /footer
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Footer</h1>
                                - type: text
                                  data: >-
                                    <b>Description:</b>The footer content for
                                    each storefront page


                                    <b>Handlebars Expression:</b> `{{footer}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>sitemap_url</td>
                                        <td>The URL to the sitemap, based on store’s SEO setting</td>
                                      </tr>
                                      <tr>
                                        <td>scripts</td>
                                        <td>Scripts to be loaded after the HTML has loaded; includes performance metrics</td>
                                      </tr>
                                    </table>
                          - title: HTML Head
                            route:
                              path: /html-head
                            data:
                              blocks:
                                - type: text
                                  data: >-
                                    <b>Description:</b> Data to be included in
                                    the HTML `<head>` element<br>


                                    <b>Handlebars Expression:</b>`{{head}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>character_set</td>
                                        <td>The character set to specify</td>
                                      </tr>
                                      <tr>
                                        <td>meta_tags</td>
                                        <td>Meta tags to improve store SEO</td>
                                      </tr>
                                      <tr>
                                        <td>title</td>
                                        <td>Current page’s title</td>
                                      </tr>
                                      <tr>
                                        <td>stylesheets</td>
                                        <td>CSS files to be included</td>
                                      </tr>
                                      <tr>
                                        <td>scripts</td>
                                        <td>Scripts to be loaded in the &lt;head&gt; tag</td>
                                      </tr>
                                      <tr>
                                        <td>favicon</td>
                                        <td>The store’s favicon (Favorite icon)</td>
                                      </tr>
                                      <tr>
                                        <td>rsslinks</td>
                                        <td>RSS feeds to improve SEO</td>
                                      </tr>
                                    </table>
                          - title: Is_ajax
                            route:
                              path: /is-ajax
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Is_Ajax</h1>
                                - type: text
                                  data: >-
                                    <b>Description:</b> Boolean; returns `true`
                                    if the current executing request is an Ajax
                                    request


                                    <b>Handlebars Expression:</b> `{{is_ajax}}`


                                    No properties available for this object.
                          - title: Login
                            route:
                              path: /login
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Login</h1>
                                - type: text
                                  data: >-
                                    <b>Description: </b>Object to handle
                                    customer login details<br>


                                    <b>Handlebars Expression:</b>
                                    `{{forms.login}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>came_from_checkout</td>
                                        <td>Boolean indicating whether the customer submitted login information at checkout</td>
                                      </tr>
                                      <tr>
                                        <td>error</td>
                                        <td>BC-defined message to display when customer’s login fails</td>
                                      </tr>
                                    </table>
                          - title: 'New Products '
                            route:
                              path: /new-products
                            data:
                              blocks:
                                - type: html
                                  data: <h1>New Products</h1>
                                - type: text
                                  data: >-
                                    **Description:** A list of new products for
                                    the BigCommerce storefront


                                    **Handlebars Expression:**`{{products.new}}`


                                    **Object Properties:** References the
                                    [product card
                                    model](/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/common-product-card-model).


                                    **Usage Example:**


                                    To access the global `{{products.new}}`
                                    object on your page, you must first use
                                    front matter to declare the object at the
                                    top of your page template. 


                                    The code example below declares the global
                                    `{{products.new}}` object on the
                                    `cornerstone/templates/pages/home.html` page
                                    template from [Stencil's base Cornerstone
                                    Theme](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/home.html#L3)
                                    (Github).
                                - type: code
                                  data: |-
                                    ---
                                    products:
                                        new:
                                            limit: {{theme_settings.homepage_new_products_count}}
                                    ---
                                  header:
                                    title: '{{products.new}} Front Matter Declaration'
                                    subtitle: cornerstone/templates/pages/home.html
                                  config:
                                    mode: html
                                - type: text
                                  data: >-
                                    The `homepage_featured_products_count` limit
                                    is one of two relevant variables defined in
                                    Cornerstone's `config.json` file (Github).
                                - type: code
                                  data: |2-
                                     "settings": {
                                        "homepage_new_products_count": 5,
                                        [...]
                                        "homepage_new_products_column_count": 4,
                                        [...]
                                  header:
                                    title: '"settings" object'
                                    subtitle: cornerstone/config.json
                                  config:
                                    mode: json
                                - type: text
                                  data: >-
                                    In the body of [Cornerstone's `home.html`
                                    template](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/home.html#L36)
                                    (Github), the below Handlebars conditional
                                    statement is responsible for displaying the
                                    `{{products.featured}}` object. This is the
                                    object that we declared above using front
                                    matter.
                                - type: code
                                  data: "{{#if products.new}}\n  {{> components/products/new products=products.new \t\n \tcolumns=theme_settings.homepage_new_products_column_count}}\n{{/if}}"
                                  header:
                                    title: 'conditional {{products.new}} view'
                                    subtitle: cornerstone/templates/pages/home.html
                                  config:
                                    mode: js
                                - type: text
                                  data: >-
                                    This above statement formats the _New
                                    Products_ display according to the
                                    `homepage_new_products_column_count`
                                    variable, which is the second relevant
                                    variable defined in [Cornerstone's
                                    `config.json`
                                    file](https://github.com/bigcommerce/cornerstone/blob/master/config.json#L46)
                                    (Github).
                          - title: 'Page Content '
                            route:
                              path: /page-content
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Page Content</h1>
                                - type: text
                                  data: >-
                                    <b>Description:</b> Defines elements of
                                    merchant’s store page


                                    <b>Handlebars Expression:</b> `{{page}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td>title</td>
                                        <td>Page title, to be used as the HTML <code>title</code> tag</td>
                                      </tr>
                                      <tr>
                                        <td>description</td>
                                        <td>Description for the page, to be used as the HTML <code>meta &gt; description</code> tag</td>
                                      </tr>
                                      <tr>
                                        <td>content</td>
                                        <td>HTML content of the page</td>
                                      </tr>
                                      <tr>
                                        <td>sub_pages</td>
                                        <td>Array of child pages</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">title</span></td>
                                        <td>Title of this child page</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">url</span></td>
                                        <td>URL of this child page</td>
                                      </tr>
                                    </table>
                          - title: Pages
                            route:
                              path: /pages
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Pages</h1>
                                - type: text
                                  data: "<b>Description:</b> A list of all web content pages for the BigCommerce storefront\n\n<b>Handlebars Expression:</b> `{{pages}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th> \n\t</tr> \n    <tr>\n      <td>name</td>\n      <td>Name of the page</td>\n    </tr> \n    <tr>\n      <td>url</td>\n      <td>URL of the page</td>\n    </tr>\n    <tr>\n      <td>children</td>\n      <td>List of child pages for this page</td>\n    </tr>\n    <tr>\n      <td><span class=\"indent1\"> name</span></td>\n      <td>Name of the child page</td>\n    </tr>\n    <tr>\n      <td><span class=\"indent1\"> url</span></td>\n      <td>URL of the child page</td>\n    </tr>\n</table>"
                          - title: Page Type Property
                            route:
                              path: /page-type-property
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Page Type Property</h1>
                                - type: text
                                  data: >+
                                    <b>Description:</b> A string representing
                                    the type of page currently displayed. <br>


                                    <b>Handlebars Expression:</b>
                                    `{{page_type}}`


                                    <b>Values:</b> The four most-commonly-used
                                    values for `{{page_type}}` are:


                                    * default (for a home page)

                                    * product (for a product page)

                                    * category (for a category page)

                                    * page (for a Web [static] page)


                                    All possible values for `{{page_type}}` are:


                                    | account | shippingaddressform |
                                    account_new_return | 

                                    |---|---|---|

                                    | account_addressbook | account_downloaditem
                                    | account_inbox | 

                                    | editaccount | account_orderstatus |
                                    account_orders | 

                                    | invoice_print | account_order |
                                    account_recentitems | 

                                    | account_saved_return | account_returns |
                                    wishlists | 

                                    | add-wishlist | wishlist |
                                    createaccount_thanks | 

                                    | createaccount | forgotpassword | login | 

                                    | getnewpassword | blog | blog_post | 

                                    | brand | brands | cart | 

                                    | category | compare | 403 | 

                                    | 404 | error | giftcertificates_balance | 

                                    | giftcertificates | giftcertificates_redeem
                                    | default | 

                                    | page | page_contact_form | product | 

                                    | rss | search | sitemap | 

                                    | newsletter_subscribe | unsubscribe |
                                    hibernation | 

                                    | maintenance |

                          - title: Pagination
                            route:
                              path: /pagination
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Pagination</h1>
                                - type: text
                                  data: >-
                                    <b>Description:</b> Defines pagination of
                                    storefront pages


                                    <b>Handlebars Expression:</b>
                                    `{{pagination}}`


                                    <b>Object Properties:</b>


                                    <table>
                                        <tr>   
                                          <th>Property</th>   
                                          <th>Description</th> 
                                        </tr> 
                                        <tr>   
                                          <td>next</td>   
                                          <td>Link to next page, if any</td> 
                                        </tr> 
                                        <tr>   
                                          <td>previous</td>   
                                          <td>Link to previous page, if any</td> 
                                        </tr> 
                                        <tr>   
                                          <td>sort</td>   
                                          <td>Field to sort by</td> 
                                        </tr> 
                                        <tr>   
                                          <td>current</td>   
                                          <td>Number representing which page (in the current collection) the customer is viewing</td> 
                                        </tr> 
                                          <tr>   
                                            <td>total</td>   
                                            <td>Total number of results, across all pages</td> 
                                          </tr> 
                                            <tr>   
                                              <td>links</td>   
                                              <td>Array of pages that surround the current page; displayed as a set of links, dynamically sized based on the current page number</td> 
                                            </tr> 
                                            <tr>   
                                              <td><span class="indent1">url</span></td>   
                                              <td>URL to this page of results</td> 
                                            </tr> 
                                            <tr>   
                                              <td><span class="indent1">number</span></td>   
                                              <td>The page number of this link, based on an index starting at 1</td> 
                                          </tr>
                                        </table>
                          - title: 'Search '
                            route:
                              path: /search
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Search</h1>
                                - type: text
                                  data: "<b>Description:</b> Defines search parameters for the merchant’s site<br>\n\n<b>Handlebars Expression:</b> `{{forms.search}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>query</td>\n    <td>Active search query, if available</td>\n  </tr>\n\n  <tr>\n    <td>section</td>\n    <td>Active search-results section: either content or product</td>\n  </tr>\n  \n  <tr>\n    <td>content_url</td>\n    <td>URL to the content section</td>\n  </tr>\n  \n  <tr>\n    <td>product_url</td>\n    <td>URL to the product section</td>\n  </tr>\n  \n  \n  <tr>\n    <td>name</td>\n    <td>Brand name</td>\n  </tr>\n  <tr>\n    <td>suggested_query</td>\n    <td>An alternative query – related to the current query – that can be offered to substitute for misspelled entries</td>\n  </tr>\n  <tr>\n    <td>has_suggestions</td>\n    <td>Boolean – true if there is at least one of brand results, category results, or a (non-null) suggested_query</td>\n  </tr>\n  <tr>\n    <td>brand_results</td>\n    <td>Array of brands that match the search query; default sorting is by brand id, from lowest to highest</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL of the brand</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Displayed name for the brand</td>\n  </tr>\n  <tr>\n    <td>category_results</td>\n    <td>An array of category paths matching the search query; used to populate category suggestions</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL of the category</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Displayed name for the category</td>\n  </tr>\n  <tr>\n    <td>values</td>\n    <td>Values of the submitted search form</td>\n  </tr>\n  <tr>\n    <td>brand</td>\n    <td>Any brand ID that customer has selected from drop-down list</td>\n  </tr>\n  <tr>\n    <td>price_from</td>\n    <td>Any minimum price the customer has specified</td>\n  </tr>\n  <tr>\n    <td>price_to</td>\n    <td>Any maximum price the customer has specified</td>\n  </tr>\n  <tr>\n    <td>featured_products</td>\n    <td>Whether customer has chosen to view featured products: null = no preference; 1 = only featured products; 2 = only non-featured products</td>\n  </tr>\n  <tr>\n    <td>free_shipping</td>\n    <td>Value indicating customer’s preference for free shipping within search results: null = no preference; 1 = free shipping only; 2 = paid shipping only</td>\n  </tr>\n  <tr>\n    <td>result_count</td>\n    <td>Combined number of returned results for product and content search</td>\n  </tr>\n  <tr>\n    <td>category_options</td>\n    <td>Array of options to present to customer as search-by-category fields</td>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>Category ID</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Displayed name of the category</td>\n  </tr>\n  <tr>\n    <td>state</td>\n    <td>If category contains children, and customer selects a child category: Whether that category’s display will default to closed (collapsed) or opened (expanded)</td>\n  </tr>\n  <tr>\n    <td>children</td>\n    <td>Array of objects representing a child category; recursively replicates the structure of its parent</td>\n  </tr>\n  <tr>\n    <td>content_results</td>\n    <td>Search results across blog posts and storefront pages (not products or categories)</td>\n  </tr>\n  <tr>\n    <td>title</td>\n    <td>Title of the result (title embedded in blog post or page)</td>\n  </tr>\n  <tr>\n    <td>content</td>\n    <td>Summary of text from the blog post or page (first 200 characters)</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL to the result</td>\n  </tr>\n  <tr>\n    <td>type</td>\n    <td>Either post (for blog posts) or page (for storefront pages)</td>\n  </tr>\n  <tr>\n\t\t<td>product_results</td>\n    <td>Results of customer’s last search by product (each result contains the below properties)</td>\n  </tr>\n  <tr>\n\t\t<td><span class=\"indent1\">products</span></td>\n    <td>List of search results for a product; points to <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/common-product-card-model\">product card model</a></td>\n  </tr>\n         <td><span class=\"indent1\">show_compare</span></td> \n         <td>Boolean corresponding to merchant’s control-panel selection whether or not to enable product comparisons </td> \n       </tr> \n       <tr> \n         <td><span class=\"indent1\">faceted_search_enabled</span>\n         </td> <td>Boolean that defines whether product-filtering search is enabled for the store</td> \n       </tr> \n       <tr> \n         <td><span class=\"indent1\">facets</span></td> \n         <td>All available search filters</td> \n       </tr> \n       <tr> \n         <td><span class=\"indent1\">pagination</span></td> \n         <td>References pagination model</td> \n       </tr> \n       <tr> \n         <td><span class=\"indent1\">selected</span></td> \n         <td>Currently selected filters</td> \n       </tr>\n</table>\n"
                          - title: Settings
                            route:
                              path: /settings
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Settings</h1>
                                - type: text
                                  data: "**Description:** Common settings shared across every BigCommerce storefront\n\n**Handlebars Expression:** `{{settings}}`\n\n**Object Properties:**\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>account_creation_enabled</td>\n    <td>Site-wide boolean value that indicates whether to allow customers to create accounts</td>\n  </tr>\n  <tr>\n    <td>show_product_rating</td>\n    <td>Site-wide boolean value that indicates whether to display product ratings (in numeric or star format) to visitors</td>\n  </tr>\n  <tr>\n    <td>show_product_reviews</td>\n    <td>Site-wide boolean value that indicates whether to display full-text product reviews to visitors</td>\n  </tr>\n  <tr>\n    <td>show_newsletter_box</td>\n    <td>Site-wide boolean value that indicates whether to display a mailing-list invite to visitors</td>\n  </tr>\n  <tr>\n    <td> gift_certificates_enabled</td>\n    <td>Site-wide boolean value that indicates whether to enable the gift certificate system for this store</td>\n  </tr>\n  <tr>\n    <td> blog_enabled</td>\n    <td>Site-wide boolean value that indicates whether the blog is visible for this store</td>\n  </tr>\n\t<tr>\n    <td> data_tag_enabled</td>\n    <td>Site-wide boolean that indicates whether GAEE is enabled in a theme. For <code>{{settings.data_tag_enabled}}</code> to be true, the <code>enhanced_ecommerce</code> key must be present in config.json and a GAEE experiment must be enabled along with GA property value set in <b>Advanced Settings</b> &gt; <b>Analytics</b> &gt; <b>GA</b> in the BigCommerce Control Panel</td>\n  </tr>\n  <tr>\n    <td>show_wishlist</td>\n    <td>Site-wide boolean value that indicates whether to allow customers to create wishlists</td>\n  </tr>\n  <tr>\n    <td>base_url</td>\n    <td>The normal shop URL</td>\n  </tr>\n  <tr>\n    <td>client_ip_address</td>\n    <td>IP address of the customer browsing the store</td>\n  </tr>\n  <tr>\n    <td>secure_base_url</td>\n    <td>The SSL-enabled, secure, shop URL</td>\n  </tr>\n  <tr>\n    <td>address</td>\n    <td>Store’s complete physical address, as entered by merchant in the Store Profile</td>\n  </tr>\n  <tr>\n    <td>store_name</td>\n    <td>Name of the BigCommerce store</td>\n  </tr>\n  <tr>\n    <td>store_logo</td>\n    <td>The store’s logo</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">title</span></td>\n    <td>Title for the logo &ndash; the text configured in the control panel under <code>Storefront Design</code> <code>Design Options</code> <code>Logo</code></td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">image</span></td>\n    <td>Optional image file, as a <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/stencil-image\">Stencil image</a> object</td>\n  </tr>\n  <tr>\n    <td>privacy_cookie</td>\n    <td>If enabled, a string containing merchant-customizable text for (European Union&ndash;required) cookie-setting notification; if disabled, a boolean with a value of <code>false</code></td>\n  </tr>\n  <tr>\n    <td>urls</td>\n    <td>Global URLs that the template can access – for example, the template could link to the cart page using <code>{{urls.cart}}</code></td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">home</span></td>\n    <td>Store’s home page</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">account</span></td>\n    <td>Collection of (customer and storefront) account-related URLs:</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\">index</span></td>\n    <td>Account index page</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\">orders</span></td>\n    <td>Collection of orders-related URLs:</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent3\">all</span></td>\n    <td>List of all orders</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent3\">save_new_return</span></td>\n    <td>URL to submit a New Return form</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\">update_action</span></td>\n    <td>URL to submit an Edit Account form</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\">returns</span></td>\n    <td>List of returns</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\">addresses</span></td>\n    <td>List of addresses; default sorting is by address id, from lowest to highest</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\">inbox</span></td>\n    <td>List of messages in customer’s inbox</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\">send_message</span></td>\n    <td>URL to submit a message to the merchant</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\">add_address</span></td>\n    <td>Link to Add Address form</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\">wishlists</span></td>\n    <td>Collection of wishlist-related URLs:</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent3\">add</span></td>\n    <td>URL to the Add Wishlist form</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent3\">edit</span></td>\n    <td>URL to the Edit Wishlist form</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent3\">delete</span></td>\n    <td>URL to delete a wishlist</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent3\">all</span></td>\n    <td>URL to view all wishlists</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\">details</span></td>\n    <td>URL to the Edit Account form</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\">recent_items</span></td>\n    <td>URL to a list of recently viewed items</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">brands</span></td>\n    <td>URL to view all brands; default sorting is by brand id, from lowest to highest</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">gift_certificate</span></td>\n    <td>Collection of gift-certificate–related URLs:</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\">purchase</span></td>\n    <td>URL to a form for purchasing a gift certificate</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\">redeem</span></td>\n    <td>URL to view redemption information</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\">balance</span></td>\n    <td>URL to check the balance of a gift certificate</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">auth</span></td>\n    <td>Collection of authorization-related URLs:</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\">login</span></td>\n    <td>URL to the login form</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\">check_login</span></td>\n    <td>URL to which to submit the login form</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\"> create_account</span></td>\n    <td>URL to the Create Account form page</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\"> save_new_account</span></td>\n    <td>URL to which to submit the Create Account form</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\">forgot_password</span></td>\n    <td>URL to the Forgot Password form</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\">send_password_email</span></td>\n    <td>Submission URL for the Forgot Password form</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\">save_new_password</span></td>\n    <td>Submission URL for saving a new password</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\">logout</span></td>\n    <td>URL for customer to log out of their account</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">product</span></td>\n    <td>Collection of product-related URLs</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\"> post_review</span></td>\n    <td>URL to submit a Write Review form </td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">cart</span></td>\n    <td>URL to the cart page</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">checkout </span></td>\n    <td>Collection of checkout related URLs</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\">single_address </span></td>\n    <td>URL for the customer to check out with a single shipping address</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\">multiple_address </span></td>\n    <td>URL for the customer to check out with multiple shipping addresses </td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">rss</span></td>\n    <td>Collection of RSS-related URLs:</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\">products</span></td>\n    <td>Collection of product-feed–related URLs:</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent3\">new</span></td>\n    <td>RSS feed of new products</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent3\">new_atom</span></td>\n    <td>RSS feed of new products, in Atom format</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent3\">popular</span></td>\n    <td>RSS feed of popular products</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent3\">popular_atom</span></td>\n    <td>RSS feed of popular products, in Atom format</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent3\">featured</span></td>\n    <td>RSS feed of featured products</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent3\">featured_atom</span></td>\n    <td>RSS feed of featured products, in Atom format</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent3\">search</span></td>\n    <td>RSS feed of products matching the active search query</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent3\">search_atom</span></td>\n    <td>RSS feed of products matching the active search query, in Atom format</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\">blog</span></td>\n    <td>RSS feed of recent blog posts</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\">blog_atom</span></td>\n    <td>RSS feed of recent blog posts, in Atom format</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">contact_us_submit</span></td>\n    <td>URL to submit the Contact Us form</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">search</span></td>\n    <td>URL to submit a search request</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">compare</span></td>\n    <td>A string String containing the URL to the products comparison page</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">sitemap</span></td>\n    <td>URL to the sitemap</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">subscribe</span></td>\n    <td>Collection of subscription-related URLs</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\">action</span></td>\n    <td>URL to which the the newsletter subscription will be submitted</td>\n  </tr>\n  <tr>\n    <td>money</td>\n    <td>List of child items that define the store’s default currency formatting</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">currency_token</span></td>\n    <td>Symbol for the currency</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">currency_location</span></td>\n    <td>Whether currency symbol appears at left or right of the quantity</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">decimal_token</span></td>\n    <td>Symbol for decimal separator</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">decimal_places</span></td>\n    <td>Number of decimal places to display</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">thousands_token</span></td>\n    <td>Symbol for thousands separator</td>\n  </tr>\n  <tr>\n    <td>returns_enabled</td>\n    <td>Boolean that indicates whether the control-panel setting for the returns system is enabled</td>\n  </tr>\n  <tr>\n    <td>tax_label</td>\n    <td>Defines the Tax Label (VAT, Sales Tax, etc.) that a merchant can set in the control panel’s Settings &gt; Tax page for display to customers</td>\n  </tr>\n  <tr>\n    <td>add_this</td>\n    <td>Object that defines links for the AddThis social sharing component</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">buttons</span></td>\n    <td>Array of buttons to display for AddThis social sharing</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\">service</span></td>\n    <td>String containing the name of this button's social-media service (<code>facebook</code>, <code>email</code>, <code>print</code>, <code>twitter</code>, <code>linkedin</code>, <code>google</code>, etc.)</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent2\">annotation</span></td>\n    <td>String containing HTML attributes associated with this button</td>\n  </tr>\n  <tr>\n    <td>maintenance</td>\n    <td>Object that manages information about the store when in maintenance (offline) mode</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">header</span></td>\n    <td>If store is in maintenance mode, string containing header text for the \"Down for Maintenance\" window displayed to visitors; otherwise, <code>null</code></td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">message</span></td>\n    <td>If store is in maintenance mode, string containing merchant-customizable body text (and optionally, HTML) for the \"Down for Maintenance\" window displayed to visitors; otherwise, <code>null</code></td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">notice</span></td>\n    <td>If store is in maintenance mode, one of three strings identifying the store's status, and generating a corresponding text notice to merchants about how to proceed: <code>AdminPrelaunchNotice</code> for preview stores, <code>AdminMaintenanceNotice</code> for active stores taken down for maintenance, or <code>AdminHibernationModeNotice</code> for deactivated stores; otherwise, <code>null</code></td>\n  </tr>\n  <tr>\n    <td>phone_number</td>\n    <td>The contact phone number for the store</td>\n  </tr>\n  <tr>\n    <td>rss_item_limit</td>\n    <td>An integer that sets a limit on the number of RSS items to display</td>\n  </tr>\n  <tr>\n    <td>password_requirements</td>\n    <td>Collection of properties representing BigCommerce requirements for customer-account passwords:</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">alpha</span></td>\n    <td>Regular expression representing required/acceptable alphabetic characters</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">numeric</span></td>\n    <td>Regular expression representing required/acceptable numeric characters</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">minlength</span></td>\n    <td>Integer representing minimum acceptable password length</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">error</span></td>\n    <td>String that passes a standard error message for noncompliant passwords</td>\n  </tr>\n  <tr>\n    <td>measurements</td>\n    <td>Collection of units-of-measure definitions, to be used when displaying product details:</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">length</span></td>\n    <td>Units of measure for product length</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">weight</span></td>\n    <td>Units of measure for product weight</td>\n  </tr>\n  <tr>\n    <td>[Time and date settings]</td>\n    <td>[The four settings below are configured in the control panel under <code>Store Setup</code> > <code>Store Settings</code> > <code>Language and Date</code> > <code>Date Settings</code>. Date formats follow <a href=\"http://us3.php.net/manual/en/function.date.php\">php conventions</a>.</td>\n  </tr>\n  <tr>\n    <td>store_time_zone</td>\n    <td>Store's time zone, as selected in the control panel's <code>Your Timezone</code> drop-down list</td>\n  </tr>\n  <tr>\n    <td>store_dst_correction</td>\n    <td>Whether or not this time zone observes Daylight Saving Time (boolean), as set by the control panel's <code>Enable DST Correction</code> check box</td>\n  </tr>\n  <tr>\n    <td>display_date_format</td>\n    <td>Brief display format/pattern for dates, as configured in the control panel's <code>Display Date Format</code> field</td>\n  </tr>\n  <tr>\n    <td>extended_display_date_format</td>\n    <td>Extended display format/pattern for dates, as configured in the control panel's <code>Extended Display Date Format</code> field</td>\n  </tr>\n</table>"
                          - title: Sitemap
                            route:
                              path: /sitemap
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Sitemap</h1>
                                - type: text
                                  data: >-
                                    <b>Description:</b>A list of all sitemap
                                    properties for this BigCommerce storefront:
                                    pages, categories, and brands.<br>


                                    <b>Handlebars Expression:</b> `{{sitemap}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td>subsection_url</td>
                                        <td>URL to subsection content (pages, categories, brands) of the sitemap</td>
                                      </tr>
                                      <tr>
                                        <td>label</td>
                                        <td>Subsection title (pages, categories, brands)</td>
                                      </tr>
                                      <tr>
                                        <td>body</td>
                                        <td>List of all sitemap subsections</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> url</span></td><td>URL to the page, category, or brand</td>
                                      </tr>
                                      <tr>
                                          <td><span class="indent1"> label</span></td>
                                          <td>Label of the page, category, or brand</td>
                                        </tr>
                                        <tr>
                                          <td><span class="indent1"> children </span></td>
                                          <td>Nested list of children within pages or categories; will be null for brands</td>
                                        </tr>
                                        <tr>
                                          <td><span class="indent2">url</span></td>
                                          <td>URL to the child page or category</td>
                                        </tr>
                                        <tr>
                                          <td><span class="indent2">label</span></td>
                                          <td>Label for the child page or category</td>
                                        </tr>
                                      </table>
                          - title: Social Links
                            route:
                              path: /social-links
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Social Links</h1>
                                - type: text
                                  data: >-
                                    <b>Description:</b> Array of all
                                    social-media site links for the
                                    storefront<br>


                                    <b>Handlebars Expression:</b>
                                    `{{social_media}}`


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>name</td>
                                        <td>Internal name of this social-media platform (e.g., "googleplus")</td>
                                      </tr>
                                      <tr>
                                        <td>url</td>
                                        <td>URL to point to, set by merchant in control panel (https://www.facebook.com/BigCommerce, etc.)</td>
                                      </tr>
                                      <tr>
                                        <td>position</td>
                                        <td>Display sort order for this platform within the social-media list</td>
                                      </tr>
                                      <tr>
                                        <td>display_name</td>
                                        <td>Displayed/formatted name of this social-media platform (e.g., “Google+”) </td>
                                      </tr>
                                    </table>
                          - title: Template Property
                            route:
                              path: /template-property
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Template Property</h1>
                                - type: text
                                  data: >-
                                    <b>Description:</b> A string containing the
                                    name of the root template currently being
                                    rendered in the page context. <br>


                                    <b>Handlebars Expression:</b> `{{template}}`


                                    <b>Values:</b> Values will reflect each
                                    theme's specific directory structure.
                                    Possible values include:


                                    * `pages/home`

                                    * `pages/brand` (for brand pages)

                                    * `pages/brands`

                                    * `pages/cart`

                                    * `pages/category` (for category pages)

                                    * `pages/contact-us`

                                    * `pages/page` (for Web [static] pages)

                                    * `pages/product` (for product pages)

                                    * `pages/errors/404`

                                    * `pages/auth/login`

                                    * `pages/custom/product/<some_page_name>`
                                    (for a custom product page)

                                    (etc.)
                          - title: Top Sellers
                            route:
                              path: /top-sellers
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Top Sellers</h1>
                                - type: text
                                  data: >-
                                    <b>Description:</b> Object to display a
                                    sidebar of top-selling products<br>


                                    <b>Handlebars Expression:</b>
                                    `{{products.top_sellers}}`


                                    <b>Object Properties:</b> References the <a
                                    href="/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/common-product-card-model">
                                    product card model </a>


                                    <b>Usage Example:</b>


                                    To access the
                                    global`{{products.top_sellers}}` object on
                                    your page, you must first use [front
                                    matter](/stencil-docs/front-matter/front-matter-attributes-reference)
                                    to declare the object at the top of your
                                    page template. For example, you would place
                                    this front-matter declaration at the top of
                                    your template file:


                                    ```

                                    ---

                                    products:
                                        top_sellers:
                                    ---

                                    ```
                    - title: Common Objects
                      route:
                        path: /common-objects
                      data:
                        children:
                          - title: Common Objects
                            route:
                              path: /common-onjects-overview
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Common Objects Overview</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#common_common-objects\">Common Objects Overview</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >
                                    Certain Stencil objects can be accessed
                                    through multiple other Stencil objects. For
                                    example, the image object is exposed through
                                    the Category, Product, Product Options, and
                                    other objects. Its structure is consistent
                                    for all objects/properties that access it. 


                                    This consistent behavior is true for each of
                                    the common objects documented in the
                                    following subsection: 

                                     * [Catalog Price](/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/catalog-price)
                                     * [Price](/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price)
                                     * [Price Range](/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price-range)
                                     * [Stencil Image](/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/stencil-image)
                                     * [Common Product Card Model](/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/common-product-card-model)
                          - title: 'Catalog Price '
                            route:
                              path: /catalog-price
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Catalog Price</h1>
                                - type: text
                                  data: "<b>Description:</b> Exposes catalog price- and currency-related properties in both raw numeric, and formatted string, formats.\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n\t\t<td><b>with_tax</b></td>\n\t\t<td>Price including tax (includes the <i>formatted</i> and <i>value</i> properties)</td>\n  </tr>\n  <tr>\n\t\t<td><i>formatted</i></td>\n    <td>String representation of the above price, including currency formatting</td>\n  </tr>\n  <tr>\n\t\t<td><i>value</i></td>\n    <td>Raw numeric value of the above price</td>\n  </tr>\n  <tr>\n\t\t<td><b>without_tax</b></td>\n\t\t<td>Price excluding tax (includes <i>formatted and value</i> properties)</td>\n  </tr>\n  <tr>\n\t\t<td><i>formatted</i></td>\n    <td>String representation of the above price, including currency formatting</td>\n  </tr>\n  <tr>\n\t\t<td><i>value</i></td>\n    <td>Raw numeric value of the above price</td>\n  </tr>\n  \n  <tr>\n\t\t<td><b>non_sale_price_with_tax</b></td>\n    <td>Non-sale price, including tax. Can be displayed alongside standard <a href=\"#with_tax\">with_tax</a> during sale events. (Includes <i>formatted and value</i> properties)</td>\n  </tr>\n  <tr>\n\t\t<td><i>formatted</i></td>\n    <td>String representation of the above price, including currency formatting</td>\n  </tr>\n  <tr>\n    <td><i>value</i></td>\n    <td>Raw numeric value of the above price</td>\n  </tr>\n  <tr>\n\t\t<td><b>non_sale_price_without_tax</b></td>\n    <td>Non-sale price, excluding tax. Can be displayed alongside standard <a href=\"#without_tax\">without_tax</a> during sale events. (Includes <i>formatted</i> and <i>value</i> properties) </td>\n  </tr>\n  <tr>\n\t\t<td><i>formatted</i></td>\n    <td>String representation of the above price, including currency formatting</td>\n  </tr>\n  <tr>\n\t\t<td><i>value</i></td>\n    <td>Raw numeric value of the above price</td>\n  </tr>\n \n  <tr>\n\t\t<td><b>rrp_with_tax</b></td>\n    <td>List (i.e., manufacturer’s suggested retail) price, including tax (Includes <i>formatted</i> and <i>value</i> properties)</td>\n  </tr>\n  <tr>\n\t\t<td><i>formatted</i></td>\n    <td>String representation of the above price, including currency formatting</td>\n  </tr>\n  <tr>\n\t\t<td><i>value</i></td>\n    <td>Raw numeric value of the above price</td>\n  </tr>\n  <tr>\n\t\t<td><b>rrp_without_tax</b></td>\n    <td>List (i.e., suggested retail) price, excluding tax (Includes <i>formatted</i> and <i>value</i> properties)</td>\n  </tr>\n  <tr>\n\t\t<td><i>formatted</i></td>\n    <td>String representation of the above price, including currency formatting</td>\n  </tr>\n  <tr>\n\t\t<td><i>value</i></td>\n    <td>Raw numeric value of the above price</td>\n  </tr>\n  <tr>\n\t\t<td><b>saved</b></td>\n    <td>Amount customer saved, compared to list price (Includes <i>formatted</i> and <i>value</i> properties) </td>\n  </tr>\n  <tr>\n\t\t<td><i>formatted</i></td>\n    <td>String representation of the above price, including currency formatting</td>\n  </tr>\n  <tr>\n\t\t<td><i>value</i></td>\n    <td>Raw numeric value of the above price</td>\n  </tr>\n  <tr>\n    <td>tax_label</td>\n    <td>Tax label (VAT, sales tax, etc.) displayed to customers</td>\n  </tr>\n  \n  <tr>\n    <td>price_range</td>\n    <td><a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price-range\">See Price Range Object</a> </td>\n\t</tr>   \n   <tr>\n\t\t <td><b>map_price</b></td>\n    <td>Minimum advertised price (Includes <i>formatted</i> and <i>value</i> properties)</td>\n  </tr>\n  <tr>\n\t\t<td><i>formatted</i></td>\n    <td>String representation of the above price, including currency formatting</td>\n  </tr>\n  <tr>\n\t\t<td><i>value</i></td>\n    <td>Raw numeric value of the above price</td>\n  </tr>\n</table>\n\n<b>Available through:</b> \n\n<b>Object/Property:</b> `{{product.price}}`"
                          - title: 'Price '
                            route:
                              path: /price
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Price</h1>
                                - type: text
                                  data: >-
                                    <b>Description:</b> Exposes price- and
                                    currency-related properties in both raw
                                    numeric, and formatted string, formats. 


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>formatted</td>
                                        <td>String representation of the price, including currency formatting</td>
                                      </tr>
                                      <tr>
                                        <td>value</td>
                                        <td>Raw numeric value of the price</td>
                                      </tr>
                                    </table>


                                    <b>Available through:</b>


                                    <b>Common Object:</b> <a
                                    href="/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/common-product-card-model">Common
                                    Product Card Model</a>


                                    <b>Object:</b> `{{category.shop_by_price}}`
                          - title: 'Price Range '
                            route:
                              path: /price-range
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Price Range</h1>
                                - type: text
                                  data: >-
                                    <b>Description:</b> For products with
                                    several variants with different prices, a
                                    price range is available which exposes the
                                    minimum and maximum variant price.


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td> <A NAME="with_tax"></a> min</td>
                                        <td>The minimum variant price for the product, in the form of a <a href="/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/common-product-card-model">Catalog Price Common Object</a></td>
                                      </tr>
                                      <tr>
                                        <td> <A NAME="without_tax"></a> max</td>
                                        <td>The maximum variant price for the product, in the form of a <a href="/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/common-product-card-model">Catalog Price Common Object</a>
                                    </td>
                                      </tr>
                                    </table>


                                    <b>Available through:</b>


                                    <b>Object/Property:</b><code>{{product.price}</code></a> 
                          - title: Stencil Image
                            route:
                              path: /stencil-image
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Stencil Image</h1>
                                - type: text
                                  data: >-
                                    <b>Description:</b> Exposes a URL and an
                                    "alt" string for images used in the Stencil
                                    framework


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>data</td>
                                        <td>Internal URL to product or category image</td>
                                      </tr>
                                      <tr>
                                        <td>alt</td>
                                        <td>Corresponding text to display for missing images, accessible screen readers, etc.</td>
                                      </tr>
                                    </table>


                                    <b>Available through:</b> 


                                    <b>Stencil Handlebars Helper:</b>
                                    `{{getImage}}`


                                    <b>Common Object:</b> <a
                                    href="/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/common-product-card-model">Common
                                    Product Card Model</a> 


                                    <b>Object/Property:</b> `{{category.image}}`


                                    <b>Arrays/Elements:</b>
                                    `{{product.options.image}}`,
                                    `{{product.images}}`,
                                    `{{downloads.items.images}}`,
                                    `{{downloads.items.thumbnail}}`,
                                    `{{category.subcategories.image}}`,
                                    `{{order.items.image}}`,
                                    `{{customer.orders.image}}`,
                                    `{{brands.image}}`,
                                    `{{order.items.shipping_rows.image}}` 


                                    <b> Usage Example: </b> 


                                    `{{getImage image "thumbnail"}}`
                          - title: Common Product Card Model
                            route:
                              path: /common-product-card-model
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Common Product Card Model</h1>
                                - type: text
                                  data: "<b>Description:</b> A model for a product’s basic, primary properties. Typically used for list components that show multiple products, each in its own \"card\" or panel.\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>ID of the product </td>\n  </tr>\n  <tr>\n    <td>sku</td>\n    <td>The product's SKU (stock keeping unit)/product code, as a string; if the SKU field is not populated, then null\n </td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Name of the product</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL to product detail page for the product</td>\n  </tr>\n  <tr>\n    <td>availability</td>\n    <td>Typical shipping time for the product; used to populate \"Usually ships within…\" fields</td>\n  </tr>\n  <tr>\n    <td>rating</td>\n    <td>Product’s rating</td>\n  </tr>\n  <tr>\n    <td>ratings</td>\n    <td>Number of reviews on which the rating is based</td>\n  </tr>\n  <tr>\n\t\t<td><b>brand</b></td>\n    <td>Brand properties for the product (includes the name property</td>\n  </tr>\n  <tr>\n    <td><i>name</i></td>\n    <td>Product’s brand name</td>\n  </tr>\n  <tr>\n    <td>add_to_cart_url</td>\n    <td>URL that adds this product to customer’s cart</td>\n  </tr>\n  <tr>\n    <td>price</td>\n    <td class=\"\">References the <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/catalog-price\">catalog price object</a>, to access price properties in both raw-numeric and formatted/string formats</td>\n  </tr>\n  <tr>\n    <td>summary</td>\n    <td>Summary description of the product</td>\n  </tr>\n  <tr>\n    <td>image</td>\n    <td>Default image for the product, in <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/stencil-image\">Stencil image format</a> <!-- <a href=\"/docs/handlebars-image-helpers\">Stencil image format</a> --> </td>\n  </tr>\n  <tr>\n    <td>images</td>\n    <td>Array of a product's images, in <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/stencil-image\">Stencil image format</a>; currently limited to 5 images </td>\n  </tr>\n  <tr>\n    <td>date_added</td>\n    <td>Date the product was added to this BigCommerce storefront</td>\n  </tr>\n  <tr>\n    <td>pre_order</td>\n    <td>Product’s availability for pre-order</td>\n  </tr>\n  <tr>\n    <td>release_date</td>\n    <td>Release date, if the product is set to pre-order status</td>\n  </tr>\n  <tr>\n    <td>show_cart_action</td>\n    <td>Boolean that indicates whether the product is available for purchase</td>\n  </tr>\n  <tr>\n    <td>has_options</td>\n    <td>Boolean that indicates whether customer is required to specify options when ordering the product</td>\n  </tr>\n  \n  <tr>\n    <td>stock_level</td>\n    <td>If inventory tracking is turned on: The number of items available for sale (0 or more). If inventory tracking is turned off: A \"null\" string. </td>\n  </tr>\n     \n  <tr>\n    <td>low_ stock_level</td>\n    <td>If inventory tracking is turned on: Sets a threshold low-stock level. You can use conditional logic to display a \"limited availability\" badge if the <code>stock_level</code> property's value falls below this threshold. If inventory tracking is turned off: A \"null\" string. </td>\n  </tr>\n   \n  <tr>\n    <td>qty_in_cart</td>\n    <td>Quantity of this item in the customer’s cart</td>\n  </tr>\n  <tr>\n    <td>out_of_stock_message</td>\n    <td>Text to display when the product is out of stock</td>\n  </tr>\n  \n  <tr>\n\t\t<td><b>custom_fields</b></td>\n    <td>Array of <a href=\"https://support.bigcommerce.com/articles/Public/Custom-Fields\">custom fields</a> for this product; custom fields can be used for purposes like: alternate brand name, merchandising title for the product, product type, \"gift idea\" indicator, etc.\n</td>\n  </tr>\n\n  <tr>\n\t\t<td><i>id</i></td>\n    <td>Unique (integer) identifier for this custom field</td>\n  </tr>\n\n  <tr>\n    <td><i>name</i></td>\n    <td>Name of this custom field</td>\n  </tr>\n\n  <tr>\n    <td><i>value</i></td>\n    <td>Value for this custom field</td>\n  </tr>\n</table>\n\n<b>Available through:</b>\n\n<b>Object:</b> <code>{{comparisons}} </code> \n\n<b>Arrays/Elements:</b> <code>{{product.related_products}}, {{product.similar_by_views}}, {{category.products}}, {{cart.suggested_products}}, {{customer.recently_viewed_products}} </code>\n\n<!-- :\"Common Product Card Model\" moved from \"Product Objects\" page -->"
                    - title: Other Objects & Properties
                      route:
                        path: /other-objects-and-properties
                      data:
                        children:
                          - title: 'Other Objects & Properties '
                            route:
                              path: /other-objects-and-properties-overview
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <h1>Other Objects and Properties
                                    Overview</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#other-objects_other-objects-and-props\">Other Objects and Properties Overview</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >
                                    ## Other Objects & Properties Overview


                                    This section covers the following objects.
                                    Note that in this section, each of the
                                    following reference pages contains multiple
                                    objects. For example, the Product Objects
                                    reference page contains all objects related
                                    to products not already covered. The objects
                                    in this section include:


                                    * Product Objects

                                    * Category Objects

                                    * Brand Objects

                                    * Cart Objects

                                    * Customer Objects

                                    * Blog Objects

                                    * Forms Objects
                          - title: Product
                            route:
                              path: /product-objects
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Product Objects</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#product-objects_product\">Product</a></li>\n    <li><a href=\"#product-objects_product-reviews\">Product Reviews</a></li>\n    <li><a href=\"#product-objects_related-products\">Related Products</a></li>\n    <li><a href=\"#product-objects_similar-products\">Similar Products by Customer Views</a></li>\n    <li><a href=\"#product-objects_product-videos\">Product Videos</a></li>\n    <li><a href=\"#product-objects_compare\">Compare</a></li>\n    <li><a href=\"#product-objects_download\">Download Item</a></li>\n    <li><a href=\"#product-objects_product-other\">Product Other Details</a></li>\n\t</ul>\n</div>"
                                - type: callout
                                  data:
                                    body: >-
                                      Also see Common Objects > Common Product
                                      Card Model, which documents the product
                                      object returned in collections.
                                    title: Other Product Objects
                                - type: text
                                  data: >-
                                    ## Product


                                    <b>Description:</b> Default property that
                                    provides detailed product data. Called on
                                    the default
                                    `<theme-name>/templates/pages/product.html`and
                                    `<theme-name>/templates/pages/amp/product.html`
                                    templates, and on several partials in the
                                    `<theme-name>/templates/components/`
                                    subdirectory: 


                                    * `account/returns-list.html`, 

                                    * `cart/item-options.html`, 

                                    * `products/add-to-cart.html`, 

                                    * `products/event-date.html`, 

                                    * `products/modals/writeReview.html`, 

                                    * `products/price.html`, 

                                    * `products/product-view.html`,

                                    * `amp/products/product-options.html`, 

                                    * `amp/products/product-view.html`, and 

                                    * `amp/products/product-view-details.html`.


                                    <b>Handlebars Expression:</b> `{{product}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>id</td>
                                        <td>Unique ID for the product</td>
                                      </tr>
                                      <tr>
                                        <td>sku</td>
                                        <td>Default product variant when no options are selected</td>
                                      </tr>
                                       <tr>
                                        <td>mpn</td>
                                        <td>Manufacturer Part Number</td>
                                      </tr>
                                       <tr>
                                        <td>gtin</td>
                                        <td>Global Trade Item Number</td>
                                      </tr>
                                      <tr>
                                        <td>url</td>
                                        <td>URL to the product detail page</td>
                                      </tr>
                                      <tr>
                                        <td>upc</td>
                                        <td>Optional UPC code for the product</td>
                                      </tr>
                                      <tr>
                                        <td>title</td>
                                        <td>Displayed name of the product</td>
                                      </tr>
                                      <tr>
                                        <td>description</td>
                                        <td>(HTML) description of the product</td>
                                      </tr>
                                      <tr>
                                        <td>detail_messages</td>
                                        <td>Status messages for display at the top of the product page</td>
                                      </tr>
                                      <tr>
                                        <td>min_purchase_quantity</td>
                                        <td>Minimum quantity that can be purchased at once</td>
                                      </tr>
                                      <tr>
                                        <td>max_purchase_quantity</td>
                                        <td>Maximum quantity that can be purchased at once</td>
                                      </tr>
                                      <tr>
                                        <td>can_purchase</td>
                                        <td>Boolean that indicates whether the product is available for purchase</td>
                                      </tr>
                                      <tr>
                                        <td>out_of_stock</td>
                                        <td>Boolean that indicates whether the product is out of stock</td>
                                      </tr>
                                      <tr>
                                        <td>out_of_stock_message</td>
                                        <td>Merchant-defined label to display when a product is out of stock</td>
                                      </tr>
                                      <tr>
                                        <td>cart_url</td>
                                        <td>URL to the customer’s shopping cart</td>
                                      </tr>
                                      <tr>
                                        <td>add_to_wishlist_url</td>
                                        <td>URL to add the product to the customer’s wishlist</td>
                                      </tr>
                                      <tr>
                                        <td>customizations</td>
                                        <td>Product customizations (for example, a T-shirt size); these correspond to <a href="https://support.bigcommerce.com/articles/Public/What-are-configurable-fields-and-how-do-I-create-them">configurable fields</a> and <a href="https://support.bigcommerce.com/articles/Public/Product-Options-Text-Fields#numbers">numeric-text</a> <a href="https://support.bigcommerce.com/articles/Public/Adding-Product-Options">product options</a> in the BigCommerce control panel</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">id</span></td>
                                        <td>Customization ID</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">display_name</span></td>
                                        <td>Label for this customization, as displayed to customers</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">type</span></td>
                                        <td>Customization type [<code>text</code>|<code>textarea</code>|<code>NumbersOnlyText</code>|<code>checkbox</code>|<code>select</code>|<code>file</code>]</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">required</span></td>
                                        <td>Boolean value that indicates whether customer must specify this customization in order to buy the product</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">condition</span></td>
                                        <td>Boolean value indicating whether to display this product's condition (new, used, or refurbished)</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">prefill</span></td>
                                        <td>Optional string value to prefill this field</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">&lt;values&gt;</span></td>
                                        <td>For <code>select</code> type, array of strings listing the available options</td>
                                      </tr>
                                      <tr>
                                        <td>
                                          <span class="indent1">&lt;file_types&gt;</span></td>
                                        <td>For <code>file</code> type, string representing the types of allowed files</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">&lt;file_size&gt;</span></td>
                                        <td>For <code>file</code> type, string representing the maximum file size allowed</td>
                                      </tr>

                                    <!-- Inserted new properties here for
                                    NumbersOnlyText type, MERC-159: -->
                                      <tr>
                                        <td><span class="indent1">integer_only</span></td>
                                        <td>For <code>NumbersOnlyText</code> type, boolean value indicating whether to restrict customer's entries to whole numbers only</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">default</span></td>
                                        <td>For <code>NumbersOnlyText</code> type, optional string representing a default number that customers can see and overwrite</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">limit_input</span></td>
                                        <td>For <span class="inline-code">NumbersOnlyText</span> type, boolean indicating whether to impose any limits on the numeric values that customers can enter as strings</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">limit_input_option</span></td>
                                        <td>For <code>NumbersOnlyText</code> type and <code>limit_input</code> = <code>true</code>, the type of limit: <code>lowest</code> or <code>highest</code></td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">lowest</span></td>
                                        <td>For <code>NumbersOnlyText</code> type and <code>limit_input</code> = <code>true</code>,  minimum allowable value; a value of <code>0</code> imposes no limit</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">highest</span></td>
                                        <td>For <code>NumbersOnlyText</code> type and <code>limit_input</code> = <code>true</code>,  maximum allowable value; a value of <code>0</code> imposes no limit</td>
                                      </tr>
                                      <tr>
                                        <td>options</td>
                                        <td>Options for color and pattern swatches displayed for this product</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">id</span></td>
                                        <td>Product ID</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">type</span></td>
                                        <td>String indicating size, color, swatch, etc.</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">display_name</span></td>
                                        <td>Option Name displayed in control panel for this option</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">required</span></td>
                                        <td>Boolean value that indicates whether customer must specify this option in order to buy the product</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">condition</span></td>
                                        <td>Boolean value indicating whether to display this product's condition (new, used, or refurbished)</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">values</span></td>
                                        <td>Array of data (color) or image (pattern) values</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent2">label</span></td>
                                        <td>Internal label for this value (not normally displayed to shoppers)</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent2">id</span></td>
                                        <td>ID for this value, unique within this values array</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent2">selected</span></td>
                                        <td>Boolean indicating whether this value is preselected as the option's default value, upon page load</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent2">data</span></td>
                                        <td>Each <code>values</code> member can contain either a <code>data</code> or an <code>image</code> member; <code>data</code> denotes a color</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent3">&lt;color value&gt;</span></td>
                                        <td>Hex code for this color</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent2">image</span></td>
                                        <td>
                                          Each <code>values</code> member can contain either a <code>data</code> or an <code>image</code> member; <code>image</code> denotes a pattern, in <a href="/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/stencil-image">Stencil image object format</a>. (Note: This <code>image</code> value replaces the <code>{{pattern}}</code> property, which was limited to 18 x 18 pixels, and will be deprecated.)</td>
                                      </tr>
                                      <tr>
                                        <td>price</td>
                                        <td>References the <a href="/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/catalog-price">catalog price object</a>, to access the product’s price</td>
                                      </tr>
                                      <tr>
                                        <td>weight</td>
                                        <td>Weight of the default variant</td>
                                      </tr>
                                      <tr>
                                        <td>height</td>
                                        <td>Height of the default variant</td>
                                      </tr>
                                      <tr>
                                        <td>width</td>
                                        <td>Width of the default variant</td>
                                      </tr>
                                      <tr>
                                        <td>depth</td>
                                        <td>Depth of the default variant</td>
                                      </tr>
                                      <tr>
                                        <td>rating</td>
                                        <td>Rating for the product</td>
                                      </tr>
                                      <tr>
                                        <td>num_reviews</td>
                                        <td>Number of reviews the product has</td>
                                      </tr>
                                      <tr>
                                        <td>bulk_discount_rates </td>
                                        <td>List of discount rates for the current product</td>
                                      </tr>
                                      <tr>
                                        <td>condition</td>
                                        <td>Condition of the product</td>
                                      </tr>
                                      <tr>
                                        <td>stock_level</td>
                                        <td>Current stock level of the product; will be null if storefront stock display is disabled by the merchant, or if the product lacks inventory tracking</td>
                                      </tr>
                                      <tr>
                                        <td>shipping</td>
                                        <td>Shipping properties for the product</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> fixed</span></td>
                                        <td>Boolean that indicates whether the product’s shipping price is fixed</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> price</span></td>
                                        <td><a href="/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price">Price object</a> that defines the shipping cost for this product (if shipping cost is fixed)</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> calculated</span></td>
                                        <td>Boolean that indicates whether the product’s shipping price is calculated at checkout</td>
                                      </tr>
                                      <tr>
                                        <td>stock_label</td>
                                        <td>Shows whether the product stock level is for on-hand merchandise or pre-orders.</td>
                                      </tr>
                                      <tr>
                                        <td>availability</td>
                                        <td>Optional availability message set by the merchant</td>
                                      </tr>
                                      <tr>
                                        <td>pre_order</td>
                                        <td>Availability of the product for pre-order</td>
                                      </tr>
                                      <tr>
                                        <td>release_date</td>
                                        <td>Release date, if the product is set to pre-order status</td>
                                      </tr>
                                      <tr>
                                        <td>error_message</td>
                                        <td>Potential error on the page (e.g.: out of stock, form validations)</td>
                                      </tr>
                                      <tr>
                                        <td>gift_wrapping</td>
                                        <td>Whether or not gift wrapping is enabled</td>
                                      </tr>
                                      <tr>
                                        <td>brand</td>
                                        <td>Brand of the product</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> name</span></td>
                                        <td>Displayed name of the brand</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> url</span></td>
                                        <td>URL to the brand page</td>
                                      </tr>
                                      <tr>
                                        <td>main_image</td>
                                        <td>Primary image to display when the product details page loads</td>
                                      </tr>
                                      <tr>
                                        <td>images</td>
                                        <td>List of all images for this product, in <a href="/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/stencil-image">Stencil image format</a> (as configured in config.json; used with the <code>getImage</code> Handlebars helper)</td>
                                      </tr>
                                      <tr>
                                        <td>pinterest_js</td>
                                        <td>Property to display Pinterest button</td>
                                      </tr>
                                      <tr>
                                        <td>facebook_like</td>
                                        <td>Property to display Facebook Like button</td>
                                      </tr>
                                      <tr>
                                        <td>warranty</td>
                                        <td>Optional warranty text set by the merchant</td>
                                      </tr>
                                      <tr>
                                        <td>meta_keywords</td>
                                        <td>Optional search keywords that merchants may enter in the control panel’s "Add a Product" or “Edit a Product” page, to characterize the product in meta tags and storefront searches </td>
                                      </tr>

                                      <tr>
                                        <td>tags</td>
                                        <td>Keywords by which this product can also be identified</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> name</span></td>
                                        <td>Name of the tag</td>
                                      </tr>

                                      <tr>
                                        <td>custom_fields </td>
                                        <td>Extra details to display about the product </td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> name</span></td>
                                        <td>Custom field name</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> value</span></td>
                                        <td>Custom field value</td>
                                      </tr>
                                      <tr>
                                        <td>event_date</td>
                                        <td>Property to handle a date-based product</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> name</span></td>
                                        <td>Name of the event</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> date_start</span></td>
                                        <td>Event’s start date range</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> date_end</span></td>
                                        <td>Event’s end date range</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> earliest_year</span></td>
                                        <td>Event’s starting year</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> latest_year</span></td>
                                        <td>Event’s ending year</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">type</span></td>
                                        <td>Type of event</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: product-objects_product
                                - type: text
                                  data: >-
                                    ## Product Reviews


                                    <b>Description:</b> A list of reviews
                                    related to this product. When
                                    filtering/limiting, reviews' default sorting
                                    is by review id, from lowest to highest.
                                    (Called on the default
                                    <code>&lt;theme-name&gt;/templates/pages/product.html</code><code>&lt;theme-name&gt;/templates/components/</code>
                                    subdirectory: 

                                    * <code>products/product-view.html</code>,

                                    *
                                    <code>products/modals/writeReview.html</code>,
                                    and 

                                    *
                                    <code>amp/products/product-view.html</code>.)


                                    <b>Handlebars Expression:</b>
                                    <code>{{product.reviews}}</code>


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td>start</td>
                                        <td>The review that starts the current page of reviews</td>
                                      </tr>
                                      <tr>
                                        <td>total</td>
                                        <td>Total number of reviews</td>
                                      </tr>
                                      <tr>
                                        <td>end</td>
                                        <td>Last review on this page</td>
                                      </tr>
                                      <tr>
                                        <td>show_review_email</td>
                                        <td>Boolean that indicates whether the Write Review form should have an input field for the reviewer’s e-mail address</td>
                                      </tr>
                                      <tr>
                                        <td>captcha</td>
                                        <td>reCAPTCHA public key (for validating human versus bot visitors)</td>
                                      </tr>
                                      <tr>
                                        <td>pagination</td>
                                        <td>References the pagination model</td>
                                      </tr>
                                      <tr>
                                        <td>list </td>
                                        <td>List of reviews</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> rating</span></td>
                                        <td>Product’s rating (1–5 stars)</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> title</span></td>
                                        <td>Title of the review</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> date</span></td>
                                        <td>Date the product was reviewed</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> text</span></td>
                                        <td>Text content of the product review</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> name</span></td>
                                        <td>Name of the person providing the review</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: product-objects_product-reviews
                                - type: text
                                  data: >
                                    ## Related Products


                                    <b>Description:</b> A list of products
                                    related to this product. (Called on the
                                    default
                                    `<theme-name>/templates/components/products/tabs.html`
                                    partial.)


                                    <b>Handlebars Expression:</b>
                                    `{{product.related_products}}`


                                    <b>Object Properties: </b>References the <a
                                    href="/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/common-product-card-model">product
                                    card model</a>.
                                  header:
                                    anchor: product-objects_related-products
                                - type: text
                                  data: >
                                    ## Similar Products by Customer Views


                                    **Description:** A list of products similar
                                    to a given product, based on customer’s
                                    product browsing history. (Called on the
                                    default
                                    <code>&lt;theme-name&gt;/templates/components/products/tabs.html</code>
                                    partial.)


                                    <b>Handlebars Expression:</b>
                                    <code>{{product.similar_by_views}}</code>


                                    <b>Object Properties:</b> References the <a
                                    href="/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/common-product-card-model">product
                                    card model</a>.
                                  header:
                                    anchor: product-objects_similar-products
                                - type: text
                                  data: >-
                                    ## Product Videos


                                    <b>Description:</b> A list of videos for a
                                    given product. (Called on the default
                                    <code>&lt;theme-name&gt;/templates/pages/product.html</code>
                                    template, and on the
                                    <code>&lt;theme-name&gt;/templates/components/amp/products/product-view.html</code>
                                    partial.)


                                    <b>Handlebars Expression:</b>
                                    <code>{{product.videos}}</code>


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>id</td>
                                        <td>ID of the product video</td>
                                      </tr>
                                      <tr>
                                        <td>title_short</td>
                                        <td>Short title of the product video</td>
                                      </tr>
                                      <tr>
                                        <td>title_long</td>
                                        <td>Long title of the product video</td>
                                      </tr>
                                      <tr>
                                        <td>description_long</td>
                                        <td>Long description of the product video</td>
                                      </tr>
                                      <tr>
                                        <td>description_short</td>
                                        <td>Short description of the product video</td>
                                      </tr>
                                      <tr>
                                        <td>length</td>
                                        <td>Duration of the product video</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: product-objects_product-videos
                                - type: text
                                  data: >-
                                    ## Compare


                                    **Description:** Property to display an
                                    array of products on product comparison
                                    pages. (Called on the default
                                    <code>&lt;theme-name&gt;/templates/pages/compare.html</code>
                                    template.)


                                    <b>Handlebars Expression:</b>
                                    <code>{{comparisons}}</code>


                                    <b>Object Properties:</b> References the <a
                                    href="/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/common-product-card-model">product
                                    card model</a>, plus the additional fields
                                    listed here:<br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td>availability</td>
                                        <td>How long this product usually takes to ship</td>
                                      </tr>
                                      <tr>
                                        <td>brand</td>
                                        <td>Object containing brand data for this product</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> url</span></td>
                                        <td>Brand URL for this product</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> name</span></td>
                                        <td>Brand name for this product</td>
                                      </tr>
                                      <tr>
                                        <td>remove_url</td>
                                        <td>URL to remove this product/column from the comparison</td>
                                      </tr>
                                      <tr>
                                        <td>custom_fields</td>
                                        <td>Array of additional product details – size, color, book's ISBN, DVD's release date, etc. – as name/value pairs</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> name</span></td>
                                        <td>Displayed name for this custom field</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> value</span></td>
                                        <td>Value for this custom field’s entry</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: product-objects_compare
                                - type: text
                                  data: >-
                                    ## Download Item


                                    <b>Description:</b> Property for digital
                                    (non-physical) products. (Called on the
                                    default
                                    <code>&lt;theme-name&gt;/templates/pages/account/download-item.html</code>template.)


                                    <b>Handlebars Expression:</b>
                                    <code>{{downloads}}</code>


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td>order_id</td>
                                        <td>ID for this order</td>
                                      </tr>
                                      <tr>
                                        <td>product_name</td>
                                        <td>Name of the digital product</td>
                                      </tr>
                                      <tr>
                                        <td>items</td>
                                        <td>Array of product components</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">name</span></td>
                                        <td>Name of this digital item</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">expired</span></td>
                                        <td>Boolean indicating whether customer’s access/subscription to this item has expired</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">days_remaining</span></td>
                                        <td>Number of days left in customer’s access/subscription to this item</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">downloads_remaining</span></td>
                                        <td>Number of times customer may download this item</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">size</span></td>
                                        <td>File size of this digital item (string, responsively formatted as: 240 KB, 1.1 MB, etc.)</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">description</span></td>
                                        <td>Description (if entered by merchant) for this item</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">id</span></td>
                                        <td>ID for this item</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">images</span></td>
                                        <td>List of all images for the product associated with this list of downloadable items (in <a href="/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/stencil-image">Stencil image format</a>)</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">thumbnail</span></td>
                                        <td>"Primary" image for the product associated with this list of downloadable items (in <a href="/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/stencil-image">Stencil image format</a>)</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: product-objects_download
                                - type: text
                                  data: >-
                                    ## Product Other Details


                                    <b>Description:</b> Property to display
                                    custom product details (such as a book's
                                    ISBN code, a DVD's release date, etc.).
                                    (Called on the default
                                    <code>&lt;theme-name&gt;/templates/components/products/product-view.html</code>
                                    and
                                    <code>&lt;theme-name&gt;/templates/components/amp/products/product-view-details.html</code>
                                    partials.)


                                    **Handlebars
                                    Expression:**`{{product.custom_fields}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>name</td>
                                        <td>Displayed name for this category of information</td>
                                      </tr>
                                      <tr>
                                        <td>value</td>
                                        <td>Displayed value for this product’s entry</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: product-objects_product-other
                          - title: Category
                            route:
                              path: /category-objects
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Category Objects</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#category_category\">Category</a></li>\n    <li><a href=\"#category_category-products\">Category Products</a></li>\n    <li><a href=\"#category_category-shop\">Category Shop by Price</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: "## Category\n\n**Description:**  The category object for the page calling the object. When retrieving a collection of categories, default sorting is by category `id`, from lowest to highest. (Called on the default `<theme-name>/templates/pages/category.html` template, and on several partials in the `<theme-name&gt;/templates/components/</code> subdirectory: <code>category/shop-by-price.html`,`category/sidebar.html`, and `amp/category/subcategories.html`)\n\n<b>Handlebars Expression:</b> `{{category}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>Unique ID for the category </td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Merchant-defined category name</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL for the category-specific page</td>\n  </tr>\n  <tr>\n    <td>description</td>\n    <td>Merchant-defined description of the category</td>\n  </tr>\n  <tr>\n    <td>image</td>\n    <td>Image representing this category, in <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/stencil-image\">Stencil image format</a></td>\n  </tr>\n  <tr>\n    <td>subcategories <!-- Possible change to `children`--></td>\n    <td>List of any child categories</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">id</span></td>\n    <td>Unique ID for the subcategory </td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">name</span></td>\n    <td>Name of the subcategory</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">url</span></td>\n    <td>URL to the subcategory</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">description</span></td>\n    <td>Merchant-defined description of the subcategory </td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">image</span></td>\n    <td>Image representing this subcategory, in <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/stencil-image\">Stencil image format</a></td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">product_count</span></td>\n    <td>Number of products in the subcategory. (Counts at the current level only &ndash; not recursive to deeper levels.)</td>\n  </tr>\n  <tr>\n  \t<td>detail_messages</td>\n    <td>Message displayed when a product is out of stock, and inventory settings are configured to redirect to a category: \"Sorry, the product you tried to view is currently out of stock, here are some similar products we have available.\" (This phrasing is set by the BigCommerce App.)</td>\n  </tr>\n  <tr>\n    <td>show_compare</td>\n    <td>Boolean that defines whether to show controls for product comparison</td>\n  </tr>\n  <tr>\n    <td>show_add_to_cart</td>\n    <td>Boolean that defines whether to show an Add to Cart button for this category</td>\n  </tr>\n  <tr>\n    <td>total_products</td>\n    <td>Count of the number of products in the category</td>\n  </tr>\n  <tr>\n    <td>faceted_search_enabled</td>\n    <td>Boolean that defines whether product-filtering search is enabled for the store</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">facets</span></td>\n    <td>Available search facets</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">pagination</span></td>\n    <td>References the pagination model</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\">selected</span></td>\n    <td>Selected search facets</td>\n  </tr>\n</table>"
                                  header:
                                    anchor: '#category_category'
                                - type: text
                                  data: >-
                                    ## Category Products


                                    **Description:** A list of products
                                    associated with this category. (Called on
                                    the default
                                    `<theme-name>/templates/pages/category.html`
                                    template, and on the
                                    `<theme-name>/templates/components/category/product-listing.html`
                                    partial.)


                                    **Handlebars Expression:**
                                    `{{category.products}}`


                                    **Object Properties:** References the 
                                    [product card
                                    model](/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/common-product-card-model).
                                  header:
                                    anchor: category_category-products
                                - type: text
                                  data: >-
                                    ## Category Shop by Price 


                                    <b>Description:</b> A list of price ranges,
                                    to enable customers to set price limits
                                    within a product category. Called on the
                                    default<code>&lt;theme-name&gt;/templates/components/category/shop-by-price.html</code>
                                    and
                                    <code>&lt;theme-name&gt;/templates/components/category/sidebar.html</code>
                                    partials.)


                                    <b>Handlebars Expression:</b>
                                    `{{category.shop_by_price}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>url</td>
                                        <td>URL of price-filtered product results for this category</td>
                                      </tr>
                                      <tr>
                                        <td>low</td>
                                        <td><a href="/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price">Price object</a> that defines the minimum price boundary </td>
                                      </tr>
                                      <tr>
                                        <td>high</td>
                                        <td><a href="/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price">Price object</a> that defines the maximum price boundary</td>
                                      </tr>
                                      <tr>
                                        <td>selected</td>
                                        <td><a href="/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price">Price object</a> that defines the currently selected price range</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: category_category-shop
                          - title: Brand
                            route:
                              path: /brand-objects
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Brand Objects</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#brand_brand\">Brand</a></li>\n\t\t<li><a href=\"#brand_brand-list\">Brand List</a></li>\n    <li><a href=\"#brand_shop-by-brand\">Category Shop by Price</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >-
                                    ## Brand


                                    **Description:** The brand object for the
                                    page calling the object. (Called on the
                                    default
                                    `<theme-name>/templates/pages/brand.html`
                                    template.)


                                    **Handlebars Expression:** `{{brand}}`


                                    <b>Object Properties:</b>

                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>show_compare</td>
                                        <td>Boolean corresponding to merchant’s control panel selection whether or not to enable product comparisons</td>
                                      </tr>
                                      <tr>
                                        <td>url</td>
                                        <td>URL of the brand page</td>
                                      </tr>
                                      <tr>
                                        <td>name</td>
                                        <td>Name of the brand </td>
                                      </tr>
                                      <tr>
                                        <td>pagination</td>
                                        <td>References the pagination model</td>
                                      </tr>
                                      <tr>
                                        <td>image</td>
                                        <td>Image used to visually represent the brand (i.e., logo)</td>
                                      </tr>
                                      <tr>
                                        <td>faceted_search_enabled</td>
                                        <td>Boolean that defines whether product-filtering search is enabled for the store</td>
                                      </tr>
                                      <tr>
                                        <td>facets</td>
                                        <td>A list of all possible search filters for this brand</td>
                                      </tr>
                                      <tr>
                                        <td>products</td>
                                        <td>An array of product card models</a></td>
                                      </tr>
                                      <tr>
                                        <td>selected</td>
                                        <td>An array of selected facets</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: brand_brand
                                - type: text
                                  data: >-
                                    ## Brand List


                                    <b>Description:</b> A list of brands with
                                    their basic data. Default sorting is by
                                    brand id, from lowest to highest. (Called on
                                    the default
                                    `<theme-name>/templates/pages/brands.html`
                                    template.)


                                    <b>Handlebars Expression:</b> `{{brands}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>url</td>
                                        <td>URL to this brand’s products listing</td>
                                      </tr>
                                      <tr>
                                        <td>name</td>
                                        <td>Name of the brand</td>
                                      </tr>
                                      <tr>
                                        <td>id</td>
                                        <td>Internal identifier for the brand </td>
                                      </tr>
                                      <tr>
                                        <td>image</td>
                                        <td>Stencil image object (if any) for the brand</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: brand_brand-list
                                - type: text
                                  data: >-
                                    ## Shop by Brand


                                    **Description:** Objects to enable customers
                                    to shop by brand. Returns top 10 brands, by
                                    product count. (Called on the default
                                    `<theme-name>/templates/components/brand/sidebar.html`
                                    and
                                    `<theme-name>/templates/components/common/footer.html`
                                    partials.)


                                    <b>Handlebars Expression:</b>
                                    `{{shop_by_brand}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td class="">links</td>
                                        <td class="">Array of links to individual brands</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">id</span></td>
                                        <td class="">ID for this brand</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">url</span></td>
                                        <td class="">URL for this brand</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">name</span></td>
                                        <td class="">Name of this brand</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">count</span></td>
                                        <td class="">Number of products matching this brand</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: brand_shop-by-brand
                          - title: Cart
                            route:
                              path: /cart-objects
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Cart Objects</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#cart_cart\">Cart</a></li>\n    <li><a href=\"#cart_cart-items\">Cart Items</a></li>\n    <li><a href=\"#cart_strikeout\">Strikeout Pricing Example</a></li>\n    <li><a href=\"#cart_cart-status\">Cart Status Message</a></li>\n    <li><a href=\"#cart_suggested\">Suggested Products</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: "## Cart\n\n<b>Description:</b> The cart-specific properties for the current session\n\n**Handlebars Expression:** `{{cart}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>quantity</td>\n    <td>Total number of items in the cart</td>\n  </tr>\n  <tr>\n    <td class=\"\">additional_checkout_buttons</td>\n    <td class=\"\">Generates checkout buttons for third-party payments (PayPal, Google Checkout, etc.)</td>\n  </tr>\n  <tr>\n    <td>show_primary_checkout_button</td>\n    <td>Boolean that determines whether to show a checkout button</td>\n  </tr>\n  <tr>\n    <td>show_multiple_address_shipping</td>\n    <td>Boolean: If >1 physical items are in the cart, and checkout button is displayed: whether to also display the \"Ship to multiple addresses\"/\"Multiple Shipping Addresses” user option</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">discount</td>\n    <td class=\"\">Discount being applied to the cart in the current session</td>\n  </tr>\n  <tr>\n    <td>gift_wrapping_cost</td>\n    <td>Price object that defines the cost associated with adding gift wrapping to the items in the cart</td>\n  </tr>\n  <tr>\n    <td>sub_total</td>\n\t\t<td>Price object</a> that defines the total cost of all the items in the cart. Might or might not include tax, based on the tax display settings the merchant has configured. Excludes shipping, discounts, and gift wrapping.</td>\n  </tr>\n  <tr>\n    <td>grand_total</td>\n    <td>Price object that defines the total cost of all the items in the cart. Incorporates estimated shipping, discounts, taxes, and gift wrapping.</td>\n  </tr>\n  <tr>\n    <td class=\"\">shipping_handling</td>\n    <td class=\"\">Current configuration of the shipping estimator for this session’s current cart; will be null/undefined if the cart contains no physical products</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">handling_cost</span></td>\n    <td class=\"\">Price object that defines the handling cost for the carted items (if any)</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">show_estimator</span></td>\n    <td class=\"\">Boolean indicating whether the merchant wants to show the shipping estimator to customers</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent2\"> countries</span></td>\n    <td class=\"\">Countries available to ship to</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent2\"> states</span></td>\n    <td class=\"\">List of states/provinces/regions for the country</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent2\"> selected_state</span></td>\n    <td class=\"\">The state/province/region that the customer selected for the shipping estimate</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"><span class=\"indent2\"> selected_zip</span></td>\n    <td class=\"\">The ZIP/postal code that the customer selected for the shipping estimate</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"><span class=\"indent2\"> selected_city</span></td>\n    <td class=\"\">The city/town that the customer selected for the shipping estimate</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"><span class=\"indent2\"> shipping_cost</span></td>\n    <td class=\"\"><a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price\">Price object</a> that defines shipping cost</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent2\"> provider</span></td>\n    <td class=\"\">Shipping provider associated with this shipping estimate</td>\n  </tr>\n  <tr>\n    <td class=\"\">coupons</td>\n    <td class=\"\">List of coupons applied to the cart; default sorting is by coupon <span class=\"inline-code\">id</span>, from lowest to highest</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> id</span></td>\n    <td class=\"\">Unique ID of the coupon</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> code</span></td>\n    <td class=\"\">Code associated with the coupon</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> discount</span></td>\n    <td class=\"\">Discount associated with the coupon</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> type</span></td>\n    <td class=\"\">Coupon type</td>\n  </tr>\n  <tr>\n    <td class=\"\">gift_certificates</td>\n    <td class=\"\">List of gift certificates applied to the cart</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> id</span></td>\n    <td class=\"\">Unique system ID for the gift certificate</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> code</span></td>\n    <td class=\"\">Customer code used to identify the gift certificate</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> remaining</span></td>\n    <td class=\"\"><a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price\">Price object</a> that defines the amount remaining on the gift certificate</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> used</span></td>\n    <td class=\"\"><a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price\">Price object</a> that defines the amount already used on the gift certificate</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> remove_url</span></td>\n    <td class=\"\">URL to remove gift certificate from the cart</td>\n  </tr>\n  <tr>\n    <td class=\"\">taxes</td>\n    <td class=\"\">List of all applicable taxes for the cart</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> name</span></td>\n    <td class=\"\">Name of the applied tax</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> cost</span></td>\n    <td class=\"\"><a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price\">Price object</a> that defines the cost of the applied tax</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> included</span></td>\n    <td class=\"\">Boolean that indicates whether taxes are included in the total price for the cart’s contents</td>\n  </tr>\n</table>"
                                  header:
                                    anchor: cart_cart
                                - type: text
                                  data: "## Cart Items\n\n<b>Description:</b> A list of items added to the cart in the current session\n\n<b>Handlebars Expression:</b> `{{cart.items}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td class=\"\">id</td>\n    <td class=\"\">Unique system ID for the item in the cart</td>\n  </tr>\n  <tr>\n    <td class=\"\">quantity</td>\n    <td class=\"\">Quantity of the item being ordered</td>\n  </tr>\n  <tr>\n    <td class=\"\">type</td>\n    <td class=\"\">String indicating the type of purchase: either \"Item\" or \"GiftCertificate\"</td>\n  </tr>\n  <tr>\n    <td class=\"\">can_modify</td>\n    <td class=\"\">Boolean indicating whether the customer may modify the quantity of, or remove, this cart item</td>\n  </tr>\n  <tr>\n    <td class=\"\">remove_url</td>\n    <td class=\"\">URL to remove this item from the cart</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">sku</td>\n    <td class=\"\">SKU for this cart item</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">If type == Item</td>\n    <td class=\"\">If the item in the cart is a purchasable product, these properties are available:</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">product_id</span></td>\n    <td class=\"\">Product ID for the cart item</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">name</span></td>\n    <td class=\"\">Product name of the cart item</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">url</span></td>\n    <td class=\"\">Link to the product page for the cart item</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">availability</span></td>\n    <td class=\"\">An optional availability message set by the merchant</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">image</span></td>\n    <td class=\"\">Product image for the cart item</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">event_date</span></td>\n    <td class=\"\">Chosen event date for event-based products</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">show_wrapping_options</span></td>\n    <td class=\"\">Boolean indicating whether the wrapping options are shown</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">rrp</span></td>\n    <td class=\"\"><a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price\">Price object</a> that defines the cart item's list price (MSRP); can be used to display struck-out list prices, as explained <a href=\"#strikeout\">here</a></td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">price</span></td>\n    <td class=\"\"><a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price\">Price object</a> that defines the unit price of the cart item, after discounts; to see how this and the next three price properties relate to each other, please see <a href=\"/docs/cart-price-properties\">Cart Price Properties</a></td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">price_discounted</span></td>\n    <td class=\"\"><a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price\">Price object</a> that defines the unit price, after all cart discounts and promotions</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">total</span></td>\n    <td class=\"\"><a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price\">Price object</a> that defines the total price (price * quantity) of the cart item</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">total_discounted</span></td>\n    <td class=\"\"><a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price\">Price object</a> that defines the total price (price * quantity), after all cart discounts and promotions</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">brand</span></td>\n    <td class=\"\">Brand properties</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent2\"> name</span></td>\n    <td class=\"\">The product’s brand name</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">release_date</span></td>\n    <td class=\"\">If a pre-order product was added to the cart,  displays a message about when the item is expected to ship to the customer</td>\n  </tr>\n  <tr>\n    <td class=\"\">gift_wrapping</td>\n    <td class=\"\">Gift-wrapping options</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> name</span></td>\n    <td class=\"\">Name of the gift-wrapping option</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> price</span></td>\n    <td class=\"\"><a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price\">Price object</a> that defines the price of the gift-wrapping option</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> message</span></td>\n    <td class=\"\">Customer-defined message for the gift wrapping </td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> remove_url</span></td>\n    <td class=\"\">URL to remove the gift-wrapping option</td>\n  </tr>\n  <tr>\n    <td class=\"\">options</td>\n    <td class=\"\">Options chosen when product was added to cart</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> name</span></td>\n    <td class=\"\">Name of the option</td>\n  </tr>\n  <tr>\n    <td><span class=\"indent1\"> value</span></td>\n    <td class=\"\">Value of the option</td>\n  </tr>\n  \n  <tr>\n\t\t<td>bulk_pricing</td>\n    <td>Properties for applying bulk-pricing discounts to cart items</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> base_price </span></td>\n    <td class=\"\">Price per item before any bulk discount applied</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> discount_amount </span></td>\n    <td class=\"\">Bulk-discount amount per item, if applicable; otherwise, null</td>\n  </tr>  \n\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> discount_percentage </span></td>\n    <td class=\"\">Bulk-discount percentage per item, if applicable; otherwise, null</td>\n  </tr>  \n   \n  <tr>\n    <td class=\"\">configurable_fields</td>\n    <td class=\"\">Custom product fields set when product was added to cart</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> name</span></td>\n    <td class=\"\">Name of the custom option</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> value</span></td>\n    <td class=\"\">Value of the custom option</td>\n  </tr>\n  <tr>\n    <td class=\"\">If type == GiftCertificate</td>\n    <td class=\"\">If the item in the cart is a gift certificate, these properties are available:</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> name</span></td>\n    <td class=\"\">Sender’s name </td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> edit_url</span></td>\n    <td class=\"\">URL to edit the gift certificate</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> recipient</span></td>\n    <td class=\"\">Recipient’s name</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> price</span></td>\n    <td class=\"\"><a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price\">Price object</a> that defines the gift certificate’s basic price</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> total</span></td>\n    <td class=\"\"><a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price\">Price object</a> that defines the gift certificate’s total cost, with applicable taxes included</td>\n  </tr>\n</table>"
                                  header:
                                    anchor: cart_cart-items
                                - type: text
                                  data: >-
                                    ## Strikeout Pricing Example


                                    As a theme developer, you can use the
                                    `{{cart.items.rrp}}` property to display
                                    strike-out pricing in the Cart context. Here
                                    is the general approach:


                                    In your
                                    `<theme-name>/templates/components/cart/content.html`
                                    file, as you iterate over the list of items
                                    in the cart, you would check each item's
                                    `type`. (No `rrp` property is available
                                    where the `type` is `GiftCertificate`.)


                                    If the type is `Item`, then you would check
                                    the {{cart.items.rrp}} value. If the value
                                    is _not_ `null`, then you would know that
                                    you can display a strike-out price for the
                                    item. Below is a sample code skeleton:


                                    ```

                                    {{#each cart.items}}
                                       ...
                                      {{#if type '==' 'GiftCertificate'}}
                                          {{#if rrp}}
                                              ... /* your code to display strike-thru pricing */
                                          {{else}}
                                              ... /* your code to display normal pricing */
                                          {{/if}}
                                      {{/if}}
                                     ```

                                    For further details about catalog price
                                    properties, please see [Catalog Price
                                    Object: How Properties
                                    Interact](/stencil-docs/conditional-logic-examples/catalog-price-object).
                                    For usage examples of the `{{cart.items}}`
                                    `price` and `total` properties, please see
                                    [Cart Price
                                    Properties](/stencil-docs/conditional-logic-examples/cart-price-relationships).
                                  header:
                                    anchor: cart_strikeout
                                - type: text
                                  data: >-
                                    ## Cart Status Message


                                    <b>Description:</b> A list of relevant
                                    messages for the cart in the current session


                                    <b>Handlebars Expression:</b>
                                    `{{cart.status_messages}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>message</td>
                                        <td>System-generated messages for the cart</td>
                                      </tr>
                                      <tr>
                                        <td>type</td>
                                        <td>Type of message: error, info, or success</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: cart_cart-status
                                - type: text
                                  data: >-
                                    ## Suggested Products


                                    <b>Description:</b> A list of suggested
                                    products, based on cart contents; displays
                                    only if enabled by the `cart.suggestions`
                                    front-matter attribute, and only immediately
                                    after a product is added to the cart


                                    <b>Handlebars Expression:</b>
                                    `{{cart.suggested_products}}`


                                    <b>Object Properties:</b> References
                                    standard product card model.
                                  header:
                                    anchor: cart_suggested
                          - title: Customer
                            route:
                              path: /customer-objects
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Customer Objects</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#customer_customer\">Customer</a></li>\n    <li><a href=\"#customer_order-details\">Order Details</a></li>\n    <li><a href=\"#customer_recent-items\">Recent Items</a></li>\n    <li><a href=\"#customer_customer-wishlists\">Customer Wishlists</a></li>\n    <li><a href=\"#customer_wishlist-details\">Wishlist Details</a></li>\n    <li><a href=\"#customer_account-order-shipments\">Account Order Shipments</a></li>\n    <li><a href=\"#customer_account-orders\">Account Orders</a></li>\n    <li><a href=\"#customer_account-returns\">Account Returns</a></li>\n    <li><a href=\"#customer_account-new-returns\">Account New Return</a></li>\n    <li><a href=\"#customer_create-account\">Create Account</a></li>\n    <li><a href=\"#customer_shipping-addresses\">Shipping Addresses</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >-
                                    ## Customer


                                    **Description:** Customer-specific
                                    properties for a storefront customer object.
                                    When filtering/limiting, customers' default
                                    sorting is by customer id, from lowest to
                                    highest. (Called on several partials in the
                                    `<theme-name>/templates/components/`
                                    subdirectory: 

                                    `page/contact-us-form.html`,

                                    `common/subscription-form.html`,

                                    `account/address-list.html`,

                                    `account/messages-form.html`, and

                                    `account/wishlist-list.html`.)


                                    **Handlebars Expression:** `{{customer}}`


                                    **Object Properties:**


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td>id</td>
                                        <td>Customer’s ID</td>
                                      </tr>
                                      <tr>
                                        <td>name</td>
                                        <td>Customer’s name</td>
                                      </tr>
                                      <tr>
                                        <td>email</td>
                                        <td>Customer’s email address</td>
                                      </tr>
                                      <tr>
                                        <td>phone</td>
                                        <td>Customer’s phone number</td>
                                      </tr>

                                      <tr>
                                        <td>store_credit</td>
                                        <td>Customer’s store credit</td>
                                      </tr>

                                      <tr>
                                        <td>customer_group_id</td>
                                        <td>ID of this customer's group</td>
                                      </tr>

                                      <tr>
                                        <td>customer_group_name</td>
                                        <td>Name of this customer's group</td>
                                      </tr>

                                      <tr>
                                        <td>num_new_messages</td>
                                        <td>Number of unread messages for this customer</td>
                                      </tr>
                                      <tr>
                                        <td>num_wishlists</td>
                                        <td>Number of wishlists for this customer</td>
                                      </tr>
                                      <tr>
                                        <td>shipping_address</td>
                                        <td>Shipping address used for the order</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> id</span></td>
                                        <td>Unique, system-generated ID</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> first_name</span></td>
                                        <td>Customer’s shipping (first) name</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> last_name</span></td>
                                        <td>Customer’s shipping (last) name</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> company</span></td>
                                        <td>Customer's shipping company name</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> address1</span></td>
                                        <td>Customer's shipping address, first line</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> address2</span></td>
                                        <td>Customer's shipping address, second line</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> city</span></td>
                                        <td>Customer's shipping city</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> state</span></td>
                                        <td>Customer's shipping state</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> zip</span></td>
                                        <td>Customer's shipping zip</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> country</span></td>
                                        <td>Customer's shipping country</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> phone</span></td>
                                        <td>Customer's shipping phone number</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> state_id</span></td>
                                        <td>ID for customer's shipping state/province/region
                                    </td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> country_id</span></td>
                                        <td>ID for customer's shipping country</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> destination</span></td>
                                        <td>Type of delivery destination: residential or business/commercial</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> last_used</span></td>
                                        <td>Timestamp when this address was last used as a shipping address</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> form_session_id</span></td>
                                        <td>Used for custom shipping forms</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: customer_customer
                                - type: text
                                  data: >-
                                    ## Order Details


                                    **Description:** The order properties for a
                                    specific order, usable on the order details
                                    page. (Called on the default
                                    `<theme-name>/templates/pages/account/orders/details.html`
                                    and
                                    `<theme-name&gt;/templates/pages/account/orders/invoice.html`
                                    templates, and on the
                                    `<theme-name&gt;/templates/components/account/order-contents.html`
                                    partial.)


                                    **Handlebars Expression:** `{{order}}`


                                    **Object Properties:**


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td>date</td>
                                        <td>Date of the order</td>
                                      </tr>
                                      <tr>
                                        <td>id</td>
                                        <td>Unique, system-generated ID</td>
                                      </tr>
                                      <tr>
                                        <td>total</td>
                                        <td>Price object that defines the order’s total value</td>
                                      </tr>
                                      <tr>
                                        <td>status</td>
                                        <td>Order status code</td>
                                      </tr>
                                      <tr>
                                        <td>status_text</td>
                                        <td>Status text associated with the status code for the order</td>
                                      </tr>
                                      <tr>
                                        <td>returns_enabled</td>
                                        <td>Boolean that indicates whether merchant allows products from the order to be returned</td>
                                      </tr>
                                      <tr>
                                        <td>reorder_url</td>
                                        <td>URL to place reorders for items in this order</td>
                                      </tr>
                                      <tr>
                                        <td>invoice_url</td>
                                        <td>URL to display an invoice for this order</td>
                                      </tr>
                                      <tr>
                                        <td>is_complete</td>
                                        <td>Boolean indicating that the order has been completed</td>
                                      </tr>
                                      <tr>
                                        <td>comments</td>
                                        <td>Customer’s message about the order</td>
                                      </tr>
                                      <tr>
                                        <td>is_digital</td>
                                        <td>Boolean indicating whether the order will be delivered digitally</td>
                                      </tr>
                                      <tr>
                                        <td>items</td>
                                        <td>List of items for the order</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> order_product_id</span></td>
                                        <td>Product ID</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> name</span></td>
                                        <td>Product Name</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> quantity</span></td>
                                        <td>Quantity Ordered</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> refunded</span></td>
                                        <td>Price object that defines the value of this product that has been refunded</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> event_date </span></td>
                                        <td>A chosen event date for the product</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> price</span></td>
                                        <td>Price object that defines the product’s price</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">shipping_rows</span></td>
                                        <td>Array of shipping addresses, for each item in the order</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent2">address</span></td>
                                        <td>Street address to ship to</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent2">city</span></td>
                                        <td>City to ship to</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent2">state </span></td>
                                        <td>State to ship to</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent2">zip</span></td>
                                        <td>Postal/ZIP code to ship to</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent2">country</span></td>
                                        <td>Country to ship to</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent2"> gift_wrapping_name</span></td>
                                        <td>Name of the gift-wrapping option used</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent2"> type</span></td>
                                        <td>Type of purchase; value is one of: physical, digital, giftcertificate</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent2"> download_url</span></td>
                                        <td>URL at which customer can download digital item</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent2"> image</span></td>
                                        <td>The image of the order’s first product, in <a href="/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/stencil-image">Stencil image format</a></td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent2">show_reorder</span>
                                    </td>
                                        <td>Boolean indicating whether the customer should see a button for reordering items on the Account Order Details page</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent2"> reorder_message</span></td>
                                        <td>An error message to be displayed when the customer attempts to reorder items that can’t be reordered</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent2"> options</span></td>
                                        <td>A list of options selected when this product was purchased</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent3"> name</span></td>
                                        <td>Display name for the option ("Small", “Medium”, etc.)</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent3"> value</span></td>
                                        <td>Value that customer selected for the option</td>
                                      </tr>
                                      <tr>
                                        <td>billing_address</td>
                                        <td>Billing address used for the order</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> full_name</span></td>
                                        <td>Customer's billing name</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> company</span></td>
                                        <td>Customer's billing company name</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> address_lines</span></td>
                                        <td>Customer's billing address</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> city</span></td>
                                        <td>Customer's billing city</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> state</span></td>
                                        <td>Customer's billing state</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> country</span></td>
                                        <td>Customer billing country</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> zip</span></td>
                                        <td>Customer billing ZIP</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> phone</span></td>
                                        <td>Customer billing phone number</td>
                                      </tr>
                                      <tr>
                                        <td>shipping_address_count</td>
                                        <td>Number of shipping addresses the customer has specified for this order</td>
                                      </tr>
                                      <tr>
                                        <td>shipping_address</td>
                                        <td>Shipping address used for the order</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> full_name</span></td>
                                        <td>Customer's shipping name</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> company</span></td>
                                        <td>Customer's shipping company name</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> address_lines</span></td>
                                        <td>Customer's shipping address</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> city</span></td>
                                        <td>Customer's shipping city</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> state</span></td>
                                        <td>Customer's shipping state</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> country</span></td>
                                        <td>Customer's shipping country</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> zip</span></td>
                                        <td>Customer's shipping zip</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> phone</span></td>
                                        <td>Customer's shipping phone number</td>
                                      </tr>
                                      <tr>
                                        <td>payment_method</td>
                                        <td>Customer’s payment method for this order (payment gateway)</td>
                                      </tr>
                                      <tr>
                                        <td>card_number_last_four</td>
                                        <td>Last four digits of customer’s credit card</td>
                                      </tr>
                                      <tr>
                                        <td>total_rows</td>
                                        <td>A list of “total” rows containing total pricing information</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> label</span></td>
                                        <td>The label of the total row (Subtotal, Tax, Grand Total, etc.)</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: customer_order-details
                                - type: text
                                  data: >-
                                    ## Recent Items


                                    **Description:** Items the customer has
                                    recently viewed. (Called on the default
                                    `<theme-name>/templates/pages/account/recent-items.html`
                                    template.)


                                    **Handlebars Expression:**
                                    `{{customer.recently_viewed_products}}`


                                    **Object Properties:** References the
                                    standard [product card
                                    model](/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/common-product-card-model).
                                  header:
                                    anchor: customer_recent-items
                                - type: text
                                  data: >
                                    ## Customer Wishlists


                                    **Description:** Array of product wishlists,
                                    specific to this store, for the customer.
                                    (Called on the default
                                    `<theme-name>/templates/components/account/wishlist-list.html`
                                    partial.)


                                    **Handlebars Expression:**
                                    `{{customer.wishlists}}` 


                                    **Object Properties:**


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>id</td>
                                        <td>Unique system ID of the wishlist</td>
                                      </tr>
                                      <tr>
                                        <td>num_items</td>
                                        <td>Number of items in the wishlist</td>
                                      </tr>
                                      <tr>
                                        <td>name</td>
                                        <td>Customer-defined name of the wishlist</td>
                                      </tr>
                                      <tr>
                                        <td>is_public</td>
                                        <td>Boolean value indicating whether the wishlist is publicly available </td>
                                      </tr>
                                      <tr>
                                        <td>is_editable</td>
                                        <td>Boolean indicating whether the "Remove Item" button, and account navigation controls, are displayed (i.e., whether the customer viewing the wishlist is this wishlist’s owner)</td>
                                      </tr>
                                      <tr>
                                        <td>token</td>
                                        <td>Unique public token for the wishlist</td>
                                      </tr>
                                      <tr>
                                        <td>view_url</td>
                                        <td>URL to view the wishlist</td>
                                      </tr>
                                      <tr>
                                        <td>edit_url</td>
                                        <td>URL to edit the wishlist</td>
                                      </tr>
                                      <tr>
                                        <td>delete_url</td>
                                        <td>URL to delete the wishlist</td>
                                      </tr>
                                      <tr>
                                        <td>share_url</td>
                                        <td>URL to share the wishlist</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: customer_customer-wishlists
                                - type: text
                                  data: "## Wishlist Details\n\n**Description:** Wishlist information for a specific wishlist. (Called on the default `<theme-name>/templates/pages/account/wishlist-details.html` template and `<theme-name>/templates/components/account/wishlist-item-list.html`partial.)\n\n**Handlebars Expression:** `{{wishlist}}`\n\n**Object Properties:**\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>Unique system ID for the wishlist</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Customer-defined name of the wishlist</td>\n  </tr>\n  <tr>\n    <td>is_public</td>\n    <td>Boolean value indicating whether the wishlist is publicly available </td>\n  </tr>\n  <tr>\n    <td>token</td>\n    <td>Unique public token for the wishlist</td>\n  </tr>\n  <tr>\n    <td>share_url</td>\n    <td>URL used to share the wishlist</td>\n  </tr>\n  <tr>\n    <td>items</td>\n\t\t<td>List of items in the wishlist; extends <a href=\"\">the product card model</a>, adding the extra properties below:</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> id</span></td>\n    <td class=\"\">Unique system ID for this wishlist item</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> product_id</span></td>\n    <td class=\"\">Product ID for the item</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> remove_url</span></td>\n    <td class=\"\">URL to remove the product from the wishlist</td>\n  </tr>\n</table>"
                                  header:
                                    anchor: customer_wishlist-details
                                - type: text
                                  data: "## Account Order Shipments\n\n<b>Description:</b> Objects to manage shipments associated with a specific order details for the current customer. (Called on the default `<theme-name&gt;/templates/pages/account/orders/details.html` template.) \n\n**Handlebars Expression:** `{{shipments}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>date_shipped</td>\n    <td>Shipping date for this shipment</td>\n  </tr>\n  <tr>\n    <td>shipping_provider</td>\n    <td>Carrier for this shipment</td>\n  </tr>\n  <tr>\n    <td>shipping_method</td>\n    <td>Shipping method for this shipment</td>\n  </tr>\n  <tr>\n    <td>show_shipping_method</td>\n    <td>Boolean indicating whether to display the shipping method to the customer</td>\n  </tr>\n  <tr>\n    <td>shipping_track</td>\n    <td>Tracking information for this shipment</td>\n  </tr>\n  <tr>\n\t\t<td><span class=\"indent1\">url</span></td>\n    <td>Tracking URL for this shipment</td>\n  </tr>\n  <tr>\n\t\t<td><span class=\"indent1\">number</span></td>\n    <td>Tracking number for this shipment</td>\n  </tr>\n</table>"
                                  header:
                                    anchor: customer_account-order-shipments
                                - type: text
                                  data: >-
                                    ## Account Orders


                                    **Description:** Objects to manage completed
                                    orders for the current customer. By default,
                                    orders sort by order id, from lowest to
                                    highest. (Called on the default
                                    `<theme-name>/templates/pages/account/orders/all.html`and
                                    `<theme-name&gt;/templates/pages/account/orders/completed.html` 
                                    templates, and on the
                                    `<theme-name>/templates/components/account/orders-list.html`
                                    partial.)


                                    **Handlebars Expression:**
                                    `{{customer.orders}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td>pagination</td>
                                        <td>References pagination model</td>
                                      </tr>
                                      <tr>
                                        <td>date</td>
                                        <td>Date this order was placed</td>
                                      </tr>
                                      <tr>
                                        <td>last_update_date</td>
                                        <td>Date this order was last updated</td>
                                      </tr>
                                      <tr>
                                        <td>id</td>
                                        <td>ID for this order</td>
                                      </tr>
                                      <tr>
                                        <td>total</td>
                                        <td>Total value of this order</td>
                                      </tr>
                                      <tr>
                                        <td>status</td>
                                        <td>Status of this order ("Completed" or other)</td>
                                      </tr>
                                      <tr>
                                        <td>return_url</td>
                                        <td>URL for returning items in this order</td>
                                      </tr>
                                      <tr>
                                        <td>reorder_url</td>
                                        <td>URL for reordering items in this order</td>
                                      </tr>
                                      <tr>
                                        <td>details_url</td>
                                        <td>URL for details about this order</td>
                                      </tr>
                                      <tr>
                                        <td>payment_instructions</td>
                                        <td>Text field defined by merchant as to payment instructions for manual gateways such as “Bank Deposit”</td>
                                      </tr>
                                      <tr>
                                        <td>image</td>
                                        <td>Image of the order’s first product, in Stencil image format</td>
                                      </tr>
                                      <tr>
                                        <td>items</td>
                                        <td>Array of products in this order</td>
                                      </tr>
                                        <tr>
                                        <td><span class="indent1">name</span></td>
                                        <td>Name of this product</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">quantity</span></td>
                                        <td>Quantity of this product ordered</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">refunded</span></td>
                                        <td>Price object that defines the amount of this product that has been refunded</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">expected_release_date</span></td>
                                        <td>Expected ship date if the product is set to pre-order status</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">type</span></td>
                                        <td>Type of purchase; value is one of: physical, digital, giftcertificate</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">download_url</span></td>
                                        <td>URL for customer to download a digital product</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">image</span></td>
                                        <td>The image for this ordered product</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">options</span></td>
                                        <td>Array of additional product details (size, color, etc.), as name/value pairs</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent2">name</span></td>
                                        <td>Displayed name for this category of information</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent2">value</span></td>
                                        <td>Displayed value for this product’s entry</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: customer_account-orders
                                - type: text
                                  data: "## Account Returns\n\n**Description:** Objects to manage returns for the current customer. (Called on the default `<theme-name>/templates/pages/account/returns.html` template.) \n\n**Handlebars Expression:** `{{customer.returns}}`\n\n**Object Properties:**\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td>date_requested</td>\n    <td>Date on which the customer requested this return</td>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>The ID for this return</td>\n  </tr>\n  <tr>\n    <td>quantity</td>\n    <td>Quantity of items returned</td>\n  </tr>\n  <tr>\n    <td>reason</td>\n    <td>Reason for return; merchants can define actions beyond the default strings created with each store, which are: Received Wrong Product, Wrong Product Ordered, Not Satisfied With The Product, and There Was A Problem With The Product</td>\n  </tr>\n  <tr>\n    <td>action</td>\n    <td>Return action; merchants can define actions beyond the default set created with each store (Repair, Replacement, or Store Credit)</td>\n  </tr>\n  <tr>\n    <td>comments</td>\n    <td>Comments that the customer entered with the return request</td>\n  </tr>\n  <tr>\n    <td>status</td>\n    <td>Status of the return: Pending, Received, Authorized, Repaired, \nRefunded, Rejected, or Cancelled</td>\n  </tr>\n  <tr>\n    <td>product</td>\n    <td>Array of products included in the return</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL for this product</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Name of this product</td>\n  </tr>\n  <tr>\n    <td>options</td>\n    <td>Array of additional product details (size, color, etc.), as name/value pairs</td>\n  </tr>\n  <tr>\n\t\t<td><span class=\"indent1\">name</span></td>\n    <td>Displayed name for this category of information</td>\n  </tr>\n  <tr>\n\t\t<td><span class=\"indent1\">value</span></td>\n    <td>Displayed value for this product’s entry</td>\n  </tr>\n  <tr>\n    <td>image</td>\n    <td>Image for this product</td>\n  </tr>\n</table>"
                                  header:
                                    anchor: customer_account-returns
                                - type: text
                                  data: >-
                                    ## Account New Return


                                    **Description:** Objects to handle a new
                                    return for the current customer. (Called on
                                    the default
                                    `<theme-name>/templates/pages/account/add-return.html`
                                    template.)


                                    **Handlebars Expression:**
                                    `{{forms.return}}`


                                    **Object Properties:**


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>order_id</td>
                                        <td>ID for the original order</td>
                                      </tr>
                                      <tr>
                                        <td>reasons</td>
                                        <td>Reasons for return</td>
                                      </tr>
                                      <tr>
                                        <td>actions</td>
                                        <td>Return actions: an array of strings arbitrarily defined by the merchant: refund, exchange, credit, etc.</td>
                                      </tr>
                                      <tr>
                                        <td>order_products</td>
                                        <td>Array of products from the order that are available to return</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">id</span></td>
                                        <td>ID for the product</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">name</span></td>
                                        <td>Name of this product</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">product_id</span></td>
                                        <td>ID for this product</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">price</span></td>
                                        <td>Price object that defines this product’s price</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">quantity</span></td>
                                        <td>Quantity of the product returned</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">options</span></td>
                                        <td>Array of additional product details (size, color, etc.), as name/value pairs</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent3">name</span></td>
                                        <td>Displayed name for this category of information</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent3">value</span></td>
                                        <td>Displayed value for this product’s entry</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: customer_account-new-return
                                - type: text
                                  data: >-
                                    ## Create Account


                                    **Description:** Object to enable the
                                    current customer to create a store account.
                                    (Called on the default
                                    `<theme-name&gt;/templates/pages/auth/create-account.html`
                                    template.)


                                    **Handlebars Expression:**
                                    `{{forms.create_account}}`


                                    **Object Properties:**


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td>recaptcha</td>
                                        <td>Objects for integrating the Google reCAPTCHA service to distinguish human visitors from ’bots (automated agents)</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">enabled</span></td>
                                        <td>Boolean indicating whether reCAPTCHA is enabled for this store</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">public_key</span></td>
                                        <td>Public key (site key) that reCAPTCHA returns upon merchant’s enabling CAPTCHA security in Store Settings > Display Settings</td>
                                      </tr>
                                      <tr>
                                        <td>address_fields</td>
                                        <td>Array of form fields that define each shipping address for this customer; for details, see this repo: <NOBR><a href="https://github.com/bigcommerce/cornerstone/tree/master/templates/components/common/forms">https://github.com/bigcommerce/cornerstone/tree/master/templates/components/common/forms</a></nobr></td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">class_name</span></td>
                                        <td>Specifies a CSS class (defined in the theme's <code>/assets/scss/</code> subdirectory) to apply to a field within the array; for corresponding control-panel steps, see this support article:
                                     <NOBR><a href="https://support.bigcommerce.com/articles/Public/Editing-Form-Fields#advanced-settings">https://support.bigcommerce.com/articles/Public/Editing-Form-Fields#advanced-settings</a> </td>
                                      </tr>
                                      <tr>
                                        <td>account_fields</td>
                                        <td>Object of form fields; for details, see this repo:
                                     <NOBR><a href="https://github.com/bigcommerce/cornerstone/tree/master/templates/components/common/forms">https://github.com/bigcommerce/cornerstone/tree/master/templates/components/common/forms</a></nobr></td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">class_name</span></td>
                                        <td>Specifies a CSS class to apply to a field within the array; for corresponding control-panel steps, see:
                                    <a
                                    href="https://support.bigcommerce.com/articles/Public/Editing-Form-Fields#advanced-settings">https://support.bigcommerce.com/articles/Public/Editing-Form-Fields#advanced-settings</a></td>
                                      </tr>
                                      <tr>
                                        <td>error</td>
                                        <td>BCApp generated message to display when customer’s account creation fails</td>
                                      </tr>
                                      <tr>
                                        <td>checking_out</td>
                                        <td>Boolean indicating whether customer created the account during a purchase checkout</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: customer_create-account
                                - type: text
                                  data: >-
                                    ## Shipping Addresses


                                    **Description:** Object to enable the
                                    customer to enter shipping and contact
                                    information. (Called on the default
                                    `<theme-name>/templates/components/account/address-list.html`
                                    partial.)


                                    **Handlebars
                                    Expression:**`{{customer.addresses}}`


                                    **Object Properties:**


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>id</td>
                                        <td>ID for this shipping address</td>
                                      </tr>
                                      <tr>
                                        <td>customer_id</td>
                                        <td>ID for this customer</td>
                                      </tr>
                                      <tr>
                                        <td>first_name</td>
                                        <td>First name to ship to</td>
                                      </tr>
                                      <tr>
                                        <td>last_name</td>
                                        <td>Last name to ship to</td>
                                      </tr>
                                      <tr>
                                        <td>company</td>
                                        <td>Company name to ship to</td>
                                      </tr>
                                      <tr>
                                        <td>address1</td>
                                        <td>Street (etc.) address, first line</td>
                                      </tr>
                                      <tr>
                                        <td>address2</td>
                                        <td>Street (etc.) address, second line</td>
                                      </tr>
                                      <tr>
                                        <td>city</td>
                                        <td>City to ship to</td>
                                      </tr>
                                      <tr>
                                        <td>state</td>
                                        <td>State/province/region to ship to</td>
                                      </tr>
                                      <tr>
                                        <td>zip</td>
                                        <td>Postal/ZIP code to ship to</td>
                                      </tr>
                                      <tr>
                                        <td>country</td>
                                        <td>Country to ship to</td>
                                      </tr>
                                      <tr>
                                        <td>phone</td>
                                        <td>Addressee’s phone number</td>
                                      </tr>
                                      <tr>
                                        <td>state_id</td>
                                        <td>ID for destination state/province/region</td>
                                      </tr>
                                      <tr>
                                        <td>country_id</td>
                                        <td>ID for destination country</td>
                                      </tr>
                                      <tr>
                                        <td>destination</td>
                                        <td>residential or commercial</td>
                                      </tr>
                                      <tr>
                                        <td>last_used</td>
                                        <td>Boolean, indicating whether this was the last-used shipping address for this customer</td>
                                      </tr>
                                      <tr>
                                        <td>full_name</td>
                                        <td>Full name of addressee</td>
                                      </tr>
                                      <tr>
                                        <td>edit_url</td>
                                        <td>URL for customer to edit this shipping address</td>
                                      </tr>
                                      <tr>
                                        <td>delete_url</td>
                                        <td>URL for customer to delete this shipping address </td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: customer_shipping-addresses
                          - title: 'Blog '
                            route:
                              path: /blog-objects
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Blog Objects</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#blog_blog\">Blog</a></li>\n    <li><a href=\"#blog_blog-post\">Blog Post</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >-
                                    _These objects are called on the default
                                    `<theme-name>/templates/components/blog/post.html`
                                    partial._


                                    ## Blog


                                    **Description:** Blog-specific properties
                                    for the blog feature within BigCommerce
                                    storefronts 


                                    **Handlebars Expression:** `{{blog}}`


                                    **Object Properties:**


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>name</td>
                                        <td>Blog name</td>
                                      </tr>
                                      <tr>
                                        <td>url</td>
                                        <td>Blog custom url</td>
                                      </tr>
                                      <tr>
                                        <td>pagination</td>
                                        <td>References pagination model</td>
                                      </tr>
                                      <tr>
                                        <td>posts </td>
                                        <td>A list of posts for the blog index; default sorting is by date_published,<br> from most-recent to earliest</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">author</span></td>
                                        <td>Author of the blog post</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">title</span></td>
                                        <td>Title of the blog post</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">url</span></td>
                                        <td>URL of the blog entry</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">body</span></td>
                                        <td>Body of the blog entry</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">thumbnail</span></td>
                                        <td>Image thumbnail for the blog entry, in <a href="/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/stencil-image">Stencil image format</a></td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">date_published</span></td>
                                        <td>Date the blog entry was published</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">social</span></td>
                                        <td>Social media tags for the blog entry</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1">tags </span></td>
                                        <td>Tags for the blog</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent2">name</span></td>
                                        <td>Name for the tag</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent2">url</span></td>
                                        <td>URL for the tag</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: blog_blog
                                - type: text
                                  data: >-
                                    ## Blog Post


                                    <b>Description:</b> Individual blog post
                                    object


                                    <b>Handlebars Expression:</b>
                                    `{{blog.post}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>author</td>
                                        <td>Author of the blog post</td>
                                      </tr>
                                      <tr>
                                        <td>title</td>
                                        <td>Title of the blog post</td>
                                      </tr>
                                      <tr>
                                        <td>url</td>
                                        <td>URL of the blog entry</td>
                                      </tr>
                                      <tr>
                                        <td>body</td>
                                        <td>Body of the blog entry</td>
                                      </tr>
                                      <tr>
                                        <td>thumbnail</td>
                                        <td>Image thumbnail for the blog entry, in <a href="stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/stencil-image">Stencil image format</a></td>
                                      </tr>
                                      <tr>
                                        <td>date_published</td>
                                        <td>Date the blog entry was published</td>
                                      </tr>
                                      <tr>
                                        <td>social</td>
                                        <td>Social media tags for the blog entry</td>
                                      </tr>
                                      <tr>
                                        <td>tags </td>
                                        <td>Tags for the blog</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> name</span></td>
                                        <td>Name for the tag</td>
                                      </tr>
                                      <tr>
                                        <td><span class="indent1"> url</span></td>
                                        <td>URL for the tag</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: blog_blog-post
                          - title: Forms
                            route:
                              path: /forms-objects
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Forms Objects</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#forms_account\">Account Form</a></li>\n    <li><a href=\"#forms_account-address\">Account Address Form</a></li>\n    <li><a href=\"#forms_wishlist\">Wishlist Form</a></li>\n    <li><a href=\"#forms_gift-certificate\">Gift Certificate Form</a></li>\n    <li><a href=\"#forms_contact-us\">Contact Us Form</a></li>\n\t</ul>\n</div>"
                                - type: text
                                  data: >-
                                    ## Account Form


                                    <b>Description:</b> The form object used to
                                    edit a customer object. <br>


                                    <b>Handlebars Expression:</b>
                                    <code>{{forms.account}}</code>


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td class="">first_name</td>
                                        <td class="">First name of the customer being edited</td>
                                      </tr>
                                      <tr>
                                        <td class="">last_name</td>
                                        <td class="">Last name of the customer being edited</td>
                                      </tr>
                                      <tr>
                                        <td class="">company_name</td>
                                        <td class="">Company of the customer being edited</td>
                                      </tr>
                                      <tr>
                                        <td class="">phone</td>
                                        <td class="">Phone number of the customer being edited</td>
                                      </tr>
                                      <tr>
                                        <td class="">error</td>
                                        <td class="">Message to display (generated by the BigCommerce App) when customer’s account edit fails</td>
                                      </tr>
                                      <tr>
                                        <td class="">success</td>
                                        <td class="">Message to display (generated by the BigCommerce App) when customer’s account edit succeeds</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: forms_account
                                - type: text
                                  data: >-
                                    ## Account Address Form 


                                    <b>Description:</b> Form object presented to
                                    customers in the Add/Edit Address page.
                                    Called on the default <NOBR><span
                                    class="inline-code">&lt;theme-name&gt;/templates/components/account/address-list.html</span></nobr>
                                    partial and <NOBR><span
                                    class="inline-code">&lt;theme-name&gt;/templates/pages/account/add-address.html</span></nobr>
                                    template. <br>


                                    <b>Handlebars Expression:</b>
                                    <code>{{forms.address}}</code>


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td class="">address_id</td>
                                        <td class="">ID for this shipping address</td>
                                      </tr>
                                      <tr>
                                        <td class="">shipping_fields</td>
                                        <td class="">Array of form fields that define each shipping address for this customer; for details, see this repo:
                                    https://github.com/bigcommerce/cornerstone/tree/master/templates/components/common/forms</td>
                                      </tr>
                                      <tr>
                                        <td class="">action</td>
                                        <td class="">URL to the proper handler (Update Address versus Save New Address)</td>
                                      </tr>
                                      <tr>
                                        <td class="">error</td>
                                        <td class="">Message to display when form entry fails (defined by the BigCommerce App)</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: forms_account-address
                                - type: text
                                  data: >-
                                    ## Wishlist Form


                                    <b>Description:</b> Form object presented to
                                    customers on the Add/Edit Wishlist page.
                                    Called on the default
                                    <code>&lt;theme-name&gt;/templates/components/account/add-wishlist.html</code>
                                    partial and
                                    <code>&lt;theme-name&gt;/templates/pages/account/add-wishlist.html</code>
                                    template.


                                    <b>Handlebars Expression:</b>
                                    `{{forms.wishlist}}`


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>name</td>
                                        <td>Displayed name for this wishlist</td>
                                      </tr>
                                      <tr>
                                        <td class="">id</td>
                                        <td class="">ID for this wishlist</td>
                                      </tr>
                                      <tr>
                                        <td class="">is_public</td>
                                        <td class="">Boolean indicating whether this wishlist is displayed to other store visitors</td>
                                      </tr>
                                      <tr>
                                        <td class="">errors</td>
                                        <td class="">Message to display when form entry fails (generated by the BigCommerce App)</td>
                                      </tr>
                                      <tr>
                                        <td class="">action</td>
                                        <td class="">URL to the proper handler (Update Wish List versus Save New Wish List)</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: forms_wishlist
                                - type: text
                                  data: >-
                                    ## Gift Certificate Form


                                    <b>Description:</b><b><em> </em></b>Form
                                    object used to create and edit a gift
                                    certificate object for the merchant's store.
                                    Called on the default <NOBR><span
                                    class="inline-code">&lt;theme-name&gt;templates/pages/gift-certificate/purchase.html</span></nobr>
                                    template. <br>


                                    <b>Handlebars Expression:</b>
                                    <code>{{forms.gift_certificate}}</code>


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>editing</td>
                                        <td>Whether the current context is editing a gift certificate in the cart, or adding a new gift certificate</td>
                                      </tr>
                                      <tr>
                                        <td>can_use_custom_amount</td>
                                        <td>Whether the customer can enter free-text input (otherwise, must select from a drop-down list)</td>
                                      </tr>
                                      <tr>
                                        <td>amount_options</td>
                                        <td>If can_use_custom_amount is disabled, this variable fills the dropdown with the available options, in <a href="/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price">price object</a> form</td>
                                      </tr>
                                      <tr>
                                        <td>minimum</td>
                                        <td><a href="/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price">Price object</a> that defines the minimum amount a customer can enter (when can_use_custom_amount is enabled)</td>
                                      </tr>
                                      <tr>
                                        <td>maximum</td>
                                        <td><a href="/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price">Price object</a> that defines the minimum amount a customer can enter  (when can_use_custom_amount is enabled)</td>
                                      </tr>
                                      <tr>
                                        <td>expires_in_days</td>
                                        <td>If the gift certificates expire, this will be non-0 numerical days</td>
                                      </tr>
                                      <tr>
                                        <td>errors</td>
                                        <td>Server-side validation errors from the form’s submission</td>
                                      </tr>
                                      <tr>
                                        <td>themes</td>
                                        <td>A list of active gift-certificate themes (Birthday, Celebration, General, etc.), each stored as an object containing corresponding display and value children</td>
                                      </tr>

                                      <tr>
                                        <td>display</td>
                                        <td>Birthday, Celebration, General, etc.</td>
                                      </tr>
                                      <tr>
                                        <td>value</td>
                                        <td class="">Birthday.html, Celebration.html, General.html, etc.</td>
                                      </tr>
                                      
                                      <tr>
                                        <td>action</td>
                                        <td>The action for the form</td>
                                      </tr>
                                      <tr>
                                        <td>cart_item_id</td>
                                        <td>If editing, this is the cart item id being edited.</td>
                                      </tr>
                                      <tr>
                                        <td>values</td>
                                        <td>An array of the form values for prefilling</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">to_name</span></td>
                                        <td class="">The recipient's name</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">to_email</span></td>
                                        <td class="">To email address</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">from_name</span></td>
                                        <td class="">The sender’s name</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">from_email</span></td>
                                        <td class="">From email address</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">message</span></td>
                                        <td class="">An optional custom message</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">amount</span></td>
                                        <td class=""><a href="/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price">Price object</a> that defines the amount of the gift certificate</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: forms_gift-certificate
                                - type: text
                                  data: >-
                                    ## Contact Us Form 


                                    <b>Description:</b>Form object used to
                                    manage merchants’ "Contact Us" pages. Called
                                    on the default
                                    <code>&lt;theme-name&gt;/templates/pages/contact-us.html</code>template. 


                                    <b>Handlebars Expression:</b>
                                    <code>{{forms.contact}}</code>


                                    <b>Object Properties:</b>


                                    <table>
                                      <tr>
                                        <th>Property</th>
                                        <th>Description</th>
                                      </tr>
                                      <tr>
                                        <td>success</td>
                                        <td>Boolean indicating whether form was just submitted</td>
                                      </tr>
                                      <tr>
                                        <td>name</td>
                                        <td>Boolean indicating whether name input is enabled for the form</td>
                                      </tr>
                                      <tr>
                                        <td>company</td>
                                        <td>Boolean indicating whether company-name input is enabled for the form</td>
                                      </tr>
                                      <tr>
                                        <td>phone</td>
                                        <td>Boolean indicating whether phone-number input is enabled for the form</td>
                                      </tr>
                                      <tr>
                                        <td>order</td>
                                        <td>Boolean indicating whether order-number input is enabled for the form</td>
                                      </tr>
                                      <tr>
                                        <td>rma</td>
                                        <td>Boolean indicating whether RMA (Return Merchandise Authorization) input is enabled for the form</td>
                                      </tr>
                                      <tr>
                                        <td>page_id</td>
                                        <td>Page ID for this contact page (there can be multiple contact pages)</td>
                                      </tr>
                                      <tr>
                                        <td>captcha_url</td>
                                        <td>URL to provide an image file for a CAPTCHA field</td>
                                      </tr>
                                      <tr>
                                        <td>text</td>
                                        <td>Text content to display above the form</td>
                                      </tr>
                                      <tr>
                                        <td>error</td>
                                        <td>Potential error that occurred during previous form submission</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: forms_contact-us
            blocks: []
        - title: CSS And Design Assets
          route:
            path: /css-and-design-assets
          data:
            children:
              - title: Assets Directory
                route:
                  path: /assets-directory
                data:
                  blocks:
                    - type: html
                      data: <h1>Assets Directory</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#assets_the-assets-directory\">The <code>assets</code> Directory</a></li>\n    <li><a href=\"#assets_video-demo\">Video Demo</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## The `assets` Directory


                        Each Stencil theme’s `<theme-name>/assets/` directory
                        contains CSS, JavaScript, and image assets that help
                        create the design of storefront pages. A minimal
                        `<theme-name>/assets/` directory contains the files and
                        subdirectories that you can view on the [Cornerstone
                        Github
                        Repository](https://github.com/bigcommerce/cornerstone/tree/master/assets).


                        We will go further into detail about the subdirectories
                        within `/assets/` below: 


                        ### The `cdn` Subdirectory


                        The `/cdn/` subdirectory is designed to contain large
                        static assets that you will upload to a content delivery
                        network, separately from the rest of your theme. For
                        this reason – and by design – the contents of this
                        directory (only) are excluded from theme bundling. For
                        details, see Staging a Theme for CDN Delivery.


                        ### The `fonts` Subdirectory


                        The `/fonts/` subdirectory contains local versions of
                        theme-specific fonts.


                        ### The `icons` Subdirectory


                        The `/icons/` subdirectory contains .svg files for icons
                        used within a theme.


                        ### The `img` Subdirectory


                        The `/img/` subdirectory contains images used in the
                        theme’s display – background images, sprites, and other
                        images not related to store content.


                        You would typically reference these image assets using
                        Stencil's cdn Handlebars helper. For example,
                        generically:


                        `<img src="{{cdn 'assets/img/image.jpg'}}">`


                        Or, with a realistic file name:


                        `<img src="{{cdn 'assets/img/size-chart.png'}}">`
                      header:
                        anchor: assets_the-assets-directory
                    - type: callout
                      data:
                        body: >
                          For Stencil themes only, images that use the default
                          zoom library pass through Akamai Image Manager. This
                          chooses the best image to serve based on device. To
                          bypass the image optimization, include `imbypass=on`
                          as a query parameter in the image url. This will serve
                          un-optimized images.
                        title: Akamai Image Manager
                      header:
                        anchor: akamai-image-manager
                    - type: text
                      data: >-
                        `<img src="{{cdn 'webdav:img/image.jpg?imbypass=on'}}">`


                        `<img src="{{getImage settings.store_logo.image
                        'logo_size'}}?imbypass=on">`


                        `<img src="{{cdn 'assets/img/image.jpg?imbypass=on'}}">`


                        ### The `js` Subdirectory


                        The `/js/` subdirectory contains general JavaScript
                        files used in the theme.


                        ### The `scss` Subdirectory


                        The `/scss/` subdirectory contains theme-specific CSS
                        resources.
                    - type: callout
                      data:
                        type: warning
                        title: ' Production-Safe Image References'
                        body: >-
                          To avoid unexpected 404 errors on your production
                          store, we recommend that you use short relative paths
                          in your SCSS to reference images in your `/img/`
                          subdirectory. So, for example, use references of the
                          form:

                          `background: url('../img/header-bg.png');` rather than
                          references of the form:

                          `background: url('/assets/img/header-bg.png');`
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Video Demo


                        Watch a video tour of the `/assets/` directory, its
                        `/scss/` subdirectory, interactions between CSS and
                        `config.json` values, Stencil custom Sass functions, and
                        the `/img/` subdirectory.


                        <iframe width="560" height="315"
                        src="https://www.youtube.com/embed/zUDNgprOEts"
                        frameborder="0" allow="autoplay; encrypted-media"
                        allowfullscreen></iframe>
                      header:
                        anchor: assets_video-demo
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          This section's remaining pages list certain
                          restrictions on changing some subdirectories'
                          structure, contents, and file names.


                          In parts of your theme's directory tree where you are
                          free to add new subdirectories and files, be sure to:


                          * Set newly added directories to permission `755
                          (drwxr-xr-x)`.

                          * Set newly added files to permission `644
                          (rw-r--r--)`.

                          * Without these permissions, running your theme
                          locally will fail, with multiple error messages.
                          Bundling your theme will also fail, blocking its
                          upload to a store.
                        title: |2
                           Directory and File Restrictions/Permissions
              - title: Components Directory & Design Patterns
                route:
                  path: /stencil-design-patterns
                data:
                  blocks:
                    - type: html
                      data: <h1>Components Directory and Design Patterns</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#components_design-patterns\">Design Patterns</a></li>\n    <li><a href=\"#components_components-directory\">Components Directory</a></li>\n    <li><a href=\"#components_citadel-sub\">The <code>citadel</code> Subdirectory</a></li>\n    <li><a href=\"#components_foundation-sub\">The <code>foundation</code> Subdirectory</a></li>\n    <li><a href=\"#components_stencil-sub\">The <code>stencil</code> Subdirectory</a></li>\n    <li><a href=\"#components_vendor-sub\">The <code>vendor</code> Subdirectory</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Design Patterns


                        Stencil themes include an internal pattern library
                        called Citadel, which consumes the ZURB Foundation
                        framework. Foundation provides the basis for creating
                        responsive themes. Citadel extends the Foundation
                        framework’s mixins and components to provide Stencil’s
                        own mixins, extensible components, and utilities.


                        **Note:** _Citadel is based specifically on Foundation
                        5.5.3, which installs with the Stencil framework.
                        (Direct download link is
                        [here](https://github.com/zurb/foundation-sites/releases/tag/v5.5.3);
                        documentation is
                        [here](https://foundation.zurb.com/sites/docs/v/5.5.3/).)
                        We do not support Foundation 6.x, due to breaking
                        changes introduced between versions 5.x and 6.x._


                        Citadel extends Foundation’s mix-ins and components to
                        provide Stencil’s own mix-ins, extensible components,
                        and utilities. These include drop-down lists, forms, and
                        similar resources. Citadel resources are named according
                        to BEM and SUIT CSS conventions. Classes are named
                        functionally, rather than based on visual presentation
                        or content. Our sass style guide is published
                        [here](https://github.com/bigcommerce/sass-style-guide).

                        Citadel assets bundled with Cornerstone are located in
                        these Cornerstone subdirectories: 


                        * `Cornerstone/assets/scss/settings/citadel/`

                        * `Cornerstone/assets/scss/components/citadel/`


                        A theme developer might use drop-down lists, forms, and
                        similar resources from Citadel’s design patterns. The
                        design/style language underlying these Citadel resources
                        is the Sass/SCSS preprocessor.
                      header:
                        anchor: components_design-patterns
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Components Directory 


                        Citadel design patterns reside in the
                        `<theme-name>/assets/scss/components/` subdirectory. The
                        components subdirectory contains the 4 following
                        subdirectories:

                        * `/citadel/`, 

                        * `/foundation/`,

                        * `/stencil/`, and 

                        * `/vendor/`.



                        You can see the components directory and its children
                        present in the [Cornerstone Theme Github
                        Repository](https://github.com/bigcommerce/cornerstone/tree/master/assets/scss/components).
                      header:
                        anchor: components_components-directory
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## The `citadel` Subdirectory


                        The `components/citadel` subdirectory contains
                        Citadel-specific resources. The resources are named
                        according to our [style
                        guide](https://github.com/bigcommerce/sass-style-guide),
                        which follows [BEM](http://getbem.com/naming/) and [SUIT
                        CSS](https://github.com/suitcss/suit/blob/master/doc/naming-conventions.md)
                        naming conventions: Class names are structured, and
                        hyphens are meaningful (that is, hyphens are not used
                        merely to separate words). 


                        As a general rule, classes here are named functionally,
                        not based on their visual presentation or their content.
                        Here are some prototypes and examples:


                        * `componentName` (for example: `.dropdown or
                        .buttonGroup`)


                        * `componentName--modifierName` (for example:
                        `.dropdown--dropUp` or `.button--primary`)


                        * `componentName-descendantName` (for example:
                        `.dropdown-item`)


                        * `componentName.is-stateOfComponent` (for example:
                        `.dropdown.is-active`)


                        * `u-utilityName` (for example: `.u-textTruncate`)


                        * Abstractly:
                        `[<namespace>-]<componentName>[--modifierName|-descendentName]`


                        ### Components versus Utilities


                        Our naming scheme makes an architectural distinction
                        between components and utilities. Components are defined
                        as custom elements that enclose specific semantics,
                        styling, and behavior. Our syntax for naming them is:


                        `<componentName>[--modifierName|-descendantName]`


                        Component names are in camel case. We have tried to
                        choose names that are as short as possible, but as long
                        as necessary. For example:


                        * `.nav`, not `.navigation`; but:

                        * `.button`, not `.btn`


                        Utility classes are defined as low-level, structural and
                        positional traits. Utilities can be applied directly to
                        any element. Multiple utilities can be used together,
                        and utilities can be used alongside component classes.


                        To make HTML patterns as reusable as possible, we have
                        used utility classes sparingly, reserving them for
                        component-level styling.


                        Our syntax for naming utilities is camel case, prefixed
                        with a `u-` namespace:


                        `u-<utilityName>`


                        ### Variables and Mixins


                        Citadel variables and mixins follow similar naming
                        conventions.


                        Variables are things that can change over time. Their
                        names are in camel case, and show context:


                        `
                        [<componentName>[--modifierName][-descendentName]-<propertyName>

                        -<variablename>[--<modifierName>]`


                        Mixins follow regular camel-case naming conventions.
                        Namespacing is not universally required for mixins.
                        However, where a mixin has been created for a utility,
                        its name matches the utility’s name, including `u-`
                        namespacing:


                        ```

                        @mixin buttonVariant;

                        @mixin u-textTruncate;

                        ```
                      header:
                        anchor: components_citadel-sub
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## `foundation` Subdirectory


                        The `/components/foundation/` subdirectory contains
                        files installed by the [ZURB Foundation
                        framework](https://foundation.zurb.com/showcase/about.html).
                        (Stencil's Foundation support is limited to version
                        5.5.3.)
                      header:
                        anchor: components_foundation-sub
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## `stencil` Subdirectory


                        The `/components/stencil/` subdirectory contains CSS
                        files unique to Stencil themes, which are used to create
                        specific page elements within the themes. You can view
                        this subdirectory and all its children in the
                        [Cornerstone Theme Github
                        Repository](https://github.com/bigcommerce/cornerstone/tree/master/assets/scss/components/stencil).


                        This subdirectory’s children contain CSS for the
                        following page elements:


                        This subdirectory’s children contain CSS for the
                        following page elements:


                        <p></p><table>
                          <tbody><tr>
                            <th>Subdirectory</th>
                            <th>UI Element/Purpose</th>
                          </tr>
                          <tr>
                            <td>account</td>
                            <td>Customer account details</td>
                          </tr>
                          <tr>
                            <td>addressBox</td>
                            <td>Customer shipping addresses</td>
                          </tr>
                          <tr>
                            <td>addReturn</td>
                            <td>Add a product-return request</td>
                          </tr>
                          <tr>
                            <td>banners</td>
                            <td>Banners displayed across storefront’s top and bottom</td>
                          </tr>
                          <tr>
                            <td>blocker</td>
                            <td>Position .blocker element above another element, to prevent a user action</td>
                          </tr>
                          <tr>
                            <td>compare</td>
                            <td>Layout for product-comparison table</td>
                          </tr>
                          <tr>
                            <td>facetedSearch</td>
                            <td>Faceted-search toggle (on/off), navigation list, and filters</td>
                          </tr>
                          <tr>
                            <td>facetLabel</td>
                            <td>Labels for faceted-search display</td>
                          </tr>
                          <tr>
                            <td>heroCarousel</td>
                            <td>Carousel of prominent ("hero") images</td>
                          </tr>
                          <tr>
                            <td>navPages</td>
                            <td>Styles for page navigation, with responsive layout</td>
                          </tr>
                          <tr>
                            <td>navUser</td>
                            <td>Styles for cart counter, quick search</td>
                          </tr>
                          <tr>
                            <td>productCarousel</td>
                            <td>Carousel of product images</td>
                          </tr>
                          <tr>
                            <td>productReviews</td>
                            <td>Styles for product reviews</td>
                          </tr>
                          <tr>
                            <td>productView</td>
                            <td>Product display (with thumbnails suppressed for mobile/tablet), product details, product options (size, color, etc.), product sharing</td>
                          </tr>
                          <tr>
                            <td>quickView</td>
                            <td>Quick-view modal window for a selected product</td>
                          </tr>
                          <tr>
                            <td>ribbon</td>
                            <td>Top-right text badges, for messages like "On sale"</td>
                          </tr>
                          <tr>
                            <td>socialLinks</td>
                            <td>Styles for social-media links</td>
                          </tr>
                          <tr>
                            <td>tags</td>
                            <td>Styles for blog-post tags</td>
                          </tr>
                          <tr>
                            <td>toggleLink</td>
                            <td>Styles for collapsible/expandable components</td>
                          </tr>
                          <tr>
                            <td>writeReview</td>
                            <td>Styles for product-review submission form</td>
                          </tr>
                        </tbody></table>
                      header:
                        anchor: components_stencil-sub
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## `vendor` Subdirectory


                        The `/components/vendor/` subdirectory contains the
                        consumed version of framework components from your
                        chosen provider. There is some renaming of these
                        components to match Stencil naming conventions.
                      header:
                        anchor: components_vendor-sub
              - title: 'Layouts, Utilities, & Settings Directories'
                route:
                  path: /layouts-and-utilities-directory
                data:
                  blocks:
                    - type: html
                      data: >-
                        <h1>The <code>layouts</code>, <code>utilities</code>,
                        and <code>settings</code> Directories</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#layouts-utilities-settings_the-layouts-directory\">The <code>layouts</code> Directory</a></li>\n    <li><a href=\"#layouts-utilities-settings_the-utilities-directory\">The <code>utilities</code> Directory</a></li>\n    <li><a href=\"#layouts-utilities-settings_the-settings-directory\">The <code>settings</code> Directory</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## The `layouts` Directory


                        The `<theme-name>/assets/scss/layouts/` subdirectory
                        contains `.scss` files that provide default styling for
                        major layout components of theme pages. You can see the
                        `/layouts/` subdirectory's internal structure on the
                        [Cornerstone Github
                        Repository](https://github.com/bigcommerce/cornerstone/tree/master/assets/scss/layouts)
                      header:
                        anchor: layouts-utilities-settings_the-layouts-directory
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## The `utilities` Directory


                        The `<theme-name>/assets/scss/utilities` subdirectory
                        contains mixins and tools, beyond the Citadel library,
                        that help create UI’s. You can apply these CSS snippets
                        to your HTML for quick prototyping when you need a
                        unique, yet repeatable, style.


                        Every utility in this subdirectory will have both a
                        class and a mixin. For example, consider the utility
                        `truncatedText:` You can use it by applying the class
                        `.u-truncatedText`, or by applying the mixin @include
                        u-truncatedText;.
                      header:
                        anchor: layouts-utilities-settings_the-utilities-directory
                    - type: text
                      data: '---'
                    - type: text
                      data: "## The `settings` Directory\n\nThe `<theme-name>/assets/scss/settings/` subdirectory contains SCSS variables for your framework. Files here map directly to components. If present, these variables override defaults in consumed libraries. The `/settings/` subdirectory's internal structure can be viewed at the [Cornerstone Github Repository](https://github.com/bigcommerce/cornerstone/tree/master/assets/scss/settings) \n\t\nThe nested subdirectory for your chosen framework contains a file that includes that framework’s variables. (For example, in the default Stencil theme, this file is: `/settings/foundation/_foundation.scss`.)\n\nWithin each subdirectory nested at the ultimate level is one primary file, `_settings.scss`, that imports all other variables that have been broken into logical files (such as `_colors.scss`, `_typography.scss`, and `_z-index.scss`).\n\t\n### Sass Stylesheet Support for Theme Fonts\n\t\nTo support Theme Editor, your theme's Sass stylesheet must call Stencil's custom Sass functions to transform fonts specified in the theme's `config.json` file. You must call these functions on each `config.json` font key whose value you want to make available to Sass variables.\n\nThe default Stencil theme includes these function calls in this stylesheet:\n`<theme-name>/assets/scss/settings/foundation/type/_settings.scss`. However, if your theme relies on a Sass framework other than Foundation, the relevant stylesheet will be a different .scss file name within `<theme-name>/assets/scss/`.\n\n\t\n### How to Enable Fonts for Theme Editor\n\nAssume that your theme's `config.json` contains the following key name and value (the details of both are arbitrary, but the key name must end in `-font`, and the value must follow a defined format):\n\t\n`\"headings-font\": \"Google_Open+Sans_700\"`\n\t\nIn your Sass stylesheet, you would call the stencilFontFamily and stencilFontWeight custom Sass functions on the corresponding `config.json` key name:\n\t\n```\n$body-font-family: stencilFontFamily(\"body-font\");\n$body-font-weight: stencilFontWeight(\"body-font\");\n```\n\nThese functions would extract the corresponding `config.json` values as:\n\n```\n$body-font-family: 'Open Sans';\n$body-font-weight: 700;\n```\n\t\nThis transformation allows you to use the `$body-font-family` and `$body-font-weight` variables wherever needed in your theme. If a merchant uses Theme Editor to select a different font family and/or weight, the variables will propagate the change throughout your theme.\n"
                      header:
                        anchor: layouts-utilities-settings_the-settings-directory
              - title: Custom Sass Functions
                route:
                  path: /custom-sass-functions
                data:
                  blocks:
                    - type: html
                      data: <h1>Custom Sass Functions</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#custom-sass-functions_stencilcolor\">stencilColor Function</a></li>\n    <li><a href=\"#custom-sass-functions_stencilfontfamily\">stencilFontFamily Function</a></li>\n    <li><a href=\"#custom-sass-functions_stencilfontweight\">stencilFontWeight Function</a></li>\n    <li><a href=\"#custom-sass-functions_stencilnumber\">stencilNumber Function</a></li>\n    <li><a href=\"#custom-sass-functions_stencilstring\">stencilString Function</a></li>\n    <li><a href=\"#custom-sass-functions_stencilimage\">stencilImage Function</a></li>\n    <li><a href=\"#custom-sass-functions_compiling-custom-sass-files\">Compiling Custom Sass Files</a></li>\n\t</ul>\n</div>\n"
                    - type: text
                      data: >-
                        ## stencilColor Function


                        stencilColor accepts (as a string) the key name of a
                        color that you have defined in config.json as editable.
                        It returns the color’s hexadecimal value.


                        In Stencil's Cornerstone (1.4.0) base theme, the
                        optimized-checkout.scss file sets the background color
                        for the page's header with the following code:


                        ```

                        .optimizedCheckout-header {
                            background-color: stencilColor("optimizedCheckout-header-backgroundColor");
                            // scss-lint:disable StringQuotes
                            background-image: url(stencilImage('optimizedCheckout-backgroundImage', 'optimizedCheckout-backgroundImage-size'));
                            // scss-lint:enable StringQuotes
                            background-size: cover;
                            ...
                        }

                        ```


                        The above CSS fetches the background-color property's
                        value by using the stencilColor() function to retrieve
                        the optimizedCheckout-header-backgroundColor key's
                        current value.


                        That optimizedCheckout-header-backgroundColor key is
                        defined, and assigned a default value, in config.json.
                        However, merchants can use Theme Editor to change the
                        value at any time. So using this stencilColor() call,
                        the key's current value (which might have been altered
                        from the static default value in config.json) will be
                        fetched from a BigCommerce settings server.
                      header:
                        anchor: custom-sass-functions_stencilcolor
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## stencilFontFamily Function


                        stencilFontFamily accepts (as a string) the name of a
                        font key that you have defined in config.json. It
                        returns the corresponding font-family value, also as a
                        string. For a key named "headings-font" and defined as
                        Google Open Sans, stencilFontFamily would return a value
                        like this to Sass variables:


                        `$headings-‐font-‐family: 'Open Sans';`


                        (The above example's name and definition in config.json
                        are both arbitrary.)


                        Your Sass stylesheet must call stencilFontFamily for
                        each config.json font key whose font-family value you
                        want to provide to Sass variables. You would call the
                        function in the following format (again assuming a key
                        arbitrarily named "headings-font"):


                        `$headings-font-family:
                        stencilFontFamily("headings-font");`
                      header:
                        anchor: custom-sass-functions_stencilfontfamily
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## stencilFontWeight Function


                        stencilFontWeight accepts (as a string) the key name of
                        a font that you have defined in config.json. It returns
                        (as an integer) the corresponding font-weight value. For
                        a key arbitrarily named "headings-font" and defined as
                        700, it would return a value like this to Sass
                        variables:


                        `$headings-‐font-‐weight: 700;`


                        Your Sass stylesheet may optionally call
                        stencilFontWeight for each config.json font key whose
                        weight value you want to provide to Sass variables. You
                        would call the function in the following format:


                        `$headings-font-weight:
                        stencilFontWeight("headings-font");`
                      header:
                        anchor: custom-sass-functions_stencilfontweight
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## stencilNumber Function


                        `stencilNumber` accepts (as a string) a key name that
                        you have defined in `config.json` as editable. It also
                        accepts (also as a string) an _optional_ second
                        parameter to define the unit. (This second parameter’s
                        value defaults to `"px"`.) It returns the corresponding
                        numeric value, postfixed with the defined unit.


                        You can use this function with arithmetical operators.
                        For example, assume that your `config.json` contains a
                        `"font-size"` value of `"3"`. The following statement
                        would evaluate to `9rem`.


                        `stencilNumber("font-size", "rem") * 3`
                      header:
                        anchor: custom-sass-functions_stencilnumber
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## stencilString Function


                        `stencilString` accepts (as a string) a key name that
                        you have defined in `config.json` as editable. It
                        returns (also as a string) the key’s value. This
                        function is used for purposes like defining font family
                        names, or defining paths to images.
                      header:
                        anchor: custom-sass-functions_stencilstring
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## stencilImage Function


                        `stencilImag`e accepts (as a string) a key name for an
                        image url that you have defined in `config.json`. It
                        also accepts (as a string) the key name for the image
                        size that you have defined in `config.json`. It returns
                        the string value of the image URL and the size.
                      header:
                        anchor: custom-sass-functions_stencilimage
                    - type: text
                      data: >
                        ## Compiling Custom Sass Files


                        If you want to add your own custom Sass files, initiate
                        auto-compilation of those files by including the
                        associated tag in your HTML markup. Cornerstone's Sass
                        file is named:


                        `/cornerstone/assets/scss/theme.scss`


                        To add a custom Sass file, place it at this path
                        location, using an arbitrary filename prefix as shown:


                        `<theme-name>/assets/scss/<your-theme-or-file-name>.scss`


                        For example, to use the Foundation Sass framework, you
                        might need:


                        `<theme-name>/assets/scss/main.scss`

                        `<theme-name>/assets/scss/widgets.scss`


                        Next, be sure the following tag is included within your
                        `<theme-name>/templates/layout/base.html` file’s
                        `<head>` tag, to compile your Sass to the specified
                        object file:


                        `{{stylesheet '/assets/css/theme.css'}}`


                        While `stencil start` is running, it will recompile your
                        custom Sass files to the specified
                        `<theme-name>/assets/css/theme.css` file. (Note that
                        this object file’s name is always the same, and is
                        independent of your custom Sass files’ names.) For an
                        additional example, please see Replacing Content Blocks.
                      header:
                        anchor: custom-sass-functions_compiling-custom-sass-files
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          The Stencil framework is designed to support your
                          incorporation of custom Sass files/frameworks.
                          However, BigCommerce does not offer technical
                          assistance on substitutions for, or customized
                          versions of, Stencil's default dependencies.
                        title: Before You Customize
              - title: Page Composition and Styling
                route:
                  path: /page-composition-and-styling
                data:
                  blocks:
                    - type: html
                      data: <h1>Page Composition and Styling</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#page-composition_referencing-css-stylesheet\">Referencing a CSS Stylesheet</a></li>\n    <li><a href=\"#page-composition_template-composition\">Template Composition</a></li>\n\t</ul>\n</div>\n\n\n\n\n"
                    - type: text
                      data: >-
                        ## Referencing a CSS Stylesheet


                        To apply CSS styling to a page in your theme, make sure
                        that page's code includes a reference to the stylesheet
                        you want to use. This example does so using the
                        `{{partial}}` and `{{cdn}}` custom Handlebars helpers:


                        ```

                        {{#partial "head"}}
                            <link href="{{cdn '/assets/css/invoice.css'}}" rel="stylesheet">
                        {{/partial}}

                        ```
                      header:
                        anchor: page-composition_referencing-css-stylesheet
                    - type: text
                      data: '---'
                    - type: text
                      data: "## Template Composition\n\nTemplate composition is a valuable Stencil feature. By defining blocks of overrideable content, your themes can insert templates on a per-page basis, while sharing code that is common to the whole theme.\n\n### Defining Content Blocks\n\nA base template defines content blocks by name. The following snippet uses `{{block}}` custom Handlebars helpers to define three content blocks, respectively named `head`, `hero`, and `page`:\n\n```\n// templates/layout/base.html\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>{{ head.title }}</title>\n        {{#block \"head\"}} {{/block}}\n    </head>\n    <body>\n        <div class=\"body\">\n\t\t    {{#block \"hero\"}} {{/block}}\n\t\t    <div class=\"container\">\n\t\t        {{#block \"page\"}} {{/block}}\n\t\t    </div>\n\t\t    {{> components/common/modal}}\n        </div>\n    </body>\n</html>\n```\n\n### Replacing Content Blocks\n\nPages can use a base template, replacing the defined blocks with their own content. This example replaces content for the head and page blocks:\n\n```\n//templates/pages/account/orders/invoice.html\n{{#partial \"head\"}}\n    <link href=\"{{cdn '/assets/css/invoice.css'}}\" rel=\"stylesheet\">\n{{/partial}}\n\n{{#partial \"page\"}}\n    <p>An invoice for a particular order would go here</p>\n{{/partial}}\n{{> layout/empty}}\n```\n\n### Matching Partials with Blocks\n\nWe recommend that, for any given name defined within the template rendering path, you maintain a 1:1 mapping of partials to blocks."
                      header:
                        anchor: page-composition_template-composition
              - title: Using Custom Fonts
                route:
                  path: /using-custom-fonts
                data:
                  blocks:
                    - type: html
                      data: <h1>Using Custom Fonts</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#using-custom-fonts_stage-the-fonts\">Stage the Fonts</a></li>\n    <li><a href=\"#using-custom-fonts_reference-fonts\">Reference Fonts in Templates' <code>head</code></a></li>\n    <li><a href=\"#using-custom-fonts_video-demo\">Video Demo</a></li>\n    <li><a href=\"#using-custom-fonts_update-the-css\">Update the CSS</a></li>\n\t</ul>\n</div>\n"
                    - type: callout
                      data:
                        type: warning
                        title: Custom Fonts Unavailable on Theme Editor
                        body: >-
                          On the current Stencil framework, custom fonts that
                          you incorporate using this process will not be
                          available for selection in Theme Editor.
                    - type: text
                      data: >
                        ## Stage the Fonts


                        First, acquire your custom fonts. In this logo scenario,
                        we'll assume the single (nonexistent) font
                        `MyFontFile.ttf`.

                        Next, [use WebDav to upload each custom font](). (Upload
                        to WebDAV's default `/content/` folder.)
                      header:
                        anchor: using-custom-fonts_stage-the-fonts
                    - type: text
                      data: '---'
                    - type: text
                      data: "## Reference Fonts in Templates' `<head>`\n\nNext, edit the appropriate template files' `<head>` sections to reference your custom fonts. In this logo example, you would edit the `/cornerstone/templates/layout/base.html` file's `<head>` section to insert the following code, which references the custom font you just uploaded:\n\t\n```\n<style type=\"text/css\" media=\"screen, print\">\n           @font-face {\n               font-family: \"MyFont\";\n               src: url(\"{{cdn 'webdav:MyFontFile.ttf'}}\");\n           }\n</style>\n```"
                      header:
                        anchor: using-custom-fonts_reference-fonts
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Video Demo


                        Watch a video demonstration of referencing custom fonts
                        in your template files' `<head>` sections: 


                        <iframe width="560" height="315"
                        src="https://www.youtube.com/embed/-w7Hbn_p_pw"
                        frameborder="0" allow="autoplay; encrypted-media"
                        allowfullscreen></iframe>
                      header:
                        anchor: using-custom-fonts_video-demo
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Update the CSS


                        Finally, update the appropriate CSS to reference the
                        same font. Here, you would edit the
                        `/cornerstone/assets/scss/layouts/header/_header.scss`
                        file to include the two lines below `.header-logo-text`:


                        ```

                        .header-logo-text {

                        display: block;
                           font-family: 'MyFont';
                           [...]
                        }

                        ```
                      header:
                        anchor: using-custom-fonts_update-the-css
                    - type: callout
                      data:
                        title: Notes
                        body: >-
                          * The cdn custom Handlebars helper assumes WebDAV's
                          default /content/ folder, so there is no need to
                          specify that folder.

                          * Fonts staged via WebDAV, as in the above example,
                          will not show up in the local version of your theme.
              - title: Using and Updating Icons
                route:
                  path: /using-and-updating-icons
                data:
                  blocks:
                    - type: html
                      data: <h1>Using and Updating Icons</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#using-and-updating-icons_installing-grunt\">Installing Grunt</a></li>\n    <li><a href=\"#using-and-updating-icons_calling-theme-icons\">Calling Theme Icons</a></li>\n    <li><a href=\"#using-and-updating-icons_adding-new-icons\">Adding New Icons</a></li>\n    <li><a href=\"#using-and-updating-icons_video-demo\">Video Demo</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >
                        ## Installing Grunt


                        Some of a Stencil theme's static assets are handled with
                        the Grunt JavaScript automator, where required. This
                        means that you have some dependencies on both Grunt and
                        npm. To get started:


                        First, make sure you have Grunt installed globally on
                        your machine:


                        `npm install -g grunt-cli`


                        Then, from your theme's root directory, run:


                        `npm install`
                      header:
                        anchor: using-and-updating-icons_installing-grunt
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Calling Theme Icons 


                        A Stencil theme's icons are delivered via a single SVG
                        sprite, which is embedded on the page in

                        `<theme-name>templates/layout/base.html`. This sprite is
                        generated via the Grunt task `grunt svgstore`.


                        The task takes individual SVG files for each icon (in
                        the theme's `assets/icons/` subdirectory) and bundles

                        them together, to be inlined on the top of the theme,
                        inside a Handlebars partial.


                        You can then call each icon in a similar way to an
                        inline image, via:


                        `<svg><use xlink:href="#icon-svgFileName" /></svg>`


                        The ID of each SVG icon you call is based on the
                        filename of the icon you want, with `icon-` prepended.

                        For example:


                        `xlink:href="#icon-facebook"`
                      header:
                        anchor: using-and-updating-icons_calling-theme-icons
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Adding New Icons


                        Simply add your new icon SVG file to the `assets/icons/
                        `folder. Then, from your theme's root directory, run
                        `grunt svgstore` or just `grunt`.
                      header:
                        anchor: using-and-updating-icons_adding-new-icons
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Video Demo


                        Watch a video demonstration of installing Grunt and
                        using it to update your theme's SVG sprite with custom
                        icons: 


                        <iframe width="560" height="315"
                        src="https://www.youtube.com/embed/-w7Hbn_p_pw"
                        frameborder="0" allow="autoplay; encrypted-media"
                        allowfullscreen></iframe>
                      header:
                        anchor: using-and-updating-icons_video-demo
        - title: Event Hooks
          route:
            path: /adding-event-hooks-to-your-theme
          data:
            children:
              - title: Event Hook Overview and Examples
                route:
                  path: /event-hook-overview-and-examples
                data:
                  blocks:
                    - type: html
                      data: <h1>Event Hook Overview and Examples</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#event_event-hook\">Event Hook Overview</a></li>\n    <li><a href=\"#event_cookie-notification\">Cookie Notification Example</a></li>\n    <li><a href=\"#event_cart-dialog\">Cart Dialog Example</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Event Hook Overview 


                        Stencil themes provide access to remote resources
                        through data tags and event hooks. Developers can use
                        these hooks to trigger defined events: A theme can hook
                        to an event to perform its own actions or calculations,
                        based on shopper behavior.


                        Your Stencil themes incorporate these resources by
                        importing the stencil-utils module, using this
                        statement:


                        `import utils from '@bigcommerce/stencil-utils';`
                      header:
                        anchor: event_event-hook
                    - type: text
                      data: >
                        ## Cookie Notification Example


                        In the JavaScript-only example below, the
                        `cookie-privacy-notification` hook enables customization
                        of the alert window that displays European
                        Union–required cookie notifications:


                        First, ensure you have loaded the `stencil-utils`
                        package with the following command:


                        `import utils from '@bigcommerce/stencil-utils';`


                        European websites must notify users of cookies to comply
                        with European Union law.

                        The following code implements hook that will alert
                        shoppers that the website uses cookies.


                        ```

                        export default function() {

                          // Here you can override the default browser alert box by
                          // hooking to the 'cookie-privacy-notification' hook.
                          utils.hooks.on('cookie-privacy-notification', (event, privacyMessage) => {

                            // You can make your own custom modal or alert box
                            // appear in your theme using the privacyMessage provided
                            myCustomAlert(privacyMessage);

                            // Call event.preventDefault() to prevent the default
                            // browser alert from occurring in stencil-utils
                            event.preventDefault();
                          });
                        }

                        ```


                        A theme could listen for the
                        `cookie-privacy-notification` event to override the
                        browser’s default notification UI.
                      header:
                        anchor: event_cookie-notification
                    - type: text
                      data: >
                        ## Cart Dialog Example


                        In the following code snippet from Cornerstone in
                        [templates/components/products/product-view.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/components/products/product-view.html),
                        note the data tag named `data‑cart‑item‑add`:


                        ```

                        <form class="form" method="post"
                        action="{{product.cart_url}}"
                            enctype="multipart/form-data" data-cart-item-add>
                        ```


                        This data tag enables the emission of the
                        `cart‑item‑add` event in this next snippet:


                        ```

                        /*  
                         * Import all product-specific js 
                         */
                        [...]

                        import utils from '@bigcommerce/stencil-utils';

                        [...]

                        addProductToCart() {
                            utils.hooks.on('cart-item-add', (event) => {
                                event.preventDefault();
                            });
                        }

                        ```
                      header:
                        anchor: event_cart-dialog
              - title: Remote API Example
                route:
                  path: /remote-api-example
                data:
                  blocks:
                    - type: html
                      data: <h1>Remote API Example</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#remote_remote-api-example\">Remote API Example</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Remote API Example


                        Client-side JavaScript can access event hooks directly,
                        without using Handlebars statements. By setting up
                        listeners for these events, you can exercise granular
                        control over your storefront’s user interface. For
                        example, you can pop up custom windows when certain
                        events occur.


                        Below is an example implemented within a Stencil theme.
                        This code adds an item to the shopping cart, and
                        displays the result in a custom modal dialog rather than
                        a cart page.


                        _This particular example uses certain conventions of ES6
                        JavaScript (also known as ECMAScript 6 or

                        ECMAScript 2015)._


                        Here is the signature of the cart.itemAdd function used
                        below, with parameters for product ID, quantity, and
                        options:


                        `itemAdd(FormData, callback)`


                        Here is the signature of the cart.getContent function
                        used further down:


                        `getContent(options, callback)`


                        This first complete code snippet calls `cart.itemAdd`,
                        catches any errors, and displays the cart contents in a
                        modal dialog: 


                        ```
                         // Add item to cart
                                utils.api.cart.itemAdd(new FormData(form), (err, response) => {
                                    const errorMessage = err || response.data.error;

                                    $addToCartBtn
                                        .val(originalBtnVal)
                                        .prop('disabled', false);

                                    this.$overlay.hide();

                                    // Guard statement
                                    if (errorMessage) {
                                        // Strip the HTML from the error message
                                        const tmp = document.createElement('DIV');
                                        tmp.innerHTML = errorMessage;

                                        return alert(tmp.textContent || tmp.innerText);
                                    }

                                    // Open preview modal and update content
                                    if (this.previewModal) {
                                        this.previewModal.open();

                                        this.updateCartContent(this.previewModal, response.data.cart_item.hash);
                                    } else {
                                        this.$overlay.show();
                                        // if no modal, redirect to the cart page
                                        this.redirectTo(response.data.cart_item.cart_url || this.context.urls.cart);
                                    }
                                });
                        ```


                        This final code snippet calls `cart.getContent` to fetch
                        the cart contents, then display it in a preview format,
                        which is specified by a `template` option with a value
                        of `cart/preview`:


                        ```
                          /**
                             * Get cart contents
                             *
                             * @param {String} cartItemHash
                             * @param {Function} onComplete
                             */
                            getCartContent(cartItemHash, onComplete) {
                                const options = {
                                    template: 'cart/preview',
                                    params: {
                                        suggest: cartItemHash,
                                    },
                                    config: {
                                        cart: {
                                            suggestions: {
                                                limit: 4,
                                            },
                                        },
                                    },
                                };

                                utils.api.cart.getContent(options, onComplete);
                            }
                        ```
                      header:
                        anchor: remote_remote-api-example
              - title: Data Tags & Event Hooks
                route:
                  path: /data-tags-event-hooks-reference
                data:
                  blocks:
                    - type: html
                      data: <h1>Data Tags/Event Hook Reference</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#data_stencil-data-tags\">Stencil Data Tags and Event Hooks</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: "## Stencil Data Tags and Event Hooks\nStencil themes provide the following chains of data tags, delegated DOM (Document Object Model) events, emitted Stencil event hooks, and Stencil event parameter(s).\n\n### Cart Item Added\n\nHook for items added to the customer’s shopping cart.\n\n**Function Signature:**\n\n```\nitemAdd() {\n    this.$body.on('submit', '[data-cart-item-add]', (event) => {\n        this.emit('cart-item-add', event, event.target);\n    });\n}\n```\n\n<table>\n\t<tr>\n\t\t<th>Data Tag</th>\n\t\t<th>Delegated DOM Event</th>\n\t\t<th>Stencil Event/Hook</th>\n\t\t<th>Stencil Event Parameter(s)</th>\n\t</tr>\n\t<tr>\n\t\t<td>data-cart-item-add</td>\n\t\t<td>submit</td>\n\t\t<td>cart-item-add</td>\n\t\t<td>event, event.target</td>\n\t</tr>\n</table>\n\n### Faceted-Search Events\n\nHooks for faceted-search selections that the customer initiates or submits.\n\n**Function Signature**\n\n```\nsearchEvents() {\n  this.$body.on('click', '[data-faceted-search-facet]', (event) => {\n        this.emit('facetedSearch-facet-clicked', event);\n  });\n \n  this.$body.on('submit', '[data-faceted-search-range]', (event) => {\n        this.emit('facetedSearch-range-submitted', event);\n  });\n}\n\n```\n\n<table>\n\t<tr>\n\t\t<th>Data Tag</th>\n\t\t<th>Delegated DOM Event</th>\n\t\t<th>Stencil Event/Hook</th>\n\t\t<th>Stencil Event Parameter(s)</th>\n\t</tr>\n\t<tr>\n\t\t<td>data-faceted-search-facet</td>\n\t\t<td>click</td>\n\t\t<td>facetedSearch-facet-clicked</td>\n\t\t<td>event</td>\n\t</tr>\n\t<tr>\n\t\t<td>data-faceted-search-range</td>\n\t\t<td>submit</td>\n\t\t<td>facetedSearch-range-submitted</td>\n\t\t<td>event</td>\n\t</tr>\n</table>"
                      header:
                        anchor: data_stencil-data-tags
              - title: stencil-utils API
                route:
                  path: /stencil-utils-api-reference
                data:
                  blocks:
                    - type: html
                      data: <h1>stencil-utils API Reference</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#stencil-utils_api\">API [api.js]</a></li>\n    <li><a href=\"#stencil-utils_cart\">Cart API</a></li>\n    <li><a href=\"#stencil-utils_cookie\">Cookie Resource</a></li>\n    <li><a href=\"#stencil-utils_countries\">Countries Resource</a></li>\n    <li><a href=\"#stencil-utils_product-attributes\">Product Attributes Resource</a></li>\n    <li><a href=\"#stencil-utils_product\">Product Resource</a></li>\n    <li><a href=\"#stencil-utils_search\">Search Resource</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        These functions help you set up asynchronous requests to
                        modify the customer’s cart or storefront view. By using
                        this abstraction library, you can gain more-granular
                        control over themes’ presentation.
                    - type: callout
                      data:
                        title: Example Code
                        body: >-
                          Examples on this page are from [Stencil's Cornerstone
                          base
                          theme](https://github.com/bigcommerce/cornerstone/tree/master/assets/js/theme).
                          The base path for all listed examples is:
                          `/cornerstone/assets/js/theme/`.
                    - type: text
                      data: "## API [api.js]\n\nThe `api.getPage()` function allows you to add Ajax functionality to your themes.\n\n**getPage Signature**\n\nThe following statement passes `url` and `options` arguments to the `api.getPage()` function:\n\n`utils.api.getPage(url, options, callback)`\n\n<table>\n  <tbody><tr>\n    <th>Argument</th>\n    <th>Type</th>\n    <th>Description/Usage</th>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>String</td>\n    <td>URL to which you want to send a request (for example: localhost:4000/cart.php)</td>\n  </tr>\n  <tr>\n    <td>options</td>\n    <td>Object</td>\n\t\t<td>Can contain <code>template</code>, <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FormData\">FormData</a></code> (for POST methods), <code>params</code>&nbsp;(for GET methods), and/or <code>config</code>.   \n\t\tThe <code>template</code> option allows you to select a particular template, or an array of templates, for rendering one page. Each value must correspond to a file present in the theme's <code>templates/components/</code> subdirectory. \n      The `config` option can be used to pass extra resources, corresponding to attributes that are valid in a page's front matter, as an object.\n    </td>\n  </tr>\n  <tr>\n    <td>callback</td>\n    <td>Function</td>\n    <td>Asynchronous function call to handle the results</td>\n  </tr>\n</tbody>\n</table>\n\nThe <code>config</code> argument works like front matter: it encapsulates JSON. For a usage example of <code>config</code>, see the [Remote API Example](/stencil-docs/adding-event-hooks-to-your-theme/remote-api-example#remote_remote-api-example).\n\n### getPage Example\n\nIn the following example (from `common/faceted-search.js`), `api.getPage()` is called to help execute an `updateView()` function:"
                      header:
                        anchor: stencil-utils_api
                    - type: code
                      data: |-
                        updateView() {
                                $(this.options.blockerSelector).show();

                                api.getPage(urlUtils.getUrl(), this.requestOptions, (err, content) => {
                                    $(this.options.blockerSelector).hide();

                                    if (err) {
                                        throw new Error(err);
                                    }

                                    // Refresh view with new content
                                    this.refreshView(content);
                                });
                            }
                      header:
                        title: getPage Example
                    - type: text
                      data: "## Cart API \n\nThe following functions allow your theme to work with cart contents in customized ways.\n\n<b>itemAdd Signature</b>\n\nThe `itemAdd`function allows your code to add an item to the cart, with options:\n\n<code>utils.api.cart.itemAdd(<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FormData\">FormData</a>, callback)</code>\n\n<table>\n  <tbody><tr>\n    <th>Argument</th>\n    <th>Type</th>\n    <th>Description/Usage</th>\n  </tr>\n  <tr>\n    <td>formData</td>\n    <td><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FormData\">FormData</a> object </td>\n    <td>Contains all details about the added item and its product options</td>\n  </tr>\n  <tr>\n    <td>callback</td>\n    <td>Function</td>\n    <td>Asynchronous function call to handle the results</td>\n  </tr>\n</tbody>\n</table>\n\n\n<b>itemAdd Example</b> \n\n<code>itemAdd</code> is called at the head of the following example (from <code>common/product-details.js</code>) to populate the cart:\n\n```\n// Add item to cart\n        utils.api.cart.itemAdd(new FormData(form), (err, response) => {\n            const errorMessage = err || response.data.error;\n\n            $addToCartBtn\n                .val(originalBtnVal)\n                .prop('disabled', false);\n\n            this.$overlay.hide();\n\n            // Guard statement\n            if (errorMessage) {\n                // Strip the HTML from the error message\n                const tmp = document.createElement('DIV');\n                tmp.innerHTML = errorMessage;\n\n                return alert(tmp.textContent || tmp.innerText);\n            }\n\n            // Open preview modal and update content\n            if (this.previewModal) {\n                this.previewModal.open();\n\n                this.updateCartContent(this.previewModal, response.data.cart_item.hash);\n            } else {\n                this.$overlay.show();\n                // if no modal, redirect to the cart page\n                this.redirectTo(response.data.cart_item.cart_url || this.context.urls.cart);\n            }\n        }); \n```\n\n\n<b>itemUpdate Signature</b>\n\nThe <code>itemUpdate</code> function allows your code to update a specified cart item’s quantity:\n\n`utils.api.cart.itemUpdate(itemId, qty, callback)`\n\n<table>\n  <tbody><tr>\n    <th>Argument</th>\n    <th>Type</th>\n    <th>Description/Usage</th>\n  </tr>\n  <tr>\n    <td>itemId</td>\n    <td>String</td>\n    <td>The item’s ID</td>\n  </tr>\n  <tr>\n    <td>qty</td>\n    <td>Integer</td>\n    <td>The item’s quantity in the cart</td>\n  </tr>\n  <tr>\n    <td>callback</td>\n    <td>Function</td>\n    <td>Asynchronous function call to handle the results</td>\n  </tr>\n</tbody></table>\n\n<b>itemUpdate Example</b>\n\nIn the following example (from <code>cart.js</code>), <code>itemUpdate</code> is called just before the final if/else test for an empty cart:\n\n```\n\t\t\t\tcartUpdate($target) {\n        const itemId = $target.data('cartItemid');\n        const $el = $(`#qty-${itemId}`);\n        const oldQty = parseInt($el.val(), 10);\n        const maxQty = parseInt($el.data('quantityMax'), 10);\n        const minQty = parseInt($el.data('quantityMin'), 10);\n        const minError = $el.data('quantityMinError');\n        const maxError = $el.data('quantityMaxError');\n        const newQty = $target.data('action') === 'inc' ? oldQty + 1 : oldQty - 1;\n\n        // Does not quality for min/max quantity\n        if (newQty < minQty) {\n            return swal({\n                text: minError,\n                type: 'error',\n            });\n        } else if (maxQty > 0 && newQty > maxQty) {\n            return swal({\n                text: maxError,\n                type: 'error',\n            });\n        }\n\n        this.$overlay.show();\n\n        utils.api.cart.itemUpdate(itemId, newQty, (err, response) => {\n            this.$overlay.hide();\n\n            if (response.data.status === 'succeed') {\n                // if the quantity is changed \"1\" from \"0\", we have to remove the row.\n                const remove = (newQty === 0);\n\n                this.refreshContent(remove);\n            } else {\n                $el.val(oldQty);\n                swal({\n                    text: response.data.errors.join('\\n'),\n                    type: 'error',\n                });\n            }\n        });\n    } \n```\n\n\n<b>itemRemove Signature</b>\n\nThe <code>itemRemove</code> function allows your code to remove items from the cart:\n\n`utils.api.cart.itemRemove(itemId, callback)`\n\n<table>\n  <tbody>\n\t<tr>\n    <th>Argument</td>\n    <th>Type</td>\n    <th>Description/Usage</td>\n  </tr>\n  <tr>\n    <td>itemId</td>\n    <td>String</td>\n    <td>The item’s ID</td>\n  </tr>\n  <tr>\n    <td>callback</td>\n    <td>Function</td>\n    <td>Asynchronous function call to handle the results</td>\n  </tr>\n\t</tbody>\n</table>\n\n\n<b>itemRemove Example</b>\n\nIn the following example (from <code>cart.js</code>), <code>itemRemove</code> is called before the if/else test:\n\n```\n\t\t\t\tcartRemoveItem(itemId) {\n        this.$overlay.show();\n        utils.api.cart.itemRemove(itemId, (err, response) => {\n            if (response.data.status === 'succeed') {\n                this.refreshContent(true);\n            } else {\n                alert(response.data.errors.join('\\n'));\n            }\n        });\n    } \n```\n\n\n<b>update Signature</b>\n\nThe <code>update</code> function allows your code to update the set of items in the cart:\n\n`utils.api.cart.update(itemId, qty, callback)`\n\n\n<table>\n  <tbody><tr>\n    <th>Argument</th>\n    <th>Type</th>\n    <th>Description/Usage</th>\n  </tr>\n  <tr>\n    <td>items</td>\n    <td>Array</td>\n    <td>The items in the cart</td>\n  </tr>\n  <tr>\n    <td>callback</td>\n    <td>Function</td>\n    <td>Asynchronous function call to handle the results</td>\n  </tr>\n</tbody>\n</table>\n\n\n`update Example`\n\nThe following example shows a call to `update` within the `itemUpdate` function:\n\n```\n/**\n    itemUpdate(itemId, qty, callback) {\n        let callbackArg = callback;\n        let items;\n\n        if (Array.isArray(itemId) && typeof qty === 'function') {\n            callbackArg = qty;\n            items = itemId;\n        } else {\n            items = [\n                {\n                    id: itemId,\n                    quantity: qty,\n                },\n            ];\n        }\n\n        this.update(items, (err, response) => {\n            const emitData = {\n                items,\n                err,\n                response,\n            };\n\n            Hooks.emit('cart-item-update-remote', emitData);\n            callbackArg(err, response);\n        });\n    } \n```\n\n\n**getItemGiftWrappingOptions Signature**\n\nThe `getItemGiftWrappingOptions` function allows your code to retrieve gift-wrapping options for the current cart item, in customized ways:\n\n\n`utils.api.cart.getItemGiftWrappingOptions(itemId, callback)`\n\n<table>\n  <tbody>\n\t\t<tr>\n    <th>Argument</th>\n    <th>Type</th>\n    <th>Description/Usage</th>\n  </tr>\n  <tr>\n    <td>itemId</td>\n    <td>String</td>\n    <td>The cart item</td>\n  </tr>\n  <tr>\n    <td>callback</td>\n    <td>Function</td>\n    <td>Asynchronous function call to handle the results</td>\n  </tr>\n\t</tbody>\n</table>\n\n\n**getItemGiftWrappingOptions Example**\n\nThe following example (from `cart.js`) calls `getItemGiftWrappingOptions` to display gift-wrapping options in a modal:\n\n```\n\tbindGiftWrappingEvents() {\n        const modal = defaultModal();\n\n        $('[data-item-giftwrap]').on('click', (event) => {\n            const itemId = $(event.currentTarget).data('item-giftwrap');\n            const options = {\n                template: 'cart/modals/gift-wrapping-form',\n            };\n\n            event.preventDefault();\n\n            modal.open();\n\n            utils.api.cart.getItemGiftWrappingOptions(itemId, options, (err, response) => {\n                modal.updateContent(response.content);\n\n                this.bindGiftWrappingForm();\n            });\n        });\n    }\n```\n\n\n<b>submitItemGiftWrappingOption Signature</b>\n\nThe `submitItemGiftWrappingOption` function allows your code to handle the customer’s gift-wrapping selection for the current cart item:\n\n`utils.api.cart.submitItemGiftWrappingOption(itemId, qty, callback)`\n\n<table>\n  <tbody>\n\t\t<tr>\n    <th>Argument</th>\n    <th>Type</th>\n    <th>Description/Usage</th>\n  </tr>\n  <tr>\n    <td>itemId</td>\n    <td>String</td>\n    <td>The cart item</td>\n  </tr>\n  <tr>\n    <td>callback</td>\n    <td>Function</td>\n    <td>Asynchronous function call to handle the results</td>\n  </tr>\n</tbody>\n</table>\n\n\n<b>submitItemGiftWrappingOption Example</b> \n\nThis commented example shows a simple call to `submitItemGiftWrappingOption`:\n\n```\n/**\n     * Submit giftwrapping options\n     *\n     * @param {String} itemId\n     * @param {Function} callback\n     */\n    submitItemGiftWrappingOption(itemId, qty, callback) {\n        this.remoteRequest(`/gift-wrapping/${itemId}`, 'POST', { params }, callback);\n    } \n```\n\n\n**getContent Signature**\n\nThe `getContent` function allows your code to display the cart contents in customized ways:\n\n`utils.api.cart.getContent(options, callback)`\n\n<table>\n  <tbody><tr>\n    <th>Argument</th>\n    <th>Type</th>\n    <th>Description/Usage</th>\n  </tr>\n  <tr>\n    <td>options</td>\n    <td>Object</td>\n    <td>Template containing content and totals children</td>\n  </tr>\n  <tr>\n    <td>callback</td>\n    <td>Function</td>\n    <td>Asynchronous function call to handle the results</td>\n  </tr>\n</tbody>\n</table>\n\n**getContent Examples**\n\nThe following example from `common/product-details.js` a call to `getContent`, set up by a prior call to `getCartContent`:\n\n<pre>    /**\n     * Get cart contents\n     *\n     * @param {String} cartItemHash\n     * @param {Function} onComplete\n     */\n    getCartContent(cartItemHash, onComplete) {\n        const options = {\n            template: 'cart/preview',\n            params: {\n                suggest: cartItemHash,\n            },\n            config: {\n                cart: {\n                    suggestions: {\n                        limit: 4,\n                    },\n                },\n            },\n        };\n\n        utils.api.cart.getContent(options, onComplete);\n    } </pre>\n\nThis example (from <code>cart.js</code>) shows a call to <code>getContent</code> within the <code>refreshContent</code> function:\n\n```\nrefreshContent(remove) {\n        const $cartItemsRows = $('[data-item-row]', this.$cartContent);\n        const $cartPageTitle = $('[data-cart-page-title]');\n        const options = {\n            template: {\n                content: 'cart/content',\n                totals: 'cart/totals',\n                pageTitle: 'cart/page-title',\n                statusMessages: 'cart/status-messages',\n            },\n        };\n\n        this.$overlay.show();\n\n        // Remove last item from cart? Reload\n        if (remove && $cartItemsRows.length === 1) {\n            return window.location.reload();\n        }\n\n        utils.api.cart.getContent(options, (err, response) => {\n            this.$cartContent.html(response.content);\n            this.$cartTotals.html(response.totals);\n            this.$cartMessages.html(response.statusMessages);\n\n            $cartPageTitle.replaceWith(response.pageTitle);\n            this.bindEvents();\n            this.$overlay.hide();\n\n            const quantity = $('[data-cart-quantity]', this.$cartContent).data('cart-quantity') || 0;\n\n            $('body').trigger('cart-quantity-update', quantity);\n        });\n    } \n```\n\nHere is a final example of a call to <code>getContent</code>, from <code>global/cart-preview.js</code>:\n\n``` \n$cart.on('click', (event) => {\n        const options = {\n            template: 'common/cart-preview',\n        };\n\n        // Redirect to full cart page\n        //\n        // https://developer.mozilla.org/en-US/docs/Browser_detection_using_the_user_agent\n        // In summary, we recommend looking for the string 'Mobi' anywhere in the User Agent to detect a mobile device.\n        if (/Mobi/i.test(navigator.userAgent)) {\n            return event.stopPropagation();\n        }\n\n        event.preventDefault();\n\n        $cartDropdown\n            .addClass(loadingClass)\n            .html($cartLoading);\n        $cartLoading\n            .show();\n\n        utils.api.cart.getContent(options, (err, response) => {\n            $cartDropdown\n                .removeClass(loadingClass)\n                .html(response);\n            $cartLoading\n                .hide();\n        });\n    });\n```\n\n\n**getShippingQuotes Signature**\n\nThe `getShippingQuotes` function allows your code to retrieve shipping-cost quotes for the cart’s contents. It returns `shippingQuote` objects that contain IDs. You must follow `getShippingQuotes` by calling `submitShippingQuote` on a `quoteId`:\n\n`utils.api.cart.getShippingQuotes(params, renderWith, callback)`\n\n<table>\n  <tbody><tr>\n    <th>Argument</th>\n    <th>Type</th>\n    <th>Description/Usage</th>\n  </tr>\n  <tr>\n    <td>params</td>\n    <td>Object</td>\n    <td>Contains country_id, state_id, and zip_code</td>\n  </tr>\n  <tr>\n    <td>template</td>\n    <td>String/Array/Object</td>\n    <td>The template to use for rendering</td>\n  </tr>\n  <tr>\n    <td>callback</td>\n    <td>Function</td>\n    <td>Asynchronous function call to handle the results</td>\n  </tr>\n</tbody>\n</table>\n\n\n**getShippingQuotes and submitShippingQuote Example**\n\nThe following example from `cart/shipping-estimator.js` shows calls to both `getShippingQuotes` and `submitShippingQuote`:"
                      header:
                        anchor: stencil-utils_cart
                    - type: code
                      data: "bindEstimatorEvents() {\n        const $estimatorContainer = $('.shipping-estimator');\n        const $estimatorForm = $('.estimator-form');\n\n        $estimatorForm.on('submit', (event) => {\n            const params = {\n                country_id: $('[name=\"shipping-country\"]', $estimatorForm).val(),\n                state_id: $('[name=\"shipping-state\"]', $estimatorForm).val(),\n                city: $('[name=\"shipping-city\"]', $estimatorForm).val(),\n                zip_code: $('[name=\"shipping-zip\"]', $estimatorForm).val(),\n            };\n\n            event.preventDefault();\n\n            utils.api.cart.getShippingQuotes(params, 'cart/shipping-quotes', (err, response) => {\n                $('.shipping-quotes').html(response.content);\n\n                // bind the select button\n                $('.select-shipping-quote').on('click', (clickEvent) => {\n                    const quoteId = $('.shipping-quote:checked').val();\n\n                    clickEvent.preventDefault();\n\n                    utils.api.cart.submitShippingQuote(quoteId, () => {\n                        location.reload();\n                    });\n                });\n            });\n        }); \n\t"
                      header:
                        subtitle: cart/shipping-estimator.js
                        title: getShippingQuotes and SubmitShippingQuote Example
                    - type: text
                      data: "**submitShippingQuote Signature**\n\nThe `submitShippingQuote` function must be called after `getShippingQuote`, which returns `shippingQuote` objects that contain IDs. The cart page renders the shipping quotes. When the user selects one of the quotes, this function sends that `quoteId` to the backend:\n\n`utils.api.cart.submitShippingQuote(quoteId, callback)`\n\n<table>\n  <tbody>\n\t\t<tr>\n    <th>Argument</th>\n    <th>Type</th>\n    <th>Description/Usage</th>\n  </tr>\n  <tr>\n    <td>quoteId</td>\n    <td>Number</td>\n    <td>ID for a shipping quote returned by <code>getShippingQuotes</code></td>\n  </tr>\n  <tr>\n    <td>callback</td>\n    <td>Function</td>\n    <td>Asynchronous function call to handle the results</td>\n  </tr>\n</tbody>\n\t</table>\n\n(For sample code, see `getShippingQuotes` and `submitShippingQuote` examples above.)"
                    - type: text
                      data: "<b>applyCode Signature</b>\n\nThe `applyCode` function applies a coupon code or gift certificate to the cart:\n\n`utils.api.cart.applyCode(code, callback)`\n\n<table>\n  <tbody>\n\t\t<tr>\n    <th>Argument</th>\n    <th>Type</th>\n    <th>Description/Usage</th>\n  </tr>\n  <tr>\n    <td>code</td>\n    <td>String</td>\n    <td>Alphanumeric representation of the coupon or gift-certificate code</td>\n  </tr>\n  <tr>\n    <td>callback</td>\n    <td>Function</td>\n    <td>Asynchronous function call to handle the results</td>\n  </tr>\n</tbody>\n</table>\n\nIn the following example from `cart.js`,  `applyCode` is called before the final if/else test to apply a coupon code:"
                    - type: code
                      data: |-
                        bindPromoCodeEvents() {
                                const $couponContainer = $('.coupon-code');
                                const $couponForm = $('.coupon-form');
                                const $codeInput = $('[name="couponcode"]', $couponForm);

                                $('.coupon-code-add').on('click', (event) => {
                                    event.preventDefault();

                                    $(event.currentTarget).hide();
                                    $couponContainer.show();
                                    $('.coupon-code-cancel').show();
                                    $codeInput.focus();
                                });

                                $('.coupon-code-cancel').on('click', (event) => {
                                    event.preventDefault();

                                    $couponContainer.hide();
                                    $('.coupon-code-cancel').hide();
                                    $('.coupon-code-add').show();
                                });

                                $couponForm.on('submit', (event) => {
                                    const code = $codeInput.val();

                                    event.preventDefault();

                                    // Empty code
                                    if (!code) {
                                        return alert($codeInput.data('error'));
                                    }

                                    utils.api.cart.applyCode(code, (err, response) => {
                                        if (response.data.status === 'success') {
                                            this.refreshContent();
                                        } else {
                                            alert(response.data.errors.join('\n'));
                                        }
                                    });
                                });
                            }
                      header:
                        subtitle: cart.js
                        title: applyCode
                      config:
                        mode: js
                    - type: text
                      data: >-
                        ## Cookie Resource


                        This resource allows you to override a browser’s default
                        alert box for cookie notifications.


                        <table>
                          <tbody><tr>
                            <th>Argument</th>
                            <th>Description/Usage</th>
                          </tr>
                          <tr>
                            <td>privacyMessage</td>
                            <td>Merchant-defined message informing customers of storefront’s cookie usage (e.g., to comply with E.U. notification requirement)</td>
                          </tr>
                        </tbody>

                        </table>



                        <b>Cookie Example:</b> 


                        The following example
                        (from`global/cookieNotification.js`) shows a call to
                        `utils.hooks.on('cookie-privacy-notification', (event,
                        privacyMessage)` to help comply with European Union
                        privacy requirements:
                      header:
                        anchor: stencil-utils_cookie
                    - type: code
                      data: |-
                        /**
                         * European websites must notify users of cookies to comply with European Union law.
                         * This will alert shoppers that this website uses cookies.
                         */
                        export default function () {
                          
                            /*
                            // Here you can override the default browser alert box by hooking to the 'cookie-privacy-notification' hook.
                            utils.hooks.on('cookie-privacy-notification', (event, privacyMessage) => {
                                // You can make your own custom modal or alert box appear in your theme using the privacyMessage provided
                                myCustomAlert(privacyMessage);

                                // Call event.preventDefault() to prevent the default browser alert from occurring in stencil-utils
                                event.preventDefault();
                            });
                            */

                            utils.hooks.on('cookie-privacy-notification', (event) => {
                                event.preventDefault();

                                const $privacyDialog = $('.cookieMessage');
                                $privacyDialog.show();

                                $('body').on('click', '[data-privacy-accept]', () => {
                                    utils.hooks.emit('cookie-privacy-accepted');
                                    $privacyDialog.hide();
                                });
                            });
                        } 
                      header:
                        title: Cookie Example
                        subtitle: global/cookieNotification.js
                      config:
                        mode: js
                    - type: text
                      data: "## Countries Resources\n\nThese functions allow your theme or app to retrieve standardized country names, by numeric ID or by string.\n\n**getById Signature**\n\nThe `getById` function retrieves standardized country names by numeric ID:\n\n`utils.api.countries.getById(countryId, callback)`\n\n<table>\n  <tbody><tr>\n    <th>Argument</th>\n    <th>Type</th>\n    <th>Description/Usage</th>\n  </tr>\n  <tr>\n    <td>countryId</td>\n    <td>Number</td>\n    <td>Country code</td>\n  </tr>\n  <tr>\n    <td>callback</td>\n    <td>Function</td>\n    <td>Asynchronous function call to handle the results</td>\n  </tr>\n\t</tbody>\n</table>\n\n\nThe following example a call to `getById`, followed by a call to the `getByName` function (described below):"
                      header:
                        anchor: stencil-utils_countries
                    - type: code
                      data: "/*   \n\t*Get country data by id wrapper\n     * @param {Number} id\n     * @param {Function} callback\n*/\n\n    getById(id, callback) {\n        const url = this.endpoint + id;\n\n        this.remoteRequest(url, 'GET', {}, callback);\n    }\n\n/*\n     * Get country data by country name\n     * @param name\n     * @param callback\n*/\n    getByName(name, callback) {\n        const url = this.endpoint + name;\n\n        this.remoteRequest(url, 'GET', {}, callback);\n    }\n}"
                      header:
                        title: getById Example
                      config:
                        mode: js
                    - type: text
                      data: "**getByName Signature**\n\nThe `getByName` function retrieves states by country name, and returns an array of states that can be used in the callback:\n\n`utils.api.countries.getByName(countryName, callback)`\n\n<table>\n  <tbody>\n\t\t<tr>\n    <td>Argument</td>\n    <td>Type</td>\n    <td>Description/Usage</td>\n  </tr>\n  <tr>\n    <td>countryName</td>\n    <td>String</td>\n    <td>Country name</td>\n  </tr>\n  <tr>\n    <td>callback</td>\n    <td>Function</td>\n    <td>Asynchronous function call to handle the results</td>\n  </tr>\n\t</tbody>\n</table>\n\n\nIn the following example from `common/state-country.js`, `getByName` is called after the initial if test:"
                    - type: code
                      data: >-
                        $('select[data-field-type="Country"]').on('change',
                        (event) => {
                                const countryName = $(event.currentTarget).val();

                                if (countryName === '') {
                                    return;
                                }

                                utils.api.country.getByName(countryName, (err, response) => {
                                    if (err) {
                                        alert(context.state_error);

                                        return callback(err);
                                    }

                                    const $currentInput = $('[data-field-type="State"]');

                                    if (!_.isEmpty(response.data.states)) {
                                        // The element may have been replaced with a select, reselect it
                                        const $selectElement = makeStateRequired($currentInput, context);

                                        addOptions(response.data, $selectElement, options);
                                        callback(null, $selectElement);
                                    } else {
                                        const newElement = makeStateOptional($currentInput, context);

                                        callback(null, newElement);
                                    }
                                });
                            }); 
                      header:
                        title: getByName Example
                        subtitle: common/state-country.js
                      config:
                        mode: js
                    - type: text
                      data: "## Product Attributes Resource\n\nThe `optionChange` function is fired when the customer selects a product option for the current cart item (for example, changing a shirt’s color from a default \"yellow\" to \"green\"):\n\n<b>optionChange Signature</b>\n\n`utils.api.productAttributes.optionChange(productId, params, callback)`\n\n<table>\n  <tbody>\n\t\t<tr>\n    <th>Argument</th>\n    <th>Type</th>\n    <th>Description/Usage</th>\n  </tr>\n  <tr>\n    <td>params</td>\n    <td>Object</td>\n    <td>Contains a collection of IDs that map to product properties (color, size, etc.)</td>\n  </tr>\n  <tr>\n    <td>productId</td>\n    <td>Number</td>\n    <td>ID for this product</td>\n  </tr>\n  <tr>\n    <td>callback</td>\n    <td>Function</td>\n    <td>Asynchronous function call to handle the results</td>\n  </tr>\n\t</tbody>\n</table>\n\n\n**optionChange Examples**\n\nIn this example (from `common/product-details.js`), `optionChange` is called to update options in a Quick View modal:"
                      header:
                        anchor: stencil-utils_product-attributes
                    - type: code
                      data: >-
                        // Update product attributes. If we're in quick view and
                        the product has options, then also update the initial
                        view in case items are oos
                                if (_.isEmpty(productAttributesData) && hasOptions) {
                                    const $productId = $('[name="product_id"]', $form).val();

                                    utils.api.productAttributes.optionChange($productId, $form.serialize(), (err, response) => {
                                        const attributesData = response.data || {};

                                        this.updateProductAttributes(attributesData);
                                        this.updateView(attributesData);
                                    });
                                } else {
                                    this.updateProductAttributes(productAttributesData);
                                } 
                      header:
                        title: 'optionChange Example #1'
                        subtitle: common/product-details.js
                      config:
                        mode: js
                    - type: text
                      data: >-
                        In this example from `cart.js`, `optionChange` is called
                        before the final `if` test:
                    - type: code
                      data: |
                        cartEditOptions(itemId) {
                                const modal = defaultModal();
                                const options = {
                                    template: 'cart/modals/configure-product',
                                };

                                modal.open();

                                utils.api.productAttributes.configureInCart(itemId, options, (err, response) => {
                                    modal.updateContent(response.content);

                                    this.bindGiftWrappingForm();
                                });

                                utils.hooks.on('product-option-change', (event, option) => {
                                    const $changedOption = $(option);
                                    const $form = $changedOption.parents('form');
                                    const $submit = $('input.button', $form);
                                    const $messageBox = $('.alertMessageBox');
                                    const item = $('[name="item_id"]', $form).attr('value');

                                    utils.api.productAttributes.optionChange(item, $form.serialize(), (err, result) => {
                                        const data = result.data || {};

                                        if (err) {
                                            alert(err);
                                            return false;
                                        }
                      header:
                        subtitle: cart.js
                        title: 'optionChange Example #2'
                      config:
                        mode: js
                    - type: text
                      data: "## Product Resource\n\nThe `product.getById` function allows your code to retrieve, and to present, detailed product information by product ID.\n\n<b>getById Signature</b>\n\n`utils.api.product.getById(productId, params, callback)`\n\n<table>\n  <tbody><tr>\n    <th>Argument</th>\n    <th>Type</th>\n    <th>Description/Usage</th>\n  </tr>\n  <tr>\n    <td>productId</td>\n    <td>Number</td>\n    <td>ID for this product</td>\n  </tr>\n  <tr>\n    <td>params</td>\n    <td>Object</td>\n    <td>Contains request options and/or presentation template</td>\n  </tr>\n  <tr>\n    <td>callback</td>\n    <td>Function</td>\n    <td>Asynchronous function call to handle the results</td>\n  </tr>\n\t</tbody>\n</table>\n\n\nThe following example (from `global/quick-view.js`) calls `product.getById` to populate the Quick View modal:"
                      header:
                        anchor: stencil-utils_product
                    - type: code
                      data: "\t$('body').on('click', '.quickview', (event) => {\n        event.preventDefault();\n\n        const productId = $(event.currentTarget).data('product-id');\n\n        modal.open({ size: 'large' });\n\n        utils.api.product.getById(productId, { template: 'products/quick-view' }, (err, response) => {\n            modal.updateContent(response);\n\n            modal.$content.find('.productView').addClass('productView--quickView');\n\n            return new ProductDetails(modal.$content.find('.quickView'), context);\n        });\n    }); "
                      header:
                        subtitle: global/quick-view.js
                        title: getById Example
                      config:
                        mode: js
                    - type: text
                      data: >-
                        ## Search Resource


                        The `search` function allows you to present a customized
                        user interface for search results.


                        <b>search Signature</b>


                        `utils.api.search.search(query, params, callback)`


                        <table>
                          <tbody><tr>
                            <th>Argument</th>
                            <th>Type</th>
                            <th>Description/Usage</th>
                          </tr>
                          <tr>
                            <td>query</td>
                            <td>String</td>
                            <td>Contains the customer’s search query</td>
                          </tr>
                          <tr>
                            <td>params</td>
                            <td>Object</td>
                            <td>Contains request options and/or presentation template</td>
                          </tr>
                          <tr>
                            <td>callback</td>
                            <td>Function</td>
                            <td>Asynchronous function call to handle the results</td>
                          </tr>
                        </tbody>

                        </table>
                      header:
                        anchor: stencil-utils_search
        - title: 'Custom JS Implementations '
          route:
            path: /custom-javascript-implementations
          data:
            children:
              - title: Adding Javascript to a Stencil Theme
                route:
                  path: /adding-javascript
                data:
                  blocks:
                    - type: html
                      data: <h1>Adding Javascript to Your Stencil Theme</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#adding_bundling-and-minification\">Bundling and Minification</a></li>\n    <li><a href=\"#adding_development-options\">Development Options</a></li>\n    <li><a href=\"#adding_using-npm\">Using npm (Node Package Manager)</a></li>\n    <li><a href=\"#adding_placing-modules\">Placing Modules in assets/js/</a></li>\n    <li><a href=\"#adding_theme-specific-js\">Theme-Specific JavaScript Modules</a></li>\n    <li><a href=\"#adding_mapping-page\">Mapping Page Types to JavaScript Modules</a></li>\n    <li><a href=\"#adding_mapping-custom\">Mapping Custom Templates to JavaScript Modules</a></li>\n    <li><a href=\"#adding_summary\">Summary</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: "## Bundling and Minification\n\nA small Web application, such as an ecommerce theme, can include rich user interactions that depend on many small JavaScript and CSS modules. If we were to embed each of the JavaScript modules in a template file with a separate `<script>` tag, the shopper's browser would need to make separate HTTP requests to retrieve each module.\n\t\nIn some cases, it would take longer to set up the HTTP request than to download the small JavaScript module – leading to slower load times. On mobile devices, slow load times can be especially frustrating.\n\n### Bundling\nTo solve this problem, Stencil – like other modern front-end frameworks – bundles all the JavaScript modules into a single file (a bundle), allowing the shopper's browser to make only a single HTTP request. After the browser has downloaded the bundle of JavaScript modules, the browser caches them, speeding up the rest of the shopper's session.\n\n### Minification\nBeyond reducing the number of HTTP calls required to fetch all the required JavaScript modules, we can reduce the size of the individual JavaScript modules through minification. JavaScript minification removes white space and comments, shortens variable and function names, removes dead code, and more. The goal, in all cases, is to reduce the amount of bandwidth necessary to transmit the JavaScript module to the browser."
                      header:
                        anchor: adding_bundling-and-minification
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Development Options


                        When you add JavaScript to a theme, use one of the
                        following techniques, so that Stencil will automatically
                        bundle and minify your modules:


                        * **Using npm:** Add third-party JavaScript modules to
                        your theme with npm where possible.


                        * **Place Modules in assets/js/:** For a JavaScript
                        module that is not distributed via npm, add this module
                        to your theme by creating a subdirectory within
                        assets/js/ that contains your module.


                        * **Theme-Specific JavaScript Modules:** Stencil themes
                        include their own custom JavaScript modules for most
                        page types. You can alter these page-type–specific
                        modules by editing the files in assets/js/theme/*.js.


                        These techniques are outlined in the following sections.
                      header:
                        anchor: adding_development-options
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Using npm (Node Package Manager)


                        Many third-party JavaScript components are distributed
                        with npm (Node Package Manager). When you use the npm
                        command-line utility to add a JavaScript component to
                        your theme, Stencil will automatically bundle and minify
                        the component. To enable this bundling/minification, run
                        each module's `npm install` command from the root
                        directory of your theme.


                        ### Taking Over from npm


                        npm facilitates managing third-party JavaScript
                        components by placing each JavaScript component – and
                        any of its dependencies – in the correct directories.
                        However, as a developer, you will still need to edit
                        your theme files to wire up the JavaScript component to
                        expose it on your storefront. You will find several
                        examples of this on the following pages.
                      header:
                        anchor: adding_using-npm
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Placing Modules in assets/js/


                        You can freely create subdirectories within
                        `assets/js/`, to contain new JavaScript modules. The
                        constraint is that all JavaScript files in each module
                        must use the `.js` file extension.
                      header:
                        anchor: adding_placing-modules
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Theme-Specific JavaScript Modules


                        In your theme's `assets/js/theme/` subdirectory, you
                        will find a tree of JavaScript files. Each file is a
                        JavaScript module. Some modules are for specific page
                        types. Others are common modules that can be used in
                        other modules. Still others are global modules that are
                        available on every page.
                      header:
                        anchor: adding_theme-specific-js
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Mapping Page Types to JavaScript Modules


                        To find the mapping from page types to modules in
                        `assets/js/theme/`, examine the `pageClasses` object in
                        the file: `assets/js/app.js`. 


                        Each `=>import(...)` function within this class maps a
                        page type to the entry module for that page type. 


                        For example: When the `cart` page type is loaded in the
                        browser, the JavaScript module named `cart` will be
                        loaded.


                        ### Mapping Example in app.js


                        Below is an excerpt of mappings from the Cornerstone
                        base theme's
                        [assets/js/app.js](https://github.com/bigcommerce/cornerstone/blob/master/assets/js/app.js):
                      header:
                        anchor: adding_mapping-page
                    - type: code
                      data: |-
                        import Global from './theme/global';

                        const getAccount = () => import('./theme/account');
                        const getLogin = () => import('./theme/auth');
                        const noop = null;

                        const pageClasses = {
                            account_orderstatus: getAccount,
                            account_order: getAccount,
                            account_addressbook: getAccount,
                            shippingaddressform: getAccount,
                            account_new_return: getAccount,
                            'add-wishlist': () => import('./theme/wishlist'),
                            account_recentitems: getAccount,
                            account_downloaditem: getAccount,
                            editaccount: getAccount,
                            account_inbox: getAccount,
                            account_saved_return: getAccount,
                            account_returns: getAccount,
                            account_paymentmethods: getAccount,
                            account_addpaymentmethod: getAccount,
                            account_editpaymentmethod: getAccount,
                            login: getLogin,
                            createaccount_thanks: getLogin,
                            createaccount: getLogin,
                            getnewpassword: getLogin,
                            forgotpassword: getLogin,
                            blog: noop,
                            blog_post: noop,
                            brand: () => import('./theme/brand'),
                            brands: noop,
                            cart: () => import('./theme/cart'),
                            category: () => import('./theme/category'),
                            compare: () => import('./theme/compare'),
                            page_contact_form: () => import('./theme/contact-us'),
                            error: noop,
                            404: noop,
                            giftcertificates: () => import('./theme/gift-certificate'),
                            giftcertificates_balance: () => import('./theme/gift-certificate'),
                            giftcertificates_redeem: () => import('./theme/gift-certificate'),
                            default: noop,
                            page: noop,
                            product: () => import('./theme/product'),
                            amp_product_options: () => import('./theme/product'),
                            search: () => import('./theme/search'),
                            rss: noop,
                            sitemap: noop,
                            newsletter_subscribe: noop,
                            wishlist: () => import('./theme/wishlist'),
                            wishlists: () => import('./theme/wishlist'),
                        };
                      header:
                        title: app.js
                    - type: text
                      data: >-
                        ### Mapping Example in cart.js


                        Inside the `cart` module
                        ([assets/js/theme/cart.js](https://github.com/bigcommerce/cornerstone/blob/master/assets/js/theme/cart.js)),
                        other modules are imported, and custom JavaScript
                        methods for the cart module are created for the `Cart`
                        class.


                        Here is an excerpt from Cornerstone's
                        `assets/js/theme/cart.js` file:
                    - type: code
                      data: "import PageManager from './page-manager';\nimport _ from 'lodash';\nimport giftCertCheck from './common/gift-certificate-validator';\nimport utils from '@bigcommerce/stencil-utils';\nimport ShippingEstimator from './cart/shipping-estimator';\nimport { defaultModal } from './global/modal';\nimport swal from './global/sweet-alert';\n\nexport default class Cart extends PageManager {\n    onReady() {\n        this.$cartContent = $('[data-cart-content]');\n        this.$cartMessages = $('[data-cart-status]');\n        this.$cartTotals = $('[data-cart-totals]');\n        this.$overlay = $('[data-cart] .loadingOverlay')\n            .hide(); // TODO: temporary until roper pulls in his cart components\n\n        this.bindEvents();\n    }\n  \n\t\tcartUpdate($target) {\n        const itemId = $target.data('cartItemid');\n        const $el = $(`#qty-${itemId}`);\n        const oldQty = parseInt($el.val(), 10);\n        const maxQty = parseInt($el.data('quantityMax'), 10);\n        const minQty = parseInt($el.data('quantityMin'), 10);\n        const minError = $el.data('quantityMinError');\n        const maxError = $el.data('quantityMaxError');\n        const newQty = $target.data('action') === 'inc' ? oldQty + 1 : oldQty - 1;\n        // Does not quality for min/max quantity\n        if (newQty < minQty) {\n            return swal({\n                text: minError,\n                type: 'error',\n            });\n        } else if (maxQty > 0 && newQty > maxQty) {\n            return swal({\n                text: maxError,\n                type: 'error',\n            });\n        }"
                      header:
                        title: cart.js
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Mapping Custom Templates to JavaScript Modules


                        If you add [custom page
                        templates](/stencil-docs/template-files/custom-templates/about-custom-templates)
                        to your theme, you can edit the same `assets/js/app.js`
                        file to map each custom template to an appropriate
                        JavaScript module.
                      header:
                        anchor: adding_mapping-custom
                    - type: code
                      data: >-
                        const customClasses = {};


                        /**
                         * This function gets added to the global window and then called
                         * on page load with the current template loaded and JS Context passed in
                         * @param pageType String
                         * @param contextJSON
                         * @returns {*}
                         */
                        window.stencilBootstrap = function
                        stencilBootstrap(pageType, contextJSON = null,
                        loadGlobal = true) {
                            const context = JSON.parse(contextJSON || '{}');

                            return {
                                load() {
                                    $(() => {
                                        // Load globals
                                        if (loadGlobal) {
                                            Global.load(context);
                                        }

                                        const importPromises = [];

                                        // Find the appropriate page loader based on pageType
                                        const pageClassImporter = pageClasses[pageType];
                                        if (typeof pageClassImporter === 'function') {
                                            importPromises.push(pageClassImporter());
                                        }

                                        // See if there is a page class default for a custom template
                                        const customTemplateImporter = customClasses[context.template];
                                        if (typeof customTemplateImporter === 'function') {
                                            importPromises.push(customTemplateImporter());
                                        }

                                        // Wait for imports to resolve, then call load() on them
                                        Promise.all(importPromises).then(imports => {
                                            imports.forEach(imported => {
                                                imported.default.load(context);
                                            });
                                        });
                                    });
                                },
                            };
                        };
                      header:
                        title: app.js
                        subtitle: map custom templates to js modules
                      config:
                        mode: js
                    - type: text
                      data: >-
                        ### Injecting Custom Templates


                        In the theme's
                        [templates/layout/base.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/layout/base.html)
                        template, we've added the line `{{inject 'template'
                        template}}` just above `{{{snippet 'htmlhead'}}}`
                        statement to inject the custom template:
                    - type: code
                      data: |-
                        <head>
                              <title>{{ head.title }}</title>
                              {{{ head.meta_tags }}}
                              {{{ head.config }}}
                              [...]

                              {{{head.scripts}}}
                              {{{head.rsslinks}}}

                              {{inject 'themeSettings' theme_settings}}
                              {{inject 'genericError' (lang 'common.generic_error')}}
                              {{inject 'maintenanceMode' settings.maintenance}}
                              {{inject 'urls' urls}}
                              {{inject 'template' template}} //injects the custom template
                              {{{snippet 'htmlhead'}}}
                        </head> 
                      header:
                        title: base.html
                        subtitle: custom template injection
                      config:
                        mode: html
                        highlightRange:
                          - from: '14'
                            to: '14'
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Summary


                        To review the basics of using JavaScript in your Stencil
                        theme:


                        * Stencil automatically bundles and minifies JavaScript
                        modules to optimize page performance.


                        * To insert custom JavaScript on a particular page in
                        your theme, edit the JavaScript module that corresponds
                        to the page's type.


                        * To add files from third-party JavaScript modules to a
                        theme, use npm where possible.


                        * To add JavaScript modules not distributed via npm, you
                        can create new subdirectories within
                        [assets/js/](https://github.com/bigcommerce/cornerstone/tree/master/assets/js).


                        * Theme-Specific JavaScript modules are provided in the
                        theme's
                        [assets/js/theme/](https://github.com/bigcommerce/cornerstone/tree/master/assets/js/theme)
                        subdirectory.


                        * To find the mapping between modules in
                        assets/js/theme/ and page types, examine the PageClasses
                        object contained in
                        [assets/js/app.js](https://github.com/bigcommerce/cornerstone/blob/master/assets/js/app.js).


                        * You can map JavaScript modules to custom page
                        templates by editing the
                        [assets/js/app.js](https://github.com/bigcommerce/cornerstone/blob/master/assets/js/app.js)
                        file.
                      header:
                        anchor: adding_summary
              - title: Basic Non NPM Tutorial
                route:
                  path: /basic-non-npm-tutorial
                data:
                  blocks:
                    - type: html
                      data: <h1>Basic Non <code>NPM</code> Tutorial</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#adding_locating-page\">Locating Page-Specific JavaScript</a></li>\n    <li><a href=\"#adding_adding-custom-js\">Adding Custom JS Functions</a></li>\n\t</ul>\n</div>\n\n\n\n"
                    - type: text
                      data: >-
                        ## Locating Page-Specific JavaScript 


                        In this example, let's say that we want to display Hello
                        world alerts when a shopper visits a blog page.


                        In Stencil's base Cornerstone theme, the JavaScript that
                        runs on the blog page can be found in

                        /cornerstone/assets/js/theme/blog.js. If we want to run
                        additional JavaScript on this page, we can add it to the
                        PageManager class in this file, which is empty by
                        default.
                      header:
                        anchor: adding_locating-page
                    - type: callout
                      data:
                        body: >-
                          Prior to March 2017, the Cornerstone's default path
                          name was `/stencil/`.
                        title: >-
                          Default Path Name Updated from "stencil" to
                          "cornerstone"
                    - type: text
                      data: >-
                        ## Adding Custom JS Functions 


                        In the code example below, we have added three custom
                        JavaScript functions (`blogHello`, `blogGreatday` and
                        `blogGoodbye`) to the page by populating `PageManager`.
                        Note how each function is called at a different time
                        during the page's life cycle:



                        ```

                        import PageManager from '../page-manager';


                        export default class Blog extends PageManager {
                            blogHello() {
                                alert('Hello world from blog.js');
                            }
                            blogGreatday() {
                                alert('Have a great day from blog.js');
                            }
                            blogGoodbye() {
                                alert('Goodbye world from blog.js');
                            }
                            before(next) {
                                this.blogHello();
                                next();
                            }
                            loaded(next) {
                                this.blogGreatday();
                                next();
                            }
                            after(next) {
                                this.blogGoodbye();
                                next();
                            }
                        }

                        ```
                      header:
                        anchor: adding_adding-custom-js
              - title: Basic NPM Tutorial
                route:
                  path: /basic-npm-tutorial
                data:
                  blocks:
                    - type: html
                      data: <h1>Basic <code>NPM</code> Tutorial</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#basic_what-were-building\">What We're Building</a></li>\n    <li><a href=\"#basic_set-up\">Set Up Your Store</a></li>\n    <li><a href=\"#basic_install-dependencies\">Install Dependencies</a></li>\n    <li><a href=\"#basic_configure-webpack\">Configure Webpack loaders in webpack.conf.js</a></li>\n    <li><a href=\"#basic_import-dependencies\">Import Dependencies</a></li>\n    <li><a href=\"#basic_configured-loaded-method\">Configure the loaded() Method</a></li>\n\t</ul>\n</div>\n\n\n\n\n\n\n\n"
                    - type: callout
                      data:
                        title: >-
                          Compatible with Cornerstone versions earlier than
                          2.x.x
                        body: >-
                          Because this example involves editing the
                          `webpack.conf.js` file, the way this example is
                          outlined will align with only with Cornerstone
                          versions earlier than 2.x.x. This is due to the
                          transition to Webpack 4 in Cornerstone 2.0.0, which
                          deprecated the `webpack.conf.js` file.
                        type: warning
                    - type: text
                      data: >-
                        ## What We're Building


                        This example will use the
                        [Foundation-datepicker.js](http://foundation-datepicker.peterbeno.com/#basic-example)
                        plugin to implement a datepicker for product pages'
                        Delivery/Event Date fields.
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539276603841
                      header:
                        title: Screenshot of final product
                      config:
                        bordered: true
                        maxWidth: '700'
                        maxHeight: '700'
                        centered: true
                        fluid: true
                    - type: text
                      data: >-
                        ## Set Up Your Store


                        To test this example, you'll want your (sandbox or
                        production) store to include at least a couple of
                        products that have a `Delivery/Event Date` configured.
                        (In production, you'd typically use this feature for
                        things like seasonally themed products, temporary
                        promotions, or event tickets.)


                        For product configuration steps in the BigCommerce
                        control panel, please see this support article.
                    - type: text
                      data: "## Install Dependencies\n\nUse the following command to install this example's required dependencies:\n\n`npm install --save-dev css-loader moment foundation-datepicker style-loader`\n\nThe above command's options are:\n\n* `--save-dev` saves the dependencies as `DevDependencies`; this flags them as required for development, but not at runtime. [This stack overflow thread](https://stackoverflow.com/questions/18875674/whats-the-difference-between-dependencies-devdependencies-and-peerdependencies) provides further context to this concept.\n\n* `css-loader` and `style-loader` are webpack loaders, used together:\n\t* [`css-loader`](https://github.com/webpack-contrib/css-loader) resolves `@import` and `url()` expressions in CSS files.\n\t* [`style-loader`](https://github.com/webpack-contrib/style-loader) generically loads stylesheets by injecting a `<style>` tag.\n\n* [`moment`](https://momentjs.com/) is a JavaScript component parses, validates, and displays dates and times.\n\n* `foundation-datepicker` specifies the datepicker package to install."
                    - type: text
                      data: >-
                        ## Configure Webpack loaders in webpack.conf.js


                        The [css]() and [style]() loaders are used to import CSS
                        and to inject it into the DOM, respectively:


                        ```

                        {
                            test: /\.css$/,
                            loader: 'style-loader!css-loader',
                        }

                        ```
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539280227448
                      header:
                        title: CSS and style loaders in context
                    - type: text
                      data: >-
                        ## Import the Dependencies


                        Import these new dependencies into
                        `<theme-name>/assets/js/theme/product.js`.


                        In `<theme-name>/assets/js/app.js`, notice that there is
                        a mapping between the product page and the `product.js`
                        script:


                        ```

                        const PageClasses = {
                            mapping: {
                                ...
                                'pages/product': product,
                        ```


                        That is, when a user navigates to the product page, the
                        `product.js` script is run. First its constructor will
                        be run, followed by the methods `before`, `loaded`, and
                        `after` – in that order.
                    - type: text
                      data: >-
                        ## Configure the loaded() Method


                        We'll use the `loaded` method to initialize our
                        datepicker widget:


                        ```

                        import $ from 'jquery';

                        import PageManager from '../page-manager';

                        import Review from './product/reviews';

                        import collapsibleFactory from './common/collapsible';

                        import ProductDetails from './common/product-details';

                        import videoGallery from './product/video-gallery';

                        import { classifyForm } from './common/form-utils';

                        import
                        'foundation-datepicker/js/foundation-datepicker.min.js';

                        import
                        'foundation-datepicker/css/foundation-datepicker.min.css';

                        import moment from 'moment';


                        ...


                        loaded(next) {
                            let validator;

                            // Init collapsible
                            collapsibleFactory();

                            this.productDetails = new ProductDetails($('.productView'), this.context);

                            videoGallery();

                            const $reviewForm = classifyForm('.writeReview-form');
                            const review = new Review($reviewForm);

                            $('body').on('click', '[data-reveal-id="modal-review-form"]', () => {
                                validator = review.registerValidation();
                            });

                            $reviewForm.on('submit', () => {
                                if (validator) {
                                    validator.performCheck();
                                    return validator.areAll('valid');
                                }

                                return false;
                            });

                            let $deliveryDateMth = $('#deliveryDateMth');
                            let $deliveryDateDay = $('#deliveryDateDay');
                            let $deliveryDateYr = $('#deliveryDateYr');
                            let earliestDate = moment(this.context.product.event_date.date_start, "MMM Do YYYY");
                            let latestDate = moment(this.context.product.event_date.date_end, "MMM Do YYYY");

                            $('#deliveryDate').fdatepicker({
                                leftArrow:'<<',
                                rightArrow:'>>',
                                onRender: function (date) {
                                    return moment(date).isBetween(earliestDate, latestDate, null, '[]') ? '' : 'disabled';
                                }
                            })
                            .on('changeDate', function(event) {
                                let date = event.date;
                                $deliveryDateMth.val(date.getMonth() + 1);
                                $deliveryDateDay.val(date.getDate());
                                $deliveryDateYr.val(date.getFullYear());
                            })
                            .data('datepicker');

                            next();
                        }

                        ```


                        Highlighted below is the new code added to the `loaded`
                        method:
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539275148248
                      header:
                        title: Code addition to loaded method in product.js
                    - type: text
                      data: >
                        Update the
                        `<theme-name>/templates/components/products/product-view.html`
                        template, replacing the existing `{{#if
                        product.event_date}}` block with the following:


                        ```

                        {{#if product.event_date}}
                            {{inject 'product' product}}
                            <div class="form-field">
                                <label class="form-label form-label--alternate form-label--inlineSmall">
                                {{product.event_date.name}}:
                                <small>{{lang 'common.required'}}</small>
                                </label>
                                <input type="text" class="form-input" id="deliveryDate" name="EventDate[Date]" required>
                                <input type="hidden" id="deliveryDateMth" name="EventDate[Mth]">
                                <input type="hidden" id="deliveryDateDay" name="EventDate[Day]">
                                <input type="hidden" id="deliveryDateYr" name="EventDate[Yr]">
                            </div>
                        {{/if}}

                        ```


                        Note that we're "injecting" the product here, so we have
                        access to its properties. This could be done closer to
                        the root of the tree, but it's been placed here for
                        proximity to the code that requires it.


                        We also needed to add form fields for the
                        `EventDate[Mth]`, `EventDate[Day]`, and `EventDate[Yr]`
                        data, which we update whenever the `changeDate` event
                        occurs. This conforms to the data format that the server
                        expects. These fields are hidden from the user.
              - title: Advanced NPM Tutorial
                route:
                  path: /advanced-npm-tutorial
                data:
                  blocks:
                    - type: html
                      data: <h1>Advanced <code>NPM</code> Tutorial</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#advanced_video-of-what\">Video of What We're Building</a></li>\n    <li><a href=\"#advanced_install-dependencies\">Install Dependencies</a></li>\n    <li><a href=\"#advanced_import-dependencies\">Import Dependencies</a></li>\n    <li><a href=\"#advanced_update-webpackconfjs\">Update webpack.conf.js</a></li>\n    <li><a href=\"#advanced_update-appjs\">Update app.js</a></li>\n    <li><a href=\"#advanced_add-the-xcoupondrawer\">Add the <<code>x-coupon-drawer</code>> Element to the Page</a></li>\n    <li><a href=\"#advanced_call-initreact\">Call initReact from base.html</a></li>\n    <li><a href=\"#advanced_create-an-assetsjscomp\">Create an assets/js/components Folder</a></li>\n    <li><a href=\"#advanced_create-a-coupondrawerjs-file\">Create a CouponDrawer.js File</a></li>\n    <li><a href=\"#advanced_create-a-verticallinear\">Create a VerticalLinearStepper.js File</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Video of What We're Building


                        <iframe width="560" height="315"
                        src="https://www.youtube.com/embed/sudvuxJFxKc"
                        frameborder="0" allow="autoplay; encrypted-media"
                        allowfullscreen></iframe>
                      header:
                        anchor: advanced_video-of-what
                    - type: text
                      data: >-
                        ## Install Dependencies


                        Material-UI requires the `react-tap-event-plugin`
                        module. Also, `document-register-element` is needed to
                        polyfill `document.registerElement`. The babel presets
                        and plugins are needed to support `Object.assign`,
                        `react`, and `Material-UI`, respectively:


                        ```

                        npm install -save-dev document-register-element
                        material-ui react react-dom react-tap-event-plugin  

                        npm install -save-dev
                        babel-plugin-transform-object-assign babel-preset-react
                        babel-preset-stage-1

                        ```
                      header:
                        anchor: advanced_install-dependencies
                    - type: text
                      data: >-
                        ## Import Dependencies


                        Next, import the new dependencies into
                        `<theme-name>/assets/js/app.js`


                        Note the `CouponDrawer` import at the bottom. This file
                        doesn't yet exist, but we'll shortly create a React
                        component with this name:
                      header:
                        anchor: advanced_import-dependencies
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1540279579178
                      header:
                        title: app.js imports
                    - type: text
                      data: >-
                        ## Update webpack.conf.js


                        Update webpack.conf.js with the new presets and
                        plug-ins, as shown here:
                      header:
                        anchor: advanced_update-webpackconfjs
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1540279603654
                      header:
                        title: 'webpack.config.js: presets and plugins'
                    - type: text
                      data: >-
                        ## Update app.js


                        Add the following code to the bottom of
                        `<theme-name>/assets/js/app.js`:


                        ```

                        window.initReact = function(contextJSON = '{}') {
                            injectTapEventPlugin();
                            const context = JSON.parse(contextJSON);
                            const proto = Object.create(HTMLElement.prototype, {
                                attachedCallback: {
                                    value: function() {
                                        const mountPoint = document.createElement('span');
                                        const attrs = [].reduce.call(this.attributes, (memo, attr) => {
                                            memo[attr.name] = attr.value;
                                            return memo;
                                        }, {});
                                        const data = Object.assign({}, context, attrs);

                                        this.appendChild(mountPoint);
                                        ReactDOM.render(
                                            <MuiThemeProvider>
                                                <CouponDrawer data={data} />
                                            </MuiThemeProvider>,
                                            mountPoint
                                        );
                                    }
                                }
                            });
                            document.registerElement('x-coupon-drawer', {prototype: proto});
                        }

                        ```


                        This sets up a handler for attaching an
                        `<x-coupon-drawer>` element to the page. We're using
                        React here to render the `CouponDrawer` component. This
                        block of code was taken and modified from
                        https://facebook.github.io/react/docs/web-components.html#using-react-in-your-web-components.
                      header:
                        anchor: advanced_update-appjs
                    - type: text
                      data: >-
                        ## Add the `<x-coupon-drawer>` Element to the Page 


                        Add this in `<theme-name>/templates/layout/base.html`.
                        (See the image below.) We're using this layout template
                        for this example, although you would follow the same
                        steps in any other template.
                      header:
                        anchor: advanced_add-the-xcoupondrawer
                    - type: text
                      data: >-
                        ## Call initReact from base.html 


                        Add a call to `window.initReact`. We're continuing to
                        work with the `base.html` page for this example. Notice
                        that we're also passing in the jsContext here. The
                        `initReact` method will merge this context with an
                        object created from the attributes placed upon the
                        `<x-coupon-drawer>`, and will pass the combined data
                        along to the React component.
                      header:
                        anchor: advanced_call-initreact
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1540279254389
                      header:
                        title: base.html setup
                      config:
                        centered: true
                        fluid: true
                        bordered: true
                    - type: text
                      data: |-
                        ## Create an assets/js/components Folder 

                        We'll store our React components here.
                      header:
                        anchor: advanced_create-an-assetsjscomp
                    - type: text
                      data: >-
                        ## Create a CouponDrawer.js File


                        Create a
                        `<theme-name>/assets/js/components/CouponDrawer.js`
                        file. Populate this file with the following code block
                        (which is adapted from
                        http://www.material-ui.com/#/components/drawer):


                        ```

                        import React from 'react';

                        import Drawer from 'material-ui/Drawer';

                        import AppBar from 'material-ui/AppBar';

                        import RaisedButton from 'material-ui/RaisedButton';

                        import VerticalLinearStepper from
                        './VerticalLinearStepper';


                        export default class CouponDrawer extends
                        React.Component {

                          constructor(props) {
                            super(props);
                            this.state = {open: false};
                          }

                          handleToggle = () => this.setState({open: !this.state.open});

                          render() {
                            return (
                              <div>
                                <RaisedButton
                                  label="Click here to get a coupon!"
                                  onTouchTap={this.handleToggle}
                                />
                                <Drawer width={200} openSecondary={true} open={this.state.open} >
                                  <AppBar title="Coupon magic" titleStyle={{fontSize: 14}} />
                                  <VerticalLinearStepper />
                                </Drawer>
                              </div>
                            );
                          }
                        }

                        ```
                      header:
                        anchor: advanced_create-a-coupondrawerjs-file
                    - type: text
                      data: >-
                        ## Create a VerticalLinearStepper.js File


                        Create a
                        `<theme-name>/assets/js/components/VerticalLinearStepper.js`
                        file. Populate this file with the following code block:


                        ```

                        import React from 'react';

                        import {
                          Step,
                          Stepper,
                          StepButton,
                          StepContent,
                        } from 'material-ui/Stepper';

                        import RaisedButton from 'material-ui/RaisedButton';

                        import FlatButton from 'material-ui/FlatButton';

                        import TextField from 'material-ui/TextField';


                        /**
                         * A basic vertical non-linear implementation
                         */
                        class VerticalLinearStepper extends React.Component {

                          constructor(props) {
                              super(props);
                          }

                          state = {
                            stepIndex: 0,
                          };

                          handleNext = () => {
                            const {stepIndex} = this.state;
                            if (stepIndex < 2) {
                              this.setState({stepIndex: stepIndex + 1});
                            }
                          };

                          handlePrev = () => {
                            const {stepIndex} = this.state;
                            if (stepIndex > 0) {
                              this.setState({stepIndex: stepIndex - 1});
                            }
                          };

                          renderStepActions(step) {
                            return (
                              <div style={{margin: '12px 0'}}>
                                <RaisedButton
                                  label="Next"
                                  disableTouchRipple={true}
                                  disableFocusRipple={true}
                                  primary={true}
                                  onTouchTap={this.handleNext}
                                  style={{marginRight: 12}}
                                />
                                {step > 0 && (
                                  <FlatButton
                                    label="Back"
                                    disableTouchRipple={true}
                                    disableFocusRipple={true}
                                    onTouchTap={this.handlePrev}
                                  />
                                )}
                              </div>
                            );
                          }

                          render() {
                            const {stepIndex} = this.state;

                            return (
                              <div style={{maxWidth: 380, maxHeight: 400, margin: 'auto'}}>
                                <Stepper
                                  activeStep={stepIndex}
                                  linear={false}
                                  orientation="vertical"
                                >
                                  <Step>
                                    <StepButton onTouchTap={() => this.setState({stepIndex: 0})}>
                                      Do this
                                    </StepButton>
                                    <StepContent>
                                      <p>
                                        Navigate to <a href="http://example.com">here</a> and get your code.
                                      </p>
                                      {this.renderStepActions(0)}
                                    </StepContent>
                                  </Step>
                                  <Step>
                                    <StepButton onTouchTap={() => this.setState({stepIndex: 1})}>
                                      Then this
                                    </StepButton>
                                    <StepContent>
                                      <TextField hintText="Enter your code here" style={{height: 100, width: 100}}/>
                                      {this.renderStepActions(1)}
                                    </StepContent>
                                  </Step>
                                  <Step>
                                    <StepButton onTouchTap={() => this.setState({stepIndex: 2})}>
                                      Collect your coupon!
                                    </StepButton>
                                    <StepContent>
                                      <p>
                                        <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/9b/Wikipedia_mobile_en.svg/296px-Wikipedia_mobile_en.svg.png"/>
                                      </p>
                                      {this.renderStepActions(2)}
                                    </StepContent>
                                  </Step>
                                </Stepper>
                              </div>
                            );
                          }
                        }


                        export default VerticalLinearStepper;

                        ```


                        The above code block was adapted from
                        http://www.material-ui.com/#/components/stepper.
                      header:
                        anchor: advanced_create-a-verticallinear
                    - type: callout
                      data:
                        body: >-
                          We must register a custom element to set up the "root"
                          of every React component we create. However, within a
                          React component, we can import other React components
                          without having to register them. For example, here we
                          register x-coupon-drawer as a custom element that
                          renders the React CouponDrawer component. However,
                          within CouponDrawer, we can simply import the
                          VerticalLinearStepper component needing to set it up
                          in the same way.
                        title: ' Note on the VerticalLinearStepper.js Example'
              - title: Page Types and Life Cycle
                route:
                  path: /new-subpage
                data:
                  blocks:
                    - type: html
                      data: <h1>Page Types and Life Cycle</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#page-types_stencil-utils\">stencil-utils Library</a></li>\n    <li><a href=\"#page-types_javascript-api\">JavaScript API</a></li>\n    <li><a href=\"#page-types_callback\">Callback Methods</a></li>\n    <li><a href=\"#page-types_javascript\">JavaScript Template Context Injection</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >+
                        ## stencil-utils Library


                        [stencil-utils](/stencil-docs/adding-event-hooks-to-your-theme/stencil-utils-api-reference)
                        is our supporting library for events and remote
                        interactions.

                      header:
                        anchor: page-types_stencil-utils
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Javascript API


                        Stencil themes include an API for running JavaScript on
                        a per-page basis. To properly write JavaScript for your
                        theme, you will have the following page types available
                        to you:


                        * "pages/account/addresses"

                        * "pages/account/add-address"

                        * "pages/account/add-return"

                        * "pages/account/add-wishlist"

                        * "pages/account/recent-items"

                        * "pages/account/download-item"

                        * "pages/account/edit"

                        * "pages/account/return-saved"

                        * "pages/account/returns"

                        * "pages/auth/login"

                        * "pages/auth/account-created"

                        * "pages/auth/create-account"

                        * "pages/auth/new-password"

                        * "pages/blog"

                        * "pages/blog-post"

                        * "pages/brand"

                        * "pages/brands"

                        * "pages/cart"

                        * "pages/category"

                        * "pages/compare"

                        * "pages/errors"

                        * "pages/gift-certificate/purchase"

                        * "pages/gift-certificate/balance"

                        * "pages/gift-certificate/redeem"

                        * "global"

                        * "pages/home"

                        * "pages/order-complete"

                        * "pages/page"

                        * "pages/product"

                        * "pages/search"

                        * "pages/sitemap"

                        * "pages/subscribed"

                        * "page/account/wishlist-details"

                        * "pages/account/wishlists"


                        These page types correspond to the pages within your
                        theme. Each of these page types maps to an ES6 module
                        that extends the base `PageManager` abstract class:
                      header:
                        anchor: page-types_javascript-api
                    - type: code
                      data: |-
                        export default class Blog extends PageManager {
                                constructor() {
                                    //Setup code goes here – attach to internals, and use internals as you would 'this'
                                }
                            }
                      header:
                        title: pages/blog extending the page PageManager class
                      config:
                        mode: js
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## JavaScript Template Context Injection


                        Occasionally, you might need to use dynamic data from
                        the template context within your theme's client-side
                        application code. Two helpers are provided to help
                        achieve this.


                        The `inject` helper allows you to compose a json object
                        with a subset of the template context to be sent to the
                        browser:


                        `{{inject "stringBasedKey" contextValue}}`


                        To retrieve the parsable JSON object, just call
                        `{{jsContext}}` after all of the `{{inject}}` calls.


                        For example, to set up the product name in your
                        client-side app, you can do this if you're in the
                        context of a product:
                      header:
                        anchor: page-types_javascript
                    - type: code
                      data: >-
                        {{inject "myProductName" product.title}}


                        <script>

                        // Note the lack of quotes around the jsContext
                        handlebars helper, it becomes a string automatically.

                        var jsContext = JSON.parse({{jsContext}}); //jsContext
                        would output "{\"myProductName\": \"Sample Product\"}"
                        which can feed directly into your JavaScript


                        console.log(jsContext.myProductName); // Will output:
                        Sample Product

                        </script>
                      config:
                        mode: js
                    - type: text
                      data: >-
                        You can compose your JSON object across multiple pages,
                        to create a different set of client-side data depending
                        on the currently loaded template context.


                        Stencil's Cornerstone base theme makes the `jsContext`
                        available as `this.context`, both on the active page
                        scoped and on global `PageManager` objects.
        - title: Conditional-Logic Examples
          route:
            path: /conditional-logic-examples
          data:
            children:
              - title: 'Catalog Price Object: How Properties Interact'
                route:
                  path: /catalog-price-object
                data:
                  blocks:
                    - type: html
                      data: '<h1>Catalog Price Object: How Properties Interact</h1>'
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#catalog-price_price-prop-overview\">Price Properties Overview</a></li>\n    <li><a href=\"#catalog-price_cost-price\">Cost Price</a></li>\n    <li><a href=\"#catalog-price_basic-price-example\">Basic Price Example – No \"Sale Price\" Defined</a></li>\n    <li><a href=\"#catalog-price_sale-price-defined\">\"Sale Price\" Defined Example</a></li>\n    <li><a href=\"#catalog-price_prices-and-conditional\">Prices and Conditional Logic – Special for You!</a></li>\n    <li><a href=\"#catalog-price_including-and-or-excluding\">Including and/or Excluding Tax</a></li>\n    <li><a href=\"#catalog-price_tax-sale-price\">Tax/Sale Price Interactions</a></li>\n    <li><a href=\"#catalog-price_mapping-of-control\">Mapping of Control-Panel Options to Catalog Price Properties</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Price Properties Overview


                        For each product in a catalog, merchants can use
                        BigCommerce's control panel options to set multiple
                        prices for a product. 


                        As a theme developer seeking ways to more effectively
                        merchandise products, you can highlight the savings that
                        a merchant is providing over the list price, commonly
                        known as the manufacturer's suggested retail price
                        (MSRP). In order to do this, you will need to reference
                        the correct property that the Stencil *catalog price*
                        object returns for each product. 


                        This page explains how the price properties interact
                        with each other and with control panel options. There
                        will also be an example showcasing how to build
                        conditional logic around a price property.
                      header:
                        anchor: catalog-price_price-prop-overview
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Cost Price


                        The Cost Price property is never returned to the
                        storefront. This is by design. Generally, merchants
                        would not want to reveal the true cost of goods to
                        shoppers. Rather, the cost price field is meant to be
                        consumed by reports and third-party accounting
                        integrations.
                      header:
                        anchor: catalog-price_cost-price
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Basic Price Example – No `Sale Price` Defined


                        Assume that the merchant has defined a product’s price
                        like this in the BigCommerce Control Panel:
                      header:
                        anchor: catalog-price_basic-price-example
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539813608717
                      header:
                        title: Item without sale price defined
                      config:
                        centered: true
                        fluid: true
                        bordered: true
                        maxWidth: '650'
                        maxHeight: '350'
                    - type: text
                      data: >-
                        In the photo above:


                        * The `Price` field contains this product’s standard
                        store price.

                        * The `Excluding Tax` indicator to the right of the
                        `Price` field is applicable to the whole column of price
                        fields.

                        * The `Cost Price` field will not be returned, for
                        reasons described above.

                        * The `Retail Price` field contains the list price (also
                        known as MSRP).

                        * No `Sale Price has` been set here.



                        A corresponding Stencil *price* object for the product
                        will be structured as follows:
                    - type: code
                      data: |-
                        "product": {
                          "price": {
                            "without_tax": {"formatted": "$150.00","value": 150},
                            "rrp_without_tax": {"formatted": "$250.00","value": 250},
                            "saved": {"formatted": "$100.00","value": 100},
                            "tax_label": "Tax"
                          }
                        }
                      config:
                        mode: json
                      header:
                        title: Catalog Price Object (no sale price defined)
                    - type: text
                      data: >+
                        Items to note about the Stencil *price* object above: 


                        * The `without_tax` property represents the standard
                        store price (the control panel’s `Price` field).

                        * The `rrp_without_tax` property represents the list
                        price or MSRP. (Here, `rrp` is short for "regular retail
                        price.")

                        * The `saved` property is the computed difference
                        between the `without_tax` versus `rrp_without_tax`
                        values.

                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## `Sale Price` Defined Example


                        This example below is identical, except that here the
                        merchant has assigned the product a discounted `Sale
                        Price` of `$123`:
                      header:
                        anchor: catalog-price_sale-price-defined
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539837943099
                      header:
                        title: Catalog Price (sale price defined)
                      config:
                        maxWidth: '600'
                        maxHeight: '300'
                        centered: true
                        fluid: true
                        bordered: true
                    - type: text
                      data: >-
                        A corresponding Stencil price object for the product
                        will be structured as shown below. 
                    - type: code
                      data: |-
                        "product": {
                          "price": {
                            "without_tax": {"formatted": "$123.00","value": 123},
                            "rrp_without_tax": {"formatted": "$250.00","value": 250},
                            "saved": {"formatted": "$127.00","value": 127},
                            "sale_price_without_tax": {"formatted": "$123.00", "value":123},
                            "non_sale_price_without_tax": {"formatted": "$150.00","value": 150},
                            "tax_label": "Tax"
                          }
                        }
                      config:
                        mode: json
                      header:
                        title: Catalog Price Object (sale price defined)
                    - type: text
                      data: >+
                        Items to note regarding the Stencil *price* object
                        above: 


                        * The product’s effective price is the `Sale Price`
                        which appears in the object’s `without_tax` property.

                        * The regular store price is now displayed in an added
                        property called `non_sale_price_without_tax`.

                        * The `sale_price_with_tax` and `sale_price_without_tax`
                        properties  will directly expose a `sale_price` set on a
                        base product, variant, or price record, depending on
                        what applies.

                    - type: text
                      data: '---'
                    - type: text
                      data: >+
                        ## Prices and Conditional Logic – Special for You! 


                        Stencil structures product prices as described above for
                        backward compatibility with the BigCommerce platform's
                        traditional treatment of prices. As a theme developer,
                        this behavior enables you to embed logic that determines
                        whether to display a strikeout (struck-out) price on the
                        storefront.


                        The example below tests for the presence of the
                        `non_sale_price_without_tax` property. If it is present,
                        that means that the product has a sale price, so the
                        page will display the regular store price struck-out:

                      header:
                        anchor: catalog-price_prices-and-conditional
                    - type: code
                      data: |2-
                          {{#if price.non_sale_price_without_tax}}
                             ... [some code to display on-sale strikeout pricing] ...
                          {{/if}}
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Including and/or Excluding Tax 


                        Depending on how the store has been set up in the
                        control panel’s `Store Setup > Tax > Configure Tax
                        Display Settings`, the price object’s properties will
                        represent prices including tax, excluding tax, or in
                        both ways.


                        This setting affects not only how values are returned in
                        the Stencil framework, but also how the values appear on
                        storefront pages:
                      header:
                        anchor: catalog-price_including-and-or-excluding
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539842045139
                      header:
                        title: Configure Tax Display Settings
                      config:
                        centered: true
                        fluid: true
                        bordered: true
                        maxWidth: '600'
                        maxHeight: '400'
                    - type: text
                      data: >-
                        Below is an example of a Stencil `price` object that
                        returns properties’ values both including, and
                        excluding, tax. Here, we have configured a flat 10% tax
                        rate:


                        ```

                        "product": {
                          "price": {
                            "with_tax": {"formatted": "$165.00","value": 165},
                            "without_tax": {"formatted": "$150.00","value": 150},
                            "rrp_with_tax": {"formatted": "$275.00","value": 275},
                            "rrp_without_tax": {"formatted": "$250.00","value": 250},
                            "saved": {"formatted": "$110.00","value": 110},
                            "tax_label": "Tax"
                          }
                        }

                        ```


                        Items to note:


                        * The `with_tax` property is new in this example, and
                        represents the `without_tax` value plus a 10% tax
                        markup.

                        * The `rrp_with_tax` property is new as well, and
                        represents the `rrp_without_tax` value plus a 10% tax
                        markup.

                        *You would see the same new properties and values if the
                        control-panel setting had been `Including tax`, rather
                        than `Including and excluding tax`. But these
                        properties/vaues would not be added for a control-panel
                        seting of Excluding tax.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Tax/Sale Price Interactions 


                        Here is the same example – values both including and
                        excluding tax, and a flat 10% tax rate – but we have
                        also defined a sale price for the product:


                        ```

                        "product": {
                          "price": {
                            "with_tax": {"formatted": "$135.30","value": 135.3},
                            "without_tax": {"formatted": "$123.00","value": 123},
                            "rrp_with_tax": {"formatted": "$275.00","value": 275},
                            "rrp_without_tax": {"formatted": "$250.00","value": 250},
                            "saved": {"formatted": "$139.70","value": 139.7},
                            "non_sale_price_without_tax": {"formatted": "$150.00","value": 150},
                            "non_sale_price_with_tax": {"formatted": "$165.00","value": 165},
                            "tax_label": "Tax"
                          }
                        }

                        ```


                        Here again:


                        * The `with_tax` property represents the without_tax
                        value, plus a 10% tax markup.

                        * The `rrp_with_tax` property represents the
                        `rrp_without_tax` value, plus a 10% tax markup.


                        New here:


                        * The `non_sale_price_without_tax` and
                        `non_sale_price_with_tax` properties are added, to
                        represent the standard store price (respectively)
                        without and with tax.

                        * The saved value is now based on the difference between
                        the `with_tax` versus `non_sale_price_with_tax` values.

                        * You would see the same results if the control-panel
                        setting had been Including tax, rather than Including
                        and excluding tax. But these properties/values would not
                        be added for a control-panel seting of Excluding tax.
                      header:
                        anchor: catalog-price_tax-sale-price
                    - type: text
                      data: '---'
                    - type: text
                      data: "## Mapping of Control-Panel Options to Catalog Price Properties\n\nThis table shows how price options available in the BigCommerce control panel relate to properties returned on the Stencil framework.\n\n<table>\n  <tr>\n    <th>Control-Panel Field</th>\n    <th>Stencil Catalog Price Object and Property</th>\n    <th>Notes</th>\n  </tr>\n\n  <tr>\n    <td>Retail Price (excluding tax)</td>\n\t\t<td><code>{{ product.price.rrp_without_tax }}</code></td>\n    <td>Typically used to represent the product’s list price (MSRP).</td>\n  </tr>\n\n  <tr>\n    <td>Retail Price (including tax)</td>\n\t\t<td><code>{{ product.price.rrp_with_tax }}</code></td>\n    <td>Typically used to represent the product’s list price (MSRP), including tax.</td>\n  </tr>\n\n  <tr>\n    <td>Price (excluding tax)</td>\n\t\t<td><code>{{ product.price.non_sale_price_without_tax }}</code></td>\n    <td>The standard store price for the product.</td>\n  </tr>\n\n  <tr>\n    <td>Price (including tax)</td>\n\t\t<td><code>{{ product.price.non_sale_price_with_tax }}</code></td>\n    <td>The standard store price for the product, with tax.</td>\n  </tr>\n  \n  <tr>\n    <td>Sale Price (excluding tax)</td>\n\t\t<td><code>{{ product.price.without_tax }}</code></td>\n    <td>This product’s discounted/sale price.</td>\n  </tr>\n  \n  <tr>\n    <td>Sale Price (including tax)</td>\n    <td>{{ product.price.with_tax }}</td>\n    <td>This product’s discounted/sale price, with tax.</td>\n  </tr>\n  \n  <tr>\n    <td>[No control-panel field]</td>\n    <td>{{ product.price.saved }}</td>\n    <td>The customer’s savings on the effective price versus list price.</td>\n  </tr>\n</table>"
                      header:
                        anchor: catalog-price_mapping-of-control
              - title: 'Cart Price Properties: Relationships'
                route:
                  path: /cart-price-relationships
                data:
                  blocks:
                    - type: html
                      data: '<h1>Cart Price Properties: Relationships</h1>'
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#cart-price_cart-price-props\">Cart Price Properties: Relationships</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >+
                        ## Cart Price Properties: Relationships


                        This page shows the relationship of price properties
                        available on the `{{cart.items}}` object. These
                        properties' values cascade as follows.


                        For a single cart item, the `rrp` property contains the
                        list price, also known as MSRP:


                        ```

                        "rrp": { 
                          "formatted": "$130.00",
                          "value": 130
                        }

                        ```


                        Let's assume that the standard store price for this item
                        is actually $100.00, and that these bulk discount rules
                        are applied:


                        ```

                        "bulk_pricing": { 
                          "base_price": {
                            "formatted": "$100.00",
                            "value": 100
                          },
                          "discount_percentage": 5,  
                          "discount_amount": null
                        }

                        ```


                        Within `{{cart.items}}`, the `price` property contains
                        the item's price after bulk discounts, but before cart
                        discounts and promotions:


                        ```

                        "price": { 
                          "formatted": "$95.00",
                          "value": 95
                        }

                        ```


                        The `price_discounted` property contains the item's
                        price after cart discounts and promotions:


                        ```

                        "price_discounted": {  
                          "formatted": "$85.50",
                          "value": 85.5
                        }

                        ```

                      header:
                        anchor: cart-price_cart-price-props
              - title: Calling Theme-Wide Variables via Handlebars
                route:
                  path: /calling-theme-wide-variables
                data:
                  blocks:
                    - type: html
                      data: <h1>Calling Theme-Wide Variables via Handlebars</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#calling-theme-wide_calling-theme-wide\">Calling Theme-Wide Variables via Handlebars</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Calling Theme-Wide Variables via Handlebars


                        As shown in an earlier Quick Start example, you can
                        reference variables from `config.json` in a theme
                        template's front matter. But you can also call any
                        `config.json` variable within a template's
                        HTML/Handlebars body, by using a Handlebars expression
                        that precedes the variable with `theme_settings`.


                        Below, from Cornerstone's `templates/pages/home.html`,
                        is a code snippet that provides three examples:


                        ```

                        <div class="main full">
                            {{#if products.featured}}
                                {{> components/products/featured products=products.featured
                                    columns=theme_settings.homepage_featured_products_column_count}}
                            {{/if}}

                            {{#if products.top_sellers}}
                                {{> components/products/top products=products.top_sellers
                                    columns=theme_settings.homepage_top_products_column_count}}
                            {{/if}}

                            {{#if products.new}}
                                {{> components/products/new products=products.new 
                                    columns=theme_settings.homepage_new_products_column_count}}
                            {{/if}}
                        </div> 

                        ```


                        Above, each `if` conditional statement tests whether one
                        of the three products attributes (Featured Products, Top
                        Sellers/Popular Brands, or New Products) is declared
                        within this template's front matter. If so, for the
                        corresponding section on this page, it sets the local
                        column count to match the theme-wide
                        `theme_settings...._column_count value` defined in
                        `config.json`.
                      header:
                        anchor: calling-theme-wide_calling-theme-wide
              - title: Dynamic Content Rendering on Stencil Storefronts
                route:
                  path: /dynamic-content-rendering
                data:
                  blocks:
                    - type: html
                      data: >-
                        <h1>Dynamic Content Rendering on Stencil
                        Storefronts</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#dynamic-content_why-dynamic-content\">Why Dynamic Content?: Dropzones, Dynamic Tabs, and Snippets</a></li>\n    <li><a href=\"#dynamic-content_dropzones\">Dropzones</a></li>\n    <li><a href=\"#dynamic-content_dynamic-tabs\">Dynamic Tabs</a></li>\n    <li><a href=\"#dynamic-content_snippets\">Snippets</a></li>\n    <li><a href=\"#dynamic-content_recap\">Recap</a></li>\n  </ul>\n</div>"
                    - type: text
                      data: >-
                        _We're gratefully sharing techniques devised by Ken
                        Utting, Web Developer for BigCommerce client
                        goruck.com_.


                        ## Why Dynamic Content?: Dropzones, Dynamic Tabs, and
                        Snippets


                        At GORUCK, we've customized our Stencil theme (currently
                        using the
                        [Merchant](https://www.bigcommerce.com/theme/merchant-light/?_ga=2.52710120.1984523106.1539568940-967431010.1523308107)
                        theme) to provide several ways to update our site
                        content without requiring changes to the theme itself.
                        This allows our content folks to make changes to our
                        theme without having to wait on our software developers.


                        Also, by pushing content out of the theme, these
                        techniques reduce the differences between our customized
                        theme and the out-of-the-box (base) theme – which makes
                        it easier to integrate ongoing updates into our theme.
                        Finally, these techniques allow us share identical
                        content across pages without copying and pasting.


                        Three techniques in particular have proven useful to us.
                        We call them Dropzones, Dynamic Tabs, and Snippets.
                        There is nothing particularly special to GORUCK about
                        these techniques, so there is no reason you can't adopt
                        them for your own store/theme.


                        ### Building on the Control Panel


                        The BigCommerce control panel provides an HTML editor
                        where you can enter custom content for Products,
                        Categories, and custom static pages (Storefront > Web
                        Pages). However, we encountered the following
                        limitations:


                        The HTML editor will remove a number of tags,
                        particularly style and script tags.


                        Without changes like the ones we made at GORUCK
                        (described below), all the content will be placed in a
                        single location on the page.


                        At GORUCK, we needed the ability to inject arbitrary
                        HTML into our page, and to place that content at various
                        specific page locations. To achieve this, we developed
                        the three techniques described below.
                      header:
                        anchor: dynamic-content_why-dynamic-content
                    - type: text
                      data: >-
                        ## Dropzones


                        Let's say that at the top of your category pages, you
                        want to display a full-width, category-specific, image.
                        And at the bottom of these pages, you want to display a
                        category-specific message or image gallery.


                        One possibility is to define a custom page for every
                        category. But aside from the work involved to set this
                        up, every time you added or removed a category, you
                        would need to add or remove a custom page from your
                        theme. And of course, it's possible that you would also
                        want control like this on product pages, and on other
                        pages on your storefront.


                        A more general solution we implemented was to create a
                        small set of custom pages: one for categories, one for
                        products, and so on. Each of the custom pages contains a
                        few `div` elements that define dropzones for that page.


                        With these dropzones defined, we can then populate them
                        with dynamic content specific to any instance of the
                        page. Here is an example of a dropzone that places an
                        image gallery at the bottom of a category page:
                      header:
                        anchor: dynamic-content_dropzones
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539874696853
                      header:
                        title: >-
                          Dropzone that places an image gallery at the bottom of
                          a category page
                    - type: text
                      data: >-
                        ### Dropzones HTML


                        The HTML for a dropzone is simply something like:


                        `<div id="gr-dropzone-top"></div>`


                        where the div's `id` defines the dropzone's name.


                        Then, using the BigCommerce **control panel's custom
                        HTML editor** (in this example, the Categories editor),
                        we place our content inside div tags that specify the
                        dropzone where the content should be inserted. Here is a
                        simple example:


                        ```

                        <div class="gr-dropzone" data-gr-zone="gr-dropzone-top">
                            <p>This content will be placed in a dropzone at the top of the page, because that dropzone has the id matching our data-gr-zone attribute.</p>
                        </div>

                        ```


                        ### Dropzones HTML Example


                        Here is an example of some HTML that we actually use:


                        ```

                        <div class="gr-dropzone"
                        data-gr-zone="gr-dropzone-bottom">
                            <h3>GORUCK GEAR IN THE FIELD</h3>
                            <div id="bv-grid-gallery" data-gr-groups="goruck-rm-group" data-gr-tags="gear"></div>
                        </div>

                        ```


                        ### Dropzones JavaScript


                        The content is moved from the default location to the
                        dropzone by JavaScript we added to the PageManager
                        class. In BigCommerce's Cornerstone base theme, Pixel
                        Union's Merchant theme, and other Stencil themes,
                        PageManager is the parent class of all page classes. So,
                        its methods get invoked on every page. This makes it a
                        great place to put code like this, which needs to run
                        every time a page is loaded.


                        We modified our theme's PageManager.before method to
                        invoke a new method named `gr_moveHtmlToDropzones`:


                        ```
                         gr_moveHtmlToDropzones () {
                                $(".gr-dropzone").each(function () {
                                    const $this = $(this);
                                    const zoneId = $this.data("gr-zone");
                                    if (zoneId) {
                                        $("#" + zoneId).html($this.html());   // copy the html to where it should be
                                        $this.remove();             // remove the html from its temporary location
                                    } else {
                                        console.warn("PageManager.gr_moveHtmlToDropzones: dropzone has no target.");
                                    }
                                });
                            }
                        ```


                        Finally, in our .scss file, we set the `.gr-dropzone`
                        class to display: none. This prevents the content from
                        appearing on the page in the wrong location before
                        PageManager has a chance to move it into the dropzone.
                      header:
                        anchor: dynamic-content_dropzones
                    - type: text
                      data: >-
                        ## Dynamic Tabs


                        Our Stencil base theme presents information on our
                        product pages in several tabs. We wanted to introduce
                        several new tabs, and to vary the tabs by product
                        category and brand. Additionally, we wanted the ability
                        to store a tab's content in an external file, on our
                        WebDAV or CDN (content delivery network).


                        By storing content in an external file, we can share
                        identical content across pages, without copying and
                        pasting. Also, changes to the content can be made just
                        once, and be reflected on all our pages.


                        So we implemented a feature we call Dynamic Tabs.
                        Dynamic Tabs are similar to dropzones, in that they
                        allow you to use the control panel's HTML editor to
                        provide content, while moving it to a specific location
                        on the page. In this case, our content will appear in a
                        tab.


                        In the example below, we use this technique to place the
                        `RIGHT BY YOU` tab in the fourth position:
                      header:
                        anchor: dynamic-content_dynamic-tabs
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539874970240
                    - type: text
                      data: >+
                        ### Dynamic Tabs HTML


                        There are two versions of the HTML. The first is
                        designed for a tab you want to drop in using a page's
                        own HTML:


                        ```

                        <div class="gr-tab" data-gr-position="POSITION"
                        data-gr-title="TITLE"> 
                             CONTENT 
                        </div>

                        ```


                        The second version is designed for a tab that gets its
                        content from an external file:


                        ```

                        <div class="gr-tab" data-gr-content="CONTENT URL">

                        </div>

                        ```


                        In this second case, the HTML in that external file must
                        start with the POSITION and TITLE information:


                        ```

                        <input id="gr-tab-data" type="hidden"
                        data-gr-position="POSITION" data-gr-title="TITLE" /> 
                         CONTENT
                        ```


                        ### Dynamic Tabs Parameters


                        POSITION is a number, which determines where the dynamic
                        tab will be put. For example, a POSITION of 3 means that
                        the tab will be placed after the third tab.


                        We use a POSITION of 0 to place a tab ahead of the first
                        tab. If the POSITION attribute is omitted, the tab will
                        be placed after all the other tabs. (Note that if you
                        add multiple dynamic tabs, any POSITION that you specify
                        must account for the previously inserted dynamic tabs.)


                        TITLE is the text you want to display as the tab's
                        title. For example: Our Guarantee.


                        CONTENT is any arbitrary HTML, and is displayed when the
                        user clicks on the tab's title.


                        ### Dynamic Tabs HTML Example


                        To create the RIGHT BY YOU tab in the screenshot above,
                        we added this code to our base theme's
                        templates/pages/product.html template:


                        ```

                        <!-- GORUCK Customization: pull in a dynamic tab -->
                          <div class="gr-tab" data-gr-content="/content/tabs/dynamicTab1.html?v=14">
                          </div>
                        ```


                        This tells our code to pull in a file named
                        `dynamicTab1.html`, located in our WebDAV's
                        `/content/tabs/` folder. The querystring is used just to
                        defeat caching.


                        Here are the contents of our `dynamicTab1.html` file:


                        ```

                        <input id="gr-tab-data" type="hidden"
                        data-gr-position="3" data-gr-title="Right By You"/>

                        <div class="container container-small gr-rightbyyou">
                          <div style="display: flex; flex-direction: column">
                            <div style="display: flex">
                              <div>
                                <img style="display: block; width: 100px; max-width: 100px; margin-right: 24px" 
                                src="https://content.goruck.com/2017site/products/free-returns-icon.png" height="auto"/>
                              </div>
                            <div>
                              <h3 style="margin-top: 0">Free &amp; Easy Returns</h3>
                              <p>Don't like it? Send it back for free. Returnable in like-new condition within 30 days and 
                              every order comes with a free return shipping label. Too easy.</p>
                            </div>
                          </div>

                          <div style="display: flex; margin-top: 12px">
                            <div>
                              <img style="display: block; width: 100px; max-width: 100px; margin-right: 24px" 
                              src="https://content.goruck.com/2017site/products/challenge-excellence.png" height="auto"/>
                            </div>

                            <div>
                              <h3 style="margin-top: 0">Challenge Excellence</h3>
                              <p>We have two grades, A and F and A- rounds down. Excellence is the standard and please hold us to it, 
                              we want you to love your gear as much as we do.</p>
                            </div>
                          </div>

                          <div style="display: flex; margin-top: 12px">
                            <div>
                              <img style="display: block; width: 100px; max-width: 100px; margin-right: 24px" 
                              src="https://content.goruck.com/2017site/products/customer-service-icon.png" height="auto"/>
                            </div>
                              <div>
                                <h3 style="margin-top: 0">Do Right By People</h3>
                                <p>Our goal is to run a company our grandfathers would be proud of. And the central tenet 
                                &mdash; an oldie but a goodie &mdash; is that we do whatever it takes to do right by people.
                                Contact us at <a href="https://goruck.zendesk.com/hc/en-us/requests/new" target="_blank">
                                team@goruck.com</a> with any questions and we'll get back to you ASAP.</p>
                              </div>
                            </div>
                          </div>
                        </div>

                        ```


                        ### Dynamic Tabs Javascript 


                        Again, the JavaScript code to implement Dynamic Tabs is
                        invoked in the PageManager class' before method. The
                        Dynamic Tabs code is more complex, and it relies on
                        other classes we wrote to get content from the external
                        server and cache it in the browser.


                        Nevertheless, none of it is rocket science. The three
                        classes involved are 250 lines of code. Interested
                        readers are invited to contact me via the BigCommerce
                        Developers forum for more information about the
                        implementation.

                    - type: text
                      data: >-
                        ## Snippets


                        Snippets are similar to Dynamic Tabs, in that they allow
                        you to use the BigCommerce control panel's HTML editor
                        to provide content, but pull it from a separate file.
                        This allows you to share common content across multiple
                        pages.


                        Also, because the control panel's HTML editor strips out
                        stylesheets, this is a good way to provide page-specific
                        styles for a page.


                        We use snippets at GORUCK to display our sizing charts,
                        as shown below. This makes sense since because we have a
                        handful of charts that need to be shared across many
                        products, so we don't want to copy and paste each chart
                        for every product that needs it.
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539878331668
                      config:
                        centered: true
                        fluid: true
                        bordered: true
                        maxWidth: '650'
                        maxHeight: '350'
                    - type: text
                      data: >+
                        ## Snippets HTML


                        Here is the format of the HTML that needs to placed on
                        each page that uses the snippet:


                        ```

                        <div class="gr-snippet" data-gr-content="CONTENT URL">
                             <em>Loading...</em>
                        </div>

                        ```


                        The external file can contain any arbitrary HTML and
                        CSS, and the styled HTML is displayed in the page
                        location where the `gr-snippet` div is located.


                        ### Snippets JavaScript


                        Like Dropzones and Dynamic Tabs, the Snippets code is
                        invoked in `PageManager`'s `before` method. Snippets
                        adds just another 50 lines of JavaScript code to the
                        theme, also relying on the same code that Dynamic Tabs
                        uses to get the external file and cache it in the
                        browser.

                      header:
                        anchor: dynamic-content_snippets
                    - type: text
                      data: >-
                        ## Recap 


                        At GORUCK, we've developed a number of techniques that
                        allow us to separate our content from our theme. These
                        techniques have proved valuable to us, because they
                        allow us to:


                        * Keep our content development and software development
                        workflows separate.

                        * Reduce modifications to our theme, which simplifies
                        merging updates from our theme provider.

                        * Share content across multiple pages.

                        * Tailor our content based on product category and
                        brand.
                      header:
                        anchor: dynamic-content_recap
        - title: Localization
          route:
            path: /internationalization-and-localization
          data:
            children:
              - title: Localizing Stores
                route:
                  path: /localizing-stores
                data:
                  blocks:
                    - type: html
                      data: <h1>Localizing Stores</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#localizing_localization-touchpoints\">Localization Touchpoints Overview</a></li>\n    <li><a href=\"#localizing_translating-theme-files\">Translating Theme Files via Stencil CLI</a></li>\n    <li><a href=\"#localizing_localizing-checkout\">Localizing Checkout</a></li>\n    <li><a href=\"#localizing_localizing-control-panel\">Localizing Control Panel Content</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        A BigCommerce storefront can be customized to display in
                        any one language of your choice. To fully localize a
                        store into a language/region other than U.S. English,
                        you will need to customize three areas:


                        [Storefront theme
                        pages](#localizing_translating-theme-files) - Translate
                        static strings. This requires adding translation files
                        for your chosen non-English languages, via Stencil CLI.


                        [Checkout](#localizing_localizing-checkout) - 
                        Localizing checkout requires modifications both to theme
                        files (in Stencil CLI) and to settings in the
                        BigCommerce control panel.


                        [Outside your
                        theme](#localizing_localizing-control-panel) - Adjust
                        other localization details via the BigCommerce control
                        panel.
                      header:
                        anchor: localizing_localization-touchpoints
                    - type: callout
                      data:
                        type: info
                        title: Storefront Language Support
                        body: >-
                          Each storefront can only support a single language. If
                          you want to support displaying multiple languages, we
                          recommend setting up a separate store for each
                          language.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Translating Theme Files via Stencil CLI


                        The bulk of localizing a store is translating content on
                        your theme's page templates. You will need to abstract
                        these templates' literal text strings into `{{lang}}`
                        variables, then provide per-language JSON files that
                        define these variables in corresponding key/value pairs.


                        For details on this process, see this section's
                        remaining pages, starting with [Basis for
                        Internationalization](/stencil-docs/internationalization-and-localization/basis-for-internationalization).
                      header:
                        anchor: localizing_translating-theme-files
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Localizing Checkout


                        Localizing your theme's checkout and order confirmation
                        pages requires customizations within:


                        * the corresponding templates
                        ([checkout.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/checkout.html)
                        and
                        [order-confirmation.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/order-confirmation.html)) 

                        * each [JSON translation
                        file](https://github.com/bigcommerce/cornerstone/tree/master/lang) 

                        * the [BigCommerce control
                        panel](http://login.bigcommerce.com/deep-links/manage/)
                      header:
                        anchor: localizing_localizing-checkout
                    - type: callout
                      data:
                        type: warning
                        title: Checkout Localization
                        body: >-
                          Checkout localization is only available for [Optimized
                          One-Page
                          Checkout.](/stencil-docs/template-files/customize-stencil-checkout/optimized-one-page-checkout#optimized_enable)
                    - type: text
                      data: >-
                        ### Additional Resources


                        * [Enabling Optimized One-Page
                        Checkout](/stencil-docs/template-files/customize-stencil-checkout/optimized-one-page-checkout#optimized_enable)
                        - required for the remaining checkout
                        internationalization options below


                        * [Currency-Conversion
                        Options](/stencil-docs/template-files/customize-stencil-checkout/currency-conversion)
                        -displaying prices in alternate currencies.


                        * [Multi-Language
                        Checkout](/stencil-docs/template-files/customize-stencil-checkout/multi-language-checkout)
                        -covers translating your checkout and/or order
                        confirmation templates
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Localizing Control Panel Content


                        The remaining localization options reside outside your
                        theme and are accessible through the BigCommerce control
                        panel:


                        * [Product Catalog](#product-catalog)

                        * [Currency](#currency)

                        * [Date Format](#date-format)

                        * [Order Statuses](#order-statuses)

                        * [Blog](#blog)

                        * [Static Web Pages](#static-web-pages)

                        * [Transactional Emails](#transactional-emails)

                        * [Gift Certificates](#gift-certificates)
                      header:
                        anchor: localizing_localizing-control-panel
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          The BigCommerce platform does not currently support
                          translation of Transactional Emails or Gift
                          Certificates into languages other than English, so
                          instead we have provided a best practice for each.
                        title: Transactional Emails or Gift Certificates Translation
                    - type: text
                      data: >-
                        ### <div id="product-catalog">Localizing the Product
                        Catalog</div>


                        You must localize the store's product catalog separately
                        from its theme. Each entry within a catalog can be set
                        up in only one language, so you will want to localize a
                        separate version of your catalog for each
                        single-language store.


                        For an overview of populating the store catalog –
                        including options for bulk-importing content that you
                        can localize outside the BigCommerce platform – see
                        [Adding
                        Products](https://support.bigcommerce.com/s/article/Adding-Products)
                        (BigCommerce Support).


                        ### <div id="currency">Localizing Currency</div>

                        Each store's default currency is configured in the
                        BigCommerce control panel. For details, see [Changing
                        Your Default
                        Currency](https://support.bigcommerce.com/s/article/Managing-Currencies#default)
                        (BigCommerce Support).


                        ### <div id="date-format">Localizing Date Format</div>

                        You can set the appropriate date format for your store's
                        language/region in the BigCommerce control panel (under
                        [**Store Setup**›
                         **Store Settings** ›
                         **Date & Timezone**](http://login.bigcommerce.com/deep-links/manage/settings/store). For details, see [Changing Your Default Currency](https://support.bigcommerce.com/s/article/Managing-Currencies#default) (BigCommerce Support).

                        ### <div id="order-statuses">Localizing Order
                        Statuses</div>


                        The `order-status` labels displayed on a BigCommerce
                        storefront are configured outside your theme. You can
                        translate each of these strings via the BigCommerce
                        control panel under [**Orders** ›
                         **Order Statuses**](http://login.bigcommerce.com/deep-links/manage/orders/order-statuses). For instructions, see [Renaming an Order Status Label](https://support.bigcommerce.com/s/article/Order-Statuses#rename) (BigCommerce Support).

                        ### <div id="blog">Localizing the Blog</div>

                        Blog entries are managed through the BigCommerce control
                        panel under [**Storefront Content** ›
                         **Blog**](https://nik.mybigcommerce.com/manage/content/blog). You can add blog content in any language you choose. For details, see [Creating a Blog Post](https://support.bigcommerce.com/s/article/Using-the-Built-In-Blog#creating-post) (BigCommerce Support).

                        ### <div id="static-web-pages">Localizing Static Web
                        Pages</div>

                        If you create static pages as Stencil custom templates,
                        you can localize their content just like other theme
                        pages' content. However, if you create custom pages via
                        the BigCommerce control panel (under [Storefront Content
                        › Web
                        Pages](http://login.bigcommerce.com/deep-links/manage/content/pages)),
                        you must also enter their localized content via the
                        control panel. 


                        ### <div id="transactional-emails">Managing
                        Transactional Emails</div>


                        BigCommerce does not currently provide native support
                        for localizing transactional emails such as Order
                        Confirmation or status updates. To fully localize a
                        store into a language other than English, the simplest
                        solution is to disable the sending of BigCommerce native
                        emails.


                        To disable native emails, go to [Storefront › Email
                        Templates](http://login.bigcommerce.com/deep-links//manage/storefront-manager/email-templates).
                        Uncheck each email type that you prefer to customize. If
                        you would like to localize transactional emails, see our
                        Partner Apps, such as
                        [Conversio](https://www.bigcommerce.com/apps/conversio/),
                        for more details.


                        ### <div id="gift-certificates">Managing Gift
                        Certificates</div>


                        The BigCommerce platform does not currently support
                        translation of gift certificates into languages other
                        than English. To fully localize your store, you can
                        choose to disable gift certificates via the BigCommerce
                        control panel.
              - title: Defining Translation Keys
                route:
                  path: /basis-for-internationalization
                data:
                  blocks:
                    - type: html
                      data: <h1>Defining Translation Keys</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#basis_what-translates\">What Does and Doesn't Translate</a></li>\n    <li><a href=\"#basis_required\">Required Subdirectory</a></li>\n    <li><a href=\"#basis_schema\">The Schema</a></li>\n    <li><a href=\"#basis_localization-file\">Localization File Structure</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## What Does and Doesn't Translate


                        The Stencil framework allows you to define multiple
                        translations for each theme based on a predefined
                        schema. Theme developers are not required to localize a
                        theme in order to make it work. BigCommerce does not
                        provide translations for the theme’s content, however,
                        you have the option of localizing your themes for
                        desired target languages, based on the provided schema.


                        * In order for theme translation to occur, you must
                        create a JSON file for each language you choose to
                        support and include key/value pairs for the text
                        blocks/parameters that you choose to translate. The
                        following pages provide details for these steps.


                        * The translated values will be displayed to visitors
                        who have selected the corresponding language in their
                        browser's locale preferences. The Stencil framework
                        automatically detects the Accept-Language request HTTP
                        header from the visitor's browser.


                        * Where a Stencil theme contains no JSON file matching
                        any of the visitor's preferred languages, it will fall
                        back to the values in the default English-language JSON
                        file.


                        * Stencil's multi-language capabilities are currently
                        limited to these particular strings that you specify
                        within the theme. The Stencil framework does not
                        currently translate content rendered from a store's
                        catalog database – for example, products' names.


                        * If you want to fully support multiple languages, we
                        recommend that you set up a separate storefront for each
                        language. This will enable you to thoroughly customize
                        all of your content (including your product catalog) for
                        each target audience.
                      header:
                        anchor: basis_what-translates
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Required Subdirectory


                        Within each theme, a top level `/lang/` subdirectory is
                        reserved for internationalization. This `.../lang/`
                        subdirectory, with its contained en.json file (which
                        contains English-language defaults), must be present in
                        order for a Stencil theme to function.


                        You can localize a theme by providing other appropriate
                        .json translation files in the `.../lang/` subdirectory.
                        One file is required for each language that you want to
                        support. (These can include non-U.S. versions of
                        English, each with their own spellings.)


                        Within these files, you would define key values
                        corresponding to the text blocks in your theme's
                        templates that you choose to abstract into translatable
                        keys.
                      header:
                        anchor: basis_required
                    - type: text
                      data: '---'
                    - type: text
                      data: "## The Schema\n\nName your translation files based on the <a href=\"https://tools.ietf.org/html/bcp47\">BCP47 specification</a> of language and region codes. For a summary of how these codes are designed, see the World Wide Web Consortium’s <a href=\"http://www.w3.org/International/articles/language-tags/\">overview</a>.<br>\n\n <br>\n\nYou can find a list of code subtags in the <a href=\"http://www.iana.org/assignments/language-subtag-registry\">IANA Language Subtag Registry</a>. These subtags are primitives that you can combine to create file names’ prefixes for individual regions. Here are some examples:\n\n<table>\n\t\t<tr>\n    <th>Localization file name</th>\n    <th>Corresponding regional language variant</th>\n    <th>Subtags used</th>\n  </tr>\n  <tr>\n    <td>en.json</td>\n    <td>English (default file)</td>\n    <td>en (English)</td>\n  </tr>\n  <tr>\n    <td>en-US.json</td>\n    <td>American English</td>\n    <td>en (English) + US (United States)</td>\n  </tr>\n  <tr>\n    <td>en-AU.json</td>\n    <td>Australian English</td>\n    <td>en (English) + AU (Australia)</td>\n  </tr>\n  <tr>\n    <td>fr.json</td>\n    <td>French</td>\n    <td>en (French)</td>\n  </tr>\n  <tr>\n    <td class=\"\">fr-CA.json</td>\n    <td class=\"\">Canadian French</td>\n    <td class=\"\">fr (French) + CA (Canada)</td>\n  </tr>\n</table>\n\n\nFor more examples of frequently-used codes, see the following linked table’s \"LCID string\" (middle) column: <a href=\"http://www.science.co.il/Language/Locale-codes.asp\">http://www.science.co.il/Language/Locale-codes.asp</a>."
                      header:
                        anchor: basis_schema
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Localization File Structure


                        The `.json` translation files have a straightforward
                        structure of key-value pairs. Here is an example, from
                        Stencil’s default `en.json` file:


                        `"welcome_back": "Welcome back, {name}"`


                        Above, `"welcome_back"` is an arbitrary key name for a
                        welcome message. The string `"Welcome back, {name}"` is
                        its assigned value for English-language stores.


                        If you design your theme’s storefront pages to refer to
                        this message by its generic key name `"welcome_back"`,
                        they can pass its localized value in other languages, as
                        that value is defined in each language’s `.json` file.

                        Key-value pairs are grouped into objects, as you can see
                        in this longer example below:
                      header:
                        anchor: basis_localization-file
                    - type: code
                      data: |-
                        {
                           "header": {
                            "welcome_back": "Welcome back, {name}"
                           },
                           "prelaunch": {
                            "coming_soon": "Coming Soon",
                            "intro": "This store will be launching shortly. Please visit again!"
                           },
                           "cart": {
                            "items": "{NUM, plural, =0{(0 items)} one {(# item)} other {(# items)}}",
                            "label": "Cart",
                            "is_empty": "Your cart is empty",
                             "coupon_code": "Coupon Code",
                            "gift_certificate": "Gift Certificate",
                            "freeshipping": "Free Shipping",
                            "shipping_peritem": "Per Item Shipping",
                            "shipping_estimator": {
                                "add_info": "Add Info",
                                "select_a_country": "Select a Country",
                                "select_a_state": "Select a State",
                                "estimate_shipping": "Estimate Shipping"
                            }
                           },
                        }
                      config:
                        mode: js
              - title: Invoking Translation Keys
                route:
                  path: /invoking-translation-keys
                data:
                  blocks:
                    - type: html
                      data: <h1>Invoking Translation Keys</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#invoking_translation\">Translation Syntax</a></li>\n    <li><a href=\"#invoking_video\">Video Demo</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Translation Syntax


                        Once keys and values are defined in the [.json
                        translation
                        files](https://github.com/bigcommerce/cornerstone/tree/master/lang),
                        you can invoke dynamic translation strings using the the
                        [custom `{{lang}}` Handlebars
                        helper](/stencil-docs/handlebars-syntax-and-helpers/handlebars-helpers-reference/string-helpers/custom-string-helpers#handlebars_lang).
                        Your invocation would follow this generic format:
                      header:
                        anchor: invoking_translation
                    - type: code
                      data: '{{lang "translation.key" optionalVariable=”someValue”}}'
                      header:
                        title: Translation invocation
                    - type: text
                      data: >-
                        Here is how this works. In a non-internationalized
                        theme, a storefront page might include a string like
                        this:
                    - type: code
                      data: >-
                        <a href="{{ urls.account }}">Welcome Back <span>{{
                        customer.name }}</span></a>
                      header:
                        title: Non Internationalized string
                      config:
                        mode: html
                    - type: text
                      data: >-
                        The corresponding internationalized version would
                        substitute the text with the fully dynamic `{{ lang }}`
                        Handlebars helper shown below:
                    - type: code
                      data: >-
                        <a href="{{ urls.account }}">{{ lang
                        "header.welcome_back" name=customer.name }}</a>
                      header:
                        title: >-
                          Internationalized String using {{lang}} Handlebars
                          Helper
                      config:
                        mode: html
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Video Demo


                        Watch a video demonstration of how JSON translation
                        files' key/value pairs interact with your templates'
                        Handlebars statements to localize your storefront
                        pages: 


                        <iframe width="560" height="315"
                        src="https://www.youtube.com/embed/ygiRGfSrmnA"
                        frameborder="0" allow="autoplay; encrypted-media"
                        allowfullscreen></iframe>
                      header:
                        anchor: invoking_video
                    - type: callout
                      data:
                        body: >-
                          Be sure to set permission 644 (rw-r–r–) on any new
                          translation files that you add. Without these
                          permissions, running your theme locally will fail,
                          with multiple error messages. Bundling your theme will
                          also fail, blocking its upload to a store.
                        type: warning
                        title: File Permissions Required
              - title: Features Supported
                route:
                  path: /features-supported
                data:
                  blocks:
                    - type: html
                      data: <h1>Features Supported</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#implementation_automatic-language-detection\">Automatic Language Detection</a></li>\n    <li><a href=\"#implementation_cascading-translations\">Cascading Translations</a></li>\n\t\t<li><a href=\"#implementation_nested-plurality\">Nested Plurality and Gender Support</a></li>\n\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Automatic Language Detection


                        The Stencil framework can automatically detect a
                        localized language, based on the active shopper’s
                        `"Accept‑Language"` header.
                      header:
                        anchor: implementation_automatic-language-detection
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Cascading Translations


                        Cascading works as follows: Assume that a
                        Quebec/French-Canadian customer visits a storefront
                        built with both `fr.json` and `fr‑CA.json` localization
                        files. The framework places the `fr‑CA` locale "on top
                        of" the base `fr locale`. Therefore, any strings missing
                        from the `fr‑CA.json` file will “fall back” to
                        definitions in the base `fr.json file`, providing at
                        least approximate translations. This cascading works
                        generally across languages and locales.
                      header:
                        anchor: implementation_cascading-translations
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Nested Plurality and Gender Support

                        The framework allows you to code conditional plurality
                        for strings within each translation file. For example,
                        your code within an English-language file could overload
                        a single message to display in each of the following
                        forms – depending on the actual value of its two numeric
                        variables:


                        * "There are 3 items in 2 categories"

                        * "There is 1 item in 2 categories"

                        * "There are 2 items in 1 category"


                        Here is the markup that would handle the first three
                        words in each example above, assuming appropriate
                        parameters were inserted in the translation files:
                      header:
                        anchor: implementation_nested-plurality
                    - type: code
                      data: |-
                        <h2 class="modal-header-title">
                           {{lang 'cart.added_to_cart.what_next' num_products=cart.quantity}} [...]
                        </h2>
                      config:
                        mode: js
                    - type: text
                      data: >-
                        Similarly, the framework supports per-language
                        conditional coding of appropriate genders for pronouns
                        and nouns.
              - title: Implementation Example
                route:
                  path: /implementation-example
                data:
                  blocks:
                    - type: html
                      data: <h1>Implementation Example</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#implementation_cornerstone-example\">Cornerstone Implementation Example</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Cornerstone Implementation Example


                        Here is an example based on this file within
                        Cornerstone:

                        `cornerstone/templates/components/cart/shipping-estimator.html`


                        In the excerpt below, each highlighted `{{lang...}}`
                        statement is a Handlebars helper. Each of the statements
                        abstracts the message indicated by its
                        (English-language) key name to enable
                        internationalization of that message:
                      header:
                        anchor: '#implementation_cornerstone-example'
                    - type: code
                      data: |
                        <div class="shipping-estimator" style="display: none;">
                            <form class="estimator-form">
                              <button class="shipping-estimate-hide">{{lang 'cancel'}}</button>
                              <select name="shipping-country">
                              <option>{{lang 'cart.shipping_estimator.select_a_country'}}</option>
                              {{#each countries}}
                                  <option value="{{id}}" {{#if selected}}selected="selected"{{/if}}>
                                        {{name}}
                                  </option>
                              {{/each}}
                              </select>
                              <select name="shipping-state">
                              <option>{{lang 'cart.shipping_estimator.select_a_state'}}</option>
                              {{#each states}}
                                  <option value="{{id}}" {{#if selected}}selected="selected"{{/if}}>
                                      {{name}}
                                  </option>
                              {{/each}}
                              </select>
                              <input type="text" name="shipping-zip" value="{{selected_zip}}">
                              <button class="shipping-estimate-submit">{{lang 'cart.shipping_estimator.estimate_shipping'}}
                              </button>
                            </form>
                            <div class="shipping-quotes"></div>
                        </div>
                      config:
                        mode: js
                    - type: text
                      data: >-
                        In the excerpts below, you can see that the default
                        theme’s basic `.../lang/en.json` file includes matches,
                        and value definitions, for each of the translation keys
                        in the Handlebars helpers above:
                    - type: code
                      data: |-
                        {
                          "header": {
                                "welcome_back": "Welcome back, {name}"
                          },
                          ...
                              "label": "Cart",
                                "is_empty": "Your cart is empty",
                                "coupon_code": "Coupon Code",
                                "gift_certificate": "Gift Certificate",
                                "freeshipping": "Free Shipping",
                                "shipping_peritem": "Per Item Shipping",
                              "shipping_estimator": {
                                    "add_info": "Add Info",
                                  "select_a_country": "Select a Country",
                                  "select_a_state": "Select a State",
                                  "estimate_shipping": "Estimate Shipping"
                              }
                          },
                          "common": {
                                "currency_converter": "Currency Converter",
                                "newsletter_signup": "Sign up for our newsletter",
                                "form_submit": "Submit",
                                "required": "Required",
                                "email_address": "Email Address",
                              "edit": "Edit",
                              "no": "No",
                              "yes": "Yes",
                              "cancel": "Cancel",
                              "share": "Share",
                              "delete": "Delete",
                              "public": "Public",
                                "private": "Private",
                                "view_all": "View All",
                                "paginator": {
                                    "page_of": "Page {current} of {total}"
                              },
                              ...
                      config:
                        mode: js
                    - type: text
                      data: >-
                        Translation files for other languages would use the same
                        format, to define these keys’ values in their respective
                        languages.
        - title: Prepare & Upload a Theme
          route:
            path: /prepare-and-upload-a-theme
          data:
            children:
              - title: Checking a Theme's Size
                route:
                  path: /checking-a-themes-size
                data:
                  blocks:
                    - type: html
                      data: <h1>Checking a Theme's Size</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#checking_checking\">Checking a Theme's Size</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Checking a Theme's Size


                        Your theme should ideally bundle into an archive of only
                        a few megabytes. BigCommerce imposes a hard limit of 50
                        MB, but most themes do not approach this limit unless
                        they include many large static assets.


                        If your theme is unlikely to exceed 50 MB, you can skip
                        past jump directly to Bundling and Uploading a Theme.


                        A few themes, however, might exceed the 50 MB limit. In
                        these cases, you can either Shrink Your Theme with the
                        help of WebDAV or Stage Your Theme for CDN Delivery to
                        restructure your theme to a size that's manageable for
                        upload to BigCommerce.
                      header:
                        anchor: checking_checking
              - title: 'Shrinking A Theme '
                route:
                  path: /shrinking-your-theme
                data:
                  blocks:
                    - type: html
                      data: >-
                        <h1>Shrinking a Theme by Excluding Static Assets Using
                        WebDAV</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#shrinking_restructuring\">Restructuring a Theme</a></li>\n    <li><a href=\"#shrinking_webdav-folders\">WebDAV Folders and Stencil Themes</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >
                        ## Restructuring Your Theme


                        In this section, you will first isolate static assets
                        from your theme's local directory, then use WebDAV to
                        cloud-host those assets, and finally reference those
                        assets using Stencil's cdn Handlebars helper.

                        For an existing theme, make a backup of your whole
                        <theme‑name> directory before proceeding.


                        Examine your theme's `/assets/` subdirectory and/or its
                        intended contents. Check for large static assets like
                        images (especially in `/assets/img/`) and videos that
                        are likely culprits in causing a bundled `.zip` file to
                        go toward or beyond BigCommerce's 50 MB limit.


                        Use WebDAV to upload these items to WebDAV's remote
                        `/content/` directory. For WebDAV specifics, please see
                        BigCommerce's Knowledge Base articles on:

                        * [Connecting to WebDav]()

                        * [WebDAV Folder Structure]()


                        Throughout your theme, reference each of these assets
                        using Stencil's `cdn` custom Handlebars helper –
                        prepending the `webdav:` option to the `assetPath`
                        parameter.


                        Prepending `webdav:` will build a URL in the remote
                        WebDAV directory. This allows your theme's deployed
                        topology to diverge from any your local directory
                        structure. As noted above, the `cdn` helper will treat
                        `/content/` as the default/root WebDAV directory. So,
                        for example, this statement:


                        `<img src="{{cdn "webdav:img/image.jpg"}}">`


                        will build the URL transformed below:


                        `<img
                        src="https://cdn.bcapp/3dsf74g/content/img/image.jpg">`


                        On your local machine, move the large static assets to a
                        location where the `stencil bundle` command will ignore
                        them.

                        This can be a location outside your `<theme-name>`
                        directory, or it can be the `<theme-name>/assets/cdn/
                        subdirectory`, which stencil bundle excludes from
                        bundling. Separating these assets is necessary to
                        exclude them from the next step.


                        Run or re-run the `stencil bundle` command, from inside
                        your streamlined `<theme‑name>` directory.

                        Once your resulting `.zip` file is 50 MB or smaller,
                        upload it to BigCommerce, as described [here]().
                      header:
                        anchor: shrinking_restructuring
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          Both in production and locally, subdirectories of your
                          theme's `assets/` directory – like `img/`,` js/`, and
                          `fonts/` – are parallel to its `scss/` subdirectory.
                          So within your CSS, path references to such assets
                          should reflect this parallel relationship – for
                          example: `../img/test.jpg`.
                        title: URL References to Assets
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## WebDAV Folders and Stencil Themes


                        If you have used WebDAV in developing BigCommerce's
                        earlier (Blueprint) generation of themes, you will see
                        some differences when uploading Stencil themes.<br><br>


                        The directories accessible through WebDAV will
                        dynamically change, depending on the type of theme that
                        is active in the merchant's store, as follows:<p></p>


                        <table>
                          <tr>
                            <td><b>Available while the merchant's active theme is Blueprint:</b></td>
                            <td class=""><b>Available while the merchant's active
                              theme is Stencil:</b></td>
                          </tr>
                          <tr>
                            <td>/content/</td>
                            <td>/content/</td>
                          </tr>
                          <tr>
                            <td>/product_images/</td>
                            <td>/product_images/</td>
                          </tr>
                          <tr>
                            <td>/product_downloads/</td>
                            <td>/product_downloads/</td>
                          </tr>
                          <tr>
                            <td>/import_files/</td>
                            <td>/import_files/</td>
                          </tr>
                          <tr>
                            <td>/exports/</td>
                            <td>/exports/</td>
                          </tr>
                          <tr>
                            <td>/template/</td>
                            <td>-</td>
                          </tr>
                          <tr>
                            <td>/mobile_template/</td>
                            <td>-</td>
                          </tr>
                         </table>

                        <i>The overall difference is that the WebDAV
                        `/template/` and `/mobile_template/` directories are
                        <b>not</b> available for Stencil themes. These templates
                        must reside and remain within your Stencil theme's local
                        directory and file structure.</i>
                      header:
                        anchor: shrinking_webdav-folders
              - title: Staging A Theme for CDN Delivery
                route:
                  path: /staging-a-theme
                data:
                  blocks:
                    - type: html
                      data: <h1>Staging A Theme for CDN Delivery</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#staging_sizing-your-theme\">Organizing Your Theme</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Organizing Your Theme


                        For themes that would otherwise exceed BigCommerce's 50
                        MB limit on uploads, delivering your theme's large
                        static assets via a CDN (content delivery network) is an
                        alternative to the simpler WebDAV approach.


                        The advantage of this alternative is that all assets
                        stay within your theme's directory, so your theme's
                        local structure matches its deployed structure. The
                        disadvantage is that the procedure outlined below
                        requires the expense of a CDN.


                        To stage your theme for CDN delivery, you would locally
                        store your large static assets within your theme's

                        `<theme-name>/assets/cdn/` subdirectory. By design, the
                        `stencil bundle` command omits this subdirectory's
                        contents. So those contents do not count against the 50
                        MB limit on the resulting `.zip` file.


                        Then, as you develop your theme, reference each of these
                        assets using Stencil's `cdn` custom Handlebars helper,
                        like below:


                        `<img src="{{cdn "webdav:img/image.jpg"}}">`


                        **Note:** _The presumed WebDAV root directory is
                        /content/. (So, in this example, the `image.jpg` file
                        had been uploaded to the WebDAV `/content/` directory.)
                        The presumed local directory is `<theme-name>/assets/`,
                        so you can omit that path when referencing its contained
                        files or subdirectories._


                        When you are ready to upload your theme to BigCommerce,
                        follow the procedure in [Bundling and Submitting a
                        Theme](/stencil-docs/shipping-a-theme/bundling-and-submitting).
                      header:
                        anchor: staging_sizing-your-theme
              - title: Bundling and Uploading a Theme
                route:
                  path: /bundling-and-uploading
                data:
                  blocks:
                    - type: html
                      data: <h1>Bundling and Uploading a Theme</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#bundling_confirm-dependencies\">Confirm Dependencies</a></li>\n    <li><a href=\"#bundling_verify-directory\">Verify Directory and File Permissions</a></li>\n    <li><a href=\"#bundling_bundling-your-theme\">Bundling Your Theme</a></li>\n    <li><a href=\"#bundling_uploading-your-theme\">Uploading Your Theme</a></li>\n    <li><a href=\"#bundling_other-bundling\">Other Bundling or Upload Errors</a></li>\n\t</ul>\n</div>\n\n\n\n\n\n\n\n\n"
                    - type: text
                      data: >-
                        ## Confirm Dependencies


                        If you have customized a theme originally downloaded
                        from the BigCommerce Theme Marketplace: Before you
                        package your theme, make sure your theme directory
                        includes all the dependencies that BigCommerce requires
                        for submission. 


                        Follow the link for your scenario:


                        If you downloaded a refreshed version of Stencil's
                        default Cornerstone theme: Run `npm install` in the
                        theme directory to install refreshed JavaScript
                        dependencies, as outlined in [Installing
                        Stencil](/stencil-docs/getting-started/installing-stencil#installing_installing-stencils-js-utilities).


                        If you downloaded a different Marketplace theme, and its
                        [version was lower than 1.10.0]():

                        You must also run `jspm install` in the theme directory.
                      header:
                        anchor: bundling_confirm-dependencies
                    - type: callout
                      data:
                        body: >-
                          The `stencil bundle` and `stencil push` commands do
                          not check for the dependencies that these build
                          systems install. So if those dependencies are missing,
                          these commands will not immediately report errors.
                          However, your resulting .zip file will not properly
                          upload to BigCommerce, and will not run properly on a
                          storefront.
                        title: No Automatic Check for Dependencies
                        type: warning
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Verify Directory and File Permissions


                        If you have added any new subdirectories or files to
                        your base theme, verify that you have:


                        Set newly added directories to permission `755`
                        (`drwxr-xr-x`).

                        Set newly added files to permission `644` (`rw-r--r--`).
                      header:
                        anchor: bundling_verify-directory
                    - type: callout
                      data:
                        body: >-
                          Without these permissions, bundling your theme will
                          fail, blocking its upload to BigCommerce.
                        title: Writable Permissions Are Required
                        type: warning
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Bundling Your Theme


                        Once you have verified the requirements above, you are
                        ready to process and package your theme for upload to
                        BigCommerce. Stencil CLI provides two options for
                        creating a `.zip` file that contains all of your theme's
                        essentials, while excluding redundant components. The
                        options are either only bundling your theme, or bundling
                        and pushing your theme. These options are available
                        depending on how you've
                        [authorized](/stencil-docs/getting-started/launching-stencil/authorizing-and-initializing)
                        your theme:


                        ### Bundle Only 


                        The `stencil bundle` command is available for all
                        themes, whether they were initialized using OAuth or
                        Basic-Auth tokens. To use it, just enter the following
                        on your command line:


                        `stencil bundle`


                        The `bundle` command will notify you of its progress and
                        completion.



                        ####  Check/Adjust Zipfile's Size


                        Check the resulting `.zip` file's size before you
                        proceed. The zipped bundle should be only a few
                        megabytes. BigCommerce imposes a hard limit of 50 MB,
                        and any file size approaching that is problematic. If
                        your `.zip` file fits comfortably within the size limit
                        above, jump directly to [Uploading Your
                        Theme](bundling_uploading-your-theme). However, if your
                        `.zip` file approaches or exceeds 50 MB, you must first
                        use one of these procedures to restructure your theme to
                        a size that's manageable for upload to BigCommerce:


                        * [Shrinking Your Theme by Excluding Static Assets
                        (WebDAV)]()

                        * [Staging a Theme for CDN Delivery]()



                        ### Bundle and Push 


                        The `stencil push` command is available only for themes
                        that you have successfully initialized using an OAuth
                        token (with `Themes:modify scope`). This command bundles
                        your theme and uploads it to the associated store, in
                        one continuous process.


                        For further requirements and usage details, please see
                        the _Command-Line Upload_ in [Uploading Your
                        Theme](#bundling_uploading-your-theme) below.


                        For file-size error diagnostics and workarounds, please
                        _Check/Adjust Zipfile's Size_ above.


                        ### Software Requirements / Resolving Lint Errors


                        * Only use the `stencil bundle` or the `stencil push`
                        command to process and package themes for submission.
                        These commands generate `.zip` files that match
                        BigCommerce's expected structure. They also generate
                        metadata required for your theme to function properly.


                        * Do not create `.zip` files using general-purpose
                        archiving software. The resulting files will trigger
                        errors upon upload to BigCommerce.


                        * Do not open a bundled theme `.zip` file to add,
                        delete, rename, or update files. Doing so will make your
                        theme unusable on the production store.


                        * If bundling your theme triggers multiple lint errors
                        related to the `bundle.js` file, then your theme is
                        missing the `.eslintignore` file. Please retrieve this
                        file from the [Stencil Cornerstone
                        repo](https://github.com/bigcommerce/cornerstone/blob/master/.eslintignore),
                        then re-run `stencil bundle` or `stencil push`.
                      header:
                        anchor: bundling_bundling-your-theme
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Uploading Your Theme


                        BigCommerce provides two alternatives for uploading a
                        theme to its associated BigCommerce store. You can
                        perform either a Control Panel Upload, or a Command Line
                        Upload. These options are available depending on how
                        you've authorized your theme:


                        ### Control-Panel Upload (OAuth or Basic Auth)


                        Uploading your theme via the BigCommerce control panel's
                        GUI is compatible with any store token (whether OAuth or
                        Basic-Auth), and with any OAuth token scope, and with
                        all versions of Stencil CLI. However, this option
                        requires that you first use stencil bundle to package
                        your theme into a .zip file. (Prepare your file
                        according to Bundle Only above.)


                        For the upload steps in the control panel, see the
                        [Uploading Custom Themes]() article in our Knowledge
                        Base. 


                        For error codes that you might encounter when uploading
                        a theme – and corresponding workarounds, see
                        [Troubleshooting Theme Uploads]().


                        ### Command-Line Upload (OAuth Required)


                        The stencil push command allows you to both bundle your
                        theme and upload it to the store, with a single terminal
                        command. To run stencil push, you must first:


                        Successfully initialize your theme using an OAuth token
                        that was created with the Themes:modify scope.

                        Install Stencil CLI version 1.12.0 or higher.


                        To check your current Stencil CLI version, enter
                        `stencil --version` or `stencil -V` on the command line.
                        If you need to update an earlier version, reinstall
                        Stencil CLI.


                        ### Pushing a Theme Upload


                        To initiate bundling and upload, enter the following on
                        the command line:


                        `stencil push`


                        Stencil CLI is designed to display the same
                        notifications, prompts, and selection options that you
                        would receive when using the control panel's GUI. Below
                        are some of the notifications and interactions you might
                        see.


                        ### Successful Bundling


                        Stencil CLI will display `ok` confirmations, or `not ok`
                        errors, or `warnings` for individual substeps in
                        bundling and uploading your theme. If bundling is
                        successful, you will next see a `Processing` progress
                        bar to track the upload.
                      header:
                        anchor: bundling_uploading-your-theme
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539055887301
                    - type: text
                      data: >-
                        ### Successful Upload


                        Upon a successful upload, you will be prompted: `Would
                        you like to apply your theme to your store at
                        <storehash>? (y/N)` Any response except `y` or `Y` will
                        be processed as "No." You can always apply the theme
                        later through the control panel.


                        ### Apply Which Variation?


                        If you chose to apply the newly uploaded theme, you will
                        be prompted: `Which variation would you like to apply?
                        (Use arrow keys)`
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539055910721
                    - type: text
                      data: >-
                        Use your arrow keys to move the selection
                        caret/highlight to the variation you want, and then
                        press `Enter`.


                        Stencil CLI will then confirm which variation is active
                        on the storefront.
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539055915081
                    - type: text
                      data: '---'
                    - type: text
                      data: >+
                        ## Theme Quota Warning


                        If you run `stencil push` when your store's `My Themes`
                        section has reached its [maximum of 20 themes](), you
                        will be prompted to select at least one existing theme
                        for deletion.

                      header:
                        anchor: bunding_theme-quota
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1539055988142
                    - type: text
                      data: >+
                        Custom themes – which are available for selection – will
                        have a circle to their left. Marketplace themes and the
                        store's active theme – all of which are protected from
                        deletion – will be flagged `(Disabled)`.


                        Use your arrow keys to move the selection caret to each
                        theme/version that you want to select. Then press the
                        spacebar to select it. (Filled circles will indicate
                        your selected themes/versions.)


                        If you are certain of your selections, you can next
                        press `Enter` to delete the themes.

                    - type: callout
                      data:
                        body: >-
                          Once you press `Enter`, the selected themes will be
                          deleted immediately, with no further confirmation.


                          If you have any doubts – especially about deleting
                          multiple themes/versions – it is safest to delete them
                          through the control panel GUI. This GUI allows you to
                          compare uploaded versions, and to inspect their
                          metadata.
                        title: ' Select Carefully – No Confirmation'
                        type: error
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Other Bundling or Upload Errors


                        For any other `not ok` bundling or upload errors that
                        you receive, please refer to these debugging guidelines
                        Theme setup and sizing diagnostics in preceding sections
                        throughout this page, or the following article titled
                        [Troubleshooting Theme
                        Uploads](/stencil-docs/prepare-and-upload-a-theme/troubleshooting-theme-uploads).
                      header:
                        anchor: bundling_other-bundling
              - title: Adding ReCAPTCHA V2
                route:
                  path: /adding-recaptcha-v2
                data:
                  blocks:
                    - type: html
                      data: <h1>Adding ReCAPTCHA V2</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#adding-recaptcha_better-spam-deterrence\">Better Spam Deterrence</a></li>\n    <li><a href=\"#adding-recaptcha_themes\">Themes that Already Incorporate reCAPTCHA V2</a></li>\n    <li><a href=\"#adding-recaptcha_how-to-upgrade\">How to Upgrade</a></li>\n\t</ul>\n</div>\n\n\n\n\n"
                    - type: text
                      data: >-
                        ## Better Spam Deterrence


                        reCAPTCHA v1 was deprecated as of March 31, 2018.

                        To deter spam submission through storefront forms,
                        BigCommerce now supports Google reCAPTCHA v2 challenges,
                        to distinguish human customers/visitors from automated
                        bots. We recommend that all storefront themes take
                        advantage of this upgraded bot detection.
                      header:
                        anchor: adding-recaptcha_better-spam-deterrence
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Themes that Already Incorporate reCAPTCHA V2


                        If you have based your theme on a theme/version that
                        already incorporates reCAPTCHA v2, you do not need to
                        take any further action. Compliant themes/versions
                        currently include:


                        * Cornerstone 1.6.1 or higher

                        * 22 Savile Row (all versions)

                        * Arcade 1.13.0 or higher

                        * Atelier 1.10.1 or higher

                        * Bazaar 1.0.1 or higher

                        * Capacity 1.12.0 or higher

                        * Chelsea 1.12.0 or higher

                        * Diamond 1.0.5 or higher

                        * Exhibit 1.10.4 or higher

                        * Flagship 1.10.6 or higher

                        * Fortune 1.12.1 or higher

                        * Foundry 1.10.1 or higher

                        * Geneva 1.10.1 or higher

                        * Hero 1.11.1 or higher

                        * Lookbook 1.10.3 or higher

                        * Merchant 1.12.0 or higher

                        * Mogul 1.0.7 or higher

                        * Parts Warehouse (all versions)

                        * Peak 1.11.4 or higher

                        * Prosper 1.10.2 or higher

                        * Queen 1.0.3 or higher

                        * Runway 1.11.2 or higher

                        * Scales 1.0.2 or higher

                        * Showroom 1.12.0 or higher

                        * Soho 1.11.1 or higher

                        * Solo 1.10.3 or higher

                        * Spotlight 1.11.0 or higher

                        * Supermarket (all versions)

                        * Touch 1.0.1 or higher

                        * Venture 1.11.4 or higher


                        However, if your theme is built on an earlier version of
                        these themes, or on a different base theme, follow the
                        updating instructions in How to Upgrade below.
                      header:
                        anchor: adding-recaptcha_themes
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## How to Upgrade


                        To add reCAPTCHA v2 support to a theme, you will need to
                        update script references in three template files:


                        * [Create-Account
                        Template](https://github.com/bigcommerce/cornerstone/pull/951/files#diff-ecbae6e2b7d5bbf5c950d68878e79d99)

                        * [Write-Review
                        Template](https://github.com/bigcommerce/cornerstone/pull/951/files#diff-945a5d7f1563068188ae39df568cfd43)

                        * [Contact-Us
                        Template](https://github.com/bigcommerce/cornerstone/pull/951/files#diff-5351402159301e1c225752f03d9f1f8e)


                        See [PR #951 on the Cornerstone Github
                        Repository](https://github.com/bigcommerce/cornerstone/pull/951/files)
                        to see differential for each of the files that need to
                        be modified and how.
                      header:
                        anchor: adding-recaptcha_how-to-upgrade
              - title: Troubleshooting Theme Uploads
                route:
                  path: /troubleshooting-theme-uploads
                data:
                  blocks:
                    - type: html
                      data: <h1>Troubleshooting Theme Uploads</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#troubleshooting-theme-uploads_restrictions\">Restrictions</a></li>\n    <li><a href=\"#troubleshooting-theme-uploads_error-codes\">Error Codes</a></li>\n    <li><a href=\"#troubleshooting-theme-uploads_warnings\">Warnings</a></li>\n    <li><a href=\"#troubleshooting-theme-uploads_workarounds\">Workarounds and Further Info</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Restrictions


                        Custom theme uploads must meet these restrictions:


                        * You may upload a maximum of 20 custom themes at a time
                        to the control panel's `Store Design` > `My Themes`
                        section.


                        * If you reach this maximum, you can delete custom
                        themes to make room for more uploads.


                        * Before uploading, you must package custom themes into
                        a Stencil-specific `.zip` file format, using Stencil
                        CLI's `stencil bundle` command.


                        * A theme's `.zip` file must be no larger than 50 MB. If
                        your file exceeds that size, please use either a WebDAV
                        or a CDN upload to exclude large static assets.
                      header:
                        anchor: troubleshooting-theme-uploads_restrictions
                    - type: text
                      data: |
                        ## Error Codes

                        <table>
                          <tr>
                            <th>Error Code</th>
                            <th>Meaning</th>
                          </tr>
                          <tr>
                            <td>TR-100, -101, -700, -1200, -1300</td>
                            <td>A server error occurred.</td>
                          </tr>
                          <tr>
                            <td>TR-200</td>
                            <td>Problem uploading the theme.</td>
                          </tr>
                          <tr>
                            <td>TR-300</td>
                            <td>Invalid .zip file. (Among other possible root causes, this can indicate an included <code>bundle.js.map</code> source-map file that exceeds its size limit of 5 MB. As a workaround, move this file outside your theme directory before re-running <code>stencil bundle</code>).</td>
                          </tr>
                          <tr>
                            <td>TR-301</td>
                            <td>Failed to unzip file.</td>
                          </tr>
                          <tr>
                            <td>TR-400</td>
                            <td>The .zip contains restricted/invalid file(s) - e.g., a file with an invalid extension.</td>
                          </tr>
                          <tr>
                            <td>TR-500</td>
                            <td>The .zip file is larger than the 50MB limit.</td>
                          </tr>
                          <tr>
                            <td>TR-600</td>
                            <td>The .zip file is missing a required file (<code>theme-name/templates/pages/home.html</code>).</td>
                          </tr>
                          <tr>
                            <td>TR-601</td>
                            <td>The .zip file is missing some parsed template file(s); or, one or more non-<code>.html</code> files are present in the <code>theme-name/templates/</code></nobr> subdirectory.</td>
                          </tr>
                          <tr>
                            <td>TR-800</td>
                            <td>There was a problem processing the contained config.json file. <b>Please check the config.json documentation for required keys and for keys that require values.</b></td>
                          </tr>
                          <tr>
                            <td>TR-900</td>
                            <td>The contained config.json file is missing required developer information.</td>
                          </tr>
                          <tr>
                            <td>TR-901</td>
                            <td>A theme variation defined in the contained config.json file is missing its required external ID.</td>
                          </tr>
                          <tr>
                            <td>TR-902</td>
                            <td>Two or more theme variations defined in the contained config.json file share a external ID. All external IDs must be unique.</td>
                          </tr>
                          <tr>
                            <td>TR-1000</td>
                            <td>There was a problem processing the contained <a href="/stencil-docs/stencil-theme-editor/schema-json-metadata">schema.json</a> file.</td>
                          </tr>
                          <tr>
                            <td>TR-1001</td>
                            <td>The theme is missing its required <a href="/stencil-docs/stencil-theme-editor/schema-json-metadata">schema.json</a> file.</td>
                          </tr>
                          <tr>
                            <td class="">TR-1400</td>
                            <td class="">There was a problem processing template <a href="/stencil-docs/front-matter/front-matter-overview">front matter</a>.</td>
                          </tr>
                          <tr>
                            <td>TR-1401</td>
                            <td>There was a database validation error when saving <a href="/stencil-docs/front-matter/front-matter-overview">front matter</a> to the database.</td>
                          </tr>
                          <tr>
                            <td>TR-1500</td>
                            <td>There was a problem uploading your files, due to multi-threading (multiple simultaneous uploads). Please try again.</td>
                          </tr>
                          <tr>
                            <td>TR-1600</td>
                            <td>There was a temporary problem on our system. Please try again.</td>
                          </tr>
                          <tr>
                            <td>TR-1601</td>
                            <td>There was a problem processing screenshots.</td>
                          </tr>
                          <tr>
                            <td>TR-1700, -1800, -1801, -1802, -1803</td>
                            <td>System error, possibly temporary. Please try again.</td>
                          </tr>
                          <tr>
                            <td>TR-3402</td>
                            <td>You are not allowed to edit your active theme. [Please select <code>Make a Copy</code>, then edit the resulting copy of your theme.]</td>
                          </tr>
                          <tr>
                            <td>TR-4400</td>
                            <td>One or more values in the <code>config.json</code> file exceed the 64-character limit. (Can also indicate string lengths that exceed their limits in other JSON files.)</td>
                          </tr>
                         </table>
                      header:
                        anchor: troubleshooting-theme-uploads_error-codes
                    - type: text
                      data: >-
                        ## Warnings


                        Warnings will not block a theme's upload, but these
                        onscreen and/or log messages notify you of problems
                        within the zipped theme. Here are the warnings and their
                        meanings:


                        | Warning |

                        |---|

                        | (These messages do not have numeric codes) |

                        | Issue in processing this theme's thumbnail screenshot
                        (`composed_image`). |

                        | Issue in processing this theme's full-size screenshot
                        (`desktop_screenshot`). |

                        | Issue in processing this theme's mobile
                        [screenshot](/stencil-docs/stencil-theme-editor/config-json-metadata)
                        (`mobile_screenshot`). |

                        | Missing file: This theme does not support Theme
                        Editor, as it is missing its required `[schema.json]`
                        file. |

                        | One or more of this theme's screenshots are not image
                        files. |

                        | Theme is missing a valid thumbnail image
                        `composed_image`). |

                        | Theme is missing a valid full-size image
                        `desktop_screenshot`). |

                        | Theme is missing a valid mobile image
                        (`mobile_screenshot`). |

                        | One or more of this theme's images is not of a
                        supported file type. Valid filetypes are: `.jpg`,
                        `.jpeg`, `.png`, `.gif`. |

                        | Thumbnail (`composed_image`) image dimensions are not
                        right. Expected 600 x 760 pixels. |

                        | Full-size (`desktop_screenshot`) image dimensions are
                        not right. Expected 2048 x 2600 pixels. |

                        | Mobile (`mobile_screenshot`) image dimensions are not
                        right. Expected 304 x 540 pixels. |

                        | Too-large image file size for a theme screenshot
                        `composed_image` (thumbnails), `desktop_screenshot`, or
                        `mobile_screenshot`] . The maximum supported size is x,
                        but the file's actual size is y. |
                      header:
                        anchor: troubleshooting-theme-uploads_warnings
                    - type: text
                      data: >-
                        ## Workarounds and Further Info


                        If a custom theme does not render properly after you
                        upload and apply it to a storefront, make sure you have
                        created the theme's `.zip` file using the `stencil
                        bundle` command, on a Mac OS, Linux computer, or virtual
                        machine. This will exclude Windows-specific errors that
                        have occurred on some bundles.


                        If you repeatedly encounter the same error or warning
                        and neither this page nor our KB resolves the problem,
                        see support resources for theme developers in our
                        [Developer
                        Community](https://forum.bigcommerce.com/s/group/0F913000000HLjECAW/bigcommerce-developers).
                      header:
                        anchor: troubleshooting-theme-uploads_workarounds
      blocks:
        - type: html
          data: |-
            <div class="docs-landing bg-bclightblue">        
            <div class="cBrLandingTiles">
                      <div class="ui-widget">
                        <div>
                          <div style="padding: 62px 0px 0px;">
                            <div class="container">
                              <h1 class="h1 panel-title__text-dark">Stencil Documentation</h1>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div><!-- landing tiles -->
                    <div class="cBrLandingTiles" style="margin-bottom: 5%;">
                      <div data-region-name="landingTiles">
                        <div class="ui-widget">
                          <div class="lift-content">
                            <div>
                              <div>
                                <div class="row row--pad">
                                  <div class="column-md-12 column-lg-6 column--pad m-bottom-25"><a class="cursor-pointer" href="https://github.com/bigcommerce/cornerstone" target="_blank">
                                    <div class="panel-media doc-landing">
                                      <div class="panel-media__wrap-icon">
                                        <div class="panel-media__icon">
                                          <img alt="" src="https://storage.googleapis.com/bigcommerce-production-dev-center/images/Github-Branch.svg">
                                        </div>
                                      </div>
                                      <div class="panel-media__wrap-content">
                                        <h4 class="h4 panel-media__title">Contribute to Cornerstone</h4>
                                        <p class="panel-media__text type--sm">Get involved. Join a community of open source developers and contribute to the Cornerstone theme.</p>
                                      </div>
                                    </div>
                                    </a>
                                  </div>
                                  <div class="column-md-12 column-lg-6 column--pad m-bottom-25"><a class="cursor-pointer" href="/stencil-docs/getting-started/installing-stencil">
                                    <div class="panel-media doc-landing">
                                      <div class="panel-media__wrap-icon">
                                        <div class="panel-media__icon">
                                          <img alt="" src="https://storage.googleapis.com/bigcommerce-production-dev-center/images/Install-Stencil.svg">
                                        </div>
                                      </div>
                                      <div class="panel-media__wrap-content">
                                        <h4 class="h4 panel-media__title">Installing Stencil</h4>
                                        <p class="panel-media__text type--sm">Start here. Set up your local development environment and begin customizing a theme.</p>
                                      </div>
                                    </div>
                                    </a>
                                  </div>
                                  <div class="column-md-12 column-lg-6 column--pad m-bottom-25"><a class="cursor-pointer" href="/stencil-docs/development-quickstart/customizing-a-theme">
                                    <div class="panel-media doc-landing">
                                      <div class="panel-media__wrap-icon">
                                        <div class="panel-media__icon">
                                          <img alt="" src="https://storage.googleapis.com/bigcommerce-production-dev-center/images/Getting-Started.svg">
                                        </div>
                                      </div>
                                      <div class="panel-media__wrap-content">
                                        <h4 class="h4 panel-media__title">Customization Quick Start</h4>
                                        <p class="panel-media__text type--sm">Start customizing your storefront design fast with our hands-on Quick Start.</p>
                                      </div>
                                    </div>
                                    </a>
                                  </div>
                                  <div class="column-md-12 column-lg-6 column--pad m-bottom-25"><a class="cursor-pointer" href="/stencil-docs/handlebars-syntax-and-helpers/handlebars-overview">
                                    <div class="panel-media doc-landing">
                                      <div class="panel-media__wrap-icon">
                                        <div class="panel-media__icon">
                                          <img alt="" src="https://storage.googleapis.com/bigcommerce-production-dev-center/images/Handlebars.svg">
                                        </div>
                                      </div>
                                      <div class="panel-media__wrap-content">
                                        <h4 class="h4 panel-media__title">Handlebars Helpers Reference</h4>
                                        <p class="panel-media__text type--sm">Power up your code. Make your theme dynamic with Handlebars logic.</p>
                                      </div>
                                    </div>
                                    </a>
                                  </div>
                                  <div class="column-md-12 column-lg-6 column--pad m-bottom-25"><a class="cursor-pointer" href="/stencil-docs/stencil-object-model-reference/stencil-objects">
                                    <div class="panel-media doc-landing">
                                      <div class="panel-media__wrap-icon">
                                        <div class="panel-media__icon">
                                          <img alt="" src="https://storage.googleapis.com/bigcommerce-production-dev-center/images/Stencil-Object-Reference.svg">
                                        </div>
                                      </div>
                                      <div class="panel-media__wrap-content">
                                        <h4 class="h4 panel-media__title">Object Model Reference</h4>
                                        <p class="panel-media__text type--sm">Access all the data Stencil has to offer. Browse our reference for store objects and properties available via Handlebars.</p>
                                      </div>
                                    </div>
                                    </a>
                                  </div>
                                  <div class="column-md-12 column-lg-6 column--pad"><a class="cursor-pointer" href="/stencil-docs/front-matter/front-matter-overview">
                                    <div class="panel-media doc-landing">
                                      <div class="panel-media__wrap-icon">
                                        <div class="panel-media__icon">
                                          <img alt="" src="https://storage.googleapis.com/bigcommerce-production-dev-center/images/Front-Matter.svg">
                                        </div>
                                      </div>
                                      <div class="panel-media__wrap-content">
                                        <h4 class="h4 panel-media__title">Front Matter Reference</h4>
                                        <p class="panel-media__text type--sm">Declare page resources. Adjust layouts and reference front matter expressions for each page type.</p>
                                      </div>
                                    </div>
                                    </a>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
              </div>
  /tools-resources:
    title: Tools & Resources
    data:
      $ref: ./Tools and Resources.html
  /changelog:
    title: Changelog
    data:
      $ref: ./Changelog.html
  /legacy:
    title: Legacy
    data:
      children:
        - title: Products
          route:
            path: /v2-products
          data:
            children:
              - title: V2 versus V3
                route:
                  path: /v2-v3
                data:
                  blocks:
                    - type: html
                      data: "<h1>V2 versus V3 API</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#v2-v3_advantages\">Advantages of V3 over V2</a></li>\n\t\t<li><a href=\"#v2-v3_products\">Products in V3</a></li>\n    <li><a href=\"#v2-v3_interoperability-v2-v3\">Interoperability between V2 and V3</li></a>\n\t\t<li><a href=\"#v2-v3_whats-not-in-v3\"> What's not in V3</a></li>\n\t\t<li><a href=\"#v2-v3_recommendations\"> Recommendations</a></li>\n\t\t<li><a href=\"#v2-v3_cheat-sheet\"> Cheat Sheet</a></li>\n\t</ul>\n</div>\n"
                    - type: text
                      data: >
                        ## Advantages of V3 over V2


                        The V3 API introduces a number of improvements designed
                        to improve efficiency. Most tasks can be performed with
                        fewer API calls, and the V3 API supports the inclusion
                        of subresources within a request. For example, you can
                        now create a product with variants and custom fields in
                        a single API call.


                        Each V3 resource includes a `meta` object at the end of
                        the response, making pagination easier.


                        Additionally, metafields have been added to the V3
                        Products resource so data can be stored against the
                        object. Metafield values can be specific to your
                        application or visible to other applications.


                        Lastly, the V3 API has been optimized for performance,
                        allowing data to be synced quickly.
                      header:
                        anchor: v2-v3_advantages
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Products in V3


                        ### Variants


                        Every purchasable entity in the catalog is now a
                        variant, including the product itself. This enables
                        enhanced flows around inventory management, such as the
                        ability to solely use the variants endpoint to manage
                        inventory levels. For more on variants see
                        [Variants](/api-docs/catalog/products/product-variants).


                        In V3 a variant needs to be created for every
                        combination of option values. In V2 it was possible to
                        create a SKU with a subset of product options.


                        We recommend creating products using V3 as BigCommerce
                        starts to move operations to the V3 API. 


                        ### Options and Modifiers


                        There is now a clear separation of [options that define
                        variants](/api-docs/catalog/products/product-variant-options)
                        versus [options that are modifiers of a
                        variant](/api-docs/catalog/products/modifier-options).
                        This simplifies the creation and management of variant
                        prices and modifier adjusters and removes the need to
                        use complex rules, in all but the most extreme cases.


                        In V3, options and modifiers are attached directly to
                        the product, without the requirement to create an option
                        set beforehand.


                        Creating Options on V2 has several steps:

                        1. Create the product

                        2. Create the options

                        3. Create an option set

                        4. Assign the option set to the product

                        5. Create adjustments, such as price adjustment, using
                        rules


                        Creating Products and Variants on V3:

                        1. Create the product with variants in one call

                        2. Create adjustments, such as price adjustment,
                        directly on the variant or modifier


                        Variants can be included with a GET request to lower the
                        number of API calls being made using
                        `?include=variants`.


                        V3 includes an endpoint for creating a [Catalog
                        Tree](/api-reference/catalog/catalog-api/catalog/getcatalogsummary).
                      header:
                        anchor: v2-v3_products
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Interoperability between V2 and V3


                        Previously (prior to December 17th, 2018), when a
                        product option, is created in V2 and assigned to a
                        product, trying to edit the global option using the V3
                        API would return a 422 error.


                        ```

                        {
                            "status": 422,
                            "title": "The product is currently associated with an option set, please remove it before editing an option or modifier.",
                            "type": "https://developer.bigcommerce.com/api#api-status-codes",
                            "errors": {
                                "product_id": "The product is currently associated with an option set, please remove it before editing an option or modifier."
                            }
                        }

                        ```


                        Instead of a 422 error, now it will automatically copy
                        the V2 global product option to a local product variant
                        option or modifier option. This is triggered by an
                        Update or Delete to either the [Product
                        Options](/api-reference/catalog/catalog-api/product-variant-options/getoptions)
                        or [Product
                        Modifiers](/api-reference/catalog/catalog-api/product-modifiers/getmodifiers)
                        endpoints. 


                        **What this does is:**

                        - Changes the `option_value` > `id`. Not the
                        `option_id`.

                        - Creates a copy directly on the product. 

                        - Copies over any variants, modifiers and option set
                        rules. 

                        - In the Control Panel the product is listed as having a
                        (Custom) Option Set. 

                        - Global Option Set rules are copied as product rules
                        and the `sort_order` is updated so they executed before
                        any existing product rules (which should mirror the
                        behavior before the product was changed).


                        **What this does not do:**

                        - Remove the Option Set from the store entirely. It is
                        still available in the control panel as an option set to
                        be assigned. 

                        - Change product pricing, rules or any other product
                        modifiers. They will be copied over and assigned the
                        product correctly. 


                        ### Update Request to Product Option Values

                        On the following product, you will see the original
                        option response of a product created using V2, a change
                        to the option values and then the final option
                        response. 


                        This product is a T-Shirt with a global option set of
                        size and color added. Take a note of the option values
                        id’s. These will change when an update is made to the
                        option using the /options endpoint on V3. While they
                        will all change since the entire option set is copied to
                        the product, the one we are updating below is the label
                        for Size Small, which has a `option_value` > `id` of
                        192. 
                      header:
                        anchor: v2-v3_interoperability-v2-v3
                    - type: code
                      data: |-
                        {
                            "data": [
                                {
                                    "id": 242,
                                    "product_id": 201,
                                    "name": "Color",
                                    "display_name": "Color",
                                    "type": "swatch",
                                    "sort_order": 0,
                                    "option_values": [
                                        {
                                            "id": 180,
                                            "label": "Red",
                                            "sort_order": 1,
                                            "value_data": {
                                                "colors": [
                                                    "#ff0000"
                                                ]
                                            },
                                            "is_default": false
                                        },
                                        {
                                            "id": 181,
                                            "label": "Green",
                                            "sort_order": 2,
                                            "value_data": {
                                                "colors": [
                                                    "#008000"
                                                ]
                                            },
                                            "is_default": false
                                        },
                                        {
                                            "id": 182,
                                            "label": "Blue",
                                            "sort_order": 3,
                                            "value_data": {
                                                "colors": [
                                                    "#0000ff"
                                                ]
                                            },
                                            "is_default": false
                                        }
                                    ],
                                    "config": []
                                },
                                {
                                    "id": 243,
                                    "product_id": 201,
                                    "name": "Size",
                                    "display_name": "T-Shirt Size",
                                    "type": "rectangles",
                                    "sort_order": 1,
                                    "option_values": [
                                        {
                                            "id": 192,
                                            "label": "Small",
                                            "sort_order": 0,
                                            "value_data": null,
                                            "is_default": false
                                        },
                                        {
                                            "id": 193,
                                            "label": "Medium",
                                            "sort_order": 1,
                                            "value_data": null,
                                            "is_default": false
                                        },
                                        {
                                            "id": 194,
                                            "label": "Large",
                                            "sort_order": 2,
                                            "value_data": null,
                                            "is_default": false
                                        }
                                    ],
                                    "config": []
                                }
                            ],
                            "meta": {
                                "pagination": {
                                    "total": 2,
                                    "count": 2,
                                    "per_page": 50,
                                    "current_page": 1,
                                    "total_pages": 1,
                                    "links": {
                                        "current": "?page=1&limit=50"
                                    }
                                }
                            }
                        }
                      header:
                        title: >-
                          /GET
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/options
                        subtitle: >-
                          Note the option_values id's for the colors are 180,
                          181 and 182. The values for color are 192, 193 and
                          194. 
                      config:
                        mode: json
                        highlightRange:
                          - from: '55'
                            to: '61'
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1545080028604
                      header:
                        title: Size and Color
                        subtitle: 'Control panel view product with global options '
                      config:
                        centered: true
                        maxWidth: '848'
                    - type: text
                      data: 'Below, "Small" is updated to "Small T-Shirt".'
                    - type: code
                      data: "\n{\n\t\"label\": \"Small T-Shirt\"\n}"
                      header:
                        title: >-
                          /PUT
                          https://api.bigcommerce.com/stores/{store_hash_/v3/catalog/products/{product_id}/options/{option_id}/values/{option_value)
                      config:
                        mode: json
                    - type: code
                      data: |-
                        {
                            "data": {
                                "id": 214,
                                "label": "Small T-Shirt",
                                "sort_order": 0,
                                "value_data": null,
                                "is_default": false
                            },
                            "meta": {}
                        }
                      header:
                        title: Response
                        subtitle: >-
                          /PUT
                          https://api.bigcommerce.com/stores/{store_hash_/v3/catalog/products/{product_id}/options/{option_id}/values/{option_value)
                      config:
                        mode: json
                    - type: text
                      data: >-
                        The ID is now 214. It was changed from 192. Below you
                        can see the `option_value` > `id` for all the options
                        changed even though only one was edited. The Control
                        Panel now shows the options as (Custom). 
                    - type: code
                      data: |-
                        {
                            "data": [
                                {
                                    "id": 242,
                                    "product_id": 201,
                                    "name": "Color1545071633-201",
                                    "display_name": "Color",
                                    "type": "swatch",
                                    "sort_order": 0,
                                    "option_values": [
                                        {
                                            "id": 211,
                                            "label": "Red",
                                            "sort_order": 1,
                                            "value_data": {
                                                "colors": [
                                                    "#ff0000"
                                                ]
                                            },
                                            "is_default": false
                                        },
                                        {
                                            "id": 212,
                                            "label": "Green",
                                            "sort_order": 2,
                                            "value_data": {
                                                "colors": [
                                                    "#008000"
                                                ]
                                            },
                                            "is_default": false
                                        },
                                        {
                                            "id": 213,
                                            "label": "Blue",
                                            "sort_order": 3,
                                            "value_data": {
                                                "colors": [
                                                    "#0000ff"
                                                ]
                                            },
                                            "is_default": false
                                        }
                                    ],
                                    "config": []
                                },
                                {
                                    "id": 243,
                                    "product_id": 201,
                                    "name": "T-Shirt-Size1545071633-201",
                                    "display_name": "T-Shirt Size",
                                    "type": "rectangles",
                                    "sort_order": 1,
                                    "option_values": [
                                        {
                                            "id": 214,
                                            "label": "Small T-Shirt",
                                            "sort_order": 0,
                                            "value_data": null,
                                            "is_default": false
                                        },
                                        {
                                            "id": 215,
                                            "label": "Medium",
                                            "sort_order": 1,
                                            "value_data": null,
                                            "is_default": false
                                        },
                                        {
                                            "id": 216,
                                            "label": "Large",
                                            "sort_order": 2,
                                            "value_data": null,
                                            "is_default": false
                                        }
                                    ],
                                    "config": []
                                }
                            ],
                            "meta": {
                                "pagination": {
                                    "total": 2,
                                    "count": 2,
                                    "per_page": 50,
                                    "current_page": 1,
                                    "total_pages": 1,
                                    "links": {
                                        "current": "?page=1&limit=50"
                                    }
                                }
                            }
                        }
                      header:
                        title: >-
                          /GET
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/options
                        subtitle: The option_value > id is now 214
                      config:
                        mode: json
                        highlightRange:
                          - from: '55'
                            to: '61'
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1545080964540
                      header:
                        title: Size and Color
                        subtitle: Control Panel after editing options
                      config:
                        centered: true
                        maxWidth: '848'
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## What's not in V3


                        In V3, options are attached directly to products. So
                        option sets are not required, and V3 includes no
                        endpoint to manage option sets. However, V3 will respect
                        option sets that have been attached via V2 or the
                        control panel.


                        Moving forward, new resources will be built in V3 and
                        existing V2 resources will eventually be migrated to V3.
                        Some V3 resources do not have V2 counterparts, and vice
                        versa. 


                        ### Complex Rules


                        Most of the use cases for using V2 rules can be solved
                        by making adjustments directly on variants and modifier
                        options. We recommend using variants as best practice,
                        but in cases where an adjustment depends on the
                        selection of multiple modifier values, V3 includes a
                        Complex Rules resource.


                        ### Product Rules 

                        Any variant created in v3 with non-null core properties
                        (price, weight, image, purchasability) will create a
                        rule under the hood. The same goes for modifier
                        adjusters. These will show in v2 as product rules, and
                        any edits to them will be shared across API versions.


                        ### Option Sets

                        In our control panel’s Add/Edit Product section, any
                        products created by the V3 API will not have an option
                        set applied, but merchants can still edit the options.
                        If the merchant applies an option set to a V3 product,
                        the product's variants will be removed. Currently, the
                        Add/Edit Product area consumes the V2 API, so products
                        created and managed through the control panel will be
                        converted to the V2 model, using option sets.
                      header:
                        anchor: v2-v3_whats-not-in-v3
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Recommendations

                        When the resource is available in
                        [V3](/api-reference/catalog/catalog-api), it is best
                        practice to use the V3 endpoint. For resources that do
                        not have a V3 counterpart, like Orders, use V2. Both the
                        V2 and V3 APIs authenticate with Oauth and are designed
                        to be used concurrently within a single application.


                        We have created a handy cheat sheet below that lists all
                        the differences between V2 and V3 of the API.
                      header:
                        anchor: v2-v3_recommendations
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## V3 and V3 Cheat Sheet


                        This identifies the differences between major actions on
                        both versions.


                        In the examples below: 

                        * Simple product is defined as not having variants,
                        modifiers or options.

                        * Complex Products are defined as having variants,
                        options and modifiers.
                      header:
                        anchor: v2-v3_cheat-sheet
                    - type: tabs
                      data:
                        children:
                          - title: Simple Product
                            blocks:
                              - type: tabs
                                data:
                                  children:
                                    - title: Get a Product
                                      blocks:
                                        - type: tabs
                                          data:
                                            children:
                                              - title: 'GET /v3/catalog/products/{product_id}'
                                                blocks:
                                                  - type: text
                                                    data: '### Response V3 Get Product'
                                                  - type: code
                                                    data: |-
                                                      {
                                                          "data": {
                                                              "id": 195,
                                                              "name": "BigCommerce Coffee Mug_3",
                                                              "type": "physical",
                                                              "sku": "",
                                                              "description": "",
                                                              "weight": 3,
                                                              "width": 0,
                                                              "depth": 0,
                                                              "height": 0,
                                                              "price": 11,
                                                              "cost_price": 0,
                                                              "retail_price": 0,
                                                              "sale_price": 0,
                                                              "map_price": 0,
                                                              "tax_class_id": 0,
                                                              "product_tax_code": "",
                                                              "calculated_price": 11,
                                                              "categories": [
                                                                  21
                                                              ],
                                                              "brand_id": 38,
                                                              "option_set_id": 50,
                                                              "option_set_display": "right",
                                                              "inventory_level": 400,
                                                              "inventory_warning_level": 40,
                                                              "inventory_tracking": "variant",
                                                              "reviews_rating_sum": 0,
                                                              "reviews_count": 0,
                                                              "total_sold": 0,
                                                              "fixed_cost_shipping_price": 0,
                                                              "is_free_shipping": false,
                                                              "is_visible": true,
                                                              "is_featured": false,
                                                              "related_products": [
                                                                  -1
                                                              ],
                                                              "warranty": "",
                                                              "bin_picking_number": "",
                                                              "layout_file": "product.html",
                                                              "upc": "",
                                                              "mpn": "",
                                                              "gtin": "",
                                                              "search_keywords": "",
                                                              "availability": "available",
                                                              "availability_description": "",
                                                              "gift_wrapping_options_type": "any",
                                                              "gift_wrapping_options_list": [],
                                                              "sort_order": 0,
                                                              "condition": "New",
                                                              "is_condition_shown": false,
                                                              "order_quantity_minimum": 0,
                                                              "order_quantity_maximum": 0,
                                                              "page_title": "",
                                                              "meta_keywords": [],
                                                              "meta_description": "",
                                                              "date_created": "2018-09-05T20:22:19+00:00",
                                                              "date_modified": "2018-09-20T15:28:50+00:00",
                                                              "view_count": 4,
                                                              "preorder_release_date": null,
                                                              "preorder_message": "",
                                                              "is_preorder_only": false,
                                                              "is_price_hidden": false,
                                                              "price_hidden_label": "",
                                                              "custom_url": {
                                                                  "url": "/bigcommerce-coffee-mug_3/",
                                                                  "is_customized": false
                                                              },
                                                              "base_variant_id": null,
                                                              "open_graph_type": "product",
                                                              "open_graph_title": "",
                                                              "open_graph_description": "",
                                                              "open_graph_use_meta_description": true,
                                                              "open_graph_use_product_name": true,
                                                              "open_graph_use_image": true
                                                          },
                                                          "meta": {}
                                                      }
                                                    header: {}
                                              - title: 'GET /v2/products/{product_id}'
                                                blocks:
                                                  - type: text
                                                    data: '### Response V2 Get Product'
                                                  - type: code
                                                    data: |-
                                                      {
                                                          "id": 195,
                                                          "keyword_filter": null,
                                                          "name": "BigCommerce Coffee Mug_3",
                                                          "type": "physical",
                                                          "sku": "",
                                                          "description": "",
                                                          "search_keywords": "",
                                                          "availability_description": "",
                                                          "price": "11.0000",
                                                          "cost_price": "0.0000",
                                                          "retail_price": "0.0000",
                                                          "sale_price": "0.0000",
                                                          "calculated_price": "11.0000",
                                                          "sort_order": 0,
                                                          "is_visible": true,
                                                          "is_featured": false,
                                                          "related_products": "-1",
                                                          "inventory_level": 400,
                                                          "inventory_warning_level": 40,
                                                          "warranty": "",
                                                          "weight": "3.0000",
                                                          "width": "0.0000",
                                                          "height": "0.0000",
                                                          "depth": "0.0000",
                                                          "fixed_cost_shipping_price": "0.0000",
                                                          "is_free_shipping": false,
                                                          "inventory_tracking": "sku",
                                                          "rating_total": 0,
                                                          "rating_count": 0,
                                                          "total_sold": 0,
                                                          "date_created": "Wed, 05 Sep 2018 20:22:19 +0000",
                                                          "brand_id": 38,
                                                          "view_count": 4,
                                                          "page_title": "",
                                                          "meta_keywords": "",
                                                          "meta_description": "",
                                                          "layout_file": "product.html",
                                                          "is_price_hidden": false,
                                                          "price_hidden_label": "",
                                                          "categories": [
                                                              21
                                                          ],
                                                          "date_modified": "Thu, 20 Sep 2018 15:28:50 +0000",
                                                          "event_date_field_name": "",
                                                          "event_date_type": "none",
                                                          "event_date_start": null,
                                                          "event_date_end": null,
                                                          "myob_asset_account": "",
                                                          "myob_income_account": "",
                                                          "myob_expense_account": "",
                                                          "peachtree_gl_account": "",
                                                          "condition": "New",
                                                          "is_condition_shown": false,
                                                          "preorder_release_date": "",
                                                          "is_preorder_only": false,
                                                          "preorder_message": "",
                                                          "order_quantity_minimum": 0,
                                                          "order_quantity_maximum": 0,
                                                          "open_graph_type": "product",
                                                          "open_graph_title": "",
                                                          "open_graph_description": "",
                                                          "is_open_graph_thumbnail": true,
                                                          "upc": "",
                                                          "avalara_product_tax_code": "",
                                                          "date_last_imported": "",
                                                          "option_set_id": 50,
                                                          "tax_class_id": 0,
                                                          "option_set_display": "right",
                                                          "bin_picking_number": "",
                                                          "custom_url": "/bigcommerce-coffee-mug_3/",
                                                          "primary_image": {
                                                              "id": 0,
                                                              "zoom_url": null,
                                                              "thumbnail_url": null,
                                                              "standard_url": null,
                                                              "tiny_url": null
                                                          },
                                                          "availability": "available",
                                                          "brand": {
                                                              "url": "https://api.bigcommerce.com/stores/id30h7ohwf/v2/brands/38",
                                                              "resource": "/brands/38"
                                                          },
                                                          "downloads": {
                                                              "url": "https://api.bigcommerce.com/stores/id30h7ohwf/v2/products/195/downloads",
                                                              "resource": "/products/195/downloads"
                                                          },
                                                          "images": {
                                                              "url": "https://api.bigcommerce.com/stores/id30h7ohwf/v2/products/195/images",
                                                              "resource": "/products/195/images"
                                                          },
                                                          "discount_rules": {
                                                              "url": "https://api.bigcommerce.com/stores/id30h7ohwf/v2/products/195/discountrules",
                                                              "resource": "/products/195/discountrules"
                                                          },
                                                          "configurable_fields": {
                                                              "url": "https://api.bigcommerce.com/stores/id30h7ohwf/v2/products/195/configurablefields",
                                                              "resource": "/products/195/configurablefields"
                                                          },
                                                          "custom_fields": {
                                                              "url": "https://api.bigcommerce.com/stores/id30h7ohwf/v2/products/195/customfields",
                                                              "resource": "/products/195/customfields"
                                                          },
                                                          "videos": {
                                                              "url": "https://api.bigcommerce.com/stores/id30h7ohwf/v2/products/195/videos",
                                                              "resource": "/products/195/videos"
                                                          },
                                                          "skus": {
                                                              "url": "https://api.bigcommerce.com/stores/id30h7ohwf/v2/products/195/skus",
                                                              "resource": "/products/195/skus"
                                                          },
                                                          "rules": {
                                                              "url": "https://api.bigcommerce.com/stores/id30h7ohwf/v2/products/195/rules",
                                                              "resource": "/products/195/rules"
                                                          },
                                                          "option_set": {
                                                              "url": "https://api.bigcommerce.com/stores/id30h7ohwf/v2/optionsets/50",
                                                              "resource": "/optionsets/50"
                                                          },
                                                          "options": {
                                                              "url": "https://api.bigcommerce.com/stores/id30h7ohwf/v2/products/195/options",
                                                              "resource": "/products/195/options"
                                                          },
                                                          "tax_class": {
                                                              "url": "https://api.bigcommerce.com/stores/id30h7ohwf/v2/taxclasses/0",
                                                              "resource": "/taxclasses/0"
                                                          },
                                                          "reviews": {
                                                              "url": "https://api.bigcommerce.com/stores/id30h7ohwf/v2/products/195/reviews",
                                                              "resource": "/products/195/reviews"
                                                          },
                                                          "metadata": []
                                                      }
                                                    header: {}
                                          header: {}
                                    - title: Create a Product
                                      blocks:
                                        - type: tabs
                                          data:
                                            children:
                                              - title: 'POST /v3/catalog/products '
                                                blocks:
                                                  - type: text
                                                    data: '### Create V3 Product Request'
                                                  - type: code
                                                    data: |-
                                                      {
                                                        "name": "BigCommerce Coffee Mug",
                                                        "price": "10.00",
                                                        "categories": [
                                                          23,
                                                          21
                                                        ],
                                                        "weight": 4,
                                                        "type": "physical"
                                                      }
                                                    header: {}
                                                    config:
                                                      mode: json
                                              - title: POST /v2/products
                                                blocks:
                                                  - type: text
                                                    data: '### Create V2 Product Request'
                                                  - type: code
                                                    data: |-
                                                      {
                                                          "name": "Plain T-Shirt",
                                                          "type": "physical",
                                                          "description": "This timeless fashion staple will never go out of style!",
                                                          "price": "29.99",
                                                          "categories": [18],
                                                          "availability": "available",
                                                          "weight": "0.5"
                                                      }
                                                    header: {}
                                                    config:
                                                      mode: json
                                          header: {}
                                    - title: Create Product with Images
                                      blocks:
                                        - type: tabs
                                          data:
                                            children:
                                              - title: >-
                                                  POST
                                                  /v3/catalog/products/{product_id}/images
                                                blocks:
                                                  - type: text
                                                    data: >-
                                                      ### Create V3 Product with Images


                                                      1. Create a product using: `POST
                                                      /v3/catalog/products`

                                                      2. Add images using: `POST
                                                      /v3/catalog/products/{product_id}/images`
                                                  - type: code
                                                    data: |-
                                                      {
                                                        "is_thumbnail": true,
                                                        "sort_order": 1,
                                                        "description": "Top View",
                                                        "image_url": "https://upload.wikimedia.org/wikipedia/commons/7/7f/Anglel_Bless_Legendary_Hills_1_m%C4%9Bs%C3%ADc_st%C3%A1%C5%99%C3%AD.jpg"
                                                      }
                                              - title: 'POST /v2/products/{product_id}/images'
                                                blocks:
                                                  - type: text
                                                    data: >-
                                                      ### Create V2 Product with Images


                                                      1. Create a product using: `POST
                                                      /v2/products`

                                                      2. Add images using: `POST
                                                      /v2/products/{product_id}/images`


                                                      **Only accepts form data.**
                                                  - type: code
                                                    data: |-
                                                      curl -X POST \
                                                        https://api.bigcommerce.com/stores/{store_hash}/v2/products/{product_id}/images \
                                                        -H 'Accept: application/json' \
                                                        -H 'Cache-Control: no-cache' \
                                                        -H 'Content-Type: application/json' \
                                                        -H 'Postman-Token: 841f5f9a-244b-4d2c-900f-938ac2067a4a' \
                                                        -H 'X-Auth-Client: {X-Auth-Client}' \
                                                        -H 'X-Auth-Token: {X-Auth-Token}' \
                                                        -H 'content-type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW' \
                                                        -F image_file=@/Users/{user_name}/Documents/product_images/image_file.png
                                                    config:
                                                      mode: http
                                    - title: Create Product with Videos
                                      blocks:
                                        - type: tabs
                                          data:
                                            children:
                                              - title: 'POST /v3/catalog/products/{{id}}/videos'
                                                blocks:
                                                  - type: text
                                                    data: >-
                                                      ### Create V3 Product with Videos


                                                      1. Create a product using: `POST
                                                      /v3/catalog/products`

                                                      2. Add video using: `POST
                                                      /v3/catalog/products/{{id}}/videos`
                                                  - type: code
                                                    data: |-
                                                      {
                                                        "title": "Your Video",
                                                        "description": "Company Values",
                                                        "sort_order": 1,
                                                        "type": "youtube",
                                                        "video_id": "123345AA"
                                                      }
                                                    config:
                                                      mode: json
                                              - title: 'POST /v2/products/{{id}}/videos'
                                                blocks:
                                                  - type: text
                                                    data: >-
                                                      ### Create V2 Product with Videos


                                                      1. Create a product using: `POST
                                                      /v2/products`

                                                      2. Add video using: `POST
                                                      /v2/products/{{id}}/videos`
                                                  - type: code
                                                    data: |-
                                                      {
                                                        "url": "https://www.youtube.com/watch?v=4wZ3ZG_Wams"
                                                      }
                                                    config:
                                                      mode: json
                          - title: Stock Levels
                            blocks:
                              - type: tabs
                                data:
                                  children:
                                    - title: Update Stock Levels
                                      blocks:
                                        - type: tabs
                                          data:
                                            children:
                                              - title: 'PUT /v3/catalog/products/{id}'
                                                blocks:
                                                  - type: text
                                                    data: >-
                                                      ### Request Update V3 Product Stock
                                                      Levels

                                                      * For a simple product
                                                  - type: code
                                                    data: |

                                                      {
                                                        "inventory_level": 100,
                                                        "inventory_warning_level": 10
                                                      }
                                                    config:
                                                      mode: json
                                              - title: 'PUT /v2/products/{id}'
                                                blocks:
                                                  - type: text
                                                    data: >-
                                                      ### Request Update V2 Product Stock
                                                      Levels

                                                      * For a simple product
                                                  - type: code
                                                    data: |-
                                                      {
                                                        "inventory_level": 15,
                                                        "inventory_warning_level": 5,
                                                      }
                                    - title: Update Stock Levels on Variant/SKU
                                      blocks:
                                        - type: tabs
                                          data:
                                            children:
                                              - title: >-
                                                  PUT
                                                  /v3/catalog/products/{id}/variants/{id}
                                                blocks:
                                                  - type: text
                                                    data: |-
                                                      ### Update V3 Variant Stock Level
                                                      * For a single variant
                                                  - type: code
                                                    data: |-
                                                      {
                                                        "inventory_level": 100,
                                                        "inventory_warning_level": 10
                                                      }
                                              - title: 'PUT /v2/products/{id}/skus/{id}'
                                                blocks:
                                                  - type: text
                                                    data: |-
                                                      ### Update V2 SKU Level
                                                      * For a single sku
                                                  - type: code
                                                    data: |2-
                                                        {
                                                          "inventory_level": 100,
                                                          "inventory_warning_level": 10,
                                                          "id": 388,
                                                          "sku": "SKU-4484A834"
                                                        }
                                    - title: >-
                                        Update Stock Levels on Multiple
                                        Variants/SKU
                                      blocks:
                                        - type: tabs
                                          data:
                                            children:
                                              - title: 'PUT /v3/catalog/products/{id}'
                                                blocks:
                                                  - type: text
                                                    data: '### Update V3 Multiple Stock Levels'
                                                  - type: code
                                                    data: |-
                                                      [
                                                      {
                                                        "inventory_level": 100,
                                                        "inventory_warning_level": 10,
                                                        "id": 388,
                                                        "sku": "SKU-4484A834"
                                                      },
                                                        {
                                                        "inventory_level": 100,
                                                        "inventory_warning_level": 10,
                                                        "id": 389,
                                                        "sku": "SKU-9E932372"
                                                      }
                                                      ]
                                                    config:
                                                      mode: json
                                              - title: 'PUT /v2/products/{id}/skus/{id}'
                                                blocks:
                                                  - type: text
                                                    data: |-
                                                      ### Update V2 Multiple Stock Levels
                                                      * A request must be sent for each SKU
                                                  - type: code
                                                    data: |-
                                                      {
                                                        "inventory_level": 100,
                                                        "inventory_warning_level": 10
                                                      }
                          - title: Complex Products
                            blocks:
                              - type: tabs
                                data:
                                  children:
                                    - title: Create Product with Variants/SKU
                                      blocks:
                                        - type: tabs
                                          data:
                                            children:
                                              - title: POST /v3/catalog/products
                                                blocks:
                                                  - type: text
                                                    data: '### Create a V3 Product with Variants'
                                                  - type: code
                                                    data: |-
                                                      {
                                                        "name": "BigCommerce Coffee Mug",
                                                        "price": "10.00",
                                                        "categories": [
                                                          23,
                                                          21
                                                        ],
                                                        "weight": 4,
                                                        "type": "physical",
                                                        "variants": [
                                                          {
                                                            "sku": "SKU-BLU",
                                                            "option_values": [
                                                              {
                                                                "option_display_name": "Mug Color",
                                                                "label": "Blue"
                                                              }
                                                            ]
                                                          },
                                                          {
                                                            "sku": "SKU-GRAY",
                                                            "option_values": [
                                                              {
                                                                "option_display_name": "Mug Color",
                                                                "label": "Gray"
                                                              }
                                                            ]
                                                          }
                                                        ]
                                                      }
                                              - title: V2 Scenarios
                                                blocks:
                                                  - type: text
                                                    data: >-
                                                      ### Create V2 Products with SKU's


                                                      When using the V2 Products API to make
                                                      product options and option sets. The
                                                      simplest workflow is when starting from
                                                      scratch is below:


                                                      1. Create an Option (in this example
                                                      Size)

                                                      2. Add option values

                                                      3. Add the options created in step 1 to
                                                      the option set

                                                      4. Create an Option Set

                                                      5. Add options created in step 1 and
                                                      step 2 to the option set.

                                                      6. Assign the option set to the product

                                                      7. Assign SKU's to the Options on the
                                                      product
                                                  - type: text
                                                    data: >-
                                                      This will only create an option with no
                                                      values added.
                                                  - type: code
                                                    data: |
                                                      {
                                                        "name": "Size",
                                                        "display_name": "T-Shirt Size",
                                                        "type": "RT"
                                                      }
                                                    header:
                                                      title: Create an Option
                                                      subtitle: POST /v2/option_sets
                                                  - type: text
                                                    data: >-
                                                      This will add values such as small,
                                                      medium and large. Only one value at a
                                                      time can be created. In this example it
                                                      will take 3 seperate /POST requests to
                                                      create all sizes.
                                                  - type: code
                                                    data: |-
                                                      {
                                                        "label": "Medium",
                                                        "sort_order": 1,
                                                        "value": "Medium",
                                                        "is_default": false
                                                      }
                                                    header:
                                                      title: Add option values
                                                      subtitle: 'POST /v2/options/{option_id}/values'
                                                  - type: text
                                                    data: >-
                                                      After the option with values has been
                                                      created, a option set needs to be
                                                      created so the option and values created
                                                      in the previous steps can be added to
                                                      it. 
                                                  - type: code
                                                    data: "{\n\t\"name\": \"T-Shirt Sizes BigCommerce\"\n}"
                                                    header:
                                                      title: Create Option Set
                                                      subtitle: POST /v2/optionsets
                                                  - type: code
                                                    data: "{\n\t\"option_id\":88\n}"
                                                    header:
                                                      title: Add the T-Shirt Size Options to Set
                                                      subtitle: 'POST /optionsets/{option_set_id}/options'
                                                  - type: text
                                                    data: >-
                                                      To assign the option set to a product,
                                                      do a /PUT request aganist the product
                                                      and update the `option_set_id` field. 
                                                  - type: code
                                                    data: "{\n\t\"option_set_id\": 60\n}"
                                                    header:
                                                      title: Assign the Option Set to the Product
                                                      subtitle: 'PUT /v2/products/{product_id}'
                                                  - type: text
                                                    data: >-
                                                      To create the SKU's first you need the
                                                      `option_value_id`. Sent a /GET to 

                                                      `optionsets/{option_set_id}/options` .


                                                      ```

                                                      {
                                                          "id": 119,
                                                          "option_id": 88,
                                                          "option_set_id": 60,
                                                          "display_name": "T-Shirt Size",
                                                          "sort_order": 0,
                                                          "is_required": false,
                                                          "option": {
                                                              "url": "https://api.bigcommerce.com/stores/{store_hash}/v2/options/88",
                                                              "resource": "/options/88"
                                                          },
                                                          "values": [
                                                              {
                                                                  "label": "Small",
                                                                  "sort_order": 0,
                                                                  "value": "Small",
                                                                  "is_default": false,
                                                                  "option_value_id": 192
                                                              },
                                                              {
                                                                  "label": "Medium",
                                                                  "sort_order": 1,
                                                                  "value": "Medium",
                                                                  "is_default": false,
                                                                  "option_value_id": 193
                                                              },
                                                              {
                                                                  "label": "Large",
                                                                  "sort_order": 2,
                                                                  "value": "Large",
                                                                  "is_default": false,
                                                                  "option_value_id": 194
                                                              }
                                                          ]
                                                      }

                                                      ```


                                                      The `product_option_id` is also
                                                      required.

                                                      `/v2/products/{product_id}/options`. 


                                                      Each size will need a seperate POST to
                                                      create all the SKU's.
                                                  - type: code
                                                    data: "{\n\t\"sku\": \"SMALL-1\",\n\t\"options\":[\n\t\t{\n\t\t\t\"product_option_id\": 223,\n\t\t\t\"option_value_id\": 192\n\t\t}\n\t]\n}"
                                                    header:
                                                      title: Add Product SKU
                                                      subtitle: 'POST /v2/products/{product_id}/skus'
                                    - title: >-
                                        Create a Product with Variants &
                                        Modifiers
                                      blocks:
                                        - type: tabs
                                          data:
                                            children:
                                              - title: ' POST /v3/catalog/products/{product_id}/modifiers'
                                                blocks:
                                                  - type: text
                                                    data: >-
                                                      ### Create Modifier V#


                                                      This examples uses a checkbox which is
                                                      created in two steps. 
                                                  - type: code
                                                    data: |-
                                                      {
                                                        "type": "checkbox",
                                                        "required": false,
                                                        "config": {
                                                          "default_value": "Yes",
                                                          "checked_by_default": false,
                                                          "checkbox_label": "Check for Donation"
                                                        },
                                                        "display_name": "Add a $5 Donation"
                                                      }
                                                    header:
                                                      title: Create Modifier
                                                      subtitle: >-
                                                        POST
                                                        /v3/catalog/products/{product_id}/modifiers
                                                  - type: code
                                                    data: |-
                                                      {
                                                        "is_default": false,
                                                        "adjusters": {
                                                          "price": {
                                                            "adjuster": "relative",
                                                            "adjuster_value": 5
                                                          }
                                                        }
                                                      }
                                                    header:
                                                      title: Update Modifier Values
                                                      subtitle: >-
                                                        PUT
                                                        /v3/catalog/products/{product_id}/modifiers/{modifier_id}/values
                                              - title: V2 Modifier
                                                blocks:
                                                  - type: text
                                                    data: >-
                                                      ### Create Modifiers V2


                                                      * Modifiers are considered an option on
                                                      V2. They can be assigned a SKU or not. 

                                                      * They follow the same steps as Create
                                                      Product with Variants/SKU


                                                      1. Create an Option (in this example
                                                      Size)

                                                      2. Add option values

                                                      3. Add the options created in step 1 to
                                                      the option set

                                                      4. Create an Option Set

                                                      5. Add options created in step 1 and
                                                      step 2 to the option set.

                                                      6. Assign the option set to the product.
                                    - title: >-
                                        Create a Product with Rules/Complex
                                        Rules
                                      blocks:
                                        - type: tabs
                                          data:
                                            children:
                                              - title: >-
                                                  POST
                                                  /v3/catalog/products/{product_id}/complex-rules
                                                blocks:
                                                  - type: text
                                                    data: >-
                                                      ### Complex Rules V3

                                                      * They are not recommened for V3
                                                      products since they can be created at
                                                      the variant level. See Complex Rules for
                                                      more information
                                                  - type: code
                                                    data: |-
                                                      {
                                                        "product_id": 1200,
                                                        "enabled": true,
                                                        "price_adjuster": {
                                                          "adjuster_value": 10
                                                        },
                                                        "conditions": [
                                                          {
                                                            "modifier_id": 506,
                                                            "modifier_value_id": 852
                                                          },
                                                          {
                                                            "modifier_id": 507,
                                                            "modifier_value_id": 854
                                                          }
                                                        ]
                                                      }
                                                    header: {}
                                              - title: '/v2/products/{product_id}/rules'
                                                blocks:
                                                  - type: text
                                                    data: >+
                                                      ### Add a Complex Rule


                                                      * A complex rule can not be added
                                                      without an option


                                                      The example below add's a complex rule
                                                      to increase the price by $5 if the
                                                      checkbox is selected.


                                                      ```

                                                      {
                                                          "id": 89,
                                                          "product_id": null,
                                                          "name": "Checkbox",
                                                          "display_name": "$5 for Insurance",
                                                          "type": "C",
                                                          "values": {
                                                              "url": "https://api.bigcommerce.com/stores/{store_hash}/v2/options/89/values",
                                                              "resource": "/options/89/values"
                                                          }
                                                      }

                                                      ```

                                                  - type: code
                                                    data: "{\n        \"price_adjuster\": {\n            \"adjuster\": \"relative\",\n            \"adjuster_value\": 5\n        },\n      \"conditions\": [\n\t\t    {\n\t\t      \"product_option_id\": 89,\n\t\t      \"option_value_id\": 195\n\t\t    }\n\t\t  ]\n}\n"
                                                    header:
                                                      subtitle: 'POST /v2/products/{product_id}/rules'
                                                      title: Add Product Rule
                      header: {}
        - title: V2 Catalog Products
          route:
            path: /v2-catalog-products
          data:
            children:
              - title: SKU
                route:
                  path: /v2-product-sku
                data:
                  blocks:
                    - type: html
                      data: "<h1>Product SKU</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#v2-sku_object-properties\">Object Properties</a></li>\n\t\t<li><a href=\"#v2-sku_list-product-sku\">List Product SKU</a></li>\n\t\t<li><a href=\"#v2-sku_get-product-sku\">Get Product SKU</a></li>\n    <li><a href=\"#v2-sku_get-count-sku\">Get a Count of Product SKUs</a></li>\n    <li><a href=\"#v2-sku_create-product-sku\">Create Product SKU</a></li>\n    <li><a href=\"#v2-sku_update-product-sku\">Update Product SKU</a></li>\n    <li><a href=\"#v2-sku_delete-product-sku\">Delete a Product SKU</a></li>\n    <li><a href=\"#v2-sku_delete-multiple-product-sku\">Delete Multiple Product SKUs</a></li>\n\t\t</ul>\n</div>"
                    - type: text
                      data: >
                        ## SKUs 


                        Stock Keeping Unit identifiers associated with products
                        or product options.


                        ### SKU Object – Properties 


                        | Name | Type | Description |

                        | --- | --- | --- |

                        | id | int | |

                        | product_id | int | |

                        | sku | string | The unique SKU (stock keeping unit). |

                        | price | decimal | This SKU's base price on the
                        storefront. If this value is null, the product's default
                        price (set in the Product resource's `price` field) will
                        be used as the base price. |

                        | adjusted_price | decimal | The SKU's price on the
                        storefront – after the product's base price is
                        inherited, and/or any option set or any product rules
                        are applied. This property is READ-ONLY. |

                        | cost_price | decimal | The product's cost price. |

                        | upc | string | The UPC (Universal Product Code) for
                        this product combination. |

                        | inventory_level | int | The inventory level for the
                        product. |

                        | inventory_warning_level | int | The inventory warning
                        level for the product .|

                        | bin_picking_number | string | The BIN picking number.
                        |

                        | weight | decimal | This SKU's base weight on the
                        storefront. If this value is null, the product's default
                        weight (set in the Product resource's weight field) will
                        be used as the base weight. |

                        | adjusted_weight | decimal | This SKU's weight on the
                        storefront – after the product's base weight is
                        inherited, and/or any option set or any product rules
                        are applied. This property is READ-ONLY. |

                        | is_purchasing_disabled | boolean | if true, this
                        prohibits purchasing of the SKU. | 

                        | purchasing_disabled_message | string | The message to
                        display if purchasing is disabled on this SKU. | 

                        | image_file | string | The image that will be displayed
                        when this SKU is selected on the storefront. When
                        updating a SKU image, send the publicly accessible URL.
                        Supported image formats are JPEG, PNG, and GIF. | 

                        | options | object_array | This is an object
                        {"product_option_id": int, "option_value_id":int} |
                      header:
                        anchor: v2-sku_object-properties
                    - type: text
                      data: >-
                        ## List Product SKUs 


                        Gets the collection of SKUs associated with a product.


                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/skus`


                        ### Notes 


                        BigCommerce has updated the SKU schema to include
                        additional price, weight, image, and purchasable
                        properties. We will eventually remove the ability to
                        manage these properties via SKU rules. (Merchants are
                        already constrained from creating SKU-only rules in the
                        BigCommerce control panel.)


                        ### Filters 


                        Filter parameters can be added to the URL query string
                        to select specific skus in the collection.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | min_id | int |
                        /api/v2/products/{product_id}/skus?min_id={value} |

                        | max_id | int |
                        /api/v2/products/{product_id}/skus?max_id={value} |

                        | sku | string |
                        /api/v2/products/{product_id}/skus?sku={value} |

                        | upc | string |
                        /api/v2/products/{product_id}/skus?upc={value} |

                        | inventory_level | string |
                        /api/v2/products/{product_id}/skus?inventory_level={value}
                        |

                        | inventory_warning_level | string |
                        /api/v2/products/{product_id}/skus?inventory_warning_level={value}
                        |

                        | bin_picking_number | string |
                        /api/v2/products/{product_id}/skus?bin_picking_number={value}
                        |

                        | min_inventory_level | int |
                        /api/v2/products/{product_id}/skus?min_inventory_level={value}
                        |

                        | max_inventory_level | int |
                        /api/v2/products/{product_id}/skus?max_inventory_level={value}
                        |

                        | is_low_inventory | boolean |
                        /api/v2/products/{product_id}/skus?is_low_inventory={value}
                        |

                        | product_hash | int |
                        /api/v2/products/{product_id}/skus?product_hash={value}
                        |


                        #### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 skus are returned by
                        default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | page | int |
                        /api/v2/products/{product_id}/skus?page={number} |

                        | limit | int |
                        /api/v2/products/{product_id}/skus?limit={count} |


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": 1,
                            "product_id": 5,
                            "sku": "MB-1",
                            "price": null,
                            "adjusted_price": "1.5000",
                            "cost_price": "0.0000",
                            "upc": "",
                            "inventory_level": 0,
                            "inventory_warning_level": 0,
                            "bin_picking_number": "",
                            "weight": null,
                            "adjusted_weight": "0.00",
                            "is_purchasing_disabled": false,
                            "purchasing_disabled_message": "",
                            "image_file": "",
                            "options": [
                              {
                                "product_option_id": 15,
                                "option_value_id": 17
                              },
                              {
                                "product_option_id": 16,
                                "option_value_id": 28
                              }
                            ]
                          },
                          {
                            "id": 2,
                            "product_id": 5,
                            "sku": "MB-2",
                            "price": null,
                            "adjusted_price": "2.0000",
                            "cost_price": "0.0000",
                            "upc": "",
                            "inventory_level": 0,
                            "inventory_warning_level": 0,
                            "bin_picking_number": "",
                            "weight": null,
                            "adjusted_weight": "0.00",
                            "is_purchasing_disabled": true,
                            "purchasing_disabled_message": "We're sorry, this is unavailable.",
                            "image_file": "",
                            "options": [
                              {
                                "product_option_id": 15,
                                "option_value_id": 18
                              },
                              {
                                "product_option_id": 16,
                                "option_value_id": 26
                              }
                            ]
                          }
                        ]

                        ```
                      header:
                        anchor: v2-sku_list-product-sku
                    - type: text
                      data: >-
                        ## Get a Product SKU 


                        Gets a single product SKU.


                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/skus/{id}`



                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 5,
                          "product_id": 7,
                          "sku": "MBA-1atest",
                            "price": null,
                            "adjusted_price": "1.5000",
                          "cost_price": "0.0000",
                          "upc": "",
                          "inventory_level": 0,
                          "inventory_warning_level": 0,
                          "bin_picking_number": "",
                            "weight": null,
                            "adjusted_weight": "0.00",
                            "is_purchasing_disabled": false,
                            "purchasing_disabled_message": "",
                            "image_file": "https://thinglust.com/eyecandy.png",
                          "options": [
                            {
                              "product_option_id": 20,
                              "option_value_id": 51
                            }
                          ]
                        }

                        ```
                      header:
                        anchor: v2-sku_get-product-sku
                    - type: text
                      data: |-
                        ### Get a Count of Product SKUs 

                        Gets a count of the number of product SKUs in the store.

                        *   OAuth
                        >`GET /stores/{store_hash}/v2/products/skus/count`
                        *   Basic Auth
                        >`GET /api/v2/products/skus/count`

                        ### Response 

                        Example JSON returned in the response:

                        ```
                        {
                          "count": 1235
                        }
                        ```
                      header:
                        anchor: v2-sku_get-count-sku
                    - type: text
                      data: >-
                        ### Create a Product SKU 


                        Creates a new product SKU.


                        *   OAuth

                        >`POST
                        /stores/{store_hash}/v2/products/{product_id}/skus`



                        ### Read-only Properties 


                        The following properties of the sku are read-only. If
                        one or more of these properties are included in the
                        request, it will be rejected.


                        *   id

                        *   product_id

                        *   adjusted_price

                        *   adjusted_weight


                        ### Requirements 


                        The following properties of the sku are required. The
                        request won’t be fulfilled unless these properties are
                        valid.


                        *   sku

                        *   options


                        ### Notes 


                        To maximize system performance, BigCommerce caps the
                        number of SKUs associated with a product at 500. If you
                        attempt to add a SKU to a product that has 500 SKUs,
                        BigCommerce will return a 403 error.


                        BigCommerce has updated the SKU schema to include
                        additional price, weight, image, and purchasable
                        properties. We will eventually remove the ability to
                        manage these properties via SKU rules. (Merchants are
                        already constrained from creating SKU-only rules in the
                        BigCommerce control panel.)


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 5,
                          "product_id": 7,
                          "sku": "MBA-1atest",
                            "price": null,
                            "adjusted_price": "1.5000",
                          "cost_price": "0.0000",
                          "upc": "",
                          "inventory_level": 0,
                          "inventory_warning_level": 0,
                          "bin_picking_number": "",
                            "weight": null,
                            "adjusted_weight": "0.00",
                            "is_purchasing_disabled": false,
                            "purchasing_disabled_message": "",
                            "image_file": "",
                          "options": [
                            {
                              "product_option_id": 20,
                              "option_value_id": 51
                            }
                          ]
                        }

                        ```
                      header:
                        anchor: v2-sku_create-product-sku
                    - type: text
                      data: >-
                        ## Update a Product SKU 


                        Updates an existing product SKU.



                        >`PUT
                        /stores/{store_hash}/v2/products/{product_id}/skus/{id}`



                        ### Read-only Properties 


                        The following properties of the sku are read-only. If
                        one or more of these properties are included in the
                        request, it will be rejected.


                        *   id

                        *   product_id

                        *   adjusted_price

                        *   adjusted_weight


                        ### Requirements 


                        There are no required properties for updating a product
                        SKU.


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 5,
                          "product_id": 7,
                          "sku": "MBA-1atest",
                            "price": "4.9900",
                            "adjusted_price": "3.9900",
                          "cost_price": "2.9900",
                          "upc": "",
                          "inventory_level": 0,
                          "inventory_warning_level": 0,
                          "bin_picking_number": "",
                            "weight": null,
                            "adjusted_weight": "0.00",
                            "is_purchasing_disabled": true,
                            "purchasing_disabled_message": "We're sorry, this is unavailable.",
                            "image_file": "",
                          "options": [
                            {
                              "product_option_id": 20,
                              "option_value_id": 51
                            }
                          ]
                        }

                        ```
                      header:
                        anchor: v2-sku_update-product-sku
                    - type: text
                      data: >-
                        ## Delete a Product SKU 


                        Deletes a product SKU.


                        >`DELETE
                        /stores/{store_hash}/v2/products/{product_id}/skus/{id}`
                      header:
                        anchor: v2-sku_delete-product-sku
                    - type: text
                      data: >-
                        ## Delete Multiple Product SKUs 


                        Deletes multiple product SKUs.



                        >`DELETE
                        /stores/{store_hash}/v2/products/{product_id}/skus`


                        ### Filters 


                        Filter parameters can be added to the URL query string
                        to select specific SKUs in the collection.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | min_id | int |
                        /api/v2/products/{product_id}/skus?min_id={value} |

                        | max_id | int |
                        /api/v2/products/{product_id}/skus?max_id={value} |

                        | sku | string |
                        /api/v2/products/{product_id}/skus?sku={value} |

                        | upc | string |
                        /api/v2/products/{product_id}/skus?upc={value} |

                        | inventory_level | string |
                        /api/v2/products/{product_id}/skus?inventory_level={value}
                        |

                        | inventory_warning_level | string |
                        /api/v2/products/{product_id}/skus?inventory_warning_level={value}
                        |

                        | bin_picking_number | string |
                        /api/v2/products/{product_id}/skus?bin_picking_number={value}
                        |

                        | min_inventory_level | int |
                        /api/v2/products/{product_id}/skus?min_inventory_level={value}
                        |

                        | max_inventory_level | int |
                        /api/v2/products/{product_id}/skus?max_inventory_level={value}
                        |

                        | is_low_inventory | boolean |
                        /api/v2/products/{product_id}/skus?is_low_inventory={value}
                        |

                        | product_hash | int |
                        /api/v2/products/{product_id}/skus?product_hash={value}
                        |


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 skus are returned by
                        default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | page | int |
                        /api/v2/products/{product_id}/skus?page={number} |

                        | limit | int |
                        /api/v2/products/{product_id}/skus?limit={count} |
                      header:
                        anchor: v2-sku_delete-multiple-product-sku
              - title: Videos
                route:
                  path: /v2-product-videos
                data:
                  blocks:
                    - type: html
                      data: "<h1>Product Videos</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#v2-video_object-properties\">Object Properties</a></li>\n\t\t<li><a href=\"#v2-video_list-product-videos\">List Product SKU</a></li>\n\t\t<li><a href=\"#v2-sku_get-product-video\">Get Product Video</a></li>\n    <li><a href=\"#v2-video_get-count-video\">Get a Count of Product Videos</a></li>\n    <li><a href=\"#v2-video_create-product-video\">Create Product Video</a></li>\n    <li><a href=\"#v2-video_update-product-video-metadata\">Update Product Video Metadata</a></li>\n    <li><a href=\"#v2-video_delete-product-video\">Delete a Product Video</a></li>\n    <li><a href=\"#v2-video_delete-all-product-video\">Delete All Product Videos</a></li>\n\t\t</ul>\n</div>"
                    - type: text
                      data: |-
                        ## Videos 

                        Embedded videos displayed on product listings.

                        ### Videos Object – Properties 

                        | Name | Type | Description |
                        | --- | --- | --- |
                        | id | string | ID of this video. |
                        | product_id | int | ID of the associated product. |
                        | sort_order | int | Sort order for this video. |
                        | name | string | Name for this video. |
                      header:
                        anchor: v2-video_object-properties
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## List Product Videos 


                        Gets the videos associated with a product.


                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/videos`



                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 `product_videos` are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | page | int |
                        /api/v2/products/{product_id}/videos?page={number} |

                        | limit | int |
                        /api/v2/products/{product_id}/videos?limit={count} |


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": "UmhvxsOwhqk",
                            "product_id": 30,
                            "sort_order": 0,
                            "name": "X-Men Evolution: Season 1, Episode 1"
                          }
                        ]

                        ```
                      header:
                        anchor: v2-video_list-product-videos
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Product Video 


                        Gets a product video.


                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/videos/{id}`
                      header:
                        anchor: v2-sku_get-product-video
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Count of Product Videos 


                        Gets a count of the number of product videos in the
                        store.


                        >`GET /stores/{store_hash}/v2/products/videos/count`



                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "count": 0
                        }

                        ```
                      header:
                        anchor: v2-video_get-count-video
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create a Product Video 


                        Adds a link to a YouTube video to a product.


                        >`POST
                        /stores/{store_hash}/v2/products/{product_id}/videos`



                        ### Read-only Properties 


                        The following properties of the product video are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   id

                        *   product_id


                        ### Requirements 


                        The following properties of the product video are
                        required. The request won’t be fulfilled unless these
                        properties are valid.


                        *   url


                        ### Notes 


                        Only YouTube videos are supported. To create a new
                        video, pass the full `url` in the request body.


                        ### Request 


                        Example request object:


                        ```

                        {
                          "url": "https://www.youtube.com/watch?v=4wZ3ZG_Wams"
                        }

                        ```
                      header:
                        anchor: v2-video_create-product-video
                    - type: text
                      data: >-
                        ## Update Product Video Metadata 


                        Edit the metadata of a product video.


                        >`PUT
                        /stores/{store_hash}/v2/products/{product_id}/videos/{id}`



                        ### Read-only Properties 


                        The following properties of the product video are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   id

                        *   product_id


                        ### Requirements 


                        There are no required properties when updating a product
                        video. 


                        ### Notes 


                        The `name`, `sort_order` and `url` properties of the
                        product video are editable.


                        Posting a new `url` will update the `id` of the video to
                        reference the new video.


                        ### Request 


                        Example request object:


                        ```

                        {
                          "name": "New video title",
                          "sort_order": 2
                        }

                        ```
                      header:
                        anchor: v2-video_update-product-video-metadata
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete a Product Video 


                        Delete a product video.


                        >`DELETE
                        /stores/{store_hash}/v2/products/{product_id}/videos/{id}`
                      header:
                        anchor: v2-video_delete-product-video
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete All Product Videos 


                        Deletes all videos belonging to a product.


                        >`DELETE
                        /stores/{store_hash}/v2/products/{product_id}/videos`
                      header:
                        anchor: v2-video_delete-all-product-video
              - title: Product Rules
                route:
                  path: /v2-product-rules
                data:
                  blocks:
                    - type: html
                      data: "<h1>Product Rules</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#v2-rule_object-properties\">Object Properties</a></li>\n\t\t<li><a href=\"#v2-rule_list-product-rules\">List Product Rules</a></li>\n\t\t<li><a href=\"#v2-rule-product-rule\">Get Product Rules</a></li>\n    <li><a href=\"#v2-rule_get-count-rule\">Get a Count of Product Rules</a></li>\n    <li><a href=\"#v2-rule_create-product-rule\">Create Product Rules</a></li>\n    <li><a href=\"#v2-rule_update-product-rule\">Update Product Rules </a></li>\n    <li><a href=\"#v2-rule_delete-product-rule\">Delete a Product Rule</a></li>\n    <li><a href=\"#v2-rule_delete-all-product-rule\">Delete All Product Rules</a></li>\n\t\t</ul>\n</div>"
                    - type: text
                      data: >
                        ## Product Rules 


                        Rules that modify the properties of a product, such as
                        weight, price, and product image.


                        ### Product Rule Object – Properties 


                        | Name | Type | Description |

                        | --- | --- | --- |

                        | id | int | The ID of the rule. |

                        | product_id | int | The ID of the product to which the
                        rule belongs. |

                        | sort_order | int | The order in which the rule will be
                        displayed on the product page. Lower integers will give
                        the rule a higher priority. If the rule is given a lower
                        priority, then when updating, all rules with a
                        `sort_order` the same or greater than the rule's new
                        `sort_order` value will have their `sort_order`
                        reordered. |

                        | is_enabled | boolean | If set to `true`, the rule will
                        be evaluated when a customer configures a product's
                        options. |

                        | is_stop | boolean | If set to `true` and the rule
                        evaluates to `true`, no more rules with a higher
                        `sort_order` will be processed. |

                        | price_adjuster | object | If a product option rule
                        specifies a change to the price based on an option, the
                        `price_adjuster` object will consist of two name/value
                        pairs. The first pair is named `adjuster` and contains
                        one of the following values: `relative`, `percentage`,
                        or `absolute`. The `percentage` value causes the price
                        to vary based on either a positive or negative
                        percentage. The `relative` value causes the price to
                        vary by either a positive or negative monetary amount.
                        The `absolute` value resets the price, so it should
                        always be a positive number. The second pair is named
                        `adjuster_value` and contains a decimal value
                        representing one of the following: the amount to add or
                        subtract from the price, the percentage by which the
                        price should change, or the new price (as per the
                        `adjuster` setting). If the product option rule does not
                        specify a change to the price based on size or color,
                        `price_adjuster` will be null. |

                        | weight_adjuster | object | If a product option rule
                        specifies a change to the weight based on an option, the
                        `weight_adjuster` object will consist of two name/value
                        pairs. The first pair is named `adjuster` and contains
                        one of the following values: `relative` or `absolute`.
                        The `relative` value causes the weight to vary by either
                        a positive or negative amount. The `absolute` value
                        resets the weight, so it should always be a positive
                        number. The second pair is named `adjuster_value` and
                        contains a decimal value representing one of the
                        following: the amount to add or subtract from the weight
                        or the new weight (as per the `adjuster` setting). If
                        the product option rule does not specify a change to the
                        price based on size or color, `weight_adjuster` will be
                        null. |

                        | is_purchasing_disabled | boolean | If true this rule
                        prohibits purchasing the product with the configured
                        option values. |

                        | purchasing_disabled_message | string | The message to
                        display if the rule disabled purchasing the product. |

                        | is_purchasing_hidden | boolean | If true the rule
                        hides the options on the product. Setting this to true
                        has no effect if the rule is based on an SKU or has
                        conditions from multiple product options. |

                        | image_file | string | When specifying a product rule,
                        the image_file should be specified as either: A path to
                        an rule already uploaded via FTP in the import directory
                        and the path should be relative from the import
                        directory. It can be a URL to an rule accessible on the
                        internet. |

                        | conditions | array | The conditions array can contain
                        one or more objects. Each object inside the array
                        contains three name/value pairs, but at least one value
                        will be missing at any given time. If a
                        `product_option_id` value is present, then a
                        `option_value_id` must also be present. If
                        `product_option_id` and `option_value_id` values are
                        present, then a `sku_id` value must not be present. This
                        also holds true in the reverse, where if a `sku_id`
                        value exists, values for the `product_option_id` and
                        `option_value_id` cannot exist. NOTE: if you can use a
                        SKU value, this is preferred for simplicity. Empty
                        values are represented as `null`. If multiple objects
                        are included in the array, the software runs through
                        them using an AND/OR logic. Objects with identical
                        `product_option_id` values will be linked with an OR.
                        Objects with different `product_option_id` values will
                        be linked with an AND. When one object contains a
                        `sku_id` value and the other contains
                        `product_option_id` and `option_value_id` values, they
                        will be linked with an AND. Two objects which both
                        contain `sku_id` values will be linked with an OR. |
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## List Product Rules 


                        Gets the collection of rules associated with a product.
                        (Default sorting is by rule id, from lowest to highest.)



                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/rules`



                        ### Filters 


                        There are no filter parameters specific to product
                        rules.


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 product_rules are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | page | int |
                        /api/v2/products/{product_id}/rules?page={number} |

                        | limit | int |
                        /api/v2/products/{product_id}/rules?limit={count} |


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": 1,
                            "product_id": 3,
                            "sort_order": 0,
                            "is_enabled": true,
                            "is_stop": false,
                            "price_adjuster": null,
                            "weight_adjuster": null,
                            "is_purchasing_disabled": false,
                            "purchasing_disabled_message": "",
                            "is_purchasing_hidden": false,
                            "image_file": "attribute_rule_images/1_source.jpg",
                            "conditions": [
                              {
                                "product_option_id": 4,
                                "option_value_id": 7,
                                "sku_id": null
                              }
                            ]
                          },
                          {
                            "id": 2,
                            "product_id": 3,
                            "sort_order": 1,
                            "is_enabled": true,
                            "is_stop": false,
                            "price_adjuster": null,
                            "weight_adjuster": null,
                            "is_purchasing_disabled": false,
                            "purchasing_disabled_message": "",
                            "is_purchasing_hidden": false,
                            "image_file": "attribute_rule_images/2_source.jpg",
                            "conditions": [
                              {
                                "product_option_id": 4,
                                "option_value_id": 8,
                                "sku_id": null
                              }
                            ]
                          }
                        ]

                        ```
                      header:
                        anchor: v2-rule_list-product-rules
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Product Rule 


                        Gets a single product rule.



                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/rules/{id}`



                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 2,
                          "product_id": 3,
                          "sort_order": 1,
                          "is_enabled": true,
                          "is_stop": false,
                          "price_adjuster": null,
                          "weight_adjuster": null,
                          "is_purchasing_disabled": false,
                          "purchasing_disabled_message": "",
                          "is_purchasing_hidden": false,
                          "image_file": "attribute_rule_images/2_source.jpg",
                          "conditions": [
                            {
                              "product_option_id": 4,
                              "option_value_id": 8,
                              "sku_id": null
                            }
                          ]
                        }

                        ```
                      header:
                        anchor: v2-rule-product-rule
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Count of Product Rules 


                        Gets a count of the number of product rules in the
                        store.


                        >`GET /stores/{store_hash}/v2/products/rules/count`


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "count": 3
                        }

                        ```
                      header:
                        anchor: v2-rule_get-count-rule
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create a Product Rule 


                        Creates a new product rule.



                        >`POST
                        /stores/{store_hash}/v2/products/{product_id}/rules`




                        ### Read-only Properties 


                        The following properties of the product rule are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   id

                        *   product_id


                        ### Requirements 


                        The following properties of the product rule are
                        required. The request won’t be fulfilled unless these
                        properties are valid.


                        *   conditions


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 10,
                          "product_id": 3,
                          "sort_order": 1,
                          "is_enabled": true,
                          "is_stop": false,
                          "price_adjuster": null,
                          "weight_adjuster": null,
                          "is_purchasing_disabled": false,
                          "purchasing_disabled_message": "",
                          "is_purchasing_hidden": false,
                          "image_file": "attribute_rule_images/2_source.jpg",
                          "conditions": [
                            {
                              "product_option_id": 4,
                              "option_value_id": 8,
                              "sku_id": null
                            }
                          ]
                        }

                        ```
                      header:
                        anchor: v2-rule_create-product-rule
                    - type: text
                      data: '---'
                    - type: text
                      data: >-

                        ## Update a Product Rule 


                        Updates an existing product rule. 


                        ### Notes 


                        If you include a conditions object array, its contents
                        will be appended to any existing conditions. This
                        operation does not overwrite existing conditions.


                        >`PUT
                        /stores/{store_hash}/v2/products/{product_id}/rules/{id}`



                        ### Read-only Properties 


                        The following properties of the product rule are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   id

                        *   product_id


                        ### Requirements 


                        There are no property requirements for updating a
                        product rule.


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 2,
                          "product_id": 3,
                          "sort_order": 2,
                          "is_enabled": true,
                          "is_stop": false,
                          "price_adjuster": null,
                          "weight_adjuster": null,
                          "is_purchasing_disabled": false,
                          "purchasing_disabled_message": "",
                          "is_purchasing_hidden": false,
                          "image_file": "attribute_rule_images/2_source.jpg",
                          "conditions": [
                            {
                              "product_option_id": 4,
                              "option_value_id": 8,
                              "sku_id": null
                            }
                          ]
                        }

                        ```
                      header:
                        anchor: v2-rule_update-product-rule
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete a Product Rule 


                        Deletes a product rule.


                        >`DELETE
                        /stores/{store_hash}/v2/products/{product_id}/rules/{id}`
                      header:
                        anchor: v2-rule_delete-product-rule
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete Multiple Product Rules 


                        Deletes multiple product rules.


                        >`DELETE
                        /stores/{store_hash}/v2/products/{product_id}/rules`


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 `product_rules` are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | page | int |
                        /api/v2/products/{product_id}/rules?page={number} |

                        | limit | int |
                        /api/v2/products/{product_id}/rules?limit={count} 
                      header:
                        anchor: v2-rule_delete-all-product-rule
              - title: Product Reviews
                route:
                  path: /v2-product-reviews
                data:
                  blocks:
                    - type: html
                      data: "<h1>Product Reviews</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#v2-review_object-properties\">Object Properties</a></li>\n\t\t<li><a href=\"#v2-review_list-product-reviews\">List Product Reviews</a></li>\n\t\t<li><a href=\"#v2-review-product-review\">Get Product Reviews</a></li>\n    <li><a href=\"#v2-reviews_create-product-reviews\">Create Product Reviews</a></li>\n    <li><a href=\"#v2-reviews_update-product-reviews\">Update Product Reviews </a></li>\n    <li><a href=\"#v2-reviews_delete-product-reviews\">Delete a Product Reviews</a></li>\n    <li><a href=\"#v2-reviews_delete-all-product-reviews\">Delete All Product Reviews</a></li>\n\t\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Product Reviews 


                        Reviews associated with a product.


                        ### Product Review Object – Properties 


                        | Name | Type | Description |

                        | --- | --- | --- |

                        | id | int | Unique database ID for this product review.
                        Read-only. |

                        | product_id | int | The ID of the product to which this
                        review belongs. Read-only. |

                        | author | string | The review's author, displayed on
                        the storefront. |

                        | date_created | date | RFC 2822 date that specifies the
                        creation time of the review. (If not specified, will use
                        the current time.) |

                        | rating | int | A whole number from 1–5, specifying the
                        product's rating in this review. |

                        | title | string | The review's title, displayed on the
                        storefront. |

                        | review | text | The full text of the review, displayed
                        on the storefront. |

                        | status | int | A status indicator. 0="Pending", 1=
                        "Approved", 2="Disapproved". |
                      header:
                        anchor: v2-review_object-properties
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## List Product Reviews 


                        Gets the reviews associated with a product. (Default
                        sorting is by review id, from lowest to highest.)


                        >`GET /stores/{store_hash}/v2/products/{id}/reviews`


                        ### Filters 


                        There are no filter parameters specific to product
                        reviews. 


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 product_reviews are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | page | int |
                        /api/v2/products/{product_id}/reviews?page={number} |

                        | limit | int |
                        /api/v2/products/{product_id}/reviews?limit={count} |


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": 190,
                            "product_id": 5310,
                            "author": "John Doe",
                            "date_created": "Wed, 12 Dec 2012 06:00:00 +0000",
                            "title": "My experience with the widget",
                            "review": "This widget worked for me, but might not work for everyone.",
                            "rating": 4,
                            "status": 1
                          },
                          {
                            "id": 191,
                            "product_id": 5310,
                            "author": "Jane Doe",
                            "date_created": "Tue, 12 Nov 2013 06:00:00 +0000",
                            "title": "Great product, slow shipping",
                            "review": "Took two weeks to arrive",
                            "rating": 3,
                            "status": 1
                          },
                          {
                            "id": 192,
                            "product_id": 5310,
                            "author": "Jimmy Doe",
                            "date_created": "Fri, 14 Dec 2012 06:00:00 +0000",
                            "title": "Worked for me!",
                            "review": "I thought this product was pretty good",
                            "rating": 5,
                            "status": 1
                          }
                        ]

                        ```
                    - type: text
                      data: '---'
                    - type: text
                      data: >-

                        ## Get a Product Review 


                        Gets a product review.


                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/reviews/{id}`



                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 190,
                          "product_id": 5310,
                          "author": "John Doe",
                          "date_created": "Wed, 12 Dec 2012 06:00:00 +0000",
                          "title": "My experience with the widget",
                          "review": "This widget worked for me, but might not work for everyone.",
                          "rating": 4,
                          "status": 1
                        }

                        ```
                      header:
                        anchor: v2-reviews_get-count-reviews
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create a Product Review 


                        Creates a new product review. 


                        ### Notes 


                        The `review` property is the review's text. The `rating`
                        property must be a whole number between 1–5. If the
                        optional `date_created` property is not specified, it
                        defaults to the current date/time. If the optional
                        "status" property is not specified, it defaults to 0
                        [`Pending`]. Other allowable values are 1 [`Approved`]
                        or 2 [`Disapproved`].)



                        >`POST
                        /stores/{store_hash}/v2/products/{product_id}/reviews`


                        ### Read-only Properties 


                        The following properties of the product review are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   id

                        *   product_id


                        ### Requirements 


                        The following properties of the product review are
                        required. The request won’t be fulfilled unless these
                        properties are valid.


                        *   author

                        *   title

                        *   review

                        *   rating


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 8,
                          "product_id": 32,
                          "author": "Jimmy Doe",
                          "date_created": "Tue, 05 Mar 2013 06:00:00 +0000",
                          "title": "Worked for me!",
                          "review": "I thought this product was pretty good",
                          "rating": 5,
                          "status": 0
                        }

                        ```
                      header:
                        anchor: v2-reviews_create-product-reviews
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Update a Product Review 


                        Updates an existing product review. Your request may
                        update any of the properties that are writeable for the
                        Create (POST) operation.


                        >`PUT
                        /stores/{store_hash}/v2/products/{product_id}/reviews/{id}`


                        ### Read-only Properties 


                        The following properties of the product review are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   id

                        *   product_id


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 8,
                          "product_id": 32,
                          "author": "Jimmy Doe",
                          "date_created": "Tue, 05 Mar 2013 06:00:00 +0000",
                          "title": "Worked for me!",
                          "review": "I thought this product was pretty good",
                          "rating": 5,
                          "status": 1
                        }

                        ```
                      header:
                        anchor: v2-reviews_update-product-reviews
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete a Product Review 


                        Deletes a specified product review. (If successful, this
                        will typically return a `204 No Content`.)


                        >`DELETE
                        /stores/{store_hash}/v2/products/{product_id}/reviews/{id}
                      header:
                        anchor: v2-reviews_delete-product-reviews
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete All Product Reviews 


                        Deletes all reviews for the specified product. (If
                        successful, this will typically return a `204 No
                        Content`.)


                        >`DELETE
                        /stores/{store_hash}/v2/products/{product_id}/reviews`
                      header:
                        anchor: v2-reviews_delete-all-product-reviews
              - title: Product Options
                route:
                  path: /v2-product-options
                data:
                  blocks:
                    - type: html
                      data: "<h1>Product Options</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#v2-options_object-properties\">Object Properties</a></li>\n\t\t<li><a href=\"#v2-review_list-product-reviews\">List Product Options</a></li>\n\t\t<li><a href=\"#v2-review-product-options\">Get Product Options</a></li>\n\t\t</ul>\n</div>"
                    - type: text
                      data: |
                        ## Product Options 

                        ### Product Options Object – Properties 

                        | Title | Name | Type | Description |
                        | --- | --- | --- | --- |
                        | `id` | `int` |
                        | `option_id` | `int` |
                        | `display_name` | `string` |
                        | `sort_order` | `int` |
                        | `is_required` | `boolean` |
                      header:
                        anchor: v2-options_object-properties
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## List Product Options


                        Gets the options associated with a product.


                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/options`


                        ### Pagination


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250\. If a
                        limit isn’t provided, up to 50 product_options are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | `page` | int |
                        `/api/v2/products/{product_id}/options?page={number}` |

                        | `limit` | int |
                        `/api/v2/products/{product_id}/options?limit={count}` |


                        ### Response


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": 13,
                            "option_id": 8,
                            "display_name": "iPod Capacities",
                            "sort_order": 0,
                            "is_required": true
                          },
                          {
                            "id": 14,
                            "option_id": 9,
                            "display_name": "Accessories",
                            "sort_order": 1,
                            "is_required": false
                          }
                        ]

                        ```
                      header:
                        anchor: v2-review_list-product-reviews
                    - type: text
                      data: >-
                        ## Get a Product Option


                        Gets an option associated with a product.



                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/options/{id}`


                        ### Response


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 14,
                          "option_id": 9,
                          "display_name": "Accessories",
                          "sort_order": 1,
                          "is_required": false
                        }

                        ```
                      header:
                        anchor: v2-review-product-options
              - title: Product Images
                route:
                  path: /v2-product-images
                data:
                  blocks:
                    - type: html
                      data: "<h1>Product Images</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#v2-images_object-properties\">Object Properties</a></li>\n\t\t<li><a href=\"#v2-review_list-product-images\">List Product Images</a></li>\n\t\t<li><a href=\"#v2-review-product-images\">Get Product Images</a></li>\n    <li><a href=\"#v2-images_get-count-images\">Get a Count of Product Images</a></li>\n    <li><a href=\"#v2-images_create-product-images\">Create Product Images</a></li>\n    <li><a href=\"#v2-images_update-product-images\">Update Product Images </a></li>\n    <li><a href=\"#v2-images_delete-product-images\">Delete a Product Images</a></li>\n    <li><a href=\"#v2-images_delete-all-product-images\">Delete All Product Images</a></li>\n\t\t</ul>\n</div>/h1"
                    - type: text
                      data: >
                        ## Product Images 


                        Images associated with a product.


                        ### Product Image Object – Properties 


                        | Name | Type | Description |

                        | --- | --- | --- |

                        | id | int |

                        | product_id | int | The ID of the product to which the
                        image belongs. |

                        | image_file | string | When specifying a product image,
                        the `image_file` should be specified as either: a path
                        to an image already uploaded via WebDAV to the import
                        directory (with the path relative to the import
                        directory); or a URL to an image accessible on the
                        internet. |

                        | is_thumbnail | boolean | If true, the image is used as
                        the product's thumbnail. |

                        | sort_order | int | The order in which the image will
                        be displayed on the product page. Lower integers will
                        give the image a higher priority. If the image is given
                        a lower priority, then when updating, all images with a
                        `sort_order` the same or greater than the image's new
                        `sort_order` value will have their `sort_order`
                        reordered. |

                        | description | text | The description for the image |

                        | date_created | date |
                      header:
                        anchor: v2-images_object-properties
                    - type: text
                      data: >-
                        ### List Product Images 


                        Gets the images associated with a product. (Default
                        sorting is by image id, from lowest to highest.)


                        >GET
                        /stores/{store_hash}/v2/products/{product_id}/images



                        ### Filters 


                        There are no filter parameters specific to product
                        images.


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 product_images are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | page | int |
                        /api/v2/products/{product_id}/images?page={number} |

                        | limit | int |
                        /api/v2/products/{product_id}/images?limit={count} |


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": 247,
                            "product_id": 32,
                            "image_file": "sample_images/in_123__14581.jpg",
                            "zoom_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.1280.1280.jpg?c=1",
                            "thumbnail_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.386.513.jpg?c=1",
                            "standard_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.220.290.jpg?c=1",
                            "tiny_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.44.58.jpg?c=1",
                            "is_thumbnail": true,
                            "sort_order": 0,
                            "description": null,
                            "date_created": "Mon, 24 Sep 2012 01:14:30 +0000"
                          },
                          {
                            "id": 248,
                            "product_id": 32,
                            "image_file": "sample_images/in_122__93910.jpg",
                            "zoom_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/248/in_122__93910.1393831046.1280.1280.jpg?c=1",
                            "thumbnail_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/248/in_122__93910.1393831046.386.513.jpg?c=1",
                            "standard_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/248/in_122__93910.1393831046.220.290.jpg?c=1",
                            "tiny_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/248/in_122__93910.1393831046.44.58.jpg?c=1",
                            "is_thumbnail": false,
                            "sort_order": 1,
                            "description": null,
                            "date_created": "Mon, 24 Sep 2012 01:17:14 +0000"
                          }
                        ]

                        ```
                      header:
                        anchor: v2-review_list-product-images
                    - type: text
                      data: ''
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Product Image 


                        Gets a product image.


                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/images/{id}`



                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 248,
                          "product_id": 32,
                          "image_file": "sample_images/in_122__93910.jpg",
                          "zoom_url": "https://cdn.bcapp.dev/bcapp/et7xe3pz/products/32/images/248/in_122__93910.1393831046.1280.1280.jpg?c=1",
                          "thumbnail_url": "https://cdn.bcapp.dev/bcapp/et7xe3pz/products/32/images/248/in_122__93910.1393831046.386.513.jpg?c=1",
                          "standard_url": "https://cdn.bcapp.dev/bcapp/et7xe3pz/products/32/images/248/in_122__93910.1393831046.220.290.jpg?c=1",
                          "tiny_url": "https://cdn.bcapp.dev/bcapp/et7xe3pz/products/32/images/248/in_122__93910.1393831046.44.58.jpg?c=1",
                          "is_thumbnail": false,
                          "sort_order": 1,
                          "description": null,
                          "date_created": "Mon, 24 Sep 2012 01:17:14 +0000"
                        }

                        ```
                      header:
                        anchor: v2-review-product-images
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Count of Product Images 


                        Gets a count of the number of product images in the
                        store.



                        >`GET /stores/{store_hash}/v2/products/images/count`



                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "count": 105
                        }

                        ```
                      header:
                        anchor: v2-images_get-count-images
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create a Product Image 


                        Creates a new product image.


                        >`POST
                        /stores/{store_hash}/v2/products/{product_id}/images`


                        ### Read-only Properties 


                        The following properties of the product image are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   id

                        *   date_created

                        *   product_id


                        ### Requirements 


                        The following properties of the product image are
                        required. The request won’t be fulfilled unless these
                        properties are valid.


                        *   image_file


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 116,
                          "product_id": 29,
                          "image_file": "p/022/astonishing-x-men-1-100k__36562.jpg",
                          "is_thumbnail": false,
                          "sort_order": 0,
                          "description": "",
                          "date_created": "Fri, 21 Dec 2012 18:54:04 +0000"
                        }

                        ```
                      header:
                        anchor: v2-images_create-product-images
                    - type: text
                      data: '---'
                    - type: text
                      data: >-

                        ## Update a Product Image 


                        Updates an existing product image.


                        >`PUT
                        /stores/{store_hash}/v2/products/{product_id}/images/{id}`



                        ### Read-only Properties 


                        The following properties of the product image are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   id

                        *   product_id

                        *   date_created


                        ### Requirements 


                        The following properties of the product image are
                        required. The request won’t be fulfilled unless these
                        properties are valid.


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 118,
                          "product_id": 30,
                          "image_file": "k/392/ud2vk0n1l0zcfr7gtlqi__43888.png",
                          "is_thumbnail": false,
                          "sort_order": 1,
                          "description": "",
                          "date_created": "Fri, 21 Dec 2012 19:01:03 +0000"
                        }

                        ```
                      header:
                        anchor: v2-images_update-product-images
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete a Product Image 


                        Deletes a product image.


                        >`DELETE
                        /stores/{store_hash}/v2/products/{product_id}/images/{id}`
                      header:
                        anchor: v2-images_delete-product-images
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete Multiple Product Images 


                        Deletes multiple product images.


                        >`DELETE
                        /stores/{store_hash}/v2/products/{product_id}/images`


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 `product_images` are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | Page | int |
                        /api/v2/products/{product_id}/images?page={number} |

                        | Limit | int |
                        /api/v2/products/{product_id}/images?limit={count} |
                      header:
                        anchor: v2-images_delete-all-product-images
              - title: Option Values
                route:
                  path: /v2-option-values
                data:
                  blocks:
                    - type: html
                      data: "<h1>Option Values</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#v2-option-values_object-properties\">Object Properties</a></li>\n\t\t<li><a href=\"#v2-option-values_list-option-values\">List Option Values</a></li>\n\t\t<li><a href=\"#v2-option-values-option-values\">Get Option Values</a></li>\n    <li><a href=\"#v2-option-values_create-option-values\">Create Option Values</a></li>\n    <li><a href=\"#v2-option-values_update-option-values\">Update Option Values </a></li>\n    <li><a href=\"#v2-option-values_delete-option-values\">Delete a Option Value</a></li>\n    <li><a href=\"#v2-option-values_delete-all-option-values\">Delete All Option Values</a></li>\n\t\t</ul>\n</div>"
                    - type: text
                      data: >
                        ## Option Values 


                        Values that can be selected for an option.


                        ### Option Value Object – Properties 


                        | Name | Type | Description |

                        | --- | --- | --- |

                        | id | int | A unique, read-only value that identifies
                        this option value. |

                        | option_id | int | A read-only value identifying the
                        option to which this option value is assigned. |

                        | label | string | The name of the label. Cannot be the
                        same as the label of another value already assigned to
                        the option. |

                        | sort_order | int |

                        | value | text | Acceptable values generally depend on
                        the option type, as defined in the option:<br><br> `RB`:
                        string to be displayed to the customer.<br> `RT`: string
                        to be displayed to the customer.<br> `S`: string to be
                        displayed to the customer.<br> `P`: product ID;<br>
                        `PI`: product ID.<br> `CS`: one of the following color
                        values – a hexadecimal color code to create a color
                        option (e.g., `#0f0000`);<br> a CSS 2.1 color name
                        (e.g., `blue`);<br> up to three hexadecimal color codes
                        and/or color names, separated by pipe symbols (e.g.,
                        <code>#FF0000&#124;lime&#124;#0000FF</code>);<br>  a URI
                        to an image to create a texture (e.g.,
                        `http://store.com/images/myimg.png`);<br> or the name of
                        an image file in the store's WebDAV `import` folder 
                        (e.g., `myimg.png`). |

                        | is_default | boolean | Whether or not this value is
                        selected by default. For each option, only one option
                        value can be selected by default. |
                    - type: text
                      data: >
                        ## List Option Values 


                        Gets the values belonging to an option. (Default sorting
                        is by option-value id, from lowest to highest.)


                        >`GET
                        /stores/{store_hash}/v2/options/{option_id}/values`



                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 option_values are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | Page | int |
                        /api/v2/options/{option_id}/values?page={number} |

                        | Limit | int |
                        /api/v2/options/{option_id}/values?limit={count} |


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": 1,
                            "option_id": 3,
                            "label": "Silver",
                            "sort_order": 2,
                            "value": "#cccccc",
                            "is_default": true
                          },
                          {
                            "id": 2,
                            "option_id": 3,
                            "label": "Black",
                            "sort_order": 1,
                            "value": "#000000",
                            "is_default": false
                          }
                        ]

                        ```
                      header:
                        anchor: v2-option-values_list-option-values
                    - type: text
                      data: >-
                        ## Get an Option Value 


                        Gets an option value.



                        >`GET
                        /stores/{store_hash}/v2/options/{option_id}/values/{id}`


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 9,
                          "option_id": 3,
                          "label": "Purple",
                          "sort_order": 3,
                          "value": "#700170",
                          "is_default": false
                        }

                        ```
                      header:
                        anchor: v2-option-values-option-values
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create an Option Value 


                        Creates a new option value.


                        >`POST
                        /stores/{store_hash}/v2/options/{option_id}/values`


                        ### Read-only Properties 


                        The following properties of the option value are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   id

                        *   option_id


                        ### Requirements 


                        The following properties of the option value are
                        required. The request won’t be fulfilled unless these
                        properties are valid.


                        *   label

                        *   value


                        ### Notes 


                        To maximize system performance, BigCommerce caps the
                        total number of values per option at 250. IF the option
                        has 250 values and you try to create another one,
                        BigCommerce will return a 403 error.


                        When you POST an `is_default`property of `true`, all
                        other option values on the parent option will have their
                        `is_default` property set to `false`.


                        ### Request 


                        Example request object:


                        ```

                        {
                          "label": "white",
                          "sort_order": 0,
                          "value": "#FFFFFF",
                          "is_default": true
                        }

                        ```


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 68,
                          "option_id": 3,
                          "label": "white",
                          "sort_order": 0,
                          "value": "#FFFFFF",
                          "is_default": true
                        }

                        ```
                      header:
                        anchor: v2-option-values_create-option-values
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Update an Option Value 


                        Updates an existing option value.



                        >`PUT
                        /stores/{store_hash}/v2/options/{option_id}/values/{id}`



                        ###  Read-only Properties


                        The following properties of the option value are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   id

                        *   option_id


                        ### Requirements 


                        The following properties of the option value are
                        required. The request won’t be fulfilled unless these
                        properties are valid.


                        ###  Notes


                        When you PUT an `is_default` property of `true`, all
                        other option values on the parent option will have their
                        `is_default` property set to `false`.


                        ### Request 


                        Example request object:


                        ```

                        {
                          "label": "whitish",
                          "sort_order": 1,
                          "value": "#FFFFEF",
                          "is_default": true
                        }

                        ```


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 68,
                          "option_id": 3,
                          "label": "whitish",
                          "sort_order": 1,
                          "value": "#FFFFEF",
                          "is_default": true
                        }

                        ```
                      header:
                        anchor: v2-option-values_update-option-values
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete an Option Value 


                        Deletes an option value.


                        >`DELETE
                        /stores/{store_hash}/v2/options/{option_id}/values/{id}`
                      header:
                        anchor: v2-option-values_delete-option-values
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete Multiple Option Values 


                        Deletes multiple values belonging to an option.


                        >`DELETE
                        /stores/{store_hash}/v2/options/{option_id}/values`



                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 option_values are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | Page | int |
                        /api/v2/options/{option_id}/values?page={number} |

                        | Limit | int |
                        /api/v2/options/{option_id}/values?limit={count} |
                      header:
                        anchor: v2-option-values_delete-all-option-values
              - title: Option Set Options
                route:
                  path: /v2-option-set-options
                data:
                  blocks:
                    - type: html
                      data: "<h1>Option Set Options</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#v2-option-set-options_object-properties\">Object Properties</a></li>\n\t\t<li><a href=\"#v2-option-set-options_list-option-set-option\">List Option Set Options</a></li>\n\t\t<li><a href=\"#v2-option-set-options_get-option-set-option\">Get Option Set Options</a></li>\n    <li><a href=\"#v2-option-set-options_create-option-set-option\">Create Option Set Options</a></li>\n    <li><a href=\"#v2-option-set-options_update-option-set-option\">Update Option Set Options</a></li>\n    <li><a href=\"#v2-option-set-options_delete-option-set-option\">Delete an Option Set Options</a></li>\n    <li><a href=\"#v2-option-set-options_delete-multiple-option-set-option\">Delete Multiple Option Set Options</a></li>\n\t\t</ul>\n</div>"
                    - type: text
                      data: >
                        ##  Option Set Options 


                        Options belonging to an option set.


                        ### Option Set Option: Object – Properties 


                        | Name | Type | Description |

                        | --- | --- | --- |

                        | id | int | The ID of this option. |

                        | option_id | int | The ID of the option to which this
                        option set connects. |

                        | option_set_id | int | The ID of this option set. |

                        | display_name | string | The friendly name used for
                        this option set. |

                        | sort_order | int | The order in which the option is
                        displayed on the product page. |

                        | is_required | boolean | Specifies whether customer is
                        required to enter a value for this option before they
                        can add the product to their cart. |

                        | option | resource | The connected option. |

                        | values | object_array | Array of values for the
                        connected option. |
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## List Option Set Options 


                        Gets the options associated with an option set. (Default
                        sorting is by option id, from lowest to highest.)


                        >`GET
                        /stores/{store_hash}/v2/option_sets/{option_set_id}/options`


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 option_set_options are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | Page | int |
                        /api/v2/option_sets/{option_set_id}/options?page={number}
                        |

                        | Limit | int |
                        /api/v2/option_sets/{option_set_id}/options?limit={count}
                        |


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": 43,
                            "option_id": 18,
                            "option_set_id": 14,
                            "display_name": "Size",
                            "sort_order": 0,
                            "is_required": true,
                            "option": {
                              "url": "https://example.com/api/v2/options/18.json",
                              "resource": "/options/18"
                            },
                            "values": [
                              {
                                "label": "XS",
                                "sort_order": 0,
                                "value": "XS",
                                "option_value_id": 68
                              },
                              {
                                "label": "S",
                                "sort_order": 1,
                                "value": "S",
                                "option_value_id": 69
                              },
                              {
                                "label": "M",
                                "sort_order": 2,
                                "value": "M",
                                "option_value_id": 70
                              },
                              {
                                "label": "L",
                                "sort_order": 3,
                                "value": "L",
                                "option_value_id": 71
                              },
                              {
                                "label": "XL",
                                "sort_order": 4,
                                "value": "XL",
                                "option_value_id": 72
                              }
                            ]
                          },
                          {
                            "id": 44,
                            "option_id": 3,
                            "option_set_id": 14,
                            "display_name": "Color",
                            "sort_order": 1,
                            "is_required": true,
                            "option": {
                              "url": "https://example.com/api/v2/options/3.json",
                              "resource": "/options/3"
                            },
                            "values": [
                              {
                                "label": "Silver",
                                "sort_order": 1,
                                "value": "#cccccc",
                                "option_value_id": 7
                              },
                              {
                                "label": "Black",
                                "sort_order": 2,
                                "value": "#000000",
                                "option_value_id": 8
                              },
                              {
                                "label": "Purple",
                                "sort_order": 3,
                                "value": "#700170",
                                "option_value_id": 9
                              }
                            ]
                          }
                        ]

                        ```
                      header:
                        anchor: v2-option-set-options_list-option-set-option
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get an Option Set Option 


                        Gets an option set option.


                        >`GET
                        /stores/{store_hash}/v2/option_sets/{option_set_id}/options/{id}`


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 4,
                          "option_id": 5,
                          "option_set_id": 2,
                          "display_name": "Clock Speeds (CPU)",
                          "sort_order": 0,
                          "is_required": true,
                          "option": {
                            "url": "https://example.com/api/v2/options/5.json",
                            "resource": "/options/5"
                          }
                        }

                        ```
                      header:
                        anchor: v2-option-set-options_get-option-set-option
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create an Option Set Option 


                        Creates a new option associated with an option set.



                        >`POST
                        /stores/{store_hash}/v2/option_sets/{option_set_id}/options`



                        ### Read-only Properties 


                        The following properties of the option set option are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   id

                        *   option_set_id

                        *   values

                        *   option


                        ### Requirements 


                        The following properties of the option set option are
                        required. The request won’t be fulfilled unless these
                        properties are valid.


                        *   option_id


                        ### Request 


                        Example request object:


                        ```

                        {
                          "option_id": 10,
                          "display_name": "Choose a color",
                          "sort_order": 1,
                          "is_required": true
                        }

                        ```


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 2,
                          "option_id": 10,
                          "option_set_id": 1,
                          "display_name": "Choose a color",
                          "sort_order": 1,
                          "is_required": true,
                          "option": {
                            "url": "https://example.com/api/v2/options/10.json",
                            "resource": "/options/10"
                          }
                        }

                        ```
                      header:
                        anchor: v2-option-set-options_create-option-set-option
                    - type: text
                      data: >-
                        ## Update an Option Set Option 


                        Updates an existing option set option.


                        >`PUT
                        /stores/{store_hash}/v2/option_sets/{option_set_id}/options/{id}`


                        ### Read-only Properties 


                        The following properties of the option set option are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   id

                        *   option_id

                        *   option_set_id

                        *   values

                        *   option


                        ### Requirements 


                        The following properties of the option set option are
                        required. The request won’t be fulfilled unless these
                        properties are valid.


                        ### Request 


                        Example request object:


                        ```

                        {
                          "display_name": "Pick a color...",
                          "sort_order": 2,
                          "is_required": false
                        }

                        ```


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 2,
                          "option_id": 10,
                          "option_set_id": 2,
                          "display_name": "Pick a color...",
                          "sort_order": 2,
                          "is_required": false,
                          "option": {
                            "url": "https://example.com/api/v2/options/10.json",
                            "resource": "/options/10"
                          }
                        }

                        ```
                      header:
                        anchor: v2-option-set-options_update-option-set-option
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete an Option Set Option 


                        Deletes an option belonging to an option set.


                        >`DELETE
                        /stores/{store_hash}/v2/option_sets/{option_set_id}/options/{id}`
                      header:
                        anchor: v2-option-set-options_delete-option-set-option
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete Multiple Option Set Options 


                        Deletes multiple options associated with an option set.


                        >`DELETE
                        /stores/{store_hash}/v2/option_sets/{option_set_id}/options`


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 option_set_options are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | Page | int |
                        /api/v2/option_sets/{option_set_id}/options?page={number}
                        |

                        | Limit | int |
                        /api/v2/option_sets/{option_set_id}/options?limit={count}
                        |
                      header:
                        anchor: >-
                          v2-option-set-options_delete-multiple-option-set-option
              - title: Option Sets
                route:
                  path: /v2-option-sets
                data:
                  blocks:
                    - type: html
                      data: "<h1>Option Sets</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#v2-option-set_object-properties\">Object Properties</a></li>\n\t\t<li><a href=\"#v2-option-set_list-option-set\">List Option Set</a></li>\n\t\t<li><a href=\"#v2-option-set_get-option-set\">Get Option Set</a></li>\n    <li><a href=\"#v2-option-set_get-count-option-set\">Get a Count of Option Set</a></li>\n    <li><a href=\"#v2-option-set_create-option-set\">Create Option Set</a></li>\n    <li><a href=\"#v2-option-set_update-option-set\">Update Option Set</a></li>\n    <li><a href=\"#v2-option-set_delete-option-set\">Delete an Option Set</a></li>\n    <li><a href=\"#v2-option-set_delete-all-option-sets\">Delete All Option Sets</a></li>\n\t\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Option Sets 


                        A reusable set of option facets that can be applied to
                        products.


                        ### Option Set Object – Properties 


                        | Name | Type | Description |

                        | --- | --- | --- |

                        | id | int | Optional field. Unique numeric ID for this
                        option set. Increments sequentially. |

                        | name | string | Required field. The option set's name,
                        as used internally. Must be unique. |

                        | options | object/resource | Optional field; read-only.
                        Object containing option-set options: a `url` and a
                        `resource`. |

                        | product_id (optional) | integer | Optional field;
                        read-only. If `null`, this option set can be reused with
                        any product. If populated with a numeric ID, this option
                        set can be used exclusively with the corresponding
                        product. |
                      header:
                        anchor: v2-option-set_object-properties
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## List Option Sets 


                        Gets the collection of option sets. (Default sorting is
                        by option-set id, from lowest to highest.)


                        >`GET /stores/{store_hash}/v2/option_sets`



                        ### Filters 


                        Filter parameters can be added to the URL query string
                        to select specific option_sets in the collection.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | name | string | /api/v2/option_sets?name={value} |


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 option_sets are returned
                        by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | Page | int | /api/v2/option_sets?page={number} |

                        | Limit | int | /api/v2/option_sets?limit={count} |


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": 1,
                            "product_id": null,
                            "name": "MacBook",
                            "options": {
                              "url": "https://store-bwvr466.mybigcommerce.com/api/v2/optionsets/1/options.json",
                              "resource": "/optionsets/1/options",
                              "product_id": null
                            }
                          },
                          {
                            "id": 2,
                            "product_id": null,
                            "name": "PixelSkin Case",
                            "options": {
                              "url": "https://store-bwvr466.mybigcommerce.com/api/v2/optionsets/2/options.json",
                              "resource": "/optionsets/2/options",
                              "product_id": null
                            }
                          }
                        ]

                        ```
                      header:
                        anchor: v2-option-set_list-option-set
                    - type: text
                      data: '---'
                    - type: text
                      data: |-
                        ## Get an Option Set 

                        Gets an option set.


                        >`GET /stores/{store_hash}/v2/option_sets/{id}`

                        ### Response 

                        Example JSON returned in the response:

                        ```
                        {
                          "id": 10,
                          "product_id": null,
                          "name": "T-Shirt Facets",
                          "options": {
                            "url": "https://store-bwvr466.mybigcommerce.com/api/v2/optionsets/10/options.json",
                            "resource": "/optionsets/13/options",
                            "product_id": null
                          }
                        }
                        ```
                      header:
                        anchor: v2-option-set_get-option-set
                    - type: text
                      data: '---'
                    - type: text
                      data: |-
                        ## Get a Count of Option Sets 

                        Gets a count of the number of option sets in the store.

                        >`GET /stores/{store_hash}/v2/option_sets/count`

                        ### Response 

                        Example JSON returned in the response:

                        ```
                        {
                          "count": 4
                        }
                        ```
                      header:
                        anchor: v2-option-set_get-count-option-set
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create an Option Set 


                        Creates a new Option set.


                        >`POST /stores/{store_hash}/v2/option_sets`



                        ### Read-only Properties 


                        The following properties of the option set are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   id

                        *   options


                        ### Requirements 


                        The following properties of the option set are required.
                        The request won’t be fulfilled unless these properties
                        are valid.


                        *   name


                        ### Request 


                        Example request object:


                        ```

                        {
                          "name": "T-Shirts"
                        }

                        ```


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 10,
                          "product_id": null,
                          "name": "T-Shirts",
                          "options": {
                            "url": "https://store-bwvr466.mybigcommerce.com/api/v2/optionsets/10/options.json",
                            "resource": "/optionsets/10/options",
                            "product_id": null
                          }
                        }

                        ```
                      header:
                        anchor: v2-option-set_create-option-set
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Update an Option Set 


                        Updates an existing option set.



                        >`PUT /stores/{store_hash}/v2/option_sets/{id}`


                        ### Read-only Properties 


                        The following properties of the option set are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   id

                        *   options


                        ### Requirements 


                        The following properties of the option set are required.
                        The request won’t be fulfilled unless these properties
                        are valid.


                        *   name


                        ### Request 


                        Example request object:


                        ```

                        {
                          "name": "T-shirt Facets"
                        }

                        ```


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 10,
                          "product_id": null,
                          "name": "T-shirt Facets",
                          "options": {
                            "url": "https://store-bwvr466.mybigcommerce.com/api/v2/optionsets/10/options.json",
                            "resource": "/optionsets/13/options",
                            "product_id": null
                          }
                        }

                        ```
                      header:
                        anchor: v2-option-set_update-option-set
                    - type: text
                      data: '---'
                    - type: text
                      data: |-
                        ## Delete an Option Set 

                        Deletes an option set.

                        >`DELETE /stores/{store_hash}/v2/option_sets/{id}`
                      header:
                        anchor: v2-option-set_delete-option-set
                    - type: text
                      data: '---'
                    - type: text
                      data: |-

                        ## Delete All Option Sets 

                        Deletes all option sets in the store.

                        >`DELETE /stores/{store_hash}/v2/option_sets`
                      header:
                        anchor: v2-option-set_delete-all-option-sets
              - title: Options
                route:
                  path: /v2-options
                data:
                  blocks:
                    - type: html
                      data: "<h1>Product Options</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#v2-option_object-properties\">Object Properties</a></li>\n\t\t<li><a href=\"#v2-option-set_list-product-option\">List Option Set</a></li>\n\t\t<li><a href=\"#v2-option-set_get-product-option\">Get Option Set</a></li>\n\t\t</ul>\n</div>"
                    - type: text
                      data: >
                        ## Options 


                        Shared attributes that control value facets on a
                        product.


                        ### Options Object – Properties 


                        | Name | Type | Description |

                        |---|---|---|

                        | name | string | Required field. The option's name, as
                        used internally. Must be unique. |

                        | display_name | string | Optional field. The option's
                        name, as displayed on the storefront. Defaults to same
                        value as `name`. However, a custom value can be defined
                        here, and can be reused among multiple options. |

                        | type | string | Optional field. The type of option,
                        which determines how it will display on the storefront.
                        Acceptable values: <br> `C`: Checkbox; <br>`D`: Date
                        field; <br>`F`: File upload field; <br>`MT`: Multi-line
                        text field; <br>`RB`: Radio buttons; <br>`RT`:
                        Rectangular boxes (for product sizes); <br>`S`:
                        Select/drop-down list; <br>`C`: Numbers-only text field;
                        <br>`P`: Product Pick list; <br>`CS`: Color/texture
                        Swatch; <br>`T`: Text field.  |

                        | values | object | Optional field. Object containing
                        option values: a `url` and a `resource`. |

                        | product_id | integer | Optional field; read-only. If
                        `null`, this option can be reused with any product. If
                        populated with a numeric ID, this option can be used
                        exclusively with the corresponding product. |
                      header:
                        anchor: v2-option_object-properties
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## List Product Options 


                        Gets the options associated with a product.



                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/options`


                        ### Filters 


                        There are no filter parameters specific to product
                        options. 


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 product_options are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | page | int |
                        /api/v2/products/{product_id}/options?page={number} |

                        | limit | int |
                        /api/v2/products/{product_id}/options?limit={count} |


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": 13,
                            "option_id": 8,
                            "display_name": "iPod Capacities",
                            "sort_order": 0,
                            "is_required": true
                          },
                          {
                            "id": 14,
                            "option_id": 9,
                            "display_name": "Accessories",
                            "sort_order": 1,
                            "is_required": false
                          }
                        ]

                        ```
                      header:
                        anchor: v2-option-set_list-product-option
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Product Option 


                        Gets an option associated with a product.



                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/options/{id}`


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 14,
                          "option_id": 9,
                          "display_name": "Accessories",
                          "sort_order": 1,
                          "is_required": false
                        }

                        ```
                      header:
                        anchor: v2-option-set_get-product-option
              - title: Custom Fields
                route:
                  path: /v2-custom-fields
                data:
                  blocks:
                    - type: html
                      data: "<h1>Custom Fields</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#v2-custom-fields_object-properties\">Object Properties</a></li>\n\t\t<li><a href=\"#v2-custom-fields_list-custom-fields\">List Custom Fields</a></li>\n\t\t<li><a href=\"#v2-custom-fields_get-custom-fields\">Get Custom Fields</a></li>\n    <li><a href=\"#v2-custom-fields_get-count-custom-fields\">Get a Count of Custom Fields</a></li>\n    <li><a href=\"#v2-custom-fields_create-custom-fields\">Create Custom Fields</a></li>\n    <li><a href=\"#v2-custom-fields_update-custom-fields\">Update Custom Fields</a></li>\n    <li><a href=\"#v2-custom-fields_delete-custom-fields\">Delete an Custom Fields</a></li>\n    <li><a href=\"#v2-custom-fields_delete-multiple-custom-fields\">Delete Multiple Custom Fields</a></li>\n\t\t</ul>\n</div>\n"
                    - type: text
                      data: |-
                        ## Custom Fields 

                        Custom fields associated with a product.

                        ### Custom Field Object – Properties 

                        | Name | Type | Description |
                        | --- | --- | --- |
                        | id | int | |
                        | product_id | int | ID of the associated product |
                        | name | string | key; limited to 250 characters |
                        | text | string | value; limited to 250 characters |
                      header:
                        anchor: v2-custom-fields_object-properties
                    - type: text
                      data: >-
                        |||

                        |---|---|

                        | **Manages** |

                        | **OAuth Scopes** | store_v2_products

                        ||store_v2_products_read_only


                        ## List Custom Fields 


                        Gets custom fields associated with a product.



                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/custom_fields`


                        ### Filters 


                        There are no filter parameters specific to
                        `custom_fields`.


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 custom_fields are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | page | int |
                        /api/v2/products/{product_id}/custom_fields?page={number}
                        |

                        | limit | int |
                        /api/v2/products/{product_id}/custom_fields?limit={count}
                        |


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": 1,
                            "product_id": 30,
                            "name": "Toy manufactured in",
                            "text": "USA"
                          },
                          {
                            "id": 2,
                            "product_id": 45,
                            "name": "Release Date",
                            "text": "2013-12-25"
                          }
                        ]

                        ```
                      header:
                        anchor: v2-custom-fields_list-custom-fields
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Custom Field 


                        Gets a custom field associated with a product.



                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/custom_fields/{id}`


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 2,
                          "product_id": 30,
                          "name": "Toy manufactured in",
                          "text": "USA"
                        }

                        ```
                      header:
                        anchor: v2-custom-fields_get-custom-fields
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Count of Custom Fields 


                        Gets a count of the number of custom fields in the
                        store.


                        >`GET
                        /stores/{store_hash}/v2/products/custom_fields/count`


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "count": 0
                        }

                        ```
                      header:
                        anchor: v2-custom-fields_get-count-custom-fields
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create a Custom Field 


                        Creates a new custom field associated with a product


                        >`POST
                        /stores/{store_hash}/v2/products/{product_id}/custom_fields`


                        ### Read-only Properties 


                        The following properties of the custom field are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   product_id


                        ### Requirements 


                        The following properties of the custom field are
                        required. The request won’t be fulfilled unless these
                        properties are valid.


                        *   name

                        *   text


                        ### Request 


                        Example request object:


                        ```

                        {
                          "name": "Release Date",
                          "text": "2013-12-25"
                        }

                        ```


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 5,
                          "product_id": 45,
                          "name": "Release Date",
                          "text": "2013-12-25"
                        }
                      header:
                        anchor: v2-custom-fields_create-custom-fields
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Update a Custom Field 


                        Updates an existing custom field associated with a
                        product.



                        >`PUT
                        /stores/{store_hash}/v2/products/{product_id}/custom_fields/{id}`


                        ### Read-only Properties 


                        The following properties of the custom field are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   product_id


                        ### Requirements 


                        The following properties of the custom field are
                        required. The request won’t be fulfilled unless these
                        properties are valid.


                        *   name

                        *   text


                        ### Request 


                        Example request object:


                        ```

                        {
                          "name": "Release Date",
                          "text": "2013-12-31"
                        }

                        ```


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 5,
                          "product_id": 45,
                          "name": "Release Date",
                          "text": "2013-12-31"
                        }

                        ```
                      header:
                        anchor: v2-custom-fields_update-custom-fields
                    - type: text
                      data: '---'
                    - type: text
                      data: >-

                        ## Delete a Custom Field 


                        Deletes a custom field associated with a product.


                        >`DELETE
                        /stores/{store_hash}/v2/products/{product_id}/custom_fields/{id}`
                      header:
                        anchor: v2-custom-fields_delete-custom-fields
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete Multiple Custom Fields 


                        Deletes multiple custom fields associated with a
                        product.



                        >`DELETE
                        /stores/{store_hash}/v2/products/{product_id}/custom_fields`


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 custom_fields are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | page | int |
                        /api/v2/products/{product_id}/custom_fields?page={number}
                        |

                        | limit | int |
                        /api/v2/products/{product_id}/custom_fields?limit={count}
                        |
                      header:
                        anchor: v2-custom-fields_delete-multiple-custom-fields
              - title: Categories
                route:
                  path: /v2-categories
                data:
                  blocks:
                    - type: html
                      data: "<h1>Categories</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#v2-categories_object-properties\">Object Properties</a></li>\n\t\t<li><a href=\"#v2-categories_list-categories\">List Categories</a></li>\n\t\t<li><a href=\"#v2-categories_get-categories\">Get a Category</a></li>\n    <li><a href=\"#v2-categories_get-count-categories\">Get a Count of Categories</a></li>\n    <li><a href=\"#v2-categories_create-categories\">Create a Category</a></li>\n    <li><a href=\"#v2-categories_update-categories\">Update A Category</a></li>\n    <li><a href=\"#v2-categories_delete-categories\">Delete an Categories</a></li>\n    <li><a href=\"#v2-categories_delete-all-categories\">Delete All Categories</a></li>\n\t\t</ul>\n</div>\n"
                    - type: text
                      data: >-
                        ## Categories 


                        Index of hierarchical categories used to organize and
                        group products.


                        ### Category Object – Properties 


                        | Name | Type | Description |

                        | --- | --- | --- |

                        | id | int | A read-only field containing the unique
                        numeric identifier of this category. |

                        | parent_id | int | The ID of the parent category to
                        which this category belongs.<br> (NOTE: the total number
                        of parent categories cannot exceed seven.) |

                        | name | string | The name of the category. Must be
                        unique. |

                        | description | text | A description for the category. |

                        | sort_order | int | The sort order of the category. |

                        | page_title | string | The page title for the category
                        page. |

                        | meta_keywords | text | Comma-separated list of meta
                        keywords to include in the HTML. |

                        | meta_description | text | A meta description to
                        include. |

                        | layout_file | string | A valid layout file. (Please
                        refer to [this
                        article](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/)
                        on creating category files.) This field is writable only
                        for stores with a Blueprint theme applied. |

                        | parent_category_list | array | A read-only field
                        containing the ID of this category and the ID of its
                        parent category, if any. |

                        | image_file | string | A valid image. |

                        | is_visible | boolean | Is the category visible? |

                        | search_keywords | string | A comma-separated list of
                        keywords that can be used to locate this brand. |

                        | url | string | The context path of this category. |
                      header:
                        anchor: v2-categories_object-properties
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## List Categories 


                        Gets the list of categories. (Default sorting is by
                        category id, from lowest to highest.)


                        >`GET /stores/{store_hash}/v2/categories`



                        ### Filters 


                        Filter parameters can be added to the URL query string
                        to select specific categories in the collection.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | parent_id | string |
                        /api/v2/categories?parent_id={value} |

                        | name | string | /api/v2/categories?name={value} |

                        | is_visible | string |
                        /api/v2/categories?is_visible={value} |

                        | min_id | int | /api/v2/categories?min_id={value} |

                        | max_id | int | /api/v2/categories?max_id={value} |


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 categories are returned
                        by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | Page | int | /api/v2/categories?page={number} |

                        | Limit | int | /api/v2/categories?limit={count} |


                        ### Response


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": 1,
                            "parent_id": 0,
                            "name": "Shop Mac",
                            "description": "",
                            "sort_order": 0,
                            "page_title": "",
                            "meta_keywords": "",
                            "meta_description": "",
                            "layout_file": "category.html",
                            "parent_category_list": [
                              1
                            ],
                            "image_file": "",
                            "is_visible": true,
                            "search_keywords": "",
                            "url": "/shop-mac/"
                          }
                        ]

                        ```
                      header:
                        anchor: v2-categories_list-categories
                    - type: text
                      data: '---'
                    - type: text
                      data: |-

                        ## Get a Category 

                        Gets a single category.

                        >`GET /stores/{store_hash}/v2/categories/{id}`

                        ### Response

                        Example JSON returned in the response:

                        ```
                        {
                          "id": 10,
                          "parent_id": 1,
                          "name": "Xmen toys",
                          "description": "",
                          "sort_order": 2,
                          "page_title": "",
                          "meta_keywords": null,
                          "meta_description": null,
                          "layout_file": "category.html",
                          "parent_category_list": [
                            1,
                            10
                          ],
                          "image_file": "d/apiy2uz6q__69888.jpg",
                          "is_visible": true,
                          "search_keywords": "",
                          "url": "/xmen-toys/"
                        }
                        ```
                      header:
                        anchor: v2-categories_get-categories
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Count of Categories 


                        Gets a count of the total number of categories in the
                        store.



                        >`GET /stores/{store_hash}/v2/categories/count`


                        ### Response


                        Example JSON returned in the response:


                        ```

                        {
                          "count": 10
                        }

                        ```
                      header:
                        anchor: v2-categories_get-count-categories
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create a Category 


                        Creates a new category.



                        >`POST /stores/{store_hash}/v2/categories`



                        ### Read-only Properties 


                        The following properties of the category are read-only.
                        If one or more of these properties are included in the
                        request, it will be rejected.


                        *   id

                        *   parent_category_list


                        ### Requirements 


                        The following properties of the category are required.
                        The request won’t be fulfilled unless these properties
                        are valid.


                        *   name


                        ### Notes 


                        To maximize system performance, BigCommerce caps the
                        number of categories that can be added to a store at
                        16,000. If your `POST` causes the store to exceed the
                        maximum of 16,000 categories, BigCommerce will return a
                        403 error.


                        In addition, BigCommerce caps the total number of parent
                        categories at seven. If your `POST` includes the ID of a
                        parent category in the `parent_id` field, BigCommerce
                        will check that parent category and its parent and so on
                        to determine the total number of parent categories. If
                        your `POST` would cause the total number of parent
                        categories to exceed seven, BigCommerce will return a
                        403 error.


                        ### Request


                        Example request object:


                        ```

                        {
                          "name": "Xmen toys"
                        }

                        ```


                        ### Response


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 10,
                          "parent_id": 1,
                          "name": "Xmen toys",
                          "description": "",
                          "sort_order": 2,
                          "page_title": "",
                          "meta_keywords": null,
                          "meta_description": null,
                          "layout_file": "category.html",
                          "parent_category_list": [
                            1,
                            10
                          ],
                          "image_file": "d/apiy2uz6q__69888.jpg",
                          "is_visible": true,
                          "search_keywords": "",
                          "url": "/xmen-toys/"
                        }

                        ```
                      header:
                        anchor: v2-categories_create-categories
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Update a Category 


                        Updates an existing category.


                        >`PUT /stores/{store_hash}/v2/categories/{id}`



                        ### Read-only Properties 


                        The following properties of the category are read-only.
                        If one or more of these properties are included in the
                        request, it will be rejected.


                        *   id

                        *   parent_category_list


                        ### Requirements 


                        The following properties of the category are required.
                        The request won’t be fulfilled unless these properties
                        are valid.


                        ### Notes 


                        To maximize system performance, BigCommerce caps the
                        total number of parent categories at seven. If your
                        `PUT` includes the ID of a parent category in the
                        `parent_id` field, BigCommerce will check the parent and
                        any children of the current category to determine the
                        total number of parent categories. If your `PUT` would
                        cause the total number of parent categories to exceed
                        the maximum of seven, BigCommerce will return a 403
                        error.


                        ### Response


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 10,
                          "parent_id": 1,
                          "name": "Xmen toys",
                          "description": "",
                          "sort_order": 2,
                          "page_title": "",
                          "meta_keywords": null,
                          "meta_description": null,
                          "layout_file": "category.html",
                          "parent_category_list": [
                            1,
                            10
                          ],
                          "image_file": "d/apiy2uz6q__69888.jpg",
                          "is_visible": true,
                          "search_keywords": "",
                          "url": "/xmen-toys/"
                        }

                        ```
                      header:
                        anchor: v2-categories_update-categories
                    - type: text
                      data: '---'
                    - type: text
                      data: |-
                        ## Delete a Category 

                        Deletes a category.

                        >`DELETE /stores/{store_hash}/v2/categories/{id}`
                      header:
                        anchor: v2-categories_delete-categories
                    - type: text
                      data: '---'
                    - type: callout
                      data:
                        type: error
                        title: Delete Products before Categories
                        body: >-
                          The Delete All Categories operation will not succeed
                          unless the store has zero products. If any products in
                          the store belong to any categories, the entire
                          operation will fail. Therefore, if you really want to
                          delete all the categories of the store, you must first
                          delete all of the products in the store.
                    - type: text
                      data: |-
                        ## Delete All Categories 

                        Deletes all the categories in the store.

                        >`DELETE /stores/{store_hash}/v2/categories`
                      header:
                        anchor: v2-categories_delete-all-categories
              - title: Bulk Pricing Rules
                route:
                  path: /v2-bulk-pricing
                data:
                  blocks:
                    - type: html
                      data: "<h1>Bulk Pricing Rules</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#v2-bulk-pricing-rules_object-properties\">Object Properties</a></li>\n\t\t<li><a href=\"#v2-bulk-pricing-rules_list-bulk-pricing-rules\">List Bulk Pricing Rules</a></li>\n\t\t<li><a href=\"#v2-bulk-pricing-rules_get-bulk-pricing-rules\">Get a Bulk Pricing Rule</a></li>\n    <li><a href=\"#v2-bulk-pricing-rules_get-count-bulk-pricing-rules\">Get a Count of Bulk Pricing Rules</a></li>\n    <li><a href=\"#v2-bulk-pricing-rules_create-bulk-pricing-rules\">Create a Bulk Pricing Rule</a></li>\n    <li><a href=\"#v2-bulk-pricing-rules_update-bulk-pricing-rules\">Update A Bulk Pricing Rule</a></li>\n    <li><a href=\"#v2-bulk-pricing-rules_delete-bulk-pricing-rules\">Delete a Bulk Pricing Rules</a></li>\n    <li><a href=\"#v2-bulk-pricing-rules_delete-multiple-bulk-pricing-rules\">Delete Multiple Bulk Pricing Rules</a></li>\n\t\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ##  Bulk Pricing 


                        Bulk pricing rules applied to a product.


                        ###  Bulk Pricing Object – Properties 


                        | Name | Type | Description |

                        | --- | --- | --- |

                        | id | string | The ID of the bulk discount rule. |

                        | product_id | int | The ID of the product associated
                        with this bulk discount rule. |

                        | min | int | The minimum inclusive quantity of a
                        product to satisfy this rule. Must be greater than or
                        equal to zero. |

                        | max | int | The maximum inclusive quantity of a
                        product to satisfy this rule. Must be greater than the
                        min value, unless this field has a value of 0 (zero), in
                        which case there will be no maximum bound for this rule.
                        |

                        | type | enum |

                        | type_value | decimal | The value of the discount |
                      header:
                        anchor: v2-bulk-pricing-rules_object-properties
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## List Bulk Pricing Rules 


                        Gets the collection of product bulk pricing rules.



                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/discount_rules`


                        ### Filters 


                        There are no filter parameters specific to
                        `discount_rules`.


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 bulk_pricing_rules are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | page | int |
                        /api/v2/products/{product_id}/discount_rules?page={number}
                        |

                        | limit | int |
                        /api/v2/products/{product_id}/discount_rules?limit={count}
                        |


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": "1",
                            "product_id": 30,
                            "min": 100,
                            "max": 500,
                            "type": "price",
                            "type_value": 2
                          }
                        ]

                        ```
                      header:
                        anchor: v2-bulk-pricing-rules_list-bulk-pricing-rules
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Product Bulk Pricing Rule 


                        Gets a product bulk pricing rule.


                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/discount_rules/{id}`


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": "1",
                          "product_id": 30,
                          "min": 100,
                          "max": 500,
                          "type": "price",
                          "type_value": 2
                        }

                        ```
                      header:
                        anchor: v2-bulk-pricing-rules_get-bulk-pricing-rules
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Count of Bulk Pricing Rules 


                        Gets a count of the number of bulk pricing rules in the
                        store.


                        >`GET
                        /stores/{store_hash}/v2/products/discount_rules/count`



                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "count": 9
                        }

                        ```
                      header:
                        anchor: v2-bulk-pricing-rules_get-count-bulk-pricing-rules
                    - type: text
                      data: '---'
                    - type: text
                      data: >-

                        ## Create a Product Bulk Pricing Rule 


                        Creates a new product bulk pricing rule.



                        >`POST
                        /stores/{store_hash}/v2/products/{product_id}/discount_rules`


                        ### Read-only Properties 


                        The following properties of the discount rule are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   product_id


                        ### Requirements 


                        The following properties of the discount rule are
                        required. The request won’t be fulfilled unless these
                        properties are valid.


                        *   type

                        *   type_value


                        ### Notes 


                        To specify that a `min` or `max` value is unbounded,
                        these properties must be explicitly set with a value of
                        `0`. If neither `min` nor `max` properties are included
                        in the request, the existing value will remain
                        unchanged.


                        The range of the `min` and `max` values must not overlap
                        an existing rule associated with the same product.


                        ### Request 


                        Example request object:


                        ```

                        {
                          "min": 100,
                          "max": 500,
                          "type": "price",
                          "type_value": 2
                        }

                        ```


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": "1",
                          "product_id": 30,
                          "min": 100,
                          "max": 500,
                          "type": "price",
                          "type_value": 2
                        }

                        ```
                      header:
                        anchor: v2-bulk-pricing-rules_create-bulk-pricing-rules
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Update a Product Bulk Pricing Rule 


                        Updates an existing product bulk pricing rule.



                        >`PUT
                        /stores/{store_hash}/v2/products/{product_id}/discount_rules/{id}`



                        ### Read-only Properties 


                        The following properties of the discount rule are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   product_id


                        ### Requirements 


                        The following properties of the discount rule are
                        required. The request won’t be fulfilled unless these
                        properties are valid.


                        *   type

                        *   type_value


                        ### Notes 


                        To specify that a `min` or `max` value is unbounded,
                        these properties must be explicitly set with a value of
                        `0`. If neither `min` nor `max` properties are included
                        in the request, the existing value will remain
                        unchanged.


                        The range of the `min` and `max` values must not overlap
                        an existing rule associated with the same product.


                        ### Request 


                        Example request object:


                        ```

                        {
                          "min": 200,
                          "max": 300,
                          "type": "fixed",
                          "type_value": 10
                        }

                        ```


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": "1",
                          "product_id": 30,
                          "min": 200,
                          "max": 300,
                          "type": "fixed",
                          "type_value": 10
                        }

                        ```
                      header:
                        anchor: v2-bulk-pricing-rules_update-bulk-pricing-rules
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete a Product Bulk Pricing Rule 


                        Deletes a product bulk pricing rule.


                        >`DELETE
                        /stores/{store_hash}/v2/products/{product_id}/discount_rules/{id}`
                      header:
                        anchor: v2-bulk-pricing-rules_delete-bulk-pricing-rules
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete Multiple Product Bulk Pricing Rules 


                        Deletes bulk pricing rules associated with a product.


                        >`DELETE
                        /stores/{store_hash}/v2/products/{product_id}/discount_rules`


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 `bulk_pricing_rules` are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | page | int |
                        /api/v2/products/{product_id}/discount_rules?page={number}
                        |

                        | limit | int |
                        /api/v2/products/{product_id}/discount_rules?limit={count}
                        |
                      header:
                        anchor: >-
                          v2-bulk-pricing-rules_delete-multiple-bulk-pricing-rules
              - title: Products
                route:
                  path: /v2-products
                data:
                  blocks:
                    - type: html
                      data: "<h1>Products</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#v2-products_object-properties\">Object Properties</a></li>\n\t\t<li><a href=\"#v2-products_list-products\">List Products</a></li>\n\t\t<li><a href=\"#v2-products_get-products\">Get a Product</a></li>\n    <li><a href=\"#v2-products_get-count-products\">Get a Count of Products</a></li>\n    <li><a href=\"#v2-products_create-products\">Create a Product</a></li>\n    <li><a href=\"#v2-products_update-products\">Update A Product</a></li>\n    <li><a href=\"#v2-products_delete-products\">Delete a Product</a></li>\n    <li><a href=\"#v2-products_delete-all-products\">Delete All Products</a></li>\n\t\t</ul>\n</div>\n"
                    - type: callout
                      data:
                        type: error
                        body: >-
                          It is recommended to use the new [Catalog
                          Products](/api-reference/catalog/catalog-api)
                    - type: text
                      data: >
                        ## Products 

                        A product object represents a saleable item in the
                        catalog.


                        ### Product Object – Properties 


                        | Name | Type | Description |

                        | --- | --- | --- | --- |

                        | id | int | The unique numerical ID of the product.
                        Increments sequentially. |

                        | keyword_filter | string | (This property is
                        deprecated.) |

                        | name | string | The product name. |

                        | type | enum | The product type. One of:<br> `physical`
                        – a physical stock unit.<br> `digital` – a digital
                        download. |

                        | sku | string | User-defined product code/stock keeping
                        unit (SKU). |

                        | description | text | Product description, which can
                        include HTML formatting. |

                        | search_keywords | text | A comma-separated list of
                        keywords that can be used to locate the product when
                        searching the store. |

                        | availability_description | string | Availability text,
                        displayed on the checkout page under the product title,
                        telling the customer how long it will normally take to
                        ship this product. E.g.: "Usually ships in 24 hours". |

                        | price | decimal | The product's price. Should include,
                        or exclude, tax based on the store settings. |

                        | cost_price | decimal | The product's cost price.
                        Stored for reference only; not used or displayed
                        anywhere on the store. |

                        | retail_price | decimal | The product's retail cost. If
                        entered, this retail price will be shown on the product
                        page. |

                        | sale_price | decimal | Sale price. If entered, this
                        will be used instead of value in the price field when
                        calculating the product's cost. |

                        | calculated_price | decimal | Price as displayed to
                        guests, adjusted for applicable sales and rules. (Cart
                        price might incorporate further discounts for logged-in
                        customers or customer groups.) Read-only. |

                        | sort_order | int | Priority to give this product when
                        included in product lists on category pages and in
                        search results. Lower integers will place the product
                        closer to the top of the results. |

                        | is_visible | boolean | Flag to determine whether or
                        not the product should be displayed to customers
                        browsing. If `true`, the product will be displayed. If
                        `false`, the product will be hidden from view. |

                        | is_featured | boolean | Flag to determine whether the
                        product should be included in the "featured products"
                        panel for shoppers viewing the store. |

                        | related_products | string | Defaults to `-1`, which
                        causes the store to automatically generate a list of
                        related products. To manually specify the list of
                        related products, include their IDs, separated by
                        commas. For example: `3, 6, 7, 21`. |

                        | inventory_level | int | Current inventory level of the
                        product. Simple inventory tracking must be enabled (see
                        the `inventory_tracking` field) for this to take effect.
                        |

                        | inventory_warning_level | int | Inventory Warning
                        level for the product. When the product's inventory
                        level drops below this warning level, the store owner
                        will be sent a notification. Simple inventory tracking
                        must be enabled (see the `inventory_tracking` field) for
                        this to take effect. |

                        | warranty | text | Warranty information displayed on
                        the product page. Can include HTML formatting. |

                        | weight | decimal | Weight of the product, which can be
                        used when calculating shipping costs. |

                        | width | decimal | Width of the product, which can be
                        used when calculating shipping costs. |

                        | height | decimal | Height of the product, which can be
                        used when calculating shipping costs. |

                        | depth | decimal | Depth of the product, which can be
                        used when calculating shipping costs. |

                        | fixed_cost_shipping_price | decimal | A fixed shipping
                        cost for the product. If defined, this value will be
                        used instead of normal shipping-cost calculation during
                        checkout. |

                        | is_free_shipping | boolean | Flag used to indicate
                        whether or not the product has free shipping. If `true`,
                        the shipping cost for the product will be zero. |

                        | inventory_tracking | enum | The type of inventory
                        tracking for the product. One of:<br> `none` – inventory
                        levels will not be tracked.<br> `simple` – inventory
                        levels will be tracked using the `inventory_level` and
                        `inventory_warning_level` fields.<br> `sku` – inventory
                        levels will be tracked based on individual product
                        options, which maintain their own warning levels and
                        inventory levels. |

                        | rating_total | int | The total rating for the product.
                        |

                        | rating_count | int | The total number of ratings the
                        product has had. |

                        | total_sold | int | Total quantity of this product sold
                        through transactions. |

                        | date_created | date | The date of which the product
                        was created. |

                        | brand_id | int | The product's brand |

                        | view_count | int | The number of times the product has
                        been viewed. |

                        | page_title | string | Custom title for the product's
                        page. If not defined, the product name will be used as
                        the page title. |

                        | meta_keywords | text | Custom meta keywords for the
                        product page. If not defined, the store's default
                        keywords will be used. |

                        | meta_description | text | Custom meta description for
                        the product page. If not defined, the store's default
                        meta description will be used. |

                        | layout_file | string | The layout template file used
                        to render this product category. This field is writable
                        only for stores with a Blueprint theme applied |

                        | is_price_hidden | boolean | The default `false` value
                        indicates that this product's price should be shown on
                        the product page. If set to `true`, the price will be
                        hidden hidden. (NOTE: To successfully set
                        `is_price_hidden` to `true`, the `availability` value
                        must be `disabled`.) |

                        | price_hidden_label | string | By default, an empty
                        string. If `is_price_hidden` is `true`, the value of
                        `price_hidden_label` will be displayed instead of the
                        price. (NOTE:&#160;To successfully set a non-empty
                        string value for `price_hidden_label`, the
                        `availability` value must be `disabled`.) |

                        | categories | array | An array of IDs for the
                        categories this product belongs to. When updating a
                        product, if an array of categories is supplied, then all
                        product categories will be overwritten. Does not accept
                        more than 1,000 ID values. |

                        | date_modified | date | The date that the product was
                        last modified. |

                        | event_date_field_name | string | Name of the field to
                        be displayed on the product page when selecting the
                        event/delivery date. |

                        | event_date_type | enum | One of the following
                        values:<br> `none` – Disables the event/delivery date
                        requirement and field.<br> `after` – The selected date
                        must fall either on, or after, the date specified in the
                        `event_date_start` field.<br> `before` – The selected
                        date must fall either before, or on, the date specified
                        in the `event_date_end` field.<br> `range` – The
                        selected date must fall between the `event_date_start`
                        and `event_date_end` dates. |

                        | event_date_start | date | When the product requires
                        the customer to select an event/delivery date, this date
                        is used as the "after" date. |

                        | event_date_end | date | When the product requires the
                        customer to select an event/delivery date, this date is
                        used as the "before" date. |

                        | myob_asset_account | string | MYOB Asset Account. |

                        | myob_income_account | string | MYOB Income Account. |

                        | myob_expense_account | string | MYOB Expense/COS
                        Account. |

                        | peachtree_gl_account | string | Peachtree General
                        Ledger Account. |

                        | condition | enum | The product's condition. Will be
                        shown on the product page if the value of the
                        `is_condition_shown` field is true. Possible values:
                        `New`, `Used`, `Refurbished`. |

                        | is_condition_shown | boolean | Flag used to determine
                        whether the product's condition will be shown to the
                        customer on the product page. |

                        | preorder_release_date | date | Pre-order release date.
                        See `availability` field for details on setting a
                        product's availability to accept pre-orders. |

                        | is_preorder_only | boolean | If set to `false`, the
                        product will not change its `availability` from
                        `preorder` to `available` on the release date.
                        Otherwise, on the release date the product's
                        availability/status will change to `available`. |

                        | preorder_message | string | Custom expected-date
                        message to display on the product page. If undefined,
                        the message defaults to the storewide setting. Can
                        contain the `%%DATE%%` placeholder, which will be
                        replaced with the release date. |

                        | order_quantity_minimum | int | The minimum quantity an
                        order must contain in order to purchase this product. |

                        | order_quantity_maximum | int | The maximum quantity an
                        order can contain when purchasing the product. |

                        | open_graph_type | enum | Type of product. Acceptable
                        values are: `product`, `album`, `book`, `drink`, `food`,
                        `game`, `movie`, `song`, `tv_show` |

                        | open_graph_title | string | Title of the product. If
                        not specified, the product's name will be used instead.
                        |

                        | open_graph_description | text | Description to use for
                        the product. If not specified, the `meta_description`
                        will be used instead. |

                        | is_open_graph_thumbnail | boolean | If set to `true`,
                        the product thumbnail image will be used as the open
                        graph image. |

                        | upc | string | The product UPC code, which is used in
                        feeds for shopping comparison sites. |

                        | date_last_imported | date | The date on which the
                        product was last imported using the bulk importer. |

                        | option_set_id | int | The ID of the [option
                        set](/api/v2/#option-sets) applied to the product.
                        (NOTE: To remove the option set from the product, set
                        the value to `null` on update.) |

                        | tax_class_id | int | The ID of the tax class applied
                        to the product. (NOTE: Value ignored if automatic tax is
                        enabled.) |

                        | option_set_display | enum | The position on the
                        product page where options from the option set will be
                        displayed. |

                        | bin_picking_number | string | The BIN picking number
                        for the product. |

                        | custom_url | string | Custom URL (if set) overriding
                        the structure dictated in the store's settings. If no
                        custom URL is set, this will contain the default URL. |

                        | primary_image | object | An image object,
                        corresponding to the image that is set as the product's
                        thumbnail. This object includes that image's `id`, plus
                        four URL values identifying where to pull the image at
                        different sizes:<br>`standard_url` is the image used in
                        the product page's image box.<br> `tiny_url` is the
                        thumbnail image displayed below the product page's image
                        box.<br> `thumbnail_url` is used for product list-box
                        images on category pages and in side panels.<br>
                        `zoom_url` is either the original image size provided to
                        BigCommerce, or the merchant-selected `Product Zoom
                        Image`/`Zoomed image` size – whichever is smaller. (You
                        can always access the product's original image via the
                        [Product Images resource](/api/v2/#product-images).) |

                        | availability | enum | Availability of the product.
                        Possible values:<br> `available` – the product can be
                        purchased on the storefront.<br> `disabled` - the
                        product is listed on the storefront, but cannot be
                        purchased.<br> `preorder` – the product is listed for
                        pre-orders. |

                        | brand | resource | The product's brand |

                        | downloads | resource | Total number of downloads for a
                        downloadable product. |

                        | images | resource | See the [Product Images
                        resource](/api/v2/#product-images) for information. |

                        | discount_rules | resource | See the [Bulk
                        Pricing/Discount](/api/v2/#bulk-pricing) resource for
                        information. |

                        | configurable_fields | resource | See the [Configurable
                        Fields](/api/v2/#configurable-fields) resource for
                        information. |

                        | custom_fields | resource | See the [Custom
                        Fields](/api/v2/#custom-fields) resource for
                        information. |

                        | videos | resource | See the [Videos
                        resource](/api/v2/#videos) for information. |

                        | skus | resource | Stock Keeping Units for the product.
                        See the [Product SKUs](/api/v2/#skus) resource for the
                        definition of a sku object. |

                        | rules | resource | Rules that apply only to this
                        product, based on the product's [option
                        set](/v2#product-option-sets). See [Product
                        Rules](/api/v2/#product-rules) resource for information.
                        |

                        | option_set | resource | See the [Product Option
                        Sets](/v2/#product-option-sets) resource for
                        information. |

                        | options | resource | Options from the [option
                        set](/api/v2/#option-sets) applied to the product. See
                        the [Product Options](/api/v2/#product-options) resource
                        for information. |

                        | tax_class | resource | Assigned tax class, when using
                        a manual tax setup. This can be a number matching one of
                        the tax classes set up in your store. |

                        | avalara_product_tax_code | resource | Accepts AvaTax
                        System Tax Codes, which identify products and services
                        that fall into special sales-tax categories. By using
                        these codes, merchants who subscribe to Avalara Premium
                        can calculate sales taxes more accurately.<br><br>
                        Stores without Avalara Premium will ignore the code when
                        calculating sales tax. Do not pass more than one code.
                        The codes are case-sensitive.<br><br> For details,
                        please see Avalara's <a
                        href="https://help.avalara.com/000_Avalara_AvaTax/Manage_Product_Taxability/010_Select_AvaTax_System_Tax_Codes"
                        target="_blank">overview</a> and <a
                        href="https://help.avalara.com/000_Avalara_AvaTax/Manage_Product_Taxability/Tax_Codes_-_Frequently_Asked_Questions"
                        target="_blank">FAQ</a> on AvaTax System Tax Codes. You
                        can also <a
                        href="https://help.avalara.com/@api/deki/files/1675/AvaTax_System_Tax_Codes_Toolkit.zip?revision=37"
                        target="_blank">download codes</a> as a zipfile of
                        spreadsheets, or <a
                        href="https://taxcode.avatax.avalara.com/"
                        target="_blank">search or browse codes</a> in Avalara's
                        Tax Code Search Tool. (These external links are subject
                        to change.) |
                      header:
                        anchor: v2-products_object-properties
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## List Products 


                        Gets the collection of products. (Default sorting is by
                        product id, from lowest to highest.)

                        > `GET /stores/{store_hash}/v2/products`


                        ### Filters 


                        Filter parameters can be added to the URL query string
                        to select specific products in the collection.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | min_id | int | /api/v2/products?min_id={value} |

                        | max_id | int | /api/v2/products?max_id={value} |

                        | name | string | /api/v2/products?name={value} |

                        | keyword_filter | string |
                        /api/v2/products?keyword_filter={value} |

                        | description | string |
                        /api/v2/products?description={value} |

                        | sku | string | /api/v2/products?sku={value} |

                        | condition | string |
                        /api/v2/products?condition={value} |

                        | availability | string |
                        /api/v2/products?availability={value} |

                        | brand_id | string | /api/v2/products?brand_id={value}
                        |

                        | min_date_created | dateTime or date |
                        /api/v2/products?min_date_created={value} |

                        | max_date_created | dateTime or date |
                        /api/v2/products?max_date_created={value} |

                        | min_date_modified | dateTime or date |
                        /api/v2/products?min_date_modified={value} |

                        | max_date_modified | dateTime or date |
                        /api/v2/products?max_date_modified={value} |

                        | min_date_last_imported | date |
                        /api/v2/products?min_date_last_imported={value} |

                        | max_date_last_imported | date |
                        /api/v2/products?max_date_last_imported={value} |

                        | min_price | decimal |
                        /api/v2/products?min_price={value} |

                        | max_price | decimal |
                        /api/v2/products?max_price={value} |

                        | min_number_sold | int |
                        /api/v2/products?min_number_sold={value} |

                        | max_number_sold | int |
                        /api/v2/products?max_number_sold={value} |

                        | is_visible | string |
                        /api/v2/products?is_visible={value} |

                        | is_featured | string |
                        /api/v2/products?is_featured={value} |

                        | min_inventory_level | int |
                        /api/v2/products?min_inventory_level={value} |

                        | max_inventory_level | int |
                        /api/v2/products?max_inventory_level={value} |

                        | include_sku | boolean |
                        /api/v2/products?include_sku={value} |

                        | category | string | /api/v2/products?category={value}
                        |

                        | product_tax_code | string |
                        /api/v2/products?product_tax_code={value} |


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 products are returned by
                        default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | Page | int | /api/v2/products?page={number} |

                        | Limit | int | /api/v2/products?limit={count} |


                        ### Notes 


                        You can filter the retrieved fields by appending one of
                        the following options to your request:


                        * ?include=

                        * ?include=@summary

                        * ?exclude=


                        For details, syntax, and examples, please see the [Get a
                        Product](#get-a-product) operation.


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": 32,
                            "keyword_filter": null,
                            "name": "[Sample] Tomorrow is today, Red printed scarf",
                            "type": "physical",
                            "sku": "",
                            "description": "Densely pack your descriptions with useful information and watch products fly off the shelf.",
                            "search_keywords": null,
                            "availability_description": "",
                            "price": "89.0000",
                            "cost_price": "0.0000",
                            "retail_price": "0.0000",
                            "sale_price": "0.0000",
                            "calculated_price": "89.0000",
                            "sort_order": 0,
                            "is_visible": true,
                            "is_featured": true,
                            "related_products": "-1",
                            "inventory_level": 0,
                            "inventory_warning_level": 0,
                            "warranty": null,
                            "weight": "0.3000",
                            "width": "0.0000",
                            "height": "0.0000",
                            "depth": "0.0000",
                            "fixed_cost_shipping_price": "10.0000",
                            "is_free_shipping": false,
                            "inventory_tracking": "none",
                            "rating_total": 0,
                            "rating_count": 0,
                            "total_sold": 0,
                            "date_created": "Fri, 21 Sep 2012 02:31:01 +0000",
                            "brand_id": 17,
                            "view_count": 4,
                            "page_title": "",
                            "meta_keywords": null,
                            "meta_description": null,
                            "layout_file": "product.html",
                            "is_price_hidden": false,
                            "price_hidden_label": "",
                            "categories": [
                              14
                            ],
                            "date_modified": "Mon, 24 Sep 2012 01:34:57 +0000",
                            "event_date_field_name": "Delivery Date",
                            "event_date_type": "none",
                            "event_date_start": "",
                            "event_date_end": "",
                            "myob_asset_account": "",
                            "myob_income_account": "",
                            "myob_expense_account": "",
                            "peachtree_gl_account": "",
                            "condition": "New",
                            "is_condition_shown": false,
                            "preorder_release_date": "",
                            "is_preorder_only": false,
                            "preorder_message": "",
                            "order_quantity_minimum": 0,
                            "order_quantity_maximum": 0,
                            "open_graph_type": "product",
                            "open_graph_title": "",
                            "open_graph_description": null,
                            "is_open_graph_thumbnail": true,
                            "upc": null,
                            "avalara_product_tax_code": "",
                            "date_last_imported": "",
                            "option_set_id": null,
                            "tax_class_id": 0,
                            "option_set_display": "right",
                            "bin_picking_number": "",
                            "custom_url": "/tomorrow-is-today-red-printed-scarf/",
                            "primary_image": {
                              "id": 247,
                              "zoom_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.1280.1280.jpg?c=1",
                              "thumbnail_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.220.290.jpg?c=1",
                              "standard_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.386.513.jpg?c=1",
                              "tiny_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.44.58.jpg?c=1"
                            },
                            "availability": "available",
                            "brand": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/brands/17.json",
                              "resource": "/brands/17"
                            },
                            "images": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/images.json",
                              "resource": "/products/32/images"
                            },
                            "discount_rules": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/discountrules.json",
                              "resource": "/products/32/discountrules"
                            },
                            "configurable_fields": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/configurablefields.json",
                              "resource": "/products/32/configurablefields"
                            },
                            "custom_fields": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/customfields.json",
                              "resource": "/products/32/customfields"
                            },
                            "videos": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/videos.json",
                              "resource": "/products/32/videos"
                            },
                            "skus": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/skus.json",
                              "resource": "/products/32/skus"
                            },
                            "rules": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/rules.json",
                              "resource": "/products/32/rules"
                            },
                            "option_set": null,
                            "options": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/options.json",
                              "resource": "/products/32/options"
                            },
                            "tax_class": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/taxclasses/0.json",
                              "resource": "/taxclasses/0"
                            }
                          },
                          {
                            "id": 33,
                            "keyword_filter": null,
                            "name": "[Sample] Anna, multi-colored bangles",
                            "type": "physical",
                            "sku": "",
                            "description": "One of the best things you can do to make your store successful is invest some time in writing great product descriptions.</p>",
                            "search_keywords": null,
                            "availability_description": "",
                            "price": "59.0000",
                            "cost_price": "0.0000",
                            "retail_price": "0.0000",
                            "sale_price": "0.0000",
                            "calculated_price": "59.0000",
                            "sort_order": 0,
                            "is_visible": true,
                            "is_featured": true,
                            "related_products": "-1",
                            "inventory_level": 0,
                            "inventory_warning_level": 0,
                            "warranty": null,
                            "weight": "0.5000",
                            "width": "0.0000",
                            "height": "0.0000",
                            "depth": "0.0000",
                            "fixed_cost_shipping_price": "0.0000",
                            "is_free_shipping": false,
                            "inventory_tracking": "none",
                            "rating_total": 0,
                            "rating_count": 0,
                            "total_sold": 0,
                            "date_created": "Fri, 21 Sep 2012 02:46:41 +0000",
                            "brand_id": 18,
                            "view_count": 12,
                            "page_title": "",
                            "meta_keywords": null,
                            "meta_description": null,
                            "layout_file": "product.html",
                            "is_price_hidden": false,
                            "price_hidden_label": "",
                            "categories": [
                              14
                            ],
                            "date_modified": "Mon, 24 Sep 2012 05:28:02 +0000",
                            "event_date_field_name": "Delivery Date",
                            "event_date_type": "none",
                            "event_date_start": "",
                            "event_date_end": "",
                            "myob_asset_account": "",
                            "myob_income_account": "",
                            "myob_expense_account": "",
                            "peachtree_gl_account": "",
                            "condition": "New",
                            "is_condition_shown": false,
                            "preorder_release_date": "",
                            "is_preorder_only": false,
                            "preorder_message": "",
                            "order_quantity_minimum": 0,
                            "order_quantity_maximum": 0,
                            "open_graph_type": "product",
                            "open_graph_title": "",
                            "open_graph_description": null,
                            "is_open_graph_thumbnail": true,
                            "upc": null,
                            "avalara_product_tax_code": "",
                            "date_last_imported": "",
                            "option_set_id": 13,
                            "tax_class_id": 0,
                            "option_set_display": "right",
                            "bin_picking_number": "",
                            "custom_url": "/anna-multi-colored-bangles/",
                            "primary_image": {
                              "id": 245,
                              "zoom_url": "https://cdn.url.path/bcapp/et7xe3pz/products/33/images/245/HERO_cocolee_anna_92865__20303.1393831046.1280.1280.jpg?c=1",
                              "thumbnail_url": "https://cdn.url.path/bcapp/et7xe3pz/products/33/images/245/HERO_cocolee_anna_92865__20303.1393831046.220.290.jpg?c=1",
                              "standard_url": "https://cdn.url.path/bcapp/et7xe3pz/products/33/images/245/HERO_cocolee_anna_92865__20303.1393831046.386.513.jpg?c=1",
                              "tiny_url": "https://cdn.url.path/bcapp/et7xe3pz/products/33/images/245/HERO_cocolee_anna_92865__20303.1393831046.44.58.jpg?c=1"
                            },
                            "availability": "available",
                            "brand": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/brands/18.json",
                              "resource": "/brands/18"
                            },
                            "images": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/33/images.json",
                              "resource": "/products/33/images"
                            },
                            "discount_rules": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/33/discountrules.json",
                              "resource": "/products/33/discountrules"
                            },
                            "configurable_fields": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/33/configurablefields.json",
                              "resource": "/products/33/configurablefields"
                            },
                            "custom_fields": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/33/customfields.json",
                              "resource": "/products/33/customfields"
                            },
                            "videos": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/33/videos.json",
                              "resource": "/products/33/videos"
                            },
                            "skus": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/33/skus.json",
                              "resource": "/products/33/skus"
                            },
                            "rules": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/33/rules.json",
                              "resource": "/products/33/rules"
                            },
                            "option_set": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/optionsets/13.json",
                              "resource": "/optionsets/13"
                            },
                            "options": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/33/options.json",
                              "resource": "/products/33/options"
                            },
                            "tax_class": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/taxclasses/0.json",
                              "resource": "/taxclasses/0"
                            }
                          }
                        ]

                        ```
                      header:
                        anchor: v2-products_list-products
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Product 


                        Gets a product.
                         
                        > `GET /stores/{store_hash}/v2/products/{id}`


                        ### Notes 


                        You can filter the retrieved fields by appending one of
                        the following options to your request: 


                        - `?include=`

                        - `?include=@summary` 

                        - `?exclude=`


                        In particular, you can reduce payload size, and improve
                        performance, by excluding the `description` field.


                        ### Mandatory Fields 


                        However, the following fields are always present on
                        product API requests, and cannot be excluded:


                        - `id`

                        - `name`

                        - `date_modified`

                        - `primary_image`


                        ### include 


                        The following sample request will retrieve *only* the
                        specified `date_created`, `price`, and `cost_price`
                        fields, plus the mandatory fields listed just above:


                        ```

                        https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32?include=date_created,price,cost_price

                        ```


                        Here is a corresponding sample response:


                        ```

                        {
                            "id": 32,
                            "name": "[Sample] Tomorrow is today, Red printed scarf",
                            "price": "89.0000",
                            "cost_price": "0.0000",
                            "date_created": "Fri, 21 Sep 2012 02:31:01 +0000",
                            "date_modified": "Thu, 10 Dec 2015 21:10:17 +0000",
                            "primary_image": {
                                "id": 247,
                                "tiny_url": "https://cdn.url.path/bcapp/k84uuwpy/products/32/images/247/in_123__14581.1348449270.60.90.jpg?c=1",
                                "standard_url": "https://cdn.url.path/bcapp/k84uuwpy/products/32/images/247/in_123__14581.1348449270.500.750.jpg?c=1",
                                "thumbnail_url": "https://cdn.url.path/bcapp/k84uuwpy/products/32/images/247/in_123__14581.1348449270.190.285.jpg?c=1",
                                "zoom_url": "https://cdn.url.path/bcapp/k84uuwpy/products/32/images/247/in_123__14581.1348449270.1280.1280.jpg?c=1"
                            },
                            "metadata": []
                        }

                        ```


                        ### include=@summary 


                        The `?include=@summary` option retrieves the following
                        predefined subset of fields, in addition to the
                        [mandatory fields](#get-a-product-mandatory) listed
                        above: 


                        - `availability`

                        - `calculated_price`

                        - `inventory_tracking`

                        - `sku`

                        - `inventory_level`

                        - `inventory_warning_level`

                        - `is_visible`

                        - `is_featured` 


                        Here is a sample request with the `?include=@summary`
                        option appended:


                        ```

                        https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32?include=@summary

                        ```


                        Here is a corresponding sample response:


                        ```

                        {
                            "id": 32,
                            "name": "[Sample] Tomorrow is today, Red printed scarf",
                            "sku": "TTRPS",
                            "calculated_price": "89.0000",
                            "is_visible": true,
                            "is_featured": true,
                            "inventory_level": 0,
                            "inventory_warning_level": 0,
                            "inventory_tracking": "none",
                            "date_modified": "Thu, 10 Dec 2015 21:10:17 +0000",
                            "availability": "available",
                            "primary_image": {
                                "id": 247,
                                "tiny_url": "https://cdn.url.path/bcapp/k84uuwpy/products/32/images/247/in_123__14581.1348449270.60.90.jpg?c=1",
                                "standard_url": "https://cdn.url.path/bcapp/k84uuwpy/products/32/images/247/in_123__14581.1348449270.500.750.jpg?c=1",
                                "thumbnail_url": "https://cdn.url.path/bcapp/k84uuwpy/products/32/images/247/in_123__14581.1348449270.190.285.jpg?c=1",
                                "zoom_url": "https://cdn.url.path/bcapp/k84uuwpy/products/32/images/247/in_123__14581.1348449270.1280.1280.jpg?c=1"
                            },
                            "metadata": []
                        }

                        ```


                        ### exclude 


                        The `?exclude=` option excludes one or more specified
                        fields. However, you cannot exclude the mandatory `id`,
                        `name`, `date_modified`, or `primary_image` fields.


                        Here is a sample request with the `?exclude=` option
                        appended:


                        ```

                        https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32?exclude=description

                        ```


                        We have omitted the corresponding sample response.
                        However, the following section shows a complete sample
                        response for a request submitted with no `?include` or
                        `?exclude` option. (The effect of the
                        `?exclude=description` option shown above would be to
                        omit the `"description": ` field shown as the sixth
                        field below.)



                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 32,
                          "keyword_filter": null,
                          "name": "[Sample] Tomorrow is today, Red printed scarf",
                          "type": "physical",
                          "sku": "",
                          "description": "Densely pack your descriptions with useful information and watch products fly off the shelf.",
                          "search_keywords": null,
                          "availability_description": "",
                          "price": "89.0000",
                          "cost_price": "0.0000",
                          "retail_price": "0.0000",
                          "sale_price": "0.0000",
                          "calculated_price": "89.0000",
                          "sort_order": 0,
                          "is_visible": true,
                          "is_featured": true,
                          "related_products": "-1",
                          "inventory_level": 0,
                          "inventory_warning_level": 0,
                          "warranty": null,
                          "weight": "0.3000",
                          "width": "0.0000",
                          "height": "0.0000",
                          "depth": "0.0000",
                          "fixed_cost_shipping_price": "10.0000",
                          "is_free_shipping": false,
                          "inventory_tracking": "none",
                          "rating_total": 0,
                          "rating_count": 0,
                          "total_sold": 0,
                          "date_created": "Fri, 21 Sep 2012 02:31:01 +0000",
                          "brand_id": 17,
                          "view_count": 4,
                          "page_title": "",
                          "meta_keywords": null,
                          "meta_description": null,
                          "layout_file": "product.html",
                          "is_price_hidden": false,
                          "price_hidden_label": "",
                          "categories": [
                            14
                          ],
                          "date_modified": "Mon, 24 Sep 2012 01:34:57 +0000",
                          "event_date_field_name": "Delivery Date",
                          "event_date_type": "none",
                          "event_date_start": "",
                          "event_date_end": "",
                          "myob_asset_account": "",
                          "myob_income_account": "",
                          "myob_expense_account": "",
                          "peachtree_gl_account": "",
                          "condition": "New",
                          "is_condition_shown": false,
                          "preorder_release_date": "",
                          "is_preorder_only": false,
                          "preorder_message": "",
                          "order_quantity_minimum": 0,
                          "order_quantity_maximum": 0,
                          "open_graph_type": "product",
                          "open_graph_title": "",
                          "open_graph_description": null,
                          "is_open_graph_thumbnail": true,
                          "upc": null,
                          "avalara_product_tax_code": "",
                          "date_last_imported": "",
                          "option_set_id": null,
                          "tax_class_id": 0,
                          "option_set_display": "right",
                          "bin_picking_number": "",
                          "custom_url": "/tomorrow-is-today-red-printed-scarf/",
                          "primary_image": {
                            "id": 247,
                            "zoom_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.1280.1280.jpg?c=1",
                            "thumbnail_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.220.290.jpg?c=1",
                            "standard_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.386.513.jpg?c=1",
                            "tiny_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.44.58.jpg?c=1"
                          },
                          "availability": "available",
                          "brand": {
                            "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/brands/17.json",
                            "resource": "/brands/17"
                          },
                          "images": {
                            "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/images.json",
                            "resource": "/products/32/images"
                          },
                          "discount_rules": {
                            "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/discountrules.json",
                            "resource": "/products/32/discountrules"
                          },
                          "configurable_fields": {
                            "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/configurablefields.json",
                            "resource": "/products/32/configurablefields"
                          },
                          "custom_fields": {
                            "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/customfields.json",
                            "resource": "/products/32/customfields"
                          },
                          "videos": {
                            "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/videos.json",
                            "resource": "/products/32/videos"
                          },
                          "skus": {
                            "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/skus.json",
                            "resource": "/products/32/skus"
                          },
                          "rules": {
                            "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/rules.json",
                            "resource": "/products/32/rules"
                          },
                          "option_set": null,
                          "options": {
                            "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/options.json",
                            "resource": "/products/32/options"
                          },
                          "tax_class": {
                            "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/taxclasses/0.json",
                            "resource": "/taxclasses/0"
                          }
                        }

                        ```
                      header:
                        anchor: v2-products_get-products
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Product Count 


                        Gets a count of products.


                        > `GET /stores/{store_hash}/v2/products/count`


                        ### Filters 


                        Filter parameters can be added to the URL query string
                        to select specific products in the collection.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | min_id | int | /api/v2/products?min_id={value} |

                        | max_id | int | /api/v2/products?max_id={value} |

                        | name | string | /api/v2/products?name={value} |

                        | keyword_filter | string |
                        /api/v2/products?keyword_filter={value} |

                        | description | string |
                        /api/v2/products?description={value} |

                        | sku | string | /api/v2/products?sku={value} |

                        | condition | string |
                        /api/v2/products?condition={value} |

                        | availability | string |
                        /api/v2/products?availability={value} |

                        | brand_id | string | /api/v2/products?brand_id={value}
                        |

                        | min_date_created | date |
                        /api/v2/products?min_date_created={value} |

                        | max_date_created | date |
                        /api/v2/products?max_date_created={value} |

                        | min_date_modified | date |
                        /api/v2/products?min_date_modified={value} |

                        | max_date_modified | date |
                        /api/v2/products?max_date_modified={value} |

                        | min_date_last_imported | date |
                        /api/v2/products?min_date_last_imported={value} |

                        | max_date_last_imported | date |
                        /api/v2/products?max_date_last_imported={value} |

                        | min_price | decimal |
                        /api/v2/products?min_price={value} |

                        | max_price | decimal |
                        /api/v2/products?max_price={value} |

                        | min_number_sold | int |
                        /api/v2/products?min_number_sold={value} |

                        | max_number_sold | int |
                        /api/v2/products?max_number_sold={value} |

                        | is_visible | string |
                        /api/v2/products?is_visible={value} |

                        | is_featured | string |
                        /api/v2/products?is_featured={value} |

                        | min_inventory_level | int |
                        /api/v2/products?min_inventory_level={value} |

                        | max_inventory_level | int |
                        /api/v2/products?max_inventory_level={value} |

                        | include_sku | boolean |
                        /api/v2/products?include_sku={value} |

                        | category | string | /api/v2/products?category={value}
                        |

                        | product_tax_code | string |
                        /api/v2/products?product_tax_code={value} |


                        ### Notes 


                        If no filters are applied, the total number of products
                        is returned.


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "count": 44
                        }

                        ```
                      header:
                        anchor: v2-products_get-count-products
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create a Product 


                        Creates a new product. The example request shows how to
                        create a basic product by sending a product object with
                        the minimum required properties.


                        > `POST /stores/{store_hash}/v2/products`


                        ### Read-only Properties 


                        The following properties of the product are read-only.
                        If one or more of these properties are included in the
                        request, it will be rejected.


                        *   id

                        *   calculated_price

                        *   brand

                        *   images

                        *   discount_rules

                        *   configurable_fields

                        *   custom_fields

                        *   primary_image

                        *   videos

                        *   skus

                        *   rules

                        *   option_set

                        *   options

                        *   tax_class


                        ### Requirements 


                        The following properties of the product are required.
                        The request won’t be fulfilled unless these properties
                        are valid.


                        *   name

                        *   price

                        *   categories

                        *   type

                        *   availability

                        *   weight


                        ### Notes 


                        Create a request by sending a [product
                        object](#product-object-properties) with the minimum
                        required properties:


                        ```

                        {
                            "name": "Plain T-Shirt",
                            "type": "physical",
                            "description": "This timeless fashion staple will never go out of style!",
                            "price": "29.99",
                            "categories": [18],
                            "availability": "available",
                            "weight": "0.5"
                        }

                        ```


                        When the `is_visible` property is not provided, the
                        product's visibility is `false` by default.


                        To make newly created products immediately visible on
                        the storefront, you must set `is_visible` to `true` when
                        you create each product.


                        To maximize system performance, BigCommerce caps the
                        number of categories to which a product can belong. The
                        maximum is 1,000. If your `POST` includes an array of
                        more than 1,000 `categories` ID values, BigCommerce will
                        return a 403 error:


                        ```

                        403 Access Denied/Forbidden

                        ```


                        If automatic tax is enabled on the store, the value of
                        `tax_class_id` will have no effect on the calculation of
                        taxes.
                      header:
                        anchor: v2-products_create-products
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Update a Product 


                        Updates an existing product.


                        > `PUT /stores/{store_hash}/v2/products/{id}`


                        ### Read-only Properties 


                        The following properties of the product are read-only.
                        If one or more of these properties are included in the
                        request, it will be rejected.


                        *   id

                        *   rating_total

                        *   rating_count

                        *   number_sold

                        *   date_created

                        *   date_modified

                        *   date_last_imported

                        *   calculated_price

                        *   brand

                        *   images

                        *   discount_rules

                        *   configurable_fields

                        *   custom_fields

                        *   primary_image

                        *   videos

                        *   skus

                        *   rules

                        *   option_set

                        *   options

                        *   tax_class


                        ### Requirements 


                        There are no required properties when updating a
                        product.


                        ### Notes 


                        To update a product, set one or more product properties
                        in the `PUT` request:


                        ```

                        {
                            "custom_url": "/plain-tshirt/",
                            "is_visible": true
                        }

                        ```


                        For example, you can use a `PUT` to link a product to an
                        option set:


                        ```

                        {
                            "option_set_id": 14
                        }

                        ```


                        Invalid property values will produce a `400 Bad Request`
                        error response:


                        ### Request 


                        ``` 

                        {
                            "condition": "Worn"
                        }

                        ```


                        ### Response 


                        ```

                        400 Bad Request

                        ```


                        Trying to set read-only properties will also produce a
                        `400 Bad Request` error response:


                        ### Request 


                        ```

                        {
                            "number_sold": 99
                        }

                        ```


                        ### Response 


                        ```

                        400 Bad Request

                        ```


                        To maximize system performance, BigCommerce caps the
                        maximum number of categories to which a product can
                        belong, at 1,000. If your `PUT` includes an array of
                        more than 1,000 `categories` ID values, BigCommerce will
                        return a `403` error:


                        ```

                        403 Access Denied/Forbidden

                        ```


                        If automatic tax is enabled on the store, the value of
                        `tax_class_id` will have no effect on the calculation of
                        taxes.
                      header:
                        anchor: v2-products_update-products
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete a Product 


                        Deletes a product.


                        > `DELETE /stores/{store_hash}/v2/products/{id}`


                        ### Notes 


                        Successful deletion of a product returns a `204 No
                        Content` response:


                        ```

                        204 No Content

                        ```
                      header:
                        anchor: v2-products_delete-products
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete All Products 


                        Deletes all products from the store.


                        > `DELETE /stores/{store_hash}/v2/products`


                        ### Notes 


                        Successful deletion of all products returns a `204 No
                        Content` response:


                        ```

                        204 No Content

                        ```
                      header:
                        anchor: v2-products_delete-all-products
              - title: Brands
                route:
                  path: /v2-brands
                data:
                  blocks:
                    - type: html
                      data: "<h1>Brands</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#v2-brands_object-properties\">Object Properties</a></li>\n\t\t<li><a href=\"#v2-brands_list-brands\">List Brands</a></li>\n\t\t<li><a href=\"#v2-brands_get-brands\">Get a Brand</a></li>\n    <li><a href=\"#v2-brands_get-count-brands\">Get a Count of Brands</a></li>\n    <li><a href=\"#v2-brands_create-brands\">Create a Brand</a></li>\n    <li><a href=\"#v2-brands_update-brands\">Update A Brand</a></li>\n    <li><a href=\"#v2-brands_delete-brands\">Delete a Brand</a></li>\n    <li><a href=\"#v2-brands_delete-all-brands\">Delete All Brands</a></li>\n\t\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Brands 


                        Brand facets for identifying and categorizing products
                        according to their manufacturer or company metonym.


                        ### Brand Object – Properties 


                        | Name | Type | Description |

                        | --- | --- | --- |

                        | id | int |

                        | name | string | The name of the brand. Must be unique.
                        |

                        | page_title | string | The title shown in the browser
                        while viewing the brand. |

                        | meta_keywords | text | Comma-separated list of meta
                        keywords to include in the HTML. |

                        | meta_description | text | A meta description to
                        include. |

                        | image_file | string | A valid image. |

                        | s
                      header:
                        anchor: v2-brands_object-properties
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## List Brands 


                        Gets the collection of brands. (Default sorting is by
                        brand id, from lowest to highest.)


                        >`GET /stores/{store_hash}/v2/brands`


                        ### Filters 


                        Filter parameters can be added to the URL query string
                        to select specific brands in the collection.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | name | string | /api/v2/brands?name={value} |

                        | min_id | int | /api/v2/brands?min_id={value} |

                        | max_id | int | /api/v2/brands?max_id={value} |


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, BigCommerce returns up to 50
                        brands by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | Page | int | /api/v2/brands?page={number} |

                        | Limit | int | /api/v2/brands?limit={count} |


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": 1,
                            "name": "Apple",
                            "page_title": "",
                            "meta_keywords": "",
                            "meta_description": "",
                            "image_file": "",
                            "search_keywords": ""
                          },
                          {
                            "id": 2,
                            "name": "Microsoft",
                            "page_title": "",
                            "meta_keywords": "",
                            "meta_description": "",
                            "image_file": "",
                            "search_keywords": ""
                          }
                        ]

                        ```
                      header:
                        anchor: v2-brands_list-brands
                    - type: text
                      data: '---'
                    - type: text
                      data: |-
                        ## Get a Brand 

                        Gets a brand.


                        >`GET /stores/{store_hash}/v2/brands/{id}`


                        ### Response 

                        Example JSON returned in the response:

                        ```
                        {
                          "id": 1,
                          "name": "Apple",
                          "page_title": "",
                          "meta_keywords": "",
                          "meta_description": "",
                          "image_file": "",
                          "search_keywords": ""
                        }
                        ```
                      header:
                        anchor: v2-brands_get-brands
                    - type: text
                      data: '---'
                    - type: text
                      data: |-
                        ## Get a Count of Brands 

                        Returns the total number of brands in the store.

                        >`GET /stores/{store_hash}/v2/brands/count`

                        ### Response 

                        Example JSON returned in the response:

                        ```
                        {
                          "count": 25
                        }
                        ```
                      header:
                        anchor: v2-brands_get-count-brands
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create a Brand 


                        Creates a new brand.


                        >`POST /stores/{store_hash}/v2/brands`



                        ### Read-only Properties 


                        The following properties of the brand are read-only. If
                        one or more of these properties are included in the
                        request, it will be rejected.


                        *   id


                        ### Requirements 


                        The following properties of the brand are required. The
                        request won’t be fulfilled unless these properties are
                        valid.


                        *   name


                        ### Notes 


                        To maximize system performance, BigCommerce caps the
                        number of brands that can be added to a store at 30,000.
                        If your POST causes the store to exceed the maximum of
                        30,000 brands, BigCommerce will return a 403 error.


                        ### Request 


                        Example request object:


                        ```

                        {
                          "name": "Xmen",
                          "page_title": "X men brand"
                        }

                        ```


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 10,
                          "name": "Xmen",
                          "page_title": "X men brand",
                          "meta_keywords": null,
                          "meta_description": null,
                          "image_file": "",
                          "search_keywords": ""
                        }

                        ```
                      header:
                        anchor: v2-brands_create-brands
                    - type: text
                      data: '---'
                    - type: text
                      data: >-

                        ## Update a Brand 


                        Updates an existing brand.



                        >`PUT /stores/{store_hash}/v2/brands/{id}`



                        ### Read-only Properties 


                        The following properties of the brand are read-only. If
                        one or more of these properties are included in the
                        request, it will be rejected.


                        *   id


                        ### Requirements 


                        The following properties of the brand are required. The
                        request won’t be fulfilled unless these properties are
                        valid.


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 10,
                          "name": "Xmen",
                          "page_title": "X men brand",
                          "meta_keywords": null,
                          "meta_description": null,
                          "image_file": "t/apirmzk0a__43675.jpg",
                          "search_keywords": "xmen, awesomeness"
                        }

                        ```
                      header:
                        anchor: v2-brands_update-brands
                    - type: text
                      data: '---'
                    - type: text
                      data: |-
                        ## Delete a Brand 

                        Deletes a brand.

                        >`DELETE /stores/{store_hash}/v2/brands/{id}`
                      header:
                        anchor: 2-brands_delete-brands
                    - type: text
                      data: '---'
                    - type: text
                      data: |-
                        ## Delete All Brands 

                        Deletes all brands belonging to a product.

                        >`DELETE /stores/{store_hash}/v2/brands`
                      header:
                        anchor: v2-brands_delete-all-brands
        - title: Blueprint Themes
          route:
            path: /blueprint-themes
          data:
            children:
              - title: reCAPTCHA v2
                route:
                  path: /recaptcha-two
                data:
                  blocks:
                    - type: html
                      data: "<h1>ReCaptcha 2</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#better-spam-deterrance\">Better Spam Deterrance</a></li>\n\t\t<li><a href=\"#blueprint-how-to-upgrade-recaptcha\">How to Upgrade</a></li>\n\t\t<li><a href=\"#blueprint-supported-browsers\">Supported Browsers</a></li>\n\t\t</ul>\n</div>"
                    - type: text
                      data: >-
                        To deter spam submission through storefront forms,
                        BigCommerce now supports Google [reCAPTCHA
                        v2](https://support.google.com/recaptcha/?hl=en#6080933)
                        challenges, to distinguish human customers/visitors from
                        automated bots.
                      header: {}
                    - type: text
                      data: >
                        ## Better Spam Deterrence


                        We recommend that all storefront themes take advantage
                        of this upgraded bot detection. However, BigCommerce's
                        legacy Blueprint themes were last published in our Theme
                        Marketplace before we implemented reCAPTCHA v2.
                        Therefore, please use the following instructions to
                        update your Blueprint-based theme with the
                        best-available deterrent against automated spam.
                      header:
                        anchor: better-spam-deterrance
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## How to Upgrade


                        To incorporate reCAPTCHA v2, you will need to update
                        script references in these three template files: 


                        * `Panels/CreateAccountForm.html`

                        * `page_contact_form.html`

                        * `product_comments.html`
                      header:
                        anchor: blueprint-how-to-upgrade-recaptcha
                    - type: callout
                      data:
                        type: error
                        body: >-
                          Please back up each file before making any changes. 


                          The instructions below are based on the default
                          Blueprint theme (Classic Next), as it was last
                          published in BigCommerce’s Theme Marketplace.
                          Therefore, the HTML markup will vary, based on
                          customizations you have already made to this theme, or
                          to other Marketplace themes.
                        title: |2
                           Updating Safely 
                    - type: text
                      data: >-
                        ### Script Tag to Remove

                        Search each of the three template files for a
                        ``<script>`` tag like the following. If you find it,
                        delete the whole tag. (This script invokes a legacy
                        reCAPTCHA v1 challenge:)
                    - type: code
                      data: |-
                        <script type="text/javascript"> 
                         var RecaptchaOptions = { 
                         theme : 'clean' or 'white' 
                         }; 
                         </script>
                      header:
                        title: Script Tag to Remove
                      config:
                        mode: html
                    - type: text
                      data: >+
                        ### Variable to Remove


                        Alternately, you might see the same `RecaptchaOptions`
                        variable inside a different `<script>` tag at the top of
                        the same three templates. If so, delete the lines shown
                        here:

                    - type: code
                      data: |
                        var RecaptchaOptions = { 
                         theme : 'clean' or 'white'
                         };
                      config:
                        mode: js
                    - type: text
                      data: >-
                        ### reCAPTCHA Script to Update


                        Next, in each of the three template files, replace the
                        "before" code block just below with the simplified
                        "after" code that follows.



                        #### Replace this (before):
                      header: {}
                    - type: code
                      data: >-
                        <script type="text/javascript"

                        src="https://www.google.com/recaptcha/api/challenge?k=%%GLOBAL_ReCaptchaAPIKeyPublic%%">

                        </script>


                        <noscript>

                        <iframe
                        src="https://www.google.com/recaptcha/api/noscript?k=%%GLOBAL_ReCaptchaAPIKeyPublic%%"

                        height="300" width="500" frameborder="0"></iframe>

                        <br>

                        <textarea name="recaptcha_challenge_field" rows="3"
                        cols="40">

                        </textarea>

                        <input type="hidden" name="recaptcha_response_field"

                        value="manual_challenge">

                        </noscript>
                      config:
                        mode: html
                    - type: text
                      data: |
                        #### ...with this (after):
                    - type: code
                      data: |
                        %%GLOBAL_ReCaptchaMarkup%%
                      config:
                        mode: java
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Supported Browsers 


                        Below are the browsers supported for the BigCommerce
                        control panel. We drop support when a version falls
                        below 2% of usage. The browsers are sorted by
                        popularity, with the most popular browsers at the top.


                        | Desktop |

                        | --- |

                        | Chrome latest |

                        | Firefox latest |

                        | Internet Explorer 11 or later |

                        | Safari latest |


                        For a current list of target browsers (desktop and
                        mobile) that BigCommerce supports for _storefronts_
                        using our themes, please see <NOBR><a
                        href="https://forum.bigcommerce.com/s/article/Themes-Supported-Browsers"
                        target="_blank">this support page</a>.</nobr>
                      header:
                        anchor: blueprint-supported-browsers
              - title: Anatomy of a Theme
                route:
                  path: /anatomy-of-a-theme
                data:
                  blocks:
                    - type: html
                      data: "<h1>Anatomy of a Theme</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3>On This Page</h3>\n\t<ul>\n\t\t<li><a href=\"#directory-structure\">Directory Structure</a></li>\n\t\t<li><a href=\"#blueprint-images\">Images</a></li>\n\t\t<li><a href=\"#blueprint-layouts\">Layouts</a></li>\n    <li><a href=\"#blueprint-panels\">Panels</a></li>\n    <li><a href=\"#blueprint-snippets\">Snippets</a></li>\n    <li><a href=\"#blueprint-styles\">Styles</a></li>\n\t\t</ul>\n</div>"
                    - type: text
                      data: >-
                        Themes are built using a powerful template system that
                        enables designers and developers familiar with CSS and
                        HTML to modify the presentation and structure of a
                        BigCommerce store.
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Directory Structure


                        Theme files that apply to a store design are organized
                        in several different directories, as follows:


                        *   **Images**

                        *   **Panels**

                        *   **Snippets**

                        *   **Styles**
                      header:
                        anchor: directory-structure
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Images


                        Theme specific static images (referenced from CSS, or in
                        image tags).
                      header:
                        anchor: blueprint-images
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Layouts


                        Layout templates provide the base HTML structure that
                        wraps storefront page content. Each layout file
                        corresponds to a specific page.


                        For example, `product.html` refers to the page that’s
                        shown when a customer is viewing the details of a
                        product.


                        Most layout files contain nothing more than references
                        to individual panels to be shown on a page. These panels
                        are contained in div tags that generally define left,
                        center, or right columns of the page.
                      header:
                        anchor: blueprint-layouts
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Panels


                        Panels provide reusable blocks or dynamic sections of
                        content.


                        For example, the `SideCategoryList` panel builds a list
                        of categories to be shown throughout the store.


                        Panels are generally referenced directly from layout
                        templates. They define which content should be shown on
                        a particular page and handle the generation of that
                        specific content.


                        Some panels contain strictly static content (such as the
                        store name) whilst others generate content dynamically.
                        Dynamically generated panels cannot be created ad-hoc as
                        they are linked to specific data and logic within the
                        application.
                      header:
                        anchor: blueprint-panels
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Snippets


                        Snippets are templates containing a fragment of HTML
                        that can be embedded multiple times in a page, either
                        from direct references or from being part of a loop that
                        iterates over the items in a list.


                        For example, the `HomeFeaturedProductsItem` snippet
                        renders each individual product listed in the
                        `HomeFeaturedProducts` panel.
                      header:
                        anchor: blueprint-snippets
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Styles


                        Primary layout stylesheets for the Theme, with
                        `styles.css` being the core file.
                      header:
                        anchor: blueprint-styles
              - title: Blueprint and Developer Mode
                route:
                  path: /blueprint-and-developer-mode
                data:
                  blocks:
                    - type: text
                      data: "<h1>Blueprint and Developer Mode</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3>On This Page</h3>\n\t<ul>\n\t\t<li><a href=\"#foundation-for-creating-themes\">A Foundation for Creating Themes</a></li>\n\t\t<li><a href=\"#setting-up-your-environment\">Setting Up Your Environment</a></li>\n\t\t</ul>\n</div>"
                    - type: callout
                      data:
                        title: Restricted/Grandfathered Access
                        body: >-
                          As of November 2016, new BigCommerce stores are being
                          offered themes exclusively from BigCommerce's new <a
                          href="https://support.bigcommerce.com/articles/Public/The-Stencil-Theme-Platform"
                          target="_blank">Stencil</a> theme platform. For
                          existing stores, the control panel's <NOBR><b>Themes
                          Marketplace</b></nobr> and <NOBR><b>My
                          Themes</b></nobr> pages will show only those Blueprint
                          themes that have been applied to the store and/or
                          purchased before November 2016. <br><br> 


                          This means that the workflow below will work only for
                          stores that have applied or purchased at least one
                          Blueprint theme before November 2016. For information
                          about developing on the current Stencil platform,
                          please see <a
                          href="https://stencil.bigcommerce.com/docs/"
                          target="_blank">this developer documentation</a>.
                        type: warning
                    - type: text
                      data: >-
                        ## A Foundation for Creating Themes 


                        Our (legacy) Blueprint "Classic Next" base theme
                        provides a starting point for creating a new theme. This
                        theme includes responsive support out-of-the-box, so it
                        works with lower resolutions like those on mobile
                        devices. The visual design has been stripped back, so
                        you can create from a clean canvas.


                        <a href="https://blueprint-demo.mybigcommerce.com"
                        target="_blank">View the demo</a>.
                      header:
                        anchor: foundation-for-creating-themes
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Setting Up Your Environment 


                        Follow these steps to start developing using the
                        Blueprint theme:


                        1.  To enable the Blueprint theme on your store, simply
                        log in to the control panel, and place
                        <NOBR>`/index.php?ToDo=viewTemplates&dev=enable`
                        </nobr>after `/admin`.<br>
                            (For example: <NOBR>`https://store-123abmy.mybigcommerce.com/admin/index.php?ToDo=viewTemplates&dev=enable`.</nobr>)
                        2.  Apply the Blueprint theme.

                        3.  Connect to the site via <a
                        href="https://forum.bigcommerce.com/s/article/File-Access-WebDAV"
                        target="_blank">WebDAV</a>.

                        4.  Once connected via WebDav, navigate to the
                        `/template/` folder, where you will have access to all
                        the files that make up a theme.

                        5.  To make a change to a file, just download the file,
                        edit it, and then upload your altered version.

                        6.  Every time you make changes to any files, you will
                        need to upload them through WebDAV for the changes to be
                        reflected on your site.
                      header:
                        anchor: setting-up-your-environment
              - title: Theme Update Process
                route:
                  path: /blueprint-theme-update-process
                data:
                  blocks:
                    - type: html
                      data: "<h1>Theme Update Process</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3>On This Page</h3>\n\t<ul>\n\t\t<li><a href=\"#theme-update-prerequisites\">Prerequisites</a></li>\n\t\t<li><a href=\"#blueprint-theme-update-process\">Update Process</a></li>\n    <li><a href=\"#theme-update-other-requirements\">Requirements</a></li>\n  \n\t\t</ul>\n</div>"
                    - type: text
                      data: >-
                        Here is how BigCommerce and our partners collaborate to
                        integrate a partner's theme changes/updates into the
                        BigCommerce Theme Marketplace (which merchants also know
                        as our "theme store"):
                    - type: text
                      data: >-
                        ## Prerequisites 


                        Integrating a partner's theme changes requires these
                        preconditions:


                        *   Partner has an existing theme in the BigCommerce
                        Theme Marketplace.


                        *   BigCommerce sets up a Theme Development store (or
                        converts an existing regular store) and applies the
                        theme. All theme files will automatically be copied into
                        the WebDAV `/template/` directory.
                      header:
                        anchor: theme-update-prerequisites
                    - type: callout
                      data:
                        title: Template Path Abstracted
                        body: >
                          The Theme Development store resolves the
                          %%GLOBAL_TPL_PATH%% variable into /template/.
                          Therefore, assets will be pulled from the /template/
                          directory, which is accessible via WebDAV or via the
                          BigCommerce control panel.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Update Process 


                        1.  The partner switches on Theme Development mode, by
                        using:  

                        `http://<STORE>/admin/index.php?ToDo=viewTemplates&dev=enable`.

                        2.  The partner asks BigCommerce to switch a theme.
                        (Partners currently cannot switch it directly, because
                        it’s a paid theme.)
                      header:
                        anchor: blueprint-theme-update-process
                    - type: callout
                      data:
                        type: error
                        body: >-
                          This step will wipe out all files in the /template/
                          directory and copy in the latest version of the
                          integrated theme.
                    - type: text
                      data: >-
                        3.  The partner pulls changes from BigCommerce's GitHub
                        fork, to get the most recent version onto their local
                        machine as well.

                        4.  The partner makes appropriate changes to CSS/HTML
                        files.

                        5.  The partner commits their changes into the feature
                        branch, and opens a pull request against the BigCommerce
                        fork.
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          If BigCommerce made conflicting changes (which should
                          happen only when resolving urgent issues), the partner
                          might need to rebase changes (using git rebase master)
                          in order to resolve the conflicts.
                    - type: text
                      data: >-
                        6.  Partner [emails](mailto:themestore@bigcommerce.com)
                        their Git URL to the BigCommerce Theme Marketplace.

                        7.  BigCommerce integrates changes into BigCommerce
                        Themes.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Other Requirements 


                        *   Partners must not change the repository's directory
                        structure or directory names.

                        *   Files should have permission 644 (`rw-r–r–`).

                        *   Directories should have permission 755
                        (`drwxr-x-r-x`).
                      header:
                        anchor: theme-update-other-requirements
              - title: Style Editor
                route:
                  path: /style-editor
                data:
                  blocks:
                    - type: html
                      data: "<h1>Style Editor</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3>On This Page</h3>\n\t<ul>\n\t\t<li><a href=\"#what-is-lessjs\">What is Less.js?</a></li>\n\t\t<li><a href=\"#integrating-theme-style-editor\">Integrating a Theme with the Style Editor</a></li>\n\t\t<li><a href=\"#testing-style-editor-with-theme\">Testing Style Editor with Your Theme</a></li>\n \n\t\t</ul>\n</div>"
                    - type: text
                      data: >
                        Style Editor allows users to customize the look and feel
                        of their BigCommerce store, without needing to know HTML
                        or CSS conventions. Using a simple WYSIWYG interface,
                        users can edit colors and fonts, then see the changes
                        simultaneously in a live preview.


                        Style Editor uses Less.js as a CSS preprocessor. This
                        allows Style Editor to take advantage of variables and
                        other functions to ensure design consistency.
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## What Is Less.js? 


                        Less (formally, Less.js) is a CSS preprocessor that
                        allows theme designers to use advanced functions and
                        programming principles in their CSS. A JavaScript
                        compiler runs over the Less files, and converts them
                        into usable CSS that can be included in themes.


                        For more information on examples, techniques, and how to
                        install Less, please see <a href="http://lesscss.org/"
                        target="_blank">lesscss.org</a>.
                      header:
                        anchor: what-is-lessjs
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Integrating a Theme with the Style Editor 


                        The Style Editor uses a specific group of files to build
                        its user interface, and to compile and generate the
                        stylesheet. BigCommerce’s base developer theme,
                        Blueprint, already contains these out-of-the-box. The
                        files are stored in the `Styles/less` directory.


                        The Style Editor depends on these files:


                        *   `style-editor-variables.less`

                        *   `internal-variables.less`

                        *   `init.less`

                        *   `theme.less`


                        ### style-editor-variables.less 


                        Style Editor uses this file to generate its user
                        interface. Here, you can enter variables for colours,
                        fonts and numbers that will help the merchant customize
                        the design of the theme. You can separate these
                        variables out into sections with headings to help
                        categorize the variables in a logical manner. No actual
                        CSS is written in this file.


                        There are some syntax patterns involved that Style
                        Editor will understand to help you customize the UI.
                        Special syntax:


                        `@color-your-text-here` — This is the naming convention
                        for a color variable. The style editor will generate
                        this as a color picker, with the value of the variable
                        set as the color picker’s default hexadecimal color
                        value.


                        For example:
                      header:
                        anchor: integrating-theme-style-editor
                    - type: code
                      data: '@color-header-background: #FFFFFF;'
                      config:
                        mode: css
                    - type: text
                      data: >-
                        This will generate a color picker with the label “Header
                        Background”, set to #FFFFFF (white) by default.


                        `@font-your-text-here` — This is the naming convention
                        for a font variable. The style editor will generate this
                        as a dropdown, preloaded with your theme’s predefined
                        fonts. The variable’s value will be preselected.


                        For example:
                    - type: code
                      data: '@font-page-text: "Open Sans",Helvetica,Arial,sans-serif;'
                      config:
                        mode: css
                    - type: text
                      data: >-
                        This will generate a dropdown with the label “Page
                        Text”, and with the “Open Sans” font preselected. The
                        dropdown’s other options will be the predefined list of
                        fonts you’ve provided.


                        `@font-declaration` — This variable will store all the
                        default fonts (and their fallbacks) for the style
                        editor. It will use these fonts in the font dropdown
                        mentioned in the above point.


                        For example:
                    - type: code
                      data: >
                        @font-declaration: '{ "Lato":["Lato", "Arial",
                        "sans-serif"], "Freckle Face":["Freckle Face",
                        "cursive"]}';
                      config:
                        mode: css
                    - type: text
                      data: >-
                        This will populate all font drop-downs with the fonts
                        “Lato” and “Freckle Face,” and if one of them is
                        selected, the fonts for that variable will be set to the
                        values in the corresponding array of fonts. For example,
                        “Lato” will set the fonts to “Lato”, Arial, sans-serif.


                        To use these fonts in the Style Editor, they must be
                        included in the style editor variables file through an
                        import. For the above example, you would include the
                        styles from Google Fonts like so:
                    - type: code
                      data: >
                        @import
                        url(//fonts.googleapis.com/css?family=Lato|Freckle+Face);
                      config:
                        mode: css
                    - type: text
                      data: >
                        `@color-declaration` — This variable will store all the
                        default colors for the style editor. It will list these
                        colours in the color picker’s palette after all the
                        color picker’s defaults.


                        For example:
                    - type: code
                      data: '@color-declaration: ''["#FF7700, #9966CC" ]'';'
                      config:
                        mode: css
                    - type: text
                      data: >
                        This will add a shade of orange and a shade of purple to
                        the end of the list of colors selectable in the color
                        picker.


                        `//! @section: your text here` — You can group variables
                        into sections with headings using this syntax to help
                        your users read and understand your variables more
                        easily.


                        For example:


                        `//! @section: Header`  

                        `@color-header-background: #FFF;`  

                        `//! @endsection`  of


                        This will create a section in the left navigation with
                        the title “Header”, which will house the “Header
                        Background” variable.


                        More information on syntax, and examples, can be found
                        in the comments of the style-editor-variables.less file
                        found in Blueprint.
                    - type: text
                      data: >
                        ### internal-variables.less 


                        This file is for you to store the variables that you may
                        need to use, but don’t want the Style editor to see. For
                        example, you can use it to create a hierarchy within
                        your Less file, so that:


                        *   The user sets a value to @color-store-name;

                        *   in internal-variables.less, @main-accent:
                        @color-store-name;

                        *   in init.less, we set a:hover {color: @main-accent};


                        In this example, the link hover color will be set to
                        whatever the store name color is. We can add as many
                        selectors as we want to this css statement, depending on
                        our design.


                        This way, we can reuse the color that gets set to
                        `@color-store-name` as the color for elements that we
                        may not want to be edited in the Style Editor, but will
                        now carry on the colour of the store name to create
                        consistency within your design.
                    - type: text
                      data: >
                        ### init.less 


                        This is where you initialize the use of the variables.
                        This file contains all the CSS that will be compiled and
                        generated into the theme.css file. For example, the
                        @color-store-name can now be applied to the `#HeaderLogo
                        h1` element by saying:
                    - type: code
                      data: |
                        #HeaderLogo h1 {
                        color: @color-store-name
                        }
                      config:
                        mode: css
                    - type: text
                      data: >+
                        ### theme.less 


                        The file that ultimately gets compiled into `theme.css`.
                        This just uses `@import` to include the other three Less
                        files for compilation. The Style Editor will read this
                        file for instructions on how to compile your styles
                        using Less.


                        Compiling your Less files


                        Once you have finished working on your `.less` files,
                        _don’t forget to compile them!_ If you are using the
                        command line, you should be doing something similar to:

                    - type: code
                      data: |+
                        lessc Styles/less/theme.less > Styles/theme.css 


                      config:
                        mode: html
                    - type: text
                      data: >-
                        This will use the `theme.less` file to generate the
                        `theme.css` file into your theme's `Styles/` folder.


                        If you find that you have to make a change to
                        `theme.css`, please don't forget to replicate this
                        change in `theme.less` (but more preferably, in
                        `init.less`). Otherwise, every time you recompile the
                        less files, this change will be overwritten.


                        Less offers a variety of compilation methods, including
                        applications for both Windows and Mac that you can use
                        if you prefer not to use the command prompt/terminal.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Testing Style Editor with Your Theme 


                        If you'd like to add Style Editor support to your theme,
                        you can enable the Style Editor on just your store.
                        Simply log in to the control panel and place
                        `/index.php?ToDo=viewTemplates&dev=enable` after
                        `/admin`.<br>

                        (For example:
                        <NOBR>`https://store-123abmy.mybigcommerce.com/admin/index.php?ToDo=viewTemplates&dev=enable`</nobr>)


                        This will enable [Developer Mode](#) for your store,
                        which also enables Blueprint and other features for
                        theme developers. You can [use Blueprint](#) as a basis
                        for creating new themes.
                      header:
                        anchor: testing-style-editor-with-theme
              - title: Product Filtering Toolkit
                route:
                  path: /product-filtering-toolkit
                data:
                  blocks:
                    - type: html
                      data: "<h1>Product Filtering Toolkit</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3>On This Page</h3>\n\t<ul>\n\t\t<li><a href=\"#creating-new-theme-product-filtering\">Creating a New Theme With Product Filtering</a></li>\n\t\t<li><a href=\"#enabling-product-filtering-customized-theme\">Enabling Product Filtering for Your Customized Theme</a></li>\n\t\t<li><a href=\"#implementing-product-filtering-your-theme\">Implementing Product Filtering in Your Theme</a></li>\n    <li><a href=\"#allowing-filtering-on-off\">Allowing For Filtering On/Off</a></li>\n    <li><a href=\"#category-filtering-details\">Category Filtering Details</a></li>\n\t\t</ul>\n</div>"
                    - type: text
                      data: >
                        Product filtering (also known as faceted search) enables
                        shoppers to refine product searches based on multiple
                        attributes like price, size, ratings, etc. For a store
                        owner's view of administering this feature, please see
                        <a
                        href="https://forum.bigcommerce.com/s/article/Product-Filtering-Settings"
                        target="_blank">this KB article</a>. 
                    - type: callout
                      data:
                        type: warning
                        title: Requirements/Restrictions
                        body: >-
                          <ul>

                          <li>

                          Adding product filtering to a theme is recommended for
                          experienced theme developers only. You must have
                          facility with HTML and CSS, and must also familiarize
                          yourself with how BigCommerce themes are structured
                          and operate. </li>

                          <li>

                          Product filtering is a Pro/Enterprise feature. To
                          enable it on an active public store, you must upgrade
                          to a Pro or Enterprise plan.

                          </li>

                          <li>

                          As noted below, we recommend implementing product
                          filtering on a temporary sandbox store. You can create
                          a trial store, and then upload your theme
                          customizations to that store via WebDAV to replicate
                          your local changes.</li>

                          </ul>
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Creating a New Theme with Product Filtering 


                        Product filtering is fully functional in the Blueprint
                        base theme. Once you’ve enabled [Developer
                        Mode](#blueprint-and-developer-mode), you’ll be able to
                        access this base theme and add product filtering to your
                        developer store.
                      header:
                        anchor: creating-new-theme-product-filtering
                    - type: callout
                      data:
                        type: warning
                        title: >-
                          Restricted/Grandfathered Access to Blueprint Base
                          Theme
                        body: >-
                          The Blueprint base theme is now available only to
                          stores that applied it before November 2016. <br><br>


                          As of that date, stores are being offered themes only
                          from BigCommerce's new <a
                          href="https://support.bigcommerce.com/articles/Public/The-Stencil-Theme-Platform"
                          target="_blank">Stencil</a> theme platform. Within a
                          store's control panel, the <NOBR><b>Themes
                          Marketplace</b></nobr> and <NOBR><b>My
                          Themes</b></nobr> pages will show only those Blueprint
                          themes that have been applied to the store and/or
                          purchased before November 2016. <br><br> 


                          For information about developing on the current
                          Stencil platform, please see <a
                          href="https://stencil.bigcommerce.com/docs/"
                          target="_blank">this developer documentation</a>.
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Enabling Product Filtering for Your Customized Theme 


                        To enable product filtering, just enable [Developer
                        Mode](#devmode) on your store. This will enable product
                        filtering on your store by default, regardless of
                        whether or not your theme and plan support it.
                      header:
                        anchor: enabling-product-filtering-customized-theme
                    - type: callout
                      data:
                        type: warning
                        title: Start with a Sandbox Store
                        body: >-
                          Depending on the customizations you have made to your
                          theme, enabling Developer Mode could have unexpected
                          results. <NOBR>We recommend</nobr> using a sandbox
                          store (not your main store) when applying these
                          changes for the first time.
                    - type: text
                      data: >+
                        If you are working with a new store, product filtering
                        might already work out-of-the-box for your theme.

                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Implementing Product Filtering in Your Theme 


                        Once you’ve enabled product filtering for your sandbox
                        store, you’ll need to get the most up-to-date Blueprint
                        files and copy them into your own theme. Here is how to
                        do so.
                      header:
                        anchor: implementing-product-filtering-your-theme
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          As noted above, the Blueprint base theme is now
                          available only to stores that applied it before
                          November 2016.
                        title: |2
                           Restricted/Grandfathered Access to Blueprint Base Theme
                    - type: text
                      data: >-
                        1.  Enable [Developer Mode](#devmode) in your sandbox
                        store, if you haven’t already. This will enable the
                        Blueprint theme and the faceted search feature.

                        2.  Unless you’re starting from scratch, back up your
                        theme customizations.

                        3.  Select Blueprint as your store’s theme. 

                        4.  Download the Blueprint theme – don’t worry, you’ll
                        only need certain files for faceted search.

                        5.  Restore your theme from the backups you downloaded
                        in step 2.

                        6.  Upload the following files from Blueprint to your
                        sandbox store:
                           *   `Panels/FacetedSearch.html` – This panel contains the markup for your Faceted Search column. It calls all the panels for each of the searchable facets as well.
                            *   `Panels/FacetedSearchProductGrid.html` - This panel contains the markup for your list of product results when your category lists are set to "grid view".
                            *   `Panels/FacetedSearchProductList.html` - This panel contains the markup for your list of product results when your category lists are set to "list view".
                            *   `Panels/FacetedSearchTemplateCategory.html` – The panel that contains the markup for the Category facet.
                            *   `Panels/FacetedSearchTemplateMultichoice.html` – The panel that contains the markup for any facet containing multiple-choice check boxes.
                            *   `Panels/FacetedSearchTemplateRange.html` – The panel that contains the markup for facets containing ranges.
                            *   `Panels/FacetedSearchTemplateRating.html` – The panel that contains the markup for the Rating facet.
                            *   `Panels/FacetedSearchTemplateShowing.html` – The panel that contains the markup for the list of currently selected filters.
                            *   `Panels/FacetedSearchTemplateSingle.html` – The panel that contains the markup for any facet containing single-choice radio buttons.
                            *   `Panels/Pagination.html` – The panel that contains the markup for your pagination – note that this will not use any existing pagination panels that your theme may have.
                            *   `Styles/faceted-search.css` – This will be included in `FacetedSearch.html`, so you don’t need to add it to your `HTMLHead.html` file.

                        7.  Copy your `brands.html` page and name it
                        `brands_with_facets.html`.

                        8.  Copy your `search.html` page and name it
                        `search_with_facets.html`.

                        9.  Copy your `category.html` page and name it
                        `category_with_facets.html`.

                        10.  Include the required assets on your new facets
                        pages. You can use the facets pages from Blueprint for
                        reference (the assets will be named the same):
                           *   `%%Panel.FacetedSearch%%` – This is the main Faceted Search panel, and will call the rest of the panels it needs accordingly (including required JavaScript and CSS).
                            *   Add the `js-faceted-search-column` class to the container of your Faceted Search panel.
                            *   If you have a responsive theme, you can add the `Refine` button to your page, which toggles the Faceted Search column on or off. By default, this button displays only on mobile:<br>
                            `<button class="js-faceted-search-action btn"> %%LNG_FilterBy%% </button>`
                        11.  If the pages mentioned above don’t exist, you can
                        copy the existing pages from the Blueprint theme. Keep
                        in mind that you’ll need to modify these pages to suit
                        the structure of your theme.
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Allowing For Filtering On/Off 


                        When faceted search is switched on, the following
                        templates will be used:


                        *   Brand pages > `brands_with_facets.html`

                        *   Search page > `search_with_facets.html`

                        *   Category pages > `category_with_facets.html`


                        When switched off:


                        *   Brand pages > `brands.html`

                        *   Search page > `search.html`

                        *   Category pages > `category.html`
                      header:
                        anchor: allowing-filtering-on-off
                    - type: callout
                      data:
                        type: warning
                        title: ' Clone and Rename Templates, Don’t Alter Originals'
                        body: >-
                          Development agencies should not modify the
                          <em>base</em> templates of the
                          <code>brand.html</code>, <code>search.html</code>, or
                          <code>category.html</code> pages to include faceted
                          search. Clients who are not on a Pro or Enterprise
                          plan do not get faceted search, so if you include it
                          on <code>category.html</code>, <code>brand.html</code>
                          or <code>search.html</code> page, your theme will be
                          useless to those clients.
                    - type: text
                      data: >-
                        ## Category Filtering Details 


                        When you turn on product filtering for a store, it will
                        automatically switch all `Category Layout File`s to your
                        new `category_with_facets.html` page. To view product
                        filtering on Category pages, you must ensure that the
                        `Category Layout File` is set to
                        `category_with_facets.html`.


                        You will not see the Category filter on storefront
                        Category pages. This has been hidden for SEO reasons.
                      header:
                        anchor: category-filtering-details
              - title: Template Syntax
                route:
                  path: /blueprint-template-syntax
                data:
                  blocks:
                    - type: html
                      data: "<h1>Template Syntax</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3>On This Page</h3>\n\t<ul>\n\t\t<li><a href=\"#global-variables-references\">Global-Variables References/a></li>\n\t\t<li><a href=\"#panel-references\">Panel References/a></li>\n\t\t<li><a href=\"#snippet-references\">Snippet References</a></li>\n    <li><a href=\"#referencing-distributed-theme-assets\">Referencing Distributed Theme Assets</a></li>\n    <li><a href=\"#file-includes\">File Includes</a></li>\n</ul>\n</div>"
                    - type: text
                      data: >-
                        Each of the layout, panel, and snippet files in a theme
                        uses variables (also called placeholders) to show
                        external content or content fetched from the database
                        (such as the name of a product).


                        Template variables are enclosed within `%%` markers.
                        These types of variables are available for use in
                        templates: global variables, string variables, panel
                        references, snippet references, and file includes.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Global-Variables References 



                        Global variables are used to render dynamic content into
                        a template. Global variables are referenced using the
                        following syntax:


                        <pre>%%GLOBAL_[placeholder_name]%%</pre>


                        For example:


                        <pre>%%GLOBAL_ProductName%%</pre>


                        Specific variables' availability depends on the layout
                        template that you're editing. For example, the variable
                        for a product's description is available on the product
                        details page, but not on the category view/product
                        listing page.
                      header:
                        anchor: global-variables-references
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Panel References 


                        Panels are the different blocks used by BigCommerce to
                        build a page. Panels are referenced both inside layout
                        files and inside other panel files.


                        Panels are referenced in templates as follows, where
                        `[panel_name]` is a placeholder for the name of a file
                        in the theme’s Panels directory:


                        <pre>%%Panel.[panel_name]%%</pre>


                        For example:


                        <pre>%%Panel.HomeFeaturedProducts%%</pre>


                        This panel reference will load in the content from the
                        `Panels/HomeFeaturedProducts.html` panel file.
                      header:
                        anchor: panel-references
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Snippet References 


                        Snippets are templates containing HTML, which you can
                        use multiple times on one page – either by using them in
                        different parts of the template, or by including them a
                        loop. For example, a loop might build a list of products
                        on the page, with each product in the list being a
                        repeated version of the same snippet.


                        Snippets are referenced in templates as follows:


                        <pre>%%SNIPPET_[snippet_name]%%</pre>


                        In most cases, this will correspond to a similarly named
                        file in the theme’s Snippets directory. For example:


                        <pre>%%SNIPPET_HomeFeaturedProducts%%</pre>


                        This snippet reference will contain repeated copies of
                        `Snippets/HomeFeaturedProductsItem.html`, one for each
                        featured product to be shown in the list.
                      header:
                        anchor: snippet-references
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Referencing Distributed Theme Assets 


                        After the Blueprint framework was first released,
                        BigCommerce added the ability to reference theme assets
                        that are stored remotely on a CDN (content delivery
                        network). This section provides examples that map
                        first-generation Blueprint syntax to updated syntax for
                        distributed assets.


                        You can use WebDAV to upload your own custom theme
                        assets (JavaScripts, stylesheets, images, fonts, etc).
                        In your HTML, reference these assets that aren’t present
                        in the base theme using the `ASSET` syntax:


                        <pre>%%ASSET_[path_to_asset]%%</pre>


                        This syntax will output an absolute URL like: 


                        <pre>http://cdn-host/templates/__custom/path_to_asset?t=timestamp`</pre>


                        This loads the custom asset from our CDN server, and
                        includes a cache-busting querystring.


                        For example:


                        <pre>%%ASSET_Styles/myownstyle.css%%</pre>


                        ...will be output as:


                        <pre>http://cdn-host/templates/__custom/Styles/myonwstyle.css?t=123</pre>
                      header:
                        anchor: referencing-distributed-theme-assets
                    - type: text
                      data: >
                        #### Syntax Examples 


                        The following tables map earlier to current syntax:


                        ##### Assets in CSS Files 


                        | Previous Syntax | Updated Syntax (CDN) |

                        |-----------------|---------------------|

                        | `url(/template/images/foo.jpg)` |
                        `url(%%ASSET_images/foo.jpg%%)` |

                        | `url(/templates/__custom/images/foo.jpg)` |
                        `url(%%ASSET_images/foo.jpg%%)` |

                        | `url(/template/foo/bar/font.woff)` |
                        `url(%%ASSET_foo/bar/font.woff%%)` |

                        | `url(../images/foo.jpg)` |
                        `url(%%ASSET_images/foo.jpg%%)` |

                        | `url(icons/foo.ico)` |
                        `url(%%ASSET_Styles/icons/foo.ico%%)` |

                        | `url(//mystore.com/template/images/foo.jpg)` |
                        `url(%%ASSET_images/foo.jpg%%)` |


                        ##### Assets in HTML Files 


                        | Previous Syntax | Updated Syntax (CDN) |

                        |---------------|----------------|

                        | `<img src="../images/foo.jpg" />` | `<img
                        src="%%ASSET_images/foo.jpg%%" />` |

                        | `<img src="//mystore.com/template/images/foo.jpg">` |
                        `<img src="%%ASSET_images/foo.jpg%%" />` |

                        | `<link href="/template/Styles/foo.css" />` | `<link
                        href="%%ASSET_Styles/foo.css%%" />` |

                        | `<script src="/template/js/foo.js%%"></script>` |
                        `<script src="%%ASSET_js/foo.js%%"></script>` |


                        ##### Assets Outside of the /template/ Directory 


                        The `ASSET` variable can be used only with files and
                        folders inside the `/template/` directory. To take
                        advantage of a CDN's benefits, we strongly recommend
                        moving your assets to the `/template/` directory.
                        However, if you need to keep assets outside of the
                        `/template/` directory, the best practice is to use
                        _protocol-relative_, absolute or fully qualified, URLs.
                        Here are some examples:


                        ```

                        <img src="//mystore.com/content/images/foo.jpg" />

                        url(//mystore.com/content/images/foo.jpg")

                        <link href="//mystore.com/content/foo.css"
                        rel="stylesheet" type="text/css" />

                        ```
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## File Includes 


                        You can include another file within a template, using
                        file include variables. This practice is extremely
                        useful for external files such as banners or
                        site-network headers.


                        Includes are referenced within template files as
                        follows:


                        <pre>

                        %%Include.http://www.example.com/remote_file.html%%

                        %%Include.https://www.example.com/secure_remote_file.html%%</pre>


                        Notes: Included external links will not follow redirects
                        (http status code 301 or 302). So if a redirect is
                        encountered, it will not include the content.
                      header:
                        anchor: file-includes
              - title: Store-Wide Global Panels
                route:
                  path: /store-wide-global-panels
                data:
                  blocks:
                    - type: html
                      data: |
                        <h1>Store-Wide Global Panels</h1>
                    - type: text
                      data: >-
                        The following panels are available store-wide:


                        | Variable | Description |

                        |-----------------|------------------|

                        | `HTMLHead` | Content shown between the `<head>` tags
                        of each page. This includes code for visitor tracking,
                        RSS feeds, etc. |

                        | `Header` | The header for each page in the store
                        (includes the `TopMenu` and `HeaderSearch` panels) |

                        | `Footer` | The footer for each page in the store. |

                        | `SideCategoryList` | A list of categories shown in the
                        store, to the category depth configured in the control
                        panel. |

                        | `SideNewProducts` | A list of products recently added
                        to the store. |

                        | `SideNewsletterBox` | The newsletter subscription
                        form. |

                        | `SideShopByBrand` | A list of popular brands on the
                        store (based on the number of products in each brand). |

                        | `SideProductRecentlyViewed` | A list of the products
                        recently viewed by the current customer. |

                        | `SideTopSellers` | A list of top selling-products on
                        the store (based purely on the number of times the
                        product has sold on this store). |

                        | `SidePopularProducts` | A list of popular products on
                        the store (by average rating). |

                        | `SideLiveChatServices` | Any live chat service code
                        that has been integrated in to the store. |

                        | `SideCurrencySelector` | The store currency selection
                        box, containing the list of currencies configured on the
                        store. |

                        | `SideCartContents` | A list of items in currently in
                        the customer's cart. |

                        | `TopMenu` | The top navigation menu (`Home`, `My
                        Account`, `Sign In or Create Account`, etc.) |

                        | `PagesMenu` | A list of parent-level pages configured
                        on the store. |

                        | `HeaderSearch` | The search box included at the top of
                        each of the store's pages. |
              - title: Store-Wide Global Variables
                route:
                  path: /store-wide-global-variables
                data:
                  blocks:
                    - type: html
                      data: |
                        <h1>Store-Wide Global Variables</h1>
                    - type: text
                      data: >-
                        The following GLOBAL variables are available from any
                        layout, panel, or snippet in the store, independent of
                        session status.


                        | Variable | Description |

                        | --- | --- |

                        | `%%GLOBAL_AllPricesAreInCurrency%%` | This variable
                        produces a text string that identifies the currency
                        currently active on the store. For example: <NOBR>`All
                        Prices are in USD`</nobr> |

                        | `%%GLOBAL_AlternateClass%%` | . |

                        | `%%GLOBAL_CdnAppPath%%` | The URI of the CDN
                        application. |

                        | `%%GLOBAL_CdnStorePath%%` | The URI to the store's CDN
                        directory. |

                        | `%%GLOBAL_CharacterSet%%` | The character set
                        currently active on the store. For example, UTF-8. |

                        | `%%GLOBAL_CheckoutLink%%` | The URI that initiates a
                        checkout sequence. |

                        | `%%GLOBAL_CurrentCustomerFirstName%%` | The first name
                        of the customer who is currently logged in. If no
                        customer is logged in, returns: `Guest` |

                        | `%%GLOBAL_CurrentCustomerLastName%%` | The last name
                        of the customer who is currently logged in. If no
                        customer is logged in, returns no content. |

                        | `%%GLOBAL_CustomerGroupId%%` | The ID of the customer
                        group for the currently logged-in user or guest. Blank
                        if none. |

                        | `%%GLOBAL_CustomerGroupName%%` | The name of the
                        customer group for the currently logged-in user or
                        guest. Blank if none. |

                        | `%%GLOBAL_Favicon%%` | The URI location of the favicon
                        file. |

                        | `%%GLOBAL_HeaderLogo%%` | The store's logo. This can
                        be either an image file or an HTML-formatted text
                        string. |

                        | `%%GLOBAL_ImageDirectory%%` | The name of the images
                        directory. |

                        | `%%GLOBAL_IMG_PATH%%` | The URI of the directory in
                        which the site's image files reside. |

                        | `%%GLOBAL_jQueryPath%%` | The URI of the minified
                        jQuery library in use. For
                        example:<br>`https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js`
                        |

                        | `%%GLOBAL_jQueryUIPath%%` | The path to the jQuery UI
                        script. For example:<br>
                        `https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.18/jquery-ui.js`
                        |

                        | `%%GLOBAL_LiveChatCodeEnabled%%` | A value
                        representing whether Live Chat is enabled or disabled.
                        For example: `none` |

                        | `%%GLOBAL_LoginOrLogoutText%%` | The HTML code of the
                        string (including links) providing the option to sign
                        into the store or to log out. For example: <NOBR>`Sign
                        in or Create an account`</nobr> |

                        | `%%GLOBAL_LogoText%%` | The text string used for the
                        store logo. |

                        | `%%GLOBAL_MASTER_THEME_PATH%%` | The URI of the
                        __master theme directory. |

                        | `%%GLOBAL_PageLink%%` | The URI of the page. |

                        | `%%GLOBAL_PageName%%` | The name of the page. For
                        example: <NOBR>`RSS Syndication`</nobr> |

                        | `%%GLOBAL_PoweredBy%%` | The string identifying the
                        software used by the store. For example: `Shopping Cart
                        Software by BigCommerce` |

                        | `%%GLOBAL_SHARED_GIFT_THEME_PATH%%` | The CDN URI of
                        the store's gift themes. |

                        | `%%GLOBAL_ShopPath%%` | The store's URI. If the page
                        is protected with TLS/SSL, this will be an HTTPS path. |

                        | `%%GLOBAL_ShopPathNormal%%` | The unencrypted URI of
                        the store, prefixed with HTTP. |

                        | `%%GLOBAL_ShopPathSSL%%` | The encrypted URI of the
                        store, prefixed with HTTPS. |

                        | `%%GLOBAL_ShowCookieWarningMessage%%` | A boolean
                        value that represents whether or not the display of a
                        cookie warning message is enabled or disabled. |

                        | `%%GLOBAL_SiteColor%%` | The current template's active
                        color scheme. |

                        | `%%GLOBAL_SitemapURL_HTML%%` | The URI to the store's
                        site map directory. |

                        | `%%GLOBAL_SocialMedia_Service_Class%%` | The name of
                        the social media class. For example: `#FFFFFF` |

                        | `%%GLOBAL_SocialMedia_Service_Url%%` | The URI to the
                        social media service. |

                        | `%%GLOBAL_SocialMediaService_Name%%` | The name of the
                        social media service. For example: `LinkedIn` |

                        | `%%GLOBAL_StoreLogo%%` | The file name of the store
                        logo image. |

                        | `%%GLOBAL_StoreName%%` | The name of the store. |

                        | `%%GLOBAL_StorePhoneNumber%%` | The phone number of
                        the store. |

                        | `%%GLOBAL_STYLE_PATH%%` | The CDN URI of the active
                        theme's styles directory. |

                        | `%%GLOBAL_SwapFrequency%%` | . |

                        | `%%GLOBAL_TPL_PATH%%` | The CDN URI of the theme. |

                        | `%%GLOBAL_value%%` | The type of value. For example:
                        `Array` |

                        | `%%GLOBAL_Year%%` | The current year. For example:
                        `2015` |
              - title: Global Variables
                route:
                  path: /global-variables
                data:
                  blocks:
                    - type: html
                      data: |
                        <h1>Global Variables</h1>
                    - type: text
                      data: >
                        Blueprint themes use the following GLOBAL variables to
                        pull data from the store's database.


                        While these variables are prefixed with the word GLOBAL,
                        the data's availability actually varies per session,
                        layout, panel, and snippet. For the list of variables
                        truly available from anywhere in the store, regardless
                        of session status, please see [Store-Wide
                        Variables](/themes/#store_wide_variables").


                        The list below is sorted by the number of times that the
                        Blueprint base theme references the variable – with the
                        most frequently referenced variables at the top:
                    - type: text
                      data: >-
                        | Variable | Description |

                        | --- | --- |

                        | `%%GLOBAL_ShopPath%%` | The full URL to the store
                        without a trailing slash. If on an SSL based page, this
                        will be the HTTPS version of the store path. |

                        | `%%GLOBAL_IMG_PATH%%` | . |

                        | `%%GLOBAL_ProductName%%` | . |

                        | `%%GLOBAL_ProductId%%` | . |

                        | `%%GLOBAL_ShopPathNormal%%` | The normal (non SSL)
                        version of the store URL. |

                        | `%%GLOBAL_JSCacheToken%%` | . |

                        | `%%GLOBAL_ProductRating%%` | . |

                        | `%%GLOBAL_CdnAppPath%%` | . |

                        | `%%GLOBAL_ProductPrice%%` | . |

                        | `%%GLOBAL_ProductAddText%%` | . |

                        | `%%GLOBAL_ProductFieldId%%` | . |

                        | `%%GLOBAL_EmailFooter%%` | . |

                        | `%%GLOBAL_ProductLink%%` | . |

                        | `%%GLOBAL_ShopPathSSL%%` | The SSL version of the
                        store URL. |

                        | `%%GLOBAL_OrderId%%` | . |

                        | `%%GLOBAL_ProductThumb%%` | . |

                        | `%%GLOBAL_HideProductRating%%` | . |

                        | `%%GLOBAL_ProductURL%%` | . |

                        | `%%GLOBAL_TPL_PATH%%` | . |

                        | `%%GLOBAL_HideActionAdd%%` | . |

                        | `%%GLOBAL_StoreName%%` | The name of the store. |

                        | `%%GLOBAL_ProductQuantity%%` | . |

                        | `%%GLOBAL_AlternateClass%%` | . |

                        | `%%GLOBAL_CartItemId%%` | . |

                        | `%%GLOBAL_CompareLink%%` | . |

                        | `%%GLOBAL_HideCompareItems%%` | . |

                        | `%%GLOBAL_ProductOptions%%` | . |

                        | `%%GLOBAL_UpperAddressType%%` | . |

                        | `%%GLOBAL_ErrorMessage%%` | . |

                        | `%%GLOBAL_ProductNumber%%` | . |

                        | `%%GLOBAL_HeaderLogo%%` | . |

                        | `%%GLOBAL_GiftCertificateCode%%` | . |

                        | `%%GLOBAL_WishListMessage%%` | . |

                        | `%%GLOBAL_ProductFieldRequired%%` | . |

                        | `%%GLOBAL_FieldRequiredClass%%` | . |

                        | `%%GLOBAL_EmailHeader%%` | . |

                        | `%%GLOBAL_OrderAmount%%` | . |

                        | `%%GLOBAL_GiftCertificateTo%%` | . |

                        | `%%GLOBAL_ShipToBillingName%%` | . |

                        | `%%GLOBAL_SiteColor%%` | The current template’s active
                        color scheme. |

                        | `%%GLOBAL_ProductFieldName%%` | . |

                        | `%%GLOBAL_AddressId%%` | . |

                        | `%%GLOBAL_PageTitle%%` | . |

                        | `%%GLOBAL_CharacterSet%%` | . |

                        | `%%GLOBAL_SearchTrackClass%%` | . |

                        | `%%GLOBAL_ItemId%%` | . |

                        | `%%GLOBAL_ProductTotal%%` | . |

                        | `%%GLOBAL_ProductFieldInputSize%%` | . |

                        | `%%GLOBAL_ProductFieldValue%%` | . |

                        | `%%GLOBAL_AddressType%%` | . |

                        | `%%GLOBAL_HideWishlist%%` | . |

                        | `%%GLOBAL_VideoId%%` | . |

                        | `%%GLOBAL_SHARED_GIFT_THEME_PATH%%` | . |

                        | `%%GLOBAL_GiftCertificateAmount%%` | . |

                        | `%%GLOBAL_GiftCertificateFrom%%` | . |

                        | `%%GLOBAL_GiftCertificateMessage%%` | . |

                        | `%%GLOBAL_GiftCertificateExpiryInfo%%` | . |

                        | `%%GLOBAL_HideShippingOptions%%` | . |

                        | `%%GLOBAL_HideLimitedCreditWarning%%` | . |

                        | `%%GLOBAL_ProductAttributes%%` | . |

                        | `%%GLOBAL_ImageDescription%%` | . |

                        | `%%GLOBAL_HideErrorMessage%%` | . |

                        | `%%GLOBAL_ExtraCategoryClass%%` | . |

                        | `%%GLOBAL_BillingAddress%%` | . |

                        | `%%GLOBAL_ShippingAddress%%` | . |

                        | `%%GLOBAL_OrderDate%%` | . |

                        | `%%GLOBAL_HideReviewCaptcha%%` | . |

                        | `%%GLOBAL_HideReturnAction%%` | . |

                        | `%%GLOBAL_OrderTotal%%` | . |

                        | `%%GLOBAL_NewsTitle%%` | . |

                        | `%%GLOBAL_BrandName%%` | . |

                        | `%%GLOBAL_VideoTitleLong%%` | . |

                        | `%%GLOBAL_ItemClass%%` | . |

                        | `%%GLOBAL_EventDate%%` | . |

                        | `%%GLOBAL_GiftWrappingName%%` | . |

                        | `%%GLOBAL_WishListID%%` | . |

                        | `%%GLOBAL_FormFieldRequiredJS%%` | . |

                        | `%%GLOBAL_HideCreditCardError%%` | . |

                        | `%%GLOBAL_CustomerName%%` | . |

                        | `%%GLOBAL_CustomerEmail%%` | . |

                        | `%%GLOBAL_CustomerGroupId%%` | Contains the group ID
                        for a logged-in customer who is part of a group. Also
                        contains the group ID for a guest where a default group
                        is set for guests. Blank for a logged-in customer who
                        belongs to no group. Also blank for a guest where no
                        default group is set for guests. Globally available
                        across panels and snippets. |

                        | `%%GLOBAL_ReCaptchaAPIKeyPublic%%` | . |

                        | `%%GLOBAL_SearchId%%` | . |

                        | `%%GLOBAL_OrderComments%%` | . |

                        | `%%GLOBAL_AllBrandsLink%%` | . |

                        | `%%GLOBAL_CheckoutLink%%` | . |

                        | `%%GLOBAL_AdditionalCheckoutButtons%%` | . |

                        | `%%GLOBAL_CheckoutShippingTitle%%` | . |

                        | `%%GLOBAL_HideUseStoreCredit%%` | . |

                        | `%%GLOBAL_HideMailingListInvite%%` | . |

                        | `%%GLOBAL_AllPricesAreInCurrency%%` | . |

                        | `%%GLOBAL_HidePurchasingOptions%%` | . |

                        | `%%GLOBAL_jQueryUIPath%%` | . |

                        | `%%GLOBAL_ProductMaxTinyWidth%%` | . |

                        | `%%GLOBAL_ProductMaxTinyHeight%%` | . |

                        | `%%GLOBAL_BrandLink%%` | . |

                        | `%%GLOBAL_OrderProductId%%` | . |

                        | `%%GLOBAL_HideExpectedReleaseDate%%` | . |

                        | `%%GLOBAL_ExpectedReleaseDate%%` | . |

                        | `%%GLOBAL_label%%` | . |

                        | `%%GLOBAL_value%%` | . |

                        | `%%GLOBAL_ShipSuburb%%` | . |

                        | `%%GLOBAL_ShipState%%` | . |

                        | `%%GLOBAL_ShipZip%%` | . |

                        | `%%GLOBAL_ShipCountry%%` | . |

                        | `%%GLOBAL_ProductAvailability%%` | . |

                        | `%%GLOBAL_ProductFieldType%%` | . |

                        | `%%GLOBAL_FileTypes%%` | . |

                        | `%%GLOBAL_TransitTime%%` | . |

                        | `%%GLOBAL_ShippingPrice%%` | . |

                        | `%%GLOBAL_HideGiftWrapping%%` | . |

                        | `%%GLOBAL_ProviderId%%` | . |

                        | `%%GLOBAL_ShippingAddressId%%` | . |

                        | `%%GLOBAL_BaseCompareLink%%` | . |

                        | `%%GLOBAL_GiftWrappingId%%` | . |

                        | `%%GLOBAL_HideSectionPaging%%` | . |

                        | `%%GLOBAL_SectionPagingPrevious%%` | . |

                        | `%%GLOBAL_SectionPagingNext%%` | . |

                        | `%%GLOBAL_SectionPaging%%` | . |

                        | `%%GLOBAL_TrailBrandName%%` | . |

                        | `%%GLOBAL_LoginMessage%%` | . |

                        | `%%GLOBAL_ShippingMethod%%` | . |

                        | `%%GLOBAL_HideCaptcha%%` | . |

                        | `%%GLOBAL_HideOrderComments%%` | . |

                        | `%%GLOBAL_DisableReturnButton%%` | . |

                        | `%%GLOBAL_ShippingProvider%%` | . |

                        | `%%GLOBAL_HideCheckoutButton%%` | . |

                        | `%%GLOBAL_ShippingFormAction%%` | . |

                        | `%%GLOBAL_ShipCustomFields%%` | . |

                        | `%%GLOBAL_ShipToAddressChecked%%` | . |

                        | `%%GLOBAL_ShipAddressButtonText%%` | . |

                        | `%%GLOBAL_ShippingQuotes%%` | . |

                        | `%%GLOBAL_DeliveryDisclaimer%%` | . |

                        | `%%GLOBAL_totals%%` | . |

                        | `%%GLOBAL_HideCartOptions%%` | . |

                        | `%%GLOBAL_CommentsHTML%%` | . |

                        | `%%GLOBAL_AddThisLink%%` | . |

                        | `%%GLOBAL_TinyImageClickJavascript%%` | . |

                        | `%%GLOBAL_FeaturedVideo%%` | . |

                        | `%%GLOBAL_QuickViewProductURL%%` | . |

                        | `%%GLOBAL_ThumbImageURL%%` | . |

                        | `%%GLOBAL_ProductAttributeList%%` | . |

                        | `%%GLOBAL_DisplayAdd%%` | . |

                        | `%%GLOBAL_DisplayAddQty%%` | . |

                        | `%%GLOBAL_HideNormalMessage%%` | . |

                        | `%%GLOBAL_HideSuccessMessage%%` | . |

                        | `%%GLOBAL_WishListName%%` | . |

                        | `%%GLOBAL_DownloadsLink%%` | . |

                        | `%%GLOBAL_HideWrappingOptions%%` | . |

                        | `%%GLOBAL_ReturnId%%` | . |

                        | `%%GLOBAL_ReturnReason%%` | . |

                        | `%%GLOBAL_ReturnAction%%` | . |

                        | `%%GLOBAL_ReturnComments%%` | . |

                        | `%%GLOBAL_ShipFullName%%` | . |

                        | `%%GLOBAL_ShipCompany%%` | . |

                        | `%%GLOBAL_ShipPhone%%` | . |

                        | `%%GLOBAL_RecentPostUrl%%` | . |

                        | `%%GLOBAL_CatTrailName%%` | . |

                        | `%%GLOBAL_HideThumbColumn%%` | . |

                        | `%%GLOBAL_HideGiftMessagePreview%%` | . |

                        | `%%GLOBAL_GiftMessagePreview%%` | . |

                        | `%%GLOBAL_CustomFieldName%%` | . |

                        | `%%GLOBAL_CustomFieldValue%%` | . |

                        | `%%GLOBAL_ShippingQuoteId%%` | . |

                        | `%%GLOBAL_PageLink%%` | . |

                        | `%%GLOBAL_CartProductFields%%` | . |

                        | `%%GLOBAL_PaymentFieldPrefix%%` | . |

                        | `%%GLOBAL_FromURL%%` | . |

                        | `%%GLOBAL_AddressLine%%` | . |

                        | `%%GLOBAL_FeaturedCategoryName%%` | . |

                        | `%%GLOBAL_HideGiftWrapMessage%%` | . |

                        | `%%GLOBAL_PaymentMessage%%` | . |

                        | `%%GLOBAL_TagName%%` | . |

                        | `%%GLOBAL_PaymentMethod%%` | . |

                        | `%%GLOBAL_ProductSku%%` | . |

                        | `%%GLOBAL_ZoomImageMaxWidth%%` | . |

                        | `%%GLOBAL_ZoomImageMaxHeight%%` | . |

                        | `%%GLOBAL_SectionType%%` | . |

                        | `%%GLOBAL_SharingName%%` | . |

                        | `%%GLOBAL_SubBrandLink%%` | . |

                        | `%%GLOBAL_SubCatLink%%` | . |

                        | `%%GLOBAL_Amount%%` | . |

                        | `%%GLOBAL_TransactionType%%` | . |

                        | `%%GLOBAL_DateTime%%` | . |

                        | `%%GLOBAL_AuthorisationCode%%` | . |

                        | `%%GLOBAL_ResponseCode%%` | . |

                        | `%%GLOBAL_ResponseMessage%%` | . |

                        | `%%GLOBAL_MerchantURL%%` | . |

                        | `%%GLOBAL_CardholderName%%` | . |

                        | `%%GLOBAL_ReferenceNumber%%` | . |

                        | `%%GLOBAL_InvoiceNumber%%` | . |

                        | `%%GLOBAL_HideMessagesMenu%%` | . |

                        | `%%GLOBAL_HideReturnRequestsMenu%%` | . |

                        | `%%GLOBAL_ReturnInstructions%%` | . |

                        | `%%GLOBAL_AuthorizeNetHideCVV2%%` | . |

                        | `%%GLOBAL_BlogPageTitle%%` | . |

                        | `%%GLOBAL_CCTypes%%` | . |

                        | `%%GLOBAL_HideLoginMessage%%` | . |

                        | `%%GLOBAL_MessageClass%%` | . |

                        | `%%GLOBAL_EWayHideCardCode%%` | . |

                        | `%%GLOBAL_CreditCardErrorMessage%%` | . |

                        | `%%GLOBAL_CreditCardNum%%` | . |

                        | `%%GLOBAL_CreditCardHideCardCode%%` | . |

                        | `%%GLOBAL_MessageText%%` | . |

                        | `%%GLOBAL_NMIHideCVV2%%` | . |

                        | `%%GLOBAL_STYLE_PATH%%` | . |

                        | `%%GLOBAL_StoreAddressFormatted%%` | The address of
                        the store (as configured on the store settings page) |

                        | `%%GLOBAL_BillingPhone%%` | . |

                        | `%%GLOBAL_ShippingPhone%%` | . |

                        | `%%GLOBAL_HideShippingMethod%%` | . |

                        | `%%GLOBAL_DateShipped%%` | . |

                        | `%%GLOBAL_ProductsTable%%` | . |

                        | `%%GLOBAL_HideComments%%` | . |

                        | `%%GLOBAL_Comments%%` | . |

                        | `%%GLOBAL_PageContent%%` | . |

                        | `%%GLOBAL_HideFullName%%` | . |

                        | `%%GLOBAL_HideCompanyName%%` | . |

                        | `%%GLOBAL_HidePhone%%` | . |

                        | `%%GLOBAL_HideOrderNo%%` | . |

                        | `%%GLOBAL_HideRMANo%%` | . |

                        | `%%GLOBAL_PayflowProHideCVV2%%` | . |

                        | `%%GLOBAL_HideReviewEmail%%` | . |

                        | `%%GLOBAL_ProductReviewPaging%%` | . |

                        | `%%GLOBAL_ProdImageJavascript%%` | . |

                        | `%%GLOBAL_SearchTitle%%` | . |

                        | `%%GLOBAL_HideRelatedSearches%%` | . |

                        | `%%GLOBAL_ShowSearchSuggestion%%` | . |

                        | `%%GLOBAL_SuggestQueryEscaped%%` | . |

                        | `%%GLOBAL_SuggestQuery%%` | . |

                        | `%%GLOBAL_ShippingAddressFormTitle%%` | . |

                        | `%%GLOBAL_HideReturnForm%%` | . |

                        | `%%GLOBAL_OrderStatus%%` | . |

                        | `%%GLOBAL_AKBPath%%` | . |

                        | `%%GLOBAL_AddressFormFieldID%%` | . |

                        | `%%GLOBAL_HideShopByBrandPanel%%` | . |

                        | `%%GLOBAL_ListJS%%` | . |

                        | `%%GLOBAL_CompareOnSubmit%%` | . |

                        | `%%GLOBAL_CategoryProductListing%%` | . |

                        | `%%GLOBAL_HideErrors%%` | . |

                        | `%%GLOBAL_ShipAddressButtonText_JS%%` | . |

                        | `%%GLOBAL_CheckoutShippingIntro%%` | . |

                        | `%%GLOBAL_ItemList%%` | . |

                        | `%%GLOBAL_HideCheckoutError%%` | . |

                        | `%%GLOBAL_CheckoutErrorMsg%%` | . |

                        | `%%GLOBAL_HideCheckoutSuccess%%` | . |

                        | `%%GLOBAL_CheckoutSuccessMsg%%` | . |

                        | `%%GLOBAL_HideUseCoupon%%` | . |

                        | `%%GLOBAL_HidePaymentOptions%%` | . |

                        | `%%GLOBAL_CheckoutStoreCreditWarning%%` | . |

                        | `%%GLOBAL_StoreCredit%%` | . |

                        | `%%GLOBAL_Remaining%%` | . |

                        | `%%GLOBAL_HideRemainingStoreCredit%%` | . |

                        | `%%GLOBAL_RemainingCredit%%` | . |

                        | `%%GLOBAL_HideLimitedCreditPaymentOption%%` | . |

                        | `%%GLOBAL_StoreCreditPaymentProviders%%` | . |

                        | `%%GLOBAL_CheckoutWith%%` | . |

                        | `%%GLOBAL_HideCreditAltOptionList%%` | . |

                        | `%%GLOBAL_CreditAlt%%` | . |

                        | `%%GLOBAL_HidePaymentProviderList%%` | . |

                        | `%%GLOBAL_PaymentProviders%%` | . |

                        | `%%GLOBAL_HideOrderTermsAndConditions%%` | . |

                        | `%%GLOBAL_HideTermsAndConditionsTextarea%%` | . |

                        | `%%GLOBAL_OrderTermsAndConditions%%` | . |

                        | `%%GLOBAL_AgreeTermsAndConditions%%` | . |

                        | `%%GLOBAL_TermsAndConditionsLink%%` | . |

                        | `%%GLOBAL_NewsletterBoxIsTicked%%` | . |

                        | `%%GLOBAL_HideOrderCheckBox%%` | . |

                        | `%%GLOBAL_OrderBoxIsTicked%%` | . |

                        | `%%GLOBAL_PaymentButtonSwitch%%` | . |

                        | `%%GLOBAL_CreateAccountAccountFormFieldID%%` | . |

                        | `%%GLOBAL_StatusMessage%%` | . |

                        | `%%GLOBAL_QuickViewButtonText%%` | . |

                        | `%%GLOBAL_QuickViewButtonColor%%` | . |

                        | `%%GLOBAL_QuickViewGradientColor%%` | . |

                        | `%%GLOBAL_QuickViewTextColor%%` | . |

                        | `%%GLOBAL_FacetedSearchScriptPath%%` | . |

                        | `%%GLOBAL_DebugDetails%%` | . |

                        | `%%GLOBAL_DesignModeHTML%%` | . |

                        | `%%GLOBAL_QueryList%%` | . |

                        | `%%GLOBAL_DesignModeScriptTag%%` | . |

                        | `%%GLOBAL_LiveChatFooterCode%%` | . |

                        | `%%GLOBAL_FooterScripts%%` | . |

                        | `%%GLOBAL_HideForgotPasswordError%%` | . |

                        | `%%GLOBAL_MaintenanceNotice%%` | . |

                        | `%%GLOBAL_CartItems%%` | A textual string representing
                        the number of items in the cart (1 item, 2 items, etc.).
                        |

                        | `%%GLOBAL_HideSectionSeparator%%` | . |

                        | `%%GLOBAL_ProductThumbWidth%%` | . |

                        | `%%GLOBAL_ProductThumbHeight%%` | . |

                        | `%%GLOBAL_HideBrandLink%%` | . |

                        | `%%GLOBAL_HideRating%%` | . |

                        | `%%GLOBAL_Rating%%` | . |

                        | `%%GLOBAL_HidePrice%%` | . |

                        | `%%GLOBAL_RetailPrice%%` | . |

                        | `%%GLOBAL_IncludingExcludingTax%%` | . |

                        | `%%GLOBAL_YouSave%%` | . |

                        | `%%GLOBAL_VideoLength%%` | . |

                        | `%%GLOBAL_VideoDescriptionLong%%` | . |

                        | `%%GLOBAL_CartLink%%` | . |

                        | `%%GLOBAL_ProductOptionRequired%%` | . |

                        | `%%GLOBAL_FastCartButtonJs%%` | . |

                        | `%%GLOBAL_HideProductAttributeList%%` | . |

                        | `%%GLOBAL_AddToCartQty%%` | . |

                        | `%%GLOBAL_HideBulkDiscountLink%%` | . |

                        | `%%GLOBAL_BulkDiscountThickBoxRates%%` | . |

                        | `%%GLOBAL_ItemSoldOut%%` | . |

                        | `%%GLOBAL_OptionMessage%%` | . |

                        | `%%GLOBAL_ShowAddToCartQtyBox%%` | . |

                        | `%%GLOBAL_ProductMinMaxQtyJavascript%%` | . |

                        | `%%GLOBAL_EventDateJavascript%%` | . |

                        | `%%GLOBAL_AgreeChecked%%` | . |

                        | `%%GLOBAL_HideThemeSelect%%` | . |

                        | `%%GLOBAL_GiftCertificateMinimum%%` | . |

                        | `%%GLOBAL_GiftCertificateMaximum%%` | . |

                        | `%%GLOBAL_HideSearchPage%%` | . |

                        | `%%GLOBAL_ProductTabActive%%` | . |

                        | `%%GLOBAL_ProductTabUrl%%` | . |

                        | `%%GLOBAL_ContentTabActive%%` | . |

                        | `%%GLOBAL_ContentTabUrl%%` | . |

                        | `%%GLOBAL_ProductContainerDisplay%%` | . |

                        | `%%GLOBAL_ContentContainerDisplay%%` | . |

                        | `%%GLOBAL_SelectedSearchTab%%` | . |

                        | `%%GLOBAL_HideProductSearchOptions%%` | . |

                        | `%%GLOBAL_HideSearchResultsNoResult%%` | . |

                        | `%%GLOBAL_OriginalSearchQuery%%` | . |

                        | `%%GLOBAL_HideSideProductRecentlyViewedCompare%%` | .
                        |

                        | `%%GLOBAL_HideIfNoSubsection%%` | . |

                        | `%%GLOBAL_HideSuggestiveCartContent%%` | . |

                        | `%%GLOBAL_SuggestedProductListing%%` | . |

                        | `%%GLOBAL_HideAccountOptions%%` | . |

                        | `%%GLOBAL_DownloadLink%%` | . |

                        | `%%GLOBAL_ExpiryInfo%%` | . |

                        | `%%GLOBAL_AccountOrderItemList%%` | . |

                        | `%%GLOBAL_StrikeStart%%` | . |

                        | `%%GLOBAL_StrikeEnd%%` | . |

                        | `%%GLOBAL_Refunded%%` | . |

                        | `%%GLOBAL_HidePaymentInstructions%%` | . |

                        | `%%GLOBAL_ReturnStatus%%` | . |

                        | `%%GLOBAL_ShipAddressLines%%` | . |

                        | `%%GLOBAL_RecentPostTitle%%` | . |

                        | `%%GLOBAL_CatTrailLink%%` | . |

                        | `%%GLOBAL_CouponCode%%` | . |

                        | `%%GLOBAL_CouponDiscount%%` | . |

                        | `%%GLOBAL_GiftCertificateRemaining%%` | . |

                        | `%%GLOBAL_CertificateAmountUsed%%` | . |

                        | `%%GLOBAL_ProductImage%%` | . |

                        | `%%GLOBAL_ProductNameSpan%%` | . |

                        | `%%GLOBAL_ProductExpectedReleaseDate%%` | . |

                        | `%%GLOBAL_GiftCertificateName%%` | . |

                        | `%%GLOBAL_HideCartFileName%%` | . |

                        | `%%GLOBAL_ProductFieldFileValue%%` | . |

                        | `%%GLOBAL_HideDeleteFileLink%%` | . |

                        | `%%GLOBAL_HideFileHelp%%` | . |

                        | `%%GLOBAL_FileSize%%` | . |

                        | `%%GLOBAL_CurrentProductFile%%` | . |

                        | `%%GLOBAL_SelectOptions%%` | . |

                        | `%%GLOBAL_ShipperName%%` | . |

                        | `%%GLOBAL_TaxName%%` | . |

                        | `%%GLOBAL_TaxCost%%` | . |

                        | `%%GLOBAL_PageNumber%%` | . |

                        | `%%GLOBAL_ProductDescription%%` | . |

                        | `%%GLOBAL_AccountEmail%%` | . |

                        | `%%GLOBAL_ShipAddressLine1%%` | . |

                        | `%%GLOBAL_ShipAddressLine2%%` | . |

                        | `%%GLOBAL_HideChooseAddress%%` | . |

                        | `%%GLOBAL_UseAddressTitle%%` | . |

                        | `%%GLOBAL_FlyoutAttributes%%` | . |

                        | `%%GLOBAL_FlyoutChildHtml%%` | . |

                        | `%%GLOBAL_CurrencyName%%` | . |

                        | `%%GLOBAL_AddressFieldId%%` | . |

                        | `%%GLOBAL_PageName%%` | . |

                        | `%%GLOBAL_CurrentProductLink%%` | . |

                        | `%%GLOBAL_InitialZoomImage%%` | . |

                        | `%%GLOBAL_HideBillingEmail%%` | . |

                        | `%%GLOBAL_BillingEmail%%` | . |

                        | `%%GLOBAL_hideInvoiceShippingDetails%%` | . |

                        | `%%GLOBAL_HideShippingEmail%%` | . |

                        | `%%GLOBAL_ShippingEmail%%` | . |

                        | `%%GLOBAL_hideAddressColumn%%` | . |

                        | `%%GLOBAL_HideAttributes%%` | . |

                        | `%%GLOBAL_HideVariationOptions%%` | . |

                        | `%%GLOBAL_HideConfigurableFields%%` | . |

                        | `%%GLOBAL_ProductConfigurableFields%%` | . |

                        | `%%GLOBAL_ProductGiftWrapping%%` | . |

                        | `%%GLOBAL_HideEventDate%%` | . |

                        | `%%GLOBAL_ProductEventDate%%` | . |

                        | `%%GLOBAL_OptionChooseText%%` | . |

                        | `%%GLOBAL_ReviewStart%%` | . |

                        | `%%GLOBAL_ReviewLink%%` | . |

                        | `%%GLOBAL_FontSize%%` | . |

                        | `%%GLOBAL_TagLink%%` | . |

                        | `%%GLOBAL_TagProductCount%%` | . |

                        | `%%GLOBAL_ProductThumbIndex%%` | . |

                        | `%%GLOBAL_VariationName%%` | . |

                        | `%%GLOBAL_VariationNumber%%` | . |

                        | `%%GLOBAL_OptionId%%` | . |

                        | `%%GLOBAL_OptionValue%%` | . |

                        | `%%GLOBAL_NewsURL%%` | . |

                        | `%%GLOBAL_PageURL%%` | . |

                        | `%%GLOBAL_PageSmallContent%%` | . |

                        | `%%GLOBAL_SectionSearchResults%%` | . |

                        | `%%GLOBAL_RSSURL%%` | . |

                        | `%%GLOBAL_HideSplitWrappingOptions%%` | . |

                        | `%%GLOBAL_ShipperId%%` | . |

                        | `%%GLOBAL_CatId%%` | . |

                        | `%%GLOBAL_SocialMedia_Service_Name%%` | . |

                        | `%%GLOBAL_SubBrandName%%` | . |

                        | `%%GLOBAL_SubCatName%%` | . |

                        | `%%GLOBAL_ISOCode%%` | . |

                        | `%%GLOBAL_IssuerName%%` | . |

                        | `%%GLOBAL_IssuerConfirmation%%` | . |

                        | `%%GLOBAL_FirstName%%` | . |

                        | `%%GLOBAL_NewGuestAccountResetLink%%` | . |

                        | `%%GLOBAL_OrderStatusChangedHi%%` | . |

                        | `%%GLOBAL_OrderNumberStatusChangedTo%%` | . |

                        | `%%GLOBAL_DatePlaced%%` | . |

                        | `%%GLOBAL_AC_EmailFooterNote%%` | . |

                        | `%%GLOBAL_ProductUrl%%` | . |

                        | `%%GLOBAL_Contact%%` | . |

                        | `%%GLOBAL_DownloadTitle%%` | . |

                        | `%%GLOBAL_HideReturnInstructions%%` | . |

                        | `%%GLOBAL_HideAuthorizeNetError%%` | . |

                        | `%%GLOBAL_AuthorizeNetErrorMessage%%` | . |

                        | `%%GLOBAL_AuthorizeNetName%%` | . |

                        | `%%GLOBAL_AuthorizeNetNum%%` | . |

                        | `%%GLOBAL_AuthorizeNetMonths%%` | . |

                        | `%%GLOBAL_AuthorizeNetYears%%` | . |

                        | `%%GLOBAL_AuthorizeNetCCV2%%` | . |

                        | `%%GLOBAL_HideCCManualError%%` | . |

                        | `%%GLOBAL_CCErrorMessage%%` | . |

                        | `%%GLOBAL_CCName%%` | . |

                        | `%%GLOBAL_CCNum%%` | . |

                        | `%%GLOBAL_CCCVV2%%` | . |

                        | `%%GLOBAL_CCIssueNo%%` | . |

                        | `%%GLOBAL_CCMonths%%` | . |

                        | `%%GLOBAL_CCYears%%` | . |

                        | `%%GLOBAL_CCIssueDateMonths%%` | . |

                        | `%%GLOBAL_CCIssueDateYears%%` | . |

                        | `%%GLOBAL_HideCheckoutGuest%%` | . |

                        | `%%GLOBAL_HideCheckoutRegistrationRequired%%` | . |

                        | `%%GLOBAL_CustomCheckoutFormNewAccount%%` | . |

                        | `%%GLOBAL_CustomCheckoutFormBillingAddress%%` | . |

                        | `%%GLOBAL_CustomCheckoutFormShippingAddress%%` | . |

                        | `%%GLOBAL_ExpressCheckoutSignedIn%%` | . |

                        | `%%GLOBAL_ExpressCheckoutDigitalOrder%%` | . |

                        | `%%GLOBAL_GoToStep%%` | . |

                        | `%%GLOBAL_CollapsedStepClassAccountDetails%%` | . |

                        | `%%GLOBAL_ExpressCheckoutHideAccountDetails%%` | . |

                        | `%%GLOBAL_ExpressCheckoutStepAccountDetails%%` | . |

                        | `%%GLOBAL_HideGuestCheckoutOptions%%` | . |

                        | `%%GLOBAL_HideRegisteredCheckoutOptions%%` | . |

                        | `%%GLOBAL_CollapsedStepClassBillingAddress%%` | . |

                        | `%%GLOBAL_ExpressCheckoutStepBillingAddress%%` | . |

                        | `%%GLOBAL_CollapsedStepClassShippingAddress%%` | . |

                        | `%%GLOBAL_ExpressCheckoutHideShippingAddress%%` | . |

                        | `%%GLOBAL_ExpressCheckoutStepShippingAddress%%` | . |

                        | `%%GLOBAL_CollapsedStepClassShippingProvider%%` | . |

                        | `%%GLOBAL_ExpressCheckoutHideShippingProviders%%` | .
                        |

                        | `%%GLOBAL_ExpressCheckoutStepShippingProvider%%` | . |

                        | `%%GLOBAL_CollapsedStepClassConfirmation%%` | . |

                        | `%%GLOBAL_ExpressCheckoutStepConfirmation%%` | . |

                        | `%%GLOBAL_CollapsedStepClassPaymentDetails%%` | . |

                        | `%%GLOBAL_ExpressCheckoutHidePaymentDetails%%` | . |

                        | `%%GLOBAL_ExpressCheckoutStepPaymentDetails%%` | . |

                        | `%%GLOBAL_PaymentFormContent%%` | . |

                        | `%%GLOBAL_ContinueLink%%` | . |

                        | `%%GLOBAL_Continue%%` | . |

                        | `%%GLOBAL_BlogName%%` | . |

                        | `%%GLOBAL_ErrorDetails%%` | . |

                        | `%%GLOBAL_HideeSelectPlusDPError%%` | . |

                        | `%%GLOBAL_eSelectPlusDPErrorMessage%%` | . |

                        | `%%GLOBAL_eSelectPlusDPNum%%` | . |

                        | `%%GLOBAL_eSelectPlusDPMonths%%` | . |

                        | `%%GLOBAL_eSelectPlusDPYears%%` | . |

                        | `%%GLOBAL_eSelectPlusDPCCV2%%` | . |

                        | `%%GLOBAL_eSelectPlusDPCardHolderName%%` | . |

                        | `%%GLOBAL_eSelectPlusDPBillStNum%%` | . |

                        | `%%GLOBAL_eSelectPlusDPBillStName%%` | . |

                        | `%%GLOBAL_eSelectPlusDPBillZip%%` | . |

                        | `%%GLOBAL_HideEWayError%%` | . |

                        | `%%GLOBAL_EWayErrorMessage%%` | . |

                        | `%%GLOBAL_EWayName%%` | . |

                        | `%%GLOBAL_EWayMonths%%` | . |

                        | `%%GLOBAL_EWayYears%%` | . |

                        | `%%GLOBAL_EWayCardCode%%` | . |

                        | `%%GLOBAL_CreditCardName%%` | . |

                        | `%%GLOBAL_CreditCardIssueNo%%` | . |

                        | `%%GLOBAL_CreditCardIssueDateMonths%%` | . |

                        | `%%GLOBAL_CreditCardIssueDateYears%%` | . |

                        | `%%GLOBAL_CreditCardMonths%%` | . |

                        | `%%GLOBAL_CreditCardYears%%` | . |

                        | `%%GLOBAL_CreditCardCardCode%%` | . |

                        | `%%GLOBAL_AdditionalPaymentPageContents%%` | . |

                        | `%%GLOBAL_HideIdealError%%` | . |

                        | `%%GLOBAL_IdealErrorMessage%%` | . |

                        | `%%GLOBAL_IdealPaymentForm%%` | . |

                        | `%%GLOBAL_PrintInvoiceStylesheetPath%%` | . |

                        | `%%GLOBAL_PrintableInvoiceList%%` | . |

                        | `%%GLOBAL_PrintableInvoiceScript%%` | . |

                        | `%%GLOBAL_MaintenanceLogo%%` | . |

                        | `%%GLOBAL_MessageTitle%%` | . |

                        | `%%GLOBAL_HideNMIError%%` | . |

                        | `%%GLOBAL_NMIErrorMessage%%` | . |

                        | `%%GLOBAL_NMIName%%` | . |

                        | `%%GLOBAL_NMINum%%` | . |

                        | `%%GLOBAL_NMIMonths%%` | . |

                        | `%%GLOBAL_NMIYears%%` | . |

                        | `%%GLOBAL_NMICCV2%%` | . |

                        | `%%GLOBAL_HideError%%` | . |

                        | `%%GLOBAL_HidePaidOrderConfirmation%%` | . |

                        | `%%GLOBAL_HidePhysicalOrderConfirmation%%` | . |

                        | `%%GLOBAL_PhysicalOrderConfirmation%%` | . |

                        | `%%GLOBAL_HideDigitalOrderConfirmation%%` | . |

                        | `%%GLOBAL_DigitalOrderConfirmation%%` | . |

                        | `%%GLOBAL_HideDigitalOrderDownloadLink%%` | . |

                        | `%%GLOBAL_ViewFullOrderPath%%` | . |

                        | `%%GLOBAL_HideAwaitingPayment%%` | . |

                        | `%%GLOBAL_HideSuccess%%` | . |

                        | `%%GLOBAL_OrderConfirmationDetails%%` | . |

                        | `%%GLOBAL_ContinueShoppingOnStoreName%%` | . |

                        | `%%GLOBAL_ConversionCode%%` | . |

                        | `%%GLOBAL_PackingSlipTitle%%` | . |

                        | `%%GLOBAL_HideBillingPhone%%` | . |

                        | `%%GLOBAL_HideShippingPhone%%` | . |

                        | `%%GLOBAL_HideShippingDate%%` | . |

                        | `%%GLOBAL_HideTrackingNo%%` | . |

                        | `%%GLOBAL_TrackingNo%%` | . |

                        | `%%GLOBAL_HideFormError%%` | . |

                        | `%%GLOBAL_PageId%%` | . |

                        | `%%GLOBAL_ContactName%%` | . |

                        | `%%GLOBAL_ContactEmail%%` | . |

                        | `%%GLOBAL_ContactCompanyName%%` | . |

                        | `%%GLOBAL_ContactPhone%%` | . |

                        | `%%GLOBAL_ContactOrderNo%%` | . |

                        | `%%GLOBAL_ContactRMA%%` | . |

                        | `%%GLOBAL_ContactQuestion%%` | . |

                        | `%%GLOBAL_CaptchaImage%%` | . |

                        | `%%GLOBAL_ARSPanel%%` | . |

                        | `%%GLOBAL_HidePayflowProError%%` | . |

                        | `%%GLOBAL_PayflowProErrorMessage%%` | . |

                        | `%%GLOBAL_PayflowProName%%` | . |

                        | `%%GLOBAL_PayflowProNum%%` | . |

                        | `%%GLOBAL_PayflowProMonths%%` | . |

                        | `%%GLOBAL_PayflowProYears%%` | . |

                        | `%%GLOBAL_PayflowProCCV2%%` | . |

                        | `%%GLOBAL_ProductReviewFlashMessages%%` | . |

                        | `%%GLOBAL_throttleToken%%` | . |

                        | `%%GLOBAL_ReviewRating5%%` | . |

                        | `%%GLOBAL_ReviewRating4%%` | . |

                        | `%%GLOBAL_ReviewRating3%%` | . |

                        | `%%GLOBAL_ReviewRating2%%` | . |

                        | `%%GLOBAL_ReviewRating1%%` | . |

                        | `%%GLOBAL_RevTitle%%` | . |

                        | `%%GLOBAL_RevText%%` | . |

                        | `%%GLOBAL_HideNoReviewsMessage%%` | . |

                        | `%%GLOBAL_NoReviews%%` | . |

                        | `%%GLOBAL_ProductReviewList%%` | . |

                        | `%%GLOBAL_AutoShowReviewForm%%` | . |

                        | `%%GLOBAL_JumpToReviews%%` | . |

                        | `%%GLOBAL_popupCssPath%%` | . |

                        | `%%GLOBAL_jQueryPath%%` | . |

                        | `%%GLOBAL_CurrentImageIndex%%` | . |

                        | `%%GLOBAL_ProductMaxImageHeight%%` | . |

                        | `%%GLOBAL_ProductMaxImageWidth%%` | . |

                        | `%%GLOBAL_VariationImage%%` | . |

                        | `%%GLOBAL_RuleImage%%` | . |

                        | `%%GLOBAL_ProductTinyBoxHeight%%` | . |

                        | `%%GLOBAL_UnsubscribeTitle%%` | . |

                        | `%%GLOBAL_DownloadIntro%%` | . |

                        | `%%GLOBAL_HideMessageSuccess%%` | . |

                        | `%%GLOBAL_HideMessageError%%` | . |

                        | `%%GLOBAL_HideNoOrderMessage%%` | . |

                        | `%%GLOBAL_HideInbox%%` | . |

                        | `%%GLOBAL_HideInboxMessage%%` | . |

                        | `%%GLOBAL_AccountInboxIntro%%` | . |

                        | `%%GLOBAL_ReturnReasonsList%%` | . |

                        | `%%GLOBAL_ReturnActionsList%%` | . |

                        | `%%GLOBAL_HideOrderStatus%%` | . |

                        | `%%GLOBAL_HideSingleShippingAddress%%` | . |

                        | `%%GLOBAL_FlassMessage%%` | . |

                        | `%%GLOBAL_HideItemDetailsHeader%%` | . |

                        | `%%GLOBAL_OrderTotalRows%%` | . |

                        | `%%GLOBAL_ShowOrderActions%%` | . |

                        | `%%GLOBAL_LNG_OrderShipments%%` | . |

                        | `%%GLOBAL_HideOrderStatusList%%` | . |

                        | `%%GLOBAL_HideNoOrderStatusMessage%%` | . |

                        | `%%GLOBAL_HideOrderList%%` | . |

                        | `%%GLOBAL_HideNoOrdersMessage%%` | . |

                        | `%%GLOBAL_HideRecentItemList%%` | . |

                        | `%%GLOBAL_HideNoRecentItemsMessage%%` | . |

                        | `%%GLOBAL_HideNoReturnsMessage%%` | . |

                        | `%%GLOBAL_HideReturnsList%%` | . |

                        | `%%GLOBAL_CheckEmail%%` | . |

                        | `%%GLOBAL_BrandsMessage%%` | . |

                        | `%%GLOBAL_HideBrandProductListing%%` | . |

                        | `%%GLOBAL_BrandProductListing%%` | . |

                        | `%%GLOBAL_HideShoppingCartGrid%%` | . |

                        | `%%GLOBAL_CartItemTotal%%` | . |

                        | `%%GLOBAL_HideGiftWrappingTotal%%` | . |

                        | `%%GLOBAL_GiftWrappingTotal%%` | . |

                        | `%%GLOBAL_HideDiscountAmount%%` | . |

                        | `%%GLOBAL_DiscountAmount%%` | . |

                        | `%%GLOBAL_HideShoppingCartShippingEstimator%%` | . |

                        | `%%GLOBAL_ShippingCountryList%%` | . |

                        | `%%GLOBAL_ShippingHideStateList%%` | . |

                        | `%%GLOBAL_ShippingStateList%%` | . |

                        | `%%GLOBAL_ShippingHideStateBox%%` | . |

                        | `%%GLOBAL_AddressState%%` | . |

                        | `%%GLOBAL_ShippingZip%%` | . |

                        | `%%GLOBAL_HideShoppingCartShippingCost%%` | . |

                        | `%%GLOBAL_ShippingCost%%` | . |

                        | `%%GLOBAL_HideShoppingCartHandlingCost%%` | . |

                        | `%%GLOBAL_HandlingCost%%` | . |

                        | `%%GLOBAL_Taxes%%` | . |

                        | `%%GLOBAL_CartTotal%%` | . |

                        | `%%GLOBAL_InclusiveTaxes%%` | . |

                        | `%%GLOBAL_HideMultipleAddressShipping%%` | . |

                        | `%%GLOBAL_HideMultipleAddressShippingOr%%` | . |

                        | `%%GLOBAL_KeepShoppingLink%%` | . |

                        | `%%GLOBAL_KeepShoppingText%%` | . |

                        | `%%GLOBAL_HideShoppingCartEmptyMessage%%` | . |

                        | `%%GLOBAL_CartCheckoutButtonControlScript%%` | . |

                        | `%%GLOBAL_CartStatusMessage%%` | . |

                        | `%%GLOBAL_CatName%%` | . |

                        | `%%GLOBAL_CatDesc%%` | . |

                        | `%%GLOBAL_DisplayMode%%` | . |

                        | `%%GLOBAL_CompareButton%%` | . |

                        | `%%GLOBAL_HideTitle%%` | . |

                        | `%%GLOBAL_BalanceTitle%%` | . |

                        | `%%GLOBAL_HideGiftCertificateError%%` | . |

                        | `%%GLOBAL_HideIntro%%` | . |

                        | `%%GLOBAL_HideExampleImage%%` | . |

                        | `%%GLOBAL_HideShippingTabs%%` | . |

                        | `%%GLOBAL_ActiveTabSingle%%` | . |

                        | `%%GLOBAL_ActiveTabMultiple%%` | . |

                        | `%%GLOBAL_HideTabSingle%%` | . |

                        | `%%GLOBAL_HideTabMultiple%%` | . |

                        | `%%GLOBAL_CheckoutMultiShippingIntro%%` | . |

                        | `%%GLOBAL_HideShippingProviderList%%` | . |

                        | `%%GLOBAL_HideNoShippingProviders%%` | . |

                        | `%%GLOBAL_ShippingError%%` | . |

                        | `%%GLOBAL_ComparisonHeading%%` | . |

                        | `%%GLOBAL_HideTooManyProductsMessage%%` | . |

                        | `%%GLOBAL_TooManyProductsMessage%%` | . |

                        | `%%GLOBAL_NumCompareItems%%` | . |

                        | `%%GLOBAL_HideConfirmOrderPage%%` | . |

                        | `%%GLOBAL_HideShippingDetails%%` | . |

                        | `%%GLOBAL_CreateAccountHeading%%` | . |

                        | `%%GLOBAL_HideCreateAccountIntroMessage%%` | . |

                        | `%%GLOBAL_HideCreateAccountErrorMessage%%` | . |

                        | `%%GLOBAL_CreateAccountEmailPassword%%` | . |

                        | `%%GLOBAL_CreateAccountDetails%%` | . |

                        | `%%GLOBAL_CreateAccountButtonText%%` | . |

                        | `%%GLOBAL_CreateAccountShippingFormFieldID%%` | . |

                        | `%%GLOBAL_HideEditAccountIntroMessage%%` | . |

                        | `%%GLOBAL_HideEditAccountErrorMessage%%` | . |

                        | `%%GLOBAL_HideEditAccountSuccessMessage%%` | . |

                        | `%%GLOBAL_AccountCurrentEmail%%` | . |

                        | `%%GLOBAL_AccountFirstName%%` | . |

                        | `%%GLOBAL_AccountLastName%%` | . |

                        | `%%GLOBAL_AccountCompanyName%%` | . |

                        | `%%GLOBAL_AccountPhone%%` | . |

                        | `%%GLOBAL_AccountFields%%` | . |

                        | `%%GLOBAL_EditAccountAccountFormFieldID%%` | . |

                        | `%%GLOBAL%%` | . |

                        | `%%GLOBAL_FacetedSearchOptionsJSON%%` | . |

                        | `%%GLOBAL_QuickLinkText%%` | . |

                        | `%%GLOBAL_Year%%` | . |

                        | `%%GLOBAL_PoweredBy%%` | . |

                        | `%%GLOBAL_PinterestJS%%` | . |

                        | `%%GLOBAL_CustomerId%%` | . |

                        | `%%GLOBAL_ForgottenPasswordToken%%` | . |

                        | `%%GLOBAL_CustomerEmailAddress%%` | . |

                        | `%%GLOBAL_RemainingBalance%%` | . |

                        | `%%GLOBAL_AdditionalMetaTags%%` | . |

                        | `%%GLOBAL_HeadFonts%%` | . |

                        | `%%GLOBAL_Favicon%%` | . |

                        | `%%GLOBAL_Stylesheets%%` | . |

                        | `%%GLOBAL_HeadRSSLinks%%` | . |

                        | `%%GLOBAL_TrackingCode%%` | . |

                        | `%%GLOBAL_DesignModeStyleSheet%%` | . |

                        | `%%GLOBAL_HeaderImageStyle%%` | . |

                        | `%%GLOBAL_FastCart%%` | . |

                        | `%%GLOBAL_ShowCookieWarningMessage%%` | . |

                        | `%%GLOBAL_ProductThumbImageWidth%%` | . |

                        | `%%GLOBAL_ProductThumbImageHeight%%` | . |

                        | `%%GLOBAL_AdditionalScriptTags%%` | . |

                        | `%%GLOBAL_RTLStyles%%` | . |

                        | `%%GLOBAL_HideHomeFeaturedProductsPanel%%` | . |

                        | `%%GLOBAL_HideHomeNewProductsPanel%%` | . |

                        | `%%GLOBAL_HideHomeRecentBlogsPanel%%` | . |

                        | `%%GLOBAL_SwapFrequency%%` | . |

                        | `%%GLOBAL_IdealIssuerOptions%%` | . |

                        | `%%GLOBAL_NewAccountHeading%%` | . |

                        | `%%GLOBAL_HideNewCustomerButton%%` | . |

                        | `%%GLOBAL_HideLoginNewAccountIntro%%` | . |

                        | `%%GLOBAL_BlogPathNormal%%` | . |

                        | `%%GLOBAL_BlogTitle%%` | . |

                        | `%%GLOBAL_NewsDate%%` | . |

                        | `%%GLOBAL_NewsContent%%` | . |

                        | `%%GLOBAL_SubscriptionHeading%%` | . |

                        | `%%GLOBAL_Class%%` | . |

                        | `%%GLOBAL_SubscriptionMessage%%` | . |

                        | `%%GLOBAL_ShortName%%` | . |

                        | `%%GLOBAL_PostTitle%%` | . |

                        | `%%GLOBAL_PostAuthor%%` | . |

                        | `%%GLOBAL_PostISO8601DatePublished%%` | . |

                        | `%%GLOBAL_PostDatePublished%%` | . |

                        | `%%GLOBAL_PostBody%%` | . |

                        | `%%GLOBAL_HideBreadCrumbs%%` | . |

                        | `%%GLOBAL_BreadCrumbs%%` | . |

                        | `%%GLOBAL_FindByCategory%%` | . |

                        | `%%GLOBAL_ProductDesc%%` | . |

                        | `%%GLOBAL_productAttributesCssPath%%` | . |

                        | `%%GLOBAL_CurrentProdThumbImage%%` | . |

                        | `%%GLOBAL_ProductMaxZoomWidth%%` | . |

                        | `%%GLOBAL_ProductMaxZoomHeight%%` | . |

                        | `%%GLOBAL_ShowImageZoomer%%` | . |

                        | `%%GLOBAL_ProductDetailFlashMessages%%` | . |

                        | `%%GLOBAL_HideProductThumb%%` | . |

                        | `%%GLOBAL_LightBoxImageJavascript%%` | . |

                        | `%%GLOBAL_HideImageCarousel%%` | . |

                        | `%%GLOBAL_HideMorePicturesLink%%` | . |

                        | `%%GLOBAL_SeeMorePictures%%` | . |

                        | `%%GLOBAL_PinterestButton%%` | . |

                        | `%%GLOBAL_HideReviewLink%%` | . |

                        | `%%GLOBAL_ReviewLinkOnClick%%` | . |

                        | `%%GLOBAL_ReviewLinkText%%` | . |

                        | `%%GLOBAL_FacebookLikeButtonAbove%%` | . |

                        | `%%GLOBAL_FacebookLikeButtonBelow%%` | . |

                        | `%%GLOBAL_NavLinkDisplay%%` | . |

                        | `%%GLOBAL_DisablePrevLink%%` | . |

                        | `%%GLOBAL_DisableNextLink%%` | . |

                        | `%%GLOBAL_TotalImages%%` | . |

                        | `%%GLOBAL_HideCustomFields%%` | . |

                        | `%%GLOBAL_ProductTabsControlScript%%` | . |

                        | `%%GLOBAL_ProductImageMode%%` | . |

                        | `%%GLOBAL_HideSingleVideo%%` | . |

                        | `%%GLOBAL_HideVideoList%%` | . |

                        | `%%GLOBAL_ProductWarranty%%` | . |

                        | `%%GLOBAL_QuickViewShareLinks%%` | . |

                        | `%%GLOBAL_QuickViewFacebookLikeButton%%` | . |

                        | `%%GLOBAL_QuickViewProductName%%` | . |

                        | `%%GLOBAL_QuickViewReviews%%` | . |

                        | `%%GLOBAL_HideRRP%%` | . |

                        | `%%GLOBAL_CertificateTitle%%` | . |

                        | `%%GLOBAL_HideGiftCertificateForm%%` | . |

                        | `%%GLOBAL_CertificateTo%%` | . |

                        | `%%GLOBAL_CertificateToEmail%%` | . |

                        | `%%GLOBAL_CertificateFrom%%` | . |

                        | `%%GLOBAL_CertificateFromEmail%%` | . |

                        | `%%GLOBAL_CertificateMessage%%` | . |

                        | `%%GLOBAL_HideGiftCertificateAmountSelect%%` | . |

                        | `%%GLOBAL_GiftCertificateAmountSelect%%` | . |

                        | `%%GLOBAL_HideGiftCertificateCustomAmount%%` | . |

                        | `%%GLOBAL_CustomCertificateAmount%%` | . |

                        | `%%GLOBAL_GiftCertificateRange%%` | . |

                        | `%%GLOBAL_HideExpiryInfo%%` | . |

                        | `%%GLOBAL_GiftCertificateTerms%%` | . |

                        | `%%GLOBAL_GiftCertificateThemes%%` | . |

                        | `%%GLOBAL_SaveGiftCertificateButton%%` | . |

                        | `%%GLOBAL_GiftCertificatePreviewModalTitle%%` | . |

                        | `%%GLOBAL_CategoryOptions%%` | . |

                        | `%%GLOBAL_SelectedCategoryOptions%%` | . |

                        | `%%GLOBAL_AutoHideSearchForm%%` | . |

                        | `%%GLOBAL_HideAdvancedLink%%` | . |

                        | `%%GLOBAL_HideAdvancedOptions%%` | . |

                        | `%%GLOBAL_FormattedSearchQuery%%` | . |

                        | `%%GLOBAL_BrandNameOptions%%` | . |

                        | `%%GLOBAL_PriceFrom%%` | . |

                        | `%%GLOBAL_PriceTo%%` | . |

                        | `%%GLOBAL_HideSearchResults%%` | . |

                        | `%%GLOBAL_SearchResults%%` | . |

                        | `%%GLOBAL_HideSearchResultsContent%%` | . |

                        | `%%GLOBAL_SearchResultsContent%%` | . |

                        | `%%GLOBAL_HideSearchResultsCategoryAndBrand%%` | . |

                        | `%%GLOBAL_HideSearchResultsCategory%%` | . |

                        | `%%GLOBAL_SearchResultsCategory%%` | . |

                        | `%%GLOBAL_HideSearchResultsBrand%%` | . |

                        | `%%GLOBAL_SearchResultsBrand%%` | . |

                        | `%%GLOBAL_HideSearchResultsProduct%%` | . |

                        | `%%GLOBAL_SearchResultsProduct%%` | . |

                        | `%%GLOBAL_SnippetSearchResultsFeed%%` | . |

                        | `%%GLOBAL_FirstProductId%%` | . |

                        | `%%GLOBAL_SharingData%%` | . |

                        | `%%GLOBAL_HideChooseAnotherToShare%%` | . |

                        | `%%GLOBAL_HideAddShippingAddressIntroMessage%%` | . |

                        | `%%GLOBAL_ShippingAddressFormIntro%%` | . |

                        | `%%GLOBAL_HideAddShippingAddressMessage%%` | . |

                        | `%%GLOBAL_Message%%` | . |

                        | `%%GLOBAL_ShippingAddressFormAction%%` | . |

                        | `%%GLOBAL_ShipId%%` | . |

                        | `%%GLOBAL_NumNewMessages%%` | . |

                        | `%%GLOBAL_NumWishListItems%%` | . |

                        | `%%GLOBAL_HideStoreCredit%%` | . |

                        | `%%GLOBAL_StoreCreditAmount%%` | . |

                        | `%%GLOBAL_HideBrandTagCloudPanel%%` | . |

                        | `%%GLOBAL_HideSideCart%%` | . |

                        | `%%GLOBAL_SideCartItemCount%%` | . |

                        | `%%GLOBAL_SideCategoryListTypeClass%%` | . |

                        | `%%GLOBAL_HideSideCategoryNewProductsPanel%%` | . |

                        | `%%GLOBAL_HideSideCategoryPopularProductsPanel%%` | .
                        |

                        | `%%GLOBAL_HideSideCategoryShopByPricePanel%%` | . |

                        | `%%GLOBAL_HideSideCategoryTopSellersPanel%%` | . |

                        | `%%GLOBAL_SideLiveChatCode%%` | . |

                        | `%%GLOBAL_HideSideNewProductsPanel%%` | . |

                        | `%%GLOBAL_NewsletterBoxControlScript%%` | . |

                        | `%%GLOBAL_HideSidePopularProductsPanel%%` | . |

                        | `%%GLOBAL_WishLists%%` | . |

                        | `%%GLOBAL_AlsoBoughtProductListing%%` | . |

                        | `%%GLOBAL_HideRecentlyViewedProductsPanel%%` | . |

                        | `%%GLOBAL_HideRelatedProductsPanel%%` | . |

                        | `%%GLOBAL_HideSideShopByBrandFullPanel%%` | . |

                        | `%%GLOBAL_HideSubPagesList%%` | . |

                        | `%%GLOBAL_PageLinks%%` | . |

                        | `%%GLOBAL_HideSideTopSellersPanel%%` | . |

                        | `%%GLOBAL_HideIfSubsection%%` | . |

                        | `%%GLOBAL_SitemapLink%%` | . |

                        | `%%GLOBAL_SitemapSubsectionTrail%%` | . |

                        | `%%GLOBAL_ShowNewsFeed%%` | . |

                        | `%%GLOBAL_ShowNewProductsFeed%%` | . |

                        | `%%GLOBAL_ShowPopularProductsFeed%%` | . |

                        | `%%GLOBAL_ShowFeaturedProductsFeed%%` | . |

                        | `%%GLOBAL_ShowSearchFeed%%` | . |

                        | `%%GLOBAL_TaggedProducts%%` | . |

                        | `%%GLOBAL_TagProductListing%%` | . |

                        | `%%GLOBAL_ShowStorePhoneNumber%%` | . |

                        | `%%GLOBAL_StorePhoneNumber%%` | . |

                        | `%%GLOBAL_LiveChatCodeEnabled%%` | . |

                        | `%%GLOBAL_LiveChatCode%%` | . |

                        | `%%GLOBAL_LoginOrLogoutText%%` | . |

                        | `%%GLOBAL_HideWishListAddFrom%%` | . |

                        | `%%GLOBAL_WishListAction%%` | . |

                        | `%%GLOBAL_SelectPublic%%` | . |

                        | `%%GLOBAL_HideWishListItems%%` | . |

                        | `%%GLOBAL_HideShareWishList%%` | . |

                        | `%%GLOBAL_ShareWishListClass%%` | . |

                        | `%%GLOBAL_ShareWishListIntro%%` | . |

                        | `%%GLOBAL_PublicWishListUrl%%` | . |

                        | `%%GLOBAL_HideWishLists%%` | . |

                        | `%%GLOBAL_HideWishListsTable%%` | . |

                        | `%%GLOBAL_DownloadName%%` | . |

                        | `%%GLOBAL_DisplayDownloadLink%%` | . |

                        | `%%GLOBAL_DownloadSize%%` | . |

                        | `%%GLOBAL_DownloadColor%%` | . |

                        | `%%GLOBAL_DisplayDownloadExpired%%` | . |

                        | `%%GLOBAL_DownloadDescription%%` | . |

                        | `%%GLOBAL_MessageSubject%%` | . |

                        | `%%GLOBAL_MessageDate%%` | . |

                        | `%%GLOBAL_Icon%%` | . |

                        | `%%GLOBAL_Sender%%` | . |

                        | `%%GLOBAL_MessageContent%%` | . |

                        | `%%GLOBAL_OrderItemMessage%%` | . |

                        | `%%GLOBAL_ProductQtySelect%%` | . |

                        | `%%GLOBAL_DisableViewButton%%` | . |

                        | `%%GLOBAL_DownloadItemEncrypted%%` | . |

                        | `%%GLOBAL_ItemQty%%` | . |

                        | `%%GLOBAL_ItemName%%` | . |

                        | `%%GLOBAL_ItemShippingRow%%` | . |

                        | `%%GLOBAL_DisableReorder%%` | . |

                        | `%%GLOBAL_Qty%%` | . |

                        | `%%GLOBAL_Link%%` | . |

                        | `%%GLOBAL_Target%%` | . |

                        | `%%GLOBAL_Name%%` | . |

                        | `%%GLOBAL_HideItemMessage%%` | . |

                        | `%%GLOBAL_ReorderMessage%%` | . |

                        | `%%GLOBAL_Price%%` | . |

                        | `%%GLOBAL_ItemShippingRow_AddressLine%%` | . |

                        | `%%GLOBAL_TrackingLink%%` | . |

                        | `%%GLOBAL_OrderInstructions%%` | . |

                        | `%%GLOBAL_ReturnedQuantity%%` | . |

                        | `%%GLOBAL_ReturnedProduct%%` | . |

                        | `%%GLOBAL_ReturnedProductOptions%%` | . |

                        | `%%GLOBAL_DateRequested%%` | . |

                        | `%%GLOBAL_HideReturnComment%%` | . |

                        | `%%GLOBAL_AddThisServiceButtonMeta%%` | . |

                        | `%%GLOBAL_AddThisServiceButtons%%` | . |

                        | `%%GLOBAL_Thumbnail%%` | . |

                        | `%%GLOBAL_RecentPostSummary%%` | . |

                        | `%%GLOBAL_NumProducts%%` | . |

                        | `%%GLOBAL_TagSize%%` | . |

                        | `%%GLOBAL_ChooseBrandFromList%%` | . |

                        | `%%GLOBAL_CouponId%%` | . |

                        | `%%GLOBAL_MASTER_THEME_PATH%%` | . |

                        | `%%GLOBAL_CustomizeProductTitle%%` | . |

                        | `%%GLOBAL_GiftCertificateId%%` | . |

                        | `%%GLOBAL_HideGiftWrappingAdd%%` | . |

                        | `%%GLOBAL_HideGiftWrappingEdit%%` | . |

                        | `%%GLOBAL_CartItemQty%%` | . |

                        | `%%GLOBAL_HideCartItemRemove%%` | . |

                        | `%%GLOBAL_QtySelectStyle%%` | . |

                        | `%%GLOBAL_Quantity1%%` | . |

                        | `%%GLOBAL_Quantity2%%` | . |

                        | `%%GLOBAL_Quantity3%%` | . |

                        | `%%GLOBAL_Quantity4%%` | . |

                        | `%%GLOBAL_Quantity5%%` | . |

                        | `%%GLOBAL_Quantity6%%` | . |

                        | `%%GLOBAL_Quantity7%%` | . |

                        | `%%GLOBAL_Quantity8%%` | . |

                        | `%%GLOBAL_Quantity9%%` | . |

                        | `%%GLOBAL_Quantity10%%` | . |

                        | `%%GLOBAL_Quantity11%%` | . |

                        | `%%GLOBAL_Quantity12%%` | . |

                        | `%%GLOBAL_Quantity13%%` | . |

                        | `%%GLOBAL_Quantity14%%` | . |

                        | `%%GLOBAL_Quantity15%%` | . |

                        | `%%GLOBAL_Quantity16%%` | . |

                        | `%%GLOBAL_Quantity17%%` | . |

                        | `%%GLOBAL_Quantity18%%` | . |

                        | `%%GLOBAL_Quantity19%%` | . |

                        | `%%GLOBAL_Quantity20%%` | . |

                        | `%%GLOBAL_Quantity21%%` | . |

                        | `%%GLOBAL_Quantity22%%` | . |

                        | `%%GLOBAL_Quantity23%%` | . |

                        | `%%GLOBAL_Quantity24%%` | . |

                        | `%%GLOBAL_Quantity25%%` | . |

                        | `%%GLOBAL_Quantity26%%` | . |

                        | `%%GLOBAL_Quantity27%%` | . |

                        | `%%GLOBAL_Quantity28%%` | . |

                        | `%%GLOBAL_Quantity29%%` | . |

                        | `%%GLOBAL_Quantity30%%` | . |

                        | `%%GLOBAL_QtyOptionSelected%%` | . |

                        | `%%GLOBAL_ProductAttributeName%%` | . |

                        | `%%GLOBAL_ProductAttributeValue%%` | . |

                        | `%%GLOBAL_NextLink%%` | . |

                        | `%%GLOBAL_PrevLink%%` | . |

                        | `%%GLOBAL_URL%%` | . |

                        | `%%GLOBAL_HiddenSortField%%` | . |

                        | `%%GLOBAL_SortFeaturedSelected%%` | . |

                        | `%%GLOBAL_SortNewestSelected%%` | . |

                        | `%%GLOBAL_SortBestSellingSelected%%` | . |

                        | `%%GLOBAL_SortAlphaAsc%%` | . |

                        | `%%GLOBAL_SortAlphaDesc%%` | . |

                        | `%%GLOBAL_SortAvgReview%%` | . |

                        | `%%GLOBAL_SortPriceAsc%%` | . |

                        | `%%GLOBAL_SortPriceDesc%%` | . |

                        | `%%GLOBAL_HideCartProductFields%%` | . |

                        | `%%GLOBAL_MailFormatPreferenceOptions%%` | . |

                        | `%%GLOBAL_ProviderChecked%%` | . |

                        | `%%GLOBAL_ProviderType%%` | . |

                        | `%%GLOBAL_ProviderPaymentFormClass%%` | . |

                        | `%%GLOBAL_ProviderName%%` | . |

                        | `%%GLOBAL_HideAddressButton%%` | . |

                        | `%%GLOBAL_CompareWidth%%` | . |

                        | `%%GLOBAL_RemoveCompareLink%%` | . |

                        | `%%GLOBAL_HideComparisonReviewLink%%` | . |

                        | `%%GLOBAL_NumReviews%%` | . |

                        | `%%GLOBAL_ProductSummary%%` | . |

                        | `%%GLOBAL_CustomFields%%` | . |

                        | `%%GLOBAL_ProductBrand%%` | . |

                        | `%%GLOBAL_CompareHeadWidth%%` | . |

                        | `%%GLOBAL_HideProductPrice%%` | . |

                        | `%%GLOBAL_PrivacyCookieNotification%%` | . |

                        | `%%GLOBAL_ProductAttributesJavascript%%` | . |

                        | `%%GLOBAL_DesignModeCurrentTemplate%%` | . |

                        | `%%GLOBAL_DesignModeUpdateUrl%%` | . |

                        | `%%GLOBAL_ShippingQuoteRow%%` | . |

                        | `%%GLOBAL_EventDateNameRequired%%` | . |

                        | `%%GLOBAL_EventDateName%%` | . |

                        | `%%GLOBAL_EventDateLimitations%%` | . |

                        | `%%GLOBAL_EventDateMonthStyle%%` | . |

                        | `%%GLOBAL_OverviewToMonths%%` | . |

                        | `%%GLOBAL_EventDateDayStyle%%` | . |

                        | `%%GLOBAL_OverviewToDays%%` | . |

                        | `%%GLOBAL_EventDateYearStyle%%` | . |

                        | `%%GLOBAL_OverviewToYears%%` | . |

                        | `%%GLOBAL_AddressSelected%%` | . |

                        | `%%GLOBAL_UseExistingAddress%%` | . |

                        | `%%GLOBAL_AddressList%%` | . |

                        | `%%GLOBAL_AddNewAddress%%` | . |

                        | `%%GLOBAL_HideCreateAddress%%` | . |

                        | `%%GLOBAL_CompiledFormFields%%` | . |

                        | `%%GLOBAL_HideSaveAddress%%` | . |

                        | `%%GLOBAL_SaveAddressChecked%%` | . |

                        | `%%GLOBAL_CompiledFormFieldJavascript%%` | . |

                        | `%%GLOBAL_AdjustedTotalCost%%` | . |

                        | `%%GLOBAL_HideButtomPaymentButton%%` | . |

                        | `%%GLOBAL_ExpressCheckoutLoadPaymentForm%%` | . |

                        | `%%GLOBAL_FrameWidth%%` | . |

                        | `%%GLOBAL_FacebookButtonHref%%` | . |

                        | `%%GLOBAL_fastCartProdImg%%` | . |

                        | `%%GLOBAL_fastCartQuantityTxt%%` | . |

                        | `%%GLOBAL_fastCartProdLink%%` | . |

                        | `%%GLOBAL_fastCartQuantity%%` | . |

                        | `%%GLOBAL_fastCartProdTotal%%` | . |

                        | `%%GLOBAL_fastCartSubtotal%%` | . |

                        | `%%GLOBAL_fastCartNumItemsTxt%%` | . |

                        | `%%GLOBAL_FeaturedCategoryTextColourClass%%` | . |

                        | `%%GLOBAL_FeaturedCategoryRootName%%` | . |

                        | `%%GLOBAL_FeaturedCategoryUrl%%` | . |

                        | `%%GLOBAL_FeaturedCategoryImage%%` | . |

                        | `%%GLOBAL_FeaturedCategoryImageStyle%%` | . |

                        | `%%GLOBAL_FlyoutNodeUrl%%` | . |

                        | `%%GLOBAL_FlyoutNodeLabel%%` | . |

                        | `%%GLOBAL_HideWrappingTitle%%` | . |

                        | `%%GLOBAL_ExtraClass%%` | . |

                        | `%%GLOBAL_WrappingOptions%%` | . |

                        | `%%GLOBAL_GiftWrapPreviewLinks%%` | . |

                        | `%%GLOBAL_GiftWrapMessage%%` | . |

                        | `%%GLOBAL_HideWrappingSeparator%%` | . |

                        | `%%GLOBAL_CurrencyID%%` | . |

                        | `%%GLOBAL_CurrencyFlagURL%%` | . |

                        | `%%GLOBAL_CurrencyClass%%` | . |

                        | `%%GLOBAL_CustomerPhone%%` | . |

                        | `%%GLOBAL_TotalCost%%` | . |

                        | `%%GLOBAL_CdnStorePath%%` | . |

                        | `%%GLOBAL_ImageDirectory%%` | The name of the product
                        images directory. |

                        | `%%GLOBAL_StoreLogo%%` | The store logo (image or text
                        logo) |

                        | `%%GLOBAL_LogoText%%` | . |

                        | `%%GLOBAL_MsgBox_Type%%` | . |

                        | `%%GLOBAL_MsgBox_Message%%` | . |

                        | `%%GLOBAL_MobileSiteURL%%` | . |

                        | `%%GLOBAL_ShippingAddressSelect%%` | . |

                        | `%%GLOBAL_HasSubMenuClass%%` | . |

                        | `%%GLOBAL_ActivePageClass%%` | . |

                        | `%%GLOBAL_SubMenu%%` | . |

                        | `%%GLOBAL_SubMenuLinks%%` | . |

                        | `%%GLOBAL_RSSLink%%` | . |

                        | `%%GLOBAL_RSSTitle%%` | . |

                        | `%%GLOBAL_RSSDescription%%` | . |

                        | `%%GLOBAL_sPageLink%%` | . |

                        | `%%GLOBAL_sPageName%%` | . |

                        | `%%GLOBAL_PinterestButtonDescription%%` | . |

                        | `%%GLOBAL_TagUrl%%` | . |

                        | `%%GLOBAL_InvoiceTitle%%` | . |

                        | `%%GLOBAL_invoiceItemClass%%` | . |

                        | `%%GLOBAL_addressColumnRowSpan%%` | . |

                        | `%%GLOBAL_productShippingAddress%%` | . |

                        | `%%GLOBAL_HidePreOrder%%` | . |

                        | `%%GLOBAL_ProductPreOrder%%` | . |

                        | `%%GLOBAL_ProductCost%%` | . |

                        | `%%GLOBAL_ProductTotalCost%%` | . |

                        | `%%GLOBAL_FieldName%%` | . |

                        | `%%GLOBAL_SKUValue%%` | . |

                        | `%%GLOBAL_FieldValue%%` | . |

                        | `%%GLOBAL_classNameAppend%%` | . |

                        | `%%GLOBAL_totalRowColspan%%` | . |

                        | `%%GLOBAL_ProductBinNumber%%` | . |

                        | `%%GLOBAL_AddToCartButtonControlScript%%` | . |

                        | `%%GLOBAL_HideSKU%%` | . |

                        | `%%GLOBAL_SKU%%` | . |

                        | `%%GLOBAL_HideCondition%%` | . |

                        | `%%GLOBAL_ProductCondition%%` | . |

                        | `%%GLOBAL_HideWeight%%` | . |

                        | `%%GLOBAL_ProductWeight%%` | . |

                        | `%%GLOBAL_HideAvailability%%` | . |

                        | `%%GLOBAL_Availability%%` | . |

                        | `%%GLOBAL_HideShipping%%` | . |

                        | `%%GLOBAL_HideMinQty%%` | . |

                        | `%%GLOBAL_MinQty%%` | . |

                        | `%%GLOBAL_HideMaxQty%%` | . |

                        | `%%GLOBAL_MaxQty%%` | . |

                        | `%%GLOBAL_HideCurrentStock%%` | . |

                        | `%%GLOBAL_CurrentStockLabel%%` | . |

                        | `%%GLOBAL_InventoryList%%` | . |

                        | `%%GLOBAL_GiftWrappingAvailable%%` | . |

                        | `%%GLOBAL_ProductBulkDiscountThickBox%%` | . |

                        | `%%GLOBAL_BreadcrumbItems%%` | . |

                        | `%%GLOBAL_BulkDiscountThickBoxTitle%%` | . |

                        | `%%GLOBAL_ReleaseDate%%` | . |

                        | `%%GLOBAL_CheckboxFieldNameLeft%%` | . |

                        | `%%GLOBAL_CheckboxFieldNameRight%%` | . |

                        | `%%GLOBAL_FindByCategoryItems%%` | . |

                        | `%%GLOBAL_ProdImageZoomJavascript%%` | . |

                        | `%%GLOBAL_LightBoxImageList%%` | . |

                        | `%%GLOBAL_ProductTinyBoxWidth%%` | . |

                        | `%%GLOBAL_VisibleImageTotal%%` | . |

                        | `%%GLOBAL_ReviewError%%` | . |

                        | `%%GLOBAL_AlternateReviewClass%%` | . |

                        | `%%GLOBAL_ReviewTitle%%` | . |

                        | `%%GLOBAL_ReviewRating%%` | . |

                        | `%%GLOBAL_ReviewName%%` | . |

                        | `%%GLOBAL_ReviewDate%%` | . |

                        | `%%GLOBAL_ReviewText%%` | . |

                        | `%%GLOBAL_ProductReviews%%` | . |

                        | `%%GLOBAL_PrevRevLink%%` | . |

                        | `%%GLOBAL_ReviewEnd%%` | . |

                        | `%%GLOBAL_ProductNumReviews%%` | . |

                        | `%%GLOBAL_NextRevLink%%` | . |

                        | `%%GLOBAL_TinyImageOverJavascript%%` | . |

                        | `%%GLOBAL_ProductThumbImageURL%%` | . |

                        | `%%GLOBAL_ProductZoomImageURL%%` | . |

                        | `%%GLOBAL_ProductTinyImageURL%%` | . |

                        | `%%GLOBAL_VariationChooseText%%` | . |

                        | `%%GLOBAL_OptionChecked%%` | . |

                        | `%%GLOBAL_BlogLink%%` | . |

                        | `%%GLOBAL_BlogText%%` | . |

                        | `%%GLOBAL_BlogPreview%%` | . |

                        | `%%GLOBAL_RelatedSearchQuery%%` | . |

                        | `%%GLOBAL_RelatedSearchText%%` | . |

                        | `%%GLOBAL_ProductNoImageClassName%%` | . |

                        | `%%GLOBAL_ProductRatingImage%%` | . |

                        | `%%GLOBAL_HideSectionSorting%%` | . |

                        | `%%GLOBAL_SectionSortingOptions%%` | . |

                        | `%%GLOBAL_SectionExtraClass%%` | . |

                        | `%%GLOBAL_SectionResults%%` | . |

                        | `%%GLOBAL_NewsSmallContent%%` | . |

                        | `%%GLOBAL_GiftWrappingTitle%%` | . |

                        | `%%GLOBAL_GiftWrapModalClass%%` | . |

                        | `%%GLOBAL_ShippingData%%` | . |

                        | `%%GLOBAL_HideAddressLine%%` | . |

                        | `%%GLOBAL_HideItemList%%` | . |

                        | `%%GLOBAL_ShippingProviders%%` | . |

                        | `%%GLOBAL_HideHorizontalRule%%` | . |

                        | `%%GLOBAL_PriceLink%%` | . |

                        | `%%GLOBAL_PriceLow%%` | . |

                        | `%%GLOBAL_PriceHigh%%` | . |

                        | `%%GLOBAL_LastChildClass%%` | . |

                        | `%%GLOBAL_CategoryLink%%` | . |

                        | `%%GLOBAL_CategoryName%%` | . |

                        | `%%GLOBAL_SubCategoryList%%` | . |

                        | `%%GLOBAL_CurrencyFlagStyle%%` | . |

                        | `%%GLOBAL_CurrencySwitchLink%%` | . |

                        | `%%GLOBAL_CurrencySelected%%` | . |

                        | `%%GLOBAL_CurrencyFlag%%` | . |

                        | `%%GLOBAL_RootCatName%%` | . |

                        | `%%GLOBAL_RootCatList%%` | . |

                        | `%%GLOBAL_ProductRatingImageDimensions%%` | . |

                        | `%%GLOBAL_SitemapURL_HTML%%` | . |

                        | `%%GLOBAL_ModelType%%` | . |

                        | `%%GLOBAL_ModelHeading%%` | . |

                        | `%%GLOBAL_ModelBody%%` | . |

                        | `%%GLOBAL_ModelHideAllLink%%` | . |

                        | `%%GLOBAL_ModelSubsectionURL%%` | . |

                        | `%%GLOBAL_Slide_Link_Url%%` | . |

                        | `%%GLOBAL_Slide_Heading_Color%%` | . |

                        | `%%GLOBAL_Slide_Heading_Text%%` | . |

                        | `%%GLOBAL_Slide_Text_Color%%` | . |

                        | `%%GLOBAL_Slide_Text_Text%%` | . |

                        | `%%GLOBAL_Slide_Button_Hide%%` | . |

                        | `%%GLOBAL_Slide_Button_Color%%` | . |

                        | `%%GLOBAL_Slide_Button_Text%%` | . |

                        | `%%GLOBAL_Slide_Image_Url%%` | . |

                        | `%%GLOBAL_Slide_Image_AlternateText%%` | . |

                        | `%%GLOBAL_SocialMedia_Service_Url%%` | . |

                        | `%%GLOBAL_UseThemeSettingsClass%%` | . |

                        | `%%GLOBAL_SocialMedia_Service_Class%%` | . |

                        | `%%GLOBAL_SharingActiveTab%%` | . |

                        | `%%GLOBAL_SharingIcon%%` | . |

                        | `%%GLOBAL_SharingDisplay%%` | . |

                        | `%%GLOBAL_SubBrandImage%%` | . |

                        | `%%GLOBAL_SubCatImage%%` | . |

                        | `%%GLOBAL_VideoTitleShort%%` | . |

                        | `%%GLOBAL_VideoDescriptionShort%%` | . |

                        | `%%GLOBAL_NumOfItems%%` | . |

                        | `%%GLOBAL_WishListShared%%` | . |

                        | `%%GLOBAL_ShareWishListLink%%` | . |

                        | `%%GLOBAL_HideRemoveItemButton%%` | . |

                        | `%%GLOBAL_MerchantName%%` | . |

                        | `%%GLOBAL_AC_EmailBody%%` | . |

                        | `%%GLOBAL_AC_UnsubscribeLink%%` | . |

                        | `%%GLOBAL_Email%%` | . |

                        | `%%GLOBAL_Password%%` | . |

                        | `%%GLOBAL_Ebay_Listing_Abort_Email_Message_1%%` | . |

                        | `%%GLOBAL_Ebay_Listing_Abort_Email_Message_2%%` | . |

                        | `%%GLOBAL_Ebay_Listing_Error_Email_Message_1%%` | . |

                        | `%%GLOBAL_Ebay_Listing_Error_Email_Error_Heading%%` |
                        . |

                        | `%%GLOBAL_Ebay_Listing_Error_Email_Error%%` | . |

                        | `%%GLOBAL_Ebay_Listing_Error_Email_Error_Footer%%` | .
                        |

                        | `%%GLOBAL_Ebay_Listing_End_Email_Message_1%%` | . |

                        | `%%GLOBAL_Ebay_Listing_End_Email_Message_2%%` | . |

                        | `%%GLOBAL_Ebay_Listing_End_Email_Message_3%%` | . |

                        | `%%GLOBAL_Ebay_Listing_End_Email_Message_4%%` | . |

                        | `%%GLOBAL_Ebay_Listing_End_Email_Errors_Heading%%` | .
                        |

                        | `%%GLOBAL_Ebay_Listing_End_Email_Errors%%` | . |

                        | `%%GLOBAL_Ebay_Listing_End_Email_Warnings_Heading%%` |
                        . |

                        | `%%GLOBAL_Ebay_Listing_End_Email_Warnings%%` | . |

                        |
                        `%%GLOBAL_EmailIntegration_Export_Abort_Email_Message_1%%`
                        | . |

                        |
                        `%%GLOBAL_EmailIntegration_Export_Abort_Email_Message_2%%`
                        | . |

                        |
                        `%%GLOBAL_EmailIntegration_Export_Error_Email_Message_1%%`
                        | . |

                        |
                        `%%GLOBAL_EmailIntegration_Export_Error_Email_Error_Heading%%`
                        | . |

                        | `%%GLOBAL_EmailIntegration_Export_Error_Email_Error%%`
                        | . |

                        |
                        `%%GLOBAL_EmailIntegration_Export_Error_Email_Error_Footer%%`
                        | . |

                        |
                        `%%GLOBAL_EmailIntegration_Export_End_Email_Message_1%%`
                        | . |

                        |
                        `%%GLOBAL_EmailIntegration_Export_End_Email_Message_2%%`
                        | . |

                        |
                        `%%GLOBAL_EmailIntegration_Export_End_Email_Message_3%%`
                        | . |

                        |
                        `%%GLOBAL_EmailIntegration_Export_End_Email_Message_4%%`
                        | . |

                        |
                        `%%GLOBAL_EmailIntegration_Export_End_Email_Errors_Heading%%`
                        | . |

                        | `%%GLOBAL_EmailIntegration_Export_End_Email_Errors%%`
                        | . |

                        | `%%GLOBAL_EmailIntegrationNotice_Header%%` | . |

                        | `%%GLOBAL_EmailIntegrationNotice_Intro%%` | . |

                        | `%%GLOBAL_EmailIntegrationNotice_Error%%` | . |

                        | `%%GLOBAL_EmailIntegrationNotice_Message%%` | . |

                        | `%%GLOBAL_EmailIntegrationNotice_Time%%` | . |

                        | `%%GLOBAL_EmailIntegrationNotice_Details%%` | . |

                        | `%%GLOBAL_EmailIntegrationNotice_Type%%` | . |

                        | `%%GLOBAL_EmailIntegrationNotice_Subscription%%` | . |

                        | `%%GLOBAL_EmailIntegrationNotice_CommonCauses%%` | . |

                        | `%%GLOBAL_EmailIntegrationNotice_Cause1_Intro%%` | . |

                        | `%%GLOBAL_EmailIntegrationNotice_Cause1_Detail%%` | .
                        |

                        | `%%GLOBAL_EmailIntegrationNotice_Cause2_Intro%%` | . |

                        | `%%GLOBAL_EmailIntegrationNotice_Cause2_Detail%%` | .
                        |

                        | `%%GLOBAL_EmailIntegrationNotice_Cause3_Intro%%` | . |

                        | `%%GLOBAL_EmailIntegrationNotice_Cause3_Detail%%` | .
                        |

                        | `%%GLOBAL_EmailIntegrationNotice_Cause4_Intro%%` | . |

                        | `%%GLOBAL_EmailIntegrationNotice_Cause4_Detail%%` | .
                        |

                        | `%%GLOBAL_EmailIntegrationNotice_Cause5_Intro%%` | . |

                        | `%%GLOBAL_EmailIntegrationNotice_Cause5_Detail%%` | .
                        |

                        | `%%GLOBAL_EmailIntegrationNotice_Closing%%` | . |

                        | `%%GLOBAL_NoticeOfEmailIntegrationRulesDeletion_1%%` |
                        . |

                        | `%%GLOBAL_NoticeOfEmailIntegrationRulesDeletion_2%%` |
                        . |

                        |
                        `%%GLOBAL_NoticeOfEmailIntegrationRulesDeletion_Lists%%`
                        | . |

                        | `%%GLOBAL_DeletedLists%%` | . |

                        | `%%GLOBAL_NoticeOfEmailIntegrationRulesDeletion_3%%` |
                        . |

                        | `%%GLOBAL_NoticeOfEmailIntegrationRulesDeletion_4%%` |
                        . |

                        | `%%GLOBAL_NoticeOfEmailIntegrationRulesUpdate_1%%` | .
                        |

                        | `%%GLOBAL_NoticeOfEmailIntegrationRulesUpdate_2%%` | .
                        |

                        |
                        `%%GLOBAL_NoticeOfEmailIntegrationRulesUpdate_MergeFields%%`
                        | . |

                        | `%%GLOBAL_MergeFieldsList%%` | . |

                        | `%%GLOBAL_NoticeOfEmailIntegrationRulesUpdate_3%%` | .
                        |

                        | `%%GLOBAL_NoticeOfEmailIntegrationRulesUpdate_4%%` | .
                        |

                        | `%%GLOBAL_EmailMessage%%` | . |

                        | `%%GLOBAL_ToName%%` | . |

                        | `%%GLOBAL_Intro%%` | . |

                        | `%%GLOBAL_NoPaymentTaken%%` | . |

                        | `%%GLOBAL_OrderNumber%%` | . |

                        | `%%GLOBAL_ViewOrderStatusMsg%%` | . |

                        | `%%GLOBAL_PendingPaymentNotice%%` | . |

                        | `%%GLOBAL_PendingPaymentDetails%%` | . |

                        | `%%GLOBAL_OrderCommentBlock%%` | . |

                        | `%%GLOBAL_CartItemColumns%%` | . |

                        | `%%GLOBAL_LowInventoryWarning%%` | . |

                        | `%%GLOBAL_LowInventoryWarningIntro%%` | . |

                        | `%%GLOBAL_LowInventoryWarningProduct%%` | . |

                        | `%%GLOBAL_LowInventoryWarningCurrentStock%%` | . |

                        | `%%GLOBAL_LowInventoryWarningNotice%%` | . |

                        | `%%GLOBAL_TrackingLinkList%%` | . |

                        | `%%GLOBAL_ViewOrderStatusLink%%` | . |

                        | `%%GLOBAL_FormFieldList%%` | . |

                        | `%%GLOBAL_Question%%` | . |

                        | `%%GLOBAL_ProductReviewEmailUnsubscribeLink%%` | . |

                        | `%%GLOBAL_CustomerFirstName%%` | . |

                        | `%%GLOBAL_ReturnReceivedCredit%%` | . |

                        | `%%GLOBAL_AC_EmailIntroText%%` | . |

                        | `%%GLOBAL_ProductThumbnailUrl%%` | . |

                        | `%%GLOBAL_AC_ExistingCustomer%%` | . |

                        | `%%GLOBAL_AC_CustomerName%%` | . |

                        | `%%GLOBAL_AC_CustomerEmail%%` | . |

                        | `%%GLOBAL_AC_CustomerPhone%%` | . |

                        | `%%GLOBAL_AC_CustomerAddress%%` | . |

                        | `%%GLOBAL_AC_ModifiedType%%` | . |

                        | `%%GLOBAL_AC_DateModified%%` | . |

                        | `%%GLOBAL_AC_CartContents%%` | . |

                        | `%%GLOBAL_AC_CouponCode%%` | . |

                        | `%%GLOBAL_AC_CouponCodeText%%` | . |

                        | `%%GLOBAL_FormField%%` | . |

                        | `%%GLOBAL_FormValue%%` | . |

                        | `%%GLOBAL_PaymentGatewayAmount%%` | . |

                        | `%%GLOBAL_NoPaymentTakenModuleInTestMode%%` | . |

                        | `%%GLOBAL_OrderTrackingNo%%` | . |

                        | `%%GLOBAL_TrackURL%%` | . |

                        | `%%GLOBAL_RawProductPrice%%` | Currency, as a unique
                        alphanumeric code. To follow best practices for
                        microdata, use this variable – together with
                        `%%GLOBAL_RawProductPrice%%` – rather than
                        `%%GLOBAL_ProductPrice%%` (which includes a currency
                        token/symbol). |

                        | `%%GLOBAL_SelectedCurrencyCode%% ` | Currency, as a
                        unique alphanumeric code. To follow best practices for
                        microdata, use this variable – together with
                        `%%GLOBAL_RawProductPrice%%` – rather than
                        `%%GLOBAL_ProductPrice%%` (which includes a currency
                        token/symbol). |

                        | `%%GLOBAL_ProductReviewLink%%` | . |

                        | `%%GLOBAL_ProductQty%%` | . |

                        | `%%GLOBAL_ProductCustomFields%%` | You can use the
                        %%GLOBAL_ProductCustomFields%% variable in any template
                        file where you can use %%GLOBAL_ProductPrice%%. (Namely,
                        in template files that render a particular panel's
                        individual items. Examples are:
                        Snippets/CategoryProductsItem.html, for category pages;
                        or Snippets/HomeFeaturedProductsItem.html, for the
                        Featured Products panel.) Once
                        %%GLOBAL_ProductCustomFields%% is added, it will render
                        the entire table of custom fields. To incorporate this
                        variable into faceted search, we recommend adding the
                        following code to Panels/FacetedSearchProductGrid.html:

                        | |Once %%GLOBAL_ProductCustomFields%% is added, it will
                        render the entire table of custom fields. To incorporate
                        this variable into faceted search, we recommend adding
                        the following code to
                        Panels/FacetedSearchProductGrid.html:

                        | |<pre>{{#each product.custom_fields}}

                        | |   {{ id }} : {{ name }} : {{ value }}

                        | |{{/each}} </pre>|
                                
              - title: LNG Variables
                route:
                  path: /lng-variables
                data:
                  blocks:
                    - type: html
                      data: |
                        <h1>LNG Variables</h1>
                    - type: text
                      data: "The Blueprint theme uses the following LNG variables to reference text strings. This list is sorted alphabetically by variable name. \n\nTo make it easier for store owners who might wish to translate, or otherwise modify, their strings: Use these variables instead of hard-coding string values into your theme.\n<br>\n\n<table>\n<thead>\n   <tr>\n       <th class=\"filters-parameter\">Variable</th>\n       <th class=\"variable-description\">Default string value</th>\n   </tr>\n</thead>\n<tbody>\n<TR><TD><CODE>%%LNG_AC_AbandonedCartConvertedHeading%%</code></TD>\n<TD>\"An abandoned cart was converted to an order\"</td></tr>\n<TR><TD><CODE>%%LNG_AC_AbandonedCartNoticeHeading%%</code></TD>\n<TD>\"Abandoned Cart Notice\"</td></tr>\n<TR><TD><CODE>%%LNG_AC_CartContentsSubheading%%</code></TD>\n<TD>\"Products In Cart\"</td></tr>\n<TR><TD><CODE>%%LNG_AC_ContactDetailsSubheading%%</code></TD>\n<TD>\"Contact Details\"</td></tr>\n<TR><TD><CODE>%%LNG_AC_CouponCodeAfterText%%</code></TD>\n<TD>\" during checkout to receive \"</td></tr>\n<TR><TD><CODE>%%LNG_AC_CouponCodeBeforeText%%</code></TD>\n<TD>\"Enter coupon code \"</td></tr>\n<TR><TD><CODE>%%LNG_AC_EmailUnsubscribe%%</code></TD>\n<TD>\"Unsubscribe\"</td></tr>\n<TR><TD><CODE>%%LNG_AC_EmailUnsubscribeSuffix%%</code></TD>\n<TD>\" from future emails like this\"</td></tr>\n<TR><TD><CODE>%%LNG_AC_RecoveredEmailIntroText%%</code></TD>\n<TD>\"The automated emails we've been sending shoppers who didn't make it all the way through the checkout process have resulted in a new order. The customer's contact details and ordered items are shown below.\"</td></tr>\n<TR><TD><CODE>%%LNG_AC_RecoveredEmailSubHeading%%</code></TD>\n<TD>\"Congratulations!\"</td></tr>\n<TR><TD><CODE>%%LNG_AccountDetailsDescription%%</code></TD>\n<TD>\"Update your contact details, email address and/or change your password.\"</td></tr>\n<TR><TD><CODE>%%LNG_AccountEnterFirstName%%</code></TD>\n<TD>\"Please type in your first name.\"</td></tr>\n<TR><TD><CODE>%%LNG_AccountEnterLastName%%</code></TD>\n<TD>\"Please type in your last name.\"</td></tr>\n<TR><TD><CODE>%%LNG_AccountEnterPassword%%</code></TD>\n<TD>\"Please type in a password.\"</td></tr>\n<TR><TD><CODE>%%LNG_AccountEnterPhoneNumber%%</code></TD>\n<TD>\"Please type in your phone number.\"</td></tr>\n<TR><TD><CODE>%%LNG_AccountEnterValidEmail%%</code></TD>\n<TD>\"Please type in a valid email address, such as joe@aol.com\"</td></tr>\n<TR><TD><CODE>%%LNG_AccountInboxIntroNoOrders%%</code></TD>\n<TD>\"Once you place an order you'll have full access to your inbox from this page.\"</td></tr>\n<TR><TD><CODE>%%LNG_AccountNoRecentItems%%</code></TD>\n<TD>\"You haven't looked at any items on our site. When you do, they will appear here.\"</td></tr>\n<TR><TD><CODE>%%LNG_AccountOrdersIntro%%</code></TD>\n<TD>\"Your completed orders with us are shown below. Click 'View Order' to view an orders details.\"</td></tr>\n<TR><TD><CODE>%%LNG_AccountOrdersNone%%</code></TD>\n<TD>\"You don't have any completed orders with us. When you do, they will appear on this page.\"</td></tr>\n<TR><TD><CODE>%%LNG_AccountOrderStatusIntro%%</code></TD>\n<TD>\"The status of your recent orders is shown below. Click 'View Order' to see complete details.\"</td></tr>\n<TR><TD><CODE>%%LNG_AccountOrderStatusNone%%</code></TD>\n<TD>\"You haven't placed any orders with us. When you do, their status will appear on this page.\"</td></tr>\n<TR><TD><CODE>%%LNG_AccountPasswordsDontMatch%%</code></TD>\n<TD>\"Your passwords don't match.\"</td></tr>\n<TR><TD><CODE>%%LNG_AccountRecentItemsIntro%%</code></TD>\n<TD>\"The items you've recently looked at on our site are shown below.\"</td></tr>\n<TR><TD><CODE>%%LNG_AccountReturnsIntro%%</code></TD>\n<TD>\"To return an item from one of your previous orders, please &lt;a href='account.php?action=view_orders'&gt;click here&lt;/a&gt;.\"</td></tr>\n<TR><TD><CODE>%%LNG_AccountReturnsNone%%</code></TD>\n<TD>\"You do not have any outstanding return requests with us at the moment.\"</td></tr>\n<TR><TD><CODE>%%LNG_Action%%</code></TD>\n<TD>\"Action\"</td></tr>\n<TR><TD><CODE>%%LNG_Add%%</code></TD>\n<TD>\"Add\"</td></tr>\n<TR><TD><CODE>%%LNG_AddressBook%%</code></TD>\n<TD>\"Address Book\"</td></tr>\n<TR><TD><CODE>%%LNG_AddressBookDescription%%</code></TD>\n<TD>\"Add, edit and remove shipping and billing destinations from your address book.\"</td></tr>\n<TR><TD><CODE>%%LNG_AddShippingAddress%%</code></TD>\n<TD>\"Add New Address\"</td></tr>\n<TR><TD><CODE>%%LNG_AddToCart1%%</code></TD>\n<TD>\"Click the button below to add the\"</td></tr>\n<TR><td><code>%%LNG_AddToWishList%%</code></TD>\n<TD>\"Add to Wish List\"</td></tr>\n<TR><TD><CODE>%%LNG_AdminMaintenanceNotice%%</code></TD>\n<TD>\"&lt;br /&gt;Only administrators can view the store at the moment. Visit your control panel settings page to disable maintenance mode.&lt;br /&gt;&lt;br /&gt;&lt;a href='?showStore=no'&gt;Click here to see what your visitors will see.&lt;/a&gt;\"</td></tr>\n<TR><TD><CODE>%%LNG_AdminMaintenanceNoticeHeader%%</code></TD>\n<TD>\"Your store is down for maintenance.\"</td></tr>\n<TR><TD><CODE>%%LNG_AdvancedExample1%%</code></TD>\n<TD>\"ipod &lt;em&gt;or&lt;/em&gt; creative\"</td></tr>\n<TR><TD><CODE>%%LNG_AdvancedExample2%%</code></TD>\n<TD>\"music &lt;em&gt;not&lt;/em&gt; creative\"</td></tr>\n<TR><TD><CODE>%%LNG_AdvancedSearch%%</code></TD>\n<TD>\"Advanced Search\"</td></tr>\n<TR><TD><CODE>%%LNG_AdvancedSearching%%</code></TD>\n<TD>\"Advanced Searching\"</td></tr>\n<TR><TD><CODE>%%LNG_AdvancedSearchingAnd%%</code></TD>\n<TD>\"&lt;em&gt;not&lt;/em&gt; specifies that the term must not be present in the search results.\"</td></tr>\n<TR><TD><CODE>%%LNG_AdvancedSearchingKeywords%%</code></TD>\n<TD>\"The words 'and', 'or' and 'not' are special keywords used to join words.\"</td></tr>\n<TR><TD><CODE>%%LNG_AdvancedSearchingNot%%</code></TD>\n<TD>\"&lt;em&gt;not&lt;/em&gt; specifies that the term must not be present in the search results.\"</td></tr>\n<TR><TD><CODE>%%LNG_AdvancedSearchingOr%%</code></TD>\n<TD>\"<em>or</em> specifies that either of the terms must be present in the results.\"</td></tr>\n<TR><TD><CODE>%%LNG_AdvancedSearchingPhrases%%</code></TD>\n<TD>\"If you wish to search for a phrase, enclose it within &lt;em&gt;&quot;double quotes&quot;&lt;/em&gt;\"</td></tr>\n<TR><TD><CODE>%%LNG_AlphaAsc%%</code></TD>\n<TD>\"Alphabetical: A to Z\"</td></tr>\n<TR><TD><CODE>%%LNG_AlphaDesc%%</code></TD>\n<TD>\"Alphabetical: Z to A\"</td></tr>\n<TR><TD><CODE>%%LNG_AlreadyHaveAnAccount%%</code></TD>\n<TD>\"I'm A Returning Customer\"</td></tr>\n<TR><TD><CODE>%%LNG_AlreadyHaveAnAccountIntro%%</code></TD>\n<TD>\"To continue, please enter your email address and password that you use for your account.\"</td></tr>\n<TR><TD><CODE>%%LNG_AlsoWantToShipToThisAddress%%</code></TD>\n<TD>\"I also want to ship to this address\"</td></tr>\n<TR><TD><CODE>%%LNG_Amount%%</code></TD>\n<TD>\"Amount\"</td></tr>\n<TR><TD><CODE>%%LNG_Apply%%</code></TD>\n<TD>\"Apply\"</td></tr>\n<TR><TD><CODE>%%LNG_AuthorisationCode%%</code></TD>\n<TD>\"Authorisation Code\"</td></tr>\n<TR><TD><CODE>%%LNG_AuthorizeNetCardHoldersName%%</code></TD>\n<TD>”Cardholder's Name\"</td></tr>\n<TR><TD><CODE>%%LNG_AuthorizeNetCreditCardCCV2%%</code></TD>\n<TD>”CVV Code\"</td></tr>\n<TR><TD><CODE>%%LNG_AuthorizeNetCreditCardNo%%</code></TD>\n<TD>”Credit Card Number\"</td></tr>\n<TR><TD><CODE>%%LNG_AuthorizeNetCreditCardNoHelp%%</code></TD>\n<TD>”Numbers only, no spaces or dashes.\"</td></tr>\n<TR><TD><CODE>%%LNG_AuthorizeNetEnterCardNumber%%</code></TD>\n<TD>”Please enter the card number only, no spaces or dashes.\"</td></tr>\n<TR><TD><CODE>%%LNG_AuthorizeNetEnterCreditCardMonth%%</code></TD>\n<TD>”You forgot to choose an expiry month.\"</td></tr>\n<TR><TD><CODE>%%LNG_AuthorizeNetEnterCreditCardYear%%</code></TD>\n<TD>”You forgot to choose an expiry year.\"</td></tr>\n<TR><TD><CODE>%%LNG_AuthorizeNetEnterCVV2Number%%</code></TD>\n<TD>”Please enter your credit card vertification number. This is usually the last three or four digits on the signature strip of your card.\"</td></tr>\n<TR><TD><CODE>%%LNG_AuthorizeNetEnterName%%</code></TD>\n<TD>”You forgot to enter the cardholder's name.\"</td></tr>\n<TR><TD><CODE>%%LNG_AuthorizeNetExpirationDate%%</code></TD>\n<TD>”Expiration Date\"</td></tr>\n<TR><TD><CODE>%%LNG_AuthorizeNetPayForOrder%%</code></TD>\n<TD>”Pay for Order\"</td></tr>\n<TR><TD><CODE>%%LNG_AuthorizeNetPaymentIntro%%</code></TD>\n<TD>”Complete the form below and then click the &quot;Pay for Order&quot; button to pay for your order using our secure server.\"</td></tr>\n<TR><TD><CODE>%%LNG_AuthorizeNetProcessingError%%</code></TD>\n<TD>”Something went wrong when trying to process your payment. Please review the error message and try again:\"</td></tr>\n<TR><TD><CODE>%%LNG_AuthorizeNetTotalAmount%%</code></TD>\n<TD>”Order Total\"</td></tr>\n<TR><TD><CODE>%%LNG_AutoSearchSubCats%%</code></TD>\n<TD>\"Automatically search sub categories\"</td></tr>\n<TR><TD><CODE>%%LNG_Availability%%</code></TD>\n<TD>\"Availability\"</td></tr>\n<TR><TD><CODE>%%LNG_AvgCustomerReview%%</code></TD>\n<TD>\"Avg. Customer Review\"</td></tr>\n<TR><TD><CODE>%%LNG_BadContactFormCaptcha%%</code></TD>\n<TD>\"The characters you copied from the image are incorrect. Please try again.\"</td></tr>\n<TR><TD><CODE>%%LNG_BasicExample1%%</code></TD>\n<TD>\"ipod touch\"</td></tr>\n<TR><TD><CODE>%%LNG_BasicExample2%%</code></TD>\n<TD>\"mp3 player\"</td></tr>\n<TR><TD><CODE>%%LNG_BasicSearching%%</code></TD>\n<TD>\"Basic Searching\"</td></tr>\n<TR><TD><CODE>%%LNG_BasicSearchingCommon%%</code></TD>\n<TD>\"Common words such as 'are' and 'is' as well as words below 3 characters are automatically removed from your search terms.\"</td></tr>\n<TR><TD><CODE>%%LNG_BasicSearchingFields%%</code></TD>\n<TD>\"All search terms are matched against product names, descriptions and the product code.\"</td></tr>\n<TR><TD><CODE>%%LNG_BasicSearchingMultiple%%</code></TD>\n<TD>\"Multiple search words are supported. Results containing all of your search terms are ranked higher than those which don't.\"</td></tr>\n<TR><TD><CODE>%%LNG_BasicSearchingShort%%</code></TD>\n<TD>\"Try to keep search terms short and to the point.\"</td></tr>\n<TR><TD><CODE>%%LNG_Bestselling%%</code></TD>\n<TD>\"Bestselling\"</td></tr>\n<TR><TD><CODE>%%LNG_BillAndShipToAddress%%</code></TD>\n<TD>\"Bill & Ship to this Address\"</td></tr>\n<TR><TD><CODE>%%LNG_BillingAddress%%</code></TD>\n<TD>\"Billing Address\"</td></tr>\n<TR><TD><CODE>%%LNG_BillingDetails%%</code></TD>\n<TD>\"Billing Details\"</td></tr>\n<TR><TD><CODE>%%LNG_BillTo%%</code></TD>\n<TD>\"Billing Details\"</td></tr>\n<TR><TD><CODE>%%LNG_BillToThisAddress%%</code></TD>\n<TD>\"Bill to this address\"</td></tr>\n<TR><TD><CODE>%%LNG_Brand%%</code></TD>\n<TD>\"Brand\"</td></tr>\n<TR><TD><CODE>%%LNG_BrandName%%</code></TD>\n<TD>\"Brand Name\"</td></tr>\n<TR><TD><CODE>%%LNG_Brands%%</code></TD>\n<TD>\"Brands\"</td></tr>\n<TR><TD><CODE>%%LNG_BrandsTagCloud%%</code></TD>\n<TD>\"Brands Tag Cloud\"</td></tr>\n<TR><TD><CODE>%%LNG_BrandTagCloudHelp%%</code></TD>\n<TD>\"The &lt;em>brands tag cloud&lt;/em&gt; shows all of the brands available for purchase.&lt;br /&gt;&lt;br /&gt;The bigger the brand appears, the more products it contains.&lt;br /&gt;&lt;br /&gt;Click on a brand below to see all products listed under that brand.&lt;br /&gt;&lt;br />\"</td></tr>\n<TR><TD><CODE>%%LNG_BulkDiscountLink%%</code></TD>\n<TD>\"Buy in bulk and save\"</td></tr>\n<TR><TD><CODE>%%LNG_BulkDiscountThickBoxIntro%%</code></TD>\n<TD>\"Below are the available bulk discount rates for each individual item when you purchase a certain amount\"</td></tr>\n<TR><TD><CODE>%%LNG_BulkDiscountThickBoxIntro%%</code></TD>\n<TD>\"Below are the available bulk discount rates for each individual item when you purchase a certain amount\"</td></tr>\n<TR><TD><CODE>%%LNG_CalculateShipping%%</code></TD>\n<TD>\"Estimate Shipping &amp; Tax\"</td></tr>\n<TR><TD><CODE>%%LNG_CalculateShippingHandling%%</code></TD>\n<TD>\"Estimate Shipping &amp; Tax\"</td></tr>\n<TR><TD><CODE>%%LNG_Calculating%%</code></TD>\n<TD>\"Estimating...\"</td></tr>\n<TR><TD><CODE>%%LNG_Cancel%%</code></TD>\n<TD>\"Cancel\"</td></tr>\n<TR><TD><CODE>%%LNG_CantReorderGiftCertificateAlert%%</code></TD>\n<TD>\"Unfortunately gift certificates can not be reordered. Click on the 'Gift Certificates' link to purchase a new one.\"</td></tr>\n<TR><TD><CODE>%%LNG_CantReorderItems%%</code></TD>\n<TD>\"One or more selected items can\\'t be reordered.\"</td></tr>\n<TR><TD><CODE>%%LNG_CapitalFor%%</code></TD>\n<TD>\"For\"</td></tr>\n<TR><TD><CODE>%%LNG_CaptchaIntro%%</code></TD>\n<TD>\"Please copy the characters from the image into the text field below. Doing this helps us prevent automated submissions.\"</td></tr>\n<TR><TD><CODE>%%LNG_CaptchaVerification%%</code></TD>\n<TD>\"Captcha Check\"</td></tr>\n<TR><TD><CODE>%%LNG_CardholderName%%</code></TD>\n<TD>\"Cardholder Name\"</td></tr>\n<TR><TD><CODE>%%LNG_CartItems%%</code></TD>\n<TD>\"Cart Items\"</td></tr>\n<TR><TD><CODE>%%LNG_CartRemoveConfirm%%</code></TD>\n<TD>\"Are you sure you want to remove this item from your cart?\"</td></tr>\n<TR><TD><CODE>%%LNG_CatalogPriceExTaxLabel%%</code></TD>\n<TD>\" (ex :label)\"</td></tr>\n<TR><TD><CODE>%%LNG_CatalogPriceIncTaxLabel%%</code></TD>\n<TD>\" (inc :label)\"</td></tr>\n<TR><TD><CODE>%%LNG_Categories%%</code></TD>\n<TD>\"Categories\"</td></tr>\n<TR><TD><CODE>%%LNG_CategoryNewProductsFeed%%</code></TD>\n<TD>\"New Products RSS Feed for %s\"</td></tr>\n<TR><TD><CODE>%%LNG_CategoryPopularProductsFeed%%</code></TD>\n<TD>\"Popular Products RSS Feed for %s\"</td></tr>\n<TR><TD><CODE>%%LNG_CCManualCardHoldersName%%</code></TD>\n<TD>”Cardholder's Name\"</td></tr>\n<TR><TD><CODE>%%LNG_CCManualChooseCardType%%</code></TD>\n<TD>”You forgot to choose a card type.\"</td></tr>\n<TR><TD><CODE>%%LNG_CCManualCreditCardCCV2%%</code></TD>\n<TD>”CCV2 Value\"</td></tr>\n<TR><TD><CODE>%%LNG_CCManualCreditCardCVV2Help%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_CCManualCreditCardIssueNo%%</code></TD>\n<TD>”Card Issue No\"</td></tr>\n<TR><TD><CODE>%%LNG_CCManualCreditCardIssueNoHelp%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_CCManualCreditCardNo%%</code></TD>\n<TD>”Credit Card No\"</td></tr>\n<TR><TD><CODE>%%LNG_CCManualCreditCardNoHelp%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_CCManualCreditCardType%%</code></TD>\n<TD>”Card Type\"</td></tr>\n<TR><TD><CODE>%%LNG_CCManualEnterCardNumber%%</code></TD>\n<TD>”Please enter a valid credit card number containing no spaces or dashes.\"</td></tr>\n<TR><TD><CODE>%%LNG_CCManualEnterCreditCardMonth%%</code></TD>\n<TD>”You forgot to choose an expiry month.\"</td></tr>\n<TR><TD><CODE>%%LNG_CCManualEnterCreditCardYear%%</code></TD>\n<TD>”You forgot to choose an expiry year.\"</td></tr>\n<TR><TD><CODE>%%LNG_CCManualEnterCVV2Number%%</code></TD>\n<TD>”Please enter your credit card verification number. This is usually the last three or four digits on the signature strip of your card.\"</td></tr>\n<TR><TD><CODE>%%LNG_CCManualEnterIssueDetails%%</code></TD>\n<TD>”Please enter a valid issue number or issue date.\"</td></tr>\n<TR><TD><CODE>%%LNG_CCManualEnterName%%</code></TD>\n<TD>”You forgot to enter the cardholder's name.\"</td></tr>\n<TR><TD><CODE>%%LNG_CCManualExpirationDate%%</code></TD>\n<TD>”Expiration Date\"</td></tr>\n<TR><TD><CODE>%%LNG_CCManualIssueDate%%</code></TD>\n<TD>”Card Issue Date\"</td></tr>\n<TR><TD><CODE>%%LNG_CCManualIssueDateHelp%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_CCManualPayForOrder%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_CCManualPaymentIntro%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_CCManualPleaseChoose%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_CCManualTotalAmount%%</code></TD>\n<TD>.</td></tr>\n<TR><td><code>%%LNG_CertificateCode%%</code></TD>\n<TD>\"Code\"</td></tr>\n<TR><td><code>%%LNG_CertificateFrom%%</code></TD>\n<TD>\"From\"</td></tr>\n<TR><td><code>%%LNG_CertificateTo%%</code></TD>\n<TD>\"To\"</td></tr>\n<TR><TD><CODE>%%LNG_Change%%</code></TD>\n<TD>\"Change\"</td></tr>\n<TR><TD><CODE>%%LNG_ChangeYourPassword%%</code></TD>\n<TD>\"Change Your Password\"</td></tr>\n<TR><TD><CODE>%%LNG_CharactersRemaining%%</code></TD>\n<TD>\"characters remaining\"</td></tr>\n<TR><TD><CODE>%%LNG_CheckBalance%%</code></TD>\n<TD>\"Check Balance\"</td></tr>\n<TR><TD><CODE>%%LNG_CheckCertificateBalance%%</code></TD>\n<TD>\"Check Remaining Balance\"</td></tr>\n<TR><TD><CODE>%%LNG_CheckingOutAs%%</code></TD>\n<TD>\"Checking Out As\"</td></tr>\n<TR><TD><CODE>%%LNG_Checkout%%</code></TD>\n<TD>\"Checkout\"</td></tr>\n<TR><TD><CODE>%%LNG_CheckoutAsAGuest%%</code></TD>\n<TD>\"Checkout as a guest\"</td></tr>\n<TR><TD><CODE>%%LNG_CheckoutButtonTitle%%</code></TD>\n<TD>\"Click here to proceed to checkout\"</td></tr>\n<TR><TD><CODE>%%LNG_CheckoutGuestIntro%%</code></TD>\n<TD>\"Register with us for a faster checkout, to track the status of your order and more. You can also checkout as a guest.\"</td></tr>\n<TR><TD><CODE>%%LNG_CheckoutUseStoreCredit%%</code></TD>\n<TD>\"Pay using my store credit\"</td></tr>\n<TR><TD><CODE>%%LNG_CheckoutWithMultipleAddresses%%</code></TD>\n<TD>\"Checkout with multiple addresses\"</td></tr>\n<TR><TD><CODE>%%LNG_ChooseAnotherProduct%%</code></TD>\n<TD>\"Choose Another Product\"</td></tr>\n<TR><TD><CODE>%%LNG_ChooseGiftWrappingOption%%</code></TD>\n<TD>\"-- Please choose a type of gift wrapping --\"</td></tr>\n<TR><TD><CODE>%%LNG_ChooseHowToWrapItems%%</code></TD>\n<TD>\"Please choose how you'd like to have this item gift wrapped.\"</td></tr>\n<TR><TD><CODE>%%LNG_ChooseReturnAction%%</code></TD>\n<TD>\"-- Please Choose an Action (Optional) --\"</td></tr>\n<TR><TD><CODE>%%LNG_ChooseReturnReason%%</code></TD>\n<TD>\"-- Please Choose a Reason --\"</td></tr>\n<TR><TD><CODE>%%LNG_ChooseShippingCountry%%</code></TD>\n<TD>\"Please choose your country.\"</td></tr>\n<TR><TD><CODE>%%LNG_ChooseShippingMethod%%</code></TD>\n<TD>\"Please choose a shipping method.\"</td></tr>\n<TR><TD><CODE>%%LNG_ChooseShippingProvider%%</code></TD>\n<TD>\"Choose a Shipping Method\"</td></tr>\n<TR><TD><CODE>%%LNG_ChooseShippingState%%</code></TD>\n<TD>\"Please choose a state/province.\"</td></tr>\n<TR><TD><CODE>%%LNG_ChooseYourOptions%%</code></TD>\n<TD>\"Choose Your Options\"</td></tr>\n<TR><TD><CODE>%%LNG_ClickHere%%</code></TD>\n<TD>\"click here\"</td></tr>\n<TR><TD><CODE>%%LNG_ClickHereToTrackYourOrder%%</code></TD>\n<TD>\"Track the status of your order\"</td></tr>\n<TR><TD><CODE>%%LNG_ClickToCreateAnAccount%%</code></TD>\n<TD>\"Click here to create a new account.\"</td></tr>\n<TR><TD><CODE>%%LNG_ClickToPrintInvoice%%</code></TD>\n<TD>\"Print Invoice\"</td></tr>\n<TR><TD><CODE>%%LNG_ClickToViewReturnStatus%%</code></TD>\n<TD>\"Click here to view the status of this return.\"</td></tr>\n<TR><TD><CODE>%%LNG_Close%%</code></TD>\n<TD>\"Close\"</td></tr>\n<TR><TD><CODE>%%LNG_CloseWindow%%</code></TD>\n<TD>\"Close Window\"</td></tr>\n<TR><TD><CODE>%%LNG_CloseWindow%%</code></TD>\n<TD>\"Close Window\"</td></tr>\n<TR><TD><CODE>%%LNG_Code%%</code></TD>\n<TD>\"Code/SKU\"</td></tr>\n<TR><TD><CODE>%%LNG_Comments%%</code></TD>\n<TD>\"Comments\"</td></tr>\n<TR><TD><CODE>%%LNG_CompanyName%%</code></TD>\n<TD>\"Company Name\"</td></tr>\n<TR><td><code>%%LNG_Compare%%</code></TD>\n<TD>\"Compare\"</td></tr>\n<TR><TD><CODE>%%LNG_CompareSelected%%</code></TD>\n<TD>\"Compare Selected\"</td></tr>\n<TR><TD><CODE>%%LNG_CompareSelectMessage%%</code></TD>\n<TD>\"Please choose at least 2 products to compare.\"</td></tr>\n<TR><TD><CODE>%%LNG_CompareTwoProducts%%</code></TD>\n<TD>\"At least 2 products are needed to make a valid comparison.\"</td></tr>\n<TR><TD><CODE>%%LNG_CompletedOrders%%</code></TD>\n<TD>\"Completed Orders\"</td></tr>\n<TR><TD><CODE>%%LNG_CompletedOrdersDescription%%</code></TD>\n<TD>\"See all completed orders you've placed at %s. You can also print invoices from this page.\"</td></tr>\n<TR><TD><CODE>%%LNG_Condition%%</code></TD>\n<TD>\"Condition\"</td></tr>\n<TR><TD><CODE>%%LNG_ConfirmAddressTypeChange%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_ConfirmDeleteShippingAddress%%</code></TD>\n<TD>\"Are you sure you want to delete this shipping address?\"</td></tr>\n<TR><TD><CODE>%%LNG_ConfirmDeleteWishLists%%</code></TD>\n<TD>\"Are you sure you want to delete the selected wish list(s)? This action cannot be undone.\"</td></tr>\n<TR><TD><CODE>%%LNG_ConfirmRemoveGiftWrapping%%</code></TD>\n<TD>\"Are you sure you want to remove the gift wrapping from this item?\"</td></tr>\n<TR><TD><CODE>%%LNG_ConfirmYourOrder%%</code></TD>\n<TD>\"Please Review Your Order Before Continuing\"</td></tr>\n<TR><TD><CODE>%%LNG_ContactCompanyName%%</code></TD>\n<TD>\"Company Name\"</td></tr>\n<TR><TD><CODE>%%LNG_ContactEmail%%</code></TD>\n<TD>\"Email Address\"</td></tr>\n<TR><TD><CODE>%%LNG_ContactFormDetails%%</code></TD>\n<TD>\"Here are their details\"</td></tr>\n<TR><TD><CODE>%%LNG_ContactFormEmail1%%</code></TD>\n<TD>\"A user has submitted the contact form on your store.\"</td></tr>\n<TR><TD><CODE>%%LNG_ContactFormEnterEmail%%</code></TD>\n<TD>\"Please enter a valid email address, such as john@example.com.\"</td></tr>\n<TR><TD><CODE>%%LNG_ContactFormEnterQuestion%%</code></TD>\n<TD>\"You forgot to enter your question/comment.\"</td></tr>\n<TR><TD><CODE>%%LNG_ContactName%%</code></TD>\n<TD>\"Full Name\"</td></tr>\n<TR><TD><CODE>%%LNG_ContactOrderNo%%</code></TD>\n<TD>\"Order Number\"</td></tr>\n<TR><TD><CODE>%%LNG_ContactPageFormSubmitted%%</code></TD>\n<TD>\"'%s' submitted the form from your '%s' page\"</td></tr>\n<TR><TD><CODE>%%LNG_ContactPhone%%</code></TD>\n<TD>\"Phone Number\"</td></tr>\n<TR><TD><CODE>%%LNG_ContactQuestion%%</code></TD>\n<TD>\"Details\"</td></tr>\n<TR><TD><CODE>%%LNG_ContactRMANo%%</code></TD>\n<TD>\"RMA Number\"</td></tr>\n<TR><TD><CODE>%%LNG_ContainsTheFollowingItems%%</code></TD>\n<TD>\"Contained the Following Items\"</td></tr>\n<TR><td><code>%%LNG_Continue%%</code></TD>\n<TD>\"Continue\"</td></tr>\n<TR><TD><CODE>%%LNG_ContinueRaquo%%</code></TD>\n<TD>\"Continue &raquo;\"</td></tr>\n<TR><TD><CODE>%%LNG_ContinueShopping%%</code></TD>\n<TD>\"Continue Shopping\"</td></tr>\n<TR><TD><CODE>%%LNG_CouldNotShipFollowingItems%%</code></TD>\n<TD>\"The following item(s) could not be shipped to your shipping address:\"</td></tr>\n<TR><TD><CODE>%%LNG_Country%%</code></TD>\n<TD>\"Country\"</td></tr>\n<TR><TD><CODE>%%LNG_Coupon%%</code></TD>\n<TD>\"Coupon\"</td></tr>\n<TR><TD><CODE>%%LNG_CouponCode%%</code></TD>\n<TD>\"Coupon Code\"</td></tr>\n<TR><TD><CODE>%%LNG_CouponCodeIntro%%</code></TD>\n<TD>\"If you have a coupon code, enter it in the box below and click 'Go'.\"</td></tr>\n<TR><TD><CODE>%%LNG_CreateAccount%%</code></TD>\n<TD>\"Create Account\"</td></tr>\n<TR><TD><CODE>%%LNG_CreateAccountIntro1%%</code></TD>\n<TD><b>Checkout:</b> \"Fill in the fields below to create a \"<br><b>Express Checkout:</b> \"Checkout faster\"</td></tr>\n<TR><TD><CODE>%%LNG_CreateAccountIntro2%%</code></TD>\n<TD><b>Checkout:</b> \"account. You'll be able to shop and check out faster on your next visit, check your order status online and optionally receive updates on special offers and events.\"<br><b>Express Checkout:</b> \"Save multiple addresses in your address book\"</td></tr>\n<TR><TD><CODE>%%LNG_CreateAccountIntro3%%</code></TD>\n<TD>\"Access order history and track your orders\"</td></tr>\n<TR><TD><CODE>%%LNG_CreateAccountIntro4%%</code></TD>\n<TD>\"Checkout faster at\"</td></tr>\n<TR><TD><CODE>%%LNG_CreateAccountIntro5%%</code></TD>\n<TD>\"and save multiple addresses in your address book.\"</td></tr>\n<TR><TD><CODE>%%LNG_CreateAccountIntroTitle%%</code></TD>\n<TD>\"Create an account with us and you'll be able to:\"</td></tr>\n<TR><TD><CODE>%%LNG_CreateAccountLoginIntro%%</code></TD>\n<TD>\"&lt;p>Create an account with us and you'll be able to:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Check out faster&lt;/li&gt;&lt;li&gt;Save multiple shipping addresses&lt;/li&gt;&lt;li&gt;Access your order history&lt;/li&gt;&lt;li&gt;Track new orders&lt;/li&gt;&lt;li&gt;Save items to your wish list&lt;/li&gt;&lt;/ul&gt;\"</td></tr>\n<TR><TD><CODE>%%LNG_CreateAccountPersonalIntro%%</code></TD>\n<TD>\"Enter your email address and password to create your account.\"</td></tr>\n<TR><TD><CODE>%%LNG_CreateAccountShippingIntro%%</code></TD>\n<TD>\"Enter the name and address you'd like us to ship your order to.\"</td></tr>\n<TR><TD><CODE>%%LNG_CreateAccountThanks%%</code></TD>\n<TD>\"Your Account Has Been Created\"</td></tr>\n<TR><TD><CODE>%%LNG_CreateAccountThanksIntro%%</code></TD>\n<TD>\"Thank you for creating your account at %s. Your account details have been emailed to %s.\"</td></tr>\n<TR><TD><CODE>%%LNG_CreateANewWishList%%</code></TD>\n<TD>\"Create a New Wish List...\"</td></tr>\n<TR><TD><CODE>%%LNG_CreditCardCardCode%%</code></TD>\n<TD>”CVV2\"</td></tr>\n<TR><TD><CODE>%%LNG_CreditCardCardHoldersName%%</code></TD>\n<TD>”Cardholder's Name\"</td></tr>\n<TR><TD><CODE>%%LNG_CreditCardCardType%%</code></TD>\n<TD>”Credit Card Type\"</td></tr>\n<TR><TD><CODE>%%LNG_CreditCardChooseCardType%%</code></TD>\n<TD>”You forgot to choose a card type.\"</td></tr>\n<TR><TD><CODE>%%LNG_CreditCardCreditCardIssueNo%%</code></TD>\n<TD>”Card Issue No\"</td></tr>\n<TR><TD><CODE>%%LNG_CreditCardCreditCardIssueNoHelp%%</code></TD>\n<TD>”The issue number found on the front of your card under 'ISS' or 'ISSUE'&lt;br /&gt;Only required for cards that contain it.\"</td></tr>\n<TR><TD><CODE>%%LNG_CreditCardCreditCardNo%%</code></TD>\n<TD>”Credit Card Number\"</td></tr>\n<TR><TD><CODE>%%LNG_CreditCardCreditCardNoHelp%%</code></TD>\n<TD>”Numbers only, no spaces or dashes.\"</td></tr>\n<TR><TD><CODE>%%LNG_CreditCardCVV2Help%%</code></TD>\n<TD>\"For Visa/MasterCard/Discover cards, it\\'s the three digit code beside your signature strip on the back of the card. For American Express cards, it\\'s the four digit code above the account number on the front of the card.\"</td></tr>\n<TR><TD><CODE>%%LNG_CreditCardEnterCardCode%%</code></TD>\n<TD>”Please enter your credit card security code. This is usually the last three or four digits on the signature strip of your card.\"</td></tr>\n<TR><TD><CODE>%%LNG_CreditCardEnterCardNumber%%</code></TD>\n<TD>”Please enter the card number only, no spaces or dashes.\"</td></tr>\n<TR><TD><CODE>%%LNG_CreditCardEnterCreditCardMonth%%</code></TD>\n<TD>”You forgot to choose an expiry month.\"</td></tr>\n<TR><TD><CODE>%%LNG_CreditCardEnterCreditCardYear%%</code></TD>\n<TD>”You forgot to choose an expiry year.\"</td></tr>\n<TR><TD><CODE>%%LNG_CreditCardEnterIssueNoOrDate%%</code></TD>\n<TD>”Please enter your card issue number or issue date.\"</td></tr>\n<TR><TD><CODE>%%LNG_CreditCardEnterName%%</code></TD>\n<TD>”You forgot to enter the cardholder's name.\"</td></tr>\n<TR><TD><CODE>%%LNG_CreditCardExpirationDate%%</code></TD>\n<TD>”Expiration Date\"</td></tr>\n<TR><TD><CODE>%%LNG_CreditCardIssueDate%%</code></TD>\n<TD>”Card Issue Date\"</td></tr>\n<TR><TD><CODE>%%LNG_CreditCardIssueDateHelp%%</code></TD>\n<TD>”The issue date found on the front of your card.&lt;br /&gt;Only required for cards that contain it.\"</td></tr>\n<TR><TD><CODE>%%LNG_CreditCardPayForOrder%%</code></TD>\n<TD>”Pay for Order\"</td></tr>\n<TR><TD><CODE>%%LNG_CreditCardPaymentIntro%%</code></TD>\n<TD>”Complete the form below and then click the &quot;Pay for Order&quot; button to pay for your order using our secure server.\"</td></tr>\n<TR><TD><CODE>%%LNG_CreditCardPleaseChoose%%</code></TD>\n<TD>”-- Please Choose --\"</td></tr>\n<TR><TD><CODE>%%LNG_CreditCardProcessingError%%</code></TD>\n<TD>”Something went wrong when trying to process your payment. Please review the error message and try again:\"</td></tr>\n<TR><TD><CODE>%%LNG_CreditCardTotalAmount%%</code></TD>\n<TD>”Total Amount\"</td></tr>\n<TR><TD><CODE>%%LNG_CreditPaymentMethod%%</code></TD>\n<TD>\"Pay the remaining %s via:\"</td></tr>\n<TR><TD><CODE>%%LNG_CurrencyConverter%%</code></TD>\n<TD>\"Currency Converter\"</td></tr>\n<TR><TD><CODE>%%LNG_Currently%%</code></TD>\n<TD>\"Currently\"</td></tr>\n<TR><TD><CODE>%%LNG_CurrentTopSellers%%</code></TD>\n<TD>\"Current Top Sellers\"</td></tr>\n<TR><TD><CODE>%%LNG_CustomersAlsoBought%%</code></TD>\n<TD>\"Customers Also Purchased\"</td></tr>\n<TR><TD><CODE>%%LNG_CustomersWhoLikedThisProductAlsoLiked%%</code></TD>\n<TD>\"Customers Who Liked This Product Also Liked\"</td></tr>\n<TR><TD><CODE>%%LNG_DateAndTime%%</code></TD>\n<TD>\"Date and Time\"</td></tr>\n<TR><TD><CODE>%%LNG_DateOfOrder%%</code></TD>\n<TD>\"Order Date\"</td></tr>\n<TR><TD><CODE>%%LNG_DateRequested%%</code></TD>\n<TD>\"Date Requested\"</td></tr>\n<TR><TD><CODE>%%LNG_DateShipped%%</code></TD>\n<TD>\"Date Shipped\"</td></tr>\n<TR><TD><CODE>%%LNG_Dear%%</code></TD>\n<TD>\"Dear\"</td></tr>\n<TR><TD><CODE>%%LNG_Delete%%</code></TD>\n<TD>\"Delete\"</td></tr>\n<TR><TD><CODE>%%LNG_DeleteProductFieldFileConfirmation%%</code></TD>\n<TD>\"Are you sure you want to delete the uploaded file?\"</td></tr>\n<TR><TD><CODE>%%LNG_DeliveryDisclaimer%%</code></TD>\n<TD>\"*Delivery time is approximate from date of shipment\"</td></tr>\n<TR><TD><CODE>%%LNG_DesignModeCancel%%</code></TD>\n<TD>\"Cancel\"</td></tr>\n<TR><TD><CODE>%%LNG_DesignModeChangesSaved%%</code></TD>\n<TD>\"Your design mode changes have been saved successfully.\"</td></tr>\n<TR><TD><CODE>%%LNG_DesignModeConfirmDisable%%</code></TD>\n<TD>\"Are you sure you want to disable design mode? Any changes you've made won't be saved.\\n\\nYou can re-enable design mode at any time by logging in to your store's control panel, visiting the 'Store Design' page and clicking the 'Design Mode' tab.\\n\\nClick OK to confirm.\"</td></tr>\n<TR><TD><CODE>%%LNG_DesignModeConfirmPanelRemove%%</code></TD>\n<TD>\"Are you sure you want to remove the panel ':panel' from the page? It may still appear on other pages. Click OK to confirm.\"</td></tr>\n<TR><TD><CODE>%%LNG_DesignModeConfirmUndo%%</code></TD>\n<TD>\"Are you sure? Any changes you've made wont be saved. Click OK to confirm.\"</td></tr>\n<TR><TD><CODE>%%LNG_DesignModeDisable%%</code></TD>\n<TD>\"Disable\"</td></tr>\n<TR><TD><CODE>%%LNG_DesignModeLangSaving%%</code></TD>\n<TD>\"Saving...\"</td></tr>\n<TR><TD><CODE>%%LNG_DesignModeMenuEditLayout%%</code></TD>\n<TD>\"Edit Layout...\"</td></tr>\n<TR><TD><CODE>%%LNG_DesignModeMenuEditPanel%%</code></TD>\n<TD>\"Edit Panel...\"</td></tr>\n<TR><TD><CODE>%%LNG_DesignModeMenuEditStylesheet%%</code></TD>\n<TD>\"Edit Stylesheet...\"</td></tr>\n<TR><TD><CODE>%%LNG_DesignModeMenuRemovePanel%%</code></TD>\n<TD>\"Remove Panel\"</td></tr>\n<TR><TD><CODE>%%LNG_DesignModeRemoveLastPanel%%</code></TD>\n<TD>\"This is the last panel in this column.\\n\\nIf you wish to move this panel please move another panel in to this column first.\"</td></tr>\n<TR><TD><CODE>%%LNG_DesignModeSave%%</code></TD>\n<TD>\"Save\"</td></tr>\n<TR><TD><CODE>%%LNG_DesignModeToggle%%</code></TD>\n<TD>\"Toggle\"</td></tr>\n<TR><TD><CODE>%%LNG_DesignModeUndo%%</code></TD>\n<TD>\"Undo\"</td></tr>\n<TR><TD><CODE>%%LNG_DidYouMean%%</code></TD>\n<TD>\"Did you mean\"</td></tr>\n<TR><TD><CODE>%%LNG_Discount%%</code></TD>\n<TD>\"Discount\"</td></tr>\n<TR><TD><CODE>%%LNG_DownloadLink%%</code></TD>\n<TD>\"Download\"</td></tr>\n<TR><TD><CODE>%%LNG_DownloadTheItemsYouOrdered%%</code></TD>\n<TD>\"Download the items you ordered\"</td></tr>\n<TR><TD><CODE>%%LNG_Edit%%</code></TD>\n<TD>\"Edit\"</td></tr>\n<TR><TD><CODE>%%LNG_EditAccountIntro%%</code></TD>\n<TD>\"Make changes to your account details below. Click 'Update My Details' when you're done.\"</td></tr>\n<TR><TD><CODE>%%LNG_Email%%</code></TD>\n<TD>.</td></tr>\n<TR><td><code>%%LNG_EmailAddress%%</code></TD>\n<TD>\"Email Address\"</td></tr>\n<TR><TD><CODE>%%LNG_EmptyCartInfo%%</code></TD>\n<TD>\"To add a product to your cart, first browse for it or use the search box and then click its &quot;Add to Cart&quot; button.\"</td></tr>\n<TR><TD><CODE>%%LNG_EmptyHomePage%%</code></TD>\n<TD>\"home page.\"</td></tr>\n<TR><TD><CODE>%%LNG_EmptySmallSearch%%</code></TD>\n<TD>\"You forgot to enter some search keywords.\"</td></tr>\n<TR><TD><CODE>%%LNG_EnterCaptchaCode%%</code></TD>\n<TD>\"Please copy the characters from the image into the \\'Captcha Check\\' text box.\"</td></tr>\n<TR><TD><CODE>%%LNG_EnterCouponCode%%</code></TD>\n<TD>\"Please enter your coupon code.\"</td></tr>\n<TR><TD><CODE>%%LNG_EnterGiftCertificateCode%%</code></TD>\n<TD>\"Please enter your gift certificate code.\"</td></tr>\n<TR><TD><CODE>%%LNG_EnterGiftCertificateValueBetween%%</code></TD>\n<TD>\"Please enter an amount between the minimum and maximum gift certificate value.\"</td></tr>\n<TR><TD><CODE>%%LNG_EnterOrderComments%%</code></TD>\n<TD>\"Order Instructions/Comments (Optional)\"</td></tr>\n<TR><TD><CODE>%%LNG_EnterRequiredField%%</code></TD>\n<TD>\"Please enter the required field(s).\"</td></tr>\n<TR><TD><CODE>%%LNG_EnterShippingAddress%%</code></TD>\n<TD>\"Please type in an address.\"</td></tr>\n<TR><TD><CODE>%%LNG_EnterShippingCity%%</code></TD>\n<TD>\"Please type in your suburb/city.\"</td></tr>\n<TR><TD><CODE>%%LNG_EnterShippingFirstName%%</code></TD>\n<TD>\"Please type in your first name.\"</td></tr>\n<TR><TD><CODE>%%LNG_EnterShippingLastName%%</code></TD>\n<TD>\"Please type in your last name.\"</td></tr>\n<TR><TD><CODE>%%LNG_EnterShippingPhone%%</code></TD>\n<TD>\"Please enter your phone number.\"</td></tr>\n<TR><TD><CODE>%%LNG_EnterShippingZip%%</code></TD>\n<TD>\"Please type in your zip/postcode.\"</td></tr>\n<TR><TD><CODE>%%LNG_EnterTheCodeBelow%%</code></TD>\n<TD>\"Enter the code below:\"</td></tr>\n<TR><TD><CODE>%%LNG_EnterValidCertificateCode%%</code></TD>\n<TD>\"Please enter a gift certificate code.\"</td></tr>\n<TR><TD><CODE>%%LNG_EnterValidCertificateFromEmail%%</code></TD>\n\n<TD>\"Please enter your email address.\"</td></tr>\n<TR><TD><CODE>%%LNG_EnterValidCertificateFromName%%</code></TD>\n<TD>\"Please enter your name.\"</td></tr>\n<TR><TD><CODE>%%LNG_EnterValidCertificateToEmail%%</code></TD>\n<TD>\"Please enter a valid email address for the person you wish to send this gift certificate to.\"</td></tr>\n<TR><TD><CODE>%%LNG_EnterValidCertificateToName%%</code></TD>\n<TD>\"Please enter the name of the person you wish to send this gift certificate to.\"</td></tr>\n<TR><TD><CODE>%%LNG_EnterValidFromPrice%%</code></TD>\n<TD>\"Please enter a valid \\'from\\' price containing numbers only.\"</td></tr>\n<TR><TD><CODE>%%LNG_EnterValidGiftCertificateAmount%%</code></TD>\n<TD>\"Please enter a valid amount for this gift certificate.\"</td></tr>\n<TR><TD><CODE>%%LNG_EnterValidToPrice%%</code></TD>\n<TD>\"Please enter a valid \\'to\\' price containing numbers only.\"</td></tr>\n<TR><TD><CODE>%%LNG_EnterWishListName%%</code></TD>\n<TD>\"Please enter a wishlist name.\"</td></tr>\n<TR><TD><CODE>%%LNG_eSelectPlusDPCardHoldersName%%</code></TD>\n<TD>”Cardholder's Name\"</td></tr>\n<TR><TD><CODE>%%LNG_eSelectPlusDPCreditCardCCV2%%</code></TD>\n<TD>”Card Security Code\"</td></tr>\n<TR><TD><CODE>%%LNG_eSelectPlusDPCreditCardNo%%</code></TD>\n<TD>”Credit Card Number\"</td></tr>\n<TR><TD><CODE>%%LNG_eSelectPlusDPCreditCardNoHelp%%</code></TD>\n<TD>”Numbers only, no spaces or dashes.\"</td></tr>\n<TR><TD><CODE>%%LNG_eSelectPlusDPEnterCardNumber%%</code></TD>\n<TD>”Please enter the card number only, no spaces or dashes.\"</td></tr>\n<TR><TD><CODE>%%LNG_eSelectPlusDPEnterCreditCardMonth%%</code></TD>\n<TD>”You forgot to choose an expiry month.\"</td></tr>\n<TR><TD><CODE>%%LNG_eSelectPlusDPEnterCreditCardYear%%</code></TD>\n<TD>”You forgot to choose an expiry year.\"</td></tr>\n<TR><TD><CODE>%%LNG_eSelectPlusDPEnterCVV2Number%%</code></TD>\n<TD>”Please enter your credit card security code. This is usually the last three or four digits on the signature strip of your card.\"</td></tr>\n<TR><TD><CODE>%%LNG_eSelectPlusDPEnterName%%</code></TD>\n<TD>”You forgot to enter the cardholder's name.\"</td></tr>\n<TR><TD><CODE>%%LNG_eSelectPlusDPEnterPostcode%%</code></TD>\n<TD>”You forgot to enter a zip/postcode.\"</td></tr>\n<TR><TD><CODE>%%LNG_eSelectPlusDPEnterStreetName%%</code></TD>\n<TD>”You forgot to enter your street name.\"</td></tr>\n<TR><TD><CODE>%%LNG_eSelectPlusDPEnterStreetNumber%%</code></TD>\n<TD>”You forgot to enter your street number.\"</td></tr>\n<TR><TD><CODE>%%LNG_eSelectPlusDPExpirationDate%%</code></TD>\n<TD>”Expiration Date\"</td></tr>\n<TR><TD><CODE>%%LNG_eSelectPlusDPPayForOrder%%</code></TD>\n<TD>”Pay for Order\"</td></tr>\n<TR><TD><CODE>%%LNG_eSelectPlusDPPaymentIntro%%</code></TD>\n<TD>”Please enter the following information as it appears on your credit card statement and then click the &quot;Pay for Order&quot; button to pay for your order.\"</td></tr>\n<TR><TD><CODE>%%LNG_eSelectPlusDPProcessingError%%</code></TD>\n<TD>”Something went wrong when trying to process your payment. Please review the error message and try again:\"</td></tr>\n<TR><TD><CODE>%%LNG_eSelectPlusDPStreetName%%</code></TD>\n<TD>”Street Address\"</td></tr>\n<TR><TD><CODE>%%LNG_eSelectPlusDPTotalAmount%%</code></TD>\n<TD>”Order Total\"</td></tr>\n<TR><TD><CODE>%%LNG_eSelectPlusDPZip%%</code></TD>\n<TD>”Zip/Postcode\"</td></tr>\n<TR><TD><CODE>%%LNG_EWayCardCode%%</code></TD>\n<TD>”CVV Code\"</td></tr>\n<TR><TD><CODE>%%LNG_EWayCardHoldersName%%</code></TD>\n<TD>”Cardholder's Name\"</td></tr>\n<TR><TD><CODE>%%LNG_EWayCreditCardNo%%</code></TD>\n<TD>”Credit Card Number\"</td></tr>\n<TR><TD><CODE>%%LNG_EWayCreditCardNoHelp%%</code></TD>\n<TD>”Numbers only, no spaces or dashes.\"</td></tr>\n<TR><TD><CODE>%%LNG_EWayEnterCardCode%%</code></TD>\n<TD>”Please enter your credit card security code. This is usually the last three or four digits on the signature strip of your card.\"</td></tr>\n<TR><TD><CODE>%%LNG_EWayEnterCardNumber%%</code></TD>\n<TD>”Please enter the card number only, no spaces or dashes.\"</td></tr>\n<TR><TD><CODE>%%LNG_EWayEnterCreditCardMonth%%</code></TD>\n<TD>”You forgot to choose an expiry month.\"</td></tr>\n<TR><TD><CODE>%%LNG_EWayEnterCreditCardYear%%</code></TD>\n<TD>”You forgot to choose an expiry year.\"</td></tr>\n<TR><TD><CODE>%%LNG_EWayEnterName%%</code></TD>\n<TD>”You forgot to enter the cardholder's name.\"</td></tr>\n<TR><TD><CODE>%%LNG_EWayExpirationDate%%</code></TD>\n<TD>”Expiration Date\"</td></tr>\n<TR><TD><CODE>%%LNG_EWayPayForOrder%%</code></TD>\n<TD>”Pay for Order\"</td></tr>\n<TR><TD><CODE>%%LNG_EWayPaymentIntro%%</code></TD>\n<TD>”Complete the form below and then click the &quot;Pay for Order&quot; button to pay for your order using our secure server.\"</td></tr>\n<TR><TD><CODE>%%LNG_EWayProcessingError%%</code></TD>\n<TD>”Something went wrong when trying to process your payment. Please review the error message and try again:\"</td></tr>\n<TR><TD><CODE>%%LNG_EWayTotalAmount%%</code></TD>\n<TD>”Order Total\"</td></tr>\n<TR><TD><CODE>%%LNG_ExpressCheckoutCheckingOutAsGuest%%</code></TD>\n<TD>\"Checking out as a guest\"</td></tr>\n<TR><TD><CODE>%%LNG_ExpressCheckoutChooseBilling%%</code></TD>\n<TD>\"Please select the address you'd like to use as your billing address for this order.\"</td></tr>\n<TR><TD><CODE>%%LNG_ExpressCheckoutChooseShipper%%</code></TD>\n<TD>\"Please select the shipping method you'd like to use for your order.\"</td></tr>\n<TR><TD><CODE>%%LNG_ExpressCheckoutChooseShipping%%</code></TD>\n<TD>\"Please select the address you'd like to use as your shipping address for this order.\"</td></tr>\n<TR><TD><CODE>%%LNG_ExpressCheckoutCreatingAnAccount%%</code></TD>\n<TD>\"Creating an account\"</td></tr>\n<TR><TD><CODE>%%LNG_ExpressCheckoutFor%%</code></TD>\n<TD>\"for\"</td></tr>\n<TR><TD><CODE>%%LNG_ExpressCheckoutLoadError%%</code></TD>\n<TD>\"There was an error loading this step of the checkout. Please try again.\"</td></tr>\n<TR><TD><CODE>%%LNG_ExpressCheckoutLoading%%</code></TD>\n<TD>\"Loading...\"</td></tr>\n<TR><TD><CODE>%%LNG_ExpressCheckoutSelectShippingProvider%%</code></TD>\n<TD>\"Please choose the shipping method for your order:\"</td></tr>\n<TR><td><code>%%LNG_ExpressCheckoutStep%%</code></TD>\n<TD>\"Step\"</td></tr>\n<TR><TD><CODE>%%LNG_ExpressCheckoutStepAccountDetails%%</code></TD>\n<TD>\"Account Details\"</td></tr>\n<TR><TD><CODE>%%LNG_ExpressCheckoutStepBillingAccountDetails%%</code></TD>\n<TD>\"Billing &amp; Account Details\"</td></tr>\n<TR><TD><CODE>%%LNG_ExpressCheckoutStepBillingAddress%%</code></TD>\n<TD>\"Billing Details\"</td></tr>\n<TR><TD><CODE>%%LNG_ExpressCheckoutStepOrderConfirmation%%</code></TD>\n<TD>\"Order Confirmation\"</td></tr>\n<TR><TD><CODE>%%LNG_ExpressCheckoutStepPaymentDetails%%</code></TD>\n<TD>\"Payment Details\"</td></tr>\n<TR><TD><CODE>%%LNG_ExpressCheckoutStepShippingAddress%%</code></TD>\n<TD>\"Shipping Details\"</td></tr>\n<TR><TD><CODE>%%LNG_ExpressCheckoutStepShippingMethod%%</code></TD>\n<TD>\"Shipping Method\"</td></tr>\n<TR><TD><CODE>%%LNG_FeaturedItems%%</code></TD>\n<TD>\"Featured Items\"</td></tr>\n<TR><TD><CODE>%%LNG_FeaturedProduct%%</code></TD>\n<TD>\"Featured Product\"</td></tr>\n<TR><TD><CODE>%%LNG_FeaturedProducts%%</code></TD>\n<TD>\"Featured Products\"</td></tr>\n<TR><TD><CODE>%%LNG_FeaturedProductsFeed%%</code></TD>\n<TD>\"Featured Products RSS Feed\"</td></tr>\n<TR><TD><CODE>%%LNG_FilterBy%%</code></TD>\n<TD>\"Filter by\"</td></tr>\n<TR><TD><CODE>%%LNG_FindByCategory%%</code></TD>\n<TD>\"Find Similar Products by Category\"</td></tr>\n<TR><TD><CODE>%%LNG_FindProductsByTag%%</code></TD>\n<TD>\"Find Similar Products by Tag\"</td></tr>\n<TR><TD><CODE>%%LNG_FirstName%%</code></TD>\n<TD>\"First Name\"</td></tr>\n<TR><TD><CODE>%%LNG_ForbiddenAccessPage%%</code></TD>\n<TD>\"You Do Not Have Permission To Access This Page\"</td></tr>\n<TR><TD><CODE>%%LNG_ForgotPassword%%</code></TD>\n<TD>\"Forgot Password\"</td></tr>\n<TR><TD><CODE>%%LNG_ForgotPasswordIntro%%</code></TD>\n<TD>\"Fill in your email below to request a new password. An email will be sent to the address below containing a link to verify your email address.\"</td></tr>\n<TR><TD><CODE>%%LNG_ForgotYourPassword%%</code></TD>\n<TD>\"Forgot your password?\"</td></tr>\n<TR><TD><CODE>%%LNG_FreeShipping%%</code></TD>\n<TD>\"Free Shipping\"</td></tr>\n<TR><TD><CODE>%%LNG_From%%</code></TD>\n<TD>\"From\"</td></tr>\n<TR><TD><CODE>%%LNG_GetNewPasswordIntro%%</code></TD>\n<TD>\"Your password should be at least 6 characters long and will be case sensitive.\"</td></tr>\n<TR><td><code>%%LNG_GiftCertificate%%</code></TD>\n<TD>\"Gift Certificate\"</td></tr>\n<TR><TD><CODE>%%LNG_GiftCertificateAmount%%</code></TD>\n<TD>\"Amount\"</td></tr>\n<TR><TD><CODE>%%LNG_GiftCertificateBalanceCode%%</code></TD>\n<TD>\"Gift Certificate Code\"</td></tr>\n<TR><TD><CODE>%%LNG_GiftCertificateBalanceFor%%</code></TD>\n<TD>\"Gift Certificate Balance for\"</td></tr>\n<TR><TD><CODE>%%LNG_GiftCertificateBalanceIntro%%</code></TD>\n<TD>\"You can check the balance of a gift certificate by typing the code in to the box below.\"</td></tr>\n<TR><TD><CODE>%%LNG_GiftCertificateCode%%</code></TD>\n<TD>\"Redeem Gift Certificate\"</td></tr>\n<TR><TD><CODE>%%LNG_GiftCertificateCodeIntro%%</code></TD>\n<TD>\"To pay for this order using a gift certificate, enter the gift certificate code in the box below and click 'Go'.\"</td></tr>\n<TR><TD><CODE>%%LNG_GiftCertificateEmailAttached%%</code></TD>\n<TD>\"Your gift certificate is attached to this email.\"</td></tr>\n<TR><TD><CODE>%%LNG_GiftCertificateEmailedAfterPurchase%%</code></TD>\n<TD>\"This gift certificate will be emailed to the recipient after your order has been paid for.\"</td></tr>\n<TR><TD><CODE>%%LNG_GiftCertificateEmailInstructions%%</code></TD>\n<TD>\"For instructions on how to redeem your gift certificate please &lt;a href='%s/giftcertificates.php?action=redeem'&gt;click here&lt;/a&gt;.\"</td></tr>\n<TR><TD><CODE>%%LNG_GiftCertificateEmailWarning%%</code></TD>\n<TD>\"Please download or print a copy of your gift certificate for safe keeping as gift certificates are non-transferable.\"</td></tr>\n<TR><TD><CODE>%%LNG_GiftCertificateEmailYouHaveReceived%%</code></TD>\n<TD>\"You have received a Gift Certificate for\"</td></tr>\n<TR><TD><CODE>%%LNG_GiftCertificateFrom%%</code></TD>\n<TD>\"Your Name\"</td></tr>\n<TR><TD><CODE>%%LNG_GiftCertificateFromEmail%%</code></TD>\n<TD>\"Your Email\"</td></tr>\n<TR><TD><CODE>%%LNG_GiftCertificateMessage%%</code></TD>\n<TD>\"Your Message\"</td></tr>\n<TR><TD><CODE>%%LNG_GiftCertificateMessageTooLong%%</code></TD>\n<TD>\"Please enter a shorter message for your gift certificate.\"</td></tr>\n<TR><TD><CODE>%%LNG_GiftCertificateRemaining%%</code></TD>\n<TD>\"remaining\"</td></tr>\n<TR><td><code>%%LNG_GiftCertificates%%</code></TD>\n<TD>\"Gift Certificates\"</td></tr>\n<TR><TD><CODE>%%LNG_GiftCertificateTerms2%%</code></TD>\n<TD>\"I understand that gift certificates are non-refundable\"</td></tr>\n<TR><TD><CODE>%%LNG_GiftCertificateTheme%%</code></TD>\n<TD>\"Gift Certificate Theme\"</td></tr>\n<TR><TD><CODE>%%LNG_GiftCertificateTo%%</code></TD>\n<TD>\"Recipient's Name\"</td></tr>\n<TR><TD><CODE>%%LNG_GiftCertificateToEmail%%</code></TD>\n<TD>\"Recipient's Email\"</td></tr>\n<TR><TD><CODE>%%LNG_GiftMessage%%</code></TD>\n<TD>\"Gift Message\"</td></tr>\n<TR><td><code>%%LNG_GiftWrapping%%</code></TD>\n<TD>\"Gift Wrapping\"</td></tr>\n<TR><TD><CODE>%%LNG_GrandTotal%%</code></TD>\n<TD>\"Grand Total\"</td></tr>\n<TR><TD><CODE>%%LNG_Handling%%</code></TD>\n<TD>\"Handling\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_address%%</code></TD>\n<TD>”Address\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_allbrands%%</code></TD>\n<TD>”View all brands\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_allprices%%</code></TD>\n<TD>”All prices are in\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_billingaddress%%</code></TD>\n<TD>”Billing Address\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_brands%%</code></TD>\n<TD>”Brands\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_calluson%%</code></TD>\n<TD>”Call us on\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_categories%%</code></TD>\n<TD>”Categories\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_chooseproduct%%</code></TD>\n<TD>”choose another product\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_clicktochangebilling%%</code></TD>\n<TD>”Click Here to Change Billing Details if Required\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_continuetostore%%</code></TD>\n<TD>”Continue to our store\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_customerviewed%%</code></TD>\n<TD>”Customers also viewed\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_date%%</code></TD>\n<TD>”Date\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_downloadedfileexpired%%</code></TD>\n<TD>”This file can no longer be downloaded as it has expired.\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_email%%</code></TD>\n<TD>”Email\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_emailbigcommerce%%</code></TD>\n<TD>”with BigCommerce\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_emaillaunchstore%%</code></TD>\n<TD>”Launch your own store for free\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_emailpowered%%</code></TD>\n<TD>”is powered by BigCommerce\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_existingcustomer%%</code></TD>\n<TD>”Existing Customer\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_giftcertificatecode%%</code></TD>\n<TD>”Gift certificate code\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_giftcertificatecoupon%%</code></TD>\n<TD>”Gift Certificate or Coupon Code\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_modify%%</code></TD>\n<TD>”Modify\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_name%%</code></TD>\n<TD>”Name\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_nomarketingmails%%</code></TD>\n<TD>”You will no longer receive marketing emails from\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_ok%%</code></TD>\n<TD>”OK\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_or%%</code></TD>\n<TD>”or\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_order%%</code></TD>\n<TD>”Order\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_orderconfirmation%%</code></TD>\n<TD>”Order Confirmation\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_outofstock%%</code></TD>\n<TD>”Out of Stock\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_payfororder%%</code></TD>\n<TD>”Pay for your order\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_phone%%</code></TD>\n<TD>”Phone\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_proceedcheckout%%</code></TD>\n<TD>”Proceed To Checkout\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_productreviews%%</code></TD>\n<TD>”Product Reviews\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_quantity%%</code></TD>\n<TD>”Quantity\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_returnitem%%</code></TD>\n<TD>”Return Item(s)\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_returnstore%%</code></TD>\n<TD>”Return to store\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_rrp%%</code></TD>\n<TD>”RRP\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_searchresults%%</code></TD>\n<TD>HC_searchresults\t”Search Results\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_securityquestion%%</code></TD>\n<TD>”Security Question\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_sharediffproduct%%</code></TD>\n<TD>”To share a different product, just select it from those shown below.\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_sharethis%%</code></TD>\n<TD>”Share This\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_shippingaddress%%</code></TD>\n<TD>”Shipping Address\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_shippingmethod%%</code></TD>\n<TD>”Shipping Method\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_shopnow%%</code></TD>\n<TD>”SHOP NOW\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_signin%%</code></TD>\n<TD>”Sign In\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_signinorcreate%%</code></TD>\n<TD>”Sign in or Create Account\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_signupnewsletter%%</code></TD>\n<TD>”Sign up for our newsletter\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_Submit%%</code></TD>\n<TD>\"Submit\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_total%%</code></TD>\n<TD>”Total\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_unsubscribe%%</code></TD>\n<TD>”Unsubscribe from\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_voucherredemptioncode%%</code></TD>\n<TD>”Voucher redemption code\"</td></tr>\n<TR><TD><CODE>%%LNG_HC_writereview%%</code></TD>\n<TD>”Write Review\"</td></tr>\n<TR><TD><CODE>%%LNG_HCT_delete%%</code></TD>\n<TD>”Delete\"</td></tr>\n<TR><TD><CODE>%%LNG_HCT_edit%%</code></TD>\n<TD>”Edit\"</td></tr>\n<TR><TD><CODE>%%LNG_HCV_addshoppingbag%%</code></TD>\n<TD>”Add to shopping bag\"</td></tr>\n<TR><TD><CODE>%%LNG_HCV_apply%%</code></TD>\n<TD>”Apply\"</td></tr>\n<TR><TD><CODE>%%LNG_HCV_clearform%%</code></TD>\n<TD>”Clear Form\"</td></tr>\n<TR><TD><CODE>%%LNG_HCV_go%%</code></TD>\n<TD>”Go\"</td></tr>\n<TR><TD><CODE>%%LNG_HearFromUsViaEmail%%</code></TD>\n<TD>\"Hear From Us Via Email?\"</td></tr>\n<TR><TD><CODE>%%LNG_HeresHowToPayForYourOrder%%</code></TD>\n<TD>”Your order was sent to us but requires payment before it can be completed.\"</td></tr>\n<TR><TD><CODE>%%LNG_HeresHowtoPayforYourOrderThanks%%</code></TD>\n<TD>”Here's How To Pay For Your Order\"</td></tr>\n<TR><TD><CODE>%%LNG_HeresHowtoPayforYourOrderUC%%</code></TD>\n<TD>\"Here's How to Pay for Your Order...\"</td></tr>\n<TR><TD><CODE>%%LNG_Hi%%</code></TD>\n<TD>\"Hi\"</td></tr>\n<TR><TD><CODE>%%LNG_HideSearchForm%%</code></TD>\n<TD>\"Hide Search Form\"</td></tr>\n<TR><td><code>%%LNG_Home%%</code></TD>\n<TD>\"Home\"</td></tr>\n<TR><TD><CODE>%%LNG_HowRateProduct%%</code></TD>\n<TD>\"How do you rate this product?\"</td></tr>\n<TR><TD><CODE>%%LNG_HowWouldYouLikeToPay%%</code></TD>\n<TD>\"How Would You Like to Pay?\"</td></tr>\n<TR><TD><CODE>%%LNG_IdealBank%%</code></TD>\n<TD>\"Bank\"</td></tr>\n<TR><TD><CODE>%%LNG_IdealIssuerNotSelected%%</code></TD>\n<TD>\"Please select your issuer to continue\"</td></tr>\n<TR><TD><CODE>%%LNG_IdealPaymentIntro%%</code></TD>\n<TD>\"Select your bank below and click the &quot;Continue&quot; button to proceed with payment.\"</td></tr>\n<TR><TD><CODE>%%LNG_IdealProcessingError%%</code></TD>\n<TD>\"Something went wrong when trying to process your payment. Please review the error message and try again:\"</td></tr>\n<TR><TD><CODE>%%LNG_Image%%</code></TD>\n<TD>\"Image\"</td></tr>\n<TR><TD><CODE>%%LNG_Inbox%%</code></TD>\n<TD>\"Inbox\"</td></tr>\n<TR><TD><CODE>%%LNG_InstructionsForPaymentBelow%%</code></TD>\n<TD>\"Instructions to pay for your order are shown below:\"</td></tr>\n<TR><TD><CODE>%%LNG_InvalidFileTypeJS%%</code></TD>\n<TD>\"The file type of the file you are trying to upload is not allowed for this field.\"</td></tr>\n<TR><TD><CODE>%%LNG_InvalidQuantity%%</code></TD>\n<TD>\"Please enter a valid product quantity.\"</td></tr>\n<TR><TD><CODE>%%LNG_InvoiceNumber%%</code></TD>\n<TD>\"Hi\"</td></tr>\n<TR><TD><CODE>%%LNG_InvoicePendingPaymentText%%</code></TD>\n<TD>\"Your order requires payment before it can be finalized. Details on how to pay are shown below.\"</td></tr>\n<TR><TD><CODE>%%LNG_IPreferThisEmailFormat%%</code></TD>\n<TD>\"I prefer to receive emails in this format:\"</td></tr>\n<TR><TD><CODE>%%LNG_ISOCode%%</code></TD>\n<TD>\"ISO Code\"</td></tr>\n<TR><TD><CODE>%%LNG_IssuerConfirmation%%</code></TD>\n<TD>\"Issuer Confirmation\"</td></tr>\n<TR><TD><CODE>%%LNG_IssuerName%%</code></TD>\n<TD>\"Issuer Name\"</td></tr>\n<TR><TD><CODE>%%LNG_Item%%</code></TD>\n<TD>\"Item\"</td></tr>\n<TR><TD><CODE>%%LNG_ItemDetails%%</code></TD>\n<TD>\"Item Details\"</td></tr>\n<TR><TD><CODE>%%LNG_ItemPrice%%</code></TD>\n<TD>\"Item Price\"</td></tr>\n<TR><TD><CODE>%%LNG_Items%%</code></TD>\n<TD>\"Items\"</td></tr>\n<TR><TD><CODE>%%LNG_ItemsShippedTo%%</code></TD>\n<TD>\"Items shipped to\"</td></tr>\n<TR><TD><CODE>%%LNG_ItemTotal%%</code></TD>\n<TD>\"Item Total\"</td></tr>\n<TR><TD><CODE>%%LNG_JS_BillToThisAddress%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_JS_Description%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_JS_OtherDetails%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_JS_OtherProducts%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_JS_ProductVideos%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_JS_Reviews%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_JS_SimilarProducts%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_JS_SimilarProductsByCustomerViews%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_JS_Tags%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_JS_Warranty%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_JustSentAnEmailConfirmation%%</code></TD>\n<TD>\"We've just sent you an email confirming your order.\"</td></tr>\n<TR><TD><CODE>%%LNG_LastName%%</code></TD>\n<TD>\"Last Name\"</td></tr>\n<TR><TD><CODE>%%LNG_LoadingPleaseWait%%</code></TD>\n<TD>\"Loading... Please wait...\"</td></tr>\n<TR><TD><CODE>%%LNG_Login%%</code></TD>\n<TD>\"Sign in\"</td></tr>\n<TR><TD><CODE>%%LNG_LoginEnterPassword%%</code></TD>\n<TD>\"Please type in your password.\"</td></tr>\n<TR><TD><CODE>%%LNG_LoginEnterValidEmail%%</code></TD>\n<TD>\"Please type in a valid email address, such as joe@aol.com\"</td></tr>\n<TR><TD><CODE>%%LNG_LoginWord%%</code></TD>\n<TD>\"Sign In\"</td></tr>\n<TR><TD><CODE>%%LNG_LowInventoryWarningAdjust%%</code></TD>\n<TD>\"Click here to adjust the inventory level for this product.\"</td></tr>\n<TR><TD><CODE>%%LNG_LowInventoryWarningAll%%</code></TD>\n<TD>\"Click here to view all products with a low inventory level.\"</td></tr>\n<TR><TD><CODE>%%LNG_ManageYourAccount%%</code></TD>\n<TD>\"Manage Your Account\"</td></tr>\n<TR><TD><CODE>%%LNG_MerchantName%%</code></TD>\n<TD>\"Merchant Name\"</td></tr>\n<TR><TD><CODE>%%LNG_MerchantURL%%</code></TD>\n<TD>\"Merchant URL\"</td></tr>\n<TR><TD><CODE>%%LNG_MessageContent%%</code></TD>\n<TD>\"Message\"</td></tr>\n<TR><TD><CODE>%%LNG_MessageEmailText1%%</code></TD>\n<TD>\"has sent you a message about your order.\"</td></tr>\n<TR><TD><CODE>%%LNG_MessageEmailText2%%</code></TD>\n<TD>\"To view the message and reply, follow the link below:\"</td></tr>\n<TR><TD><CODE>%%LNG_MessageEnterContent%%</code></TD>\n<TD>\"Please enter a message.\"</td></tr>\n<TR><TD><CODE>%%LNG_MessageEnterSubject%%</code></TD>\n<TD>\"Please enter a subject.\"</td></tr>\n<TR><TD><CODE>%%LNG_MessageOrder%%</code></TD>\n<TD>\"Order\"</td></tr>\n<TR><TD><CODE>%%LNG_MessageSaid%%</code></TD>\n<TD>\"Said\"</td></tr>\n<TR><TD><CODE>%%LNG_MessageSendError%%</code></TD>\n<TD>\"Something went wrong when trying to send your message. Please try again.\"</td></tr>\n<TR><TD><CODE>%%LNG_MessageSendSuccess%%</code></TD>\n<TD>\"Your message was sent and you will receive a response via email shortly.\"</td></tr>\n<TR><TD><CODE>%%LNG_MessageSubject%%</code></TD>\n<TD>\"Subject\"</td></tr>\n<TR><TD><CODE>%%LNG_MobileSite%%</code></TD>\n<TD>\"Mobile Site\"</td></tr>\n<TR><TD><CODE>%%LNG_NewCustomerIntro1%%</code></TD>\n<TD>\"If this is your first purchase from\"</td></tr>\n<TR><TD><CODE>%%LNG_NewCustomerIntro2%%</code></TD>\n<TD>\"please click the &quot;Continue.&quot; button to get started.\"</td></tr>\n<TR><TD><CODE>%%LNG_NewestItems%%</code></TD>\n<TD>\"Newest Items\"</td></tr>\n<TR><TD><CODE>%%LNG_NewProducts%%</code></TD>\n<TD>\"New Products\"</td></tr>\n<TR><TD><CODE>%%LNG_NewProductsFeed%%</code></TD>\n<TD>\"New Products RSS Feed\"</td></tr>\n<TR><TD><CODE>%%LNG_NewsletterEnterEmail%%</code></TD>\n<TD>\"You forgot to type in your email address.\"</td></tr>\n<TR><TD><CODE>%%LNG_NewsletterEnterFirstName%%</code></TD>\n<TD>\"You forgot to type in your first name.\"</td></tr>\n<TR><TD><CODE>%%LNG_NewsletterEnterValidEmail%%</code></TD>\n<TD>\"Please enter a valid email address, such as john@example.com.\"</td></tr>\n<TR><TD><CODE>%%LNG_NewsletterSpecialOffersText%%</code></TD>\n<TD>\"I'd like to receive special offers\"</td></tr>\n<TR><TD><CODE>%%LNG_NewsletterSubscription%%</code></TD>\n<TD>\"Newsletter Subscription\"</td></tr>\n<TR><TD><CODE>%%LNG_Next%%</code></TD>\n<TD>\"Next\"</td></tr>\n<TR><TD><CODE>%%LNG_NextImage%%</code></TD>\n<TD>\"Next\"</td></tr>\n<TR><TD><CODE>%%LNG_NMICardHoldersName%%</code></TD>\n<TD>\"Cardholder's Name\"</td></tr>\n<TR><TD><CODE>%%LNG_NMICreditCardCCV2%%</code></TD>\n<TD>”CVV Code\"</td></tr>\n<TR><TD><CODE>%%LNG_NMICreditCardNo%%</code></TD>\n<TD>”Credit Card Number\"</td></tr>\n<TR><TD><CODE>%%LNG_NMICreditCardNoHelp%%</code></TD>\n<TD>”Numbers only, no spaces or dashes.\"</td></tr>\n<TR><TD><CODE>%%LNG_NMIExpirationDate%%</code></TD>\n<TD>”Expiration Date\"</td></tr>\n<TR><TD><CODE>%%LNG_NMIPayForOrder%%</code></TD>\n<TD>”Pay for Order\"</td></tr>\n<TR><TD><CODE>%%LNG_NMIPaymentIntro%%</code></TD>\n<TD>”Complete the form below and then click the &quot;Pay for Order&quot; button to pay for your order using our secure server.\"</td></tr>\n<TR><TD><CODE>%%LNG_NMIProcessingError%%</code></TD>\n<TD>”Something went wrong when trying to process your payment. Please review the error message and try again:\"</td></tr>\n<TR><TD><CODE>%%LNG_NMITotalAmount%%</code></TD>\n<TD>”Order Total\"</td></tr>\n<TR><TD><CODE>%%LNG_NoCaptcha%%</code></TD>\n<TD>\"Please enter the code shown.\"</td></tr>\n<TR><TD><CODE>%%LNG_NoItemsInCart%%</code></TD>\n<TD>\"There are no products in your cart.\"</td></tr>\n<TR><TD><CODE>%%LNG_NoPermissionToAccessThisPage%%</code></TD>\n<TD>\"You don't have the necessary permissions to view this page.\"</td></tr>\n<TR><TD><CODE>%%LNG_NoPreference%%</code></TD>\n<TD>\"No Preference\"</td></tr>\n<TR><TD><CODE>%%LNG_NoProductsInCategory%%</code></TD>\n<TD>\"There are no products in this category.\"</td></tr>\n<TR><TD><CODE>%%LNG_NotAnExistingCustomer%%</code></TD>\n<TD>\"I'm A New Customer\"</td></tr>\n<TR><TD><CODE>%%LNG_NotFound%%</code></TD>\n<TD>\"Not Found\"</td></tr>\n<TR><TD><CODE>%%LNG_NotFoundError%%</code></TD>\n<TD>\"The page you were looking for appears to have been moved, deleted or does not exist.\"</td></tr>\n<TR><TD><CODE>%%LNG_NotFoundReason1%%</code></TD>\n<TD>\"An outdated link on another site\"</td></tr>\n<TR><TD><CODE>%%LNG_NotFoundReason2%%</code></TD>\n<TD>\"A typo in the address / URL\"</td></tr>\n<TR><TD><CODE>%%LNG_NotFoundReasonTitle%%</code></TD>\n<TD>\"This is most likely due to:\"</td></tr>\n<TR><TD><CODE>%%LNG_NotificationAReturnSummaryIsShownBelow%%</code></TD>\n<TD>\"A summary of your return is shown below. To view the status of this return\"</td></tr>\n<TR><TD><CODE>%%LNG_NotificationClickHereViewReturn%%</code></TD>\n<TD>\"View details for return #\"</td></tr>\n<TR><TD><CODE>%%LNG_NotificationConfirmationForReturn%%</code></TD>\n<TD>\"Confirmation for Return Request for Order ID\"</td></tr>\n<TR><TD><CODE>%%LNG_NotificationCustomerDetails%%</code></TD>\n<TD>\"Customer Details\"</td></tr>\n<TR><TD><CODE>%%LNG_NotificationNewReturnRequest%%</code></TD>\n<TD>\"New Return Request for Order ID\"</td></tr>\n<TR><TD><CODE>%%LNG_NotificationReturnRequestSubmitted%%</code></TD>\n<TD>\"A new return request has been submitted on\"</td></tr>\n<TR><TD><CODE>%%LNG_NotificationTheReturnContainsTheFollowingItems%%</code></TD>\n<TD>\"The Return Request Contains the Following Items...\"</td></tr>\n<TR><TD><CODE>%%LNG_NotificationYourReturnContainsTheFollowingItems%%</code></TD>\n<TD>\"Your Return Request Contains the Following Items...\"</td></tr>\n<TR><TD><CODE>%%LNG_Of%%</code></TD>\n<TD>\"of\"</td></tr>\n<TR><TD><CODE>%%LNG_OnlyFeaturedProducts%%</code></TD>\n<TD>\"Only Featured Products\"</td></tr>\n<TR><TD><CODE>%%LNG_OnlyFreeShipping%%</code></TD>\n<TD>\"Only Free Shipping\"</td></tr>\n<TR><TD><CODE>%%LNG_OnlyNonFeaturedProducts%%</code></TD>\n<TD>\"Only Non-Featured Products\"</td></tr>\n<TR><TD><CODE>%%LNG_OnlyPaidShipping%%</code></TD>\n<TD>\"Only Paid Shipping\"</td></tr>\n<TR><TD><CODE>%%LNG_OnThe%%</code></TD>\n<TD>\"on the\"</td></tr>\n<TR><TD><CODE>%%LNG_Oops%%</code></TD>\n<TD>\"Oops...\"</td></tr>\n<TR><TD><CODE>%%LNG_Optional%%</code></TD>\n<TD>\"Optional\"</td></tr>\n<TR><TD><CODE>%%LNG_Or%%</code></TD>\n<TD>\"or\"</td></tr>\n<TR><TD><CODE>%%LNG_Order%%</code></TD>\n<TD>\"Order\"</td></tr>\n<TR><TD><CODE>%%LNG_OrderAwaitingPayment%%</code></TD>\n<TD>\"Your order was sent to us but is currently awaiting payment. Once we receive the payment for your order, it will be completed. If you've already provided payment details then we will process your order manually and send you an email when it's completed.\"</td></tr>\n<TR><TD><CODE>%%LNG_OrderComments%%</code></TD>\n<TD>\"Order Instructions/Comments\"</td></tr>\n<TR><TD><CODE>%%LNG_OrderDate%%</code></TD>\n<TD>\"Order Date\"</td></tr>\n<TR><TD><CODE>%%LNG_OrderDetails%%</code></TD>\n<TD>\"Order Details\"</td></tr>\n<TR><TD><CODE>%%LNG_OrderDownloads%%</code></TD>\n<TD>\"Files\"</td></tr>\n<TR><TD><CODE>%%LNG_OrderedItemRemovedFromStore%%</code></TD>\n<TD>\"That item was removed from our store and is no longer available for order.\"</td></tr>\n<TR><TD><CODE>%%LNG_OrderId%%</code></TD>\n<TD>\"Order #%s\"</td></tr>\n<TR><TD><CODE>%%LNG_OrderIdHash%%</code></TD>\n<TD>\"Order #\"</td></tr>\n<TR><TD><CODE>%%LNG_OrderItems%%</code></TD>\n<TD>\"Order Items\"</td></tr>\n<TR><TD><CODE>%%LNG_OrderStatus%%</code></TD>\n<TD>\"Order Status\"</td></tr>\n<TR><TD><CODE>%%LNG_OrderStatusChanged%%</code></TD>\n<TD>\"Order Status Changed\"</td></tr>\n<TR><TD><CODE>%%LNG_OrderStatusChangedDatePlaced%%</code></TD>\n<TD>\"Date Placed\"</td></tr>\n<TR><TD><CODE>%%LNG_OrderStatusChangedIntro%%</code></TD>\n<TD>\"An order you recently placed on our website has had its status changed.\"</td></tr>\n<TR><TD><CODE>%%LNG_OrderStatusChangedOrderTotal%%</code></TD>\n<TD>\"Order Total\"</td></tr>\n<TR><TD><CODE>%%LNG_OrderStatusChangedPaymentMethod%%</code></TD>\n<TD>\"Payment Method\"</td></tr>\n<TR><TD><CODE>%%LNG_OrderSubtotal%%</code></TD>\n<TD>\"Order Subtotal\"</td></tr>\n<TR><TD><CODE>%%LNG_OrderTotal%%</code></TD>\n<TD>\"Order Total\"</td></tr>\n<TR><TD><CODE>%%LNG_OrderTrackingNoIs%%</code></TD>\n<TD>\"The tracking number for this order is\"</td></tr>\n<TR><TD><CODE>%%LNG_Other%%</code></TD>\n<TD>\"Other\"</td></tr>\n<TR><TD><CODE>%%LNG_OtherDetails%%</code></TD>\n<TD>\"Other Details\"</td></tr>\n<TR><TD><CODE>%%LNG_Outstanding%%</code></TD>\n<TD>\"outstanding\"</td></tr>\n<TR><TD><CODE>%%LNG_OutstandingOrderTotal%%</code></TD>\n<TD>\"Your outstanding order total:\"</td></tr>\n<TR><td><code>%%LNG_Password%%</code></TD>\n<TD>\"Password\"</td></tr>\n<TR><TD><CODE>%%LNG_PasswordConfirm%%</code></TD>\n<TD>\"Confirm Password\"</td></tr>\n<TR><TD><CODE>%%LNG_PayflowProCardHoldersName%%</code></TD>\n<TD>\"Cardholder's Name\"</td></tr>\n<TR><TD><CODE>%%LNG_PayflowProCreditCardCCV2%%</code></TD>\n<TD>\"Card Security Code\"</td></tr>\n<TR><TD><CODE>%%LNG_PayflowProCreditCardNo%%</code></TD>\n<TD>\"Credit Card Number\"</td></tr>\n<TR><TD><CODE>%%LNG_PayflowProCreditCardNoHelp%%</code></TD>\n<TD>\"Numbers only, no spaces or dashes.\"</td></tr>\n<TR><TD><CODE>%%LNG_PayflowProEnterCardNumber%%</code></TD>\n<TD>\"Please enter the card number only, no spaces or dashes.\"</td></tr>\n<TR><TD><CODE>%%LNG_PayflowProEnterCreditCardMonth%%</code></TD>\n<TD>\"You forgot to choose an expiry month.\"</td></tr>\n<TR><TD><CODE>%%LNG_PayflowProEnterCreditCardYear%%</code></TD>\n<TD>\"You forgot to choose an expiry year.\"</td></tr>\n<TR><TD><CODE>%%LNG_PayflowProEnterCVV2Number%%</code></TD>\n<TD>\"Please enter your credit card security code. This is usually the last three or four digits on the signature strip of your card.\"</td></tr>\n\n<TR><TD><CODE>%%LNG_PayflowProEnterName%%</code></TD>\n<TD>\"You forgot to enter the cardholder's name.\"</td></tr>\n<TR><TD><CODE>%%LNG_PayflowProExpirationDate%%</code></TD>\n<TD>\"Expiration Date\"</td></tr>\n<TR><TD><CODE>%%LNG_PayflowProPayForOrder%%</code></TD>\n<TD>\"Pay for Order\"</td></tr>\n<TR><TD><CODE>%%LNG_PayflowProPaymentIntro%%</code></TD>\n<TD>\"Complete the form below and then click the &quot;Pay for Order&quot; button to pay for your order.\"</td></tr>\n<TR><TD><CODE>%%LNG_PayflowProProcessingError%%</code></TD>\n<TD>\"Something went wrong when trying to process your payment. Please review the error message and try again:\"</td></tr>\n<TR><TD><CODE>%%LNG_PayflowProTotalAmount%%</code></TD>\n<TD>\"Order Total\"</td></tr>\n<TR><TD><CODE>%%LNG_PayForYourOrderHelp%%</code></TD>\n<TD>\"Once you've provided payment, your order will be completed.\"</td></tr>\n<TR><TD><CODE>%%LNG_PayForYourOrderHelp%%</code></TD>\n<TD>\"Once you've provided payment your order will be completed.\"</td></tr>\n<TR><TD><CODE>%%LNG_PaymentMethod%%</code></TD>\n<TD>\"Payment Method\"</td></tr>\n<TR><TD><CODE>%%LNG_PersonalDetails%%</code></TD>\n<TD>\"Personal Details\"</td></tr>\n<TR><TD><CODE>%%LNG_Phone%%</code></TD>\n<TD>\"Phone\"</td></tr>\n<TR><TD><CODE>%%LNG_PhoneNumber%%</code></TD>\n<TD>\"Phone Number\"</td></tr>\n<TR><TD><CODE>%%LNG_PleaseAgreeGiftCertificateTerms%%</code></TD>\n<TD>\"Please agree to the gift certificate terms.\"</td></tr>\n<TR><TD><CODE>%%LNG_PleaseChooseAPaymentMethod%%</code></TD>\n<TD>\"Please choose a payment method.\"</td></tr>\n<TR><TD><CODE>%%LNG_PleaseChooseShippingProvider%%</code></TD>\n<TD>\"Please choose a shipping method.\"</td></tr>\n<TR><TD><CODE>%%LNG_PleaseSelectAProduct%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_PopularProducts%%</code></TD>\n<TD>\"Popular Products\"</td></tr>\n<TR><TD><CODE>%%LNG_PopularProductsFeed%%</code></TD>\n<TD>\"Popular Products RSS Feed\"</td></tr>\n<TR><TD><CODE>%%LNG_PostedBy%%</code></TD>\n<TD>\"Posted by\"</td></tr>\n<TR><TD><CODE>%%LNG_PostedOn%%</code></TD>\n<TD>\"Posted on\"</td></tr>\n<TR><TD><CODE>%%LNG_PrepositionOn%%</code></TD>\n<TD>\"on\"</td></tr>\n<TR><TD><CODE>%%LNG_Preview%%</code></TD>\n<TD>\"Preview\"</td></tr>\n<TR><TD><CODE>%%LNG_Previous%%</code></TD>\n<TD>\"Previous\"</td></tr>\n<TR><TD><CODE>%%LNG_PreviousImage%%</code></TD>\n<TD>\"Previous\"</td></tr>\n<TR><td><code>%%LNG_PreviousPage%%</code></TD>\n<TD>\"Previous Page\"</td></tr>\n<TR><TD><CODE>%%LNG_Price%%</code></TD>\n<TD>\"Price\"</td></tr>\n<TR><TD><CODE>%%LNG_PriceAsc%%</code></TD>\n<TD>\"Price: Low to High\"</td></tr>\n<TR><TD><CODE>%%LNG_PriceDesc%%</code></TD>\n<TD>\"Price: High to Low\"</td></tr>\n<TR><TD><CODE>%%LNG_PriceRange%%</code></TD>\n<TD>\"Price Range\"</td></tr>\n<TR><TD><CODE>%%LNG_ProceedToPayment%%</code></TD>\n<TD>\"Proceed to Payment\"</td></tr>\n<TR><TD><CODE>%%LNG_ProceedToPaymentContinue%%</code></TD>\n<TD>\"Continue\"</td></tr>\n<TR><TD><CODE>%%LNG_ProdBin%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_ProdName%%</code></TD>\n<TD>\"Product Name\"</td></tr>\n<TR><TD><CODE>%%LNG_Product%%</code></TD>\n<TD>\"Product\"</td></tr>\n<TR><TD><CODE>%%LNG_ProductAddToCartLink%%</code></TD>\n<TD>\"Add To Cart\"</td></tr>\n<TR><TD><CODE>%%LNG_ProductChooseOptionLink%%</code></TD>\n<TD>\"Choose Options\"</td></tr>\n<TR><TD><CODE>%%LNG_ProductComparison%%</code></TD>\n<TD>\"Product Comparison\"</td></tr>\n<TR><TD><CODE>%%LNG_ProductComparisonIntro%%</code></TD>\n<TD>\"Your product comparison is shown below. Click a product attribute in the left column to sort by that attribute.\"</td></tr>\n<TR><TD><CODE>%%LNG_ProductDescription%%</code></TD>\n<TD>\"Product Description\"</td></tr>\n<TR><TD><CODE>%%LNG_ProductDetails%%</code></TD>\n<TD>\"Product Details\"</td></tr>\n<TR><TD><CODE>%%LNG_ProductMaxQty%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_ProductMinQty%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_ProductPreOrderCartLink%%</code></TD>\n<TD>\"Pre-Order Now\"</td></tr>\n<TR><TD><CODE>%%LNG_ProductReviewEmailHeading%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_ProductReviewEmailInstructions%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_ProductReviewEmailSubheading%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_ProductReviewEmailThanks%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_ProductReviewEmailUnsubscribe%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_ProductReviewEmailUnsubscribeSuffix%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_ProductReviewLinkText%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_Products%%</code></TD>\n<TD>\"Products\"</td></tr>\n<TR><TD><CODE>%%LNG_ProductsByCategory%%</code></TD>\n<TD>\"Categories\"</td></tr>\n<TR><TD><CODE>%%LNG_ProductTagCloud%%</code></TD>\n<TD>\"Browse by Tag\"</td></tr>\n<TR><TD><CODE>%%LNG_ProductTagCloudIntro%%</code></TD>\n<TD>\"The product tag cloud shows the different tags (keywords) associated with products. The bigger the tag appears, the more products it contains. Click on a tag to see all products listed under that tag.\"</td></tr>\n<TR><TD><CODE>%%LNG_ProductVideos%%</code></TD>\n<TD>\"Product Videos\"</td></tr>\n<TR><TD><CODE>%%LNG_ProductWarranty%%</code></TD>\n<TD>\"Warranty Information\"</td></tr>\n<TR><TD><CODE>%%LNG_PublishedBy%%</code></TD>\n<TD>\"Posted by\"</td></tr>\n<TR><TD><CODE>%%LNG_PurchaseGiftCertificate%%</code></TD>\n<TD>\"Purchase a Gift Certificate\"</td></tr>\n<TR><TD><CODE>%%LNG_PurchaseGiftCertificates%%</code></TD>\n<TD>.</td></tr>\n<TR><td><code>%%LNG_Qty%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_Quantity%%</code></TD>\n<TD>\"Quantity\"</td></tr>\n<TR><TD><CODE>%%LNG_QuantityFull%%</code></TD>\n<TD>\"Quantity\"</td></tr>\n<TR><TD><CODE>%%LNG_QuestionMark%%</code></TD>\n<TD>\"?\"</td></tr>\n<TR><TD><CODE>%%LNG_QuickViewBulkDiscountsLabel%%</code></TD>\n<TD>\"Bulk Discounts\"</td></tr>\n<TR><TD><CODE>%%LNG_QuickViewViewDetailsText%%</code></TD>\n<TD>\"View Details\"</td></tr>\n<TR><TD><CODE>%%LNG_Rate1Star%%</code></TD>\n<TD>\"1 star (worst)\"</td></tr>\n<TR><TD><CODE>%%LNG_Rate2Stars%%</code></TD>\n<TD>\"2 stars\"</td></tr>\n<TR><TD><CODE>%%LNG_Rate3Stars%%</code></TD>\n<TD>\"3 stars (average)\"</td></tr>\n<TR><TD><CODE>%%LNG_Rate4Stars%%</code></TD>\n<TD>\"4 stars\"</td></tr>\n<TR><TD><CODE>%%LNG_Rate5Stars%%</code></TD>\n<TD>\"5 stars (best)\"</td></tr>\n<TR><TD><CODE>%%LNG_Rating%%</code></TD>\n<TD>\"Rating\"</td></tr>\n<TR><TD><CODE>%%LNG_ReadMoreLink%%</code></TD>\n<TD>\"Read More &raquo;\"</td></tr>\n<TR><TD><CODE>%%LNG_ReadReviews%%</code></TD>\n<TD>\"Read Reviews\"</td></tr>\n<TR><TD><CODE>%%LNG_RecentBlogsFeed%%</code></TD>\n<TD>\"Recent News RSS Feed\"</td></tr>\n<TR><TD><CODE>%%LNG_RecentlySubmittedReturnRequest%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_RecentlyViewedItems%%</code></TD>\n<TD>\"Your Recent Items\"</td></tr>\n<TR><TD><CODE>%%LNG_RecentlyViewedItemsDescription%%</code></TD>\n<TD>\"See a list of items you've recently viewed at %s.\"</td></tr>\n<TR><TD><CODE>%%LNG_RecentNews%%</code></TD>\n<TD>\"Recent Updates\"</td></tr>\n<TR><TD><CODE>%%LNG_RecentPosts%%</code></TD>\n<TD>\"Recent Posts\"</td></tr>\n<TR><TD><CODE>%%LNG_RedeemAGiftCertificate%%</code></TD>\n<TD>\"Redeem a Gift Certificate\"</td></tr>\n<TR><TD><CODE>%%LNG_RedeemGiftCertificate%%</code></TD>\n<TD>\"Redeem a Gift Certificate\"</td></tr>\n<TR><TD><CODE>%%LNG_RedeemGiftCertificate1%%</code></TD>\n<TD>\"You need your unique gift certificate code, which is part of the gift certificate that was emailed to you as an attachment. It will look something like Z50-Y6K-COS-402.\"</td></tr>\n<TR><TD><CODE>%%LNG_RedeemGiftCertificate2%%</code></TD>\n<TD>\"Browse the store and add items to your cart as you normally would.\"</td></tr>\n<TR><TD><CODE>%%LNG_RedeemGiftCertificate3%%</code></TD>\n<TD>\"Click the '&lt;a href='cart.php'&gt;View Cart&lt;/a&gt;' link to view the contents of your shopping cart.\"</td></tr>\n<TR><TD><CODE>%%LNG_RedeemGiftCertificate4%%</code></TD>\n<TD>\"Type your gift certificate code in to the 'Redeem Gift Certificate' box and click 'Go'.\"</td></tr>\n<TR><td><code>%%LNG_RedeemGiftCertificateAt%%</code></TD>\n<TD>\"Redeem your gift certificate at\"</td></tr>\n<TR><TD><CODE>%%LNG_RedeemGiftCertificateIntro%%</code></TD>\n<TD>\"To redeem a gift certificate at %s, follow the simple steps below.\"</td></tr>\n<TR><TD><CODE>%%LNG_ReferenceNumber%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_RegisterAnAccount%%</code></TD>\n<TD>\"Register an account\"</td></tr>\n<TR><TD><CODE>%%LNG_RelatedProducts%%</code></TD>\n<TD>\"Related Products\"</td></tr>\n<TR><TD><CODE>%%LNG_RelatedSearches%%</code></TD>\n<TD>\"Related Searches\"</td></tr>\n<TR><TD><CODE>%%LNG_RemainingStoreCredit%%</code></TD>\n<TD>\"Remaining store credit:\"</td></tr>\n<TR><TD><CODE>%%LNG_Remove%%</code></TD>\n<TD>\"Remove\"</td></tr>\n<TR><TD><CODE>%%LNG_RemoveFromWishList%%</code></TD>\n<TD>\"Remove Item\"</td></tr>\n<TR><TD><CODE>%%LNG_Reorder%%</code></TD>\n<TD>\"Reorder\"</td></tr>\n<TR><TD><CODE>%%LNG_ReplyToYourOrderMessage%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_ResponseCode%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_ResponseMessage%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_Return%%</code></TD>\n<TD>\"Return\"</td></tr>\n<TR><TD><CODE>%%LNG_ReturnAction%%</code></TD>\n<TD>\"Return Action\"</td></tr>\n<TR><TD><CODE>%%LNG_ReturnComments%%</code></TD>\n<TD>\"Comments\"</td></tr>\n<TR><TD><CODE>%%LNG_ReturnedItem%%</code></TD>\n<TD>\"Returned Item\"</td></tr>\n<TR><TD><CODE>%%LNG_ReturnInstructions%%</code></TD>\n<TD>\"Return Instructions\"</td></tr>\n<TR><TD><CODE>%%LNG_ReturnItems%%</code></TD>\n<TD>\"Return Items\"</td></tr>\n<TR><TD><CODE>%%LNG_ReturnOrderItems%%</code></TD>\n<TD>\"Return Item(s)\"</td></tr>\n<TR><TD><CODE>%%LNG_ReturnQty%%</code></TD>\n<TD>\"Qty. to Return\"</td></tr>\n<TR><TD><CODE>%%LNG_ReturnReason%%</code></TD>\n<TD>\"Return Reason\"</td></tr>\n<TR><TD><CODE>%%LNG_ReturnRequests%%</code></TD>\n<TD>\"Return Requests\"</td></tr>\n<TR><TD><CODE>%%LNG_ReturnRequestsDescription%%</code></TD>\n<TD>\"View any outstanding return requests you've made for products you ordered from %s.\"</td></tr>\n<TR><TD><CODE>%%LNG_ReturnRequestSubmitted%%</code></TD>\n<TD>\"Your return request has been submitted successfully.\"</td></tr>\n<TR><TD><CODE>%%LNG_ReturnStatusChangedTo%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_ReturnSubmittedInfo%%</code></TD>\n<TD>\"Your return request was submitted to %s for processing. When it has been processed you will receive an email with more details.\"</td></tr>\n<TR><TD><CODE>%%LNG_ReturnToHomepage%%</code></TD>\n<TD>\"Return to the home page\"</td></tr>\n<TR><TD><CODE>%%LNG_ReviewEmailHint%%</code></TD>\n<TD>\"We promise to never spam you, and just use your email address to identify you as a valid customer.\"</td></tr>\n<TR><TD><CODE>%%LNG_ReviewEnterYourEmail%%</code></TD>\n<TD>\"Your email:\"</td></tr>\n<TR><TD><CODE>%%LNG_ReviewEnterYourName%%</code></TD>\n<TD>\"Enter your name: (optional)\"</td></tr>\n<TR><TD><CODE>%%LNG_ReviewNoEmail%%</code></TD>\n<TD>\"Please enter your email address.\"</td></tr>\n<TR><TD><CODE>%%LNG_ReviewNoRating%%</code></TD>\n<TD>\"Please select a rating.\"</td></tr>\n<TR><TD><CODE>%%LNG_ReviewNoText%%</code></TD>\n<TD>\"Please enter some text for your review.\"</td></tr>\n<TR><TD><CODE>%%LNG_ReviewNoTitle%%</code></TD>\n<TD>\"Please enter a title for your review.\"</td></tr>\n<TR><TD><CODE>%%LNG_ReviewTheContentsOfYourOrder%%</code></TD>\n<TD>\"Please review the contents of your order below and then choose how you'd like to pay for your order.\"</td></tr>\n<TR><TD><CODE>%%LNG_SaleProducts%%</code></TD>\n<TD>\"Products On Sale\"</td></tr>\n<TR><TD><CODE>%%LNG_Save%%</code></TD>\n<TD>\"Save\"</td></tr>\n<TR><TD><CODE>%%LNG_SaveAddress%%</code></TD>\n<TD>\"Save Address\"</td></tr>\n<TR><TD><CODE>%%LNG_SaveAddressInAddressBook%%</code></TD>\n<TD>\"Save this address in my address book\"</td></tr>\n<TR><TD><CODE>%%LNG_SaveMyReview%%</code></TD>\n<TD>\"Save My Review\"</td></tr>\n<TR><TD><CODE>%%LNG_SaveWishList%%</code></TD>\n<TD>\"Save Wish List\"</td></tr>\n<TR><TD><CODE>%%LNG_Search%%</code></TD>\n<TD>\"Search\"</td></tr>\n<TR><TD><CODE>%%LNG_SearchByPrice%%</code></TD>\n<TD>\"Search by Price\"</td></tr>\n<TR><TD><CODE>%%LNG_SearchBySetting%%</code></TD>\n<TD>\"Search by Setting\"</td></tr>\n<TR><TD><CODE>%%LNG_SearchDidNotMatchContent%%</code></TD>\n<TD>\"did not match any news or information.\"</td></tr>\n<TR><TD><CODE>%%LNG_SearchDidNotMatchProduct%%</code></TD>\n<TD>\"did not match any products.\"</td></tr>\n<TR><TD><CODE>%%LNG_SearchedForBrands%%</code></TD>\n<TD>\"Did you mean to browse one of the following brands instead?\"</td></tr>\n<TR><TD><CODE>%%LNG_SearchedForCategories%%</code></TD>\n<TD>\"Did you mean to browse one of the following categories instead?\"</td></tr>\n<TR><TD><CODE>%%LNG_SearchExamples%%</code></TD>\n<TD>\"Examples:\"</td></tr>\n<TR><TD><CODE>%%LNG_SearchFeed%%</code></TD>\n<TD>\"View Results as RSS Feed\"</td></tr>\n<TR><TD><CODE>%%LNG_SearchFilters%%</code></TD>\n<TD>\"Search Filters\"</td></tr>\n<TR><TD><CODE>%%LNG_SearchFilters1%%</code></TD>\n<TD>\"Search filters allow you to specify custom conditions in your search terms. It's similar to performing an advanced search however you do not have to visit the advanced search page first.\"</td></tr>\n<TR><TD><CODE>%%LNG_SearchFilters2%%</code></TD>\n<TD>\"Search filters should be appended to the end of your search terms. Multiple search filters can be separated by a space.\"</td></tr>\n<TR><TD><CODE>%%LNG_SearchFilters3%%</code></TD>\n<TD>\"Supported search filters are listed below.\"</td></tr>\n<TR><TD><CODE>%%LNG_SearchFiltersFeatured%%</code></TD>\n<TD>\"Return featured products only.\"</td></tr>\n<TR><TD><CODE>%%LNG_SearchFiltersFreeShipping%%</code></TD>\n<TD>\"Return products with free shipping.\"</td></tr>\n<TR><TD><CODE>%%LNG_SearchFiltersInStock%%</code></TD>\n<TD>\"Return products that are currently in stock.\"</td></tr>\n<TR><TD><CODE>%%LNG_SearchFiltersPrice%%</code></TD>\n<TD>\"Allows search results to be filtered by price.\"</td></tr>\n<TR><TD><CODE>%%LNG_SearchFiltersRating%%</code></TD>\n<TD>\"Allows search results to be filtered by rating.\"</td></tr>\n<TR><TD><CODE>%%LNG_SearchKeyword%%</code></TD>\n<TD>\"Search Keyword\"</td></tr>\n<TR><TD><CODE>%%LNG_SearchResultsTabContent%%</code></TD>\n<TD>\"News &amp; Information\"</td></tr>\n<TR><TD><CODE>%%LNG_SearchResultsTabProduct%%</code></TD>\n<TD>\"Products\"</td></tr>\n<TR><TD><CODE>%%LNG_SearchSuggestion1%%</code></TD>\n<TD>\"Make sure all words are spelled correctly.\"</td></tr>\n<TR><TD><CODE>%%LNG_SearchSuggestion2%%</code></TD>\n<TD>\"Try different keywords.\"</td></tr>\n<TR><TD><CODE>%%LNG_SearchSuggestion3%%</code></TD>\n<TD>\"Try more general keywords.\"</td></tr>\n<TR><TD><CODE>%%LNG_SearchSuggestions%%</code></TD>\n<TD>\"Suggestions\"</td></tr>\n<TR><TD><CODE>%%LNG_SearchTips%%</code></TD>\n<TD>\"Search Tips\"</td></tr>\n<TR><TD><CODE>%%LNG_SearchTypeNewsItem%%</code></TD>\n<TD>\"News Item\"</td></tr>\n<TR><TD><CODE>%%LNG_SearchTypeWebPage%%</code></TD>\n<TD>\"Web Page\"</td></tr>\n<TR><TD><CODE>%%LNG_SearchYourSearch%%</code></TD>\n<TD>\" Your search for\"</td></tr>\n<TR><TD><CODE>%%LNG_SecureCheckout%%</code></TD>\n<TD>\"Secure Checkout\"</td></tr>\n<TR><TD><CODE>%%LNG_SeeAllBrands%%</code></TD>\n<TD>\"See all brands\"</td></tr>\n<TR><TD><CODE>%%LNG_SelectAWishListToDelete%%</code></TD>\n<TD>\"Please choose at least one wish list to delete.\"</td></tr>\n<TR><TD><CODE>%%LNG_SelectItemsToReorder%%</code></TD>\n<TD>\"Please select one or more items to reorder.\"</td></tr>\n<TR><TD><CODE>%%LNG_SelectItemsToReturn%%</code></TD>\n<TD>\"Which items do you want to return?\"</td></tr>\n<TR><TD><CODE>%%LNG_SelectOneMoreItemsReturn%%</code></TD>\n<TD>\"Please select one or more items to return.\"</td></tr>\n<TR><TD><CODE>%%LNG_SelectReturnReason%%</code></TD>\n<TD>\"Please enter the reason you are returning these item(s).\"</td></tr>\n<TR><TD><CODE>%%LNG_SelectValidGiftCertificateAmount%%</code></TD>\n<TD>\"Please choose a valid amount for this gift certificate.\"</td></tr>\n<TR><TD><CODE>%%LNG_SelectValidGiftCertificateTheme%%</code></TD>\n<TD>\"Please select a theme for your gift certificate.\"</td></tr>\n<TR><TD><CODE>%%LNG_SendAMessage%%</code></TD>\n<TD>\"Send a Message\"</td></tr>\n<TR><TD><CODE>%%LNG_SendForm%%</code></TD>\n<TD>\"Send Form\"</td></tr>\n<TR><TD><CODE>%%LNG_SendMessage%%</code></TD>\n<TD>\"Send Message\"</td></tr>\n<TR><TD><CODE>%%LNG_Shared%%</code></TD>\n<TD>\"Shared\"</td></tr>\n<TR><TD><CODE>%%LNG_ShipAllItemsToDifferentAddresses%%</code></TD>\n<TD>\"Ship items to different addresses\"</td></tr>\n<TR><TD><CODE>%%LNG_ShipAllItemsToOneAddress%%</code></TD>\n<TD>\"Ship all items to the same address\"</td></tr>\n<TR><TD><CODE>%%LNG_ShipmentOrderDate%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_ShipmentTrackingNumbersLinks%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_ShippedItems%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_ShippedTo%%</code></TD>\n<TD>\"Shipped to\"</td></tr>    \n<TR><TD><CODE>%%LNG_Shipping%%</code></TD>\n<TD>\"Shipping\"</td></tr>\n<TR><TD><CODE>%%LNG_ShippingAddress%%</code></TD>\n<TD>\"Shipping Address\"</td></tr>\n<TR><TD><CODE>%%LNG_ShippingDetails%%</code></TD>\n<TD>\"Shipping Details\"</td></tr>\n<TR><TD><CODE>%%LNG_ShippingMethod%%</code></TD>\n<TD>\"Shipping Method\"</td></tr>\n<TR><TD><CODE>%%LNG_ShippingMethodCombined%%</code></TD>\n<TD>\"Multiple Shipping Methods\"</td></tr>\n<TR><TD><CODE>%%LNG_ShippingProvider%%</code></TD>\n<TD>\"Choose a Shipping Method\"</td></tr>\n<TR><TD><CODE>%%LNG_ShipTo%%</code></TD>\n<TD>\"Shipping Details\"</td></tr>\n<TR><TD><CODE>%%LNG_ShipToTheseAddresses%%</code></TD>\n<TD>\"Ship to These Addresses\"</td></tr>\n<TR><TD><CODE>%%LNG_ShipToThisAddress%%</code></TD>\n<TD>\"Ship to this address\"</td></tr>\n<TR><TD><CODE>%%LNG_ShopByPrice%%</code></TD>\n<TD>\"Shop by Price\"</td></tr>\n<TR><TD><CODE>%%LNG_ShowingReviews%%</code></TD>\n<TD>\"Showing reviews\"</td></tr>\n<TR><TD><CODE>%%LNG_ShowSearchForm%%</code></TD>\n<TD>\"Show Search Form\"</td></tr>\n<TR><TD><CODE>%%LNG_SideCartTotalCost%%</code></TD>\n<TD>\"Your sub total is <strong>%s</strong>.\"</td></tr>\n<TR><TD><CODE>%%LNG_Sitemap%%</code></TD>\n<TD>\"Sitemap\"</td></tr>\n<TR><TD><CODE>%%LNG_SitemapIntroduction%%</code></TD>\n<TD>\"A sitemap lists all pages available on a website. The sitemap for web pages on %%GLOBAL_StoreName%% is shown below:\"</td></tr>\n<TR><TD><CODE>%%LNG_SitemapSeeAll%%</code></TD>\n<TD>\"See All\"</td></tr>\n<TR><TD><CODE>%%LNG_Size%%</code></TD>\n<TD>\"Maximum Size\"</td></tr>\n<TR><TD><CODE>%%LNG_SKU%%</code></TD>\n<TD>\"SKU\"</td></tr>\n<TR><TD><CODE>%%LNG_SomethingWentWrong%%</code></TD>\n<TD>\"Something Went Wrong...\"</td></tr>\n<TR><TD><CODE>%%LNG_SortBy%%</code></TD>\n<TD>\"Sort by\"</td></tr>\n<TR><TD><CODE>%%LNG_SortByProductBrand%%</code></TD>\n<TD>\"Sort products by brand\"</td></tr>\n<TR><TD><CODE>%%LNG_SortByProductName%%</code></TD>\n<TD>\"Sort products by name\"</td></tr>\n<TR><TD><CODE>%%LNG_SortByProductPrice%%</code></TD>\n<TD>\"Sort products by price\"</td></tr>\n<TR><TD><CODE>%%LNG_SortByProductRating%%</code></TD>\n<TD>\"Sort products by average rating\"</td></tr>\n<TR><TD><CODE>%%LNG_StateProvince%%</code></TD>\n<TD>\"State/Province\"</td></tr>\n<TR><TD><CODE>%%LNG_StatusOfReturnChanged%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_StoreCredit%%</code></TD>\n<TD>\"Store Credit\"</td></tr>\n<TR><TD><CODE>%%LNG_StoreCreditBalance%%</code></TD>\n<TD>\"Your store credit balance:\"</td></tr>\n<TR><TD><CODE>%%LNG_SubmitNewReturn%%</code></TD>\n<TD>\"Return Item(s) from Order #%s\"</td></tr>\n<TR><TD><CODE>%%LNG_SubmitReturn%%</code></TD>\n<TD>\"Submit Return Request\"</td></tr>\n<TR><TD><CODE>%%LNG_Subtotal%%</code></TD>\n<TD>\"Subtotal\"</td></tr>\n<TR><TD><CODE>%%LNG_SuggestiveCartIntro%%</code></TD>\n<TD>\"We found some products that you might also be interested in.\"</td></tr>\n<TR><TD><CODE>%%LNG_Summary%%</code></TD>\n<TD>\"Summary\"</td></tr>\n<TR><TD><CODE>%%LNG_SyndicateFeaturedProducts%%</code></TD>\n<TD>\"Featured Products\"</td></tr>\n<TR><TD><CODE>%%LNG_SyndicateFeaturedProductsAtom%%</code></TD>\n<TD>\"Latest %s Featured Products (Atom)\"</td></tr>\n<TR><TD><CODE>%%LNG_SyndicateFeaturedProductsIntro%%</code></TD>\n<TD>\"The featured products feed contains the latest %s featured products.\"</td></tr>\n<TR><TD><CODE>%%LNG_SyndicateFeaturedProductsRSS%%</code></TD>\n<TD>\"Latest %s Featured Products (RSS)\"</td></tr>\n<TR><TD><CODE>%%LNG_SyndicateIntro%%</code></TD>\n<TD>\"RSS feeds are used for syndicating regularly changing content on a web site, including this one. You can open an RSS feed using an &lt;a href='http://en.wikipedia.org/wiki/Aggregator'&gt;RSS reader&lt;/a&gt; and use it to see if there is any new content on this site or you can set up a server-side script to parse the feed and display it on your web site.\"</td></tr>\n<TR><TD><CODE>%%LNG_SyndicateNewProducts%%</code></TD>\n<TD>\"New Products\"</td></tr>\n<TR><TD><CODE>%%LNG_SyndicateNewProductsAtom%%</code></TD>\n<TD>\"Latest %s New Products (Atom)\"</td></tr>\n<TR><TD><CODE>%%LNG_SyndicateNewProductsIntro%%</code></TD>\n<TD>\"The latest products feed contains the latest %s products added to %s.\"</td></tr>\n<TR><TD><CODE>%%LNG_SyndicateNewProductsRSS%%</code></TD>\n<TD>\"Latest %s New Products (RSS)\"</td></tr>\n<TR><TD><CODE>%%LNG_SyndicateNews%%</code></TD>\n<TD>\"Recent News\"</td></tr>\n<TR><TD><CODE>%%LNG_SyndicateNewsAtom%%</code></TD>\n<TD>\"Latest %s News items (Atom)\"</td></tr>\n<TR><TD><CODE>%%LNG_SyndicateNewsIntro%%</code></TD>\n<TD>\"The recent news feed contains the latest %s news items published on %s.\"</td></tr>\n<TR><TD><CODE>%%LNG_SyndicateNewsRSS%%</code></TD>\n<TD>\"Latest %s New Products (RSS)\"</td></tr>\n<TR><TD><CODE>%%LNG_SyndicatePopularProducts%%</code></TD>\n<TD>\"Popular Products\"</td></tr>\n<TR><TD><CODE>%%LNG_SyndicatePopularProductsAtom%%</code></TD>\n<TD>\"Latest %s Popular Products (Atom)\"</td></tr>\n<TR><TD><CODE>%%LNG_SyndicatePopularProductsIntro%%</code></TD>\n<TD>\"The popular products feed contains the top %s most popular products on %s as rated by users.\"</td></tr>\n<TR><TD><CODE>%%LNG_SyndicatePopularProductsRSS%%</code></TD>\n<TD>\"Latest %s Popular Products (RSS)\"</td></tr>\n<TR><TD><CODE>%%LNG_SyndicateSearches%%</code></TD>\n<TD>\"Product Searches\"</td></tr>\n<TR><TD><CODE>%%LNG_SyndicateSearchesIntro%%</code></TD>\n<TD>\"Product search feeds allow you to save your custom product searches as syndication feed that will always update when there are new results.\"</td></tr>\n<TR><TD><CODE>%%LNG_SyndicateSearchesIntro2%%</code></TD>\n<TD>\"To create a product search feed, perform a standard search on %s and at the bottom of the page click on one of the syndication options.\"</td></tr>\n<TR><TD><CODE>%%LNG_TermsAndConditions%%</code></TD>\n<TD>\"Terms And Conditions\"</td></tr>\n<TR><TD><CODE>%%LNG_ThanksForRegisteringAt%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_ThanksForRegisteringAtIntro%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_ThanksForRegisteringEmailHelp%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_ThanksForRegisteringEmailLogin%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_ThanksForRegisteringEmailLogin%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_ThanksForYourOrder%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_ThisIsAnAutomatedMessage%%</code></TD>\n<TD>\"*** This is an automated message, please do not reply ***\"</td></tr>\n<TR><TD><CODE>%%LNG_ThisOrderIsMarkedAs%%</code></TD>\n<TD>\"This order is marked as\"</td></tr>\n<TR><TD><CODE>%%LNG_TickArgeeTermsAndConditions%%</code></TD>\n<TD>\"Please agree to the terms and conditions by ticking the check box to place your order.\"</td></tr>\n<TR><TD><CODE>%%LNG_To%%</code></TD>\n<TD>\"to\"</td></tr>\n<TR><TD><CODE>%%LNG_Total%%</code></TD>\n<TD>\"Total\"</td></tr>\n<TR><TD><CODE>%%LNG_ToYourWishList%%</code></TD>\n<TD>\"to your wish list.\"</td></tr>\n<TR><TD><CODE>%%LNG_TrackingLink%%</code></TD>\n<TD>\"Tracking Link\"</td></tr>\n<TR><TD><CODE>%%LNG_TrackingNumber%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_TransactionType%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_TryAgain%%</code></TD>\n<TD>\"Try again.\"</td></tr>\n<TR><TD><CODE>%%LNG_Type%%</code></TD>\n<TD>\"Type\"</td></tr>\n<TR><TD><CODE>%%LNG_units%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_Update%%</code></TD>\n<TD>\"Update\"</td></tr>\n<TR><TD><CODE>%%LNG_UpdateMyDetails%%</code></TD>\n<TD>\"Update My Details\"</td></tr>\n<TR><TD><CODE>%%LNG_UpdateShippingCost%%</code></TD>\n<TD>\"Update Shipping Cost\"</td></tr>\n<TR><TD><CODE>%%LNG_ValutecNumber%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_VariationSoldOutMessage%%</code></TD>\n<TD>\"The selected product combination is currently unavailable.\"</td></tr>\n<TR><TD><CODE>%%LNG_ViewCart%%</code></TD>\n<TD>\"View Cart\"</td></tr>\n<TR><TD><CODE>%%LNG_ViewEditCart%%</code></TD>\n<TD>\"View or edit your cart\"</td></tr>\n<TR><TD><CODE>%%LNG_ViewMessages%%</code></TD>\n<TD>\"View Messages\"</td></tr>\n<TR><TD><CODE>%%LNG_ViewMessagesDescription%%</code></TD>\n<TD>\"You can receive and send messages to %s about your order. When a message is sent regarding one of your orders, you will receive an email notification.\"</td></tr>\n<TR><TD><CODE>%%LNG_ViewOrder%%</code></TD>\n<TD>\"View Order Details\"</td></tr>\n<TR><TD><CODE>%%LNG_ViewOrderStatusDescription%%</code></TD>\n<TD>\"See the status of every order you've placed at %s, including whether it has been shipped, and if so an optional tracking number.\"</td></tr>\n<TR><TD><CODE>%%LNG_ViewYourOrderStatus%%</code></TD>\n<TD>\"View Order Status\"</td></tr>\n<TR><TD><CODE>%%LNG_Weight%%</code></TD>\n<TD>\"Weight\"</td></tr>\n<TR><td><code>%%LNG_WhatsThis%%</code></TD>\n<TD>\"What's This?\"</td></tr>\n<TR><TD><CODE>%%LNG_WhyReturningItems%%</code></TD>\n<TD>\"Why are you returning these items?\"</td></tr>\n<TR><TD><CODE>%%LNG_WishListCancel%%</code></TD>\n<TD>\"Are you sure you want to cancel? Any unsaved changes will be lost.\"</td></tr>\n<TR><TD><CODE>%%LNG_WishListDelete%%</code></TD>\n<TD>\"Delete Selected\"</td></tr>\n<TR><TD><CODE>%%LNG_WishListName%%</code></TD>\n<TD>\"Wish List Name\"</td></tr>\n<TR><TD><CODE>%%LNG_WishLists%%</code></TD>\n<TD>\"Wish Lists\"</td></tr>\n<TR><TD><CODE>%%LNG_WishListsDescription%%</code></TD>\n<TD>\"See a list of items in your wish list and optionally add each item to your shopping cart for purchase.\"</td></tr>\n<TR><TD><CODE>%%LNG_WouldLikeToReceiveNewsletter%%</code></TD>\n<TD>\"I'd like to receive your newsletter\"</td></tr>\n<TR><TD><CODE>%%LNG_WrapItemsDifferently%%</code></TD>\n<TD>\"I'd like to gift wrap each item separately\"</td></tr>\n<TR><TD><CODE>%%LNG_WrapItemsTheSame%%</code></TD>\n<TD>\"I'd like to wrap each of this item using the same wrapping options\"</td></tr>\n<TR><TD><CODE>%%LNG_WriteAHeadline%%</code></TD>\n<TD>\"Write a headline for your review here:\"</td></tr>\n<TR><TD><CODE>%%LNG_WriteYourOwnReview%%</code></TD>\n<TD>\"Write Your Own Review\"</td></tr>\n<TR><TD><CODE>%%LNG_WriteYourReview%%</code></TD>\n<TD>\"Write your review here:\"</td></tr>\n<TR><TD><CODE>%%LNG_xOn%%</code></TD>\n<TD>\"on\"</td></tr>\n<TR><TD><CODE>%%LNG_YesShareWishList%%</code></TD>\n<TD>\"I want to be able to share this wish list\"</td></tr>\n<TR><TD><CODE>%%LNG_YouMayAlsoLike%%</code></TD>\n<TD>\"You May Also Like...\"</td></tr>\n<TR><td><code>%%LNG_YourAccount%%</code></TD>\n<TD>\"My Account\"</td></tr>\n<TR><TD><CODE>%%LNG_YourAccountDetails%%</code></TD>\n<TD>\"Your Account Details\"</td></tr>\n<TR><TD><CODE>%%LNG_YourAccountHelpIntro%%</code></TD>\n<TD>\"From this page you can view your orders, update your account details and more. Choose an option from the menu on the right or learn more about each option below:\"</td></tr>\n<TR><TD><CODE>%%LNG_YourAddressBook%%</code></TD>\n<TD>\"Your Address Book\"</td></tr>\n<TR><TD><CODE>%%LNG_YourCartContains%%</code></TD>\n<TD>\"Your cart contains\"</td></tr>\n<TR><TD><CODE>%%LNG_YourComments%%</code></TD>\n<TD>\"Your Comments\"</td></tr>\n<TR><TD><CODE>%%LNG_YouRecentlyViewed%%</code></TD>\n<TD>\"You Recently Viewed...\"</td></tr>\n<TR><TD><CODE>%%LNG_YourOrder%%</code></TD>\n<TD>\"Your Order\"</td></tr>\n<TR><TD><CODE>%%LNG_YourOrderContainsTheFollowingDownloadableItems%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_YourOrderContainsTheFollowingItems%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_YourOrderContainsTheFollowingItems2%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_YourOrderDetailsBelow%%</code></TD>\n<TD>\"Your order details are shown below.\"</td></tr>\n<TR><TD><CODE>%%LNG_YourOrderIDIs%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_YourOrderNumber%%</code></TD>\n<TD>.</td></tr>\n<TR><TD><CODE>%%LNG_YourOrders%%</code></TD>\n<TD>\"Your Completed Orders\"</td></tr>\n<TR><TD><CODE>%%LNG_YourOrderTotal%%</code></TD>\n<TD>\"Your order total cost:\"</td></tr>\n<TR><TD><CODE>%%LNG_YourOrderTotalIs%%</code></TD>\n<TD>\"The outstanding balance of your order is\"</td></tr>\n<TR><TD><CODE>%%LNG_YourReturns%%</code></TD>\n<TD>\"Your Return Requests\"</td></tr>\n<TR><TD><CODE>%%LNG_YourShoppingCart%%</code></TD>\n<TD>\"Your Shopping Cart\"</td></tr>\n<TR><TD><CODE>%%LNG_ZipPostcode%%</code></TD>\n<TD>\"Zip/Postcode\"</td></tr>\n</tbody>\n</table>"
              - title: Email Templates
                route:
                  path: /blueprint-email-templates
                data:
                  blocks:
                    - type: html
                      data: "<h1>Email Templates</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3>On This Page</h3>\n\t<ul>\n\t\t<li><a href=\"#gift-certificate-email-template\">Gift Certificate Email Template</a></li>\n\t\t<li><a href=\"#abandoned-cart-email-template\">Abandoned Cart Email Template</a></li>\n    <li><a href=\"#invoice-email-template\">Invoice Email Template</a></li>\n    <li><a href=\"#order-status-email-template\">Order Status Email Template</a></li>\n    <li><a href=\"#return-confirmation-email-template\">Return Confirmation Email Template</a></li>\n\t\t</ul>\n</div>"
                    - type: text
                      data: >+
                        The following variables are available within individual
                        BigCommerce email template:

                    - type: text
                      data: |-
                        ## Gift Certificate Email Template 

                        Sent to the recipient of a gift certificate.

                        ### Available Variables 
                        |||
                        |---|---|
                        | %%LNG_GiftCertificateEmailYouHaveReceived%%
                        | %%GLOBAL_StoreName%%
                        | %%LNG_Dear%%
                        | %%GLOBAL_ToName%%
                        | %%GLOBAL_Intro%%
                        | %%GLOBAL_ExpiryInfo%%
                        | %%LNG_GiftCertificateEmailInstructions%%
                        | %%LNG_GiftCertificateEmailAttached%%
                        | %%LNG_GiftCertificateEmailWarning%%
                        | %%GLOBAL_EmailFooter%%
                      header:
                        anchor: gift-certificate-email-template
                    - type: text
                      data: '---'
                    - type: text
                      data: |-
                        ## Abandoned Cart Email Template 

                        Sent when a customer abandons a shopping cart.

                        ### Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_AC_EmailBody%%
                        | %%GLOBAL_EmailFooter%%
                        | %%GLOBAL_AC_UnsubscribeLink%%
                        | %%LNG_AC_EmailUnsubscribe%%
                        | %%LNG_AC_EmailUnsubscribeSuffix%%
                      header:
                        anchor: abandoned-cart-email-template
                    - type: text
                      data: '---'
                    - type: text
                      data: |
                        ## Invoice Email Template 

                        Sent when a customer places an order.

                        ### Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_NoPaymentTaken%%
                        | %%LNG_ThanksForYourOrder%%
                        | %%GLOBAL_IMG_PATH%%
                        | %%LNG_YourOrderIDIs%%
                        | %%GLOBAL_OrderNumber%%
                        | %%GLOBAL_ViewOrderStatusMsg%%
                        | %%GLOBAL_PendingPaymentNotice%%
                        | %%LNG_ShippingAddress%%
                        | %%GLOBAL_ShippingAddress%%</div>
                        | %%GLOBAL_HideShippingEmail%%"
                        | %%LNG_Email%%
                        | %%GLOBAL_ShippingEmail%%
                        | %%LNG_BillingAddress%%
                        | %%GLOBAL_BillingAddress%%
                        | %%GLOBAL_HideBillingEmail%%
                        | %%LNG_Email%%
                        | %%GLOBAL_BillingEmail%%
                        | %%GLOBAL_PendingPaymentDetails%%
                        | %%GLOBAL_OrderCommentBlock%%
                        | %%LNG_YourOrderContainsTheFollowingItems%%
                        | %%GLOBAL_CartItemColumns%%
                        | %%SNIPPET_CartItems%%
                        | %%SNIPPET_TotalRows%%
                        | %%SNIPPET_PaymentMethod%%
                        | %%GLOBAL_EmailFooter%%
                        | %%GLOBAL_ProductThumbImageURL%%
                      header:
                        anchor: invoice-email-template
                    - type: text
                      data: '---'
                    - type: text
                      data: |-
                        ## Order Status Email Template 

                        Sent when an order's status is changed.

                        ### Available Variables 
                        |||
                        |---|---|
                        | %%LNG_OrderStatusChanged%% |
                        | %%GLOBAL_OrderStatusChangedHi%% |
                        | %%LNG_OrderStatusChangedIntro%% |
                        | %%GLOBAL_OrderNumberStatusChangedTo%% |
                        | %%LNG_OrderDetails%% |
                        | %%LNG_OrderStatusChangedOrderTotal%% |
                        | %%GLOBAL_OrderTotal%% |
                        | %%LNG_OrderStatusChangedDatePlaced%% |
                        | %%GLOBAL_DatePlaced%% |
                        | %%LNG_OrderStatusChangedPaymentMethod%% |
                        | %%GLOBAL_PaymentMethod%% |
                        | %%LNG_ShipmentTrackingNumbersLinks%% |
                        | %%GLOBAL_TrackingLinkList%% |
                        | %%GLOBAL_ViewOrderStatusLink%% |
                        | %%GLOBAL_EmailFooter%% |
                      header:
                        anchor: order-status-email-template
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Return Confirmation Email Template 


                        Sent when a customer submits a return request.


                        ### Available Variables 

                        |||

                        |---|---|

                        | %%LNG_NotificationConfirmationForReturn%% |

                        | %%GLOBAL_OrderId%% |

                        | %%GLOBAL_IMG_PATH%% |

                        | %%LNG_NotificationAReturnSummaryIsShownBelow%% |

                        | %%GLOBAL_ShopPath%% |

                        | %%LNG_ClickHere%% |

                        | %%LNG_ReturnReason%% |

                        | %%GLOBAL_ReturnReason%% |

                        | %%GLOBAL_HideReturnAction%% |

                        | %%LNG_ReturnAction%% |

                        | %%GLOBAL_ReturnAction%% |

                        | %%LNG_YourComments%% |

                        | %%GLOBAL_ReturnComments%% |

                        |
                        %%LNG_NotificationYourReturnContainsTheFollowingItems%%
                        |

                        | %%LNG_ReturnItems%% |

                        | %%LNG_Qty%% |

                        | %%SNIPPET_ReturnItems%% |

                        | %%GLOBAL_EmailFooter%% |
                      header:
                        anchor: return-confirmation-email-template
              - title: Checkout Styling
                route:
                  path: /checkout-styling
                data:
                  blocks:
                    - type: html
                      data: "<h1>Checkout Styling</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3>On This Page</h3>\n\t<ul>\n\t\t<li><a href=\"#customization-options-restrictions\">Customization Options/Restrictions</a></li>\n\t\t<li><a href=\"#configuring-desktop-viewport\">Configuring the Desktop Viewport</a></li>\n    <li><a href=\"#deploying-custom-css\">Deploying Custom CSS</a></li>\n    <li><a href=\"#classes-provided\">Classes Provided</a></li>\n    <li><a href=\"#css-skeleton\">CSS Skeleton</a></li>\n\t\t</ul>\n</div>"
                    - type: text
                      data: >-
                        To support stores that enable BigCommerce's Optimized
                        One-Page Checkout feature, you can customize the
                        Optimized Checkout page's styling within your theme. You
                        do this by adding custom CSS to the
                        `optimized-checkout-webdav.css` template file that we
                        provide. You can copy the CSS [below](#css-skeleton).
                    - type: callout
                      data:
                        type: success
                        body: >-
                          Although you will see references to "Stencil"
                          functions throughout this template file's CSS, this
                          version of the CSS is designed to be fully compatible
                          with Blueprint themes.
                        title: Function Names
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Customization Options/Restrictions 


                        As a theme developer, you are free to change classes'
                        contents – but do not nest elements, nor change any
                        class names. 


                        The structure and class naming are reserved because each
                        class here maps to multiple Optimized Checkout elements.
                        So renaming would break updates available in future
                        Optimized Checkout enhancements.
                      header:
                        anchor: customization-options-restrictions
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Configuring the Desktop Viewport 


                        Within the CSS file, to set up Optimized Checkout's
                        responsive features, you should configure the following
                        breakpoint to define your preferred desktop viewport
                        size:
                      header:
                        anchor: configuring-desktop-viewport
                    - type: code
                      data: >-

                        // TODO:

                        // Configure media query to be 'desktop' breakpoint size

                        //
                        -----------------------------------------------------------------------------

                        @media (min-width: 801px) {
                            text-align: stencilString("optimizedCheckout-logo-position");
                        }
                      config:
                        mode: css
                    - type: text
                      data: >
                        For other customization options, please see the class
                        descriptions [below](#classes-provided).
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Deploying Custom CSS 


                        To deploy your custom CSS to a BigCommerce store, you
                        will need to upload your `optimized-checkout-webdav.css`
                        file (once customized) via WebDAV. 


                        For a general overview of the process, please see [this
                        support
                        article](https://support.bigcommerce.com/articles/Public/Accessing-and-Customizing-Template-Files/).
                        Place your customized `optimized-checkout-webdav.css`
                        file directly within WebDAV's `/content/` folder.


                        For details on interacting with WebDAV, please see [this
                        article](https://support.bigcommerce.com/articles/Public/Connecting-to-WebDav).
                      header:
                        anchor: deploying-custom-css
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Classes Provided 


                        Below is a summary of the classes provided in the
                        template CSS, with corresponding page elements that they
                        style. (These class names and mappings are subject to
                        change, so please see the inline comments embedded in
                        the file itself.)
                      header:
                        anchor: classes-provided
                    - type: text
                      data: >-
                        | Class | Styles This Optimized One-Page Checkout
                        Element: |

                        |---|---|

                        | .optimizedCheckout-header | Page header. |

                        | .optimizedCheckout-headingPrimary | Top-level
                        headings. |

                        | .optimizedCheckout-headingSecondary | Certain
                        lower-level elements, such as descriptions of cart
                        items. |

                        | .optimizedCheckout-overlay | Shipping Method box. |

                        | .optimizedCheckout-contentPrimary | Body text in the
                        desktop `Order Summary`/`Order Confirmation` (cart
                        contents); drop-down-list items; and text that
                        summarizes completed steps. |

                        | .optimizedCheckout-contentSecondary | Text labels on
                        check boxes, and lower-level text in the desktop Order
                        Summary. |

                        | .optimizedCheckout-button--primary | `CONTINUE` button
                        and final `PAY` button. |

                        | .optimizedCheckout-button--secondary | `Edit` buttons.

                        | .optimizedCheckout-orderSummary | Colors in the `Order
                        Summary` mobile drawer/modal.

                        | .optimizedCheckout-step | Large step-number indicators
                        on the page's left side. |

                        | .optimizedCheckout-form-label | Styles form fields
                        like `Email Address` – the field's text-label color. | 

                        | .optimizedCheckout-form-input | Styles form fields
                        like `Email Address` – the entry box's background and
                        border colors. |
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## CSS Skeleton 


                        You can copy and modify the template
                        `optimized-checkout-webdav.css` file's current contents
                        directly from this documentation, below: 
                      header:
                        anchor: css-skeleton
                    - type: code
                      data: >-
                        /* 

                        //
                        =============================================================================

                        // Stencil Checkout - Customize the Optimized
                        Single-Page Checkout experience

                        //
                        =============================================================================

                        */


                        /*

                        //
                        =============================================================================

                        //

                        // IMPORTANT DISCLAIMER

                        // Please do not nest elements within class selectors,
                        and do not use class selectors other than those given
                        below.

                        // Future support is guaranteed only if class selectors'
                        structure and naming are left unchanged.

                        //

                        //
                        =============================================================================

                        */



                        /*

                        // Header Section

                        // Background, Logo Position

                        //
                        -----------------------------------------------------------------------------

                        */


                        .optimizedCheckout-header {
                            background-color: stencilColor("optimizedCheckout-header-backgroundColor");
                            background-image: url(stencilImage('optimizedCheckout-backgroundImage', 'optimizedCheckout-backgroundImage-size'));
                            background-size: cover;
                        }


                        /*

                        // TODO:

                        // Configure media query to be 'desktop' breakpoint size

                        //
                        -----------------------------------------------------------------------------

                        */


                        @media (min-width: 801px) {
                            .optimizedCheckout-header {
                                text-align: stencilString("optimizedCheckout-logo-position");
                            }
                        }


                        /*

                        // Primary and Secondary Headings

                        // Text Color & Typography

                        //

                        // .optimizedCheckout-headingPrimary styles top-level
                        headings.

                        //

                        // .optimizedCheckout-headingSecondary styles certain
                        lower-level elements, such as descriptions of cart
                        items.

                        //
                        -----------------------------------------------------------------------------

                        */


                        .optimizedCheckout-headingPrimary {
                            color: stencilColor("optimizedCheckout-headingPrimary-color");
                            font-family: stencilFontFamily("optimizedCheckout-headingPrimary-font"), Arial, Helvetica, sans-serif;
                            font-weight: stencilFontWeight("optimizedCheckout-headingPrimary-font");
                        }


                        .optimizedCheckout-headingSecondary {
                            color: stencilColor("optimizedCheckout-headingSecondary-color");
                            font-family: stencilFontFamily("optimizedCheckout-headingSecondary-font"), Arial, Helvetica, sans-serif;
                            font-weight: stencilFontWeight("optimizedCheckout-headingSecondary-font");
                        }


                        /*

                        // Body

                        // Background & Shipping Method Overlay

                        //
                        -----------------------------------------------------------------------------

                        */


                        body {
                            background-color: stencilColor("optimizedCheckout-body-backgroundColor");
                        }


                        .optimizedCheckout-overlay {
                            background-color: stencilColor("optimizedCheckout-body-backgroundColor");
                        }


                        /*

                        // Primary & Secondary Content

                        // Text Color & Typography

                        //

                        // .optimizedCheckout-contentPrimary styles body text in
                        the Order Summary/Order Confirmation; 

                        // drop-down-list items; and text summarizing completed
                        steps.

                        //

                        // .optimizedCheckout-contentSecondary styles check
                        boxes' text labels, 

                        // and lower-level text in the Order Summary.

                        //
                        -----------------------------------------------------------------------------

                        */


                        .optimizedCheckout-contentPrimary {
                            color: stencilColor("optimizedCheckout-contentPrimary-color");
                            font-family: stencilFontFamily("optimizedCheckout-contentPrimary-font"), Arial, Helvetica, sans-serif;
                            font-weight: stencilFontWeight("optimizedCheckout-contentPrimary-font");
                        }


                        .optimizedCheckout-contentSecondary {
                            color: stencilColor("optimizedCheckout-contentSecondary-color");
                            font-family: stencilFontFamily("optimizedCheckout-contentSecondary-font"), Arial, Helvetica, sans-serif;
                            font-weight: stencilFontWeight("optimizedCheckout-contentSecondary-font");
                        }


                        /*

                        // Primary Button

                        // Background & Border & Text Color & Typography

                        //

                        // Styles the CONTINUE button for each step, & the final
                        confirmation button.

                        //
                        -----------------------------------------------------------------------------

                        */


                        .optimizedCheckout-buttonPrimary {
                            background-color: stencilColor("optimizedCheckout-buttonPrimary-backgroundColor");
                            border-color: stencilColor("optimizedCheckout-buttonPrimary-borderColor");
                            color: stencilColor("optimizedCheckout-buttonPrimary-color");
                            font-family: stencilFontFamily("optimizedCheckout-buttonPrimary-font"), Arial, Helvetica, sans-serif;
                            font-weight: stencilFontWeight("optimizedCheckout-buttonPrimary-font");
                        }


                        .optimizedCheckout-buttonPrimary:focus,

                        .optimizedCheckout-buttonPrimary:hover {
                            background-color: stencilColor("optimizedCheckout-buttonPrimary-backgroundColorHover");
                            border-color: stencilColor("optimizedCheckout-buttonPrimary-borderColorHover");
                            color: stencilColor("optimizedCheckout-buttonPrimary-colorHover");
                        }


                        .optimizedCheckout-buttonPrimary:active {
                            background-color: stencilColor("optimizedCheckout-buttonPrimary-backgroundColorActive");
                            border-color: stencilColor("optimizedCheckout-buttonPrimary-borderColorActive");
                            color: stencilColor("optimizedCheckout-buttonPrimary-colorActive");
                        }


                        /*

                        // Secondary Button

                        // Background & Border & Text Color & Typography

                        //

                        // Styles the EDIT button for each step.

                        //
                        -----------------------------------------------------------------------------

                        */


                        .optimizedCheckout-buttonSecondary {
                            background-color: stencilColor("optimizedCheckout-buttonSecondary-backgroundColor");
                            border-color: stencilColor("optimizedCheckout-buttonSecondary-borderColor");
                            color: stencilColor("optimizedCheckout-buttonSecondary-color");
                            font-family: stencilFontFamily("optimizedCheckout-buttonSecondary-font"), Arial, Helvetica, sans-serif;
                            font-weight: stencilFontWeight("optimizedCheckout-buttonSecondary-font");
                        }


                        /*

                        // Links

                        // Text Color & Typography

                        //
                        -----------------------------------------------------------------------------

                        */


                        a {
                            color: stencilColor("optimizedCheckout-link-color");
                            font-family: stencilFontFamily("optimizedCheckout-link-font"), Arial, Helvetica, sans-serif;
                            font-weight: stencilFontWeight("optimizedCheckout-link-font");
                        }


                        /*

                        // Order Summary (Mobile Drawer & Modal)

                        // Background

                        //
                        -----------------------------------------------------------------------------

                        */


                        .optimizedCheckout-orderSummary {
                            background-color: stencilColor("optimizedCheckout-orderSummary-backgroundColor");
                        }


                        /*

                        // Checkout Steps

                        // Background & Text Color

                        //

                        // Styles the large step-number indicators on the page's
                        left side.

                        //
                        -----------------------------------------------------------------------------

                        */


                        .optimizedCheckout-step {
                            background-color: stencilColor("optimizedCheckout-step-backgroundColor");
                        }


                        .optimizedCheckout-step::before {
                            color: stencilColor("optimizedCheckout-step-text");
                        }


                        .optimizedCheckout-step svg {
                            fill: stencilColor("optimizedCheckout-step-text");
                        }


                        /*

                        // Form Labels

                        // Text Color

                        //

                        // Styles text labels on form fields.

                        //
                        -----------------------------------------------------------------------------

                        */


                        .optimizedCheckout-form-label {
                            color: stencilColor("optimizedCheckout-form-text");
                        }


                        /*

                        // Form Input

                        // Background & Border Color

                        //

                        // Styles form fields.

                        //
                        -----------------------------------------------------------------------------

                        */


                        .optimizedCheckout-form-input {
                            background-color: stencilString("optimizedCheckout-formField-backgroundColor");
                            border-color: stencilColor("optimizedCheckout-formField-borderColor");
                        }
                      config:
                        mode: css
        - title: Blueprint Reference
          route:
            path: /blueprint-reference
          data:
            children:
              - title: Layouts
                route:
                  path: /blueprint-layouts
                data:
                  blocks:
                    - type: text
                      data: >-
                        # 403 Layout 


                        `403.html`


                        Shown when a customer does not have the permissions
                        necessary to view a particular category, product or web
                        page.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideShopByBrand%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.Footer%% |


                        ## Available Variables 


                        |||

                        |---|---|

                        | %%GLOBAL_Contact%% |


                        # 404 Layout 


                        `404.html`


                        Shown when a customer accesses an invalid URL (such as
                        an old removed product) or there is a typo in the URL
                        they’re viewing.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideShopByBrand%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.Footer%% |
                    - type: text
                      data: >-
                        # Account Addressbook Layout 


                        `account_addressbook.html`


                        A list of shipping addresses (found under the My Account
                        > Address Book menu) that the customer currently has as
                        well as edit/remove links.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideNewProducts%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.ChooseShippingAddress%% |

                        | %%Panel.SideAccountMenu%% |

                        | %%Panel.Footer%% |


                        # Account Downloaditem Layout 


                        `account_downloaditem.html`


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideNewProducts%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.AccountDownloadItemsBreadcrumb%% |

                        | %%Panel.AccountDownloadItems%% |

                        | %%Panel.SideAccountMenu%% |

                        | %%Panel.Footer%% |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_DownloadTitle%% |


                        # Account Inbox Layout 


                        `account_inbox.html`


                        The list of order messages the customer has associated
                        with any of their past orders and the “new order
                        message” form for submitting a new order message.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideNewProducts%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.AccountInbox%% |

                        | %%Panel.SideAccountMenu%% |

                        | %%Panel.Footer%% |


                        # Account New Return Layout 


                        `account_new_return.html`


                        The new return request/submission page.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideNewProducts%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.AccountNewReturnBreadcrumb%% |

                        | %%Panel.AccountNewReturnProducts%% |

                        | %%Panel.AccountNewReturnInfo%% |

                        | %%Panel.SideAccountMenu%% |

                        | %%Panel.Footer%% |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_OrderId%% |

                        | %%GLOBAL_HideErrorMessage%% |

                        | %%GLOBAL_ErrorMessage%% |


                        # Account Order Layout 


                        `account_order.html`


                        Shown when a customer is viewing the details of a past
                        order they’ve placed on the store.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideNewProducts%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.AccountOrder%% |

                        | %%Panel.AccountOrderLinks%% |

                        | %%Panel.SideAccountMenu%% |

                        | %%Panel.Footer%% |


                        # Account Orders Layout 


                        `account_orders.html`


                        A list of previously completed orders placed on the
                        store by the customer.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideNewProducts%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.AccountOrders%% |

                        | %%Panel.SideAccountMenu%% |

                        | %%Panel.Footer%% |


                        # Account Orderstatus Layout 


                        `account_orderstatus.html`


                        A list of currently pending orders placed on the store
                        by the customer.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideNewProducts%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.AccountOrderStatus%% |

                        | %%Panel.SideAccountMenu%% |

                        | %%Panel.Footer%% |


                        # Account Recentitems Layout 


                        `account_recentitems.html`


                        A list of products recently viewed on the store by the
                        customer.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideNewProducts%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.AccountRecentItems%% |

                        | %%Panel.SideAccountMenu%% |

                        | %%Panel.Footer%% |


                        # Account Returns Layout 


                        `account_returns.html`


                        A list of previously submitted returns requests by the
                        customer.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideNewProducts%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.AccountReturns%% |

                        | %%Panel.AccountReturns%% |

                        | %%Panel.SideAccountMenu%% |

                        | %%Panel.Footer%% |


                        # Account Saved Return Layout 


                        `account_saved_return.html`


                        Shown after a customer successfully submits a new
                        returns request on the store.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideNewProducts%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.SideAccountMenu%% |

                        | %%Panel.Footer%% |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideReturnInstructions%% |

                        | %%GLOBAL_ReturnInstructions%% |


                        # Account Layout 


                        `account.html`


                        The “My Account” welcome page with an explanation on
                        each of the sections available for the customer.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideNewProducts%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.SideAccountMenu%% |

                        | %%Panel.SideAccountStoreCredit%% |

                        | %%Panel.Footer%% |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideMessagesMenu%% |

                        | %%GLOBAL_HideReturnRequestsMenu%% |

                        | %%GLOBAL_HideWishlist%% |


                        # Createaccount Layout 


                        `createaccount.html`


                        The account creation/signup form where customers can
                        create an account on the store.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideNewProducts%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.CreateAccountBreadcrumb%% |

                        | %%Panel.CreateAccountForm%% |

                        | %%Panel.Footer%% |


                        # Createaccount Thanks Layout 


                        `createaccount_thanks.html`


                        A thank you page shown after the customer has
                        successfully registered an account on the store.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideNewProducts%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.Footer%% |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_Continue%% |

                        | %%GLOBAL_ContinueLink%% |


                        # Editaccount Layout 


                        `editaccount.html`


                        Shown in the “My Account” section of the store when a
                        customer chooses to edit their account.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideNewProducts%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.EditAccountBreadcrumb%% |

                        | %%Panel.EditAccountForm%% |

                        | %%Panel.SideAccountMenu%% |

                        | %%Panel.Footer%% |
                    - type: text
                      data: |-
                        # Bottom Layout 

                        `bottom.html`

                        ## Available Panels 
                        |||
                        |---|---|
                        | %%Panel.Footer%% |
                    - type: text
                      data: >-
                        # Brands Layout 


                        `brands.html`


                        A list of products in a particular brand, or if no brand
                        is specified, a list of brands configured in the store.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideShopByBrand%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.BrandBreadcrumb%% |

                        | %%Panel.BrandContent%% |

                        | %%Panel.SideBrandTagCloud%% |

                        | %%Panel.SideShopByBrandFull%% |

                        | %%Panel.Footer%% |
                    - type: text
                      data: >-
                        # Cart Layout 


                        `cart.html`


                        The “View Cart” page showing the contents of the current
                        customers cart.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideNewProducts%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.CartBreadcrumb%% |

                        | %%Panel.CartHeader%% |

                        | %%Panel.CartStatusMessage%% |

                        | %%Panel.CartContent%% |

                        | %%Panel.SuggestiveCartContent%% |

                        | %%Panel.SideCouponCodeBox%% |

                        | %%Panel.SideGiftCertificateCodeBox%% |

                        | %%Panel.SideProductRecentlyViewed%% |

                        | %%Panel.SideTopSellers%% |

                        | %%Panel.Footer%% |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_CdnAppPath%% |

                        | %%GLOBAL_JSCacheToken%% |
                    - type: text
                      data: >-
                        # Category Layout 


                        `category.html`


                        A list of products or sub categories that exist within a
                        particular category.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideCategoryShopByPrice%% |

                        | %%Panel.SideShopByBrand%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.SideLiveChatServices%% |

                        | %%Panel.CategoryBreadcrumb%% |

                        | %%Panel.CategoryHeading%% |

                        | %%Panel.CategoryPagingTop%% |

                        | %%Panel.CategoryContent%% |

                        | %%Panel.CategoryPagingBottom%% |

                        | %%Panel.SideCategoryTopSellers%% |

                        | %%Panel.SideCategoryPopularProducts%% |

                        | %%Panel.SideCategoryNewProducts%% |

                        | %%Panel.Footer%% |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_ExtraCategoryClass%% |

                        | %%GLOBAL_HideRightColumn%% |
                    - type: text
                      data: >-
                        # Checkout Address Layout 


                        `checkout_address.html`


                        The billing/shipping address form shown as the second
                        step of the checkout process.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.ChooseBillingAddress%% |

                        | %%Panel.ChooseShippingAddress%% |

                        | %%Panel.CheckoutNewAddressForm%% |

                        | %%Panel.Footer%% |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_CdnAppPath%% |

                        | %%GLOBAL_JSCacheToken%% |


                        # Checkout Confirm Layout 


                        `checkout_confirm.html`


                        The order confirmation page (last page of the multi-page
                        checkout) showing a summary of the order.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.ConfirmOrder%% |

                        | %%Panel.Footer%% |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_CdnAppPath%% |

                        | %%GLOBAL_JSCacheToken%% |


                        # Checkout Express Layout 


                        `checkout_express.html`


                        The express single-page checkout.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.Footer%% |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_LoginMessage%% |

                        | %%GLOBAL_IMG_PATH%% |

                        | %%GLOBAL_CollapsedStepClassBillingAddress%% |

                        | %%GLOBAL_ExpressCheckoutStepBillingAddress%% |

                        | %%GLOBAL_CdnAppPath%% |

                        | %%GLOBAL_JSCacheToken%% |

                        | %%GLOBAL_CollapsedStepClassShippingAddress%% |

                        | %%GLOBAL_ExpressCheckoutHideShippingAddress%% |

                        | %%GLOBAL_ExpressCheckoutStepShippingAddress%% |

                        | %%GLOBAL_CollapsedStepClassShippingProvider%% |

                        | %%GLOBAL_ExpressCheckoutHideShippingProviders%% |

                        | %%GLOBAL_ExpressCheckoutStepShippingProvider%% |

                        | %%GLOBAL_CollapsedStepClassConfirmation%% |

                        | %%GLOBAL_ExpressCheckoutStepConfirmation%% |

                        | %%GLOBAL_CollapsedStepClassPaymentDetails%% |

                        | %%GLOBAL_ExpressCheckoutHidePaymentDetails%% |

                        | %%GLOBAL_ExpressCheckoutStepPaymentDetails%% |

                        | %%GLOBAL_CustomCheckoutFormNewAccount%% |

                        | %%GLOBAL_CustomCheckoutFormBillingAddress%% |

                        | %%GLOBAL_CustomCheckoutFormShippingAddress%% |

                        | %%GLOBAL_ExpressCheckoutSignedIn%% |

                        | %%GLOBAL_ExpressCheckoutDigitalOrder%% |

                        | %%GLOBAL_GoToStep%% |

                        | %%GLOBAL_FormFieldRequiredJS%% |

                        | %%GLOBAL_CdnAppPath%% |

                        | %%GLOBAL_JSCacheToken%% |

                        | %%GLOBAL_CollapsedStepClassAccountDetails%% |

                        | %%GLOBAL_ExpressCheckoutHideAccountDetails%% |

                        | %%GLOBAL_ExpressCheckoutStepAccountDetails%% |

                        | %%GLOBAL_HideGuestCheckoutOptions%% |

                        | %%GLOBAL_IMG_PATH%% |

                        | %%GLOBAL_HideRegisteredCheckoutOptions%% |

                        | %%GLOBAL_IMG_PATH%% |


                        # Checkout Payment Layout 


                        `checkout_payment.html`


                        The payment details collection form shown in the
                        multi-page checkout. This page will be shown if the
                        selected payment method has an additional form (such as
                        one for requesting credit card details)


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.Footer%% |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_PaymentFormContent%% |


                        # Checkout Shipper Layout 


                        `checkout_shipper.html`


                        The shipping provider selection page shown for the
                        multi-page checkout.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.ChooseShippingProvider%% |

                        | %%Panel.Footer%% |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_CdnAppPath%% |

                        | %%GLOBAL_JSCacheToken%% |


                        # Checkout Layout 


                        `checkout.html`


                        The first page of the standard multi-page checkout shown
                        for guests asking them to either login, create an
                        account or checkout as a guest.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.Footer%% |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideCheckoutGuest%% |

                        | %%GLOBAL_HideCheckoutRegistrationRequired%% |

                        | %%GLOBAL_HideLoginMessage%% |

                        | %%GLOBAL_MessageClass%% |

                        | %%GLOBAL_LoginMessage%% |
                    - type: text
                      data: >-
                        # Compare Layout 


                        `compare.html`


                        Shown when a customer chooses to compare one or more
                        products with each other.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.CompareBreadcrumb%% |

                        | %%Panel.CompareContent%% |

                        | %%Panel.Footer%% |
                    - type: text
                      data: |-
                        # Default Layout 

                        `default.html`

                        The default index page of the store.

                        ## Available Panels 
                        |||
                        |---|---|
                        | %%Panel.HTMLHead%% |
                        | %%Panel.Header%% |
                        | %%Panel.WrapperBanner%% |
                        | %%Panel.SideCategoryList%% |
                        | %%Panel.SidePopularVendors%% |
                        | %%Panel.SideShopByBrand%% |
                        | %%Panel.SideNewsletterBox%% |
                        | %%Panel.SideLiveChatServices%% |
                        | %%Panel.HomeFeaturedProducts%% |
                        | %%Panel.HomeNewProducts%% |
                        | %%Panel.HomeRecentBlogs%% |
                        | %%Panel.SideCartContents%% |
                        | %%Panel.SideTopSellers%% |
                        | %%Panel.SideNewProducts%% |
                        | %%Panel.SidePopularProducts%% |
                        | %%Panel.Footer%% |
                    - type: text
                      data: >-
                        # Error Layout 


                        `error.html`


                        A generic page that can be shown whenever there is an
                        error message on the store and no additional content on
                        the page needs to be shown.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideShopByBrand%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.Footer%% |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_ErrorMessage%% |

                        | %%GLOBAL_ErrorDetails%% |
                    - type: text
                      data: >-
                        # Giftcertificates Balance Layout 


                        `giftcertificates_balance.html`


                        Allows customers to check the remaining balance (and
                        shows the remaining balance) of a gift certificate.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.GiftCertificatesMenu%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.GiftCertificateBalanceRemaining%% |

                        | %%Panel.CheckGiftCertificateBalance%% |

                        | %%Panel.Footer%% |


                        # Giftcertificates Redeem Layout 


                        `giftcertificates_redeem.html`


                        The page shown containing instructions on how to redeem
                        a gift certificate during the checkout process.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.GiftCertificatesMenu%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.RedeemGiftCertificate%% |

                        | %%Panel.Footer%% |


                        # Giftcertificates Layout 


                        `giftcertificates.html`


                        Shown when a customer clicks the “Gift Certificates”
                        link on the top menu of the store. Displays how to
                        purchase/use a gift certificate.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.GiftCertificatesMenu%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.PurchaseGiftCertificate%% |

                        | %%Panel.Footer%% |
                    - type: text
                      data: |-
                        # Ideal Layout 

                        `ideal.html`

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_HideIdealError%% |
                        | %%GLOBAL_IdealErrorMessage%% |
                        | %%GLOBAL_IdealPaymentForm%% |
                    - type: text
                      data: >-
                        # Invoice Print Layout 


                        `invoice_print.html`


                        A printable invoice for an order that a customer can
                        print from the front end of the store.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_PrintableInvoiceScript%% |

                        | %%GLOBAL_JSCacheToken%% |

                        | %%GLOBAL_PrintInvoiceStylesheetPath%% |

                        | %%GLOBAL_PrintableInvoiceList%% |
                    - type: text
                      data: |-
                        # Login Layout 

                        `login.html`

                        ## Available Panels 
                        |||
                        |---|---|
                        | %%Panel.HTMLHead%% |
                        | %%Panel.Header%% |
                        | %%Panel.WrapperBanner%% |
                        | %%Panel.SideCategoryList%% |
                        | %%Panel.SideNewProducts%% |
                        | %%Panel.SideNewsletterBox%% |
                        | %%Panel.LoginBreadcrumb%% |
                        | %%Panel.LoginForm%% |
                        | %%Panel.Footer%% |
                    - type: text
                      data: |-
                        # Maintenance Layout 

                        `maintenance.html`

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_MessageText%% |
                    - type: text
                      data: >-
                        # Message Layout 


                        `message.html`


                        Shown when a page simply needs to show a particular
                        message to the user.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.Footer%% |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_MessageTitle%% |

                        | %%GLOBAL_MessageText%% |
                    - type: text
                      data: >-
                        # News Layout 


                        `news.html`


                        The page that shows an individual news item on the
                        store.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.NewsBreadcrumb%% |

                        | %%Panel.NewsContent%% |

                        | %%Panel.NewsComments%% |

                        | %%Panel.Footer%% |
                    - type: text
                      data: >-
                        # Newsletter Subscribe Layout 


                        `newsletter_subscribe.html`


                        The thank you page shown after a visitor subscribes to
                        the store newsletter.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideShopByBrand%% |

                        | %%Panel.SidePopularProducts%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.NewsletterBreadcrumb%% |

                        | %%Panel.NewsletterContent%% |

                        | %%Panel.Footer%% |
                    - type: text
                      data: >-
                        # Order Layout 


                        `order.html`


                        The “Thank you for your order” page shown after an order
                        is successfully placed on the store.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideNewProducts%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.SideTopSellers%% |

                        | %%Panel.SideNewProducts%% |

                        | %%Panel.Footer%% |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_CustomerName%% |

                        | %%GLOBAL_HideError%% |

                        | %%GLOBAL_ErrorMessage%% |

                        | %%GLOBAL_HidePaidOrderConfirmation%% |

                        | %%GLOBAL_OrderId%% |

                        | %%GLOBAL_HidePhysicalOrderConfirmation%% |

                        | %%GLOBAL_PhysicalOrderConfirmation%% |

                        | %%GLOBAL_HideDigitalOrderConfirmation%% |

                        | %%GLOBAL_DigitalOrderConfirmation%% |

                        | %%GLOBAL_HideDigitalOrderDownloadLink%% |

                        | %%GLOBAL_HideAwaitingPayment%% |

                        | %%GLOBAL_HideSuccess%% |

                        | %%GLOBAL_OrderConfirmationDetails%% |

                        | %%GLOBAL_CdnAppPath%% |

                        | %%GLOBAL_JSCacheToken%% |

                        | %%GLOBAL_ContinueShoppingOnStoreName%% |

                        | %%GLOBAL_ConversionCode%% |
                    - type: text
                      data: |-
                        # Packing Slip Print Layout 

                        `packing_slip_print.html`

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_BillingAddress%% |
                        | %%GLOBAL_CustomerEmail%% |
                        | %%GLOBAL_HideBillingPhone%% |
                        | %%GLOBAL_STYLE_PATH%% |
                        | %%GLOBAL_BillingPhone%% |
                        | %%GLOBAL_ShippingAddress%% |
                        | %%GLOBAL_HideShippingPhone%% |
                        | %%GLOBAL_ShippingPhone%% |
                        | %%GLOBAL_OrderId%% |
                        | %%GLOBAL_HeaderLogo%% |
                        | %%GLOBAL_OrderDate%% |
                        | %%GLOBAL_HideShippingMethod%% |
                        | %%GLOBAL_ShippingMethod%% |
                        | %%GLOBAL_HideShippingDate%% |
                        | %%GLOBAL_DateShipped%% |
                        | %%GLOBAL_HideTrackingNo%% |
                        | %%GLOBAL_TrackingNo%% |
                        | %%GLOBAL_ProductsTable%% |
                        | %%GLOBAL_HideComments%% |
                        | %%GLOBAL_Comments%% |
                        | %%GLOBAL_PackingSlipTitle%% |
                    - type: text
                      data: >-
                        # Page Layout 


                        `page.html`


                        The layout file shown when viewing a web page created on
                        the store.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideSubPageList%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SidePopularVendors%% |

                        | %%Panel.SideShopByBrand%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.SideLiveChatServices%% |

                        | %%Panel.PageBreadcrumb%% |

                        | %%Panel.PageContent%% |

                        | %%Panel.PageComments%% |

                        | %%Panel.Footer%% |
                    - type: text
                      data: >-
                        # Forgotpassword Layout 


                        `forgotpassword.html`


                        The page shown when a customer clicks the “Forgot your
                        password?” link on the login page. Used to reset their
                        account password.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideNewProducts%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.ForgotPasswordBreadcrumb%% |

                        | %%Panel.ForgotPasswordForm%% |

                        | %%Panel.Footer%% |


                        # Getnewpassword Layout 


                        `getnewpassword.html`


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideNewProducts%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.GetNewPasswordBreadcrumb%% |

                        | %%Panel.GetNewPasswordForm%% |

                        | %%Panel.Footer%% |
                    - type: text
                      data: >-
                        # Authorizenet Layout 


                        `authorizenet.html`


                        The Authorize.net payment module form. This form is
                        included on both the multistep and express checkout
                        pages.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.AuthorizeNetPaymentJavaScript%% |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_AuthorizeNetName%% |

                        | %%GLOBAL_AuthorizeNetNum%% |

                        | %%GLOBAL_AuthorizeNetMonths%% |

                        | %%GLOBAL_AuthorizeNetYears%% |

                        | %%GLOBAL_AuthorizeNetHideCVV2%% |

                        | %%GLOBAL_AuthorizeNetHideCVV2%% |

                        | %%GLOBAL_AuthorizeNetCCV2%% |

                        | %%GLOBAL_OrderAmount%% |

                        | %%GLOBAL_HideAuthorizeNetError%% |

                        | %%GLOBAL_AuthorizeNetErrorMessage%% |


                        # Ccmanual Layout 


                        `ccmanual.html`


                        The credit card (manual) payment method credit card
                        details form.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.CCManualPaymentJavaScript%% |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_CCName%% |

                        | %%GLOBAL_CCTypes%% |

                        | %%GLOBAL_CCNum%% |

                        | %%GLOBAL_CCCVV2%% |

                        | %%GLOBAL_CCIssueNo%% |

                        | %%GLOBAL_CCMonths%% |

                        | %%GLOBAL_CCYears%% |

                        | %%GLOBAL_HideCCManualError%% |

                        | %%GLOBAL_CCIssueDateMonths%% |

                        | %%GLOBAL_CCIssueDateYears%% |

                        | %%GLOBAL_CCErrorMessage%% |

                        | %%GLOBAL_OrderAmount%% |


                        # Eselectplusdp Layout 


                        `eselectplusdp.html`


                        The payment details collection form for the eSelect
                        DirectPost payment module.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.eSelectPlusDPPaymentJavaScript%% |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_eSelectPlusDPNum%% |

                        | %%GLOBAL_eSelectPlusDPMonths%% |

                        | %%GLOBAL_eSelectPlusDPYears%% |

                        | %%GLOBAL_eSelectPlusDPCCV2%% |

                        | %%GLOBAL_eSelectPlusDPCardHolderName%% |

                        | %%GLOBAL_eSelectPlusDPBillStNum%% |

                        | %%GLOBAL_eSelectPlusDPBillStName%% |

                        | %%GLOBAL_eSelectPlusDPBillZip%% |

                        | %%GLOBAL_HideeSelectPlusDPError%% |

                        | %%GLOBAL_OrderAmount%% |

                        | %%GLOBAL_eSelectPlusDPErrorMessage%% |


                        # Eway Layout


                        `eway.html`


                        Shown when a customer chooses to pay via eWay when
                        making a purchase on the store.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.EWayPaymentJavaScript%% |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_EWayName%% |

                        | %%GLOBAL_EWayMonths%% |

                        | %%GLOBAL_EWayYears%% |

                        | %%GLOBAL_EWayHideCardCode%% |

                        | %%GLOBAL_EWayHideCardCode%% |

                        | %%GLOBAL_EWayCardCode%% |

                        | %%GLOBAL_OrderAmount%% |

                        | %%GLOBAL_HideEWayError%% |

                        | %%GLOBAL_EWayErrorMessage%% |


                        # Genericcreditcard Layout 


                        `genericcreditcard.html`


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.GenericCreditCardPaymentJavaScript%% |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideCreditCardError%% |

                        | %%GLOBAL_CCTypes%% |

                        | %%GLOBAL_CreditCardName%% |

                        | %%GLOBAL_CreditCardNum%% |

                        | %%GLOBAL_CreditCardIssueNo%% |

                        | %%GLOBAL_CreditCardIssueDateMonths%% |

                        | %%GLOBAL_CreditCardIssueDateYears%% |

                        | %%GLOBAL_HideCreditCardError%% |

                        | %%GLOBAL_CreditCardMonths%% |

                        | %%GLOBAL_CreditCardYears%% |

                        | %%GLOBAL_CreditCardHideCardCode%% |

                        | %%GLOBAL_CreditCardHideCardCode%% |

                        | %%GLOBAL_CreditCardCardCode%% |

                        | %%GLOBAL_OrderAmount%% |

                        | %%GLOBAL_CreditCardErrorMessage%% |

                        | %%GLOBAL_AdditionalPaymentPageContents%% |


                        # NMI Layout 


                        `nmi.html`


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.NMIPaymentJavaScript%% |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_NMIName%% |

                        | %%GLOBAL_NMINum%% |

                        | %%GLOBAL_NMIMonths%% |

                        | %%GLOBAL_NMIYears%% |

                        | %%GLOBAL_NMIHideCVV2%% |

                        | %%GLOBAL_NMIHideCVV2%% |

                        | %%GLOBAL_NMICCV2%% |

                        | %%GLOBAL_OrderAmount%% |

                        | %%GLOBAL_HideNMIError%% |

                        | %%GLOBAL_NMIErrorMessage%% |


                        # PayflowPro Layout 


                        `payflowpro.html`


                        The payment details (credit card entry) form shown when
                        a customer chooses to pay via PayPal PayFlow Pro.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.PayflowProPaymentJavaScript%% |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_PayflowProName%% |

                        | %%GLOBAL_PayflowProNum%% |

                        | %%GLOBAL_PayflowProMonths%% |

                        | %%GLOBAL_PayflowProYears%% |

                        | %%GLOBAL_PayflowProHideCVV2%% |

                        | %%GLOBAL_PayflowProHideCVV2%% |

                        | %%GLOBAL_PayflowProCCV2%% |

                        | %%GLOBAL_OrderAmount%% |

                        | %%GLOBAL_HidePayflowProError%% |

                        | %%GLOBAL_PayflowProErrorMessage%% |


                        # Valuteccard Layout 


                        `valuteccard.html`


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.ValutecCardPaymentJavaScript%% |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideCreditCardError%% |

                        | %%GLOBAL_CreditCardNum%% |

                        | %%GLOBAL_OrderAmount%% |

                        | %%GLOBAL_HideCreditCardError%% |

                        | %%GLOBAL_CreditCardErrorMessage%% |
                    - type: text
                      data: |-
                        # Product Layout

                        `product.html`

                        ## Available Panels
                        |||
                        |---|---|
                        | %%Panel.HTMLHead%% |
                        | %%Panel.Header%% |
                        | %%Panel.WrapperBanner%% |
                        | %%Panel.SideCategoryList%% |
                        | %%Panel.SideNewProducts%% |
                        | %%Panel.SideNewsletterBox%% |
                        | %%Panel.SideLiveChatServices%% |
                        | %%Panel.ProductBreadcrumb%% |
                        | %%Panel.ProductDetails%% |
                        | %%Panel.ProductTabs%% |
                        | %%Panel.ProductDescription%% |
                        | %%Panel.ProductVideos%% |
                        | %%Panel.ProductWarranty%% |
                        | %%Panel.ProductOtherDetails%% |
                        | %%Panel.SimilarProductsByTag%% |
                        | %%Panel.ProductByCategory%% |
                        | %%Panel.ProductVendorsOtherProducts%% |
                        | %%Panel.ProductReviews%% |
                        | %%Panel.SimilarProductsByCustomerViews%% |
                        | %%Panel.SideCurrencySelector%% |
                        | %%Panel.SideProductAddToWishList%% |
                        | %%Panel.SideProductRelated%% |
                        | %%Panel.SideProductRecentlyViewed%% |
                        | %%Panel.Footer%% |

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_CdnAppPath%% |
                        | %%GLOBAL_JSCacheToken%% |
                        | %%GLOBAL_CdnAppPath%% |
                        | %%GLOBAL_JSCacheToken%% |
                        | %%GLOBAL_CdnAppPath%% |
                        | %%GLOBAL_JSCacheToken%% |

                        # Product Comments Layout

                        `product_comments.html`

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_HideSectionSeparator%% |
                        | %%GLOBAL_ProductId%% |
                        | %%GLOBAL_throttleToken%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_SiteColor%% |
                        | %%GLOBAL_ReviewRating5%% |
                        | %%GLOBAL_ReviewRating4%% |
                        | %%GLOBAL_ReviewRating3%% |
                        | %%GLOBAL_ReviewRating2%% |
                        | %%GLOBAL_ReviewRating1%% |
                        | %%GLOBAL_RevTitle%% |
                        | %%GLOBAL_RevText%% |
                        | %%GLOBAL_HideReviewEmail%% |
                        | %%GLOBAL_CustomerEmail%% |
                        | %%GLOBAL_HideReviewEmail%% |
                        | %%GLOBAL_CustomerName%% |
                        | %%GLOBAL_HideReviewCaptcha%% |
                        | %%GLOBAL_HideReviewCaptcha%% |
                        | %%GLOBAL_ProductReviewFlashMessages%% |
                        | %%GLOBAL_ReCaptchaAPIKeyPublic%% |
                        | %%GLOBAL_ReCaptchaAPIKeyPublic%% |
                        | %%GLOBAL_HideNoReviewsMessage%% |
                        | %%GLOBAL_NoReviews%% |
                        | %%GLOBAL_ProductReviewPaging%% |
                        | %%GLOBAL_ProductReviewList%% |
                        | %%GLOBAL_ProductReviewPaging%% |
                        | %%GLOBAL_HideReviewCaptcha%% |
                        | %%GLOBAL_AutoShowReviewForm%% |
                        | %%GLOBAL_JumpToReviews%% |

                        # Product Video Layout

                        `product_video.html`

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_VideoId%% |
                        | %%GLOBAL_STYLE_PATH%% |
                        | %%GLOBAL_VideoId%% |

                        #  Productimage Layout

                        `productimage.html`

                        The popup window used to display product images.

                        ## Available Panels 
                        |||
                        |---|---|
                        | %%Panel.ProductImagePopup%% |

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_CurrentImageIndex%% |
                        | %%GLOBAL_ProductMaxImageHeight%% |
                        | %%GLOBAL_ProductMaxImageWidth%% |
                        | %%GLOBAL_VariationImage%% |
                        | %%GLOBAL_RuleImage%% |
                        | %%GLOBAL_ProdImageJavascript%% |
                        | %%GLOBAL_popupCssPath%% |
                        | %%GLOBAL_jQueryPath%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_CdnAppPath%% |
                        | %%GLOBAL_JSCacheToken%% |
                    - type: text
                      data: >-
                        # Search Layout 


                        `search.html`


                        The page that either shows the form to search for
                        products or product search results if a search is
                        currently being performed.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideShopByBrand%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.SearchPageHeader%% |

                        | %%Panel.SearchPage%% |

                        | %%Panel.Footer%% |


                        # Search Tips Layout 


                        `search_tips.html`


                        The page that shows tips and tricks for using the
                        product search.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideShopByBrand%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.SearchTips%% |

                        | %%Panel.Footer%% |
                    - type: text
                      data: >-
                        # Shippingaddressform Layout 


                        `shippingaddressform.html`


                        Shown when a customer wishes to edit a shipping/billing
                        address in their address book from the “My Account”
                        section.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideNewProducts%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.AccountBreadcrumb%% |

                        | %%Panel.ShippingAddressForm%% |

                        | %%Panel.SideAccountMenu%% |

                        | %%Panel.Footer%% |
                    - type: text
                      data: |-
                        # Sitemap Layout 

                        `sitemap.html`

                        ### Available Panels 
                        |||
                        |---|---|
                        | %%Panel.HTMLHead%% |
                        | %%Panel.Header%% |
                        | %%Panel.WrapperBanner%% |
                        | %%Panel.SideCategoryList%% |
                        | %%Panel.SideShopByBrand%% |
                        | %%Panel.SideNewsletterBox%% |
                        | %%Panel.SitemapBreadcrumb%% |
                        | %%Panel.SitemapContent%% |
                        | %%Panel.SideBrandTagCloud%% |
                        | %%Panel.SideShopByBrandFull%% |
                        | %%Panel.Footer%% |
                    - type: text
                      data: |-
                        # Tags Layout 

                        `tags.html`

                        ## Available Panels 
                        |||
                        |---|---|
                        | %%Panel.HTMLHead%% |
                        | %%Panel.Header%% |
                        | %%Panel.WrapperBanner%% |
                        | %%Panel.SideCategoryList%% |
                        | %%Panel.SideShopByBrand%% |
                        | %%Panel.SideNewsletterBox%% |
                        | %%Panel.SideLiveChatServices%% |
                        | %%Panel.Breadcrumb%% |
                        | %%Panel.ProductTagCloud%% |
                        | %%Panel.TagProducts%% |
                        | %%Panel.Footer%% |
                    - type: text
                      data: |-
                        # Top Layout 

                        `top.html`

                        ## Available Panels 
                        |||
                        |---|---|
                        | %%Panel.HTMLHead%% |
                        | %%Panel.Header%% |
                        | %%Panel.WrapperBanner%% |
                        | %%Panel.SideCategoryList%% |
                        | %%Panel.SideShopByBrand%% |
                        | %%Panel.SideNewsletterBox%% |
                    - type: text
                      data: |-
                        # Unsubscribe Layout

                        `unsubscribe.html`

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_UnsubscribeTitle%% |
                    - type: text
                      data: >-
                        # Wishlist Layout 


                        `wishlist.html`


                        The page shown when any action related to wishlists
                        (adding items, managing wishlists etc) is shown.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.HTMLHead%% |

                        | %%Panel.Header%% |

                        | %%Panel.WrapperBanner%% |

                        | %%Panel.SideCategoryList%% |

                        | %%Panel.SideNewProducts%% |

                        | %%Panel.SideNewsletterBox%% |

                        | %%Panel.WishListItems%% |

                        | %%Panel.WishLists%% |

                        | %%Panel.WishListAddForm%% |

                        | %%Panel.SideAccountMenu%% |

                        | %%Panel.SidePopularProducts%% |

                        | %%Panel.Footer%% |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideRightMenu%% |
              - title: Panels
                route:
                  path: /blueprint-panels
                data:
                  blocks:
                    - type: text
                      data: >-
                        # AccountDownloadItemsBreadcrumb Panel 


                        The breadcrumb navigation shown when downloading digital
                        items from an order.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_OrderId%% |


                        # AccountDownloadItems Panel 


                        The list of downloadable items in a digital order.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_DownloadIntro%% |


                        # AccountInbox Panel 


                        A list of order messages in the customer’s account. Also
                        includes the form to send a message relating to a past
                        order placed on the store.


                        ##  Available Panels

                        |||

                        |---|---|

                        | AccountInbox |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideNoOrderMessage%% |

                        | %%GLOBAL_HideInbox%% |

                        | %%GLOBAL_HideInboxMessage%% |

                        | %%GLOBAL_AccountInboxIntro%% |

                        | %%GLOBAL_HideMessageSuccess%% |

                        | %%GLOBAL_HideMessageError%% |


                        # AccountNewReturnBreadcrumb Panel 


                        The breadcrumb navigation menu.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_OrderId%% |


                        # AccountNewReturnInfo Panel 


                        Form for entering details about the new return request
                        such as the reason, action and comments.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_ReturnReasonsList%% |

                        | %%GLOBAL_HideReturnAction%% |

                        | %%GLOBAL_HideReturnAction%% |

                        | %%GLOBAL_ReturnActionsList%% |

                        | %%GLOBAL_HideReturnForm%% |


                        # AccountNewReturnProducts Panel 


                        A table of products in the particular order including
                        choices to select the quantity of each item to return.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideReturnForm%% |


                        # AccountOrderLinks Panel 


                        Links shown on the right to submit a return request for
                        this order or print a copy of the invoice for this
                        order.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_ShowOrderActions%% |

                        | %%GLOBAL_OrderId%% |

                        | %%GLOBAL_DisableReturnButton%% |

                        | %%GLOBAL_OrderId%% |


                        #  AccountOrderShipments Panel


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_LNG_OrderShipments%% |


                        # AccountOrderStatus Panel 


                        The list of pending orders placed on the store by the
                        customer.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideNoOrderStatusMessage%% |

                        | %%GLOBAL_HideOrderStatusList%% |


                        # AccountOrder Panel 


                        The details of the order (billing and shipping address
                        as well as the products purchased)


                        ##  Available Panels

                        |||

                        |---|---|

                        | AccountOrder |

                        | AccountOrder |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_OrderStatus%% |

                        | %%GLOBAL_OrderDate%% |

                        | %%GLOBAL_OrderTotal%% |

                        | %%GLOBAL_BillingAddress%% |

                        | %%GLOBAL_HideSingleShippingAddress%% |

                        | %%GLOBAL_ShippingAddress%% |

                        | %%GLOBAL_FlassMessage%% |

                        | %%GLOBAL_OrderId%% |

                        | %%GLOBAL_OrderId%% |

                        | %%GLOBAL_HideItemDetailsHeader%% |

                        | %%GLOBAL_OrderTotalRows%% |

                        | %%GLOBAL_OrderId%% |

                        | %%GLOBAL_IMG_PATH%% |

                        | %%GLOBAL_SiteColor%% |

                        | %%GLOBAL_HideOrderComments%% |

                        | %%GLOBAL_OrderComments%% |

                        | %%GLOBAL_HideOrderStatus%% |


                        # AccountOrders Panel 


                        The list of previously placed orders on the store by the
                        customer.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideNoOrdersMessage%% |

                        | %%GLOBAL_HideOrderList%% |


                        # AccountRecentItems Panel 


                        The list of items that the customer has recently viewed
                        on the store.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_CompareLink%% |

                        | %%GLOBAL_HideCompareItems%% |

                        | %%GLOBAL_IMG_PATH%% |

                        | %%GLOBAL_SiteColor%% |

                        | %%GLOBAL_HideNoRecentItemsMessage%% |

                        | %%GLOBAL_HideRecentItemList%% |


                        # AccountReturns Panel 


                        The list of submitted returns requests.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideReturnsList%% |

                        | %%GLOBAL_HideNoReturnsMessage%% |
                    - type: text
                      data: >-
                        # BrandBreadcrumb Panel 


                        The breadcrumb navigation menu.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_AllBrandsLink%% |

                        | %%GLOBAL_TrailBrandName%% |


                        # BrandContent Panel 


                        The contents of the brands page. Either the products in
                        a particular brand or a list of brands in the store.


                        ## Available Panels 

                        |||

                        |---|---|

                        | BrandContent |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_CompareLink%% |

                        | %%GLOBAL_HideCompareItems%% |

                        | %%GLOBAL_IMG_PATH%% |

                        | %%GLOBAL_SiteColor%% |

                        | %%GLOBAL_TrailBrandName%% |


                        # BrandProductListing Panel 


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_BrandsMessage%% |

                        | %%GLOBAL_HideBrandProductListing%% |

                        | %%GLOBAL_BrandProductListing%% |
                    - type: text
                      data: >-
                        # CartContent Panel 


                        The contents of the customers shopping cart and the
                        bottom “Proceed to Checkout” button.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideCheckoutButton%% |

                        | %%GLOBAL_CheckoutLink%% |

                        | %%GLOBAL_OptimizerLinkFunction%% |

                        | %%GLOBAL_CartCheckoutButtonOptimizerScriptTag%% |

                        | %%GLOBAL_IMG_PATH%% |

                        | %%GLOBAL_SiteColor%% |

                        | %%GLOBAL_CartCheckoutButtonOptimizerNoScriptTag%% |

                        | %%GLOBAL_HideMultipleAddressShipping%% |

                        | %%GLOBAL_HideMultipleAddressShippingOr%% |

                        | %%GLOBAL_AdditionalCheckoutButtons%% |

                        | %%GLOBAL_KeepShoppingLink%% |

                        | %%GLOBAL_KeepShoppingText%% |

                        | %%GLOBAL_HideShoppingCartEmptyMessage%% |

                        | %%GLOBAL_CdnAppPath%% |

                        | %%GLOBAL_JSCacheToken%% |

                        | %%GLOBAL_HideShoppingCartGrid%% |

                        | %%GLOBAL_CartItemTotal%% |

                        | %%GLOBAL_HideGiftWrappingTotal%% |

                        | %%GLOBAL_GiftWrappingTotal%% |

                        | %%GLOBAL_HideDiscountAmount%% |

                        | %%GLOBAL_DiscountAmount%% |

                        | %%GLOBAL_HideShoppingCartShippingEstimator%% |

                        | %%GLOBAL_ShippingCountryList%% |

                        | %%GLOBAL_ShippingHideStateList%% |

                        | %%GLOBAL_ShippingStateList%% |

                        | %%GLOBAL_AddressState%% |

                        | %%GLOBAL_ShippingHideStateBox%% |

                        | %%GLOBAL_ShippingZip%% |

                        | %%GLOBAL_HideShoppingCartShippingCost%% |

                        | %%GLOBAL_ShippingProvider%% |

                        | %%GLOBAL_ShippingCost%% |

                        | %%GLOBAL_HideShoppingCartHandlingCost%% |

                        | %%GLOBAL_HandlingCost%% |

                        | %%GLOBAL_Taxes%% |

                        | %%GLOBAL_CartTotal%% |

                        | %%GLOBAL_InclusiveTaxes%% |

                        | %%GLOBAL_HideCartQuantityTextBox%% |

                        | %%GLOBAL_IMG_PATH%% |

                        | %%GLOBAL_SiteColor%% |


                        # CartHeader Panel 


                        The header of the cart contents page with the title and
                        the top “Proceed to Checkout” button.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_IMG_PATH%% |

                        | %%GLOBAL_SiteColor%% |

                        | %%GLOBAL_CartCheckoutButtonOptimizerNoScriptTag%% |

                        | %%GLOBAL_AdditionalCheckoutButtons%% |

                        | %%GLOBAL_OptimizerLinkScript%% |

                        | %%GLOBAL_CartCheckoutButtonControlScript%% |

                        | %%GLOBAL_HideCheckoutButton%% |

                        | %%GLOBAL_CheckoutLink%% |

                        | %%GLOBAL_OptimizerLinkFunction%% |

                        | %%GLOBAL_CartCheckoutButtonOptimizerScriptTag%% |


                        # CartStatusMessage Panel 


                        If an alternate status message is to be shown, the
                        status message.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_CartStatusMessage%% |


                        # SuggestiveCartContent Panel 


                        Displays recommended products after a product was added
                        to the cart. This includes products that customers who
                        purchased this product have also purchased, related
                        products and popular products.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideSuggestiveCartContent%% |

                        | %%GLOBAL_SuggestedProductListing%% |
                    - type: text
                      data: >-
                        # CategoryContent Panel 


                        The list of products in the category being viewed on the
                        store.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_CompareButtonTop%% |

                        | %%GLOBAL_DisplayMode%% |

                        | %%GLOBAL_CategoryProductListing%% |

                        | %%GLOBAL_CompareButton%% |

                        | %%GLOBAL_CompareLink%% |

                        | %%GLOBAL_CategoryContentFlashMessages%% |

                        | %%GLOBAL_ListJS%% |

                        | %%GLOBAL_CompareLink%% |

                        | %%GLOBAL_CompareOnSubmit%% |


                        # CategoryHeading Panel 


                        The heading (category name) as well as the “sort” box
                        for a particular category view.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_CatDesc%% |

                        | %%GLOBAL_CategoryDescriptionOptimizerNoScriptTag%% |

                        | %%GLOBAL_CategoryNameOptimizerScriptTag%% |

                        | %%GLOBAL_CatName%% |

                        | %%GLOBAL_CategoryNameOptimizerNoScriptTag%% |

                        | %%GLOBAL_CategoryDescriptionOptimizerScriptTag%% |


                        # CategoryProductListing Panel 


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_CategoryProductListing%% |
                    - type: text
                      data: >-
                        # CheckGiftCertificateBalance Panel 


                        Displays the form asking for the gift certificate code
                        to check the balance of.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideExampleImage%% |

                        | %%GLOBAL_IMG_PATH%% |

                        | %%GLOBAL_BalanceTitle%% |

                        | %%GLOBAL_HideTitle%% |

                        | %%GLOBAL_HideGiftCertificateError%% |

                        | %%GLOBAL_ErrorMessage%% |

                        | %%GLOBAL_HideIntro%% |
                    - type: text
                      data: |-
                        # ChooseBillingAddress Panel 

                        ## Available Panels 
                        |||
                        |---|---|
                        | ChooseBillingAddress |

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_CheckoutShippingTitle%% |
                        | %%GLOBAL_CheckoutShippingIntro%% |
                    - type: text
                      data: >-
                        # ChooseShippingAddress Panel 


                        If the customer is logged in, this panel is shown
                        containing the list of shipping addresses in their
                        address book.


                        ## Available Panels 

                        |||

                        |---|---|

                        | ChooseShippingAddress |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideTabSingle%% |

                        | %%GLOBAL_CheckoutShippingIntro%% |

                        | %%GLOBAL_HideTabMultiple%% |

                        | %%GLOBAL_CheckoutMultiShippingIntro%% |

                        | %%GLOBAL_CheckoutShippingTitle%% |

                        | %%GLOBAL_HideShippingTabs%% |

                        | %%GLOBAL_ActiveTabSingle%% |

                        | %%GLOBAL_ActiveTabMultiple%% |
                    - type: text
                      data: |-
                        # CompareContent Panel 

                        The table showing the products being compared.

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_NumCompareItems%% |
                        | %%GLOBAL_ComparisonHeading%% |
                        | %%GLOBAL_HideTooManyProductsMessage%% |
                        | %%GLOBAL_TooManyProductsMessage%% |
                    - type: text
                      data: >-
                        # ConfirmOrder Panel 


                        The order confirmation and payment method selection
                        form.


                        ## Available Panels 

                        |||

                        |---|---|

                        | ConfirmOrder |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_CreditAlt%% |

                        | %%GLOBAL_HidePaymentProviderList%% |

                        | %%GLOBAL_PaymentProviders%% |

                        | %%GLOBAL_HideOrderComments%% |

                        | %%GLOBAL_OrderComments%% |

                        | %%GLOBAL_HideOrderTermsAndConditions%% |

                        | %%GLOBAL_HideTermsAndConditionsTextarea%% |

                        | %%GLOBAL_OrderTermsAndConditions%% |

                        | %%GLOBAL_AgreeTermsAndConditions%% |

                        | %%GLOBAL_TermsAndConditionsLink%% |

                        | %%GLOBAL_HideCheckoutError%% |

                        | %%GLOBAL_HideMailingListInvite%% |

                        | %%GLOBAL_HideMailingListInvite%% |

                        | %%GLOBAL_NewsletterBoxIsTicked%% |

                        | %%GLOBAL_HideOrderCheckBox%% |

                        | %%GLOBAL_OrderBoxIsTicked%% |

                        | %%GLOBAL_CheckoutErrorMsg%% |

                        | %%GLOBAL_HideButtomPaymentButton%% |

                        | %%GLOBAL_IMG_PATH%% |

                        | %%GLOBAL_SiteColor%% |

                        | %%GLOBAL_PaymentButtonSwitch%% |

                        | %%GLOBAL_HideCheckoutSuccess%% |

                        | %%GLOBAL_CheckoutSuccessMsg%% |

                        | %%GLOBAL_HideConfirmOrderPage%% |

                        | %%GLOBAL_BillingAddress%% |

                        | %%GLOBAL_HideShippingDetails%% |

                        | %%GLOBAL_ShippingAddress%% |

                        | %%GLOBAL_totals%% |

                        | %%GLOBAL_HideUseCoupon%% |

                        | %%GLOBAL_RedeemTitle%% |

                        | %%GLOBAL_RedeemIntro%% |

                        | %%GLOBAL_HidePaymentOptions%% |

                        | %%GLOBAL_HideUseStoreCredit%% |

                        | %%GLOBAL_HideTopPaymentButton%% |

                        | %%GLOBAL_HideUseStoreCredit%% |

                        | %%GLOBAL_CheckoutStoreCreditWarning%% |

                        | %%GLOBAL_HideLimitedCreditWarning%% |

                        | %%GLOBAL_StoreCredit%% |

                        | %%GLOBAL_IMG_PATH%% |

                        | %%GLOBAL_SiteColor%% |

                        | %%GLOBAL_HideLimitedCreditWarning%% |

                        | %%GLOBAL_Remaining%% |

                        | %%GLOBAL_HideRemainingStoreCredit%% |

                        | %%GLOBAL_RemainingCredit%% |

                        | %%GLOBAL_HideLimitedCreditPaymentOption%% |

                        | %%GLOBAL_HideLimitedCreditWarning%% |

                        | %%GLOBAL_StoreCreditPaymentProviders%% |

                        | %%GLOBAL_CheckoutWith%% |

                        | %%GLOBAL_HideCreditAltOptionList%% |
                    - type: text
                      data: |-
                        # Footer Panel 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_DesignModeHTML%% |
                        | %%GLOBAL_QueryList%% |
                        | %%GLOBAL_DesignModeScriptTag%% |
                        | %%GLOBAL_LiveChatFooterCode%% |
                        | %%GLOBAL_OptimizerTrackingScript%% |
                        | %%GLOBAL_OptimizerConversionScript%% |
                        | %%GLOBAL_OptimizerSetCookieScript%% |
                        | %%GLOBAL_FooterScripts%% |
                        | %%GLOBAL_DebugDetails%% |
                        | %%GLOBAL_AllPricesAreInCurrency%% |
                        | %%GLOBAL_Year%% |
                        | %%GLOBAL_MobileSiteLink%% |
                        | %%GLOBAL_PoweredBy%% |
                    - type: text
                      data: >-
                        # Page Contact Form Layout 


                        page_contact_form.html


                        The form shown when a web page is configured as a
                        “Contact Form” allowing users to submit a
                        question/message to the store owner.


                        ## Available Panels 

                        |||

                        |---|---|

                        | %%Panel.ContactFormJavaScript%% |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideFullName%% |

                        | %%GLOBAL_ContactName%% |

                        | %%GLOBAL_HideFullName%% |

                        | %%GLOBAL_ContactEmail%% |

                        | %%GLOBAL_HideCompanyName%% |

                        | %%GLOBAL_ContactCompanyName%% |

                        | %%GLOBAL_HideCompanyName%% |

                        | %%GLOBAL_HidePhone%% |

                        | %%GLOBAL_ContactPhone%% |

                        | %%GLOBAL_HidePhone%% |

                        | %%GLOBAL_HideOrderNo%% |

                        | %%GLOBAL_ContactOrderNo%% |

                        | %%GLOBAL_HideOrderNo%% |

                        | %%GLOBAL_HideRMANo%% |

                        | %%GLOBAL_ContactRMA%% |

                        | %%GLOBAL_HideRMANo%% |

                        | %%GLOBAL_ContactQuestion%% |

                        | %%GLOBAL_HideFormError%% |

                        | %%GLOBAL_HideCaptcha%% |

                        | %%GLOBAL_HideCaptcha%% |

                        | %%GLOBAL_CaptchaImage%% |

                        | %%GLOBAL_ARSPanel%% |

                        | %%GLOBAL_PageId%% |


                        # CheckoutNewAddressForm Panel 


                        If the customer is not logged in and checking out as a
                        guest this panel is shown containing the fields to enter
                        their billing/shipping address.


                        ## Available Panels 

                        |||

                        |---|---|

                        | CheckoutNewAddressForm |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_ShipCustomFields%% |

                        | %%GLOBAL_HideShippingOptions%% |

                        | %%GLOBAL_HideShippingOptions%% |

                        | %%GLOBAL_ShipToAddressChecked%% |

                        | %%GLOBAL_ShipToBillingName%% |

                        | %%GLOBAL_ShipAddressButtonText%% |

                        | %%GLOBAL_CheckoutShippingTitle%% |

                        | %%GLOBAL_ShipAddressButtonText_JS%% |

                        | %%GLOBAL_HideErrors%% |

                        | %%GLOBAL_ErrorMessage%% |

                        | %%GLOBAL_ShippingFormAction%% |


                        # CreateAccountForm Panel 


                        A form containing the fields necessary to create a
                        customer account on the store.


                        ## Available Panels 

                        |||

                        |---|---|

                        | CreateAccountForm |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideCreateAccountErrorMessage%% |

                        | %%GLOBAL_ErrorMessage%% |

                        | %%GLOBAL_CreateAccountEmailPassword%% |

                        | %%GLOBAL_CreateAccountDetails%% |

                        | %%GLOBAL_HideReviewCaptcha%% |

                        | %%GLOBAL_HideReviewCaptcha%% |

                        | %%GLOBAL_ReCaptchaAPIKeyPublic%% |

                        | %%GLOBAL_ReCaptchaAPIKeyPublic%% |

                        | %%GLOBAL_CreateAccountButtonText%% |

                        | %%GLOBAL_CreateAccountHeading%% |

                        | %%GLOBAL_HideCreateAccountIntroMessage%% |


                        # EditAccountForm Panel 


                        Form shown allowing the customer to change the details
                        (email address, password, name etc) of their registered
                        account.


                        ## Available Panels 

                        |||

                        |---|---|

                        | EditAccountForm |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideEditAccountSuccessMessage%% |

                        | %%GLOBAL_StatusMessage%% |

                        | %%GLOBAL_AccountCurrentEmail%% |

                        | %%GLOBAL_AccountFirstName%% |

                        | %%GLOBAL_AccountLastName%% |

                        | %%GLOBAL_AccountCompanyName%% |

                        | %%GLOBAL_AccountPhone%% |

                        | %%GLOBAL_AccountFields%% |

                        | %%GLOBAL_HideEditAccountIntroMessage%% |

                        | %%GLOBAL_HideEditAccountErrorMessage%% |

                        | %%GLOBAL_StatusMessage%% |


                        # ForgotPasswordForm Panel 


                        The form shown for the customer to enter their email
                        address to have their password reset.


                        ## Available Panels 

                        |||

                        |---|---|

                        | ForgotPasswordForm |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideForgotPasswordError%% |

                        | %%GLOBAL_ErrorMessage%% |


                        # GetNewPasswordForm Panel 


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_CustomerId%% |

                        | %%GLOBAL_ForgottenPasswordToken%% |

                        | %%GLOBAL_CustomerEmailAddress%% |

                        | %%GLOBAL_HideForgotPasswordError%% |

                        | %%GLOBAL_ErrorMessage%% |


                        # IdealPaymentForm Panel 


                        ## Available Panels 

                        |||

                        |---|---|

                        | IdealPaymentForm |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_IdealIssuerOptions%% |


                        # LoginForm Panel 


                        The “Create an Account” and “Sign in to Your Account”
                        options shown on the login page.


                        ## Available Panels 

                        |||

                        |---|---|

                        | LoginForm |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideLoginNewAccountIntro%% |

                        | %%GLOBAL_ExistingUserHeading%% |

                        | %%GLOBAL_HideLoginMessage%% |

                        | %%GLOBAL_MessageClass%% |

                        | %%GLOBAL_LoginMessage%% |

                        | %%GLOBAL_NewAccountHeading%% |

                        | %%GLOBAL_HideNewCustomerButton%% |


                        # ShippingAddressForm Panel 


                        The form containing the fields for either editing or
                        adding a shipping/billing address to the customer
                        address book.


                        ## Available Panels 

                        |||

                        |---|---|

                        | ShippingAddressForm |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_ShippingAddressFormAction%% |

                        | %%GLOBAL_ShipId%% |

                        | %%GLOBAL_ShipCustomFields%% |

                        | %%GLOBAL_ShippingAddressFormTitle%% |

                        | %%GLOBAL_HideAddShippingAddressIntroMessage%% |

                        | %%GLOBAL_ShippingAddressFormIntro%% |

                        | %%GLOBAL_HideAddShippingAddressMessage%% |

                        | %%GLOBAL_Message%% |


                        # CartEditProductFieldsForm Snippet 


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_CdnAppPath%% |

                        | %%GLOBAL_JSCacheToken%% |

                        | %%GLOBAL_jQueryUIPath%% |

                        | %%GLOBAL_MASTER_THEME_PATH%% |

                        | %%GLOBAL_CustomizeProductTitle%% |

                        | %%GLOBAL_ItemId%% |

                        | %%SNIPPET_ProductFieldsList%% |

                        | %%GLOBAL_ProductAttributeList%% |

                        | %%LNG_Cancel%% |

                        | %%LNG_Save%% |

                        | %%LNG_EnterRequiredField%% |

                        | %%LNG_InvalidFileTypeJS%% |

                        | %%LNG_DeleteProductFieldFileConfirmation%% |


                        # ListCheckForm Snippet 


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_CdnAppPath%% |

                        | %%GLOBAL_IMG_PATH%% |

                        | %%LNG_InvoicePendingPaymentText%% |

                        | %%GLOBAL_JSCacheToken%% |
                    - type: text
                      data: >-
                        # GiftCertificateBalanceRemaining Panel 


                        Shown after a customer enters their gift certificate
                        code and displays the remaining balance and expiry date.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_GiftCertificateCode%% |

                        | %%GLOBAL_RemainingBalance%% |
                    - type: text
                      data: |-
                        # HeaderSearch Panel 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_OriginalSearchQuery%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_SiteColor%% |

                        # Header Panel 

                        ## Available Panels 
                        |||
                        |---|---|
                        | Header |

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_MaintenanceNotice%% |
                        | %%GLOBAL_HeaderLogo%% |

                        # HtmlHead Panel 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_HeadFonts%% |
                        | %%GLOBAL_Favicon%% |
                        | %%GLOBAL_OptimizerControlScript%% |
                        | %%GLOBAL_Stylesheets%% |
                        | %%GLOBAL_HeadRSSLinks%% |
                        | %%GLOBAL_TrackingCode%% |
                        | %%GLOBAL_DesignModeStyleSheet%% |
                        | %%GLOBAL_HeaderImageStyle%% |
                        | %%GLOBAL_jQueryPath%% |
                        | %%GLOBAL_CdnAppPath%% |
                        | %%GLOBAL_JSCacheToken%% |
                        | %%GLOBAL_CdnAppPath%% |
                        | %%GLOBAL_JSCacheToken%% |
                        | %%GLOBAL_CdnAppPath%% |
                        | %%GLOBAL_JSCacheToken%% |
                        | %%GLOBAL_FastCart%% |
                        | %%GLOBAL_ProductThumbImageWidth%% |
                        | %%GLOBAL_ProductThumbImageHeight%% |
                        | %%GLOBAL_AdditionalScriptTags%% |
                        | %%GLOBAL_QuickSearchJS%% |
                        | %%GLOBAL_RTLStyles%% |
                        | %%GLOBAL_CharacterSet%% |
                        | %%GLOBAL_AdditionalMetaTags%% |
                    - type: text
                      data: >-
                        # HomeFeaturedProducts Panel 


                        A list of store-wide featured products (products marked
                        as featured in the control panel)


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideHomeFeaturedProductsPanel%% |


                        # HomeNewProducts Panel 


                        A list of store-wide new products (based on the date
                        they were added to the store)


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideHomeNewProductsPanel%% |


                        # HomeRecentBlogs Panel 


                        A list of products that are on sale (those that have a
                        sale price configured that’s less than the normal price
                        of the product)


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideHomeRecentBlogsPanel%% |


                        # HomeSlideShow Panel 


                        ## Available Panels 

                        |||

                        |---|---|

                        | HomeSlideShow |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_SwapFrequency%% |
                    - type: text
                      data: |-
                        # AddShippingAddressJavaScript Panel 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_AddressFormFieldID%% |
                        | %%GLOBAL_CdnAppPath%% |
                        | %%GLOBAL_JSCacheToken%% |
                        | %%GLOBAL_FormFieldRequiredJS%% |
                        | %%GLOBAL_CheckEmail%% |
                        | %%GLOBAL_AddressFormFieldID%% |

                        # ChooseCheckoutProviderJavaScript Panel 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_SiteColor%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_SiteColor%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_SiteColor%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_SiteColor%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_SiteColor%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_SiteColor%% |

                        # ContactFormJavaScript Panel 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_HideCaptcha%% |

                        # CreateAccountJavaScript Panel 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_CdnAppPath%% |
                        | %%GLOBAL_JSCacheToken%% |
                        | %%GLOBAL_CreateAccountAccountFormFieldID%% |
                        | %%GLOBAL_CdnAppPath%% |
                        | %%GLOBAL_JSCacheToken%% |
                        | %%GLOBAL_FormFieldRequiredJS%% |
                        | %%GLOBAL_CreateAccountAccountFormFieldID%% |
                        | %%GLOBAL_CreateAccountShippingFormFieldID%% |

                        # EditAccountJavaScript Panel 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_CdnAppPath%% |
                        | %%GLOBAL_JSCacheToken%% |
                        | %%GLOBAL_EditAccountAccountFormFieldID%% |
                        | %%GLOBAL_FormFieldRequiredJS%% |

                        # HomeSlideShowJavaScript Panel 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_CdnAppPath%% |

                        # SearchJavaScript Panel 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_SearchId%% |
                        | %%GLOBAL_SelectedCategoryOptions%% |
                        | %%GLOBAL_AutoHideSearchForm%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_CategoryOptions%% |
                    - type: text
                      data: >-
                        # NewsBreadcrumb Panel 


                        The breadcrumb navigation menu.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_NewsTitle%% |


                        # NewsComments Panel 


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_CommentsHTML%% |


                        # NewsContent Panel 


                        Used to display an individual news item on the news
                        page.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_NewsTitle%% |

                        | %%GLOBAL_NewsDate%% |

                        | %%GLOBAL_NewsContent%% |
                    - type: text
                      data: >
                        # PageComments Panel 


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_CommentsHTML%% |


                        # PageContent Panel 


                        Displays the title and the content of the web page
                        currently being viewed.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_PageNameOptimizerScriptTag%% |

                        | %%GLOBAL_PageTitle%% |

                        | %%GLOBAL_PageNameOptimizerNoScriptTag%% |

                        | %%GLOBAL_PageDescriptionOptimizerScriptTag%% |

                        | %%GLOBAL_PageContent%% |

                        | %%GLOBAL_PageDescriptionOptimizerNoScriptTag%% |


                        # PagesMenu Panel 


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_ActivePageHomeClass%% |
                    - type: text
                      data: >-
                        # ProductBreadcrumb Panel 


                        The breadcrumb navigation menu.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideBreadCrumbs%% |

                        | %%GLOBAL_BreadCrumbs%% |


                        # ProductByCategory Panel 


                        Shows a list of categories related to the product
                        currently being viewed.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_FindByCategory%% |

                        | %%GLOBAL_HideSectionSeparator%% |


                        # ProductDescription Panel 


                        Contains the description of the product currently being
                        viewed.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_ProductDescriptionOptimizerScriptTag%% |

                        | %%GLOBAL_ProductDesc%% |

                        | %%GLOBAL_ProductDescriptionOptimizerNoScriptTag%% |

                        | %%GLOBAL_HideSectionSeparator%% |


                        # ProductDetails Panel 


                        Contains the details (price, brand, shipping
                        information, product image and product name) to be shown
                        on the product view page.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_ProductCondition%% |

                        | %%GLOBAL_HideWeight%% |

                        | %%GLOBAL_ProductWeight%% |

                        | %%GLOBAL_HideRating%% |

                        | %%GLOBAL_IMG_PATH%% |

                        | %%GLOBAL_Rating%% |

                        | %%GLOBAL_HideReviewLink%% |

                        | %%GLOBAL_ReviewLinkOnClick%% |

                        | %%GLOBAL_ReviewLinkText%% |

                        | %%GLOBAL_HideAvailability%% |

                        | %%GLOBAL_Availability%% |

                        | %%GLOBAL_CurrentProdThumbImage%% |

                        | %%GLOBAL_HideShipping%% |

                        | %%GLOBAL_ShippingPrice%% |

                        | %%GLOBAL_HideMinQty%% |

                        | %%GLOBAL_MinQty%% |

                        | %%GLOBAL_HideMaxQty%% |

                        | %%GLOBAL_MaxQty%% |

                        | %%GLOBAL_ProductThumbWidth%% |

                        | %%GLOBAL_HideCurrentStock%% |

                        | %%GLOBAL_CurrentStockLabel%% |

                        | %%GLOBAL_InventoryList%% |

                        | %%GLOBAL_ProductThumbHeight%% |

                        | %%GLOBAL_HideGiftWrapMessage%% |

                        | %%GLOBAL_GiftWrappingAvailable%% |

                        | %%GLOBAL_ProductMaxZoomWidth%% |

                        | %%GLOBAL_FacebookLikeButtonBelow%% |

                        | %%GLOBAL_ProductMaxZoomHeight%% |

                        | %%GLOBAL_ProductMaxTinyWidth%% |

                        | %%GLOBAL_ProductMaxTinyHeight%% |

                        | %%GLOBAL_CdnAppPath%% |

                        | %%GLOBAL_JSCacheToken%% |

                        | %%GLOBAL_ProdImageJavascript%% |

                        | %%GLOBAL_ShowImageZoomer%% |

                        | %%GLOBAL_ProductDetailFlashMessages%% |

                        | %%GLOBAL_JSCacheToken%% |

                        | %%GLOBAL_productAttributesCssPath%% |

                        | %%GLOBAL_ProductNameOptimizerScriptTag%% |

                        | %%GLOBAL_ProductName%% |

                        | %%GLOBAL_ProductNameOptimizerNoScriptTag%% |

                        | %%GLOBAL_AddThisLink%% |

                        | %%GLOBAL_HideProductThumb%% |

                        | %%GLOBAL_LightBoxImageJavascript%% |

                        | %%GLOBAL_jQueryUIPath%% |

                        | %%GLOBAL_HideImageCarousel%% |

                        | %%GLOBAL_IMG_PATH%% |

                        | %%GLOBAL_IMG_PATH%% |

                        | %%GLOBAL_CdnAppPath%% |

                        | %%GLOBAL_JSCacheToken%% |

                        | %%GLOBAL_HideMorePicturesLink%% |

                        | %%GLOBAL_SeeMorePictures%% |

                        | %%GLOBAL_TinyImageClickJavascript%% |

                        | %%GLOBAL_PinterestButton%% |

                        | %%GLOBAL_FacebookLikeButtonAbove%% |

                        | %%GLOBAL_HideRRP%% |

                        | %%GLOBAL_CdnAppPath%% |

                        | %%GLOBAL_JSCacheToken%% |

                        | %%GLOBAL_RetailPrice%% |

                        | %%GLOBAL_HidePrice%% |

                        | %%GLOBAL_PriceLabel%% |

                        | %%GLOBAL_ProductPrice%% |

                        | %%GLOBAL_CdnAppPath%% |

                        | %%GLOBAL_JSCacheToken%% |

                        | %%GLOBAL_IncludingExcludingTax%% |

                        | %%GLOBAL_YouSave%% |

                        | %%GLOBAL_HideSKU%% |

                        | %%GLOBAL_SKU%% |

                        | %%GLOBAL_HideVendorDetails%% |

                        | %%GLOBAL_VendorName%% |

                        | %%GLOBAL_HideBrandLink%% |

                        | %%GLOBAL_BrandLink%% |

                        | %%GLOBAL_BrandName%% |

                        | %%GLOBAL_HideCondition%% |


                        # ProductImagePopup Panel 


                        Shows an individual product image in the product image
                        popup and the buttons to navigate between the product
                        images.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_IMG_PATH%% |

                        | %%GLOBAL_IMG_PATH%% |

                        | %%GLOBAL_ProductName%% |

                        | %%GLOBAL_NavLinkDisplay%% |

                        | %%GLOBAL_DisablePrevLink%% |

                        | %%GLOBAL_DisableNextLink%% |

                        | %%GLOBAL_TotalImages%% |


                        # ProductOtherDetails Panel 


                        Displays the custom fields configured for the product
                        being shown.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideCustomFields%% |


                        # ProductReviews Panel 


                        A list of product reviews for this particular product as
                        well as the form for posting a new review for this
                        product.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_CommentsHTML%% |


                        # ProductTabs Panel 


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_ProductTabsOptimizerScriptTag%% |

                        | %%GLOBAL_ProductTabsControlScript%% |

                        | %%GLOBAL_ProductTabsOptimizerNoScriptTag%% |


                        # ProductVideos Panel 


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_FeaturedVideo%% |

                        | %%GLOBAL_FeaturedVideo%% |

                        | %%GLOBAL_HideSingleVideo%% |

                        | %%GLOBAL_VideoLength%% |

                        | %%GLOBAL_VideoTitleLong%% |

                        | %%GLOBAL_VideoDescriptionLong%% |

                        | %%GLOBAL_HideVideoList%% |

                        | %%GLOBAL_FeaturedVideo%% |

                        | %%GLOBAL_HideSectionSeparator%% |

                        | %%GLOBAL_ProductImageMode%% |


                        # ProductWarranty Panel 


                        If the product has any warranty text/information set, it
                        will be shown in this panel.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_ProductWarranty%% |

                        | %%GLOBAL_HideSectionSeparator%% |
                    - type: text
                      data: >-
                        # PurchaseGiftCertificate Panel 


                        Displays the form used to make the purchase of a gift
                        certificate from the store.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideGiftCertificateForm%% |

                        | %%GLOBAL_GiftCertificateMinimum%% |

                        | %%GLOBAL_CartItemId%% |

                        | %%GLOBAL_GiftCertificateMaximum%% |

                        | %%GLOBAL_CertificateTo%% |

                        | %%GLOBAL_GiftCertificatePreviewModalTitle%% |

                        | %%GLOBAL_CertificateToEmail%% |

                        | %%GLOBAL_CertificateFrom%% |

                        | %%GLOBAL_CertificateFromEmail%% |

                        | %%GLOBAL_CertificateTitle%% |

                        | %%GLOBAL_CertificateMessage%% |

                        | %%GLOBAL_HideGiftCertificateAmountSelect%% |

                        | %%GLOBAL_GiftCertificateAmountSelect%% |

                        | %%GLOBAL_HideGiftCertificateCustomAmount%% |

                        | %%GLOBAL_CustomCertificateAmount%% |

                        | %%GLOBAL_GiftCertificateRange%% |

                        | %%GLOBAL_HideExpiryInfo%% |

                        | %%GLOBAL_AgreeChecked%% |

                        | %%GLOBAL_GiftCertificateTerms%% |

                        | %%GLOBAL_AgreeChecked%% |

                        | %%GLOBAL_HideThemeSelect%% |

                        | %%GLOBAL_HideThemeSelect%% |

                        | %%GLOBAL_GiftCertificateThemes%% |

                        | %%GLOBAL_SaveGiftCertificateButton%% |

                        | %%GLOBAL_HideErrorMessage%% |

                        | %%GLOBAL_ErrorMessage%% |
                    - type: text
                      data: |-
                        # QuickViewContent Panel 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ProductWeight%% |
                        | %%GLOBAL_HideAvailability%% |
                        | %%GLOBAL_Availability%% |
                        | %%GLOBAL_QuickViewShareLinks%% |
                        | %%GLOBAL_HideShipping%% |
                        | %%GLOBAL_ShippingPrice%% |
                        | %%GLOBAL_HideMinQty%% |
                        | %%GLOBAL_MinQty%% |
                        | %%GLOBAL_HideMaxQty%% |
                        | %%GLOBAL_MaxQty%% |
                        | %%GLOBAL_HideCurrentStock%% |
                        | %%GLOBAL_CurrentStockLabel%% |
                        | %%GLOBAL_InventoryList%% |
                        | %%GLOBAL_HideGiftWrapMessage%% |
                        | %%GLOBAL_GiftWrappingAvailable%% |
                        | %%GLOBAL_HideRating%% |
                        | %%GLOBAL_HideProductAttributeList%% |
                        | %%GLOBAL_ProductAttributeList%% |
                        | %%GLOBAL_DisplayAdd%% |
                        | %%GLOBAL_DisplayAddQty%% |
                        | %%GLOBAL_DisplayAddQty%% |
                        | %%GLOBAL_AddToCartQty%% |
                        | %%GLOBAL_QuickViewRating%% |
                        | %%GLOBAL_HideBulkDiscountLink%% |
                        | %%GLOBAL_BulkDiscountThickBoxRates%% |
                        | %%GLOBAL_CdnAppPath%% |
                        | %%GLOBAL_DisplayAdd%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_SiteColor%% |
                        | %%GLOBAL_DisplayAdd%% |
                        | %%GLOBAL_QuickViewProductURL%% |
                        | %%GLOBAL_CdnAppPath%% |
                        | %%GLOBAL_ItemSoldOut%% |
                        | %%GLOBAL_QuickViewProductName%% |
                        | %%GLOBAL_OptionMessage%% |
                        | %%GLOBAL_QuickViewProductURL%% |
                        | %%GLOBAL_QuickViewReviews%% |
                        | %%GLOBAL_ShowAddToCartQtyBox%% |
                        | %%GLOBAL_ProductMinMaxQtyJavascript%% |
                        | %%GLOBAL_EventDateJavascript%% |
                        | %%GLOBAL_QuickViewProductURL%% |
                        | %%GLOBAL_ThumbImageURL%% |
                        | %%GLOBAL_QuickViewProductDescription%% |
                        | %%GLOBAL_CartLink%% |
                        | %%GLOBAL_FastCartButtonJs%% |
                        | %%GLOBAL_ProductOptionRequired%% |
                        | %%GLOBAL_ProductId%% |
                        | %%GLOBAL_HideRRP%% |
                        | %%GLOBAL_RetailPrice%% |
                        | %%GLOBAL_HidePrice%% |
                        | %%GLOBAL_PriceLabel%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_IncludingExcludingTax%% |
                        | %%GLOBAL_YouSave%% |
                        | %%GLOBAL_HideSKU%% |
                        | %%GLOBAL_QuickViewFacebookLikeButton%% |
                        | %%GLOBAL_SKU%% |
                        | %%GLOBAL_HideVendorDetails%% |
                        | %%GLOBAL_VendorName%% |
                        | %%GLOBAL_QuickViewShareLinksLabel%% |
                        | %%GLOBAL_HideBrandLink%% |
                        | %%GLOBAL_BrandLink%% |
                        | %%GLOBAL_BrandName%% |
                        | %%GLOBAL_HideCondition%% |
                        | %%GLOBAL_ProductCondition%% |
                        | %%GLOBAL_HideWeight%% |
                    - type: text
                      data: >-
                        # SearchPageHeader Panel


                        The header containing the search form and breadcrumb
                        navigation menu.


                        ## Available Panels

                        |||

                        |---|---|

                        | SearchPageHeader |


                        ## Available Variables

                        |||

                        |---|---|

                        | %%GLOBAL_HideAdvancedOptions%% |

                        | %%GLOBAL_FormattedSearchQuery%% |

                        | %%GLOBAL_BrandNameOptions%% |

                        | %%GLOBAL_HideAdvancedLink%% |

                        | %%GLOBAL_IMG_PATH%% |

                        | %%GLOBAL_HideProductSearchOptions%% |

                        | %%GLOBAL_HideProductSearchOptions%% |

                        | %%GLOBAL_PriceFrom%% |

                        | %%GLOBAL_PriceTo%% |

                        | %%GLOBAL_HideProductSearchOptions%% |

                        | %%GLOBAL_HideProductSearchOptions%% |

                        | %%GLOBAL_CdnAppPath%% |

                        | %%GLOBAL_SearchTitle%% |

                        | %%GLOBAL_HideRelatedSearches%% |

                        | %%GLOBAL_ShowSearchSuggestion%% |

                        | %%GLOBAL_SearchId%% |

                        | %%GLOBAL_SuggestQuery%% |

                        | %%GLOBAL_SuggestQueryEscaped%% |


                        # SearchPageProducts Panel


                        ## Available Variables

                        |||

                        |---|---|

                        | %%GLOBAL_HideSearchResults%% |

                        | %%GLOBAL_SearchResults%% |


                        # SearchPage Panel


                        If a search is being performed, this panel will be shown
                        containing any results matching the search terms.


                        ## Available Panels

                        |||

                        |---|---|

                        | SearchPage |


                        ## Available Variables

                        |||

                        |---|---|

                        | %%GLOBAL_ContentContainerDisplay%% |

                        | %%GLOBAL_HideSearchPage%% |

                        | %%GLOBAL_SelectedSearchTab%% |

                        | %%GLOBAL_ProductTabActive%% |

                        | %%GLOBAL_ProductTabUrl%% |

                        | %%GLOBAL_ContentTabActive%% |

                        | %%GLOBAL_ContentTabUrl%% |

                        | %%GLOBAL_ProductContainerDisplay%% |


                        # SearchTabContents Panel


                        ## Available Variables

                        |||

                        |---|---|

                        | %%GLOBAL_HideSearchResultsContent%% |

                        | %%GLOBAL_SearchResultsContent%% |

                        | %%GLOBAL_HideSearchResultsNoResult%% |

                        | %%GLOBAL_OriginalSearchQuery%% |


                        # SearchTabProducts Panel


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideSearchResultsProduct%% |

                        | %%GLOBAL_SearchResultsProduct%% |

                        | %%GLOBAL_SnippetSearchResultsFeed%% |

                        | %%GLOBAL_HideSearchResultsNoResult%% |

                        | %%GLOBAL_OriginalSearchQuery%% |

                        | %%GLOBAL_HideSearchResultsCategoryAndBrand%% |

                        | %%GLOBAL_HideSearchResultsCategory%% |

                        | %%GLOBAL_SearchResultsCategory%% |

                        | %%GLOBAL_HideSearchResultsBrand%% |

                        | %%GLOBAL_SearchResultsBrand%% |
                    - type: text
                      data: |-
                        # ShareProductById Panel 

                        ## Available Panels 
                        |||
                        |---|---|
                        | ShareProductById |

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_HideChooseAnotherToShare%% |
                        | %%GLOBAL_FirstProductId%% |
                        | %%GLOBAL_SharingData%% |
                    - type: text
                      data: |-
                        # ShareProductChoices Panel 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_IMG_PATH%% |
                    - type: text
                      data: >
                        # SideAccountMenu Panel 


                        The list of links/options available in the “My Account”
                        section of the store.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideWishlist%% |

                        | %%GLOBAL_NumWishListItems%% |

                        | %%GLOBAL_HideMessagesMenu%% |

                        | %%GLOBAL_NumNewMessages%% |

                        | %%GLOBAL_HideReturnRequestsMenu%% |


                        # SideAccountStoreCredit Panel 


                        If the customer has store credit, shows the amount of
                        store credit their account contains


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideStoreCredit%% |

                        | %%GLOBAL_StoreCreditAmount%% |


                        # SideBrandTagCloud Panel 


                        A tag cloud showing the popularity/density of brand
                        names on the store.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideBrandTagCloudPanel%% |


                        # SideCartContents Panel 


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_AdditionalCheckoutButtons%% |

                        | %%GLOBAL_HideCartOptions%% |

                        | %%GLOBAL_HidePurchasingOptions%% |

                        | %%GLOBAL_HideSideCart%% |

                        | %%GLOBAL_SideCartItemCount%% |


                        # SideCategoryList Panel 


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_SideCategoryListTypeClass%% |


                        # SideCategoryNewProducts Panel 


                        A list of new products in the category currently being
                        viewed.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideSideCategoryNewProductsPanel%% |


                        # SideCategoryPopularProducts Panel 


                        List of the popular products (based on the
                        ratings/reviews) for a particular category.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideSideCategoryPopularProductsPanel%% |


                        # SideCategoryShopByPrice Panel 


                        The price point options for browsing items between
                        different price ranges in the current category.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideSideCategoryShopByPricePanel%% |


                        # SideCategoryTopSellers Panel 


                        The list of top selling products (based on the number
                        sold) for a particular category.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideSideCategoryTopSellersPanel%% |


                        # SideCouponCodeBox Panel 


                        The coupon code entry box shown on the side of the cart
                        page.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_IMG_PATH%% |

                        | %%GLOBAL_SiteColor%% |


                        # SideGiftCertificateCodeBox Panel 


                        The gift certificate code entry box shown on the side of
                        the cart page.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_IMG_PATH%% |

                        | %%GLOBAL_SiteColor%% |


                        # SideLiveChatServices Panel 


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_SideLiveChatCode%% |


                        # SideNewProducts Panel 


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideSideNewProductsPanel%% |


                        # SideNewsletterBox Panel 


                        ## Available Panels 

                        |||

                        |---|---|

                        | SideNewsletterBox |


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_NewsletterButtonOptimizerScriptTag%% |

                        | %%GLOBAL_IMG_PATH%% |

                        | %%GLOBAL_SiteColor%% |

                        | %%GLOBAL_NewsletterBoxOptimizerNoScriptTag%% |

                        | %%GLOBAL_NewsletterBoxControlScript%% |

                        | %%GLOBAL_NewsletterHeaderOptimizerScriptTag%% |

                        | %%GLOBAL_NewsletterBoxOptimizerNoScriptTag%% |

                        #  SidePopularProducts Panel


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideSidePopularProductsPanel%% |

                        | %%SNIPPET_SidePopularProductsFeed%% |

                        | %%LNG_PopularProducts%% |

                        | %%SNIPPET_SidePopularProducts%% |


                        # SideProductAddToWishList Panel 


                        The button to add this product to the customer’s
                        wishlist.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_IMG_PATH%% |

                        | %%GLOBAL_SiteColor%% |

                        | %%GLOBAL_HidePurchasingOptions%% |

                        | %%GLOBAL_HideWishlist%% |

                        | %%GLOBAL_ProductId%% |

                        | %%GLOBAL_ProductName%% |

                        | %%GLOBAL_WishLists%% |


                        # SideProductAlsoBought Panel 


                        Shows a list of products that customers have purchased
                        who have also purchased the product being shown.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_AlsoBoughtProductListing%% |


                        # SideProductRecentlyViewed Panel 


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideSideProductRecentlyViewedCompare%% |

                        | %%GLOBAL_IMG_PATH%% |

                        | %%GLOBAL_SiteColor%% |

                        | %%GLOBAL_HideRecentlyViewedProductsPanel%% |

                        | %%GLOBAL_CompareLink%% |


                        # SideProductRelated Panel 


                        A list of products related to this product (either
                        automatically fetched or manually configured)


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideRelatedProductsPanel%% |


                        # SideShopByBrandFull Panel 


                        A complete list of brand names on the store ordered
                        alphabetically.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideSideShopByBrandFullPanel%% |


                        # SideShopByBrand Panel 


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideShopByBrandPanel%% |


                        # SideTopSellers Panel 


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideSideTopSellersPanel%% |
                    - type: text
                      data: |-
                        # SimilarProductsByTag Panel 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_HideSectionSeparator%% |
                    - type: text
                      data: |-
                        # SitemapBreadcrumb Panel 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_HideIfSubsection%% |
                        | %%GLOBAL_HideIfNoSubsection%% |
                        | %%GLOBAL_SitemapLink%% |
                        | %%GLOBAL_HideIfNoSubsection%% |
                        | %%GLOBAL_SitemapSubsectionTrail%% |
                    - type: text
                      data: |-
                        # Syndicate Panel 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ShowNewProductsFeed%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_ShowPopularProductsFeed%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_ShowFeaturedProductsFeed%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_ShowSearchFeed%% |
                        | %%GLOBAL_ShowNewsFeed%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_IMG_PATH%% |
                    - type: text
                      data: |-
                        # TagProducts Panel 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_CompareLink%% |
                        | %%GLOBAL_TagProductListing%% |
                        | %%GLOBAL_HideCompareItems%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_SiteColor%% |
                        | %%GLOBAL_TaggedProducts%% |
                    - type: text
                      data: |-
                        # TopMenu Panel 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_HideWishlist%% |
                        | %%GLOBAL_HideCartOptions%% |
                        | %%GLOBAL_HideAccountOptions%% |
                        | %%GLOBAL_LoginOrLogoutText%% |
                        | %%GLOBAL_OptimizerLinkScript%% |
                        | %%GLOBAL_HidePurchasingOptions%% |
                        | %%GLOBAL_LiveChatCodeEnabled%% |
                        | %%GLOBAL_LiveChatCode%% |
                        | %%GLOBAL_HideAccountOptions%% |
                        | %%GLOBAL_HideAccountOptions%% |
                    - type: text
                      data: >-
                        # WishListAddForm Panel 


                        The form that allows creation of a wishlist.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_PageTitle%% |

                        | %%GLOBAL_HideNormalMessage%% |

                        | %%GLOBAL_WishListMessage%% |

                        | %%GLOBAL_HideErrorMessage%% |

                        | %%GLOBAL_WishListMessage%% |

                        | %%GLOBAL_HideWishListAddFrom%% |

                        | %%GLOBAL_HideSuccessMessage%% |

                        | %%GLOBAL_WishListMessage%% |

                        | %%GLOBAL_WishListAction%% |

                        | %%GLOBAL_WishListName%% |

                        | %%GLOBAL_SelectPublic%% |

                        | %%GLOBAL_PageTitle%% |


                        # WishListItems Panel 


                        Used when displaying the contents of a particular
                        wishlist.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_WishListName%% |

                        | %%GLOBAL_HideNormalMessage%% |

                        | %%GLOBAL_WishListMessage%% |

                        | %%GLOBAL_HideErrorMessage%% |

                        | %%GLOBAL_WishListMessage%% |

                        | %%GLOBAL_HideWishListItems%% |

                        | %%GLOBAL_HideSuccessMessage%% |

                        | %%GLOBAL_WishListMessage%% |

                        | %%GLOBAL_HideShareWishList%% |

                        | %%GLOBAL_ShareWishListClass%% |

                        | %%GLOBAL_PublicWishListUrl%% |

                        | %%GLOBAL_ShareWishListIntro%% |

                        | %%GLOBAL_WishListName%% |


                        # WishLists Panel 


                        Shown whenever a list of wishlists the customer has is
                        to be displayed.


                        ## Available Variables 

                        |||

                        |---|---|

                        | %%GLOBAL_HideNormalMessage%% |

                        | %%GLOBAL_WishListMessage%% |

                        | %%GLOBAL_HideErrorMessage%% |

                        | %%GLOBAL_WishListMessage%% |

                        | %%GLOBAL_HideSuccessMessage%% |

                        | %%GLOBAL_WishListMessage%% |

                        | %%GLOBAL_HideWishLists%% |

                        | %%GLOBAL_HideWishListsTable%% |
              - title: Snippets
                route:
                  path: /blueprint-snippets
                data:
                  blocks:
                    - type: text
                      data: |-
                        # AccountDownloadItemList Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_DownloadName%% |
                        | %%GLOBAL_DisplayDownloadLink%% |
                        | %%GLOBAL_DownloadLink%% |
                        | %%GLOBAL_DownloadSize%% |
                        | %%GLOBAL_DownloadColor%% |
                        | %%GLOBAL_DisplayDownloadExpired%% |
                        | %%GLOBAL_ExpiryInfo%% |
                        | %%GLOBAL_DownloadDescription%% |

                        # AccountInboxMessage Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_MessageSubject%% |
                        | %%GLOBAL_MessageDate%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_Icon%% |
                        | %%GLOBAL_Sender%% |
                        | %%LNG_MessageSaid%% |
                        | %%GLOBAL_MessageContent%% |

                        # AccountInboxOrderItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_OrderItemMessage%% |
                        | %%GLOBAL_OrderId%% |

                        # AccountNewReturnItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ItemClass%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ProductOptions%% |
                        | %%GLOBAL_ItemClass%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_OrderProductId%% |
                        | %%GLOBAL_ProductQtySelect%% |

                        # AccountOrderItemDownloadLink Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ShopPathSSL%% |
                        | %%GLOBAL_DownloadItemEncrypted%% |

                        # AccountOrderItemList Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_StrikeStart%% |
                        | %%GLOBAL_ItemQty%% |
                        | %%GLOBAL_ItemName%% |
                        | %%GLOBAL_StrikeEnd%% |
                        | %%GLOBAL_Refunded%% |
                        | %%GLOBAL_ProductOptions%% |
                        | %%GLOBAL_DownloadLink%% |
                        | %%GLOBAL_HideExpectedReleaseDate%% |
                        | %%GLOBAL_ExpectedReleaseDate%% |

                        # AccountOrderItemRow Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ItemShippingRow%% |
                        | %%GLOBAL_ItemClass%% |
                        | %%GLOBAL_OrderProductId%% |
                        | %%GLOBAL_DisableReorder%% |
                        | %%GLOBAL_StrikeStart%% |
                        | %%GLOBAL_Qty%% |
                        | %%GLOBAL_Link%% |
                        | %%GLOBAL_Target%% |
                        | %%GLOBAL_Name%% |
                        | %%GLOBAL_ProductOptions%% |
                        | %%GLOBAL_EventDate%% |
                        | %%GLOBAL_StrikeEnd%% |
                        | %%GLOBAL_Refunded%% |
                        | %%GLOBAL_DownloadsLink%% |
                        | %%GLOBAL_HideWrappingOptions%% |
                        | %%LNG_GiftWrapping%% |
                        | %%GLOBAL_GiftWrappingName%% |
                        | %%GLOBAL_HideItemMessage%% |
                        | %%GLOBAL_ReorderMessage%% |
                        | %%GLOBAL_HideExpectedReleaseDate%% |
                        | %%GLOBAL_ExpectedReleaseDate%% |
                        | %%GLOBAL_ItemClass%% |
                        | %%GLOBAL_Price%% |

                        # AccountOrderItemShippingRow Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%LNG_ItemsShippedTo%% |
                        | %%GLOBAL_ItemShippingRow_AddressLine%% |
                        | %%LNG_Price%% |

                        # AccountOrderItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ShopPath%% |
                        | %%GLOBAL_OrderId%% |
                        | %%LNG_HC_returnitem%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_SiteColor%% |
                        | %%LNG_ViewOrder%% |
                        | %%GLOBAL_DisableViewButton%% |
                        | %%GLOBAL_DisableReturnButton%% |
                        | %%LNG_ReturnOrderItems%% |
                        | %%LNG_Order%% |
                        | %%LNG_OrderDate%% |
                        | %%GLOBAL_OrderDate%% |
                        | %%LNG_YourOrderContainsTheFollowingItems2%% |
                        | %%GLOBAL_AccountOrderItemList%% |

                        # AccountOrderShipmentRow Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_DateShipped%% |
                        | %%GLOBAL_ShippingProvider%% |
                        | %%GLOBAL_HideShippingMethod%% |
                        | %%GLOBAL_ShippingMethod%% |
                        | %%GLOBAL_TrackingLink%% |

                        # AccountOrderStatusItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ShopPath%% |
                        | %%GLOBAL_OrderId%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_SiteColor%% |
                        | %%LNG_ViewOrder%% |
                        | %%LNG_Reorder%% |
                        | %%LNG_Order%% |
                        | %%LNG_OrderDate%% |
                        | %%GLOBAL_OrderDate%% |
                        | %%LNG_ThisOrderIsMarkedAs%% |
                        | %%GLOBAL_OrderStatus%% |
                        | %%GLOBAL_HidePaymentInstructions%% |
                        | %%LNG_YourOrderTotalIs%% |
                        | %%GLOBAL_OrderTotal%% |
                        | %%LNG_HeresHowToPayForYourOrder%% |
                        | %%GLOBAL_OrderInstructions%% |
                        | %%LNG_YourOrderContainsTheFollowingItems2%% |
                        | %%GLOBAL_AccountOrderItemList%% |

                        # AccountOrderTotalRow Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_label%% |
                        | %%GLOBAL_value%% |  

                        # AccountRecentlyViewedProducts Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ProductThumb%% |
                        | %%GLOBAL_ProductLink%% |
                        | %%GLOBAL_SearchTrackClass%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_ProductRating%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_HideProductRating%% |
                        | %%GLOBAL_HideCompareItems%% |
                        | %%GLOBAL_ProductId%% |
                        | %%LNG_Compare%% |

                        # AccountReturnItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%LNG_Return%% |
                        | %%GLOBAL_ReturnId%% |
                        | %%GLOBAL_ReturnStatus%% |
                        | %%LNG_ReturnedItem%% |
                        | %%GLOBAL_ReturnedQuantity%% |
                        | %%GLOBAL_ReturnedProduct%% |
                        | %%GLOBAL_ReturnedProductOptions%% |
                        | %%LNG_DateRequested%% |
                        | %%GLOBAL_DateRequested%% |
                        | %%LNG_ReturnReason%% |
                        | %%GLOBAL_ReturnReason%% |
                        | %%GLOBAL_HideReturnAction%% |
                        | %%LNG_ReturnAction%% |
                        | %%GLOBAL_ReturnAction%% |
                        | %%GLOBAL_HideReturnComment%% |
                        | %%LNG_YourComments%% |
                        | %%GLOBAL_ReturnComments%% |
                    - type: text
                      data: |-
                        # AddThisLink Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_AddThisServiceButtonMeta%% |
                        | %%GLOBAL_AddThisServiceButtons%% |
                    - type: text
                      data: |-
                        # AddressLabel Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ShipFullName%% |
                        | %%GLOBAL_ShipCompany%% |
                        | %%GLOBAL_ShipAddressLines%% |
                        | %%GLOBAL_ShipSuburb%% |
                        | %%GLOBAL_ShipState%% |
                        | %%GLOBAL_ShipZip%% |
                        | %%GLOBAL_ShipCountry%% |
                        | %%GLOBAL_ShipPhone%% |  
                    - type: text
                      data: |-
                        # BlogRecentPostsContentItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_Thumbnail%% |
                        | %%GLOBAL_RecentPostUrl%% |
                        | %%GLOBAL_RecentPostTitle%% |
                        | %%GLOBAL_RecentPostSummary%% |
                        | %%LNG_ReadMoreLink%% |
                    - type: text
                      data: |-
                        # BlogRecentPostsItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_RecentPostUrl%% |
                        | %%GLOBAL_RecentPostTitle%% |
                    - type: text
                      data: |-
                        # BrandCloudItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_BrandName%% |
                        | %%GLOBAL_NumProducts%% |
                        | %%LNG_Products%% |
                        | %%GLOBAL_TagSize%%% |
                        | %%GLOBAL_BrandLink%% |

                        # BrandMainPageMessage Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ChooseBrandFromList%% |

                        # BrandProductsItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ProductId%% |
                        | %%GLOBAL_ProductThumb%% |
                        | %%GLOBAL_ProductLink%% |
                        | %%GLOBAL_SearchTrackClass%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_ProductRating%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_HideProductRating%% |
                        | %%GLOBAL_HideCompareItems%% |
                        | %%LNG_Compare%% |
                        | %%GLOBAL_HideActionAdd%% |
                        | %%GLOBAL_ProductURL%% |
                        | %%GLOBAL_ProductAddText%% |
                    - type: text
                      data: |-
                        # BreadcrumbItemCurrent Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_CatTrailName%% |
                    - type: text
                      data: |-
                        # BreadcrumbItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_CatTrailLink%% |
                        | %%GLOBAL_CatTrailName%% |
                    - type: text
                      data: |-
                        # CartCoupon Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%LNG_Coupon%% |
                        | %%GLOBAL_CouponCode%% |
                        | %%GLOBAL_CouponId%% |
                        | %%LNG_Remove%% |
                        | %%GLOBAL_CouponDiscount%% |

                        # CartGiftCertificate Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%LNG_GiftCertificate%% |
                        | %%GLOBAL_GiftCertificateCode%% |
                        | %%GLOBAL_GiftCertificateRemaining%% |
                        | %%LNG_GiftCertificateRemaining%% |
                        | %%GLOBAL_GiftCertificateId%% |
                        | %%LNG_Remove%% |
                        | %%GLOBAL_CertificateAmountUsed%% |

                        # CartItemGiftCertificate Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_HideThumbColumn%% |
                        | %%GLOBAL_ProductNameSpan%% |
                        | %%GLOBAL_GiftCertificateName%% |
                        | %%GLOBAL_CartItemId%% |
                        | %%LNG_Edit%% |
                        | %%LNG_CapitalFor%% |
                        | %%GLOBAL_GiftCertificateTo%% |
                        | %%GLOBAL_CartItemId%% |
                        | %%LNG_Remove%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_ProductTotal%% |

                        # CartItemQtySelect Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_CartItemId%% |
                        | %%GLOBAL_QtySelectStyle%% |
                        | %%GLOBAL_Quantity1%% |
                        | %%GLOBAL_Quantity2%% |
                        | %%GLOBAL_Quantity3%% |
                        | %%GLOBAL_Quantity4%% |
                        | %%GLOBAL_Quantity5%% |
                        | %%GLOBAL_Quantity6%% |
                        | %%GLOBAL_Quantity7%% |
                        | %%GLOBAL_Quantity8%% |
                        | %%GLOBAL_Quantity9%% |
                        | %%GLOBAL_Quantity10%% |
                        | %%GLOBAL_Quantity11%% |
                        | %%GLOBAL_Quantity12%% |
                        | %%GLOBAL_Quantity13%% |
                        | %%GLOBAL_Quantity14%% |
                        | %%GLOBAL_Quantity15%% |
                        | %%GLOBAL_Quantity16%% |
                        | %%GLOBAL_Quantity17%% |
                        | %%GLOBAL_Quantity18%% |
                        | %%GLOBAL_Quantity19%% |
                        | %%GLOBAL_Quantity20%% |
                        | %%GLOBAL_Quantity21%% |
                        | %%GLOBAL_Quantity22%% |
                        | %%GLOBAL_Quantity23%% |
                        | %%GLOBAL_Quantity24%% |
                        | %%GLOBAL_Quantity25%% |
                        | %%GLOBAL_Quantity26%% |
                        | %%GLOBAL_Quantity27%% |
                        | %%GLOBAL_Quantity28%% |
                        | %%GLOBAL_Quantity29%% |
                        | %%GLOBAL_Quantity30%% |
                        | %%GLOBAL_QtyOptionSelected%% |

                        # CartItemQtyText Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_CartItemId%% |
                        | %%GLOBAL_ProductQuantity%% |

                        # CartItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_HideThumbColumn%% |
                        | %%GLOBAL_ProductImage%% |
                        | %%GLOBAL_ProductNameSpan%% |
                        | %%GLOBAL_ProductLink%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ProductOptions%% |
                        | %%GLOBAL_ProductAvailability%% |
                        | %%GLOBAL_HideExpectedReleaseDate%% |
                        | %%GLOBAL_ProductExpectedReleaseDate%% |
                        | %%GLOBAL_EventDate%% |
                        | %%GLOBAL_HideWrappingOptions%% |
                        | %%LNG_GiftWrapping%% |
                        | %%GLOBAL_GiftWrappingName%% |
                        | %%GLOBAL_CartItemId%% |
                        | %%GLOBAL_HideGiftWrappingAdd%% |
                        | %%LNG_Add%% |
                        | %%GLOBAL_HideGiftWrappingEdit%% |
                        | %%LNG_Change%% |
                        | %%LNG_Remove%% |
                        | %%GLOBAL_HideGiftMessagePreview%% |
                        | %%LNG_GiftMessage%% |
                        | %%GLOBAL_GiftMessagePreview%% |
                        | %%GLOBAL_CartItemQty%% |
                        | %%GLOBAL_HideCartItemRemove%% |
                        | %%GLOBAL_CartItemId%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_ProductTotal%% |

                        # CartProductAttribute Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ProductAttributeName%% |
                        | %%GLOBAL_ProductAttributeValue%% |

                        # CartProductAttributesList Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ProductAttributes%% |
                        | %%GLOBAL_CartItemId%% |
                        | %%LNG_Change%% |

                        # CartProductFieldCheckbox Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ProductFieldId%% |
                        | %%GLOBAL_ProductFieldRequired%% |
                        | %%GLOBAL_ProductFieldName%% |
                        | %%GLOBAL_ProductFieldType%% |
                        | %%GLOBAL_ProductFieldInputSize%% |
                        | %%GLOBAL_FieldRequiredClass%% |
                        | %%GLOBAL_ProductFieldValue%% |

                        # CartProductFieldFile Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ProductFieldId%% |
                        | %%GLOBAL_ProductFieldRequired%% |
                        | %%GLOBAL_ProductFieldName%% |
                        | %%GLOBAL_FieldRequiredClass%% |
                        | %%GLOBAL_ProductFieldInputSize%% |
                        | %%GLOBAL_ProductFieldValue%% |
                        | %%GLOBAL_HideCartFileName%% |
                        | %%LNG_Currently%% |
                        | %%GLOBAL_ShopPath%% |
                        | %%GLOBAL_ItemId%% |
                        | %%GLOBAL_ProductFieldFileValue%% |
                        | %%GLOBAL_HideDeleteFileLink%% |
                        | %%LNG_Delete%% |
                        | %%GLOBAL_HideFileHelp%% |
                        | %%LNG_Size%% |
                        | %%GLOBAL_FileSize%% |
                        | %%LNG_Type%% |
                        | %%GLOBAL_FileTypes%% |
                        | %%GLOBAL_CurrentProductFile%% |

                        # CartProductFieldInput Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ProductFieldId%% |
                        | %%GLOBAL_ProductFieldRequired%% |
                        | %%GLOBAL_ProductFieldName%% |
                        | %%GLOBAL_ProductFieldType%% |
                        | %%GLOBAL_ProductFieldId%% |
                        | %%GLOBAL_FieldRequiredClass%% |
                        | %%GLOBAL_ProductFieldInputSize%% |
                        | %%GLOBAL_ProductFieldValue%% |

                        # CartProductFieldSelect Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ProductFieldId%% |
                        | %%GLOBAL_ProductFieldRequired%% |
                        | %%GLOBAL_ProductFieldName%% |
                        | %%GLOBAL_FieldRequiredClass%% |
                        | %%GLOBAL_ProductFieldInputSize%% |
                        | %%GLOBAL_SelectOptions%% |

                        # CartProductFieldTextarea Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ProductFieldId%% |
                        | %%GLOBAL_ProductFieldRequired%% |
                        | %%GLOBAL_ProductFieldName%% |
                        | %%GLOBAL_FieldRequiredClass%% |
                        | %%GLOBAL_ProductFieldValue%% |

                        # CartProductFields Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_CustomFieldName%% |
                        | %%GLOBAL_CustomFieldValue%% |

                        # CartShippingQuoteRow Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ShippingQuoteId%% |
                        | %%GLOBAL_ShipperName%% |
                        | %%GLOBAL_TransitTime%% |
                        | %%GLOBAL_ShippingPrice%% |

                        # CartShippingTransitTime Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_TransitTime%% |

                        # CartTotalTaxRow Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_TaxName%% |
                        | %%GLOBAL_TaxCost%% |
                    - type: text
                      data: |-
                        # CategoryPagingItemCurrent Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_PageNumber%% |

                        # CategoryPagingItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_PageLink%% |
                        | %%GLOBAL_PageNumber%% |

                        # CategoryPagingNext Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_NextLink%% |
                        | %%LNG_Next%% |  

                        # CategoryPagingPrevious Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_PrevLink%% |
                        | %%LNG_Previous%% |

                        # CategoryPaging Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%SNIPPET_CategoryPagingPrevious%% |
                        | %%SNIPPET_CategoryPagingNext%% |
                        | %%LNG_Pages%% |
                        | %%SNIPPET_PagingData%% |

                        # CategoryProductsItemList Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_AlternateClass%% |
                        | %%GLOBAL_ProductId%% |
                        | %%GLOBAL_ProductThumb%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_AddToCartQty%% |
                        | %%GLOBAL_ProductLink%% |
                        | %%GLOBAL_SearchTrackClass%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ProductRating%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_HideProductRating%% |
                        | %%GLOBAL_ProductDescription%% |
                        | %%GLOBAL_HideCompareItems%% |
                        | %%LNG_Compare%% |
                        | %%GLOBAL_HideActionAdd%% |
                        | %%GLOBAL_ProductURL%% |
                        | %%GLOBAL_ProductAddText%% |

                        # CategoryProductsItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_AlternateClass%% |
                        | %%GLOBAL_ProductId%% |
                        | %%GLOBAL_ProductThumb%% |
                        | %%GLOBAL_ProductLink%% |
                        | %%GLOBAL_SearchTrackClass%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_ProductRating%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_HideProductRating%% |
                        | %%GLOBAL_HideCompareItems%% |
                        | %%LNG_Compare%% |
                        | %%GLOBAL_HideActionAdd%% |
                        | %%GLOBAL_ProductURL%% |
                        | %%GLOBAL_ProductAddText%% |

                        # CategorySortBox Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_URL%% |
                        | %%GLOBAL_HiddenSortField%% |
                        | %%LNG_SortBy%% |
                        | %%GLOBAL_SortFeaturedSelected%% |
                        | %%LNG_FeaturedItems%% |
                        | %%GLOBAL_SortNewestSelected%% |
                        | %%LNG_NewestItems%% |
                        | %%GLOBAL_SortBestSellingSelected%% |
                        | %%LNG_Bestselling%% |
                        | %%GLOBAL_SortAlphaAsc%% |
                        | %%LNG_AlphaAsc%% |
                        | %%GLOBAL_SortAlphaDesc%% |
                        | %%LNG_AlphaDesc%% |
                        | %%GLOBAL_SortAvgReview%% |
                        | %%LNG_AvgCustomerReview%% |
                        | %%GLOBAL_SortPriceAsc%% |
                        | %%LNG_PriceAsc%% |
                        | %%GLOBAL_SortPriceDesc%% |
                        | %%LNG_PriceDesc%% |
                    - type: text
                      data: |-
                        # CheckoutBillingAddressFields Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%LNG_EmailAddress%% |
                        | %%GLOBAL_AccountEmail%% |

                        # CheckoutCartItemGiftCertificate Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_GiftCertificateName%% |
                        | %%LNG_CapitalFor%% |
                        | %%GLOBAL_GiftCertificateTo%% |
                        | %%GLOBAL_ProductQuantity%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_ProductTotal%% |

                        # CheckoutCartItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ProductOptions%% |
                        | %%GLOBAL_EventDate%% |
                        | %%GLOBAL_ProductAvailability%% |
                        | %%GLOBAL_HideExpectedReleaseDate%% |
                        | %%GLOBAL_ProductExpectedReleaseDate%% |
                        | %%GLOBAL_HideGiftWrapping%% |
                        | %%LNG_GiftWrapping%% |
                        | %%GLOBAL_GiftWrappingName%% |
                        | %%GLOBAL_HideGiftMessagePreview%% |
                        | %%LNG_GiftMessage%% |
                        | %%GLOBAL_GiftMessagePreview%% |
                        | %%GLOBAL_HideCartProductFields%% |
                        | %%GLOBAL_CartProductFields%% |
                        | %%GLOBAL_ProductQuantity%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_ProductTotal%% |

                        # CheckoutCartTotal Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_label%% |
                        | %%GLOBAL_value%% |

                        # CheckoutMailFormatPreference Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_IMG_PATH%% |
                        | %%LNG_IPreferThisEmailFormat%% |
                        | %%GLOBAL_MailFormatPreferenceOptions%% |

                        # CheckoutProviderOption Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_PaymentFieldPrefix%% |
                        | %%GLOBAL_ProviderId%% |
                        | %%GLOBAL_ProviderChecked%% |
                        | %%GLOBAL_ProviderType%% |
                        | %%GLOBAL_ProviderPaymentFormClass%% |
                        | %%GLOBAL_ProviderName%% |

                        # CheckoutShippingAddressItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ShipFullName%% |
                        | %%GLOBAL_ShopPath%% |
                        | %%GLOBAL_ShippingAddressId%% |
                        | %%GLOBAL_FromURL%% |
                        | %%LNG_HCT_edit%% |
                        | %%LNG_Edit%% |
                        | %%GLOBAL_ShopPath%% |
                        | %%LNG_HCT_delete%% |
                        | %%LNG_Delete%% |
                        | %%GLOBAL_ShipCompany%% |
                        | %%GLOBAL_ShipAddressLine1%% |
                        | %%GLOBAL_ShipAddressLine2%% |
                        | %%GLOBAL_ShipSuburb%% |
                        | %%GLOBAL_ShipState%% |
                        | %%GLOBAL_ShipZip%% |
                        | %%GLOBAL_ShipCountry%% |
                        | %%GLOBAL_ShipPhone%% |
                        | %%GLOBAL_HideAddressButton%% |
                        | %%GLOBAL_ShippingFormAction%% |
                        | %%GLOBAL_ShipAddressButtonText%% |

                        # CheckoutTaxLine Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_TaxName%% |
                        | %%GLOBAL_TaxCost%% |
                    - type: text
                      data: |-
                        # CompareButtonList Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_HideCompareItems%% |
                        | %%LNG_CompareSelected%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_SiteColor%% |
                        | %%GLOBAL_HideAddButton%% |

                        # CompareButton Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_HideCompareItems%% |
                        | %%LNG_CompareSelected%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_SiteColor%% |

                        # CompareProductCustomField Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_CustomFieldName%% |
                        | %%GLOBAL_CustomFieldValue%% |

                        # CompareProductTd1 Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_ProductNumber%% |
                        | %%GLOBAL_CompareWidth%% |
                        | %%GLOBAL_RemoveCompareLink%% |
                        | %%LNG_Remove%% |

                        # CompareProductTd2 Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_ProductNumber%% |
                        | %%GLOBAL_ProductLink%% |
                        | %%GLOBAL_ProductName%% |

                        # CompareProductTd3 Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_ProductNumber%% |
                        | %%GLOBAL_ProductThumb%% |

                        #  CompareProductTd4 Snippet

                        ##  Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_ProductNumber%% |
                        | %%GLOBAL_ProductPrice%% |

                        # CompareProductTd5 Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_ProductNumber%% |
                        | %%GLOBAL_ProductAvailability%% |

                        # CompareProductTd6 Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_ProductNumber%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_ProductLink%% |
                        | %%GLOBAL_ProductRating%% |
                        | %%GLOBAL_HideProductRating%% |
                        | %%GLOBAL_HideComparisonReviewLink%% |
                        | %%GLOBAL_NumReviews%% |
                        | %%GLOBAL_ProductLink%% |
                        | %%LNG_ReadReviews%% |

                        # CompareProductTd7 Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_ProductNumber%% |
                        | %%GLOBAL_ProductSummary%% |

                        # CompareProductTd8 Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_ProductNumber%% |
                        | %%GLOBAL_CustomFields%% |

                        # CompareProductTd9 Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_ProductNumber%% |
                        | %%GLOBAL_ProductBrand%% |

                        # CompareProductTr1 Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_CompareHeadWidth%% |
                        | %%LNG_ProductDetails%% |
                        | %%SNIPPET_TD1%% |

                        # CompareProductTr2 Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_BaseCompareLink%% |
                        | %%LNG_SortByProductName%% |
                        | %%LNG_Product%% |
                        | %%SNIPPET_TD2%% |

                        # CompareProductTr3 Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%LNG_Image%% |
                        | %%SNIPPET_TD3%% |

                        # CompareProductTr4 Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_HideProductPrice%% |
                        | %%GLOBAL_BaseCompareLink%% |
                        | %%LNG_SortByProductPrice%% |
                        | %%LNG_Price%% |
                        | %%SNIPPET_TD4%% |

                        # CompareProductTr5 Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%LNG_Availability%% |
                        | %%SNIPPET_TD5%% |

                        # CompareProductTr6 Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_HideProductRating%% |
                        | %%GLOBAL_BaseCompareLink%% |
                        | %%LNG_SortByProductRating%% |
                        | %%LNG_Rating%% |
                        | %%SNIPPET_TD6%% |

                        # CompareProductTr7 Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%LNG_Summary%% |
                        | %%SNIPPET_TD7%% |

                        # CompareProductTr8 Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%LNG_Other%% |
                        | %%SNIPPET_TD8%% |

                        # CompareProductTr9 Snippet

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_BaseCompareLink%% |
                        | %%LNG_SortByProductBrand%% |
                        | %%LNG_Brand%% |
                        | %%SNIPPET_TD9%% |
                    - type: text
                      data: |-
                        # ConfirmOrderCoupon Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%LNG_Coupon%% |
                        | %%GLOBAL_CouponCode%% |
                        | %%GLOBAL_CouponDiscount%% |
                    - type: text
                      data: |-
                        # ConfirmOrderGiftCertificate Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%LNG_GiftCertificate%% |
                        | %%GLOBAL_GiftCertificateCode%% |
                        | %%GLOBAL_GiftCertificateRemaining%% |
                        | %%LNG_GiftCertificateRemaining%% |
                        | %%GLOBAL_CertificateAmountUsed%% |
                    - type: text
                      data: |-
                        # CookieNotification Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_PrivacyCookieNotification%% |
                        | %%LNG_HC_ok%% |
                    - type: text
                      data: |-
                        # CustomizeItemJavascript Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ProductAttributesJavascript%% |
                    - type: text
                      data: |-
                        # DesignModeFooter Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_CdnAppPath%% |
                        | %%GLOBAL_JSCacheToken%% |
                        | %%GLOBAL_jQueryUIPath%% |
                        | %%GLOBAL_DesignModeCurrentTemplate%% |
                        | %%GLOBAL_DesignModeUpdateUrl%% |
                        | %%LNG_DesignModeSave%% |
                        | %%LNG_DesignModeUndo%% |
                        | %%LNG_DesignModeToggle%% |
                        | %%LNG_DesignModeDisable%% |
                        | %%LNG_DesignModeChangesSaved%% |
                        | %%LNG_DesignModeRemoveLastPanel%% |
                        | %%LNG_DesignModeConfirmPanelRemove%% |
                        | %%LNG_DesignModeConfirmUndo%% |
                        | %%LNG_DesignModeConfirmDisable%% |
                        | %%LNG_DesignModeMenuEditPanel%% |
                        | %%LNG_DesignModeMenuRemovePanel%% |
                        | %%LNG_DesignModeMenuEditLayout%% |
                        | %%LNG_DesignModeMenuEditStylesheet%% |
                        | %%LNG_Or%% |
                        | %%LNG_DesignModeLangSaving%% |
                        | %%LNG_DesignModeCancel%% |
                    - type: text
                      data: |-
                        # ESelectPlusConfirmationDetails Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%LNG_Amount%% |
                        | %%GLOBAL_Amount%% |
                        | %%LNG_TransactionType%% |
                        | %%GLOBAL_TransactionType%% |
                        | %%LNG_DateAndTime%% |
                        | %%GLOBAL_DateTime%% |
                        | %%LNG_AuthorisationCode%% |
                        | %%GLOBAL_AuthorisationCode%% |
                        | %%LNG_ResponseCode%% |
                        | %%GLOBAL_ResponseCode%% |
                        | %%LNG_ISOCode%% |
                        | %%GLOBAL_ISOCode%% |
                        | %%LNG_ResponseMessage%% |
                        | %%GLOBAL_ResponseMessage%% |
                        | %%LNG_MerchantURL%% |
                        | %%GLOBAL_MerchantURL%% |
                        | %%LNG_CardholderName%% |
                        | %%GLOBAL_CardholderName%% |
                        | %%LNG_IssuerName%% |
                        | %%GLOBAL_IssuerName%% |
                        | %%LNG_IssuerConfirmation%% |
                        | %%GLOBAL_IssuerConfirmation%% |
                        | %%LNG_ReferenceNumber%% |
                        | %%GLOBAL_ReferenceNumber%% |
                        | %%LNG_InvoiceNumber%% |
                        | %%GLOBAL_InvoiceNumber%% |

                        # ESelectPlusDpConfirmationDetails Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%LNG_Amount%% |
                        | %%GLOBAL_Amount%% |
                        | %%LNG_TransactionType%% |
                        | %%GLOBAL_TransactionType%% |
                        | %%LNG_DateAndTime%% |
                        | %%GLOBAL_DateTime%% |
                        | %%LNG_AuthorisationCode%% |
                        | %%GLOBAL_AuthorisationCode%% |
                        | %%LNG_ResponseCode%% |
                        | %%GLOBAL_ResponseCode%% |
                        | %%LNG_ISOCode%% |
                        | %%GLOBAL_ISOCode%% |
                        | %%LNG_ResponseMessage%% |
                        | %%GLOBAL_ResponseMessage%% |
                        | %%LNG_MerchantURL%% |
                        | %%GLOBAL_MerchantURL%% |
                        | %%LNG_CardholderName%% |
                        | %%GLOBAL_CardholderName%% |
                        | %%LNG_IssuerName%% |
                        | %%GLOBAL_IssuerName%% |
                        | %%LNG_IssuerConfirmation%% |
                        | %%GLOBAL_IssuerConfirmation%% |
                        | %%LNG_ReferenceNumber%% |
                        | %%GLOBAL_ReferenceNumber%% |
                        | %%LNG_InvoiceNumber%% |
                        | %%GLOBAL_InvoiceNumber%% |

                        # ESelectPlusUsConfirmationDetails Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%LNG_MerchantName%% |
                        | %%GLOBAL_MerchantName%% |
                        | %%LNG_MerchantURL%% |
                        | %%GLOBAL_MerchantURL%% |
                        | %%LNG_TransactionType%% |
                        | %%GLOBAL_TransactionType%% |
                        | %%LNG_DateAndTime%% |
                        | %%GLOBAL_DateTime%% |
                        | %%LNG_Amount%% |
                        | %%GLOBAL_Amount%% |
                        | %%LNG_ReferenceNumber%% |
                        | %%GLOBAL_ReferenceNumber%% |
                        | %%LNG_AuthorisationCode%% |
                        | %%GLOBAL_AuthorisationCode%% |
                        | %%LNG_ResponseCode%% |
                        | %%GLOBAL_ResponseCode%% |
                        | %%LNG_ResponseMessage%% |
                        | %%GLOBAL_ResponseMessage%% |
                        | %%LNG_CardholderName%% |
                        | %%GLOBAL_CardholderName%% |
                        | %%LNG_InvoiceNumber%% |
                        | %%GLOBAL_InvoiceNumber%% |
                    - type: text
                      data: |-
                        # EstimatedShippingQuoteList Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ShippingQuotes%% |
                        | %%LNG_UpdateShippingCost%% |
                        | %%GLOBAL_DeliveryDisclaimer%% |

                        # EstimatedShippingQuoteProduct Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ProductQuantity%% |
                        | %%GLOBAL_ProductName%% |

                        # EstimatedShippingQuote Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%LNG_ShippingMethod%% |
                        | %%LNG_Price%% |
                        | %%GLOBAL_ShippingQuoteRow%% |
                    - type: text
                      data: |-
                        # EventDate Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_EventDateNameRequired%% |
                        | %%GLOBAL_EventDateName%% |
                        | %%GLOBAL_EventDateMonthStyle%% |
                        | %%GLOBAL_OverviewToMonths%% |
                        | %%GLOBAL_EventDateDayStyle%% |
                        | %%GLOBAL_OverviewToDays%% |
                        | %%GLOBAL_EventDateYearStyle%% |
                        | %%GLOBAL_OverviewToYears%% |
                        | %%GLOBAL_EventDateLimitations%% |
                    - type: text
                      data: |-
                        # ExpressCheckoutAddress Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_AddressId%% |
                        | %%GLOBAL_AddressType%% |
                        | %%GLOBAL_AddressSelected%% |
                        | %%GLOBAL_AddressLine%% |

                        # ExpressCheckoutChooseAddress Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_UpperAddressType%% |
                        | %%GLOBAL_HideChooseAddress%% |
                        | %%GLOBAL_UseExistingAddress%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_AddressType%% |
                        | %%GLOBAL_AddressList%% |
                        | %%GLOBAL_HideShippingOptions%% |
                        | %%GLOBAL_ShipToBillingName%% |
                        | %%LNG_AlsoWantToShipToThisAddress%% |
                        | %%GLOBAL_UseAddressTitle%% |
                        | %%GLOBAL_AddNewAddress%% |
                        | %%GLOBAL_HideCreateAddress%% |
                        | %%GLOBAL_HideChooseAddress%% |
                        | %%GLOBAL_CompiledFormFields%% |
                        | %%GLOBAL_HideSaveAddress%% |
                        | %%GLOBAL_SaveAddressChecked%% |
                        | %%LNG_SaveAddressInAddressBook%% |
                        | %%GLOBAL_HideShippingOptions%% |
                        | %%GLOBAL_ShipToBillingName%% |
                        | %%GLOBAL_ShipToAddressChecked%% |
                        | %%GLOBAL_CompiledFormFieldJavascript%% |
                        | %%LNG_ShipToThisAddress%% |
                        | %%LNG_BillAndShipToAddress%% |
                        | %%LNG_BillToThisAddress%% |

                        # ExpressCheckoutChooseShipper Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%LNG_ExpressCheckoutSelectShippingProvider%% |
                        | %%GLOBAL_ShippingQuotes%% |
                        | %%LNG_Continue%% |
                        | %%GLOBAL_DeliveryDisclaimer%% |

                        # ExpressCheckoutConfirmation Snippet 

                        ## Available Panels 
                        |||
                        |---|---|
                        | %%GLOBAL_ShopPath%% |
                        | %%GLOBAL_HideCheckoutError%% |
                        | %%GLOBAL_CheckoutErrorMsg%% |
                        | %%GLOBAL_HideCheckoutSuccess%% |
                        | %%GLOBAL_CheckoutSuccessMsg%% |
                        | %%LNG_ReviewTheContentsOfYourOrder%% |
                        | %%LNG_CartItems%% |
                        | %%LNG_Qty%% |
                        | %%LNG_ItemPrice%% |
                        | %%LNG_ItemTotal%% |
                        | %%GLOBAL_totals%% |
                        | %%SNIPPET_CartItems%% |
                        | %%GLOBAL_HideUseCoupon%% |
                        | %%LNG_HC_giftcertificatecoupon%% |
                        | %%GLOBAL_RedeemTitle%% |
                        | %%GLOBAL_RedeemIntro%% |
                        | %%LNG_CouponCode1%% |
                        | %%LNG_Apply%% |
                        | %%GLOBAL_HidePaymentOptions%% |
                        | %%LNG_HowWouldYouLikeToPay%% |
                        | %%GLOBAL_HideUseStoreCredit%% |
                        | %%LNG_CheckoutUseStoreCredit%% |
                        | %%GLOBAL_HideUseStoreCredit%% |
                        | %%GLOBAL_HideLimitedCreditWarning%% |
                        | %%GLOBAL_CheckoutStoreCreditWarning%% |
                        | %%LNG_StoreCreditBalance%% |
                        | %%GLOBAL_StoreCredit%% |
                        | %%LNG_YourOrderTotal%% |
                        | %%GLOBAL_AdjustedTotalCost%% |
                        | %%GLOBAL_HideLimitedCreditWarning%% |
                        | %%LNG_OutstandingOrderTotal%% |
                        | %%GLOBAL_Remaining%% |
                        | %%GLOBAL_HideRemainingStoreCredit%% |
                        | %%LNG_RemainingStoreCredit%% |
                        | %%GLOBAL_RemainingCredit%% |
                        | %%GLOBAL_HideLimitedCreditPaymentOption%% |
                        | %%LNG_CreditPaymentMethod%% |
                        | %%GLOBAL_HideLimitedCreditWarning%% |
                        | %%GLOBAL_StoreCreditPaymentProviders%% |
                        | %%GLOBAL_CheckoutWith%% |
                        | %%GLOBAL_HideCreditAltOptionList%% |
                        | %%GLOBAL_CreditAlt%% |
                        | %%GLOBAL_HidePaymentProviderList%% |
                        | %%GLOBAL_PaymentProviders%% |
                        | %%GLOBAL_HideOrderComments%% |
                        | %%LNG_EnterOrderComments%% |
                        | %%GLOBAL_OrderComments%% |
                        | %%GLOBAL_HideOrderTermsAndConditions%% |
                        | %%LNG_TermsAndConditions%% |
                        | %%GLOBAL_HideTermsAndConditionsTextarea%% |
                        | %%GLOBAL_OrderTermsAndConditions%% |
                        | %%GLOBAL_AgreeTermsAndConditions%% |
                        | %%GLOBAL_TermsAndConditionsLink%% |
                        | %%GLOBAL_HideMailingListInvite%% |
                        | %%LNG_HearFromUsViaEmail%% |
                        | %%GLOBAL_HideMailingListInvite%% |
                        | %%GLOBAL_NewsletterBoxIsTicked%% |
                        | %%LNG_WouldLikeToReceiveNewsletter%% |
                        | %%GLOBAL_HideOrderCheckBox%% |
                        | %%GLOBAL_OrderBoxIsTicked%% |
                        | %%LNG_NewsletterSpecialOffersText%% |
                        | %%GLOBAL_HideButtomPaymentButton%% |
                        | %%LNG_ProceedToPayment%% |
                        | %%GLOBAL_PaymentButtonSwitch%% |
                        | %%GLOBAL_ExpressCheckoutLoadPaymentForm%% |
                        | %%LNG_TickArgeeTermsAndConditions%% |

                        # ExpressCheckoutCreateAccount Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%LNG_EmailAddress%% |
                        | %%GLOBAL_AccountEmail%% |
                        | %%LNG_Password%% |
                        | %%LNG_PasswordConfirm%% |

                        # ExpressCheckoutShippingMethod Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_AddressId%% |
                        | %%GLOBAL_ShippingQuoteId%% |
                        | %%GLOBAL_ShipperName%% |
                        | %%GLOBAL_TransitTime%% |
                        | %%GLOBAL_ShippingPrice%% |
                    - type: text
                      data: |-
                        # FacebookLikeButton Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_FrameWidth%% |
                        | %%GLOBAL_FacebookButtonHref%% |
                    - type: text
                      data: |-
                        # FastCartThickBoxContent Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_HideThumbColumn%%% |
                        | %%GLOBAL_fastCartProdImg%% |
                        | %%GLOBAL_fastCartQuantityTxt%% |
                        | %%GLOBAL_fastCartProdLink%% |
                        | %%LNG_HC_quantity%% |
                        | %%GLOBAL_fastCartProdTotal%% |
                        | %%GLOBAL_HideCheckoutButton%% |
                        | %%GLOBAL_CheckoutLink%% |
                        | %%LNG_CheckoutButtonTitle%% |
                        | %%LNG_HC_proceedcheckout%% |
                        | %%GLOBAL_AdditionalCheckoutButtons%% |
                        | %%LNG_OrderSubtotal%% |
                        | %%GLOBAL_fastCartSubtotal%% |
                        | %%LNG_YourCartContains%% |
                        | %%GLOBAL_fastCartNumItemsTxt%% |
                        | %%LNG_ContinueShopping%% |
                        | %%LNG_Or%% |
                        | %%GLOBAL_ShopPath%% |
                        | %%LNG_ViewEditCart%% |
                        | %%GLOBAL_HideSuggestiveCartContent%% |
                        | %%LNG_YouMayAlsoLike%% |
                        | %%GLOBAL_SuggestedProductListing%% |
                        | %%LNG_QuantityAdded%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_SiteColor%% |
                        | %%LNG_SuggestiveCartIntro%% |
                    - type: text
                      data: |-
                        # FlyoutNode Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_FlyoutAttributes%% |
                        | %%GLOBAL_FlyoutNodeUrl%% |
                        | %%GLOBAL_FlyoutNodeLabel%% |
                        | %%GLOBAL_FlyoutChildHtml%% |

                        # FlyoutTree Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_FlyoutAttributes%% |
                        | %%GLOBAL_FlyoutChildHtml%% |
                    - type: text
                      data: |-
                        # GiftWrappingWrapOptions Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_HideWrappingTitle%% |
                        | %%LNG_Item%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ExtraClass%% |
                        | %%LNG_GiftWrapping%% |
                        | %%GLOBAL_GiftWrappingId%% |
                        | %%LNG_ChooseGiftWrappingOption%% |
                        | %%GLOBAL_WrappingOptions%% |
                        | %%GLOBAL_GiftWrapPreviewLinks%% |
                        | %%GLOBAL_HideGiftWrapMessage%% |
                        | %%LNG_GiftMessage%% |
                        | %%GLOBAL_GiftWrapMessage%% |
                        | %%GLOBAL_HideWrappingSeparator%% |
                    - type: text
                      data: |-
                        # HomeCurrencyFlags Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_CurrencyID%% |
                        | %%GLOBAL_CurrencyFlagURL%% |
                        | %%GLOBAL_CurrencyName%% |
                        | %%GLOBAL_CurrencyClass%% |

                        # HomeFeaturedProductsFeed Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ShopPath%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%LNG_FeaturedProductsFeed%% |

                        # HomeFeaturedProductsItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_AlternateClass%% |
                        | %%GLOBAL_ProductId%% |
                        | %%GLOBAL_ProductThumb%% |
                        | %%GLOBAL_ProductLink%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_ProductRating%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_ProductRatingImageDimensions%% |
                        | %%GLOBAL_HideProductRating%% |
                        | %%GLOBAL_HideActionAdd%% |
                        | %%GLOBAL_ProductURL%% |
                        | %%GLOBAL_ProductAddText%% |

                        # HomeNewProductsFeed Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ShopPath%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%LNG_NewProductsFeed%% |

                        # HomeNewProductsItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_AlternateClass%% |
                        | %%GLOBAL_ProductId%% |
                        | %%GLOBAL_ProductThumb%% |
                        | %%GLOBAL_ProductLink%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_ProductRating%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_ProductRatingImageDimensions%% |
                        | %%GLOBAL_HideProductRating%% |
                        | %%GLOBAL_HideActionAdd%% |
                        | %%GLOBAL_ProductURL%% |
                        | %%GLOBAL_ProductAddText%% |

                        # HomeRecentBlogsFeed Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ShopPath%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%LNG_RecentBlogsFeed%% |

                        # HomeSaleProductsItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_AlternateClass%% |
                        | %%GLOBAL_ProductThumb%% |
                        | %%GLOBAL_ProductLink%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_ProductRating%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_HideProductRating%% |
                        | %%GLOBAL_HideActionAdd%% |
                        | %%GLOBAL_ProductURL%% |
                        | %%GLOBAL_ProductAddText%% |
                    - type: text
                      data: |-
                        # InvoiceCartItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ProductAvailability%% |
                        | %%GLOBAL_HideWrappingOptions%% |
                        | %%LNG_GiftWrapping%% |
                        | %%GLOBAL_GiftWrappingName%% |
                        | %%GLOBAL_ProductQuantity%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_ProductTotal%% |

                        # InvoiceCustomerDetails Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_CustomerName%% |
                        | %%GLOBAL_CustomerEmail%% |
                        | %%GLOBAL_CustomerPhone%% |

                        # InvoicePendingPaymentDetails Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%LNG_HeresHowtoPayforYourOrderUC%% |
                        | %%LNG_PayForYourOrderHelpI%% |
                        | %%LNG_YourOrderTotalIs%% |
                        | %%GLOBAL_TotalCost%% |
                        | %%GLOBAL_PaymentMessage%% |

                        # InvoicePendingPaymentNotice Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_IMG_PATH%% |
                        | %%LNG_InvoicePendingPaymentText%% |
                    - type: text
                      data: |-
                        # LogoImage Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ShopPathNormal%% |
                        | %%GLOBAL_CdnStorePath%% |
                        | %%GLOBAL_ImageDirectory%% |
                        | %%GLOBAL_StoreLogo%% |
                        | %%GLOBAL_StoreName%% |
                    - type: text
                      data: |-
                        # LogoText Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ShopPathNormal%% |
                        | %%GLOBAL_LogoText%% |
                    - type: text
                      data: |-
                        # MaintenanceNotice Snippet 

                        ### Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_jQueryUIPath%% |
                        | %%GLOBAL_CdnAppPath%% |
                        | %%GLOBAL_JSCacheToken%% |
                        | %%LNG_AdminMaintenanceNoticeHeader%% |
                        | %%LNG_AdminMaintenanceNotice%% |
                        | %%GLOBAL_ShopPathNormal%% |
                        | %%GLOBAL_ImageDirectory%% |
                        | %%GLOBAL_StoreLogo%% |
                        | %%GLOBAL_StoreName%% |
                    - type: text
                      data: |-
                        # MessageBox Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_MsgBox_Type%% |
                        | %%GLOBAL_MsgBox_Message%% |
                    - type: text
                      data: |-
                        # MobileSiteLink Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_MobileSiteURL%% |
                        | %%LNG_MobileSite%% |
                    - type: text
                      data: |-
                        # MultiShippingItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ProductOptions%% |
                        | %%GLOBAL_AddressFieldId%% |
                        | %%GLOBAL_ShippingAddressSelect%% |
                    - type: text
                      data: |-
                        # OfflinePaymentMessage Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%LNG_YourOrderNumber%% |
                        | %%GLOBAL_ShopPath%% |
                        | %%GLOBAL_OrderId%% |
                        | %%LNG_HeresHowtoPayforYourOrder%% |
                        | %%LNG_InstructionsForPaymentBelow%% |
                        | %%LNG_HeresHowtoPayforYourOrderThanks%% |
                        | %%GLOBAL_OrderTotal%% |
                        | %%LNG_Outstanding%% |
                        | %%GLOBAL_PaymentMessage%% |
                    - type: text
                      data: |-
                        # PageMenuDropDown Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_SubMenuLinks%% |

                        # PageMenu Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_HasSubMenuClass%% |
                        | %%GLOBAL_ActivePageClass%% |
                        | %%GLOBAL_PageLink%% |
                        | %%GLOBAL_PageName%% |
                        | %%GLOBAL_SubMenu%% |

                        # PageRssItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_RSSLink%% |
                        | %%GLOBAL_RSSTitle%% |
                        | %%GLOBAL_RSSDescription%% |

                        # PageSubMenu Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_sPageLink%% |
                        | %%GLOBAL_sPageName%% |
                    - type: text
                      data: |-
                        # PinterestButton Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_CurrentProductLink%% |
                        | %%GLOBAL_InitialZoomImage%% |
                        | %%GLOBAL_PinterestButtonDescription%% |
                    - type: text
                      data: |-
                        # PostTag Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_TagUrl%% |
                        | %%GLOBAL_TagName%% |
                    - type: text
                      data: |-
                        # PrintableInvoiceItemConfigurableField Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_FieldName%% |
                        | %%GLOBAL_SKUValue%% |
                        | %%GLOBAL_FieldValue%% |

                        # PrintableInvoiceItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_invoiceItemClass%% |
                        | %%GLOBAL_hideAddressColumn%% |
                        | %%GLOBAL_addressColumnRowSpan%% |
                        | %%GLOBAL_productShippingAddress%% |
                        | %%GLOBAL_ProductQuantity%% |
                        | %%GLOBAL_ProductSku%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_HideAttributes%% |
                        | %%GLOBAL_ProductAttributes%% |
                        | %%GLOBAL_HideVariationOptions%% |
                        | %%GLOBAL_ProductOptions%% |
                        | %%GLOBAL_HideConfigurableFields%% |
                        | %%GLOBAL_ProductConfigurableFields%% |
                        | %%GLOBAL_HideGiftWrapping%% |
                        | %%GLOBAL_ProductGiftWrapping%% |
                        | %%GLOBAL_HideEventDate%% |
                        | %%GLOBAL_ProductEventDate%% |
                        | %%GLOBAL_HidePreOrder%% |
                        | %%GLOBAL_ProductPreOrder%% |
                        | %%GLOBAL_ProductCost%% |
                        | %%GLOBAL_ProductTotalCost%% |

                        # PrintableInvoice Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_HeaderLogo%% |
                        | %%GLOBAL_StoreName%% |
                        | %%GLOBAL_InvoiceTitle%% |
                        | %%GLOBAL_StoreAddressFormatted%% |
                        | %%LNG_BillTo%% |
                        | %%GLOBAL_BillingAddress%% |
                        | %%LNG_Phone%% |
                        | %%GLOBAL_BillingPhone%% |
                        | %%GLOBAL_HideBillingEmail%% |
                        | %%LNG_Email%% |
                        | %%GLOBAL_BillingEmail%% |
                        | %%GLOBAL_hideInvoiceShippingDetails%% |
                        | %%LNG_ShipTo%% |
                        | %%GLOBAL_ShippingAddress%% |
                        | %%GLOBAL_ShippingPhone%% |
                        | %%GLOBAL_HideShippingEmail%% |
                        | %%GLOBAL_ShippingEmail%% |
                        | %%LNG_Order%% |
                        | %%GLOBAL_OrderId%% |
                        | %%LNG_PaymentMethod%% |
                        | %%GLOBAL_PaymentMethod%% |
                        | %%LNG_DateOfOrder%% |
                        | %%GLOBAL_OrderDate%% |
                        | %%GLOBAL_hideInvoiceShippingDetails%% |
                        | %%LNG_ShippingMethod%% |
                        | %%GLOBAL_ShippingMethod%% |
                        | %%LNG_OrderItems%% |
                        | %%GLOBAL_hideAddressColumn%% |
                        | %%LNG_ShippingAddress%% |
                        | %%LNG_Quantity%% |
                        | %%LNG_Code%% |
                        | %%LNG_ProdName%% |
                        | %%LNG_Price%% |
                        | %%LNG_Total%% |
                        | %%GLOBAL_ProductsTable%% |
                        | %%GLOBAL_totals%% |
                        | %%GLOBAL_HideComments%% |
                        | %%LNG_Comments%% |
                        | %%GLOBAL_Comments%% |

                        # PrintablePackingSlipItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ProductQuantity%% |
                        | %%GLOBAL_ProductSku%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_HideAttributes%% |
                        | %%GLOBAL_ProductAttributes%% |
                        | %%GLOBAL_HideVariationOptions%% |
                        | %%GLOBAL_ProductOptions%% |
                        | %%GLOBAL_HideConfigurableFields%% |
                        | %%GLOBAL_ProductConfigurableFields%% |
                        | %%GLOBAL_HideGiftWrapping%% |
                        | %%GLOBAL_ProductGiftWrapping%% |
                        | %%GLOBAL_HideEventDate%% |
                        | %%GLOBAL_ProductEventDate%% |
                        | %%GLOBAL_ProductBinNumber%% |
                    - type: text
                      data: |-
                        # ProductAddToCart Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_AddToCartButtonControlScript%% |
                        | %%GLOBAL_CartLink%% |
                        | %%GLOBAL_ProductOptionRequired%% |
                        | %%GLOBAL_FastCartButtonJs%% |
                        | %%GLOBAL_ProductId%%v |
                        | %%SNIPPET_ProductFieldsList%% |
                        | %%SNIPPET_VariationList%% |
                        | %%GLOBAL_HideProductAttributeList%% |
                        | %%GLOBAL_ProductAttributeList%% |
                        | %%SNIPPET_EventDate%% |
                        | %%GLOBAL_DisplayAdd%% |
                        | %%GLOBAL_DisplayAddQty%% |
                        | %%LNG_QuantityFull%% |
                        | %%GLOBAL_DisplayAddQty%% |
                        | %%GLOBAL_AddToCartQty%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_SiteColor%% |
                        | %%GLOBAL_HideBulkDiscountLink%% |
                        | %%LNG_BulkDiscountLink%% |
                        | %%SNIPPET_SideAddItemSoldOut%% |
                        | %%GLOBAL_ProductBulkDiscountThickBox%% |
                        | %%GLOBAL_OptionMessage%% |
                        | %%LNG_VariationSoldOutMessage%% |
                        | %%LNG_InvalidQuantity%% |
                        | %%LNG_EnterRequiredField%% |
                        | %%LNG_InvalidFileTypeJS%% |
                        | %%GLOBAL_ShowAddToCartQtyBox%% |
                        | %%GLOBAL_ProductMinMaxQtyJavascript%% |
                        | %%GLOBAL_EventDateJavascript%% |
                        | - |
                        | %%GLOBAL_HideSKU%% |
                        | %%LNG_SKU%% |
                        | %%GLOBAL_SKU%% |
                        | %%GLOBAL_HideCondition%% |
                        | %%LNG_Condition%% |
                        | %%GLOBAL_ProductCondition%% |
                        | %%GLOBAL_HideWeight%% |
                        | %%LNG_Weight%% |
                        | %%GLOBAL_ProductWeight%% |
                        | %%GLOBAL_HideAvailability%% |
                        | %%LNG_Availability%% |
                        | %%GLOBAL_Availability%% |
                        | %%GLOBAL_HideShipping%% |
                        | %%LNG_Shipping%% |
                        | %%GLOBAL_ShippingPrice%% |
                        | %%GLOBAL_HideMinQty%% |
                        | %%LNG_ProductMinQty%% |
                        | %%GLOBAL_MinQty%% |
                        | %%LNG_units%% |
                        | %%GLOBAL_HideMaxQty%% |
                        | %%LNG_ProductMaxQty%% |
                        | %%GLOBAL_MaxQty%% |
                        | %%LNG_units%% |
                        | %%GLOBAL_HideCurrentStock%% |
                        | %%GLOBAL_CurrentStockLabel%% |
                        | %%GLOBAL_InventoryList%% |
                        | %%GLOBAL_HideGiftWrapMessage%% |
                        | %%LNG_GiftWrapping%% |
                        | %%GLOBAL_GiftWrappingAvailable%% |
                        | %%LNG_HC_quantity%% |
                        | %%GLOBAL_ItemSoldOut%% |
                        | %%LNG_ProductAddToCartLink%% |
                        | %%GLOBAL_HideWishlist%% |
                        | %%GLOBAL_HidePurchasingOptions%% |
                        | %%LNG_AddToWishList%% |
                        | %%GLOBAL_ShopPath%% |

                        # ProductBreadCrumb Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_BreadcrumbItems%% |

                        # ProductBulkDiscountThickBox Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_BulkDiscountThickBoxTitle%% |
                        | %%LNG_BulkDiscountThickBoxIntro%% |
                        | %%GLOBAL_BulkDiscountThickBoxRates%% |
                        | %%LNG_CloseWindow%% |
                        | %%GLOBAL_CdnAppPath%% |
                        | %%GLOBAL_JSCacheToken%% |

                        # ProductCustomFieldItem Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_CustomFieldName%% |
                        | %%GLOBAL_CustomFieldValue%% |

                        # ProductExpectedReleaseDate Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_ReleaseDate%% |

                        # ProductFieldCheckbox Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_ProductFieldRequired%% |
                        | %%GLOBAL_CheckboxFieldNameLeft%% |
                        | %%GLOBAL_ProductFieldType%% |
                        | %%GLOBAL_ProductFieldId%% |
                        | %%GLOBAL_ProductFieldInputSize%% |
                        | %%GLOBAL_FieldRequiredClass%% |
                        | %%GLOBAL_ProductFieldValue%% |
                        | %%GLOBAL_CheckboxFieldNameRight%% |

                        # ProductFieldInput Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_ProductFieldRequired%% |
                        | %%GLOBAL_ProductFieldName%% |
                        | %%GLOBAL_ProductFieldType%% |
                        | %%GLOBAL_ProductFieldId%% |
                        | %%GLOBAL_FieldRequiredClass%% |
                        | %%GLOBAL_ProductFieldInputSize%% |
                        | %%GLOBAL_ProductFieldValue%% |
                        | %%GLOBAL_HideCartFileName%% |
                        | %%LNG_Currently%% |
                        | %%GLOBAL_ShopPath%% |
                        | %%GLOBAL_ItemId%% |
                        | %%GLOBAL_ProductFieldFileValue%% |
                        | %%GLOBAL_HideDeleteFileLink%% |
                        | %%LNG_Delete%% |
                        | %%GLOBAL_HideFileHelp%% |
                        | %%LNG_Size%% |
                        | %%GLOBAL_FileSize%% |
                        | %%LNG_Type%% |
                        | %%GLOBAL_FileTypes%% |
                        | %%GLOBAL_CurrentProductFile%% |

                        # ProductFieldSelect Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_ProductFieldRequired%% |
                        | %%GLOBAL_ProductFieldName%% |
                        | %%GLOBAL_ProductFieldId%% |
                        | %%GLOBAL_FieldRequiredClass%% |
                        | %%GLOBAL_ProductFieldInputSize%% |
                        | %%GLOBAL_SelectOptions%% |

                        # ProductFieldTextarea Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_ProductFieldRequired%% |
                        | %%GLOBAL_ProductFieldName%% |
                        | %%GLOBAL_ProductFieldId%% |
                        | %%GLOBAL_FieldRequiredClass%% |
                        | %%GLOBAL_ProductFieldValue%% |

                        # ProductFindByCategoryItem Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_CatTrailLink%% |
                        | %%GLOBAL_CatTrailName%% |

                        # ProductFindByCategory Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_FindByCategoryItems%% |

                        # ProductImageZoomer Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_CdnAppPath%% |
                        | %%GLOBAL_JSCacheToken%% |
                        | %%GLOBAL_ProdImageZoomJavascript%% |
                        | %%GLOBAL_TPL_PATH%% |

                        # ProductImagesLightBox Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_CdnAppPath%% |
                        | %%GLOBAL_JSCacheToken%% |
                        | %%GLOBAL_LightBoxImageList%% |
                        | %%GLOBAL_ShopPath%% |
                        | %%GLOBAL_ProductId%% |
                        | %%GLOBAL_ProductTinyBoxWidth%% |
                        | %%GLOBAL_VisibleImageTotal%% |
                        | %%GLOBAL_ZoomImageMaxWidth%% |
                        | %%GLOBAL_ZoomImageMaxHeight%% |

                        # ProductOptionListItem Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_OptionChooseText%% |
                        | %%SNIPPET_OptionList%% |

                        # ProductOptionList Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_OptionChooseText%% |
                        | %%SNIPPET_OptionList%% |

                        # ProductReviewBadCaptcha Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_ReviewError%% |

                        # ProductReviewItem Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_AlternateReviewClass%% |
                        | %%GLOBAL_ReviewTitle%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_ReviewRating%% |
                        | %%LNG_PostedBy%% |
                        | %%GLOBAL_ReviewName%% |
                        | %%LNG_xOn%% |
                        | %%GLOBAL_ReviewDate%% |
                        | %%GLOBAL_ReviewText%% |

                        # ProductReviewList Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_ReviewStart%% |
                        | %%GLOBAL_ProductReviews%% |

                        # ProductReviewNextLink Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_ReviewLink%% |
                        | %%LNG_Next%% |

                        # ProductReviewPaging Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_PrevRevLink%% |
                        | %%LNG_ShowingReviews%% |
                        | %%GLOBAL_ReviewStart%% |
                        | %%GLOBAL_ReviewEnd%% |
                        | %%LNG_Of%% |
                        | %%GLOBAL_ProductNumReviews%% |
                        | %%GLOBAL_NextRevLink%% |

                        # ProductReviewPreviousLink Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_ReviewLink%% |
                        | %%LNG_Previous%% |

                        # ProductTagCloudItem Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_FontSize%% |
                        | %%GLOBAL_TagLink%% |
                        | %%GLOBAL_TagProductCount%% |
                        | %%GLOBAL_TagName%% |

                        # ProductThumbImagePlaceholder Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_ProductThumbWidth%% |
                        | %%GLOBAL_ProductThumbHeight%% |
                        | %%GLOBAL_ThumbImageURL%% |
                        | %%GLOBAL_ImageDescription%% |

                        # ProductThumbImage Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_ProductThumbWidth%% |
                        | %%GLOBAL_ProductThumbHeight%% |
                        | %%GLOBAL_InitialZoomImage%% |
                        | %%GLOBAL_TinyImageClickJavascript%% |
                        | %%GLOBAL_ThumbImageURL%% |
                        | %%GLOBAL_ImageDescription%% |

                        # ProductTinyImage Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_ProductTinyBoxHeight%% |
                        | %%GLOBAL_ProductTinyBoxWidth%% |
                        | %%GLOBAL_TinyImageOverJavascript%% |
                        | %%GLOBAL_TinyImageClickJavascript%% |
                        | %%GLOBAL_ProductThumbIndex%% |
                        | %%GLOBAL_ProductMaxTinyHeight%% |
                        | %%GLOBAL_ProductMaxTinyWidth%% |
                        | %%GLOBAL_ProductThumbImageURL%% |
                        | %%GLOBAL_ProductZoomImageURL%% |
                        | %%GLOBAL_TinyImageTopPadding%% |
                        | %%GLOBAL_TinyImageWidth%% |
                        | %%GLOBAL_TinyImageHeight%% |
                        | %%GLOBAL_ProductTinyImageURL%% |
                        | %%GLOBAL_ImageDescription%% |

                        # ProductUpdatesRadio Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_ProductId%% |
                        | %%GLOBAL_ProductName%% |

                        # ProductVariationListMultipleItem Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_OptionId%% |
                        | %%GLOBAL_OptionValue%% |

                        # ProductVariationListMultiple Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_VariationName%% |
                        | %%GLOBAL_VariationNumber%% |
                        | %%GLOBAL_VariationChooseText%% |
                        | %%SNIPPET_OptionList%% |

                        # ProductVariationListSingleItem Snippet

                        ## Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_VariationNumber%% |
                        | %%GLOBAL_OptionId%% |
                        | %%GLOBAL_OptionChecked%% |
                        | %%GLOBAL_OptionValue%% |

                        # ProductVariationListSingle Snippet

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_VariationName%% |
                        | %%SNIPPET_OptionList%% |
                    - type: text
                      data: |-
                        # QuickSearchJs Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_CdnAppPath%% |
                        | %%GLOBAL_JSCacheToken%% |
                    - type: text
                      data: |-
                        # QuickViewJs Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_QuickViewButtonText%% |
                        | %%GLOBAL_QuickViewButtonColor%% |
                        | %%GLOBAL_QuickViewGradientColor%% |
                        | %%GLOBAL_QuickViewTextColor%% |
                    - type: text
                      data: |-
                        # RecentBlog Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_BlogLink%% |
                        | %%GLOBAL_BlogText%% |
                        | %%GLOBAL_BlogPreview%% |
                    - type: text
                      data: |-
                        # RelatedSearchItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_SearchId%% |
                        | %%GLOBAL_ShopPath%% |
                        | %%GLOBAL_RelatedSearchQuery%% |
                        | %%GLOBAL_RelatedSearchText%% |

                        # SearchResultAjaxNews Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_NewsURL%% |
                        | %%GLOBAL_NewsTitle%% |
                        | %%LNG_SearchTypeNewsItem%% |

                        # SearchResultAjaxPage Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_PageURL%% |
                        | %%GLOBAL_PageTitle%% |
                        | %%LNG_SearchTypeWebPage%% |
                        | %%GLOBAL_PageSmallContent%% |

                        # SearchResultAjaxProduct Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ProductNoImageClassName%% |
                        | %%GLOBAL_ProductImage%% |
                        | %%GLOBAL_ProductURL%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_ProductRatingImage%% |

                        # SearchResultGrid Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_HideSectionPaging%% |
                        | %%GLOBAL_SectionPagingPrevious%% |
                        | %%GLOBAL_SectionPagingNext%% |
                        | %%LNG_Pages%% |
                        | %%GLOBAL_SectionPaging%% |
                        | %%GLOBAL_HideSectionSorting%% |
                        | %%LNG_SortBy%% |
                        | %%GLOBAL_SectionSortingOptions%% |
                        | %%GLOBAL_SectionType%% |
                        | %%GLOBAL_SectionExtraClass%% |
                        | %%GLOBAL_SectionResults%% |

                        # SearchResultNews Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_NewsURL%% |
                        | %%GLOBAL_NewsTitle%% |
                        | %%LNG_SearchTypeNewsItem%% |
                        | %%GLOBAL_NewsSmallContent%% |

                        # SearchResultPage Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_PageURL%% |
                        | %%GLOBAL_PageTitle%% |
                        | %%LNG_SearchTypeWebPage%% |
                        | %%GLOBAL_PageSmallContent%% |

                        # SearchResultProductGrid Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_AlternateClass%% |
                        | %%GLOBAL_ProductThumb%% |
                        | %%GLOBAL_ProductLink%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_ProductRating%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_HideProductRating%% |
                        | %%GLOBAL_HideCompareItems%% |
                        | %%GLOBAL_ProductId%% |
                        | %%LNG_Compare%% |
                        | %%GLOBAL_HideActionAdd%% |
                        | %%GLOBAL_ProductURL%% |
                        | %%GLOBAL_ProductAddText%% |

                        # SearchResultProductList Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_AlternateClass%% |
                        | %%GLOBAL_ProductId%% |
                        | %%GLOBAL_ProductThumb%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_AddToCartQty%% |
                        | %%GLOBAL_ProductLink%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_ProductRating%% |
                        | %%GLOBAL_HideProductRating%% |
                        | %%GLOBAL_ProductDescription%% |
                        | %%GLOBAL_HideCompareItems%% |
                        | %%LNG_Compare%% |
                        | - |
                        | %%GLOBAL_HideActionAdd%% |
                        | %%GLOBAL_ProductURL%% |
                        | %%GLOBAL_ProductAddText%% |

                        # SearchResultSectionContent Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_SectionSearchResults%% |

                        # SearchResultSectionProduct Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%LNG_CompareSelectMessage%% |
                        | %%LNG_PleaseSelectAProduct%% |
                        | %%GLOBAL_CompareLink%% |
                        | %%GLOBAL_ListJS%% |
                        | %%GLOBAL_CompareOnSubmit%% |
                        | %%GLOBAL_CompareButtonTop%% |
                        | %%GLOBAL_SectionSearchResults%% |
                        | %%GLOBAL_CompareButton%% |

                        # SearchResultsFeed Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ShopPath%% |
                        | %%GLOBAL_RSSURL%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%LNG_CategoryPopularProductsFeed%% |
                        | %%LNG_SearchFeed%% |
                    - type: text
                      data: |-
                        # SelectGiftWrapping Snippet

                        ##  Available Variables
                        |||
                        |---|---|
                        | %%GLOBAL_GiftWrappingTitle%% |
                        | %%GLOBAL_ItemId%% |
                        | %%GLOBAL_GiftWrapModalClass%% |
                        | %%LNG_ChooseHowToWrapItems%% |
                        | %%GLOBAL_HideSplitWrappingOptions%% |
                        | %%LNG_WrapItemsTheSame%% |
                        | %%SNIPPET_GiftWrappingOptionsSingle%% |
                        | %%LNG_WrapItemsDifferently%% |
                        | %%SNIPPET_GiftWrappingOptions%% |
                        | %%LNG_Cancel%% |
                        | %%LNG_Save%% |
                    - type: text
                      data: |-
                        # SelectedTag Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_TagName%% |
                        | %%GLOBAL_BlogUrl%% |
                    - type: text
                      data: |-
                        # ShippingProviderItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ShippingData%% |
                        | %%GLOBAL_AddressId%% |
                        | %%GLOBAL_ShipperId%% |
                        | %%GLOBAL_ShippingProvider%% |
                        | %%GLOBAL_ShippingPrice%% |
                        | %%GLOBAL_TransitTime%% |

                        # ShippingQuoteProduct Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ProductQuantity%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_HideGiftWrapping%% |
                        | %%LNG_GiftWrapping%% |
                        | %%GLOBAL_GiftWrappingName%% |
                        | %%GLOBAL_HideGiftMessagePreview%% |
                        | %%LNG_GiftMessage%% |
                        | %%GLOBAL_GiftMessagePreview%% |

                        # ShippingQuote Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_HideAddressLine%% |
                        | %%LNG_ShippedTo%% |
                        | %%GLOBAL_AddressLine%% |
                        | %%GLOBAL_HideItemList%% |
                        | %%LNG_Items%% |
                        | %%GLOBAL_ItemList%% |
                        | %%LNG_ShippingProvider%% |
                        | %%GLOBAL_ShippingProviders%% |
                        | %%GLOBAL_HideHorizontalRule%% |
                    - type: text
                      data: |-
                        # ShopByBrandAllItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_AllBrandsLink%% |
                        | %%LNG_SeeAllBrands%% |

                        # ShopByBrandItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_BrandName%% |
                        | %%GLOBAL_BrandLink%% |

                        # ShopByPriceItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_PriceLink%% |
                        | %%GLOBAL_PriceLow%% |
                        | %%GLOBAL_PriceHigh%% |
                    - type: text
                      data: |-
                        # SideAddItemSoldOut Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%LNG_CurrentlySoldOut1%% |
                        | %%LNG_CurrentlySoldOut2%% |
                        | %%LNG_HC_outofstock%% |

                        # SideCartContentsCheckoutLink Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_CheckoutLink%% |
                        | %%LNG_Checkout%% |

                        # SideCartItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ProductQuantity%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ProductOptions%% |
                        | %%GLOBAL_ProductAttributes%% |
                        | %%GLOBAL_ProductPrice%% |

                        # SideCategoryList Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_LastChildClass%% |
                        | %%GLOBAL_CategoryLink%% |
                        | %%GLOBAL_CategoryName%% |
                        | %%GLOBAL_SubCategoryList%% |

                        # SideCategoryNewProductsFeed Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ShopPath%% |
                        | %%GLOBAL_CatId%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%LNG_CategoryNewProductsFeed%% |

                        # SideCategoryNewProducts Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_AlternateClass%% |
                        | %%GLOBAL_ProductThumb%% |
                        | %%GLOBAL_ProductLink%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_ProductRating%% |
                        | %%GLOBAL_HideProductRating%% |
                        | %%GLOBAL_HideActionAdd%% |
                        | %%GLOBAL_ProductURL%% |
                        | %%GLOBAL_ProductAddText%% |

                        # SideCategoryPopularProductsFeed Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ShopPath%% |
                        | %%GLOBAL_CatId%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%LNG_CategoryPopularProductsFeed%% |

                        # SideCategoryPopularProducts Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_AlternateClass%% |
                        | %%GLOBAL_ProductThumb%% |
                        | %%GLOBAL_ProductLink%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_ProductRating%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_HideProductRating%% |
                        | %%GLOBAL_HideActionAdd%% |
                        | %%GLOBAL_ProductURL%% |
                        | %%GLOBAL_ProductAddText%% |

                        # SideCategoryTopSellers Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ProductNumber%% |
                        | %%GLOBAL_ProductThumb%% |
                        | %%GLOBAL_ProductLink%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_HideActionAdd%% |
                        | %%GLOBAL_ProductURL%% |
                        | %%GLOBAL_ProductAddText%% |

                        # SideCurrencySelectorCurrency Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_CurrencyFlagStyle%% |
                        | %%GLOBAL_CurrencySwitchLink%% |
                        | %%GLOBAL_CurrencySelected%% |
                        | %%GLOBAL_CurrencyFlag%% |
                        | %%GLOBAL_CurrencyName%% |

                        # SideCustomCategoryList Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_RootCatName%% |
                        | %%GLOBAL_RootCatList%% |

                        # SideNewProductsFeed Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ShopPath%% |
                        | %%GLOBAL_CatId%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%LNG_CategoryNewProductsFeed%% |

                        # SideNewProducts Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_AlternateClass%% |
                        | %%GLOBAL_ProductThumb%% |
                        | %%GLOBAL_ProductLink%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_ProductRating%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_HideProductRating%% |
                        | %%GLOBAL_HideActionAdd%% |
                        | %%GLOBAL_ProductURL%% |
                        | %%GLOBAL_ProductAddText%% |

                        # SidePageLink Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_PageLink%% |
                        | %%GLOBAL_PageName%% |

                        # SidePopularProductsFeed Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ShopPath%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%LNG_PopularProductsFeed%% |

                        # SidePopularProducts Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_AlternateClass%% |
                        | %%GLOBAL_ProductThumb%% |
                        | %%GLOBAL_ProductLink%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_ProductRating%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_ProductRatingImageDimensions%% |
                        | %%GLOBAL_HideProductRating%% |
                        | %%GLOBAL_HideActionAdd%% |
                        | %%GLOBAL_ProductURL%% |
                        | %%GLOBAL_ProductAddText%% |

                        # SideProductAlsoBoughtItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ProductThumb%% |
                        | %%GLOBAL_ProductLink%% |
                        | %%GLOBAL_SearchTrackClass%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_ProductRating%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_HideProductRating%% |

                        # SideRecentlyViewedProducts Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_HideSideProductRecentlyViewedCompare%% |
                        | %%GLOBAL_ProductId%% |
                        | %%GLOBAL_ProductThumb%% |
                        | %%GLOBAL_ProductId%% |
                        | %%GLOBAL_ProductLink%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_ProductRating%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_HideProductRating%% |
                        | %%GLOBAL_HideActionAdd%% |
                        | %%GLOBAL_ProductURL%% |
                        | %%GLOBAL_ProductAddText%% |

                        # SideRelatedProducts Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ProductThumb%% |
                        | %%GLOBAL_ProductId%% |
                        | %%GLOBAL_ProductLink%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_ProductRating%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_HideProductRating%% |

                        # SideTopSellersFirst Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_AlternateClass%% |
                        | %%GLOBAL_ProductId%% |
                        | %%GLOBAL_ProductNumber%% |
                        | %%GLOBAL_ProductThumb%% |
                        | %%GLOBAL_ProductLink%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_ProductRating%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_HideProductRating%% |
                        | %%GLOBAL_HideActionAdd%% |
                        | %%GLOBAL_ProductURL%% |
                        | %%GLOBAL_ProductAddText%% |

                        # SideTopSellers Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_AlternateClass%% |
                        | %%GLOBAL_ProductId%% |
                        | %%GLOBAL_ProductNumber%% |
                        | %%GLOBAL_ProductThumb%% |
                        | %%GLOBAL_ProductLink%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_ProductRating%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_HideProductRating%% |
                        | %%GLOBAL_HideActionAdd%% |
                        | %%GLOBAL_ProductURL%% |
                        | %%GLOBAL_ProductAddText%% |
                    - type: text
                      data: |-
                        # SimilarProductsByCustomerViewsItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_AlternateClass%% |
                        | %%GLOBAL_ProductId%% |
                        | %%GLOBAL_ProductThumb%% |
                        | %%GLOBAL_ProductLink%% |
                        | %%GLOBAL_SearchTrackClass%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_ProductRating%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_HideProductRating%% |
                        | %%GLOBAL_HideRating%% |
                        | %%GLOBAL_HideActionAdd%% |
                        | %%GLOBAL_ProductURL%% |
                        | %%GLOBAL_ProductAddText%% |
                        | %%LNG_ProductAddToCartLink%% |
                    - type: text
                      data: |-
                        # SimilarProductsByTagTag Snippet

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_FontSize%% |
                        | %%GLOBAL_TagLink%% |
                        | %%GLOBAL_TagProductCount%% |
                        | %%GLOBAL_TagName%% |
                    - type: text
                      data: |-
                        # SitemapLink Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_SitemapURL_HTML%% |
                        | %%LNG_Sitemap%% |
                    - type: text
                      data: |-
                        # SitemapSection Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ModelType%% |
                        | %%GLOBAL_ModelHeading%% |
                        | %%GLOBAL_ModelBody%% |
                        | %%GLOBAL_ModelHideAllLink%% |
                        | %%GLOBAL_ModelSubsectionURL%% |
                        | %%LNG_SitemapSeeAll%% |
                    - type: text
                      data: |-
                        # SlideList Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_Slide_Link_Url%% |
                        | %%GLOBAL_Slide_Heading_Color%% |
                        | %%GLOBAL_Slide_Heading_Text%% |
                        | %%GLOBAL_Slide_Text_Color%% |
                        | %%GLOBAL_Slide_Text_Text%% |
                        | %%GLOBAL_Slide_Button_Hide%% |
                        | %%GLOBAL_Slide_Button_Color%% |
                        | %%GLOBAL_Slide_Button_Text%% |
                        | %%GLOBAL_Slide_Image_Url%% |
                        | %%GLOBAL_Slide_Image_AlternateText%% |
                    - type: text
                      data: |-
                        # SocialLink Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_SocialMedia_Service_Url%% |
                        | %%GLOBAL_UseThemeSettingsClass%% |
                        | %%GLOBAL_SocialMedia_Service_Class%% |
                        | %%GLOBAL_SocialMedia_Service_Name%% |

                        # SocialSharingTabsItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_SharingActiveTab%% |
                        | %%GLOBAL_SharingName%% |
                        | %%GLOBAL_SharingIcon%% |
                        | %%GLOBAL_SharingDisplay%% |
                    - type: text
                      data: |-
                        # SubBrandItemImage Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_width%% |
                        | %%GLOBAL_height%% |
                        | %%GLOBAL_SubBrandLink%% |
                        | %%GLOBAL_SubBrandImage%% |
                        | %%GLOBAL_SubBrandName%% |

                        # SubBrandItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_SubBrandLink%% |
                        | %%GLOBAL_SubBrandName%% |

                        # SubCatItemImage Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_width%% |
                        | %%GLOBAL_height%% |
                        | %%GLOBAL_SubCatLink%% |
                        | %%GLOBAL_SubCatImage%% |
                        | %%GLOBAL_SubCatName%% |

                        # SubCatItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_SubCatLink%% |
                        | %%GLOBAL_SubCatName%% |
                    - type: text
                      data: |-
                        # TagProductsItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_AlternateClass%% |
                        | %%GLOBAL_ProductThumb%% |
                        | %%GLOBAL_ProductLink%% |
                        | %%GLOBAL_SearchTrackClass%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_ProductRating%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_HideProductRating%% |
                        | %%GLOBAL_HideCompareItems%% |
                        | %%GLOBAL_ProductId%% |
                        | %%LNG_Compare%% |
                        | %%GLOBAL_HideActionAdd%% |
                        | %%GLOBAL_ProductURL%% |
                        | %%GLOBAL_ProductAddText%% |
                    - type: text
                      data: |-
                        # TopMenuGiftCertificates Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ShopPathNormal%% |
                        | %%LNG_GiftCertificates%% |
                    - type: text
                      data: |-
                        # UnformattedAddressLabel Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ShipAddressLine1%% |
                        | %%GLOBAL_ShipAddressLine2%% |
                        | %%GLOBAL_ShipSuburb%% |
                        | %%GLOBAL_ShipState%% |
                        | %%GLOBAL_ShipZip%% |
                        | %%GLOBAL_ShipCountry%% |
                    - type: text
                      data: |-
                        # VideoListSide Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_VideoId%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_VideoTitleLong%% |
                        | %%GLOBAL_VideoLength%% |
                    - type: text
                      data: |-
                        # VideoList Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_VideoId%% |
                        | %%GLOBAL_VideoTitleLong%% |
                        | %%GLOBAL_VideoTitleShort%% |
                        | %%GLOBAL_VideoDescriptionLong%% |
                        | %%GLOBAL_VideoDescriptionShort%% |
                    - type: text
                      data: |-
                        # WishList Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_WishListID%% |
                        | %%GLOBAL_WishListName%% |
                        | %%GLOBAL_NumOfItems%% |
                        | %%GLOBAL_WishListShared%% |
                        | %%LNG_Edit%% |
                        | %%LNG_Delete%% |
                        | %%GLOBAL_ShareWishListLink%% |

                        # WishListItem Snippet 

                        ## Available Variables 
                        |||
                        |---|---|
                        | %%GLOBAL_ProductId%% |
                        | %%GLOBAL_ProductThumb%% |
                        | %%GLOBAL_ProductLink%% |
                        | %%GLOBAL_SearchTrackClass%% |
                        | %%GLOBAL_ProductName%% |
                        | %%GLOBAL_ProductPrice%% |
                        | %%GLOBAL_ProductRating%% |
                        | %%GLOBAL_IMG_PATH%% |
                        | %%GLOBAL_HideProductRating%% |
                        | %%GLOBAL_ShopPath%% |
                        | %%GLOBAL_HideRemoveItemButton%% |
                        | %%GLOBAL_WishListID%% |
                        | %%GLOBAL_ItemId%% |
                        | %%LNG_RemoveFromWishList%% |
  /bigcommerce-for-wordpress:
    title: BigCommerce for WordPress
    data:
      children:
        - title: Getting Started
          route:
            path: /getting-started
          data:
            children:
              - title: Introduction
                route:
                  path: /introduction
                data:
                  blocks:
                    - type: html
                      data: "<div><h3 class=\"sub-docs-type\" id=\"bigcommerce-for-wordpress\">BigCommerce for Wordpress</h3>\n<h1 class=\"sub-docs-title\" id=\"introduction\">Introduction</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#introduction_how-it-works\">How it Works</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >
                        BigCommerce for WordPress allows you to power
                        content-driven WordPress storefronts with the ecommerce
                        functionality of BigCommerce. Product data is pulled
                        into WordPress as a custom post type, giving you the
                        freedom to embed products in posts and pages to create a
                        tailored shopping experience. The plugin utilizes the
                        full suite of BigCommerce APIs, allowing shoppers to
                        seamlessly complete a purchase end-to-end on WordPress.


                        You can use the BigCommerce for WordPress plugin as a
                        building block to create an ecommerce solution that’s
                        unique to your brand. Whether you want to link multiple
                        WordPress storefronts to a single BigCommerce store or
                        extend the open source plugin to create custom-made
                        solutions, BigCommerce for WordPress makes it easy to
                        combine the power of BigCommerce with the flexible
                        presentation of WordPress.
                    - type: text
                      data: >
                        ## How It Works


                        BigCommerce for WordPress connects your WordPress site
                        to your BigCommerce store via API, and pulls all of the
                        relevant data into a variety of database tables, some
                        custom, some default WordPress. Products are a post
                        type: product data is stored in the post table and
                        product meta is stored in the post_meta table.


                        Orders data is stored on the BigCommerce servers and is
                        accessible in your WordPress site via API with custom
                        code and via a nice UI in the BigCommerce admin. 


                        Most store options and settings are managed inside the
                        BigCommerce UI, including Shipping, Taxes, and Payment
                        Gateways.



                        ### Templating


                        The BigCommerce for WordPress plugin follows the
                        standard WordPress method of templating. Templates are
                        found in
                        `/wp-content/plugins/bigcommerce-for-wordpress-master/public-views`


                        and can be moved to the theme folder into a bigcommerce
                        folder, like this:
                        `/wp-content/theme-name/bigcommerce/` 


                        where `<theme-name>` is the name of the active theme.


                        ### Shopper Experience


                        When a customer visits the store, the products they see
                        are stored locally in WordPress. A cart is optional–when
                        the customer clicks add-to-cart, they can either be
                        directed to a cart page or delivered directly to the
                        checkout page.

                        When a shopper proceeds to checkout, they land on the
                        BigCommerce checkout page in an embedded iframe, which
                        can be styled to match your WordPress site. This creates
                        a seamless experience for the shopper because they
                        remain on your WordPress site and domain for the entire
                        shopping experience. BigCommerce embedded checkout also
                        allows you to leverage the built-in security and
                        PCI-compliance of the BigCommerce checkout.


                        ### Channels


                        Channels allow you to manage products in BigCommerce and
                        sell them on other storefronts, like one or more
                        WordPress sites, or in marketplaces, like Amazon and
                        Facebook. A key concept is that the products listed on
                        other channels are managed centrally from your
                        BigCommerce store, so inventory is tracked neatly across
                        all channels. This means that if all of your product
                        ends up being sold through Amazon, your Facebook store
                        will also be sold out.


                        ### WordPress as a Channel


                        When using the WordPress plugin for BigCommerce, each
                        connected WordPress site is considered another channel.
                        This means that your WordPress store is aware of
                        inventory levels, because those are monitored centrally
                        in your BigCommerce store, and when an order is placed,
                        it appears in the BigCommerce Order View UI along with
                        orders received on other channels. Orders are labeled
                        with the channel they originated from, to help you track
                        sales data across multiple channels.


                        While merchants traditionally sell primarily through
                        their BigCommerce store and supplement with channels, it
                        is possible to mask the main BigCommerce store and treat
                        any given channel as the primary store. This would allow
                        you to use WordPress as your primary store.
                      header:
                        anchor: introduction_how-it-works
              - title: Install
                route:
                  path: /install
                data:
                  blocks:
                    - type: html
                      data: "<div><h3 class=\"sub-docs-type\" id=\"bigcommerce-for-wordpress\">BigCommerce for Wordpress</h3>\n<h1 class=\"sub-docs-title\">Install</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#install_requirements\">Requirements</a></li>\n        <li><a href=\"#install_ installation\">Installation</a></li>\n        <li><a href=\"#install_plugin-install-wordpress\">Plugin Installation in WordPress</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## System Requirements:


                        * PHP: 5.6+ (7.1+ recommended)

                        * MySQL: 5.5+ (5.6+ recommended)

                        * WordPress: 4.8+

                        * SSL

                        * The PHP intl extension is recommended to enable better
                        currency formatting
                      header:
                        anchor: '#install_requirements'
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Installation


                        To install BigCommerce for WordPress, you’ll need to
                        [install and activate the
                        plugin](https://wordpress.org/plugins/bigcommerce/) in
                        WordPress and connect your BigCommerce account. If you
                        don’t already have an account, you will be prompted to
                        create one. 


                        For a walkthrough on installing and activating the
                        plugin, see [Using BigCommerce for
                        Wordpress](https://support.bigcommerce.com/s/article/BigCommerce-for-WordPress#installation)
                        (BigCommerce Help Center).
                      header:
                        anchor: '#install_installation'
                    - type: text
                      data: >-
                        ## Setting Your Channel Name


                        Once connected, you’ll set up a new [Channel
                        Name](https://support.bigcommerce.com/s/article/BigCommerce-for-WordPress#channel).
                        This name will be used to identify this specific
                        WordPress instance in BigCommerce when checking orders
                        or listing products.
                    - type: callout
                      data:
                        body: >-
                          Looking for multi-site instructions? See [Multi Site
                          Setup](/bigcommerce-for-wordpress/setup/multi-site).
                        type: info
                        title: |-

                          Multi-Site Instructions 
                    - type: text
                      data: >-
                        After you’ve created your new channel name, the initial
                        product sync will begin and you can begin configuring
                        your plugin settings.
              - title: App Compatibility
                route:
                  path: /app-compatibility
                data:
                  blocks:
                    - type: html
                      data: "\n\t<h3 class=\"sub-docs-type\" id=\"bigcommerce-for-wordpress\">BigCommerce for Wordpress</h3>\n\t<h1 class=\"sub-docs-title\" id=\"introduction\">App Compatibility</h1>\n\n"
                    - type: text
                      data: >
                        When you use BigCommerce for WordPress, your storefront
                        is rendered by WordPress rather than BigCommerce, so
                        some apps that you use for a BigCommerce-powered
                        storefront may no longer be compatible.


                        ### Supported Apps


                        For the most part, any app that operates solely on the
                        backend can be used without modification on WordPress.
                        This includes  apps that interface with our catalog,
                        order, shipping, and customer APIs. You can find
                        hundreds of compatible apps in these categories:


                        * [Accounting &
                        Tax](https://www.bigcommerce.com/apps/accounting-tax/)

                        * [Catalog & Order
                        Management](https://www.bigcommerce.com/apps/catalog-order-management/)

                        * [Data Transfer & Migration
                        Services](https://www.bigcommerce.com/apps/data-transfer-migration-services/)

                        * [ERP](https://www.bigcommerce.com/apps/erp/)

                        * [Sales
                        Channels](https://www.bigcommerce.com/apps/sales-channels/)

                        * [Shipping &
                        Fullfillment](https://www.bigcommerce.com/apps/shipping-fulfillment/)


                        ### Unsupported Apps 


                        Apps that modify the storefront are currently not
                        supported. This includes [Customer Acquisition &
                        Retention](https://www.bigcommerce.com/apps/customer-acquisition-retention/)
                        apps show banners, pop-ups, or other storefront
                        modifications.


                        Although a specific BigCommerce app may not be
                        available, you may be able to find an alternative in the
                        WordPress Plugin Directory. For example, some companies,
                        like [Mailchimp](https://mailchimp.com/), build both
                        BigCommerce apps and WordPress plugins. Keep that in
                        mind when searching for a solution.


                        If you are a BigCommerce app developer and would like to
                        help our merchants on WordPress too, reach out to our
                        App Marketplace team at
                        [appstore@bigcommerce.com](mailto:appstore@bigcommerce.com).
        - title: Supported Features
          route:
            path: /supported-features
          data:
            blocks:
              - type: html
                data: "<div><h3 class=\"sub-docs-type\" id=\"bigcommerce-for-wordpress\">BigCommerce for Wordpress</h3>\n<h1 class=\"sub-docs-title\">Supported Features</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#supported_supported\">BigCommerce for Wordpress Supported Features</a></li>\n    <li><a href=\"#supported_unsupported\">BigCommerce for Wordpress Unsupported Features</a></li>\n    <li><a href=\"#supported_general\">General Product Roadmap</a></li>\n\t</ul>\n</div>"
              - type: text
                data: >+
                  ## BigCommerce for Wordpress Supported Features


                  The open source BigCommerce for Wordpress plugin currently
                  supports the following features and capabilities that are
                  native to the BigCommerce platform and more:


                  * Complex Product Catalog (600 SKUs per product, 250 product
                  values for a single option)

                  * Product Variants and Product Variant Pricing

                  * Product Promotions

                  * Secure Shopper Accounts and Logins with PCI Compliant
                  Checkout

                  * Cart, Checkout, Account Profiles, Sign In, Shipping &
                  Returns, Gift Certificates, and Order History Pages for
                  Shoppers

                  * Ability to Overwrite Template Files

                  * ShipperHQ Integration

                  * Gutenberg and Classic Editor

                  * Google Accelerated Mobile Pages 

                  * Google Address Autocomplete 

                  * Google Analytics Enhanced Ecommerce

                  * Facebook Pixel 

                  * Enterprise Systems Integrations (connect to existing ERP
                  suites, PIM software, OMS solutions, POS systems, or marketing
                  automation tools)

                  * Faceted Search with FacetWP and Search with SearchWP

                  * Multi Site Selling

                  * Multi-Channel Selling (eBay, Amazon, Facebook, Instagram,
                  Google Shopping, Square and more) and Central Management (bulk
                  listing, automatic inventory syncing, unified order and
                  fulfillment management)


                  ### Supported Payment Gateways


                  BigCommerce has over 65 payment gateway integrations available
                  out-of-the box, serving 100+ countries and over 250 local
                  payment methods. BigCommerce for Wordpress currently supports
                  the following payment gateways:


                  * PayPal Express (now called PayPal Checkout)

                  * PayPal through Braintree

                  * All non-hosted (API) gateways that are supported by
                  Optimized One Page Checkout 


                  Unsupported Hosted Payment Gateways are Amazon Pay, AfterPay,
                  Google Pay, Chase Pay, and Masterpass.

                header:
                  anchor: '#supported_supported'
              - type: text
                data: '---'
              - type: text
                data: >-
                  ## BigCommerce for Wordpress Unsupported Features


                  The BigCommerce for Wordpress plugin does not currently
                  support the following features: 


                  * Product Rules

                  * Product Option Rules 

                  * Product Pick Lists and Bundled * Products

                  * Product File Upload Field

                  * Modifier Adjustments

                  * Warranty, Availability, and Bulk Pricing Product Fields

                  * Price Lists

                  * Persistent Cart

                  * Cart Preview

                  * Cart Page Promotional Banners

                  * Customer Groups

                  * Real-Time Syncing with BigCommerce Catalog Updates
                header:
                  anchor: '#supported_unsupported'
              - type: text
                data: '---'
              - type: text
                data: >
                  ## General Product Roadmap


                  We plan on supporting and improving the following features in
                  the BigCommerce for Wordpress plugin:


                  * Product Modifier Improvements

                  * Product Variant Images

                  * Moderation and Management of Product Reviews

                  * Additional Theme Styling within Customizer

                  * Multi-Currency 

                  * Shopper Wishlists

                  * Abandoned Cart Saver 

                  * Shipping Calculation on Cart Page

                  * Promotional Banner Support

                  * Page Builder Plugins Support
                header:
                  anchor: supported_general
        - title: Setup
          route:
            path: /setup
          data:
            children:
              - title: Plugin Settings
                route:
                  path: /plugin-settings
                data:
                  blocks:
                    - type: html
                      data: "<div><h3 class=\"sub-docs-type\" id=\"bigcommerce-for-wordpress\">BigCommerce for Wordpress</h3>\n<h1 class=\"sub-docs-title\">Plugin Settings</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#plugin-settings_api-keys\">API Keys</a></li>\n        <li><a href=\"#plugin-settings_product-sync\">Product Sync</a></li>\n        <li><a href=\"#plugin-settings_cart-settings\">Cart Settings</a></li>\n        <li><a href=\"#plugin-settings_theme-customizer\">Theme Customizer</a></li>\n        <li><a href=\"#plugin-settings_reviews\">Reviews</a></li>\n        <li><a href=\"#plugin-settings_gift-certificate-settings\">Gift Certificate Settings</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        BigCommerce settings for WordPress are found in the left
                        admin menu in WordPress, under the BigCommerce menu
                        item.
                      header: {}
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1540476609033
                      header:
                        title: Plugin Settings
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Product Sync

                        Once the plugin is connected, the plugin will import
                        products using the BigCommerce API. This will run
                        automatically using [WordPress
                        cron](https://developer.wordpress.org/plugins/cron/),
                        using the schedule set on the settings page (default:
                        every five minutes).

                        If you choose to disable the cron job, you can set a
                        server-side cron job to run the sync using WP-CLI. The
                        command to import products is:


                        `wp bigcommerce import products`


                        Product titles, descriptions, and post statuses can be
                        edited in the WordPress admin. Your changes will be
                        automatically synced with your BigCommerce channel and
                        preserved during future imports.
                      header:
                        anchor: plugin-settings_product-sync
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Cart Settings


                        When the cart is enabled, visitors to your store can add
                        products to carts before checkout. If it is disabled,
                        the “Add to Cart” button becomes a “Buy Now” button,
                        sending customers directly to checkout for that product.
                        When the cart is enabled, the plugin will automatically
                        create a page to host the cart shortcode,
                        `[bigcommerce_cart]`. This shortcode will show the
                        current visitor’s cart. To use a different page as your
                        Cart page, first create a page, insert the cart
                        shortcode, then come back to the settings page and
                        select it from the dropdown. Note: the plugin
                        automatically creates this page.


                        ### Currency Settings


                        The store’s currency code will be imported from the
                        BigCommerce API as part of the product import process.
                        If the PHP intl extension is available on your server,
                        there is nothing else to configure. If it is not
                        available, you will be presented with additional fields
                        to control currency formatting. These will also be
                        populated automatically from the API. Currency
                        formatting can be filtered using the
                        `bigcommerce/currency/format` filter.


                        ### Accounts and Registration


                        User accounts in WordPress will be connected to customer
                        accounts in BigCommerce. If user registration is enabled
                        in WordPress (the “Anyone can register” checkbox in
                        **Settings** › **General** in the WordPress admin),
                        customers will be able to register accounts and manage
                        their profiles. 


                        The plugin requires several pages to support user
                        account management. These pages will all be created
                        automatically. Each will contain a shortcode that
                        renders the relevant content. If any are deleted, they
                        will be automatically re-created for you. If you have
                        multiple pages with these shortcodes, you may select
                        which will be treated as canonical using the dropdowns
                        in this settings section. 


                        The “Support Email” field will be used to give customers
                        an address to contact you with questions about orders.

                        The cart page should be excluded from any page caching
                        system enabled for your site.
                      header:
                        anchor: plugin-settings_cart-settings
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Theme Customizer

                        The visual presentation of your store can be customized
                        using the WordPress theme customizer. Open the theme
                        customizer and find the "BigCommerce" panel, which
                        contains several sections.


                        * **Buttons:** Control the labels applied to buttons for
                        interacting with products.  


                        * **Colors & Themes:** Customize colors to better match
                        your theme.
                          
                        * **Catalog Pages:** Control the presentation of lists
                        of products. 
                         
                        * **Product Single:** Control the presentation of
                        individual product pages.  


                        * **Product Archive:** Customize labels and filters for
                        the prouct archive.
                      header:
                        anchor: plugin-settings_theme-customizer
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Navigation Menus


                        The BigCommerce for WordPress plugin creates several
                        pages, which can be added to the WordPress navigation
                        menus using the standard WordPress admin(**Appearance**
                        › **Menus**, or in the theme customizer). 

                        Some of these pages acquire special functionality when
                        they are added to navigation menus:


                        * **Cart:** The cart menu item will show the number of
                        items in the current user's cart.
                          
                        * **Login:** If the user is logged in, the login page
                        menu item becomes a link to log out.
                          
                        * **Register:** If user registration is disabled, the
                        menu item will be disabled (it won't render on the front
                        end of the site). If the user is logged in, the menu
                        item will link to the user's account profile.  

                        * **Account Profile, Order History, Addresses:** If the
                        user is not logged in, these menu items will be disabled
                        (they won't render on the front end of the site).
                      header:
                        anchor: plugin-settings_navigation-menus
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Reviews

                        Reviews placed on the WordPress store are synced to
                        BigCommerce for permanent storage as well as usage on
                        other channels. Additionally, reviews are stored in a
                        local, custom database for quick access.

                        The review system on WordPress is enabled or disabled by
                        the site’s Comments setting, under Settings → Discussion
                        in the WordPress admin. Additionally, each product has a
                        Comments switch which can be used to override the global
                        settings.
                      header:
                        anchor: plugin-settings_reviews
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Gift Certificate Settings

                        If the gift certificate setting is enabled in WordPress,
                        shoppers will be able to purchase gift certificates from
                        the site. Gift certificate functionality relies on two
                        pages that are automatically created by the plugin. Both
                        pages can be replaced by pages you create containing the
                        appropriate shortcodes.


                        * Gift Certificate Page: The page where customers
                        purchase gift certificates. 

                        Use the shortcode `[bigcommerce_gift_form]`


                        * Gift Certificate Balance Page:

                        The page where customers can check their gift
                        certificate balance. Use the
                        shortcode`[bigcommerce_gift_balance]`
                      header:
                        anchor: plugin-settings_gift-certificate-settings
              - title: Product Import
                route:
                  path: /product-import
                data:
                  blocks:
                    - type: html
                      data: >-
                        <div><h3 class="sub-docs-type"
                        id="bigcommerce-for-wordpress">BigCommerce for
                        Wordpress</h3>

                        <h1 class="sub-docs-title">Product Import</h1>
                    - type: text
                      data: >
                        Products are imported from the BigCommerce API on a
                        [WordPress cron
                        job](https://developer.wordpress.org/plugins/cron/), or
                        using a WP-CLI command: `wp bigcommerce import products`


                        The import runs in several stages:

                        1. A list of all products from the API is added to a
                        queue for processing.

                        2. Any products on the site that are no longer available
                        in the BigCommerce store are marked for deletion.

                        3. The queue is processed in chunks (five items at a
                        time), whereby products are imported, updated, or
                        deleted to match the data in BigCommerce.

                        4. Currency and other store information from the API
                        updates settings in WordPress.
                    - type: callout
                      data:
                        title: WordPress Currency Processing
                        body: >-
                          The WordPress sites you connect to your BigCommerce
                          store will process in the same default currency as the
                          BigCommerce store.
              - title: Multisite
                route:
                  path: /multi-site
                data:
                  blocks:
                    - type: html
                      data: "<div><h3 class=\"sub-docs-type\" id=\"bigcommerce-for-wordpress\">BigCommerce for Wordpress</h3>\n<h1 class=\"sub-docs-title\">Multisite Setup</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#multisite_getting\">Getting Your API Credentials</a></li>\n        <li><a href=\"#multisite_setting-up\">Setting up a WordPress Site Using API Account Credentials</a></li>\n    \t\t<li><a href=\"#multisite_additional\">Additional Resources</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >
                        When connecting more than one WordPress site to your
                        BigCommerce store, you need to use an API account to
                        link them. If you try to connect using the 'connect your
                        store' flow, which uses a BigCommerce app to streamline
                        the connection, your first WordPress site will lose its
                        connection to BigCommerce.


                        Multiple sites can share the same API credentials or you
                        can choose to create a new set of credentials for each
                        site.
                      header:
                        anchor: multisite_overview
                    - type: text
                      data: >-
                        ## Getting Your API Credentials


                        1. To get your store's API credentials, log into your
                        BigCommerce store and head to `Advanced Settings` > `API
                        Accounts`. Then, click the blue `Create API Account`
                        button on the top left hand side.
                      header:
                        anchor: multisite_getting
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1544044020003
                      header:
                        title: Click 'Create API Account' to get credentials
                      config:
                        centered: true
                        fluid: true
                        bordered: true
                    - type: text
                      data: >-
                        2. Click `Create API Account`. This will open up a
                        screen that will ask you to define a name and OAuth
                        Scopes for the API account. For the OAuth Scopes, select
                        the following:


                        * Checkout Content: `none`

                        * Customers Login: `login`


                        Select `modify` for all other scopes.


                        The screen will also contain your API Path, which you
                        will need for the WordPress Plugin. 
                    - type: callout
                      data:
                        title: API Account Name Field
                        body: >-
                          We suggest 'WordPress' for the name, although you can
                          name it anything you'd like as long as it's unique
                          within your API accounts and is more than 3
                          characters.
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1544044197137
                      header:
                        title: Fill in the Name and OAuth Scopes.
                      config:
                        centered: true
                        fluid: true
                        bordered: true
                        maxWidth: '600'
                        maxHeight: '600'
                    - type: text
                      data: >-
                        3. After you have finished setting a name and selecting
                        scopes, press `Save`. You will then see a modal that
                        contains the `Client ID`, `Client Secret` and `Access
                        Token` necessary for the remaining fields in the
                        WordPress API Credentials settings.
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1544044553372
                      header:
                        title: API Credentials
                    - type: callout
                      data:
                        body: >-
                          You'll also see a `.txt` file download in your browser
                          that contains the same information in an easy-to-read
                          format, including your API Path again in case you
                          didn't copy it before.
                        title: .txt file fownload
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1544044589538
                      header:
                        title: .txt file download
                    - type: text
                      data: >
                        ## Setting up a WordPress Site Using API Account
                        Credentials


                        1. To set up a WordPress site using this method, click
                        `Enter your API credentials` on the welcome screen in
                        the plugin. 
                      header:
                        anchor: multisite_setting-up
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1544043727239
                      header:
                        title: Wordpress Plugin Welcome Screen
                      config:
                        centered: true
                        fluid: true
                        bordered: true
                        maxWidth: '600'
                        maxHeight: '600'
                    - type: text
                      data: >-
                        After clicking the text, you will be asked for your
                        store's API credentials and base path.
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1544043952871
                    - type: text
                      data: >
                        2. Enter the API credentials on your WordPress site.
                        Saving the API Credentials on your WordPress site will
                        take you to name the channel that the plugin will create
                        so that you can list products to the channel from within
                        BigCommerce, and link orders back to the channel that
                        come from the WP site. You can also link to an existing
                        channel.



                        _Congratulations, you're done setting up your additional
                        site!_ 
                    - type: callout
                      data:
                        body: >-
                          The WordPress sites you connect to your BigCommerce
                          store will process in the same currency as the
                          BigCommerce store.
                        title: WordPress Currency Processing
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Additional Resources


                        * [Multisite Ecommerce with Wordpress and
                        BigCommerce](https://medium.com/bigcommerce-developer-blog/multi-site-ecommerce-with-wordpress-and-bigcommerce-40dee194f8a)
                        (Developer Blog)
                      header:
                        anchor: multisite_additional
              - title: Shortcodes
                route:
                  path: /shortcodes
                data:
                  blocks:
                    - type: html
                      data: "<div><h3 class=\"sub-docs-type\" id=\"bigcommerce-for-wordpress\">BigCommerce for Wordpress</h3>\n<h1 class=\"sub-docs-title\">Shortcodes</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#shortcode_product-shortcode\">Products Shortcode</a></li>\n        <li><a href=\"#plugin-settings_api-keys\">API Keys</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        Most of the plugin's functionality is exposed on the
                        front-end of the site through shortcodes embedded on
                        automatically created pages. The code controlling those
                        shortcodes can be found in the classes in
                        `src/BigCommerce/Shortcodes`.
                    - type: text
                      data: >
                        ## Products Shortcode

                        `[bigcommerce_product]`


                        The product shortcode can be used to include one or more
                        products on other pages or posts on the WordPress site.
                        Click the **Add Products** button above the editor to
                        select products or build a dynamic query to include in
                        the page.


                        While the shortcode can be built using the button, it
                        can also be created manually. It accepts a number of
                        optional attributes:


                        - `id` - A comma delimited list of BigCommerce product
                        IDs 

                        - `post_id` - A comma delimited list of WordPress
                        product post IDs  

                        - `sku` - A comma delimited list of BigCommerce product
                        SKUs  

                        - `category` - A comma delimited list of Product
                        Category slugs  

                        - `brand` - A comma delimited list of Brand slugs

                        - `featured` - Set to 1 to limit the query to featured
                        products  

                        - `sale` - Set to 1 to limit the query to sale products

                        recent - Set to 1 to limit the query to products
                        imported in the last 2 days (filter the duration with
                        the bigcommerce/query/recent_days filter)  

                        - `search` - A search string to match against product
                        titles, BigCommerce product IDs, or SKUs  

                        - `paged` - Set to 0 to disable pagination  

                        - `per_page` - The number of products to show per page.
                        Defaults to the value set in the theme customizer.

                        - `order` - Whether to sort products in "ASC" or "DESC"
                        order

                        - `orderby` - Which field to use for sorting. Accepts
                        any field that WP_Query accepts (e.g., title, date)
                      header:
                        anchor: shortcode_product-shortcodes
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Other Shortcodes

                        * `[bigcommerce_signin_form]` - The form for users to
                        log in to the site. If user registration is enabled, it
                        will also give a link to the registration page.

                        * `[bigcommerce_registration_form]` - A form to register
                        a new customer account.

                        * `[bigcommerce_cart]` - The items currently in the
                        customer's cart.

                        * `[bigcommerce_account_profile]` - A form to update the
                        customer's profile.

                        * `[bigcommerce_order_history]` - A list of the
                        customer's past orders.

                        * `[bigcommerce_shipping_address_list]` - A list of the
                        customer's shipping addresses, and forms to add, remove,
                        or update addresses.
                      header:
                        anchor: shortcode_other-short
                    - type: text
                      data: '---'
              - title: Troubleshooting
                route:
                  path: /troubleshooting
                data:
                  blocks:
                    - type: html
                      data: "<div><h3 class=\"sub-docs-type\" id=\"bigcommerce-for-wordpress\">BigCommerce for Wordpress</h3>\n<h1 class=\"sub-docs-title\">Troubleshooting</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#troubleshooting_add-cart-error\">Error on \"Add to Cart\" button, 404 error</a></li>\n        <li><a href=\"#troubleshooting_php-getenv\">PHP getenv() Errors</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Error on "Add to Cart" button, 404 error


                        ### Symptom


                        > Not Found: The requested URL /bigcommerce/cart/42 was
                        not found on this server.  

                        > Additionally, a 404 Not Found error was encountered
                        while trying to use an ErrorDocument to handle the
                        request.


                        ### Solution

                        In WordPress, go to Settings → Permalinks. Scroll to the
                        bottom of the page and click Save. This resets the
                        site’s redirects properly.
                      header:
                        anchor: troubleshooting_add-cart-error
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## PHP getenv() Errors


                        ### Symptom: 

                        When in use the plugin floods the error log with the
                        following:



                        > PHP message: PHP Warning: getenv() expects exactly 1
                        parameter, 2 given in
                        wp-content/plugins/bigcommerce-for-wordpress-0.11.1/bigcommerce.php
                        on line 58



                        ### Solution

                        You can expect to see that error if you're on PHP
                        version 5.4 or lower (the plugin requires 5.6+).
                      header:
                        anchor: troubleshooting_php-getenv
        - title: Extending the Plugin
          route:
            path: /extending-the-plugin
          data:
            children:
              - title: AMP for the Plugin
                route:
                  path: /new-subpage
                data:
                  blocks:
                    - type: html
                      data: "<div><h3 class=\"sub-docs-type\" id=\"bigcommerce-for-wordpress\">BigCommerce for Wordpress</h3>\n<h1 class=\"sub-docs-title\">AMP for the BigCommerce WordPress plugin\n</h1>\n  <h4>Prepared by XWP for BigCommerce</h4>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#amp_whats-amp\">What’s AMP?</a></li>\t\n    <li><a href=\"#amp_real-world\">AMP real world example</a></li>\t\n    <li><a href=\"#amp_how-to\">How to enable AMP</a></li>\t\n    <li><a href=\"#amp_wordpress-amp\">WordPress AMP plugin support</a></li>\t\n    <li><a href=\"#amp_choosing\">Choosing an AMP mode</a></li>\n    <li><a href=\"#amp_previewing\">Previewing AMP</a></li>\n    <li><a href=\"#amp_amp-tools\">AMP Tools</a></li>\n    <li><a href=\"#amp_amp-for-seo\">AMP for SEO</a></li>\t\n    <li><a href=\"#amp_customizing-amp\">Customizing AMP templates</a></li>\t\n  </ul>\n</div>"
                    - type: text
                      data: >-
                        ## What's AMP?


                        AMP stands for Accelerated Mobile Pages and is an [open
                        source project](https://www.ampproject.org/) created by
                        Google and maintained by thousands of developers who
                        care deeply about a better and faster web.


                        AMP aims to load your web pages faster and thus
                        providing a better end user experience. It does this by
                        using a subset of HTML called AMP HTML which is very
                        similar to HTML, with a few restrictions. There is also
                        AMP JS which is a whitelisted and concise JavaScript
                        library and most importantly the AMP Cache which search
                        engines like Google use to serve AMP pages.


                        While AMP is quite widely used in the publishing
                        industry and many large news organizations have taken
                        advantage of it, AMP has not yet been rolled out in any
                        significant way to ecommerce stores. This means there is
                        a big opportunity for online stores to get in early and
                        start publishing AMP valid stores to increase traffic,
                        conversion rates, and ultimately sales.
                      header:
                        anchor: amp_whats-amp
                    - type: text
                      data: >-
                        ## AMP real world example


                        A user who is looking to purchase a Christmas gift for a
                        loved one would typically go to Google and search for
                        the item. Let’s say they’re looking for a picture frame,
                        they type “Picture Frame” in to the search box, and
                        Google presents a search result page of websites and
                        ecommerce stores selling picture frames.


                        You may notice when doing a Google search of your own,
                        that Google now includes AMP specific results at the top
                        of the SERP (search engine results page). It shows a
                        carousel of AMP enabled content that is related to your
                        search.


                        By clicking one of the results in the AMP carousel,
                        let’s say it’s a product page of a picture frame that we
                        searched for above, the website loads almost
                        instantaneously. This is because Google has cached the
                        AMP version of the websites which provide AMP valid
                        markup and can show the pages as soon as a user clicks
                        it without the user having to wait.


                        Search engine optimization is one of the key advantages
                        of AMP, however user experience is also just as
                        important of an advantage. A user browsing the AMP
                        cached version of your site will feel like the pages are
                        loading immediately which leads to higher conversions
                        and more sales.


                        The good news is that BigCommerce for WordPress ships
                        with AMP by default.
                      header:
                        anchor: amp_real-world
                    - type: text
                      data: >
                        ## How to enable AMP


                        Enabling AMP in the BigCommerce for WordPress plugin is
                        simple. All you need to do is download the [Official AMP
                        Plugin for
                        WordPress](https://wordpress.org/plugins/amp/), noting
                        that its the “official” one by WordPress.com VIP, XWP,
                        and Google.


                        Once you’ve downloaded the plugin, extract it to the
                        plugins directory of your WordPress install and activate
                        the plugin from WordPress admin.


                        Alternatively, you can use the WordPress installer to
                        install the Official AMP Plugin for WordPress by
                        clicking Plugins in your WordPress admin sidebar and
                        then Add New. Search for AMP, click Install Now, and
                        then click Activate


                        Once the plugin is installed and activated, your store
                        will immediately start serving an AMP version of the
                        store when requested.
                      header:
                        anchor: amp_how-to
                    - type: text
                      data: >
                        ## WordPress AMP plugin support


                        The Official AMP Plugin for WordPress is currently at
                        version 0.7.2 and the BigCommerce for WordPress plugin
                        fully supports this version.


                        Version 1.0 of the Official AMP Plugin for WordPress is
                        due to be released shortly and the great news is that
                        BigCommerce for WordPress already fully supports this
                        version of the AMP plugin. Version 1.0 brings a whole
                        new set of features including the ability to validate
                        AMP inside WordPress and we’re excited to be able to
                        support that with the BigCommerce plugin.
                      header:
                        anchor: amp_wordpress-amp
                    - type: text
                      data: >
                        ## Choosing an AMP mode


                        The official AMP Plugin for WordPress plugin allows you
                        to serve AMP pages in 3 different ways. Let’s see what
                        they are and which mode is best suited for you.

                        Classic mode (AMP Plugin Version 0.1+)

                        This is the original mode for rendering AMP pages and it
                        renders an AMP theme that is separate and different from
                        your WordPress theme. Think of it as a whole new
                        WordPress theme that is only displayed when the site is
                        being viewed as AMP. The AMP theme is customizable and
                        can be branded to align with your brand.


                        Generally this mode works out of the box and not much
                        customization is needed to be done to your website for
                        it to be AMP valid, this is because it uses specific a
                        specific AMP valid theme. The draw back being that your
                        website theme is different from the AMP theme.


                        ### Paired mode (AMP Plugin Version 0.7+)


                        Paired mode uses your existing theme and through clever
                        sanitization and post CSS processing, the plugin does
                        it’s best to create an AMP valid version of it. Your AMP
                        theme and WordPress theme look extremely similar except
                        they’re just accessed from different URL’s.


                        In paired mode, there is usually additional development
                        work needed to be done to your theme to make it AMP
                        valid. The Official AMP Plugin for WordPress plugin does
                        a really good job of reducing the size of the CSS and
                        loading only what is needed on the page, but because of
                        3rd party plugins and custom theme development, you may
                        need to conditionally remove parts of your site when AMP
                        is valid for it to pass validation. The plugin helps you
                        do this and in version 1.0 it has an interface to let
                        you know of any failing AMP validations that need to be
                        fixed.


                        ### Native mode (AMP Plugin Version 0.7+)


                        Native mode is very much the same as paired mode in
                        terms of rendering, however it will always render the
                        AMP version of the theme. It’s basically always on AMP.


                        For more technical details on how the 3 modes are
                        differentiated, please check out the [Theme docs for the
                        Official AMP Plugin for
                        WordPress](https://github.com/ampproject/amp-wp/wiki/Adding-Theme-Support).
                      header:
                        anchor: amp_choosing
                    - type: text
                      data: >-
                        ## Previewing AMP


                        Once AMP is enabled and you’ve decided on a mode, you
                        will probably want to preview what your site looks like.
                        This is easy to do but depending on the mode you
                        selected, you would need to preview the AMP theme
                        differently.

                        Classic mode

                        If you’re running with classic, you can preview the mode
                        in two ways:


                        1.
                        [yourdomain.com/products/product-slug/amp](yourdomain.com/products/product-slug/amp)


                        2.
                        [yourdomain.com/products/product-slug/?amp](yourdomain.com/products/product-slug/?amp)


                        By visiting any of these two URL’s the AMP version will
                        be shown in a browser.


                        ### Paired Mode

                        For paired mode, you can only use the ?amp query
                        parameter to show the AMP version in a browser. 

                        [yourdomain.com/products/product-slug/amp](yourdomain.com/products/product-slug/amp)


                        ### Native Mode

                        As discussed earlier, native mode will always display
                        the AMP version of the theme.
                      header:
                        anchor: amp_previewing
                    - type: text
                      data: >
                        ## AMP Tools


                        There are a number of tools that you can use to help you
                        with AMP development, testing, and maintenance.


                        ### AMP Test

                        To test if a webpage is AMP valid, you can use the AMP
                        Test tool provided by Google:

                        https://search.google.com/test/amp


                        ### AMP Validator

                        The official AMP project provides an AMP validator tool
                        for validating and debugging AMP pages:

                        https://validator.ampproject.org/


                        ### AMP Validator for Chrome

                        If you’re using Chrome, there is an AMP Validator
                        extension that allows you to test AMP pages directly
                        while browsing your website:

                        [https://chrome.google.com/webstore/detail/amp-validator/nmoffdblmcmgeicmolmhobpoocbbmknc?hl=en](https://chrome.google.com/webstore/detail/amp-validator/nmoffdblmcmgeicmolmhobpoocbbmknc?hl=en)
                      header:
                        anchor: amp_amp-tools
                    - type: text
                      data: >
                        ## AMP for SEO


                        Earlier we talked about how AMP can be beneficial for
                        SEO purposes and driving web traffic to your store. Just
                        by enabling the Official AMP Plugin for WordPress and
                        BigCommerce for WordPress plugins, your AMP pages will
                        automatically get indexed and cached by Google without
                        having to submit or request this from Google. This is
                        because the plugin adds a reference to the AMP page on
                        each canonical web page that has an AMP version.


                        There is nothing additional that you need to do to get
                        the added SEO benefit from AMP, it’s all handled for you
                        by the plugin and Google crawler.
                      header:
                        anchor: amp_amp-for-seo
                    - type: text
                      data: >-
                        ## Customizing AMP templates


                        The BigCommerce for WordPress plugin ships with
                        beautifully customized AMP templates that look great.
                        You may however want to customize these AMP templates to
                        be more aligned with your brand.


                        ### Classic Mode

                        The classic AMP theme can be customized in the WordPress
                        Customizer. Click on `Appearance` on the WordPress Admin
                        menu and then click `Customize`. The WordPress
                        Customizer will then open and you’ll see a panel for
                        AMP. Click `AMP` and then `Design` and from this panel
                        you can change the look and feel.


                        You may want to go a step further an customize the
                        actual HTML markup and output. This is customized in the
                        same way as the non-AMP BigCommerce templates.


                        Firstly, create a folder in your theme called
                        `bigcommerce`. In this folder add an additional folder
                        called `amp`. You can now copy and paste any template
                        you would like to override from
                        `bigcommerce/templates/public/amp` in to this folder and
                        modify them. The BigCommerce plugin will look in your
                        theme first for an AMP template before it looks at the
                        template from the plugin.


                        ### Paired and Native Mode


                        Paired and native mode uses your existing WordPress
                        theme to display. So there is little to no customization
                        needed in terms of the theme layout and branding. You
                        may however want to override the html outputted by the
                        components on a product archive or product page. To do
                        this, you do exactly what you would in classic. Create a
                        folder in your theme called
                        `bigcommerce/amp/components`. In this folder copy and
                        paste any components that you would want to override
                        from the plugin `bigcommerce/templates/public/amp`.
                      header:
                        anchor: amp_customizing-amp
              - title: Customization Guide
                route:
                  path: /customization-guide
                data:
                  blocks:
                    - type: html
                      data: "<div><h3 class=\"sub-docs-type\" id=\"bigcommerce-for-wordpress\">BigCommerce for Wordpress</h3>\n<h1 class=\"sub-docs-title\">Customization Guide</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#customization-guide_introduction\">Introduction</a></li>\n        <li><a href=\"#customization-guide_file-structure\">File Structure</a></li>\n    \t\t<li><a href=\"#customization-guide_template-overrides\">Template Overrides</a></li>\t\n    \t\t<li><a href=\"#customization-guide_custom-css\">Custom CSS</a></li>\t\n    \t\t<li><a href=\"#customization-guide_hooks\">Hooks</a></li>\n    \t\t<li><a href=\"#customization-guide_styling-checkout\">Styling Checkout</a></li>\t\n    \t\t<li><a href=\"#customization-guide_email-templates\">Email Templates</a></li>\n    \t\t<li><a href=\"#customization-guide_external-resources\">External Resources</a></li>\t\n  </ul>\n</div>"
                    - type: text
                      data: >+
                        ## Introduction


                        BigCommerce for WordPress is compatible out-of-the-box
                        with all standard WordPress themes and includes full
                        support for the Genesis theme framework. The plugin
                        includes templates and stylesheets to render all of the
                        elements and pages you need to merchandise your products
                        and move shoppers through checkout, including:

                        - Product Cards

                        - Product Detail Pages

                        - Product Listing Pages

                        - Product Archive Page

                        - Cart Page

                        - Gift Certificate Page

                        - Customer Account, Registration, and Order History
                        Pages

                        - Shipping & Returns Page

                        - Checkout Page


                        Although the plugin will work with any theme, as a theme
                        developer, you can choose to offer  BigCommerce for
                        WordPress support by styling the pages and elements
                        created by the plugin to fit your theme’s design.


                        Plugin developers can also fork [BigCommerce for
                        WordPress on
                        GitHub](https://github.com/bigcommerce/bigcommerce-for-wordpress),
                        where the plugin is available as an open source project.
                        We encourage developers to adapt BigCommerce for
                        WordPress to fit any custom use case imaginable! If
                        you’re building a custom feature that you think would
                        benefit the wider community, consider submitting a pull
                        request on GitHub to add your feature to the code base.


                        This guide will walk through the available options for
                        developing themes that support BigCommerce for WordPress
                        and extending the plugin through custom development.

                      header:
                        anchor: customization-guide_introduction
                    - type: callout
                      data:
                        type: success
                        body: >-
                          Have you developed a theme that offers BigCommerce for
                          WordPress support? We’d love to promote your
                          BigCommerce for WordPress compatible theme. Get in
                          touch with us
                          [here](https://devcenter-staging-demo.docs.stoplight.io/marketo-form)
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## File Structure

                        ### Templates

                        All of the BigCommerce for WordPress template files that
                        render on the front end can be found in the
                        templates/public folder. Templates within the components
                        subfolder render smaller content blocks within your
                        theme’s template, while two control the entire page:


                        - `single-bigcommerce_product.php`: The template for
                        rendering a single Product post.


                        - `archive-bigcommerce_product.php`: The template for
                        rendering the Product post type archive.


                        These templates may require modification to match the
                        styling of your theme. Both templates call
                        `get_header()` and `get_footer()` to render your theme's
                        default header and footer. 

                        The page content is rendered inside the wrapper template
                        found in `components/page-wrapper.php`. By modifying
                        this wrapper template to match the HTML markup of a
                        template in your theme, you should have consistent
                        styling across your site.

                        ### CSS

                        BigCommerce for WordPress uses
                        [PostCSS](https://postcss.org/), a JavaScript tool that
                        accepts CSS with special additional syntax and compiles
                        it into normal CSS. Combined with PostCSS plugins,
                        PostCSS offers many of the core features of CSS
                        preprocessors like Sass, with less overhead.


                        PostCSS modules are contained in the asset/pcss
                        directory. The assets/css directory contains both the
                        minified and uncompressed versions of the CSS files
                        created during the PostCSS build process.
                      header:
                        anchor: customization-guide_file-structure
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Template Overrides

                        When a WordPress plugin is updated, existing plugin
                        files are overwritten by the new version. To ensure that
                        your customizations persist through the update process,
                        it’s important to use overrides in your theme files
                        rather than editing plugin files directly.


                        To override any template, create a bigcommerce directory
                        in your theme and copy the template file to that
                        directory. 


                        Examples:


                        Copy `templates/public/single-bigcommerce_product.php`
                        to `bigcommerce/single-bigcommerce_product.php`


                        Copy `templates/public/components/page-wrapper.php` to
                        `bigcommerce/components/page-wrapper.php`


                        As WordPress loads, it will first check for a custom
                        template override in your theme’s bigcommerce directory;
                        if no custom template is found there, WordPress will
                        fetch the built-in plugin template instead.

                        ### Required Classes

                        BigCommerce for WordPress relies on specially named
                        element classes for JavaScript functionality, and we
                        strongly recommend leaving the default class names
                        untouched as you create custom templates. You are,
                        however, welcome to create additional classes.
                      header:
                        anchor: customization-guide_template-overrides
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Custom CSS

                        To style BigCommerce for WordPress elements with custom
                        CSS, add your CSS to your theme’s stylesheet rather than
                        editing the plugin stylesheets directly. Your theme’s
                        CSS will have specificity over styles applied by the
                        plugin and will override the default styles.


                        For example, you might want to change the Add-To-Cart
                        button from blue to orange by adding the following CSS
                        to your theme’s stylesheet:


                        ```

                        button.bc-btn.bc-btn--form-submit.bc-btn--add_to_cart {
                            background-color: #FF9C33;
                        }

                        ```

                        ### Opting Out of BigCommerce Styles

                        If you wish to disable the built-in plugin styles
                        entirely, you have the option to do so. In the WordPress
                        theme customizer, navigate to BigCommerce > Colors &
                        Theme and select Disable Plugin Styles from the CSS
                        dropdown menu.
                      header:
                        anchor: customization-guide_custom-css
                    - type: text
                      data: '---'
                    - type: text
                      data: >+
                        ## Hooks

                        Hooks are access points during the WordPress execution
                        process where a developer can insert custom code. Hooks
                        consist of two types: actions and filters. Both allow
                        developers to execute custom code during the WordPress
                        lifecycle. The difference lies in whether the function
                        returns a value: 



                        - **Actions** execute a function with no output. Even if
                        a value was returned it would be ignored. 

                        - **Filters** modify a variable and return a value,
                        which is the modified version of the original variable.


                        BigCommerce for WordPress provides over 100 hooks that
                        you can use to extend and customize the plugin. For a
                        comprehensive, searchable list of all available hooks,
                        visit our [Code
                        Reference](https://bigcommerce.moderntribe.qa/reference/hooks/).


                        ### Architectural Guidelines

                        All actions and filters called by the plugin begin with
                        the `bigcommerce/` prefix (e.g., `bigcommerce/init`). If
                        there is a dynamic component to the hook, it should be
                        preceded by an equal sign (e.g., `bigcommerce/template='
                        . $template . '/path`).


                        The entire plugin operates through closures wrapped
                        around calls to classes instantiated via a dependency
                        injection container. In the event that you need to
                        modify the core behavior of the plugin, there are
                        several methods to get access to these closures.

                      header:
                        anchor: customization-guide_hooks
                    - type: callout
                      data:
                        type: error
                        title: Warning
                        body: >
                          Modifying core plugin functionality can lead to
                          security vulnerabilities, data corruption, broken user
                          workflows, and an overall unpleasant experience for
                          you and your customers. Proceed at your own risk.
                    - type: text
                      data: >-
                        The `bigcommerce/init` action fires after the plugin has
                        completed initializing all of its service providers and
                        hooked them into WordPress. It passes two arguments: the
                        primary plugin controller (an instance of the
                        BigCommerce\Plugin class) and the dependency injection
                        container itself. The former is also available at any
                        time after initialization by calling the function
                        `bigcommerce()`.


                        An instance of each of the service providers found in
                        the src/BigCommerce/Container directory can be accessed
                        via this plugin controller, using the keys specified in
                        `\BigCommerce\Plugin::load_service_providers()`. E.g.,
                        to get an instance of the BigCommerce\Container\Cart
                        service provider, you would use `bigcommerce()->cart`.


                        Every action or filter callback created by one of the
                        service providers is given an identifier so that it can
                        be retrieved and, if appropriate, unhooked from
                        WordPress. E.g., to unhook the closure that renders the
                        product archive template and replace it with your own,
                        you could do:


                        ```

                        remove_action( 'bigcommerce/template/product/archive',
                        bigcommerce()->templates->product_archive, 10 );


                        add_action( 'bigcommerce/template/product/archive',
                        'your_callback_function', 10, 2 );

                        ```
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Styling Checkout

                        BigCommerce for WordPress offers two possible checkout
                        experiences, depending on whether the WordPress site has
                        an installed SSL certificate.


                        If no SSL is detected, shoppers will be redirected to
                        the BigCommerce checkout page, on the domain of the
                        BigCommerce store. Because BigCommerce stores provide an
                        SSL certificate by default, this ensures that the
                        checkout page is always accessed on an encrypted domain.
                        If you are using this checkout experience, visit our
                        [Stencil
                        documentation](https://developer.bigcommerce.com/stencil-docs/template-files/customize-stencil-checkout/optimized-one-page-checkout)
                        to review all available options for styling the checkout
                        page.


                        If an SSL is detected, shoppers will visit an embedded
                        version of the BigCommerce checkout page, on your
                        WordPress domain. This has the advantage of providing a
                        seamless experience for the shopper. 
                      header:
                        anchor: customization-guide_styling-checkout
                    - type: text
                      data: >-
                        ### Embedded Checkout


                        Embedded Checkout includes settings within the WordPress
                        theme customizer that allow you to adjust colors to
                        blend the checkout page with your theme. For advanced
                        users, the plugin provides the [Checkout Config
                        hook](https://bigcommerce.moderntribe.qa/reference/hooks/bigcommerce-checkout-config/)
                        to filter all available [Embedded Checkout config
                        options](https://github.com/bigcommerce/checkout-sdk-js/blob/master/docs/interfaces/embeddedcheckoutoptions.md)
                        (Github). Because of the method used to load the
                        Embedded Checkout within the iframe, styling checkout
                        must be accomplished by filtering the available
                        `$checkout_config` options rather than targeting element
                        classes or IDs with CSS.


                        Below, we define a function called
                        `myCheckoutFunction()` that accepts `$checkout_config`
                        as an argument. The function builds an array of checkout
                        config styles that make the checkout step header text
                        red, step number icons blue, and checkout body text
                        green. Finally, we pass `myCheckoutFunction` to the
                        Checkout Config hook. Try adding the below snippet to
                        your theme’s `functions.php` file to test it out.
                    - type: code
                      data: >
                        function myCheckoutFunction($checkout_config) {
                          $checkout_config['styles']['heading']['color'] = '#C70039'; //red
                          $checkout_config['styles']['step']['icon']['backgroundColor'] = '#AE0BE6'; //purple
                          $checkout_config['styles']['step']['color'] = '#0BE640'; //green
                          return $checkout_config;
                        }

                        add_filter( 'bigcommerce/checkout/config',
                        'myCheckoutFunction');
                      header: {}
                      config:
                        mode: js
                    - type: text
                      data: >-
                        Following this format, you can apply styles to other
                        elements, like buttons, input fields, and checkboxes.
                        See the full list of checkout elements that can be
                        styled and which properties you can adjust in the
                        [Embedded Checkout Styles
                        documentation](https://github.com/bigcommerce/checkout-sdk-js/blob/master/docs/interfaces/embeddedcheckoutstyles.md)
                        (Github).


                        Note that styles apply globally to all elements on the
                        checkout page. For example, styles applied to steps will
                        apply to all steps rather than targeting only step 2 or
                        3.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Email Templates

                        You may wish to customize the built-in transactional
                        emails sent from BigCommerce when an order is placed or
                        updated. You can add custom text or images to email
                        templates to reflect your store’s branding. 


                        Email templates can be customized and enabled/disabled
                        on an individual basis from the BigCommerce control
                        panel. For more information, see [Customizing
                        Emails](https://support.bigcommerce.com/s/article/Customizing-Emails).
                      header:
                        anchor: customization-guide_email-templates
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Additional Resources

                        -
                        [https://codex.wordpress.org/Theme_Development](https://codex.wordpress.org/Theme_Development)

                        -
                        [https://wpengine.com/resources/customize-wordpress-plugin/](https://wpengine.com/resources/customize-wordpress-plugin/)

                        -
                        [https://css-tricks.com/methods-overriding-styles-wordpress/](https://css-tricks.com/methods-overriding-styles-wordpress/)
                      header:
                        anchor: customization-guide_external-resources
              - title: Code Reference
                route:
                  path: /code-reference
                data:
                  blocks:
                    - type: html
                      data: >-
                        <h3 class="sub-docs-type"
                        id="bigcommerce-for-wordpress">BigCommerce for
                        Wordpress</h3>

                        <h1 class="sub-docs-title">Code Reference</h1>
                    - type: text
                      data: >-
                        Search the BigCommerce for WordPress codebase for
                        detailed entries on available hooks, functions, classes
                        and methods. Do a deep dive, and browse the building
                        blocks you can use to extend and customize the plugin.


                        [View the code reference
                        here](https://bigcommerce.moderntribe.qa/)
        - title: Changelog
          route:
            path: /changelog
          data:
            children:
              - title: BigCommerce for Wordpress Changelog
                route:
                  path: /plugin-changelog
                data: {}
  /stencil-cornerstone-license:
    title: Stencil and Cornerstone License
    data:
      $ref: ./stencil-licenses.html
  /marketo-form:
    title: Marketo Form
    data:
      $ref: ./lead-capture-form.html
theme:
  background: '#4d34c6'
  primary: '#4b71fc'
  secondary: '#2553fb'
logo: >-
  https://cdn6.bigcommerce.com/s-qtmbtj/product_images/uploaded_images/bigcommerce-logomark-darkbg.png
meta:
  title: BigCommerce Dev Center - Theme Development & API Documentation
  favicon: 'https://www.bigcommerce.com/assets/images/favicons/favicon-96x96.png'
  description: >-
    Build apps and themes for thousands of successful merchants on our growing
    ecommerce platform.
