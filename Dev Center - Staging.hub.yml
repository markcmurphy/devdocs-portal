title: Dev Center
header:
  nav:
    left:
      - title: API Docs
        path: /api-docs
      - title: API Reference
        path: /api-reference
      - title: Theme Docs
        path: /stencil-docs
      - title: Tools
        path: /tools-resources
      - title: Blog
        path: 'https://medium.com/bigcommerce-developer-blog'
      - title: Changelog
        path: /changelog
    right:
      - title: My Apps
        path: 'https://devtools.bigcommerce.com'
      - title: Create Account
        path: 'https://login.bigcommerce.com/signup'
pages:
  /:
    title: BigCommerce Dev Center - API & Theme Documentation
    data:
      $ref: ./Home.html
  /api-docs:
    title: API Docs
    data:
      blocks:
        - type: html
          data: |-
            <div class="docs-landing bg-bclightblue">
              <div class="cBrLandingTiles">
                <div class="ui-widget">
                  <div>
                    <div style="padding: 62px 0px 0px;">
                      <div>
                        <h1 class="h1 panel-title__text-dark">API Documentation</h1>
                      </div>
                    </div>
                  </div>
                </div>
              </div><!-- landing tiles -->
              <div class="cBrLandingTiles" style="margin-bottom: 5%;">
                <div data-region-name="landingTiles">
                  <div class="ui-widget">
                    <div class="lift-content">
                      <div>
                        <div>
                          <div class="row row--pad">
                            <div class="column-md-12 column-lg-6 column--pad m-bottom-25"><a href="/api-docs/getting-started/basics/making-requests" class="cursor-pointer">
                              <div class="panel-media doc-landing">
                                <div class="panel-media__wrap-icon">
                                  <div class="panel-media__icon">
                                    <img alt="" src="https://storage.googleapis.com/bigcommerce-production-dev-center/images/Getting-Started.svg">
                                  </div>
                                </div>
                                <div class="panel-media__wrap-content">
                                  <h4 class="h4 panel-media__title">Getting Started</h4>
                                  <p class="panel-media__text type--sm">Get up to speed. Follow our Quick Start Guide to begin building flexible, scalable technical solutions for businesses.</p>
                                </div>
                              </div>
                              </a>
                            </div>
                            <div class="column-md-12 column-lg-6 column--pad m-bottom-25"><a href="/api-docs/getting-started/webhooks/about-webhooks" class="cursor-pointer">
                              <div class="panel-media doc-landing">
                                <div class="panel-media__wrap-icon">
                                  <div class="panel-media__icon">
                                    <img alt="" src="https://storage.googleapis.com/bigcommerce-production-dev-center/images/Webhooks.svg">
                                  </div>
                                </div>
                                <div class="panel-media__wrap-content">
                                  <h4 class="h4 panel-media__title">Webhooks</h4>
                                  <p class="panel-media__text type--sm">Respond in real time. Utilize webhooks to subscribe to events in a BigCommerce store. </p>
                                </div>
                              </div>
                              </a>
                            </div>
                            <div class="column-md-12 column-lg-6 column--pad m-bottom-25"><a href="/api-docs/orders/orders-overview" class="cursor-pointer">
                              <div class="panel-media doc-landing">
                                <div class="panel-media__wrap-icon">
                                  <div class="panel-media__icon">
                                    <img alt="" src="https://storage.googleapis.com/bigcommerce-production-dev-center/images/Orders-API.svg">
                                  </div>
                                </div>
                                <div class="panel-media__wrap-content">
                                  <h4 class="h4 panel-media__title">Orders API</h4>
                                  <p class="panel-media__text type--sm">Plug in and connect. Access BigCommerce order data to boost your POS and fulfillment solutions.</p>
                                </div>
                              </div>
                              </a>
                            </div>
                            <div class="column-md-12 column-lg-6 column--pad m-bottom-25"><a href="/api-docs/cart-and-checkout/cart-and-checkout-overview" class="cursor-pointer">
                              <div class="panel-media doc-landing">
                                <div class="panel-media__wrap-icon">
                                  <div class="panel-media__icon">
                                    <img alt="" src="https://storage.googleapis.com/bigcommerce-production-dev-center/images/Storefront-API.svg">
                                  </div>
                                </div>
                                <div class="panel-media__wrap-content">
                                  <h4 class="h4 panel-media__title">Storefront APIs</h4>
                                  <p class="panel-media__text type--sm">Build flexible solutions. Access and modify store data client-side using JavaScript. </p>
                                </div>
                              </div>
                              </a>
                            </div>
                            <div class="column-md-12 column-lg-6 column--pad m-bottom-25"><a href="/api-docs/catalog/products-overview" class="cursor-pointer">
                              <div class="panel-media doc-landing">
                                <div class="panel-media__wrap-icon">
                                  <div class="panel-media__icon">
                                    <img alt="" src="https://storage.googleapis.com/bigcommerce-production-dev-center/images/Catelog-API.svg">
                                  </div>
                                </div>
                                <div class="panel-media__wrap-content">
                                  <h4 class="h4 panel-media__title">Catalog API</h4>
                                  <p class="panel-media__text type--sm">Channel your product data. Link your catalog to power inventory, omni channel selling, and more.</p>
                                </div>
                              </div>
                              </a>
                            </div>
                            <div class="column-md-12 column-lg-6 column--pad"><a href="https://developer.bigcommerce.com/api-docs/partner/becoming-a-partner" target="_blank" class="cursor-pointer">
                              <div class="panel-media doc-landing">
                                <div class="panel-media__wrap-icon">
                                  <div class="panel-media__icon">
                                    <img alt="" src="https://storage.googleapis.com/bigcommerce-production-dev-center/images/Marketplace.svg">
                                  </div>
                                </div>
                                <div class="panel-media__wrap-content">
                                  <h4 class="h4 panel-media__title">Join the App Marketplace</h4>
                                  <p class="panel-media__text type--sm">Ready to monetize your app? Become a BigCommerce Tech Partner and list your solution on the App Marketplace.</p>
                                </div>
                              </div>
                              </a>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
      children:
        - title: Getting Started
          route:
            path: /getting-started
          data:
            children:
              - title: Quick Start
                route:
                  path: /making-requests
                data:
                  blocks:
                    - type: html
                      data: "<h1>Quick Start</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    \t\t<li><a href=\"#making-requests_prerequisites\">Overview<a/></li>\n        <li><a href=\"#making-requests_get-products\">Getting a List of Products</a></li>\n        <li><a href=\"#making-requests_create-a-product\">Creating a Product</a></li>\n        <li><a href=\"#making-requests_troubleshooting\">Troubleshooting</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Overview


                        This Quick Start guide will take you through the minimum
                        required steps to begin making API requests. By the end
                        of this guide, you’ll be able to retrieve a store’s
                        product catalog, create a new product, and troubleshoot
                        common errors.


                        Before we begin, here are a few key concepts:

                        * API requests are always made against a single store’s
                        data, and API tokens are issued on a per-store basis.
                        The first step to using the BigCommerce API is creating
                        a BigCommerce store.

                        * API Credentials can be generated from a store’s
                        control panel. If you’re testing requests or writing a
                        script for a single store, start here to quickly get
                        your token and begin making API calls. 

                        * If you’re building an app that will install in a
                        store’s control panel, you’ll need to generate an API
                        token programmatically during the [app installation
                        process](/api-docs/getting-started/building-apps-bigcommerce/building-apps#building-apps_installation-update-sequence).
                        However in the beginning, it’s still a good idea to
                        generate API credentials from the control panel to start
                        testing requests with minimal effort.



                        ### Prerequisites

                        * [API
                        Credentials](/api-docs/getting-started/authentication#authentication_getting-api-credentials)

                        *
                        [Scope](/api-docs/getting-started/authentication#authentication_oauth-scopes)
                        set to `Products Modify`

                        * BigCommerce Store (`store_hash`)


                        *Note: You can use any API client (like Postman) for
                        this walkthrough, but these steps are written with the
                        built-in HTTP request maker in mind.*
                      header:
                        anchor: making-requests_prerequisites
                    - type: text
                      data: "## Getting a List of Products\n\nIn this walkthrough, we'll get a list of products from the store, use a limit filter to only show the first 10 products, and sort products by name. \n\nIn the request maker below, we've prefilled the URL to /GET products: `https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products`\n\nTo add [filters](/api-docs/getting-started/filtering), append `?page=10&sort=name` to the end of the request URL.\n\n\nIn the request maker tabs, replace these placeholders with the appropriate values:  \n- {X-Auth-Token} Header - Access Token from API Credentials\n- {X-Auth-Client} Header - Client Id from API Credentials\n- store_hash variable - the hash in your api path \n\t- https://api.bigcommerce.com/stores/{store_hash}/v3/\n\n \nHit the send button and review your response."
                      header:
                        anchor: making-requests_get-products
                    - type: http
                      data:
                        method: get
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Token: '{X-Auth-Token}'
                          X-Auth-Client: '{X-Auth-Client}'
                        query:
                          limit: '10'
                          sort: name
                      header:
                        title: Get a List of Products
                    - type: code
                      data: |-
                        {
                          "data": [
                            {
                              "id": 174,
                              "name": "1L Le Parfait Jar",
                              "type": "physical",
                              "sku": "",
                              "description": "<p><span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vel metus ac est egestas porta sed quis erat. Integer id nulla massa. Proin vitae enim nisi. Praesent non dignissim nulla. Nulla mattis id massa ac pharetra. Mauris et nisi in dolor aliquam sodales. Aliquam dui nisl, dictum quis leo sit amet, rutrum volutpat metus. Curabitur libero nunc, interdum ac libero non, tristique porttitor metus. Ut non dignissim lorem, in vestibulum leo. Vivamus sodales quis turpis eget.</span></p>",
                              "weight": 1,
                              "width": 0,
                              "depth": 0,
                              "height": 0,
                              "price": 7.95,
                              "cost_price": 0,
                              "retail_price": 10,
                              "sale_price": 0,
                              "map_price": 0,
                              "tax_class_id": 0,
                              "product_tax_code": "",
                              "calculated_price": 7.95,
                              "categories": [
                                23,
                                21
                              ],
                              "brand_id": 36,
                              "option_set_id": null,
                              "option_set_display": "right",
                              "inventory_level": 0,
                              "inventory_warning_level": 0,
                              "inventory_tracking": "none",
                              "reviews_rating_sum": 0,
                              "reviews_count": 0,
                              "total_sold": 7,
                              "fixed_cost_shipping_price": 0,
                              "is_free_shipping": false,
                              "is_visible": true,
                              "is_featured": false,
                              "related_products": [
                                -1
                              ],
                              "warranty": "",
                              "bin_picking_number": "",
                              "layout_file": "product.html",
                              "upc": "",
                              "mpn": "",
                              "gtin": "",
                              "search_keywords": "jar, glass",
                              "availability": "available",
                              "availability_description": "",
                              "gift_wrapping_options_type": "any",
                              "gift_wrapping_options_list": [],
                              "sort_order": 0,
                              "condition": "New",
                              "is_condition_shown": false,
                              "order_quantity_minimum": 0,
                              "order_quantity_maximum": 0,
                              "page_title": "",
                              "meta_keywords": [],
                              "meta_description": "",
                              "date_created": "2018-08-15T14:48:46+00:00",
                              "date_modified": "2018-09-12T17:32:23+00:00",
                              "view_count": 14,
                              "preorder_release_date": null,
                              "preorder_message": "",
                              "is_preorder_only": false,
                              "is_price_hidden": false,
                              "price_hidden_label": "",
                              "custom_url": {
                                "url": "/all/1l-le-parfait-jar/",
                                "is_customized": true
                              },
                              "base_variant_id": 345,
                              "open_graph_type": "product",
                              "open_graph_title": "",
                              "open_graph_description": "",
                              "open_graph_use_meta_description": true,
                              "open_graph_use_product_name": true,
                              "open_graph_use_image": true
                            },
                            {
                              "id": 167,
                              "name": "Able Brewing System",
                              "type": "physical",
                              "sku": "",
                              "description": "<p><span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vel metus ac est egestas porta sed quis erat. Integer id nulla massa. Proin vitae enim nisi. Praesent non dignissim nulla. Nulla mattis id massa ac pharetra. Mauris et nisi in dolor aliquam sodales. Aliquam dui nisl, dictum quis leo sit amet, rutrum volutpat metus. Curabitur libero nunc, interdum ac libero non, tristique porttitor metus. Ut non dignissim lorem, in vestibulum leo. Vivamus sodales quis turpis eget.</span></p>",
                              "weight": 1,
                              "width": 0,
                              "depth": 0,
                              "height": 0,
                              "price": 225,
                              "cost_price": 0,
                              "retail_price": 0,
                              "sale_price": 0,
                              "map_price": 0,
                              "tax_class_id": 0,
                              "product_tax_code": "",
                              "calculated_price": 225,
                              "categories": [
                                23,
                                21
                              ],
                              "brand_id": 43,
                              "option_set_id": 52,
                              "option_set_display": "right",
                              "inventory_level": 0,
                              "inventory_warning_level": 0,
                              "inventory_tracking": "none",
                              "reviews_rating_sum": 0,
                              "reviews_count": 0,
                              "total_sold": 2,
                              "fixed_cost_shipping_price": 0,
                              "is_free_shipping": false,
                              "is_visible": true,
                              "is_featured": false,
                              "related_products": [
                                -1
                              ],
                              "warranty": "",
                              "bin_picking_number": "",
                              "layout_file": "product.html",
                              "upc": "",
                              "mpn": "",
                              "gtin": "",
                              "search_keywords": "",
                              "availability": "available",
                              "availability_description": "",
                              "gift_wrapping_options_type": "any",
                              "gift_wrapping_options_list": [],
                              "sort_order": 0,
                              "condition": "New",
                              "is_condition_shown": false,
                              "order_quantity_minimum": 0,
                              "order_quantity_maximum": 0,
                              "page_title": "",
                              "meta_keywords": [],
                              "meta_description": "",
                              "date_created": "2018-08-15T14:48:36+00:00",
                              "date_modified": "2018-08-20T15:11:17+00:00",
                              "view_count": 21,
                              "preorder_release_date": null,
                              "preorder_message": "",
                              "is_preorder_only": false,
                              "is_price_hidden": false,
                              "price_hidden_label": "",
                              "custom_url": {
                                "url": "/all/able-brewing-system/",
                                "is_customized": true
                              },
                              "base_variant_id": 338,
                              "open_graph_type": "product",
                              "open_graph_title": "",
                              "open_graph_description": "",
                              "open_graph_use_meta_description": true,
                              "open_graph_use_product_name": true,
                              "open_graph_use_image": true
                            },
                            {
                              "id": 181,
                              "name": "All Purpose Cleaner",
                              "type": "physical",
                              "sku": "",
                              "description": "<p><span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vel metus ac est egestas porta sed quis erat. Integer id nulla massa. Proin vitae enim nisi. Praesent non dignissim nulla. Nulla mattis id massa ac pharetra. Mauris et nisi in dolor aliquam sodales. Aliquam dui nisl, dictum quis leo sit amet, rutrum volutpat metus. Curabitur libero nunc, interdum ac libero non, tristique porttitor metus. Ut non dignissim lorem, in vestibulum leo. Vivamus sodales quis turpis eget.</span></p>",
                              "weight": 1,
                              "width": 0,
                              "depth": 0,
                              "height": 0,
                              "price": 15,
                              "cost_price": 0,
                              "retail_price": 0,
                              "sale_price": 0,
                              "map_price": 0,
                              "tax_class_id": 0,
                              "product_tax_code": "",
                              "calculated_price": 15,
                              "categories": [
                                21,
                                22
                              ],
                              "brand_id": 37,
                              "option_set_id": null,
                              "option_set_display": "right",
                              "inventory_level": 0,
                              "inventory_warning_level": 0,
                              "inventory_tracking": "none",
                              "reviews_rating_sum": 0,
                              "reviews_count": 0,
                              "total_sold": 0,
                              "fixed_cost_shipping_price": 0,
                              "is_free_shipping": false,
                              "is_visible": true,
                              "is_featured": false,
                              "related_products": [
                                -1
                              ],
                              "warranty": "",
                              "bin_picking_number": "",
                              "layout_file": "product.html",
                              "upc": "",
                              "mpn": "",
                              "gtin": "",
                              "search_keywords": "",
                              "availability": "available",
                              "availability_description": "",
                              "gift_wrapping_options_type": "any",
                              "gift_wrapping_options_list": [],
                              "sort_order": 0,
                              "condition": "New",
                              "is_condition_shown": false,
                              "order_quantity_minimum": 0,
                              "order_quantity_maximum": 0,
                              "page_title": "",
                              "meta_keywords": [],
                              "meta_description": "",
                              "date_created": "2018-08-15T14:48:51+00:00",
                              "date_modified": "2018-08-15T15:01:15+00:00",
                              "view_count": 0,
                              "preorder_release_date": null,
                              "preorder_message": "",
                              "is_preorder_only": false,
                              "is_price_hidden": false,
                              "price_hidden_label": "",
                              "custom_url": {
                                "url": "/all/all-purpose-cleaner/",
                                "is_customized": true
                              },
                              "base_variant_id": 352,
                              "open_graph_type": "product",
                              "open_graph_title": "",
                              "open_graph_description": "",
                              "open_graph_use_meta_description": true,
                              "open_graph_use_product_name": true,
                              "open_graph_use_image": true
                            }

                          ],
                          "meta": {
                            "pagination": {
                              "total": 39,
                              "count": 10,
                              "per_page": 10,
                              "current_page": 1,
                              "total_pages": 4,
                              "links": {
                                "next": "?limit=10&sort=name&page=2",
                                "current": "?limit=10&sort=name&page=1"
                              },
                              "too_many": false
                            }
                          }
                        }
                      header:
                        title: GET Products Response
                        subtitle: 200 OK
                    - type: text
                      data: >-
                        The products are returned in a data array that contains
                        each product object. Located at the bottom of the
                        response is the meta object that shows the total number
                        of products being returned, but also the products
                        `per_page` which is 10, set using the limit query in the
                        request.


                        ### Next Steps

                        * Try including other filter paramters such as name or
                        include and exclude. See [Get All
                        Products](/api-reference/catalog/catalog-api/products/getproducts)
                        for a full list of available filters. 
                    - type: text
                      data: '---'
                    - type: text
                      data: "## Create a Product\n\nIn this walkthrough, we'll create an example product: BigCommerce Hoodie. The minimum parameters to create a product are: name, price, category, type and weight. \n\n* **Name**: The name of your product as a string.\n* **Price**: How much the items costs in number format. \n* **Category**: The `{category_id}` for the category this product belongs to. An item can be assigned to more than one category. You can /GET the category id by using:\n\n`https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/categories`\n\n* **Type**: Is the item physical or digital?\n\t- Physical items are anything that is shipped to the customer, such as a t-shirt.\n\t- Digital items are products that the customer downloads, such as a PDF of an ebook. \n* **Weight**: How much the product weighs as a number. The measurement unit is determined by the [store settings](https://forum.bigcommerce.com/s/article/Store-Settings#physical). \n\nReview the information pre-populated in the Body tab below. Make sure to run a GET request for the categories first and update request with the appropriate category ID."
                      header:
                        anchor: making-requests_create-a-product
                    - type: http
                      data:
                        method: post
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products
                        headers:
                          Accept: application/sjon
                          X-Auth-Token: '{X-Auth-Token}'
                          X-Auth-Client: '{X-Auth-Client}'
                          Content-Type: application/json
                        body: |
                          {
                            "name": "BigCommerce Hoodie",
                            "type": "physical",
                            "description": "A super soft hoodie to wear",
                            "weight": 5,
                            "width": 12,
                            "price": 25.99,
                            "categories": [
                              // set your category here. Accepts a comma seperated list
                            ],
                            "condition": "New"
                          }
                      header:
                        title: Create a Product
                    - type: code
                      data: |-
                        {
                            "data": {
                                "id": 196,
                                "name": "BigCommerce Hoodie",
                                "type": "physical",
                                "sku": "",
                                "description": "A super soft hoodie to wear",
                                "weight": 5,
                                "width": 12,
                                "depth": 0,
                                "height": 0,
                                "price": 25.99,
                                "cost_price": 0,
                                "retail_price": 0,
                                "sale_price": 0,
                                "map_price": 0,
                                "tax_class_id": 0,
                                "product_tax_code": "",
                                "calculated_price": 25.99,
                                "categories": [
                                    20,
                                    21
                                ],
                                "brand_id": 0,
                                "option_set_id": null,
                                "option_set_display": "right",
                                "inventory_level": 0,
                                "inventory_warning_level": 0,
                                "inventory_tracking": "none",
                                "reviews_rating_sum": 0,
                                "reviews_count": 0,
                                "total_sold": 0,
                                "fixed_cost_shipping_price": 0,
                                "is_free_shipping": false,
                                "is_visible": true,
                                "is_featured": false,
                                "related_products": [
                                    -1
                                ],
                                "warranty": "",
                                "bin_picking_number": "",
                                "layout_file": "",
                                "upc": "",
                                "mpn": "",
                                "gtin": "",
                                "search_keywords": "",
                                "availability": "available",
                                "availability_description": "",
                                "gift_wrapping_options_type": "any",
                                "gift_wrapping_options_list": [],
                                "sort_order": 0,
                                "condition": "New",
                                "is_condition_shown": false,
                                "order_quantity_minimum": 0,
                                "order_quantity_maximum": 0,
                                "page_title": "",
                                "meta_keywords": [],
                                "meta_description": "",
                                "date_created": "2018-09-21T17:12:59+00:00",
                                "date_modified": "2018-09-21T17:12:59+00:00",
                                "view_count": 0,
                                "preorder_release_date": null,
                                "preorder_message": "",
                                "is_preorder_only": false,
                                "is_price_hidden": false,
                                "price_hidden_label": "",
                                "custom_url": {
                                    "url": "/bigcommerce-hoodie/",
                                    "is_customized": false
                                },
                                "base_variant_id": 402,
                                "open_graph_type": "product",
                                "open_graph_title": "",
                                "open_graph_description": "",
                                "open_graph_use_meta_description": true,
                                "open_graph_use_product_name": true,
                                "open_graph_use_image": true,
                                "variants": [
                                    {
                                        "id": 402,
                                        "product_id": 196,
                                        "sku": "",
                                        "sku_id": null,
                                        "price": 25.99,
                                        "calculated_price": 25.99,
                                        "sale_price": 0,
                                        "retail_price": 0,
                                        "map_price": 0,
                                        "weight": 5,
                                        "width": 12,
                                        "height": 0,
                                        "depth": 0,
                                        "is_free_shipping": false,
                                        "fixed_cost_shipping_price": 0,
                                        "calculated_weight": 5,
                                        "purchasing_disabled": false,
                                        "purchasing_disabled_message": "",
                                        "image_url": "",
                                        "cost_price": 0,
                                        "upc": "",
                                        "mpn": "",
                                        "gtin": "",
                                        "inventory_level": 0,
                                        "inventory_warning_level": 0,
                                        "bin_picking_number": "",
                                        "option_values": []
                                    }
                                ],
                                "images": [],
                                "primary_image": null,
                                "videos": [],
                                "custom_fields": [],
                                "bulk_pricing_rules": [],
                                "reviews": []
                            },
                            "meta": {}
                        }
                      header:
                        title: Response POST Products
                        subtitle: 200 OK
                      config:
                        mode: json
                    - type: text
                      data: >-
                        ### Next Steps

                        * To see a full list of fields that can be sent in a
                        request see [Create a
                        Product](/api-reference/catalog/catalog-api/products/createproduct)

                        * Try to make a different product with new attributes.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Troubleshooting


                        Did you get a status of 403 Forbidden?

                        * Check the Client ID and Client Token.

                        * Make sure your request headers are correct.

                        * Be sure you replaced `{store_hash}` with your store
                        hash. 

                        * Make sure the request url is correct.


                        Did you get a 200 but nothing was returned?

                        * Make sure your store has products.


                        Did you get a status of 404?

                        * Check the request url for errors.
                      header:
                        anchor: making-requests_troubleshooting
              - title: About Our API
                route:
                  path: /about-our-api
                data:
                  blocks:
                    - type: html
                      data: "<h1>About Our API</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#about-api_api-enviroment\">API Environment</a></li>\n        <li><a href=\"#about-api__available-api\">Available APIs</a></li>\n        <li><a href=\"#about-api_request-headers\">Request Headers</a></li>\n        <li><a href=\"#about-api_response-headers\">Response Headers</a></li>\n        <li><a href=\"#about-api_media-types\">Media Types</a></li>\n        <li><a href=\"#about-api_content-types\">Content Types</a></li>\n    <li><a href=\"#  about-api_request-and-response-structure\">Request and Response Structure</a></li>\n    \t\t<li><a href=\"#about-api_get-help\">Support</a></li>\n    \t\t<li><a href=\"https://www.bigcommerce.com/terms/api-terms/\">Terms of Service</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        Want to get started making API Requests right away?
                        Check out the [Quick
                        Start](/api-docs/getting-started/basics/making-requests).


                        The BigCommerce set of APIs allow you to create apps,
                        automate store processes or build headless ecommerce
                        solutions. Need inspiration on what to build? Visit our
                        [App Marketplace](https://www.bigcommerce.com/apps/). 
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## API Environment 


                        BigCommerce API requests can be made in the context of
                        the storefront or server-to-server.  


                        * Storefront APIs use the store url:
                        `https://your-store.mybigcommerce.com/api/{endpoint}`

                        * Server-to-Server requests use the base url: 
                        `https://api.bigcommerce.com/stores/{store_hash}/v3/`

                        * V2 API Requests use the base url:
                        `https://api.bigcommerce.com/stores/{store_hash}/v2/`
                      header:
                        anchor: about-api_api-enviroment
                    - type: text
                      data: >-
                        ## Available APIs



                        |API | Description | Download Schema |

                        |--|--| -- |

                        | [Catalog](/api-reference/catalog/catalog-api) | The
                        Catalog API manages products, brands and categories for
                        a store. | [Download Catalog
                        API](https://developer.bigcommerce.com/api-reference/catalog/catalog-api/BigCommerce_Catalog_API.oas2.json)

                        | [Store
                        Infomation](/api-reference/store-management/store-information-api)
                        | Get system time stamp and basic store information. |
                        [Download Store Information
                        API](https://developer.bigcommerce.com/api-reference/store-management/store-information-api/BigCommerce_Store_Information_API.oas2.json)
                        |

                        | [Currency](/api-reference/store/currency-api) | Manage
                        currency displayed on the storefront | [Download
                        Currency
                        API](https://developer.bigcommerce.com/api-reference/store-management/currency-api/BigCommerce_Currency_API.oas2.json)

                        | [Geography](/api-reference/store/geography-api) | Get
                        a list of states and countries  | [Download Geography
                        API](https://developer.bigcommerce.com/api-reference/store-management/geography-api/BigCommerce_Geography_API.oas2.json)

                        | [Tax Class](/api-reference/store/tax-classes-api) |
                        Get available tax classes on a store | [Download Tax
                        Class
                        API](https://developer.bigcommerce.com/api-reference/store-management/tax-classes-api/BigCommerce_Tax_Class_API.oas2.json)

                        | [Storefront
                        Cart](/api-reference/cart-checkout/storefront-cart-api)
                        | Create a cart or scrape cart data from the front end |
                        [Download Storefront Cart
                        API](https://developer.bigcommerce.com/api-reference/cart-checkout/storefront-cart-api/BigCommerce_Storefront_Cart_API.oas2.json)

                        | [Storefront
                        Checkout](/api-reference/cart-checkout/storefront-checkout-api)
                        | Create a checkout or scrape checkout data from the
                        front end |[Download Storefront Checkout
                        API](https://developer.bigcommerce.com/api-reference/cart-checkout/storefront-checkout-api/BigCommerce_Storefront_Checkout_API.oas2.json)

                        | [Server-to-Server
                        Cart](/api-reference/cart-checkout/server-server-cart-api)
                        | Create a cart and bypass the BigCommerce front end |
                        [Download Server-to-Server Cart
                        API](https://developer.bigcommerce.com/api-reference/cart-checkout/server-server-cart-api/BigCommerce_Server_to_Server_Cart_API.oas2.json)

                        | [Server-to-Server
                        Checkout](/api-reference/cart-checkout/server-server-checkout-api)
                        | Create a checkout and bypass the BigCommerce front end
                        | [Download Server-Server Checkout
                        API](https://developer.bigcommerce.com/api-reference/cart-checkout/server-server-checkout-api/BigCommerce_Server_to_Server_Checkout_API.oas2.json)

                        | [Orders](/api-reference/orders/orders-api) | Create
                        and manage orders | [Download Orders
                        API](https://developer.bigcommerce.com/api-reference/orders/orders-api/BigCommerce_Orders_API.oas2.json)

                        | [Order
                        Transactions](/api-reference/orders/orders-transactions-api)
                        | View order payment information | [Download Order
                        Transactions
                        API](https://developer.bigcommerce.com/api-reference/orders/orders-transactions-api/BigCommerce_Order_Transactions_API.oas2.json)

                        | [Storefront
                        Orders](/api-reference/orders/storefront-orders-api) |
                        View storefront order information | [Download Storefront
                        Orders
                        API](https://developer.bigcommerce.com/api-reference/orders/storefront-orders-api/BigCommerce_Storefront_Orders_API.oas2.json)

                        |
                        [Customers](/api-reference/customer-subscribers/customers-api)
                        | Manage store customers  | [Download Customers
                        API](https://developer.bigcommerce.com/api-reference/customer-subscribers/customers-api/BigCommerce_Customers_API.oas2.json)

                        |
                        [Subscribers](/api-reference/customer-subscribers/subscribers-api)
                        | Manage newsletter subscribers | [Download Subscribers
                        API](https://developer.bigcommerce.com/api-reference/customer-subscribers/subscribers-api/BigCommerce_Subscribers_API.oas2.json)

                        | [Price
                        Lists](/api-reference/price-lists/pricelists-api) |
                        Create variations of catalog pricing. | [Download Price
                        Lists
                        API](https://developer.bigcommerce.com/api-reference/catalog/pricelists-api/BigCommerce_Price_Lists_API.oas2.json)
                        |

                        | [Scripts](/api-reference/content/content-scripts-api)
                        | Add a script to a stores page | [Download Scripts
                        API](https://developer.bigcommerce.com/api-reference/storefront/content-scripts-api/BigCommerce_Scripts_API.oas2.json)

                        | [Marketing](/api-reference/marketing/marketing-api) |
                        Create and manage Coupons, Banners and Gift
                        Certificates. | [Download Marketing
                        API](https://developer.bigcommerce.com/api-reference/marketing/marketing-api/BigCommerce_Marketing_API.oas2.json)

                        | [Payment
                        Methods](/api-reference/payments/payment-methods-api) |
                        Get a list of available payment methods. | [Download
                        Payment Methods
                        API](https://developer.bigcommerce.com/api-reference/payments/payment-methods-api/BigCommerce_Payment_Methods_API.oas2.json)

                        | [Shipping](/api-reference/shipping/shipping-api) |
                        Create and manage shipping methods and zones. |[Download
                        Shipping
                        API](https://developer.bigcommerce.com/api-reference/store-management/shipping-api/BigCommerce_Shipping_API.oas2.json)

                        | [Store
                        Content](/api-reference/content/store-content-api) |
                        Mange the store's blog, web pages and redirects. |
                        [Download Store Content
                        API](https://developer.bigcommerce.com/api-reference/marketing/store-content-api/BigCommerce_Store_Content_API.oas2.json)

                        | [Themes](/api-reference/themes/themes-api) | Manage
                        store's themes. |[Download Themes
                        API](https://developer.bigcommerce.com/api-reference/storefront/themes-api/BigCommerce_Themes_API.oas2.json)
                      header:
                        anchor: about-api__available-api
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Request Headers


                        Server-to-Server request headers require Accept,
                        X-Auth-Client, X-Auth-Token and Content-Type at a
                        minimum.



                        | Header | Allowed Values | Description | Example |

                        | --- | --- | --- | --- |

                        | `Accept` | `application/json` (for .json requests)
                        `application/xml` (for .xml requests) | The MIME type
                        for the format you want to receive a response
                        in.|`application/xml` |

                        | `Content-Type` | `application/json` (for JSON
                        requests) `application/xml` (for XML requests) | The
                        MIME type of the request body. Used to validate and
                        parse the request to the API. | `application/json` |

                        | `User-Agent` | String | While it is not required, we
                        ask that you specify a user agent which identifies your
                        integration/client with your requests. |

                        | `X-Auth-Client` | String | Client ID of the requesting
                        app |

                        | `X-Auth-Token` | String | Access token authorizing the
                        app to access resources on behalf of a user |
                      header:
                        anchor: about-api_request-headers
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Response Headers 

                        ​

                        | Header | Possible Values | Description | Example |

                        | ------ | --------------- | ----------- | ------- |

                        | Date | An <a
                        href="http://tools.ietf.org/html/rfc2822#section-3.3"
                        target="_blank">RFC 2822</a> date. | The date the
                        response was sent. | `Tue, 15 Nov 2011 12:45:26 GMT` |

                        | last-modified | An <a
                        href="http://tools.ietf.org/html/rfc2822#section-3.3"
                        target="_blank">RFC 2822</a> date. | The date the
                        resource was last modified. Please refer to the
                        individual resource pages for support for this header. |
                        `Tue, 15 Nov 2011 12:45:26 GMT` |

                        | Content-Type | `application/json` | The MIME type of
                        the response, dependent on the extension of the endpoint
                        that was requested. | `application/json` |

                        | Content-Location | A URI | Sent if the request was
                        redirected. | `/api/v2/orders/5.json` |

                        | Location | A URI | The URI of a newly created
                        resource. Sent with a `201 Created` response. |
                        `/api/v2/products/7` |

                        | X-Retry-After | integer | Rate limited response,
                        indicating the number of seconds before the quota
                        refreshes. See [Rate
                        Limits](/api-docs/getting-started/basics/best-practices#best-practices_rate-limits)
                        for more information. | `15` |

                        | X-BC-ApiLimit-Remaining | integer | The number of API
                        requests remaining for the current period (rolling one
                        hour). See [Rate
                        Limits](/api-docs/getting-started/basics/best-practices#best-practices_rate-limits)
                        for more information. | `987` |

                        | X-BC-Store-Version | A version number | The version of
                        BigCommerce the store is running on. This header is
                        available on versions 7.3.6+. | ` 7.3.6` |

                        | Content-Encoding | `gzip` | Allows API clients to
                        request content to be compressed before being sent back
                        in the response to an API request. | `gzip` |

                        | Transfer-Encoding | `chunked` | Specifies the form of
                        encoding used to transfer the resource. | `chunked`

                        | X-Rate-Limit-Requests-Left | number | Details how many
                        remaining requests your client can make in the current
                        window before being rate-limited. In this case, you
                        would expect to be able to make 6 more requests in the
                        next 3000 milliseconds; on the 7th request within 3000
                        milliseconds, you would be rate-limited and would
                        receive an HTTP 429 response. | `16101491` |

                        | X-Rate-Limit-Requests-Quota | number | Shows how many
                        API requests are allowed in the current window for your
                        client. | `16101495` |

                        | X-Rate-Limit-Time-Reset-Ms  | number | Shows how many
                        milliseconds are remaining in the window. In this case,
                        3000 milliseconds – so, 3000 milliseconds after this
                        request, the API quota will be refreshed. |`30000 `|

                        | X-Rate-Limit-Time-Window-Ms | number | Shows the size
                        of your current rate-limiting window. | `9762` |
                      header:
                        anchor: about-api_response-headers
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Media Types


                        A media type is the format of the request or response
                        body. The BigCommerce API accepts requests and responds
                        in JSON. You should encode requests using the UTF-8
                        character set. (Other character sets might have
                        unpredictable results).
                      header:
                        anchor: about-api_media-types
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Content Types


                        ### Request Content Type

                        When performing a request that contains a body (eg. POST
                        or PUT), the type of content you are sending needs to be
                        specified in the Content-Type header. 


                        ### Response Content Type

                        There are two ways you can specify the type of content
                        you would like to receive. The first method is to
                        specify an Accept header. The second is to supply an
                        extension to the resource you are requesting. 


                        The priority in which these methods are processed are:

                        * Accept header high-priority types (eg. `Accept:
                        application/json`) extensions on the resource (e.g.
                        `customers.json`).

                        * Accept header low priority types (priorities less than
                        1, e.g. `Accept: application/json;q=0.9`)
                      header:
                        anchor: about-api_content-types
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Request and Response Structure


                        ### Request Structure

                        The body of a JSON request is an object containing a set
                        of key-value pairs. A simple representation of a product
                        object is:


                        ```

                        {
                             "id": 5,
                             "name": "iPod",
                             "description": "A portable MP3 music player."
                         } 
                        ```


                        ### Response Structure

                        Responses are structured similarly to requests. If a
                        request returns a single object, then the response will
                        contain a single object, containing the fields for that
                        resource.
                      header:
                        anchor: about-api_request-and-response-structure
                    - type: code
                      data: |-
                        {
                          "data": {
                            "id": 39,
                            "parent_id": 19,
                            "name": "Bath",
                            "description": "",
                            "views": 0,
                            "sort_order": 0,
                            "page_title": "",
                            "meta_keywords": [
                              ""
                            ],
                            "meta_description": "",
                            "layout_file": "category.html",
                            "image_url": "",
                            "is_visible": true,
                            "search_keywords": "",
                            "default_product_sort": "use_store_settings",
                            "custom_url": {
                              "url": "/garden/bath/",
                              "is_customized": false
                            }
                          },
                          "meta": {}
                        }
                      header:
                        title: Single Category Response
                      config:
                        mode: json
                    - type: code
                      data: |-
                        {
                          "data": [
                            {
                              "id": 19,
                              "parent_id": 0,
                              "name": "Garden",
                              "description": "<p>A collection of products for the garden.</p>",
                              "views": 0,
                              "sort_order": 2,
                              "page_title": "page title",
                              "meta_keywords": [
                                "meta keyword"
                              ],
                              "meta_description": "meta description",
                              "layout_file": "category.html",
                              "image_url": "",
                              "is_visible": true,
                              "search_keywords": "search keywords",
                              "default_product_sort": "use_store_settings",
                              "custom_url": {
                                "url": "/garden/",
                                "is_customized": false
                              }
                            },
                            {
                              "id": 20,
                              "parent_id": 0,
                              "name": "Publications",
                              "description": "",
                              "views": 0,
                              "sort_order": 4,
                              "page_title": "",
                              "meta_keywords": [
                                ""
                              ],
                              "meta_description": "",
                              "layout_file": "category_with_facets.html",
                              "image_url": "",
                              "is_visible": true,
                              "search_keywords": "",
                              "default_product_sort": "use_store_settings",
                              "custom_url": {
                                "url": "/publications/",
                                "is_customized": false
                              }
                            },
                            {
                              "id": 21,
                              "parent_id": 0,
                              "name": "Kitchen",
                              "description": "",
                              "views": 0,
                              "sort_order": 3,
                              "page_title": "",
                              "meta_keywords": [
                                ""
                              ],
                              "meta_description": "",
                              "layout_file": "category_with_facets.html",
                              "image_url": "",
                              "is_visible": true,
                              "search_keywords": "",
                              "default_product_sort": "use_store_settings",
                              "custom_url": {
                                "url": "/kitchen/",
                                "is_customized": false
                              }
                            },
                            {
                              "id": 22,
                              "parent_id": 0,
                              "name": "Utility",
                              "description": "",
                              "views": 0,
                              "sort_order": 5,
                              "page_title": "",
                              "meta_keywords": [
                                ""
                              ],
                              "meta_description": "",
                              "layout_file": "category_with_facets.html",
                              "image_url": "",
                              "is_visible": true,
                              "search_keywords": "",
                              "default_product_sort": "use_store_settings",
                              "custom_url": {
                                "url": "/utility/",
                                "is_customized": false
                              }
                            },
                            {
                              "id": 23,
                              "parent_id": 0,
                              "name": "Shop All",
                              "description": "<h1>Browse our full collection</h1>",
                              "views": 0,
                              "sort_order": 0,
                              "page_title": "",
                              "meta_keywords": [
                                ""
                              ],
                              "meta_description": "",
                              "layout_file": "category_with_facets.html",
                              "image_url": "",
                              "is_visible": true,
                              "search_keywords": "",
                              "default_product_sort": "use_store_settings",
                              "custom_url": {
                                "url": "/shop-all/",
                                "is_customized": false
                              }
                            },
                            {
                              "id": 39,
                              "parent_id": 19,
                              "name": "Bath",
                              "description": "",
                              "views": 0,
                              "sort_order": 0,
                              "page_title": "",
                              "meta_keywords": [
                                ""
                              ],
                              "meta_description": "",
                              "layout_file": "category.html",
                              "image_url": "",
                              "is_visible": true,
                              "search_keywords": "",
                              "default_product_sort": "use_store_settings",
                              "custom_url": {
                                "url": "/garden/bath/",
                                "is_customized": false
                              }
                            }
                          ],
                          "meta": {
                            "pagination": {
                              "total": 6,
                              "count": 6,
                              "per_page": 50,
                              "current_page": 1,
                              "total_pages": 1,
                              "links": {
                                "current": "?page=1&limit=50"
                              }
                            }
                          }
                        }
                      header:
                        title: Multiple Categories Response
                    - type: text
                      data: >-
                        ## Support


                        ### [Developer
                        Community](https://forum.bigcommerce.com/s/group/0F913000000HLjECAW/bigcommerce-developers)

                        This is a great place to get help from other developers
                        who work on the BigCommerce platform. If you have
                        BigCommerce specific questions this is the best place to
                        ask. It's also great for beginners to get assistance. 


                        ###
                        [StackOverflow](https://stackoverflow.com/questions/tagged/bigcommerce)

                        Are you a more experienced developer or have a
                        programming language specific question? This is a good
                        place to ask questions and get help. The developer
                        community is the best place to get answers about the
                        BigCommerce platform specifically.  
                      header:
                        anchor: about-api_get-help
              - title: Authentication
                route:
                  path: /authentication
                data:
                  blocks:
                    - type: html
                      data: "<h1>Authentication</h1>\n\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#authentication_what-are-oauth-credentials\">What are OAuth Credentials?</a></li>\n\t\t<li><a href=\"#authentication_getting-api-credentials\"> Getting API Credentials </a></li>\n\t\t<li><a href=\"#authentication_revoking-api-credentials\"> Revoking API Credentials</a></li>\n\t\t<li><a href=\"#authentication_client-id-secret\"> Getting Client ID and Client Secret</a></li>\n\t\t<li><a href=\"#authentication_when-to-use\"> Use Cases by Token Type</a></li>\n    <li><a href=\"#authentication_migration-legacy-oauth\">Migrating from Legacy to OAuth</a></li>\n\t\t<li><a href=\"#authentication_oauth-scopes\"> OAuth Scopes</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## What are OAuth Credentials?


                        BigCommerce uses [OAuth
                        authentication](https://dev.to/anabella/dancing-with-oauth-emp)
                        for all API and app usage. Currently, there are two
                        workflows to generate tokens, with different use cases. 


                        ### API Credentials

                        Credentials for making API requests are created in the
                        control panel and can only be created by the store
                        owner. Tokens created manually through the control panel
                        are referred to in this documentation as API Credentials
                        to distinguish them from tokens created
                        programmatically. API Credentials are used for testing
                        purposes and authenticating scripts, and they are tied
                        solely to the store used to generate them.


                        ### Client ID and Client Secret

                        Credentials for creating apps for sale in the
                        marketplace or private apps are created in [Dev
                        Tools](https://devtools.bigcommerce.com), the developer
                        workspace for managing apps. They are referred to as
                        Client ID and Client Secret in this documentation.  The
                        Client ID and Client Secret are used by an app to
                        generate an authorization token per store. This allows
                        your app to generate an Oauth token programmatically,
                        eliminating the need to have a merchant manually
                        generate API Credentials to connect an app to their
                        store and allowing your app to generate tokens for
                        multiple stores with a single Client ID and Secret. 
                      header:
                        anchor: authentication_what-are-oauth-credentials
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Getting API Credentials

                        You can create and manage API Credentials in the
                        BigCommerce control panel by creating an API account, as
                        described below. Only the store owner can create API
                        accounts; accounts are limited to 50 per store.


                        To create your API account and its corresponding token,
                        use the following steps:

                        1. Log into the store, using the store owner’s
                        username/password.

                        2. Select **Advanced Settings**.

                        3. Select **API Accounts**. This will display the Store
                        API Accounts page.

                        4. Select **Create API Account**. This will display the
                        Create API Account page shown above.

                        5. In the Name field, summarize the purpose for which
                        you will use these credentials. This name is for
                        internal use only, so assign any name that you will
                        recognize.

                        6. In the OAuth Scopes section, select at least the
                        minimum scopes your app will require.

                        7. Select **Save** at the page’s lower right-hand
                        corner.


                        A successful save will display a pop-up containing the
                        API credentials that your app will need to run
                        authenticated requests – your Client ID and Access
                        Token. A .txt file containing the same credentials will
                        (on most browsers) automatically download to your
                        computer. This file also contains the base API Path for
                        your store, preconfigured for the v3 API.


                        The base api path will look something like this:


                        `https://api.bigcommerce.com/stores/123456/`

                        In the base path, the store hash is the 123456. This
                        will be used to make api requests.


                        From a security perspective, these credentials are
                        sensitive – please treat them with the same caution that
                        you would treat a private key or root password


                        To get started making requests, see [API
                        Requests](/api-docs/getting-started/basics/making-requests).
                      header:
                        anchor: authentication_getting-api-credentials
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1536087816482
                      header:
                        title: Create an API Account
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          There is no way to re-display this pop-up after you
                          select Done to dismiss it. 

                          Make sure you store your credentials before dismissing
                          the popup, either by copying/pasting the contents of
                          each field or by keeping the downloaded .txt file.
                          Otherwise, you will need to repeat all the above steps
                          to generate new credentials. 
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Revoking API Credentials


                        To revoke an OAuth token, use the following steps to
                        delete the associated API account:

                        1. Log into the store, using the store owner’s
                        username/password.

                        2. Select **Advanced Settings**.

                        3. Select **API Accounts**. This will display the Store
                        API Accounts page, shown below.

                        4. In the Actions column at right, select the trash-can
                        button next to the account you want to delete.
                      header:
                        anchor: authentication_revoking-api-credentials
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1537388177603
                      header:
                        title: Revoking API Credentials
                    - type: callout
                      data:
                        type: error
                        title: Delete Carefully
                        body: >-
                          There is no undo, so be sure before you delete an
                          account. You can also use the checkboxes on the left
                          side to delete multiple accounts at once – but be
                          especially careful when using this option.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Getting Client ID and Client Secret


                        * The Client ID value uniquely identifies your app. You
                        will need to pass it in the header of all your requests
                        to the API.

                        * The Client Secret value is a secret that your app and
                        BigCommerce share. You only need to pass the Client
                        Secret value once, during the app installation sequence.
                        Thereafter, BigCommerce uses it to sign payloads in
                        load, uninstall, and remove user requests, and your app
                        uses it to verify the signature to ensure that the
                        request is coming from BigCommerce.


                        To get a Client ID and Client Secret you will need to
                        log in to Dev Tools. Dev Tools can be accessed by
                        clicking **My Apps** in the top-right corner of the
                        Developer Portal.


                        1. Click **Create an app**  

                        2. Give your app a name. This will only be visible to
                        you

                        3. A pop up box will display showing Your Profile, App
                        Summary and Category. 
                      header:
                        anchor: authentication_client-id-secret
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1537389767940
                      header:
                        title: Create an App
                    - type: text
                      data: >-
                        4. Click on **Step 3 - Technical**. Fill out the App
                        Features sections with App Type, Callback URLs and
                        Scope.
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1537389883100
                      header:
                        title: Step 3 - Technical
                    - type: text
                      data: >-
                        5. In the lower right-hand corner of the popup box,
                        click **Update & Close**.

                        6. A new pop up will show asking if you want to change
                        the OAuth Scopes. Click **Confirm Update**.

                        7. You will be routed back to the Dev Tools home page
                        and your app will be listed. Click **View Client ID**. 
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1537390078741
                      header:
                        title: View Client Id
                    - type: text
                      data: >-
                        9. Copy your Client ID and Client Secret. The Client ID
                        and Client Secret can be accessed at any time by
                        clicking **View Client ID**. 
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1537390135692
                      header:
                        title: Client Id and Client Secret
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          If you delete the app, there is no way to recover the
                          Client Id and Client Secret.
                    - type: text
                      data: >-
                        ### Next Steps


                        During the app installation process, your app will use
                        the Client Id and Client Secret to obtain an Oauth token
                        authorized against the store installing the app. For a
                        detailed look at this process, see [Building an
                        App](/api-docs/getting-started/building-apps-bigcommerce/building-apps).
                    - type: text
                      data: '---'
                    - type: text
                      data: |-
                        ## Use Cases by Token Type

                        |  | Client ID / Client Secret | API Credentials |
                        |---|:---:|:---:|
                        | From Dev Tools| X | |
                        |From Store Control Panel| | X |
                        | Single Click Apps (Marketplace)| X | |
                        | Private Apps | X |
                        | Hidden Apps | X | |
                        | Connector Apps | | X |
                        |Scripts| | X |
                        |Testing | | X |
                        | V2 | X | X |
                        | V3 | X | X |
                        |Webhooks | X | X |
                      header:
                        anchor: authentication_when-to-use
                    - type: text
                      data: '---'
                      header: {}
                    - type: text
                      data: '## Migrating from Legacy to OAuth'
                      header:
                        anchor: authentication_migration-legacy-oauth
                    - type: callout
                      data:
                        type: error
                        body: >-
                          As of July 31, 2018, new BigCommerce stores are no
                          longer able to create Legacy API Accounts (accounts
                          using HTTP Basic Auth) within their control panels.
                          Existing Legacy API Accounts will continue to work
                          until further notice, but we strongly recommend
                          migrating to OAuth as soon as possible.
                    - type: text
                      data: "### Migrating to OAuth comes with several benefits:\n\n* All OAuth requests are sent to a common hostname: `https://api.bigcommerce.com`. Using a single hostname prevents any interruption of service when the domain or SSL on a particular store changes or expires.\n\n* All of BigCommerce’s newest V3 APIs are exclusively available via OAuth.\n\n* OAuth API accounts have access to subscribe to BigCommerce’s Webhooks for real-time event notifications\n\n* The ability to use new APIs that require a shared secret, such as the Storefront Login API or the Storefront Current Customer identification endpoint.\n\n* Gzip compression on API responses to reduce bandwidth usage\n\n* Better security as all OAuth tokens are scoped to particular endpoints\n\n### How to Migrate\n\nFirst, consider whether your application should reside within the public App Marketplace, where any BigCommerce merchant can quickly discover and install it. To learn more about how to set up this kind of app, see [Becoming a Partner](/api-docs/partner/becoming-a-partner).\n\nIf you would like to update your API connection from Basic Authentication to OAuth, you will need to make the following changes:\n\n- Get a Client ID and an Access Token, by creating an API Account within the control panel. You’ll want to make sure the account has the correct Scopes for the API endpoints you need to access. We recommend that you provide the minimum scopes that your application requires to function, as a good security practice.\n- If you use one of the Client Libraries, follow the relevant guide (within the library’s documentation) for establishing an OAuth connection.\n- If you have created your connection, you’ll want to update your connection parameters:\n\t- Where you previously used the BigCommerce store’s secure hostname, you will instead use the `https://api.bigcommerce.com` gateway URL.\nAs an example, requests to `https://store-abc123.mybigcommerce.com/api/v2/orders/123` or `https://my-custom-store-domain.com/api/v2/orders/123 `would instead go to `https://api.bigcommerce.com/stores/{store_hash}/v2/orders/123`.\n- With Basic Auth, you use an Authentication HTTP Header to authenticate your connection. With OAuth, you’ll want to use two headers:\n\t- X-Client-Id for your Client ID\n\t- X-Auth-Token header for your Access Token. You can read more [here](/api-docs/getting-started/basics/authentication#authentication_what-are-oauth-credentials-1).\n\nRate limiting of API requests works differently for OAuth API connections. To become familiar with the OAuth system, please see the [Rate Limits](/api-docs/getting-started/basics/best-practices#best-practices_rate-limits)."
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## OAuth Scopes


                        Scope limits ability to read or write to data. Set the
                        scope to the minimum level needed to accomplish the task
                        at hand.


                        All OAuth scopes except `default` have `read_only`
                        scopes that allow only `GET` and `HEAD` requests.


                        - Webhooks are accessible from the default scope that is
                        available when an API Credentials are created.


                        | Scope GUI Name | Resources  | Description |

                        |---|---|---|

                        | Content | store_v2_content | View and modify store
                        content |

                        |||
                        [/v2/pages](/api-reference/content/store-content-api) |

                        ||| [/v2/blog](/api-reference/content/store-content-api)
                        |

                        |||
                        [/v2/redirects](/api-reference/content/store-content-api)
                        |

                        ||| /v3/widgets |

                        ||store_v2_content_read_only| View Site Content |

                        |||
                        [/v2/pages](/api-reference/content/store-content-api) |

                        ||| [/v2/blog](/api-reference/content/store-content-api)
                        |

                        |||
                        [/v2/redirects](/api-reference/content/store-content-api) 
                        |

                        ||| /v3/widgets |

                        | Checkout Content | store_content_checkout | View and
                        modify content on checkout pages |

                        |||
                        [/v3/scripts](/api-reference/content/store-content-api)
                        |

                        | Customers | store_v2_customers | View and modify
                        customer information |

                        |||
                        [/v2/customers](/api-reference/customer-subscribers/customers-api)
                        |

                        |||
                        [/v2/customer_groups](/api-reference/customer-subscribers/customers-api)
                        |

                        |||
                        [/v3/customers/subscribers](/api-reference/customer-subscribers/subscribers-api)
                        |

                        ||store_v2_customers_read_only|View customer information
                        |

                        |||
                        [/v2/customers](/api-reference/customer-subscribers/customers-api)
                        |

                        |||
                        [/v2/customer_groups](/api-reference/customer-subscribers/customers-api)
                        |

                        |||
                        [/v3/customers/subscribers](/api-reference/customer-subscribers/subscribers-api)
                        |

                        | Customers Login | store_v2_customers_login | Log in
                        customers to your storefront |

                        ||| [Access to the Customer Login
                        API](/api-docs/customers/customer-login-api)

                        | Information & Settings| store_v2_information | View
                        and modify general store information and settings |

                        |||
                        [/v2/shipping/methods](/api-reference/shipping/shipping-api)
                        |

                        |||
                        [/v2/shipping/zones](/api-reference/shipping/shipping-api)
                        |

                        |||
                        [/v2/shipping/carrier](/api-reference/shipping/shipping-api)
                        |

                        || store_v2_information_read_only | View general store
                        information and settings |

                        |||
                        [/v2/shipping/methods](/api-reference/shipping/shipping-api)
                        |

                        |||
                        [/v2/shipping/zones](/api-reference/shipping/shipping-api)
                        |

                        |||
                        [/v2/shipping/carrier](/api-reference/shipping/shipping-api)
                        |

                        |||
                        [/v2/payments/methods](/api-reference/shipping/shipping-api)
                        |

                        |||
                        [/v2/tax_classes](/api-reference/store/tax-classes-api)
                        |

                        |||
                        [/v2/store](/api-reference/store/store-information-api)
                        |

                        | Marketing | store_v2_marketing | View and modify
                        marketing information |

                        |||
                        [/v2/coupons](/api-reference/marketing/marketing-api) |

                        |||
                        [/v2/gift_certificates](/api-reference/marketing/marketing-api)
                        |

                        |||
                        [/v2/banners](/api-reference/marketing/marketing-api) |

                        || store_v2_marketing_read_only | View marketing
                        information |

                        |||
                        [/v2/coupons](/api-reference/marketing/marketing-api) |

                        |||
                        [/v2/gift_certificates](/api-reference/marketing/marketing-api)
                        |

                        |||
                        [/v2/banners](/api-reference/marketing/marketing-api) |

                        | Orders | store_v2_orders | View and modify orders |

                        ||| [/v2/orders](/api-reference/orders/orders-api) |

                        |||
                        [/v2/order_statuses](/api-reference/orders/orders-api) |

                        || store_v2_orders_read_only | View orders |

                        ||| [/v2/orders](/api-reference/orders/orders-api) |

                        |||
                        [/v2/order_statuses](/api-reference/orders/orders-api) |

                        | Order Transactions | store_v2_transactions_read_only |
                        View order transactions |

                        |||
                        [/v3/orders/{id}/transactions](/api-reference/orders/orders-transactions-api)
                        |

                        | Products | store_v2_products | View and modify
                        products, brands, categories and other product
                        information. |

                        ||| [/v3/catalog](/api-reference/catalog/catalog-api) |

                        |||
                        [/v3/pricelists](/api-reference/price-lists/pricelists-api)
                        |

                        || store_v2_products_read_only | View products |

                        ||| [/v3/catalog](/api-reference/catalog/catalog-api) |

                        |||
                        [/v3/pricelists](/api-reference/price-lists/pricelists-api)
                        |

                        | Themes | store_themes_manage | View and modify themes
                        |

                        ||| [/v3/themes](/api-reference/themes/themes-api) |

                        || store_themes_read_only | View themes |

                        ||| [/v3/themes](/api-reference/themes/themes-api) |

                        | Carts | store_cart | View and Modify carts |

                        |||
                        [/v3/carts](/api-reference/cart-checkout/storefront-cart-api)
                        |

                        || store_cart_read_only | View Carts |

                        |||
                        [/v3/carts](/api-reference/cart-checkout/storefront-cart-api)
                        |

                        | Create Payments  | store_payments_access_token_create
                        | Process Payments |

                        | | |
                        [/payments/access_tokens](/api-reference/payments/payments-create-payment-token-api)|

                        | Get Payment Methods | store_payments_methods_read |
                        Get Order Payment Methods |

                        | | |
                        [/payments](/api-reference/payments/payments-process-payments)|
                      header:
                        anchor: authentication_oauth-scopes
              - title: Filtering
                route:
                  path: /filtering
                data:
                  blocks:
                    - type: html
                      data: <h1>Filtering</h1>
                    - type: text
                      data: >-
                        To filter collections down to a particular set of items,
                        you can add filters to your request as URL query
                        parameters.


                        250 products is the maximum number of products that be
                        returned. To view more than that, a script is needed to
                        loop through each page.


                        These are the most common filter options available for
                        the V3 API: 


                        | Operator | Expression  | Example | 

                        |--|--|--|

                        | Equals/equivalency | attribute=value  |
                        `/v3/catalog/products?price=10`
                        `/v3/catalog/products?name=My Product` |

                        | Greater than or equal to (for numbers or dates) |
                        attribute:min=value  |
                        `/v3/catalog/products?price:min=10` |

                        | Less than or equal to (for numbers or dates) |
                        attribute:max=value |
                        `/v3/catalog/products?price:max=10` |

                        | Greater than (for numbers or dates)|
                        attribute:greater=value |
                        `/v3/catalog/products?price:greater=10` |

                        | Less than (for numbers or dates) |
                        attribute:less=value |
                        `/v3/catalog/products?price:less=10` |

                        | SQL LIKE operator (for strings) |
                        attribute:like=pattern |
                        `/v3/catalog/categories?name:like=Shirts` |

                        | SQL IN operator (for arrays) |
                        attribute:in=csv,list,of,values |
                        `/v3/catalog/products?categories:in=123,456` |

                        | SQL NOT IN operator (for arrays) |
                        attribute:not_in=csv,list,of,values |
                        `/v3/catalog/products?categories:not_in=123,456` |


                        Available filters vary by endpoint. Refer to the GET
                        method for an endpoint to see a list of available
                        filters.



                        ### Includes


                        Some endpoints allow an `?include` parameter to include
                        subresources and other information in the primary GET
                        response for a parent object.


                        This allows you to save API calls by getting more
                        information in a response. However, it may slow down
                        your response.


                        As an example, you can include a product's variants and
                        images with the product response:
                        `/v3/catalog/products?include=variants,images`


                        Availability of the `?include` parameter varies by
                        endpoint. Refer to the GET method for an endpoint to see
                        a list of fields that can be included.


                        ### Including and Excluding fields


                        Some endpoints support both `?include_fields` and
                        `?exclude_fields`. 


                        `include_fields` will return ONLY the specified fields
                        in the response. `exclude_fields` will omit the
                        specified fields from the response.


                        You can specify any field that is available on the
                        object. Excluding fields you don't care about
                        (especially large fields like descriptions) can speed up
                        your API request response time.



                        #### Example


                        `https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products?include_fields=name,price`


                        Here, product name and price have been included:


                        ```

                        {
                            "data": [
                                {
                                    "id": 77,
                                    "name": "Red printed scarf",
                                    "price": 12
                                }    
                            ]
                        }    

                        ```


                        ### Pagination and Limit


                        `?page` is the number of pages that are returned via
                        api. 

                        `?limit` is the number of results per page that are
                        returned.


                        ###

                        `page=2&limit=10`

                        This will return page 2 of the results with 10 items per
                        page.
              - title: Best Practices
                route:
                  path: /best-practices
                data:
                  blocks:
                    - type: html
                      data: "<h1>Best Practices</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#best-practices_integration-up-to-date\">Ensure That Your Integration is Up-to-Date</a></li>\n        <li><a href=\"#best-practices_use-webhooks\">Use Webhooks Effectively Within Your Application</a></li>\n        <li><a href=\"#best-practices_thread-api-requests\">Thread Your Requests to the BigCommerce API</a></li>\n        <li><a href=\"#best-practices_marketplace-apps\">Marketplace Apps</a></li>\n        <li><a href=\"#best-practices_rate-limits\">API Rate Limits</a></li>\n        <li><a href=\"#best-practices_platform-limits\">Platform Limits</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Ensure that your integration is up-to-date


                        BigCommerce frequently enhances its core product and is
                        actively developing v3 API endpoints. By using the
                        newest API version, you will ensure that your app has
                        access to the latest resources. You will also be better
                        positioned to provide a user experience consistent with
                        what merchants will see in their BigCommerce store’s
                        control panel. To stay up to date, bookmark our
                        [changelog](/changelog). 
                      header:
                        anchor: best-practices_integration-up-to-date
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Use webhooks effectively within your application


                        To keep data in your application up-to-date,
                        [webhooks](/api-docs/getting-started/webhooks/about-webhooks)
                        provide a great alternative to doing periodic checks. In
                        order to register a webhook event that your application
                        can listen for, you will need to use OAuth (not legacy
                        “Basic Authentication”).


                        BigCommerce will send a partial payload when a
                        subscribed event is triggered, with minimal identifying
                        details (such as the order ID when an order is created).
                        Your application could use the order ID returned in the
                        payload to make a subsequent API request for the full
                        order details.
                      header:
                        anchor: best-practices_use-webhooks
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Thread your requests to the BigCommerce API


                        In order to quickly update information in the API, you
                        can use threaded requests. Threaded requests allow you
                        to send multiple requests at one time. They can come
                        from a different open connection or multiple requests to
                        the same resource. 


                        The [BigCommerce Ruby
                        API](https://github.com/bigcommerce/bigcommerce-api-ruby)
                        client is thread-safe: It satisfies the need for
                        multiple threads to access the same shared data and the
                        need for a shared piece of data to be accessed by only
                        one thread at any given time. These attributes can
                        reduce the total time that your app will require to
                        complete a series of requests.
                      header:
                        anchor: best-practices_thread-api-requests
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Marketplace Apps


                        Merchants often have more than one person working on
                        their store. BigCommerce allows additional users to
                        access your app when the store owner has granted them
                        appropriate permissions. The requirements for supporting
                        multi-user access are:

                        * Tokens must be stored against the store_hash and not
                        against user info.

                        * Within the Dev Tools workspace, you must enable your
                        app’s Technical > Multiple Users option.


                        In the payload returned when a user launches an app,
                        users are distinguished by `owner_email` versus
                        `user_email`. If these two emails match, the user is the
                        store owner.


                        If you wish to enable user removal, you can do by
                        filling in your app’s Technical > Remove User Callback
                        URL field in Dev Tools. (Enabling user removal is
                        optional).

                        For more advanced implementations, you can enable the
                        store owner to grant specific permissions to different
                        non-admin users. For example, person1@email.com could be
                        restricted to editing product inventory but not seeing
                        orders. If you decide to include this feature in your
                        app, it’s a great feature to advertise.
                      header:
                        anchor: best-practices_marketplace-apps
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## API Rate Limits

                        Apps that authenticate with OAuth are rate-limited,
                        based on a quota that is refreshed every few seconds.
                        The maximum quota for a store will vary depending on the
                        store’s plan.


                        * Enterprise plans and Enterprise Sandboxes
                        (Enterprise-Test): Unlimited (7mil / 30sec)

                        * Pro plans: 60k per hour (450 / 30sec)

                        * All other sandboxes (Dev/Partner/Employee): 20k per
                        hour (150 / 30sec)

                        * Plus & Standard plans: 20k per hour (150 / 30sec)


                        Each request to the API consumes one available request
                        from the quota. When an app hits the quota limit,
                        subsequent requests are rejected until the quota is
                        refreshed.


                        The store’s overall quota is distributed across all apps
                        that are accessing the store at a given time. This
                        provides fairness for multiple apps that are accessing
                        the API simultaneously, preventing a single greedy app
                        from consuming the store’s entire quota by itself. The
                        quota might adjust as additional clients connect or
                        disconnect while you’re running requests. 
                      header:
                        anchor: best-practices_rate-limits
                    - type: text
                      data: >
                        ### Playing Nicely with the Platform


                        Every API response’s HTTP headers give you full
                        visibility into your position in the rate-limiting
                        algorithm:

                        ```

                        X-Rate-Limit-Requests-Left →6

                        X-Rate-Limit-Requests-Quota →25

                        X-Rate-Limit-Time-Reset-Ms →3000

                        X-Rate-Limit-Time-Window-Ms →5000

                        ```


                        | Name | Description |

                        | -- | -- |

                        | X-Rate-Limit-Time-Window-Ms| Shows the size of your
                        current rate limiting window. In this case, it’s 5000
                        milliseconds.|

                        | X-Rate-Limit-Time-Reset-Ms | Shows how many
                        milliseconds are remaining in the window. In this case,
                        3000 milliseconds. 3000 milliseconds after this request,
                        the API quota will be refreshed. |

                        | X-Rate-Limit-Requests-Quota | Shows how many API
                        requests are allowed in the current window for your
                        client. In this case, the number is 25 requests. |

                        | X-Rate-Limit-Requests-Left | Details how many
                        remaining requests your client can make in the current
                        window before being rate limited. In this case, you
                        would expect to be able to make 6 more requests in the
                        next 3000 milliseconds; on the 7th request within 3000
                        milliseconds, you would be rate limited and would
                        receive an HTTP 429 response.|


                        If your request to the API triggers a [429 Too Many
                        Requests](/api-docs/getting-started/basics/api-status-codes#api-status-codes_4-client-error)
                        response, then you know you’ve been limited.


                        The rate limited response will contain the
                        `X-Rate-Limit-Time-Reset-Ms` header, specifying a time
                        (in milliseconds) that your client must wait before its
                        quota has refreshed. Retry the request after this time
                        has elapsed, and your API service will resume as normal.
                    - type: text
                      data: "### Example of 429 Status Code\n\nWhen you see a response with an HTTP 429 status code, your client shouldn’t make any further requests until your quota has refreshed:\n\n```\nHTTP/1.1 429 Too Many Requests\n    \tDate: Mon, 03 Feb 2017 20:36:00 GMT\n    \tContent-Type: application/json\n    \tX-Rate-Limit-Time-Reset-Ms: 15000\n```\n\n\nParse the `X-Rate-Limit-Time-Reset-Ms` header to determine how long you have to wait. In this case, it would be 15000 milliseconds.\nYour client can sleep on the specified interval:\n\n```\n   $milliseconds = $response->getHeader(\"X-Rate-Limit-Time-Reset-Ms\");\n    usleep($milliseconds * 1000);\n```\n\n\nAfter waiting for the given number of milliseconds, you can go back to making API requests."
                    - type: text
                      data: >-
                        ### Making Requests in Parallel

                        You might wish to increase the amount of work your
                        application can do in a given unit of time, by sending
                        multiple HTTP requests to the BigCommerce API in
                        parallel. This is perfectly acceptable.

                        However, your application should monitor the rate
                        limiting headers to avoid an HTTP 429 response. Methods
                        for doing this might include:

                        * Slowing your rate of API requests when
                        X-Rate-Limit-Requests-Left is nearing zero.

                        * Determining an acceptable average rate of requests, by
                        dividing X-Rate-Limit-Requests-Quota by
                        X-Rate-Limit-Time-Window-Seconds, and then
                        self-throttling to that rate.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Platform Limits


                        BigCommerce does have limits on the number of products,
                        categories, brands, etc. that can be created in a store.
                        See [Platform
                        Limits](https://forum.bigcommerce.com/s/article/Platform-Limits#product-catalog-limits)
                        for more details.
                      header:
                        anchor: best-practices_platform-limits
              - title: API Status Codes
                route:
                  path: /api-status-codes
                data:
                  blocks:
                    - type: html
                      data: "<h1>API Status Codes</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#api-status-codes_2-success\">2xx Success</a></li>\n        <li><a href=\"#api-status-codes_3-redirection\">3xx Redirection</a></li>\n        <li><a href=\"#api-status-codes_4-client-error\">4xx Client Error</a></li>\n        <li><a href=\"#api-status-codes_5-server-error\">5xx Server Error</a></li>\n        <li><a href=\"#api-status-codes_troubleshooting\">Troubleshooting</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        The API responds to requests with different HTTP status
                        codes depending on the result from the request. Error
                        responses might also include an error message in the
                        body to assist in resolving the problem.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## 2xx Success 


                        2xx codes are returned for requests that were understood
                        and processed successfully.


                        | Code | Definition | Purpose |

                        | --- | --- | --- |

                        | **200** | **OK** | For successful `GET` and `PUT`
                        requests. |

                        | **201** | **Created** | For a successful `POST`
                        request. |

                        | **202** | **Accepted** | For a request that resulted
                        in a scheduled task being created to perform the actual
                        request. |

                        | **204** | **No Content** | For a successful request
                        that produced no response (such as `DELETE` requests). |
                      header:
                        anchor: api-status-codes_2-success
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ### 3xx Redirection 


                        3xx codes are returned for requests that require further
                        action.


                        | Code | Definition | Purpose |

                        | --- | --- | --- |

                        | **301** | **Moved Permanently** | When the API routes
                        have changed (unlikely), or if the incoming request is
                        not secure (`http`), the request will be redirected to
                        the secure (`https`) version. |

                        | **304** | **Not Modified** | This response will be
                        sent if the request included an `If-Modified-Since`
                        header, but the resource has *not* been modified since
                        the specified date. Please refer to individual
                        resources' documentation regarding support for the
                        `If-Modified-Since` header. |
                      header:
                        anchor: api-status-codes_3-redirection
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ### 4xx Client Error 


                        4xx codes are returned for requests that could not be
                        processed due to problems with the request or the data.


                        | Code | Definition | Purpose |

                        | --- | --- | --- |

                        | **400** | **Bad Request** | Issued when a malformed
                        request was sent. Examples are: |

                        |||*   Invalid syntax

                        |||*   Missing required data

                        |||*   Webhook requests missing `Content-Type` in the
                        HTTP header.

                        |

                        | **401** | **Unauthorized** | This response is sent
                        when your client failed to provide credentials or its
                        credentials were invalid. |

                        | **403** | **Forbidden** | Returned when permissions do
                        not allow the operation. To correct:

                        |||*   Check your app in `My Apps` to review the OAuth
                        scopes you requested, and check whether they support the
                        request that you made.

                        |||*   Changes to the store owner's account (including a
                        change to the email address) can also cause this error.
                        Roll back those changes to correct it.

                        |||*   This error can also occur when your request
                        exceeds a limit imposed on the resource in question. For
                        example, a store cannot exceed 16,000 categories. For
                        more information, see the corresponding resource's
                        documentation.

                        |

                        | **404** | **Not Found** | When a particular resource
                        doesn’t exist or couldn’t be found. |

                        | **405** | **Method Not Allowed** | The resource was
                        found, but doesn’t support the request method. Issued
                        when either a specific method isn’t yet implemented on a
                        resource, or the resource doesn’t support the method at
                        all. For example, a `PUT` on `/orders` is invalid, but a
                        `PUT` on `/orders/{_id_}` is valid. |

                        | **406** | **Not Acceptable** | When the client
                        specifies a response content type in the `Accept` header
                        that is not supported. |

                        | **409** | **Conflict** | A change requested by the
                        client is being rejected, due to a condition imposed by
                        the server. The exact reasons for this response will
                        vary from one resource to the next. An example might be
                        attempting to delete a category whose deletion would
                        cause products to be orphaned. Additional information
                        about the conflict, and about how to resolve it, might
                        be available in the response's `details` section. |

                        | **413** | **Request Entity Too Large** | When the
                        client requests too many objects. For example, the
                        `limit` parameter exceeded the maximum. |

                        | **415** | **Unsupported Media Type** | Returned due to
                        issues with the `Content-Type` header. Examples of such
                        issues are:

                        |||*   The header specifies an unsupported content type.

                        |||*   The header is missing (except with the webhooks
                        resource, which returns a 400 in this case).|

                        | **422** | **Missing or Invalid Data** | The request
                        cannot be processed either because it omitted required
                        fields or because it contained invalid data. See the
                        response for more details. |

                        | **429** | **Too Many Requests** | When an OAuth client
                        exceeds the [rate
                        limit](/api-docs/getting-started/basics/best-practices#best-practices_rate-limits)
                        for API requests to a store. |
                      header:
                        anchor: api-status-codes_4-client-error
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ### 5xx Server Error 


                        5xx codes are returned for requests that could not be
                        processed due to an internal error with the API or
                        server.


                        | Code | Definition | Purpose |

                        | --- | --- | --- |

                        | **500** | **Internal Server Error** | When an error
                        has occurred within the API. |

                        | **501** | **Not Implemented** | When a request method
                        is sent that is not supported by the API (e.g., `TRACE`,
                        `PATCH`). |

                        | **503** | **Service Unavailable** | When the store is
                        marked as “Down for Maintenance,” or the store is being
                        upgraded to a new version. |

                        | **507** | **Insufficient Storage** | When the store
                        has reached a limitation for the resource, according to
                        their BigCommerce plan (e.g., 500-product limit). |
                      header:
                        anchor: api-status-codes_5-server-error
                    - type: text
                      data: '---'
                    - type: text
                      data: "## Troubleshooting\n\n### Why am I getting 4xx/5xx errors from the API?\n* A 401 error indicates that your API call is being received but isn’t properly authenticating with our API. Either credentials are absent from the request, or we are receiving invalid credentials. Steps to resolve this:\n\t* Double-check your Access Token and Client ID.\n\t* If your credentials are valid, try sending a cURL request with the same credentials. This will test whether the problem is something within your application, rather than a credentials issue.\n* For 403 errors , there are 4 common causes:\n\t* Your app lacks the appropriate scopes to make the request that it sent. Resolution: Check the OAuth scopes that you requested, either in control panel > API Accounts or in Developer Portal’s My Apps section.\n\t* The store-owner account has changed on a store that installed your app. Resolution: This might require a reinstall by the new store owner, or a rollback of the store-owner changes.\n\t* Your API request exceeded an enforced platform limit. Among other limits, each store is limited to a maximum of 30,000 brands and 16,000 categories. For more information about these limits, see either the API resource you are using or our support documentation on platform limits.\n\t* Check your URL paths. An incorrect path can sometimes trigger a 403 error.\n* 500 errors almost always indicate an internal server error on BigCommerce’s side. Steps to resolve these:\n\t* Re-attempt the request three to five times, with increasing delays of at least a minute between attempts.\n\t* Check our status page.\n\t* 500 errors can also be caused by particularly expensive API calls. To avoid these errors on stores with very complex data, try reducing how many objects you are requesting. In the v2 API, you can request fewer objects by using ?limit={count}. In either the v2 or v3 API, you can request fewer objects by excluding certain fields or only requesting certain fields.\n\t\n### Why am I getting an HTTP 204 or 301/302 response to an API request?\n* Double-check the URL to which you are making an API request. If the response code is 301/302, try the WWW or non-WWW version of the URL."
                      header:
                        anchor: api-status-codes_troubleshooting
              - title: Building Apps With BigCommerce
                route:
                  path: /building-apps-bigcommerce
                data:
                  children:
                    - title: Types of Apps
                      route:
                        path: /types-of-apps
                      data:
                        blocks:
                          - type: html
                            data: "<h1>Types of Apps</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#types-of-apps_single-click-apps\"> Single Click Apps</a></li>\n\t\t<li><a href=\"#types-of-apps_connector-apps\"> Connector Apps</a></li>\n\t\t<li><a href=\"#types-of-apps_unlisted-marketplace-apps\"> Unlisted Marketplace Apps</a></li>\n\t\t<li><a href=\"#types-of-personal_apps\"> Personal Apps</a></li>\n\t\t<li><a href=\"#types-of-apps_scripts\"> Scripts</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Single Click Apps


                              Single-click apps are listed in our App
                              Marketplace, making them available for
                              installation on all BigCommerce stores. The
                              “single-click” app flow does not mean users
                              install the app in a single click, but rather, the
                              app does not require the customer to install OAuth
                              credentials themselves or configure any settings
                              for a third party service.


                              To put an app on the Marketplace, you must first
                              be a BigCommerce partner and have your app
                              approved through the App Submission Process. After
                              becoming a partner and having the app approved you
                              have the option of charging merchants to use the
                              app.

                              Single-click apps use the Client ID and Client
                              Secret obtained from the Dev Tools workspace to
                              request an OAuth token during the [single-click
                              app authentication
                              flow.](/api-docs/getting-started/building-apps-bigcommerce/building-apps#building-apps_oauth-summary)
                            header:
                              anchor: types-of-apps_single-click-apps
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Connector Apps


                              Some apps qualify to be listed in the BigCommerce
                              App Marketplace as “Connector” apps. These apps
                              use manual OAuth token creation instead of the
                              single-click app flow.

                              While we always recommend and prefer the
                              single-click app flow’s programmatic OAuth
                              exchange, certain use cases might not be
                              compatible. 


                              Use Cases:

                              - Customized integrations that vary per store.

                              - Integrations that do not provide any content for
                              an iframe.

                              - Apps that do not provide Web services for OAuth
                              exchange. (For example: offline sync apps.)

                              - Apps that do not provide Web or cloud-hosted
                              components for a dashboard.
                            header:
                              anchor: types-of-apps_connector-apps
                          - type: callout
                            data:
                              body: >-
                                Connector apps require the store owner to create
                                API Credentials in the Control Panel and then
                                pass those values into the app manually. The
                                single-click installation process is preferred
                                since it does not require this step.
                          - type: text
                            data: >-
                              To create a connector app that uses manual OAuth
                              token creation, make the following selections on
                              the Technical tab when registering your app in Dev
                              Tools:


                              1. Set the App Type option to Connector.

                              2. Enter your app’s Signup URL. This is the URL
                              where a user would begin to configure the
                              connection between your service and the
                              BigCommerce store.

                              3. Under OAuth scopes, select the scopes that your
                              app requires for BigCommerce review only. Later,
                              you will need to instruct store users to create a
                              token with the production scopes your app needs.


                              BigCommerce must review and approve your connector
                              app proposal before we will accept the app’s
                              submission to the Marketplace.


                              If you’re interested in submitting your
                              integration as a connector app, please contact out
                              to <a
                              href="mailto:appstore@bigcommerce.com">appstore@bigcommerce.com</a>.
                              to discuss your plan.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Unlisted Marketplace Apps


                              Approved partners have the option of uploading
                              “unlisted” apps to the App Marketplace. An
                              unlisted app is a published app that does not show
                              up in the public BigCommerce marketplace. To
                              create an unlisted app, you need to be a
                              BigCommerce Partner.


                              Use Cases:

                              - A partner is beta-testing an integration before
                              a full Marketplace launch.

                              - A BigCommerce user with several stores wants to
                              install a custom app on all of them. Submitting an
                              unlisted app offers a streamlined alternative to
                              creating separate draft or test apps for each
                              store. To have an app unlisted, please contact
                               <a href="mailto:appstore@bigcommerce.com">appstore@bigcommerce.com</a>.
                            header:
                              anchor: types-of-apps_unlisted-marketplace-apps
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Personal Apps


                              In some cases, you might want to create an app
                              that uses the Single-click Oauth flow to install
                              in a merchant’s control panel, but you do not want
                              to list the app for sale in the App Marketplace.
                              Personal Apps are draft apps, created from the
                              [Dev Tools](https://devtools.bigcommerce.com/)
                              workspace, that are never published to the App
                              Marketplace and remain in draft status
                              permanently.


                              Use Cases:

                              - You are creating a custom application for a
                              single merchant’s store.

                              - You are testing your app before submission, and
                              it doesn’t need to be distributed to other stores.


                              To install a Personal app on a store, your Dev
                              Tools login credentials must be the same as the
                              store owner login credentials for the store where
                              you intend to install the app.
                            header:
                              anchor: types-of-personal_apps
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Scripts


                              You may wish to write a small program that can
                              make requests against a store’s API that does not
                              install in the store’s control panel. Scripts
                              connect to a store solely through API credentials:
                              they don’t install in the control panel or present
                              a UI to the user.


                              To get started with writing scripts, all you need
                              are API Credentials from the store’s Control
                              Panel.  Learn more about [making your first
                              request](/api-docs/getting-started/basics/making-requests)
                              with the BigCommerce API. 
                            header:
                              anchor: types-of-apps_scripts
                    - title: Building an App
                      route:
                        path: /building-apps
                      data:
                        blocks:
                          - type: html
                            data: "<h1>Building an App</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#building-apps_oauth-summary\">OAuth Summary</a></li>\n\t\t<li><a href=\"#building-apps_request-headers\">Request Headers</a></li>\n\t\t<li><a href=\"#building-apps_session-timeouts\">Managing Users Session Timeouts</a></li>\n\t\t<li><a href=\"#building-apps_installation-update-sequence\">App Installation and Update Sequence</a></li>\n\t\t<li><a href=\"#building-apps_recieving-get-request\">Receiving the GET Request</a></li>\n\t\t<li><a href=\"#building-apps_responding-get-request\">Responding to the GET Request</a></li>\n        <li><a href=\"#building-apps_making-post-request\">Making the POST Request</a></li>\n        <li><a href=\"#building-apps_recieving-post-request\">Receiving the POST Response</a></li>\n        <li><a href=\"#building-apps_load-uninstall-removal-requests\">Load, Uninstall, and User Removal Requests</a></li>\n        <li><a href=\"#building-apps_processing-signed-payload\">Processing the Signed Payload</a></li>\n        <li><a href=\"#building-apps_multi-user-support\">Multi-User Support</a></li>\n    <li><a href=\"#building-apps_external-app-installation\">External App Installation</a></li>\n    <li><a href=\"#building-apps_user-interface-constraints\">User Interface Constraints<a/></li>\n    <li><a href=\"#hosting-your-app\">Hosting Your App </a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## OAuth Summary


                              API token creation is a permission reserved for
                              the [store
                              owner](https://forum.bigcommerce.com/s/article/Store-API-Accounts#creating)
                              user account. An app can request authentication
                              “on behalf” of a store owner, allowing the app to
                              make API requests against store data.


                              To test an app before release, apply for a
                              [sandbox](https://www.bigcommerce.com/partners/)
                              store.
                               
                              - When a merchant clicks your app's Install button
                              in the control panel, a [/GET
                              request](#building-apps_recieving-get-request) is
                              sent to your app's [Auth callback
                              URL](#building-apps_recieving-get-request). 

                              - The /GET request sent from BigCommerce contains
                              a `code` or temporary access token, `client_id`,
                              `client_secret`, `scopes` and [other
                              information](#building-apps_recieving-get-request).
                              Your Auth Callback URL needs to be served over
                              https. You should also have access to your app's
                              server logs which will allow you to see the
                              information in the request.

                              - Your app needs to
                              [respond](#building-apps_responding-get-request)
                              to the /GET  with HTML that will be rendered in an
                              iframe in the store's control panel.

                              - Your app then needs to make a /POST request back
                              to BigCommerce that contains the code, client_id
                              and client secret. This should be done
                              programmatically. 

                              - BigCommerce will respond with a permanent Oauth
                              token authorized against the store that has
                              installed your app.

                              - After installation, the store_hash and
                              access_token should be stored somewhere secure so
                              the app does not lose its authorization. 



                              ### FAQ's

                              **How can I make API calls?**   

                              We have built several [Hello
                              World](/tools-resources) apps to get you started
                              quickly. You can use these apps as a starting
                              point or an example for building a Single-click
                              app. 


                              If you'd like to make test API requests without
                              the overhead of installing a draft app, you can
                              generate [API
                              Credentials](/api-docs/getting-started/basics/authentication#authentication_getting-api-credentials)
                              by creating an API Account in your store's control
                              panel.


                              **How can I sell my app?**  

                              The first step to listing an app in the
                              BigCommerce App Marketplace is to apply to the
                              BigCommerce [partner
                              program](https://www.bigcommerce.com/partners/). 


                              For more details on including your app in the
                              Marketplace, see [App Store Approval
                              Requirements](/api-docs/partner/app-store-approval-requirements).


                              **Need a deeper dive on app installation?**  

                              Keep reading below.
                            header:
                              anchor: building-apps_oauth-summary
                          - type: text
                            data: >-
                              ## Request Headers


                              API requests are authenticated by the following
                              HTTP headers:


                              ```

                              X-Auth-Client: The Client ID of the requesting
                              app. 

                              X-Auth-Token: Access token authorizing an app to
                              access store data on behalf of a user

                              ```


                              In addition, while not all resources require the
                              Accept and Content-Type headers, many do. To
                              ensure that your calls succeed, always include
                              these headers. For more details on request headers
                              and their accepted values, see [Request
                              Headers](/api-docs/getting-started/basics/api-environment#api-environment_request-headers).
                            header:
                              anchor: building-apps_request-headers
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Managing Users Session Timeouts


                              We recommend that you add BigCommerce’s JavaScript
                              SDK to your Single-Click Apps, to protect your
                              apps’ users from getting logged out of the
                              BigCommerce control panel after a period of
                              idleness. To include our SDK, add this script tag
                              to your Single-Click App:

                              `<script
                              src="//cdn.bigcommerce.com/jssdk/bc-sdk.js">`



                              Optionally, you can pass a logout callback
                              function within the initialization call:


                              ```

                              Bigcommerce.init({
                                    onLogout: callback
                              });

                              ```



                              This callback function will run when the user
                              explicitly logs out of the BigCommerce control
                              panel, or is automatically logged out. The
                              callback will allow your app to respond to this
                              logout appropriately.
                            header:
                              anchor: building-apps_session-timeouts
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## App Installation and Update Sequence


                              The purpose of the App Installation sequence is to
                              obtain an Oauth token for the store installing the
                              app, using the Client ID and Secret from Dev
                              Tools. 


                              A user kicks off the installation or update
                              sequence from within a store's control panel by
                              clicking the “Install” button from your app
                              details page, or by clicking an installed app to
                              update its scopes. BigCommerce redirects the user
                              to the Auth Callback URI provided during app
                              registration. The Auth Callback URI must be
                              publicly available, fully qualified, and served
                              over TLS.
                            header:
                              anchor: building-apps_installation-update-sequence
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1536263813949
                            header:
                              title: App Installation Sequence
                          - type: text
                            data: >-
                              ### Handling Requests Securely


                              The request comes from the client browser, rather
                              than directly from BigCommerce. This allows you to
                              use a non-publicly-available Auth Callback URI
                              while testing your app.


                              For security, Auth and Load callbacks should be
                              handled server-side. If you are building a
                              client-side application (such as an AngularJS
                              Single Page App), you should handle Auth and Load
                              callbacks outside that application. Use a separate
                              service that accepts the Auth and Load callback
                              requests, generates tokens, validates requests,
                              and then redirects the user to your client-side
                              app’s entry point.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Receiving the GET Request


                              The GET request to your Auth Callback URI contains
                              a temporary code that you can exchange for a
                              permanent OAuth token. It also includes a unique
                              value that identifies the store installing or
                              updating your app, as well as authorized scopes.


                              The following table details the full list of
                              parameters and values included in the GET request
                              from BigCommerce to your Auth Callback URI.
                              BigCommerce passes these within the URI itself as
                              query parameters.


                              | Parameter | Description |

                              | --- | --- |

                              | code | Temporary code to exchange for a
                              permanent OAuth token. See [Making the POST
                              request](#building-apps_making-post-request) below
                              for more information about this exchange. |

                              | scope | List of scopes authorized by the user.
                              As a best practice, your app should validate this
                              list to ensure that it matches the app&#39;s
                              needs, and fail if it does not. However, at this
                              time, the user does not have any opportunity to
                              pick and choose between scopes. The dialog
                              presented to the user requires the user to approve
                              all scopes or none. |

                              | context | The store hash: a unique value that
                              identifies the store on which a logged-in user has
                              clicked to install or your app. BigCommerce passes
                              this along with a context path, as follows:
                              `stores/{store_hash}`. Save the store hash value,
                              because you will need to pass it in all your
                              requests to the API. |


                              ### Example – Initial Installation


                              This example initiates the token exchange, with a
                              requested scope of store_v2_orders:


                              ```

                              GET
                              /auth?code=qr6h3thvbvag2ffq&scope=store_v2_orders&context=stores/g5cd38
                              HTTP/1.1  

                              Host: app.example.com

                              ```



                              ### Example – Updating Scopes

                              The following example requests a scope of
                              store_v2_products, in addition to the initially
                              requested scope of store_v2_orders:


                              ```

                              GET
                              /auth?code=qr6h3thvbvag2ffq&scope=store_v2_orders+store_v2_products&context=stores/g5cd38
                              HTTP/1.1  

                              Host: app.example.com

                              ```
                            header:
                              anchor: building-apps_recieving-get-request
                          - type: callout
                            data:
                              body: >-
                                Note that when your app receives a new token,
                                any previously issued token is invalidated.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Responding to the GET Request


                              Upon receiving the GET request at your Auth
                              Callback URI, your app should return some HTML to
                              the merchant browser. BigCommerce renders this in
                              an iframe inside of the control panel. It could be
                              a form that collects further information from the
                              user, or you could redirect the user to your app’s
                              main page. If you do not pass back some HTML, the
                              user will be left looking at a blank screen. Such
                              an app would not be accepted into the App
                              Marketplace.
                            header:
                              anchor: building-apps_responding-get-request
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Making the POST Request


                              The POST request’s primary purpose is to exchange
                              the temporary access code for a permanent OAuth
                              token. However, your app must pass a number of
                              additional values to accomplish the exchange. Pass
                              the parameters and their values inside the request
                              body, using query parameters and URL-encoding. To
                              achieve this, you must include one of the
                              following HTTP headers:


                              `Content-Type: application/x-www-form-urlencoded`
                              or `Content-Type: application/json`


                              Make the POST request to the following address:
                              `https://login.bigcommerce.com/oauth2/token`


                              ### Initial Installation


                              During initial installation, upon receiving the
                              POST, BigCommerce marks the status of your app as
                              “Installed”, removes the progress-indicator
                              overlay, and places your app icon in the control
                              panel’s left-hand navigation. With the
                              progress-indicator overlay removed, the user can
                              interact with the HTML that you returned in your
                              GET response.
                            header:
                              anchor: building-apps_making-post-request
                          - type: callout
                            data:
                              body: >-
                                During app updates, upon receiving the POST,
                                BigCommerce removes the update prompt from the
                                control panel.
                          - type: text
                            data: >-
                              ### Parameters


                              Include values for each of the following
                              parameters.


                              | Parameter | Description |

                              | --- | --- |

                              | client_id | The Client ID for your app, obtained
                              during
                              [registration](/api-docs/getting-started/basics/authentication#authentication_client-id-secret).
                              |

                              | client_secret | The Client Secret for your app,
                              obtained during
                              [registration](/api-docs/getting-started/basics/authentication#authentication_client-id-secret).
                              |

                              | code | Temporary access code received in the
                              [GET
                              request](/api-docs/getting-started/building-apps-bigcommerce/building-apps#building-apps_recieving-get-request)
                              discussed above. |

                              | scope | List of OAuth scopes received in the
                              [GET
                              request](/api-docs/getting-started/building-apps-bigcommerce/building-apps#building-apps_recieving-get-request)
                              discussed above. |

                              | grant_type | Always use the following:
                              authorization_code. |

                              | redirect_uri | Must be identical to your
                              registered Auth Callback URI. |

                              | context | The store hash received in the [GET
                              request](/api-docs/getting-started/building-apps-bigcommerce/building-apps#building-apps_recieving-get-request),
                              in the format: `stores/{_store_hash_}` |


                              ### Examples – Initial Installation
                          - type: code
                            data: >-
                              POST /oauth2/token HTTP/1.1

                              Host: login.bigcommerce.com

                              Content-Type: application/x-www-form-urlencoded

                              Content-Length: 186

                              client_id={CLIENT_ID}&client_secret={CLIENT_SECRET}&code=qr6h3thvbvag2ffq&scope=store_v2_orders&grant_type=authorization_code&redirect_uri=https://app.example.com/oauth&context=stores/{STORE_HASH}
                            header:
                              title: HTTP
                            config:
                              mode: http
                          - type: code
                            data: >-
                              use Bigcommerce\Api\Connection;

                              $tokenUrl =
                              "https://login.bigcommerce.com/oauth2/token";

                              $connection = new Connection();

                              $connection->useUrlencoded();

                              $response = $connection->post($tokenUrl, array(
                                  "client_id" => "CLIENT_ID",
                                  "client_secret" => "CLIENT_SECRET",
                                  "redirect_uri" => "https://app.example.com/oauth",
                                  "grant_type" => "authorization_code",
                                  "code" => $request->get("code"),
                                  "scope" => $request->get("scope"),
                                  "context" => $request->get("context"),
                              ));

                              $token = $response->access_token;
                            header:
                              title: PHP
                            config:
                              mode: php
                          - type: text
                            data: >-
                              ### Examples – Updating Scopes


                              The following examples request a scope of
                              store_v2_products, in addition to the initially
                              requested scope of store_v2_orders:
                          - type: code
                            data: >-
                              POST /oauth2/token HTTP/1.1

                              Host: login.bigcommerce.com

                              Content-Type: application/x-www-form-urlencoded

                              Content-Length: 186

                              client_id={CLIENT_ID}&client_secret={CLIENT_SECRET}&scope=store_v2_orders+store_v2_products&grant_type=authorization_code&redirect_uri=https://app.example.com/oauth&context=stores/{STORE_HASH}
                            header:
                              title: HTTP
                            config:
                              mode: http
                          - type: code
                            data: >-
                              use Bigcommerce\Api\Connection;

                              $tokenUrl =
                              "https://login.bigcommerce.com/oauth2/token";

                              $connection = new Connection();

                              $connection->useUrlencoded();

                              $response = $connection->post($tokenUrl, array(
                                  "client_id" => "CLIENT_ID",
                                  "client_secret" => "CLIENT_SECRET",
                                  "redirect_uri" => "https://app.example.com/oauth",
                                  "grant_type" => "authorization_code",
                                  "code" => $request->get("code"),
                                  "scope" => $request->get("scope"),
                                  "context" => $request->get("context"),
                              ));


                              $token = $response->access_token;
                            header:
                              title: PHP
                            config:
                              mode: php
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Receiving the POST Response


                              The POST response will include a JSON object
                              containing the permanent OAuth token, user
                              information, and other values. Upon receiving the
                              permanent OAuth token, store it securely. You
                              should also store the user and store hash values,
                              to identify the user and store at load and
                              uninstall. The following sections detail the
                              contents of the JSON body.


                              ### JSON Values

                              | Name | Data Type | Value Description |

                              | --- | --- | --- |

                              | access_token | string | The permanent OAuth
                              token that your app can use to make requests to
                              the Stores API on behalf of the user. Store this
                              value securely. |

                              | scope | string | List of authorization scopes. |

                              | id | integer | Unique identifier for the user.
                              Store this value to identify the user at load and
                              uninstall. |

                              | email | string | The user’s email address. Store
                              this value to identify the user at load and
                              uninstall. |

                              | context | string | The store hash, as well as a
                              base path: `stores/{_store_hash_}` |
                            header:
                              anchor: building-apps_recieving-post-request
                          - type: code
                            data: |-
                              {
                                "access_token": "ACCESS_TOKEN",
                                "scope": "store_v2_orders",
                                "user": {
                                  "id": 24654,
                                  "email": "merchant@mybigcommerce.com"
                                },
                                "context": "stores/STORE_HASH"
                              }
                            header:
                              title: Initial Installation
                              subtitle: JSON
                            config:
                              mode: json
                          - type: text
                            data: >-
                              Update requests will refresh the payload’s
                              access_token and scope values. Here again, the
                              following example requests a scope of
                              store_v2_products, in addition to the initially
                              requested scope of store_v2_orders:
                          - type: code
                            data: |-
                              {
                                "access_token": "ACCESS_TOKEN",
                                "scope": "store_v2_orders store_v2_products",
                                "user": {
                                  "id": 24654,
                                  "email": "merchant@mybigcommerce.com"
                                },
                                "context": "stores/STORE_HASH"
                              }
                            header:
                              subtitle: JSON
                              title: Updating Scopes
                            config:
                              mode: json
                          - type: text
                            data: '---'
                          - type: text
                            data: "## Load, Uninstall, and User Removal Requests\nIn addition to the Auth Callback URI, the following URI’s are required for BigCommerce Apps:\n\n| Name | Required? | Event Discussion |\n| --- | --- | --- |\n| Load Callback URI | Yes | Called when the store owner or user clicks to load your app. |\n| Uninstall Callback URI | No | Called when the store owner clicks to uninstall your app. |\n| Remove User Callback URI | No | Called when the store admin revokes a user's access to your app. |\n\nEach event listed here triggers a GET request from BigCommerce containing a signed payload that allows your app to:\n- Verify that the request came from BigCommerce.\n- Identify the store.\n- Identify the store owner or user.\n\n### Load Request and Response\n\nOnce your app has been installed, the store owner or user can click its icon in the control panel to launch it. This causes BigCommerce to send a GET request to the Load Callback URI that you provided during app registration. In a production environment, the Load Callback URI must be publicly available, fully qualified, and served over TLS/SSL.\n\n```\nThe GET request contains a signed payload, as shown below.\nGET /load?signed_payload=hw9fhkx2ureq.t73sk8y80jx9 HTTP/1.1\nHost: app.example.com\n```\n\nUpon receiving a GET request to the Load Callback URI, your app needs to [process the signed payload](#building-apps_processing-signed-payload). After processing the payload, your app returns its user interface as HTML. BigCommerce renders this inside of an iframe. Please see [User Interface Constraints](#building-apps_user-interface-constraints) for important information about your app’s user interface.\n\n### Uninstall Request (Optional)\n\nStore owners have the option to uninstall any app at any time. When a store owner uninstalls an app, the app’s OAuth token is revoked and the app cannot make requests to the Stores API on the store’s behalf anymore.\n\nYou do not need to provide an Uninstall Callback URI. The lack of an Uninstall Callback URI does not prevent uninstallation. Instead, the Uninstall Callback URI allows you to track store owners who uninstall your app and to run cleanup operations, such as removing the store’s user accounts from your system.\n\nShould you choose to avail of this option and provide an Uninstall Callback URI, please note that it must be publicly available, fully qualified, and served over TLS/SSL. If provided, BigCommerce will send a GET request to your Uninstall Callback URI when a store owner clicks to uninstall your app.\n\nExample of a GET Request sent to the Uninstall Callback URI\n```\nGET /uninstall?signed_payload=hw9fhkx2ureq.t73sk8y80jx9 HTTP/1.1\n\tHost: app.example.com\n```\nUpon receiving the GET request, your app will need to process the signed payload."
                            header:
                              anchor: building-apps_load-uninstall-removal-requests
                          - type: callout
                            data:
                              body: >-
                                Any HTML that you return in your response will
                                not be rendered.
                          - type: text
                            data: >-
                              ### Remove User Request (Optional)


                              If you have not enabled
                              [multi-user](#building-apps_multi-user-support)
                              support, you will not provide a Remove User
                              Callback URI and can ignore this section. If you
                              enable multi-user support, you can optionally
                              specify a Remove User Callback URI. It must be
                              fully qualified, publicly available, and served
                              over TLS/SSL. BigCommerce will send a GETrequest
                              to your Remove User Callback URI when a store
                              admin revokes a user’s access to your app. 


                              Example of a Get Request sent to the Remove User
                              URI


                              ```

                              GET
                              /remove-user?signed_payload=hw9fhkx2ureq.t73sk8y80jx9
                              HTTP/1.1

                              Host: app.example.com

                              ```


                              Upon receiving the GET request, your app will need
                              to process the signed payload.
                          - type: callout
                            data:
                              body: >-
                                Any HTML that you return in your response will
                                not be rendered.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Processing the Signed Payload


                              Processing the signed payload involves splitting
                              and decoding it, verifying the HMAC signature, and
                              processing the JSON object.


                              ### Splitting and Decoding the Signed Payload


                              The signed payload is a string containing a base64
                              url-encoded JSON string and a base64 url-encoded
                              HMAC signature. The parts are delimited by the `.`
                              character:


                              ```

                              encoded_json_string.encoded_hmac_signature

                              ```



                              To decode the signed payload, complete the
                              following steps:

                              1. Split signed_payload into its two parts at the
                              `.` delimiter.

                              2. Decode encoded_json_string using base64url.

                              3. Convert the decoded JSON string into an object.
                              See Processing the JSON object for more about this
                              object.

                              4. Decode encoded_hmac_signature using base64url.

                              5. Use your client secret to verify the signature.
                              See the next section for more details.


                              ### Verifying the HMAC Signature


                              To verify the payload, you need to sign the
                              payload using your client secret, and confirm that
                              it matches the signature that was sent in the
                              request.
                            header:
                              anchor: building-apps_processing-signed-payload
                          - type: callout
                            data:
                              body: >-
                                To limit the vulnerability of your app to timing
                                attacks, we recommend using a constant
                                time-string comparison function, rather than the
                                equality operator, to check that the signatures
                                match.
                          - type: code
                            data: |-
                              function verifySignedRequest($signedRequest)
                              {
                                  list($encodedData, $encodedSignature) = explode('.', $signedRequest, 2);

                                  // decode the data
                                  $signature = base64_decode($encodedSignature);
                                      $jsonStr = base64_decode($encodedData);
                                  $data = json_decode($jsonStr, true);

                                  // confirm the signature
                                  $expectedSignature = hash_hmac('sha256', $jsonStr, $clientSecret(), $raw = false);
                                  if (!hash_equals($expectedSignature, $signature)) {
                                      error_log('Bad signed request from BigCommerce!');
                                      return null;
                                  }
                                  return $data;
                              }
                            header:
                              title: verifySignedRequest
                            config:
                              mode: php
                          - type: callout
                            data:
                              body: >-
                                !hash_equals is available in PHP 5.6 and later.
                                If you are running an older version of PHP, pull
                                in a compatibility library such as the
                                following:
                                https://packagist.org/packages/realityking/hash_equals.
                                BigCommerce’s sample app
                                hello-world-app-php-silex app does this
                                automatically.
                          - type: code
                            data: |
                              require "base64"
                              require "openssl"

                              def verify(signed_payload, client_secret)
                                message_parts = signed_payload.split(".")

                                encoded_json_payload = message_parts[0]
                                encoded_hmac_signature = message_parts[1]

                                payload_object = Base64.strict_decode(encoded_json_payload)
                                provided_signature = Base64.strict_decode(encoded_hmac_signature)

                                expected_signature = OpenSSL::HMAC::hexdigest("sha256", client_secret, payload_object)

                                return false unless secure_compare(expected_signature, provided_signature)

                                JSON.parse(payload_object)
                              end

                              def secure_compare(a, b)
                                return false if a.blank? || b.blank? || a.bytesize != b.bytesize
                                l = a.unpack "C#{a.bytesize}"

                                res = 0
                                b.each_byte { |byte| res |= byte ^ l.shift }
                                res == 0
                              end
                            header:
                              title: verify()
                            config:
                              mode: ruby
                          - type: text
                            data: >-
                              ### Processing the JSON Object


                              The JSON object embedded in the signed_payload
                              contains information about the BigCommerce store
                              and the store owner or user.


                              ### Identifying the Store

                              You should use the store information endpoint to
                              identify the store to which the request pertains.


                              ### Interpreting the User Information


                              Interpreting the user information varies as
                              follows:


                              | Request type | Multiple users enabled | Multiple
                              users not enabled |

                              | --- | --- | --- |

                              | Load | Compare the user information to see if it
                              matches that of the store owner, received at the
                              time of [app
                              installation](#building-apps_installation-update-sequence)
                              or that of an existing user. If the user
                              information does not match either of these, then
                              it represents a new user that you should add to
                              your database or other storage. | The information
                              should match that of the store owner, received at
                              the time of [app
                              installation](#building-apps_installation-update-sequence).
                              |

                              | Uninstall | The user information should match
                              that of the store owner. Only the store owner can
                              uninstall your app. | Should match the store
                              owner. |

                              | Remove user | The user information should match
                              one of the users that you have stored. After
                              locating the stored user, delete it from your
                              database or other storage. | N/A |


                              ### JSON Values


                              | Name | Data Type | Value Description |

                              | --- | --- | --- |

                              | user.id | integer | Unique identifier for the
                              user who initiated the callback. |

                              | user.email | string | Email address of the user
                              who initiated the callback. |

                              | owner.id | integer | Unique identifier for the
                              user listed as the store owner. |

                              | owner.email | string | Email address of the user
                              listed as the store owner. |

                              | context | string | The context value is part of
                              the API path for this store and includes the
                              store_hash. |

                              | store_hash | string |Unique identifier for the
                              store. |

                              | timestamp | float | The time (in Unix time) when
                              the callback was generated.|
                          - type: code
                            data: |-
                              {
                                  "user":
                                       {
                                      "id":9128,
                                      "email":"user@mybigcommerce.com"
                                   },
                                   "owner":
                                        {
                                       "id":9128,
                                       "email":"user@mybigcommerce.com"
                                   },
                                   "context":"stores/z4zn3wo",
                                   "store_hash":"z4zn3wo",
                                   "timestamp":1469823892.9123988
                              }
                            header:
                              title: User Information
                            config:
                              mode: json
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Multi-User Support


                              When you register your app with BigCommerce,
                              enabling multi-user support will allow store
                              admins to manually authorize users – other than
                              the store owner – to load the app. 


                              As soon as you enable multi-user support, the
                              control panel of any store that has your app
                              installed will be affected. If you already have an
                              app published in the App Marketplace, be aware
                              that this setting takes effect immediately.
                              Therefore, we recommend testing your multi-user
                              support using a separate app that is in draft
                              status.


                              Let your customers know that you’ve enabled this
                              feature. Otherwise, they won’t know that they can
                              start granting access to users.


                              If multi-user support is added after your app has
                              launched, the update will cause the app scopes to
                              change and users will be alerted of the new
                              permission request.


                              ### The Control Panel Experience

                              Store admins will be able to adjust user
                              permissions to grant/deny other store users’
                              access to your app. The next time the user logs
                              in, they will see any apps for which they have
                              been granted access. The user can then click on
                              the app icon in the left navigation to load it.

                              Use your draft app and your sandbox store to
                              review this behavior.


                              ### The Load Request

                              Apps that support multiple users can expect the
                              email and ID of the user that initiated the
                              callback in addition to the owner’s email and ID
                              in the JSON object sent in the load request. If a
                              load request is sent with information for a user
                              you haven’t seen yet, you should provision the
                              user account and associate it with the store in
                              your database.


                              Because you know the store owner’s email and ID
                              from the App Installation sequence, your app can
                              distinguish store owners from other users. This
                              allows you to provide different user experiences
                              based on the information in the load request. Here
                              is a summary of the two types of users:


                              - Store owner: Can install, uninstall, and load
                              apps.

                              - Users: Cannot install or uninstall apps.
                              Permitted only to load the apps that a store admin
                              has authorized.


                              For further details, please see [Load Request and
                              Response](#building-apps_load-uninstall-removal-requests).


                              ### The Remove User Request

                              In addition to their ability to add users, store
                              admins can also remove users. This action
                              generates a GET request to the Remove User
                              Callback URI that you provided in My Apps. Your
                              app should delete from its records the user
                              identified in the request.


                              For further information, please see [Remove User
                              Request](#building-apps_load-uninstall-removal-requests).
                            header:
                              anchor: building-apps_multi-user-support
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## External App Installation


                              Apps can be installed from outside the BigCommerce
                              control panel. For example, you could create an
                              install link on your company’s site that directs
                              the merchant to download your app. This section
                              provides a step-by-step guide.


                              ### Create an Install Button


                              First, embed an install button like the one below,
                              at any Web location from which you’d like to
                              enable app installation:
                            header:
                              anchor: building-apps_external-app-installation
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6490/1539297285625
                          - type: text
                            data: >+
                              Redirect anyone who presses your button to:
                              `https://login.bigcommerce.com/app/<your-app's-client-id>/install`

                          - type: text
                            data: >-
                              ### Configure Your Button

                              Upon click, your button should open a modal
                              similar to the image below. We recommend a modal
                              sized 900px wide by 450px high:
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6490/1539297431440
                          - type: text
                            data: >-
                              Your button will link merchants to BigCommerce’s
                              install endpoint for your application. Once the
                              merchant clicks the link, they will be prompted to
                              log in, then authorize your application, just like
                              in the [normal installation
                              flow](#building-apps_installation-update-sequence).
                          - type: text
                            data: >-
                              ### Render Success/Failure Pages


                              Modify your application code to serve either a
                              success or failure page, depending on whether the
                              external installation was successful or
                              unsuccessful.


                              If you skip this step, your application will load
                              in the iframe created by your button. To ensure a
                              good experience for your merchants, we strongly
                              recommend that you return a confirmation page,
                              instead of allowing your application to be loaded
                              in that modal.


                              ### Handling Errors


                              If your application’s installation was initiated
                              and completed through an external link,
                              BigCommerce will send your auth callback endpoint
                              an extra parameter called external_install.

                              If you receive this parameter and there are no
                              errors, call:


                              `https://login.bigcommerce.com/app/<your_app_client_id>/install/succeeded`


                              If there were errors, call:

                              `https://login.bigcommerce.com/app/<your_app_client_id>/install/failed`


                              Below is a sample code snippet of an auth callback
                              that does this:
                            header: {}
                          - type: code
                            data: |2-
                                 if params['external_install']
                                      return get 'https://login.bigcommerce.com/app/m8e1mkkmjw2xjinydqz7ie05to1y2nk/install/succeeded'
                                  end

                                  redirect '/'

                              rescue => e
                                  if params['external_install']
                                      return get 'https://login.bigcommerce.com/app/m8e1mkkmjw2xjinydqz7ie05to1y2nk/install/failed'
                                  end
                            header:
                              title: Auth Callback
                          - type: text
                            data: >-
                              Depending on which endpoint you call, we will
                              render one of the following success/failed pages
                              to the modal.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## User Interface Constraints


                              Single-click apps benefit from a high level of
                              integration with the BigCommerce platform. Users
                              interacting with your app will enjoy a seamless
                              experience. BigCommerce achieves this by rendering
                              your app&#39;s user interface inside of an iframe
                              within the control panel. To ensure acceptance
                              into the App Marketplace, your app should be able
                              to perform all of its functions inside of the
                              iframe.


                              While very usable and friendly, the iframe
                              approach does require special attention from app
                              developers. The remainder of this page discusses
                              several functional areas to consider when
                              designing and developing your app.


                              ### About Mixed Content


                              The BigCommerce control panel is served over
                              TLS/SSL. Your app must be hosted on a web server
                              that accepts and sends TLS/SSL requests. In
                              addition, all of the resources referenced in the
                              HTML that you present to the end users must be
                              served over TLS/SSL. You may find
                              protocol-agnostic addressing helpful.


                              If the user interface retrieves images, scripts,
                              or other assets over a connection not encrypted
                              with TLS/SSL, the user will experience errors and
                              possibly an inability to interact with your app.
                              Before submitting your app, use an <a
                              href="https://www.jitbit.com/sslcheck/"
                              target="_blank">online crawler</a> to check for
                              insecure content.


                              ### About Same-Origin Policies


                              <a
                              href="http://en.wikipedia.org/wiki/Same-origin_policy"
                              target="_blank">Same-origin policies</a> restrict
                              apps running within iframes from performing
                              certain activities, such as interacting with other
                              services and making OAuth connections. While apps
                              that operate within the BigCommerce iframe get
                              strong preference during App Marketplace
                              considerations, we sometimes make exceptions for
                              apps that need to interact with, and authenticate
                              to, other services. If your app requires this, we
                              advise you to open a new tab for actions that
                              cannot occur within the iframe.


                              ### About P3P and Cookies


                              Internet Explorer is one of the browsers that
                              BigCommerce [supports](#supported-browsers), and
                              our merchants do use it to access the control
                              panel. If your app needs to set a cookie, you will
                              need to craft a <a
                              href="http://en.wikipedia.org/wiki/P3P"
                              target="_blank">P3P policy</a>. Otherwise, your
                              app will experience issues on Internet Explorer.
                              Please see the following pages for more
                              information:


                              *   <a
                              href="http://www.techrepublic.com/blog/software-engineer/craft-a-p3p-policy-to-make-ie-behave/"
                              target="_blank">Craft a P3P policy to make IE
                              behave</a>

                              *   <a
                              href="http://blogs.msdn.com/b/ieinternals/archive/2013/09/17/simple-introduction-to-p3p-cookie-blocking-frame.aspx"
                              target="_blank">MSDN Intro to P3P Cookie
                              Blocking</a>
                            header:
                              anchor: building-apps_user-interface-constraints
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Hosting Your App

                              BigCommerce stores are hosted on [Google Cloud
                              Platform](https://cloud.google.com/) in the
                              [us-central1](https://cloud.google.com/compute/docs/regions-zones/)
                              region.


                              Therefore, you can maximize performance of your
                              app (in terms of latency to the public API) by
                              hosting in the same region. There is no
                              requirement to do so, and you may host wherever
                              you like.
              - title: Webhooks
                route:
                  path: /webhooks
                data:
                  children:
                    - title: Overview
                      route:
                        path: /about-webhooks
                      data:
                        blocks:
                          - type: html
                            data: "<h1>About Webhooks</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#about-webhooks_authentication\">Authentication</a></li>\n        <li><a href=\"#about-webhooks_lightweight-callback-payload\">Lightweight Callback Payload</a></li>\n        <li><a href=\"#about-webhooks_request-and-response\">Request and Response</a></li>\n    \t\t<li><a href=\"#about-webhooks_receiving-the-callback\">Recieving the Callback</a></li>\n    \t\t<li><a href=\"#about-webhooks_respond-to-webhook-callbacks\">Responding to the Callback</a></li>\n        <li><a href=\"#about-webhooks_callback-retry-mechanism\">Callback Retry Mechanism</a></li>\n        <li><a href=\"#about-webhooks_webhook-security\">Webhook Security</a></li>\n    \t\t<li><a href=\"#about-webhooks_webhook-troubleshooting\">Troubleshooting</a></li>\n        <li><a href=\"#about-webhooks_tools-for-debugging-and-testing-webhooks\">Tools for Debugging</a></li>\n        <li><a href=\"/api-docs/getting-started/webhooks/webhook-events\">All Available Webhooks</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              Webhooks allow app developers to be notified, in
                              near real-time, when specific events occur on a
                              BigCommerce store. For example, your app may need
                              to perform an action when a new order is created,
                              a product’s inventory decreases, or an item is
                              added to a shopper’s cart. When a subscribed event
                              occurs on a store, BigCommerce will POST a payload
                              to your app’s callback URI so your app can take
                              some action based on that event.
                          - type: callout
                            data:
                              type: warning
                              title: >-
                                Multiple Events Are Triggered during Bulk Data
                                Imports
                              body: >-
                                Bulk data imports will trigger the relevant
                                events for every record affected. For example,
                                if you have a hook on `store/product/created`,
                                when the merchant imports 2,000 products, we
                                will send 2,000 individual callback events.
                            header: {}
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Authentication


                              Webhooks are authenticated using Oauth and support
                              the JSON media type. Basic auth and XML are not
                              supported.


                              Before you  can begin to send and receive
                              requests, you must have the following:


                              * **A store:** You can get a sandbox store by
                              joining the Partner Program.

                              * **OAuth Client ID:** Obtained by creating an API
                              Account.

                              * **OAuth token:** Obtained by creating an API
                              Account.

                              * **Valid TLS/SSL configuration:** Verify your app
                              server’s setup at the following site:
                              [https://sslcheck.globalsign.com](https://sslcheck.globalsign.com)
                            header:
                              anchor: about-webhooks_authentication
                          - type: callout
                            data:
                              type: error
                              title: Connection Breakers
                              body: >-
                                Any one of the following conditions on your app
                                server will cause a connection failure:

                                * Hostname/DNS mismatch.

                                * Self-signed certificate.

                                * Intermediate certificates not loaded.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Lightweight Callback Payload


                              When a subscribed event occurs, we send a light
                              payload with only minimum details regarding the
                              event that’s been triggered. This gives you
                              maximum flexibility as to how you want to handle
                              the notification in your application. For
                              instance, if you subscribe to the
                              `store/order/statusUpdated` event, we’ll send you
                              the order ID when the status is updated. You might
                              want to handle the notification by fetching the
                              full order details via a request to the Orders
                              resource.


                              An example payload follows:


                              ```

                              {
                               "store_id":11111,
                               "producer":"stores/abcde",
                               "scope":"store/order/statusUpdated",
                               "data":{
                                       "type":"order",
                                       "id":173331
                                      },
                               "hash":"3f9ea420af83450d7ef9f78b08c8af25b2213637"
                               }
                              ```


                              | Name | Definition |

                              | -- | -- |

                              | store_id | A numerical identifier that is unique
                              to each store. |

                              | producer | Will always follow the pattern
                              `stores/store_hash`. This is the store that
                              created the webhook. |

                              | scope | The
                              [event](/api-docs/getting-started/webhooks/webhook-events)
                              registered when the webhook was created. |

                              | data | A lightweight description of the
                              [event](/api-docs/getting-started/webhooks/webhook-events)
                              that triggered the webhook. Will vary depending on
                              the event registered. |

                              | hash | The payload data json encoded then passed
                              through sh1 encryption. |
                            header:
                              anchor: about-webhooks_lightweight-callback-payload
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Request and Response


                              *Never worked with webhooks before? Check out the
                              tutorial on creating webhooks.*


                              All webhooks requests must include the following
                              in their HTTP headers:


                              ```
                                   Accept: application/json
                                   Content-Type: application/json
                                   X-Auth-Client: <the OAuth client id>
                                   X-Auth-Token: <the OAuth token>
                              ```
                            header:
                              anchor: about-webhooks_request-and-response
                          - type: code
                            data: |-
                              curl -X POST \
                                https://api.bigcommerce.com/stores/store_hash/v2/hooks \
                                -H 'Accept: application/json' \
                                -H 'X-Auth-Client: your-client-id \
                                -H 'X-Auth-Token: your-auth-token \
                                -d '{
                                "scope": "store/cart/lineItem/*",
                                "destination": "https://myapp.herokuapp.com/",
                                "is_active": true
                            header:
                              title: '/POST Webhook '
                              subtitle: >-
                                Request:
                                https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks
                              anchor: post-webhooks
                            config:
                              mode: shell
                          - type: code
                            data: |2-
                                  {
                                      "id": 14270456,
                                      "client_id": "your-client-id",
                                      "store_hash": "your_store_hash",
                                      "scope": "store/cart/lineItem/*",
                                      "destination": "https://779aca97.ngrok.io/webhooks",
                                      "headers": null,
                                      "is_active": true,
                                      "created_at": 1531326542,
                                      "updated_at": 1531337178
                                  }
                            header:
                              title: Response 201 Created
                              subtitle: /POST Webhook
                              anchor: response-post-webhooks
                            config:
                              mode: json
                          - type: text
                            data: "| Name |Description | Type\n|--|--|--|\n| id | A read-only value that uniquely identifies a webhook object. Do not attempt to set this value in a PUT or POST. | integer|\n| client_id | The OAuth client ID that uniquely identifies your application. BigCommerce returns this name-value pair in the JSON body of its responses. | string |\n| store_hash | \tThe hash value that uniquely identifies the store. Your application does not need to set this value via the JSON object; instead, you pass it in the path of your API requests. | string |\n|scope| Value is the event you would like to listen for. See List of Webhook Events for the full list of possibilities. Wild Cards are supported for scope. **(Required)** | string |\n| destination | value is the callback’s fully qualified URI. This should be an endpoint configured on your app server to receive webhook payloads. **(Required)** | string |\n| headers |The headers object contains one or more name-value pairs, both string values. If you choose to include a headers object, BigCommerce will include the name-value pair(s) in the HTTP header of its POST requests to your callback URI at runtime. While this feature could be used for any purpose, one is to use it to set a secret authorization key and check it at runtime. This provides an additional level of assurance that the POST request came from BigCommerce instead of some other party, such as a malicious actor. (Optional) | string |\n|is_active | Value specifies whether a webhook is active or inactive. By default, new webhooks will be set to be inactive and will have a blank value. If you want to create a webhook that should be active initially, you can pass the following name-value pair: \"is_active\": true. (Optional) | boolean |\n| created_at | The time at which the webhook was created.| date-time Unix Epoch|\n| updated_at | The time at which the webhook was last updated. | date-time Unix Epock|"
                          - type: text
                            data: >-
                              An HTTP 201 response indicates that the webhook
                              was set successfully.
                          - type: callout
                            data:
                              type: warning
                              body: >-
                                Following the creation of a webhook, it can take
                                up to one minute for BigCommerce to start
                                sending POST requests to your callback URI.
                              title: One-Minute Timeout
                          - type: code
                            data: |
                              //Response 200 OK

                              [
                                  {
                                      "id": 14270466,
                                      "client_id": "your-client-id",
                                      "store_hash": "your_store_hash",
                                      "scope": "store/product/created",
                                      "destination": "https://779aca97.ngrok.io/webhooks",
                                      "headers": null,
                                      "is_active": true,
                                      "created_at": 1531326542,
                                      "updated_at": 1531337178
                                  },
                                  {
                                      "id": 14270713,
                                      "client_id": "your-client-id",
                                      "store_hash": "your_store_hash",
                                      "scope": "store/product/updated",
                                      "destination": "https://779aca97.ngrok.io/webhooks",
                                      "headers": null,
                                      "is_active": false,
                                      "created_at": 1531338589,
                                      "updated_at": 1531338589
                                  }
                              ]
                            header:
                              title: /GET All Webhooks
                              subtitle: >-
                                Request:
                                https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks
                              anchor: get-all-webhooks
                            config:
                              mode: json
                          - type: code
                            data: |+
                              {
                                  "id": 14270466,
                                  "client_id": "your-client-id",
                                  "store_hash": "your_store_hash",
                                  "scope": "store/product/created",
                                  "destination": "https://779aca97.ngrok.io/webhooks",
                                  "headers": null,
                                  "is_active": false,
                                  "created_at": 1531326542,
                                  "updated_at": 1531337178
                              }

                            header:
                              subtitle: >-
                                To get a single webhook use the `id`.  Request:
                                https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks/id
                              title: /GET a Single Webhook
                              anchor: get-a-single-webhook
                            config:
                              mode: json
                          - type: code
                            data: |
                              {
                               "scope": "store/product/updated",
                               "destination": "https://779aca97.ngrok.io/webhooks",
                               "is_active": false
                              }


                              //Response 200 OK

                              {
                                  "id": 14270466,
                                  "client_id": "ejoftto9hv8xlip01cckcg53v7g3lrl",
                                  "store_hash": "jrah6gmn",
                                  "scope": "store/product/created",
                                  "destination": "https://779aca97.ngrok.io/webhooks",
                                  "headers": null,
                                  "is_active": false,
                                  "created_at": 1531326542,
                                  "updated_at": 1531337178
                              }
                            header:
                              title: /PUT Webhook
                              subtitle: >-
                                Update a webhook using the id. Once the webhook
                                is created all the fields below can be changed
                                via an update request. Request:
                                https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks/id
                              anchor: update-a-webhook
                            config:
                              mode: json
                          - type: code
                            data: |
                              //Response 200 OK
                              {
                                  "id": 14270466,
                                  "client_id": "ejoftto9hv8xlip01cckcg53v7g3lrl",
                                  "store_hash": "jrah6gmn",
                                  "scope": "store/product/created",
                                  "destination": "https://779aca97.ngrok.io/webhooks",
                                  "headers": null,
                                  "is_active": false,
                                  "created_at": 1531326542,
                                  "updated_at": 1531337178
                              }
                            header:
                              title: /DELETE a Wehbook
                              subtitle: >-
                                Request:
                                https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks/id
                            config:
                              mode: json
                          - type: text
                            data: >-
                              There is not a way to delete all webhooks on a
                              store. Run a GET request for the webhook id, then
                              send a request to the delete URI to remove each
                              one. It returns a 200 OK for the response with the
                              deleted hook. When requesting a list of hook, the
                              hook id is not available.


                              If webhooks are no longer being used, either
                              delete them or set `is_active:false`.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Receiving the Callback


                              You’ll need to build an application and configure
                              your server to receive the callback we send when
                              events are triggered. 


                              Need to set up a quick destination URL for
                              testing? See Tools for Debugging and Testing
                              Webhooks.
                            header:
                              anchor: about-webhooks_receiving-the-callback
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Respond to Webhook Callbacks


                              You’ll need to build an application and configure
                              your server to receive the callback we send when
                              events are triggered.


                              To acknowledge that you received the webhook
                              without issue, your server should return a 200
                              HTTP status code. Any other information you return
                              in the request headers or request body will be
                              ignored. Any response code outside the 200 range,
                              including 3_xx_ codes, will indicate to us that
                              you did not receive the webhook. When a webhook is
                              not received (for whatever reason), we will retry
                              the callback as described below.


                              Need to set up a quick destination URL for
                              testing? See [Tools for testing
                              webhooks.](#about-webhooks_tools-for-debugging-and-testing-webhooks)
                            header:
                              anchor: about-webhooks_respond-to-webhook-callbacks
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Callback Retry Mechanism


                              The webhooks service will do its best to deliver
                              events to your callback URI. If your server
                              indicates that the webhook payload has not been
                              received, the dispatch service will take the
                              following actions:

                              If an app server responds to a webhook payload
                              with anything other than a 2_xx_ response, or
                              times out, the app will be blocked for 60 seconds.

                              Webhooks created during that 60-second block will
                              be queued up to send on the next scheduled retry
                              attempt after the block expires, so that webhooks
                              are not lost.


                              The webhook dispatcher will then attempt several
                              retries (at increasing intervals) until the
                              maximum retry limit is reached.


                              ### Retry Intervals


                              * 60 seconds after the most recent failure  

                              * 180 seconds after the most recent failure  

                              * 180 seconds after the most recent failure  

                              * 300 seconds after the most recent failure  

                              * 600 seconds after the most recent failure  

                              * 900 seconds after the most recent failure  

                              * 1800 seconds after the most recent failure  

                              * 3600 seconds after the most recent failure  

                              * 7200 seconds after the most recent failure  

                              * 21600 seconds after the most recent failure  

                              * 50400 seconds after the most recent failure  

                              * 86400 seconds (24 hours) after the most recent
                              failure


                              After the final retry attempt (cumulatively, 48
                              hours after the first delivery attempt), the
                              webhook will automatically be deactivated, and we
                              will send an email to the developer’s email
                              address registered on the subscribing app. You can
                              reactivate the webhook by setting the `is_active`
                              flag back to true via a `/PUT` request to the
                              hooks resource.
                            header:
                              anchor: about-webhooks_callback-retry-mechanism
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Webhook Security

                              To ensure that webhook payloads are secure against
                              activity by a malicious actor, we take a
                              three-pronged approach:


                              * Webhook payloads contain minimal information
                              about the store and event, for example the ID
                              identifying the order or cart. To access
                              potentially sensitive information on a store, a
                              malicious actor would need to be fully
                              authenticated against that store’s API in order to
                              request full details.

                              * Webhook payloads are sent over a TLS-encrypted
                              connection.

                              * For added security, you can include custom
                              headers in your webhook creation request, and
                              these headers will be sent in the payload when an
                              event you subscribe to occurs. If your app
                              endpoint is secured by basic authentication, you
                              could set your own basic auth headers to
                              authenticate the payload at runtime.
                            header:
                              anchor: about-webhooks_webhook-security
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Troubleshooting


                              ### Why am I not receiving event payloads to my
                              callback URI?

                              If your app does not return an HTTP 2_xx_ to
                              BigCommerce after receiving the webhook event
                              payload, BigCommerce considers it a failure.
                              BigCommerce will keep trying for a little over 48
                              hours. At the end of that time, BigCommerce sends
                              an email to the email address set during app
                              registration and disables the webhook by setting
                              the is_active flag to false.


                              You can proactively check to make sure that
                              everything is OK by periodically making a GET
                              request and checking the is_active flag.


                              If you receive an email or discover that the
                              is_active flag has been flipped to false, try the
                              following:


                              Check to see if your app is responding to the
                              event payload with something other than HTTP 200.

                              Check to make sure that your server has a valid
                              TLS/SSL setup. One way to do this is by visiting
                              the following website:
                              https://sslcheck.globalsign.com. Any of the
                              following will cause the TLS/SSL handshake to
                              fail:

                              Self-signed certificate.

                              Host name of the certificate does not match the
                              server’s DNS.

                              Your server’s key or trust store has not been
                              loaded up with the intermediate certificates
                              necessary to establish the chain of trust.

                              Once you have resolved the issue preventing the
                              connection, send a PUT request to flip the
                              is_active flag back to true. This will cause
                              BigCommerce to start sending the event payloads to
                              your callback URI again.


                              ### Why am I not receiving a 201 response after
                              creating a webhook?

                              After sending a POST request to create a webhook,
                              you should get an HTTP 201 back. If you do not,
                              check your TLS/SSL setup and be sure that your
                              request contains the following headers:


                              ```
                                   Accept: application/json
                                   Content-Type: application/json
                                   X-Auth-Client: <the OAuth client id>
                                   X-Auth-Token: <the OAuth token>
                              ```
                            header:
                              anchor: about-webhooks_troubleshooting
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Tools for Debugging and Testing Webhooks


                              **[ngrok](https://ngrok.com/)**  

                              As you are building your integration, you might
                              want to test webhooks on your local dev machines.


                              We suggest using ngrok, which you can use to
                              easily set up tunnels between a server running on
                              localhost and a public URL. This will enable you
                              to send our webhooks to your localhost
                              environments via a public URL. No production push
                              is required.


                              Need help on ngrok and webhooks see our
                              [tutorial](/api-docs/getting-started/webhooks/setting-up-webhooks).


                              **[Webhook Tester](https://webhook.site/#/)**  

                              This allows for webhooks to be quickly tested or
                              checked. 
                            header:
                              anchor: >-
                                about-webhooks_tools-for-debugging-and-testing-webhooks
                    - title: Webhooks Tutorial
                      config:
                        sidebar:
                          token: Tutorial
                      route:
                        path: /setting-up-webhooks
                      data:
                        blocks:
                          - type: html
                            data: "<h1>Registering and Testing Webhooks</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#setting-up-webhooks_intro\">Intro</a></li>\n    \t\t<li><a href=\"#setting-up-webhooks_prerequisites\">Prerequisites</a></li>\n        <li><a href=\"#setting-up-webhooks_create-project-folder\">Create Project Folder</a></li>\n        <li><a href=\"#setting-up-webhooks_install-ngrok\">Install ngrok</a></li>\n        <li><a href=\"#setting-up-webhooks_create-express-app\">Create Express App</a></li>\n        <li><a href=\"#setting-up-webhooks_start-the-app-ngrok\">Start the App and ngrok</a></li>\n        <li><a href=\"#setting-up-webhooks_fire-webhooks\">Trigger the Webhook Event</a></li>\n        <li><a href=\"#setting-up-webhooks_troubleshooting\">Troubleshooting</a></li>\n        <li><a href=\"#/api-docs/getting-started/webhooks/webhook-events\">All Available Webhooks</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Intro


                              When testing your application locally, ngrok is a
                              helpful tool for viewing the webhook responses
                              that BigCommerce sends to your app. Ngrok creates
                              a publicly accessible tunnel URL to an application
                              running on your machine's localhost. Ngrok also
                              provides a web interface you can use to view HTTP
                              request details.


                              In this tutorial, we'll install ngrok, register a
                              webhook on your store, and then observe the
                              response when the webhook event is triggered.
                            header:
                              anchor: setting-up-webhooks_intro
                          - type: text
                            data: >-
                              ## Prerequisites


                              - NPM is installed (installed automatically with
                              Node)

                              - Familiar with Command Line

                              - Familiar with Postman

                              - [API Access Token & Client
                              ID](/api-docs/getting-started/basics/authentication#authentication_getting-api-credentials)
                              with
                              [scope](/api-docs/getting-started/basics/authentication#authentication_oauth-scopes)
                              set to Information & Settings Read-Only and
                              Products Read-Only.

                              - [Webhooks
                              Overview](/api-docs/getting-started/webhooks/about-webhooks)
                            header:
                              anchor: setting-up-webhooks_prerequisites
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Create Project Folder


                              1. Open the terminal and create a folder that will
                              hold ngrok and the Node app, then move into that
                              directory.


                              ```
                                  mkdir webhooks-test
                                  cd webhooks-test
                              ```
                            header:
                              anchor: setting-up-webhooks_create-project-folder
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Install ngrok


                              ### Mac/Linux


                              1. Visit https://ngrok.com/ and click download.

                              2. Choose the version for your operating system.

                              3. Unzip ngrok and place the application in the
                              project folder that you created.


                              This can be accomplished in one command:

                              unzip "file_to_unzip" -d  destination


                              `unzip
                              /Users/your-computer/Downloads/ngrok-stable-darwin-amd64.zip
                              -d /Users/your-computer/Documents/webhooks-test`


                              ### Windows


                              1. Visit https://ngrok.com/ and click download.

                              2. Choose the version for your operating system.

                              3. Unzip ngrok and place the application in the
                              project folder that you created.

                              4. Make sure ngrok is referenced in your [PATH
                              environment
                              variable](https://superuser.com/questions/284342/what-are-path-and-other-environment-variables-and-how-can-i-set-or-use-them).
                            header:
                              anchor: setting-up-webhooks_install-ngrok
                          - type: callout
                            data:
                              type: success
                              body: >
                                At this point you should have a project folder
                                with ngrok unzipped inside of it. 
                              title: Checkpoint
                          - type: text
                            data: '---'
                          - type: text
                            data: "## Create Express App\n\n1. In the terminal run `npm init`. You will be prompted with several questions about the app setup. Feel free to hit return to accept the default values.  The final screen will look something like this: \n\n```\n{\n  \"name\": \"webhooks-test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"webhooks-test\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n2. Take note of the value in \"main\", `index.js`. \n3. Create a file in your project folder called index.js. `touch index.js` or `copy nul > index.js` for Windows.\n4. Install [Express](https://expressjs.com/en/starter/installing.html) using the terminal in the same project folder. `npm install express --save`\t\t\t "
                            header:
                              anchor: setting-up-webhooks_create-express-app
                          - type: callout
                            data:
                              type: success
                              body: >-
                                At this point your project folder should
                                contain:

                                index.js

                                node_modules

                                package.json

                                ngrok

                                package-lock.json
                              title: Checkpoint
                          - type: text
                            data: >-
                              4. Open index.js in a text editor and add this
                              code snippet: 



                              ```
                                  const express = require('express')
                                  const app = express()
                                      app.post('/webhooks', function (req, res) {
                                      res.send('OK')
                                  })
                                  app.listen(3000, function () {
                                      console.log('Listening for webhooks on port 3000')
                                  })
                              ```



                              The app is starting a server and listening on port
                              3000, then returning a response of ok once it
                              receives a POST to the /webhooks url.


                              ```

                              app.post('/webhooks', function (req, res) {
                               res.send('OK')
                              })

                              ```



                              From Express
                              [Website](https://expressjs.com/en/starter/basic-routing.html):

                              `app.METHOD(PATH, HANDLER)`

                              - app is an instance of express.

                              - METHOD is an [HTTP request
                              method](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods),
                              in lowercase.

                              - PATH is a path on the server.

                              - HANDLER is the function executed when the route
                              is matched.

                              - Res.send is the body parameter that sends the
                              HTTP response.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Start the App and ngrok


                              1. Open two terminal tabs. In both tabs, navigate
                              to your project folder. 

                              2. In one tab run the app. `node index.js`

                              3. In the other start ngrok. `./ngrok http 3000`
                            header:
                              anchor: setting-up-webhooks_start-the-app-ngrok
                          - type: tabs
                            data:
                              children:
                                - title: node index.js
                                  blocks:
                                    - type: text
                                      data: >-
                                        ```

                                        BIGCOMMERCE:webhooks your.computer$ node
                                        index.js

                                        Listening for webhooks on port 3000

                                        ```
                                - title: ngrok http 3000
                                  blocks:
                                    - type: image
                                      data: >-
                                        //s3.amazonaws.com/user-content.stoplight.io/6012/1531500085650
                                      config:
                                        centered: true
                                      header:
                                        title: nrgok terminal
                          - type: text
                            data: >-
                              ngrok returns two values we will need to register
                              a webhook and observe the response: 

                              - **Web Interface:** Where you can monitor the
                              hook from a browser. `https://127.0.0.1:4040`

                              - **Forwarding:** The webhook destination. Make
                              note of the https version. For example,
                              `https://6a35e97b.ngrok.io`.


                              4. Open a web browser and copy in your Web
                              Interface URL: `http://127.0.0.1:4040`.  This is
                              where webhook payloads will appear when they fire.
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1531500191661
                            header:
                              title: ngrok Web Interface
                            config:
                              centered: true
                              maxWidth: '800'
                              maxHeight: '800'
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              Subscribe to the `store/product/updated` event: 


                              1. Create a POST request using the try it now box
                              below or your API enviroment of choice to the
                              request
                              URL:`https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks`. 

                              Replace store_hash with the value from your
                              store's API path.

                              2. Create a request body where "scope" is the
                              webhook event we are subscribing to and
                              "destination" is your ngrok forwarding url with
                              /webhooks appended (the route specified in our
                              Express app):


                              ```

                              {
                               "scope": "store/product/updated",
                               "destination": "https://6a35e97b.ngrok.io/webhooks",
                               "is_active": true
                              }

                              ```
                               

                              3. Update the request headers to contain:

                              ```
                                  Accept: application/json
                                  Content-Type: application/json
                                  X-Auth-Client: {{the OAuth client id}}
                                  X-Auth-Token: {{the OAuth token}}
                              ```

                              4. Check all the values and then hit POST. If
                              successful, the response will be 201 Created.
                          - type: http
                            data:
                              method: post
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v2/hooks
                              headers:
                                Accept: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{the OAuth client id}'
                                X-Auth-Token: '{the OAuth token}'
                              body: |
                                {
                                "scope": "store/product/updated",
                                 "destination": "https://{your-url}.ngrok.io/webhooks",
                                 "is_active": true
                                }
                            header:
                              title: Create a Webhook
                              anchor: create-a-webhook
                          - type: code
                            data: |-
                              {
                                "id": 14263419,
                                "client_id": "your-client-id",
                                "store_hash": "your-store-hash",
                                "scope": "store/product/updated",
                                "destination": "https://6a35e97b.ngrok.io/webhooks",
                                "headers": null,
                                "is_active": true,
                                "created_at": 1531256030,
                                "updated_at": 1531256030
                              }
                            header:
                              title: 201 Created Response
                              anchor: 201-response
                            config:
                              mode: json
                          - type: text
                            data: >-
                              ## Trigger the Webhook Event

                              Webhooks can be triggered by actions performed by
                              a shopper on the storefront or user within the
                              control panel, or actions performed via API. To
                              illustrate this point, we'll demonstrate both
                              methods.


                              ### Update via the Control Panel


                              1. From your store’s control panel, navigate to
                              Products > View. Choose a product and edit product
                              details like name or description. 

                              2. Click **Save**.
                            header:
                              anchor: setting-up-webhooks_fire-webhooks
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1531500906129
                            config:
                              centered: true
                              maxWidth: '800'
                              maxHeight: '800'
                            header:
                              title: BigCommerce Control Panel
                              subtitle: Products > View
                          - type: text
                            data: >-
                              3. Visit the ngrok web interface address  and
                              check for a 200 response. 
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1531500945565
                            config:
                              centered: true
                              maxWidth: '800'
                              maxHeight: '800'
                            header:
                              title: ngrok Web Interface
                          - type: text
                            data: >-
                              The Summary shows that the webhook has fired and
                              our Express app has returned a 200 response along
                              with the text OK. The response is generated by
                              res.send(‘OK’) in our app code, but this text can
                              be changed to say something different or even post
                              the response to another app. For more info, see
                              [Express
                              Routing](https://expressjs.com/en/guide/routing.html).


                              The record of the HTTP request will also show in
                              the terminal tab running ngrok.
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1531500989467
                            header:
                              title: ngrok Terminal Response
                            config:
                              centered: true
                              maxWidth: '800'
                              maxHeight: '800'
                          - type: text
                            data: "### Update Via the API\nCreate a PUT request to the product to be updated, replacing 124 with the product’s ID: \n\n`https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/124`\n\nIn this example, the price of product_id 124 is being changed to 12.99:\n\n```\n{\n\t\"price\": 12.99\n}\n```\n\nAfter hitting send, check the ngrok web interface. You may see a single event or several based on how many times the product has been updated in the previous step."
                          - type: http
                            data:
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}
                              headers:
                                X-Auth-Client: '{Your-X-Auth-Client}'
                                X-Auth-Token: '{Your-X-Auth-Token}'
                                Accept: application/json
                                Content-Type: application/json
                              method: put
                              body: |-
                                {
                                  "price": 12.99
                                }
                            header:
                              title: Update a Product
                              anchor: update-a-product-webhooks
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1531501115256
                            header:
                              title: ngrok Web Interface
                            config:
                              centered: true
                              maxWidth: '800'
                              maxHeight: '800'
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              That’s it! In this walkthrough you created a
                              webhook, set up a server to accept the response,
                              and used ngrok to observe the webhook payload.


                              Want to keep going? Try changing the text in
                              `res.send()` to a custom response, print the
                              response to a webpage, or register a different
                              webhook event. 
                          - type: callout
                            data:
                              body: >-
                                Unless you have a paid ngrok account, the
                                destination URL will only be valid for a few
                                hours. After that, the webhook will stop
                                working. Send a DELETE request to the specific
                                webhook ID to disable the hook. 
                              type: warning
                              title: URL Timeout
                          - type: http
                            data:
                              method: delete
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v2/hooks/{hook_id}
                              headers:
                                X-Auth-Client: '{your-client-id}'
                                X-Auth-Token: '{your-auth-token}'
                                Content-Type: application/json
                                Accept: application/json
                            header:
                              title: Delete the webhook
                              subtitle: >-
                                Get the hook_id by either getting it from the
                                original /POST response or by sending a /GET
                                request to the hooks resource
                              anchor: delete-webhook
                          - type: text
                            data: >-
                              ## Troubleshooting

                              1. Getting a 404 error using the root (/) url?


                              Add this snippet to your code to respond to
                              incoming get requests with 'hello'.


                              ```

                              app.get('/',(req, res)=>{
                                  res.send('Hello!');
                              }); 

                              ```


                              2. Getting error ngrok not found?

                              There are two ways to fix this. Your local setup
                              will determine which command will work.

                              Use the command `mv ngrok /usr/local/bin `to move
                              ngrok to your local bin folder. This way it
                              becomes available globally. 

                              Use the command `./ngrok http 3000` to run ngrok
                              as a sudo user. 


                              3. Windows Users

                              If you are having trouble getting ngrok started
                              try setting the PATH. 
                                  - [What are PATH and other environment variables, and how can I set or use them?](https://superuser.com/questions/284342/what-are-path-and-other-environment-variables-and-how-can-i-set-or-use-them)
                            header:
                              anchor: setting-up-webhooks_troubleshooting
                    - title: Webhook Events
                      route:
                        path: /webhook-events
                      data:
                        blocks:
                          - type: html
                            data: "<h1>List of Webhook Events</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#webhook-events_orders\">Orders</a></li>\n        <li><a href=\"#webhook-events_products\">Products</a></li>\n        <li><a href=\"#webhook-events_category\">Category</a></li>\n        <li><a href=\"#webhook-events_sku\">SKU</a></li>\n        <li><a href=\"#webhook-events_customer\">Customer</a></li>\n        <li><a href=\"#webhook-events_store\">Store</a></li>\n        <li><a href=\"#webhook-events_cart\">Cart</a></li>\n        <li><a href=\"#webhook-events_shipment\">Shipment</a></li>\n    \t\t<li><a href=\"#webhook-events_subscriber\">Subscriber</a></li>\n    \n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Orders


                              | Name | Description |

                              | ---| --- |

                              | store/order/* | Subscribe to all store/order
                              events  |

                              | store/order/created |Fires if an order is
                              created using the control panel, an app or via the
                              API.| 

                              | store/order/updated| Fires when an already
                              created order is updated. Any changes to an
                              existing order will fire this webhook. Updates can
                              include changing the status, updating a coupon or
                              changing an address.|

                              | store/order/archived | Order is archived |

                              | store/order/statusUpdated | This will only fire
                              if the order status has changed. Such as Pending
                              to Awaiting Payment |

                              | store/order/message/created | Order message is
                              created by customer or in control panel |
                            header:
                              anchor: webhook-events_orders
                          - type: code
                            data: |-
                              {
                                "scope": "store/order/statusUpdated",
                                "store_id": "123456",
                                "data": {
                                  "type": "order",
                                  "id": 169,
                                  "status": {
                                    "previous_status_id": 5,
                                    "new_status_id": 9
                                  }
                                },
                                "hash": "6923dda2313a5709b13f9b217a3acd6f8308a0c2",
                                "created_at": 1535486277,
                                "producer": "stores/abcdefg"
                              }
                            header:
                              title: ' store/order/statusUpdated'
                              anchor: order-status-updated
                            config:
                              mode: json
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Products


                              | Name | Description |

                              | --- | --- |

                              | store/product/*| Subscribe to all store/product
                              events |

                              |store/product/deleted| Product is deleted|

                              | store/product/created | A new product is created
                              |

                              | store/product/updated |Occurs when product
                              details are edited. For a full list of product
                              fields that trigger an updated event, see
                              **Product Updated Events** below |

                              | store/product/inventory/updated| Product
                              inventory is updated. |

                              | store/product/inventory/order/updated| Fires if
                              a product’s inventory is decremented or
                              incremented, including when an order is placed.
                              Webhook responds to inventory updates made using
                              the Control Panel, CSV import, API or an app.|


                              ### Notes on
                              `store/product/inventory/order/updated`

                              The response for
                              `store/product/inventory/order/updated` includes
                              an inventory object containing:


                              **value**: the number of items that the inventory
                              changed by. This can be negative if the inventory
                              is decreased `-3` or positive if an item is
                              returned to the inventory from an order, `+2`


                              **method** : Will always return relative.


                              **id**: The product id


                              **product_id**: The product id


                              ### Product Updated Events


                              Changes to any of the following fields will
                              trigger a `store/product/updated` event:


                              - _Brand_

                              - _Product Type_

                              - _Category_

                              - _Inventory_

                              - _Number Sold_

                              - _Availibility_

                              - _Thumbnail Changed_

                              - _Visibility_

                              - _Featured_

                              - _Name_

                              - _Description_

                              - _Sort Order_

                              - _Price_

                              - _Dimensions_

                              - _Condition_

                              - _Tax Price_
                            header:
                              anchor: webhook-events_products
                          - type: code
                            data: |-
                              {
                                "scope": "store/product/inventory/order/updated",
                                "store_id": "123456",
                                "data": {
                                  "type": "product",
                                  "id": 185,
                                  "inventory": {
                                    "product_id": 185,
                                    "method": "relative",
                                    "value": -1
                                  }
                                },
                                "hash": "dc475e1059f2a67a55818bea29bf6b23ebbda707",
                                "created_at": 1535480603,
                                "producer": "stores/abcdefg"
                              }
                            header:
                              title: store/product/inventory/order/updated
                              anchor: product-inventory-order-updated
                            config:
                              mode: json
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Category


                              | Name | Description |

                              |---|---|

                              | store/category/*| Subscribe to all
                              store/category events |

                              | store/category/created | Category is created |

                              | store/category/updated | Category is updated |

                              | store/category/deleted | Category is deleted |
                            header:
                              anchor: webhook-events_category
                          - type: code
                            data: |-
                              {
                                "scope": "store/category/updated",
                                "store_id": "123456",
                                "data": {
                                  "type": "category",
                                  "id": "19"
                                },
                                "hash": "9bb5584b3c28e3bb07164405626bd913c14d2209",
                                "created_at": 1535487935,
                                "producer": "stores/abcdefg"
                              }
                            header:
                              title: store/category/updated
                              anchor: category-updated
                            config:
                              mode: json
                          - type: text
                            data: >-
                              ## SKU


                              | Name | Description |

                              | --- | --- |

                              | store/sku/* |Subscribe to all store/sku events |

                              | store/sku/created | A new sku is created |

                              | store/sku/updated | Sku is updated |

                              | store/sku/deleted| Sku is deleted |

                              | store/sku/inventory/updated| |

                              | store/sku/inventory/order/updated| This will
                              fire when the inventory is updated via API, the
                              Control Panel, when an order is placed and when an
                              order is refunded and the inventory returned to
                              stock. Inventory changes due to an order and
                              determined by the store's settings. |


                              ### Notes on `store/sku/inventory/order/updated`


                              Included in the response is a data object:


                              **value**: the number of items that the inventory
                              changed by. This can be negative if the inventory
                              is decreased `-3` or positive if an item is
                              returned to the inventory from an order, `+2`


                              **method** : Will always return relative.


                              **type**: Will always be sku


                              **variant_id**: Id of the variant
                            header:
                              anchor: webhook-events_sku
                          - type: code
                            data: |-
                              {
                                "scope": "store/sku/inventory/order/updated",
                                "store_id": "123456",
                                "data": {
                                  "type": "sku",
                                  "id": 330,
                                  "inventory": {
                                    "product_id": 184,
                                    "method": "relative",
                                    "value": +2,
                                    "variant_id": 364
                                  }
                                },
                                "hash": "dc475e1059f2a67a55818bea29bf6b23ebbda707",
                                "created_at": 1535480603,
                                "producer": "stores/abcdefg"
                              }
                            header:
                              title: store/sku/inventory/order/updated
                              anchor: sku-inventory-order-updated
                            config:
                              mode: json
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Customer

                              | Name | Description |

                              |---|---|

                              | store/customer/* | Subscribe to all
                              store/customer events |

                              | store/customer/created | A new customer is
                              created|

                              | store/customer/updated | Customer is updated.
                              Does not currently track changes to the customer
                              address. |

                              | store/customer/deleted | Customer is deleted |

                              | store/customer/address/created | Customer
                              address is created |

                              | store/customer/address/updated | Customer
                              address is updated |

                              | store/customer/address/deleted | Customer
                              address is deleted |
                            header:
                              anchor: webhook-events_customer
                          - type: code
                            data: |-
                              {
                                "scope": "store/customer/deleted",
                                "store_id": "123456",
                                "data": {
                                  "type": "customer",
                                  "id": 10
                                },
                                "hash": "4bf08f1ad81eeb460eb12f99f7fd2226b6ea0911",
                                "created_at": 1535488840,
                                "producer": "stores/abcdefg"
                              }
                            header:
                              title: store/customer/deleted
                            config:
                              mode: json
                          - type: code
                            data: >-
                              {

                              "scope": "store/customer/address/updated",

                              "store_id": "1025646",

                              "data": {

                              "type": "customer",

                              "id": 43,

                              "address":


                              { "customer_id": 29 }

                              },

                              "hash":
                              "6e246d3bebd7c8fac6e84f1f554d3801598f2969",

                              "created_at": 1553719926,

                              "producer": "stores/abcdefg"

                              }
                            header:
                              title: store/customer/address/updated
                            config:
                              mode: json
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Store

                              |Name|Description|

                              |---|---|

                              | store/app/uninstalled | Occurs when a client
                              store is cancelled and uninstalled from the
                              platform |

                              |store/information/updated | Occurs when changes
                              are made to store settings. For a full list of
                              fields that can trigger this event, see **Store
                              Information Updated Events** below |


                              ### Store Information Updated Events


                              Changes to the following store settings will
                              trigger a `store/information/updated` event:


                              * *Store Name*

                              * *Store Address*

                              * *Store Address*

                              * *Store Phone Number*

                              * *Admin Email*

                              * *Order Email*

                              * *Display Date Format*

                              * *Export Date Format*

                              * *Store DTS Correction*

                              * *Store Time Zone*

                              * *Language*

                              * *Default Currency*

                              * *Currency Token*

                              * *Decimal Token*

                              * *Thousands Place*

                              * *Currency Location*

                              * *Weight Measurement*

                              * *Length Measurement*

                              * *Length Measurement*

                              * *Dimensions Decimal Places*

                              * *Dimensions Decimal Token*

                              * *Plan Name*

                              * *Plan Level*

                              * *Store Logo*

                              * *Mobile Template Logo*

                              * *Tax Entered With Prices*

                              * *Stencil Template Enabled* 
                            header:
                              anchor: webhook-events_store
                          - type: code
                            data: |-
                              {
                                "scope": "store/information/updated",
                                "store_id": "123446",
                                "data": {
                                  "type": "store"
                                },
                                "hash": "c553845e0a5e28dc8b0ea494458692a25586a294",
                                "created_at": 1535489273,
                                "producer": "stores/abcdefg"
                              }
                            header:
                              title: store/information/updated
                              anchor: store-information-updated
                            config:
                              mode: json
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              ## Cart


                              | Name | Description |

                              | --- | --- |

                              | store/cart/lineItem/* | This webhook will fire
                              when a change occurs to line items in the cart.
                              This can be items added to a cart, removed or
                              updated.(Ex. change to quantity, product options
                              or price). |

                              | store/cart/lineItem/created | When a new item is
                              added to the cart  |

                              | store/cart/lineItem/updated | When an item’s
                              quantity has changed or the product options
                              change. |

                              | store/cart/lineItem/deleted | When an item is
                              deleted from the cart|

                              | store/cart/created | This webhook will fire
                              whenever a new cart is created either via a
                              storefront shopper adding their first item to the
                              cart or when a new cart being created via an API
                              consumer. If it is from the storefront, then it
                              fires when the first product is added to a new
                              session.(The cart did not exist before) For the
                              API it means a  `POST`  to /carts, (V3 and
                              Storefront API). The  `store/cart/updated`  will
                              also fire.|

                              | store/cart/updated | This webhook is fired
                              whenever a cart is modified through the changes in
                              its line items. Eg. when a new item is added to a
                              cart, an existing item’s quantity is updated, when
                              the email changes during guest checkout or an
                              existing item is deleted, the cart is modified
                              triggering this webhook. The payload will include
                              the ID of the cart being updated. <br> This
                              webhook is also fired along with cart created
                              because the first product being added to an empty
                              cart triggers an update. <br> - Logging into
                              customer account after creating a cart (email is
                              inherited from customer account email) <br>-
                              Entering email address via guest checkout <br>
                              -Changing the email in guest checkout |

                              | store/cart/deleted| This webhook will fire
                              whenever a cart is deleted. This is can be either
                              when all items have been removed from a cart and
                              it was auto-deleted or it was explicitly removed
                              via a DELETE request by an API consumer. This ends
                              the lifecycle of the cart. The 
                              `store/cart/updated`  webhook will also fire when
                              the last item is removed.|

                              | store/cart/couponApplied | This webhook will
                              fire whenever a new coupon code is applied to a
                              cart. It will include the ID of the coupon code |

                              | store/cart/abandoned | This webhook will fire
                              one after a cart is abandoned. A cart is
                              considered abandoned if no changes were made at
                              least one hour after the last modified property. 
                              |

                              | store/cart/converted | This hook fires when a
                              cart is converted into an order, which is
                              typically after the payment step of checkout on
                              the storefront. At this point, the Cart is no
                              longer accessible and has been deleted. This hook
                              returns both the Cart ID and Order ID for
                              correlation purposes. |
                            header:
                              anchor: webhook-events_cart
                          - type: code
                            data: |-
                              {
                                  "scope": "store/cart/lineItem/created",
                                  "store_id": "12074048",
                                  "data": {
                                      "type": "cart_line_item",
                                      "id": "c676e997-10fc-4049-bf18-1077a062e16d",
                                      "cartId": "351a367f-4198-4108-996a-753ffc1bce21"
                                  },
                                  "hash": "23d6ae55d612514cbc3f79619535a184bbf10fc0",
                                  "created_at": 1518405112,
                                  "producer": "stores/ojgwnqqd0g"
                              }
                            header:
                              title: store/cart/lineItem/created
                              anchor: cart-lineitem-created
                            config:
                              mode: json
                          - type: code
                            data: "{\n    \"scope\": \"store/cart/created\",\n    \"store_id\": \"12074048\",\n    \"data\": {\n        \"type\": \"cart\",\n        \"id\": \"6121f45e-e3d9-4fcf-828e-b507594a1f96\"\n    },\n    \"hash\": \"54eef7f35f37d770aefcb61c5d3f1df6ed0d5a31\",\n    \"created_at\": 1518403916,\n  \t\"producer\": \"stores/ojgwnqqd0g\"\n}\n  "
                            header:
                              title: store/cart/created
                              anchor: cart-created
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Shipment


                              | Name | Description |

                              | --- | --- |

                              | store/shipment/* | Subscribe to all
                              store/shipment events |

                              | store/shipment/created | Shipment is created |

                              | store/shipment/updated | Shipment is updated |

                              | store/shipment/deleted | Shipment is deleted |
                            header:
                              anchor: webhook-events_shipment
                          - type: code
                            data: |-
                              {
                                  "scope": "store/shipment/created",
                                  "store_id": "123456",
                                  "data": {
                                      "type": "shipment",
                                      "id": 12,
                                      "orderId": "319"
                                  },
                                  "hash": "a6bc11ea25e8f389a16ee919f0c0db6d4099d7de",
                                  "created_at": 1534951410,
                                  "producer": "stores/abcdefg"
                              }
                            header:
                              title: store/shipment/created
                              anchor: shipment-created
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Subscriber


                              | Name | Description |

                              | --- | --- |

                              | store/subscriber/* | Subscribe to all
                              store/subscriber events |

                              | store/subscriber/created | Subscriber is created
                              |

                              | store/subscriber/updated| Subscriber is updated
                              |

                              | store/subscriber/deleted | Subscriber is deleted
                              |
                            header:
                              anchor: webhook-events_subscriber
                          - type: code
                            data: |-
                              {
                                "scope": "store/subscriber/created",
                                "store_id": "1025646",
                                "data": {
                                  "type": "subscriber",
                                  "id": 1
                                },
                                "hash": "883470faa0d36d25179b620f192f1726356300a9",
                                "created_at": 1543935205,
                                "producer": "stores/abcdefg"
                              }
                            header:
                              title: store/subscriber/created
                              anchor: subscriber-created
        - title: Partner Information
          route:
            path: /partner
          data:
            children:
              - title: Becoming A Partner
                route:
                  path: /becoming-a-partner
                data:
                  blocks:
                    - type: html
                      data: "<h1>Becoming a Partner</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#becoming-a-partner_apply-technology-partner-program\">Apply to the Technology Partner Program </a></li>\n\t\t<li><a href=\"#becoming-a-partner_getting-sandbox-store\">Getting a Sandbox Store</a></li>\n\t\t<li><a href=\"#becoming-a-partner_app-store-approval-requirements\">App Store Approval Requirements</a></li>\n\t\t<li><a href=\"#becoming-a-partner_partner-program-troubleshooting\">Troubleshooting</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        The following sections outline the steps required to
                        become a vendor of Single-Click Apps on the BigCommerce
                        platform. Doing so requires a partnership application,
                        but acceptance will authorize you to provide
                        best-of-breed solutions to the fast-growing online
                        businesses we host.


                        ## Apply to the Technology Partner Program


                        Before you can submit an app to the BigCommerce App
                        Marketplace (which merchants also know as our “app
                        store”), you must become an official Partner.
                        BigCommerce offers app developers free sandbox stores
                        through its Technology Partner Program. To be approved
                        as a partner, you will need:


                        * A website

                        * Intent to offer your app publicly

                        * Ability to support users of your app

                        * Evidence of expertise in app development


                        Once approved, you will receive one or more emails
                        listing your partner credentials and next steps. Your
                        Partner ID will be required to submit your app for App
                        Marketplace consideration. If you do not receive these
                        credentials by email, please contact <a
                        href="mailto:appstore@bigcommerce.com">appstore@bigcommerce.com</a>.
                      header:
                        anchor: becoming-a-partner_apply-technology-partner-program
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Getting a Sandbox Store


                        To build a Marketplace app, you will need to have a
                        sandbox store, a developer account at
                        devtools.bigcommerce.com, and be accepted as a
                        BigCommerce partner. We encourage you to create your
                        sandbox store and your Dev Tools account using the same
                        login credentials. A sandbox store cannot process
                        transactions and is for developing and testing apps
                        without the 15-day time time limit of a trial store. 
                      header:
                        anchor: becoming-a-partner_getting-sandbox-store
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          A sandbox store is not required for app development,
                          but if you develop on a trial store instead, after 15
                          days the store will be erased along with the data and
                          a new store will need to be created. Applying to be a
                          partner and getting a sandbox store is best practice. 
                    - type: text
                      data: >-
                        ### Create a Sandbox Store


                        1. Navigate to the [BigCommerce Pricing
                        page](https://www.bigcommerce.com/pricing/).

                        2. Select **START YOUR FREE TRIAL**.

                        3. Where prompted for an email address, enter the same
                        email that you used when applying to become a Technology
                        Partner. 

                        4. Select **CONTINUE TO STORE DETAILS**.

                        5. In the trial store setup form, enter a store name,
                        password, and other details. Then select **CREATE YOUR
                        STORE**.

                        6. Log in to the [Partner
                        Portal](https://partners.bigcommerce.com) and navigate
                        to Support > Create a Case > Issue Type = Portal and
                        Membership. In the case description, enter your new
                        sandbox store’s friendly URL (for example:
                        http://your-store-name.mybigcommerce.com) and request
                        conversion to a Sandbox. We will flag this as a sandbox
                        store to ensure your continued access to the store, as
                        opposed to the normal 15-day trial. This can take around
                        two days.

                        7. When you log into your new store, use the same email
                        that you used for step 3 above.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ##  Troubleshooting


                        ### Are all fields required?


                        While not all fields are required to publish edits for
                        your listing, they are all highly recommended. Without
                        filling in all fields, your listing will be missing
                        information that merchants have seen on other listings
                        and expect to see throughout the Marketplace.


                        ###  I’ve logged in to Dev Tools, but I don’t see my
                        published listing. Where is it?


                        You may be logged in with the wrong account. Each
                        listing can only be owned by one user, so it is likely
                        assigned to another email address. If you’re unable to
                        track down the correct owner account for your solution,
                        please reach out to <a
                        href="mailto:appstore@bigcommerce.com">appstore@bigcommerce.com</a>.


                        ### I saved my changes, but my listing detail page on
                        BigCommerce.com/Apps has not updated yet. What’s the
                        problem?


                        The changes will be effective immediately in your
                        control panel app card, but the updates can take up to
                        24 hours to appear on the public BigCommerce
                        Marketplace. Feel free to use this as a grace period to
                        make additional edits as needed.
                      header:
                        anchor: becoming-a-partner_partner-program-troubleshooting
                    - type: callout
                      data:
                        type: success
                        body: >-
                          Questions? Please contact <a
                          href="mailto:appstore@bigcommerce.com">appstore@bigcommerce.com</a>
              - title: App Store Approval Requirements
                route:
                  path: /app-store-approval-requirements
                data:
                  blocks:
                    - type: html
                      data: <h1>App Store Approval Requirements</h1>
                    - type: text
                      data: >-
                        Dev Tools is the BigCommerce workspace for developing
                        single-click apps. Within Dev Tools, you'll create the
                        Client Id and Client Secret to authenticate your apps,
                        submit new apps to the App Marketplace, and manage
                        existing Marketplace listings.


                        Dev Tools can be found by clicking [My
                        Apps](https://devtools.bigcommerce.com/) in the upper
                        right corner of the page. 
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## App Store Approval Requirements


                        The requirements to submit an app are listed below, as
                        well as where the information needs to be updated.


                        ### Prerequisites


                        Make sure you’ve applied and been approved for our
                        [Technology Partner
                        Program](https://partners.bigcommerce.com/English/register_email.aspx)
                        before you’re ready to submit your app - you’ll need a
                        valid Partner ID to do so. You’ll also need to accept
                        the Terms & Conditions in the [Partner
                        Portal](https://partners.bigcommerce.com/English/)
                        before we can publish your app.


                        ### General Requirements


                        -   Support resources should be available throughout the
                        app experience, including in your onboarding flow and
                        the app’s dashboard.
                            
                        -   Make sure to reference BigCommerce using the proper
                        formatting. You can visit our [Media
                        Kit](https://www.bigcommerce.com/press/media-kit/) for
                        any BigCommerce branding assets needed.
                            
                        -   The app and app listing should make no references to
                        competitor platforms.


                        -   Use the brand name you’ve given your app for your
                        app title throughout your app content. This listing name
                        should be a concise title for easy identification and
                        should not include additional taglines or descriptors.
                        The name will always appear alongside your summary, so
                        there’s no need to muddy your app’s branding with
                        duplicate content when that tagline is already displayed
                        with it!  
                              
                            - If your solution is a connector to a specific third-party service, or you’re offering only a specific feature, make sure to include both the name of the third party service or feature and your company name (Ex: “Marketplace by BigCommerce”, “Search by BigCommerce”), with your company name following the feature.
                            
                        -   Your app, including any storefront components,
                        should be compatible with all [browsers](#stencil-link)
                        that the BigCommerce platform supports.


                        ### Functionality


                        -   Your app must work as intended, be free of defects,
                        and not conflict with or break any default BigCommerce
                        functionality, including the BigCommerce storefront and
                        checkout.
                            
                        -   Utilize any V3 API resources that are currently
                        available for the data you need from a BigCommerce
                        store.
                            
                        -   The dashboard and callback URLs for your app should
                        operate strictly over HTTPS using a valid SSL
                        certificate.
                            
                        -   Apps should offer [multi-user
                        support](/api-docs/getting-started/building-apps-bigcommerce/building-apps#building-apps_multi-user-support)
                        so that permissions for the app can be distributed by
                        the store owner to additional users, from the
                        BigCommerce control panel.
                            
                        -   Any apps that process transactions or handle credit
                        card data will need to pass a PCI Compliance review with
                        our Security team, and also be compatible with our
                        Optimized One-Page Checkout.
                            
                        -   Avoid copy/paste for storefront code - use the [V3
                        Scripts API](/api-reference/content/content-scripts-api)
                        to programmatically inject code snippets into a store’s
                        Script Manager and storefront theme.
                            
                        -   If your app requires payment, you’ll need to collect
                        payment from the user within your app. See Pricing &
                        Categorization under App Summary for more information.


                        ### Installation


                        -   Apps should be Single-Click and use our OAuth token
                        exchange flow to authenticate the user
                            
                        -   Single-Click does not mean everything  completed in
                        one click, but that authentication is handled in that
                        click - other tasks can be handled post-auth with the
                        user
                            
                        -   When the app is installed, a styled HTML page must
                        be returned in the iframe of the BigCommerce control
                        panel - this content cannot be blank and must follow our
                        [user-interface
                        constraints](/api-docs/getting-started/building-apps-bigcommerce/building-apps#building-apps_user-interface-constraints).
                            
                        -   During the OAuth handshake, be sure to store the
                        user’s token against their store hash - rather than
                        their email address - to avoid any problems with
                        ownership changes or multi-user support.
                    - type: callout
                      data:
                        body: >-
                          If your app cannot meet these requirements, please
                          reach out to <a
                          href="mailto:appstore@bigcommerce.com">appstore@bigcommerce.com</a>
                          in order to discuss the potential for a Connector app
                          listing. In the majority of cases, a Single-Click app
                          will be the more appropriate solution and put your
                          integration on par with other Marketplace partners,
                          but exceptions may be made under certain circumstances
                    - type: text
                      data: >-
                        ### Recommendations


                        -   Have a form to fill out for new users? We recommend
                        auto-filling user input fields with data from the [Store
                        Information API
                        resource](/api-reference/store/store-information-api),
                        which already contains much of the info you might need
                        from a new user.
                            
                        -   No account approval process needed for your app?
                        Consider automatically generating accounts for stores
                        that install your app and don’t match an existing store
                        in your database.
                            
                        -   Require login on launch? Use the information in the
                        BigCommerce payload to your callback URL to authenticate
                        the user without asking for a username and password each
                        time.
                            
                        -   Want to share user testimonials? Add a link to your
                        full case study in the Case Studies field, with a title
                        and short description.
                    - type: text
                      data: '---'
                    - type: tabs
                      data:
                        children:
                          - title: App Summary
                            blocks:
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6012/1536259683439
                                header:
                                  anchor: app-summary
                              - type: text
                                data: >-
                                  ### Contact Name

                                  Use the email address that was created when
                                  applying for your Partner Id. 


                                  ### Partner Name

                                  List the name of your company​, as you want it
                                  to be attributed on the detail page.


                                  ### Partner Website

                                  Provide the URL for your homepage so users can
                                  learn more about your company.


                                  ### Support email

                                  Email where users can get help with the app.
                                  This should be a formal group email at your
                                  company domain (Ex: support@app-partner.com)
                                  rather than a personal email. If not provided,
                                  this option will not be displayed.


                                  ### Support website

                                  A Support email and website for users to reach
                                  out as needed.

                                  These will be publicly visible on the
                                  Marketplace, so make sure to stay away from
                                  personal emails or non-support URLs. Your
                                  public detail page will include a button for
                                  users to “Get Support,” which will take them
                                  to this URL in a new tab. If not provided, the
                                  button will not be displayed on your detail
                                  page.


                                  ### Partner ID

                                  When you’re ready to submit your listing for
                                  review, you will need to enter your [Partner
                                  ID](https://partners.bigcommerce.com/English/register_email.aspx)
                                  for your Technology Partner account. This
                                  field is not required to create, save, or edit
                                  a Draft prior to submission. 
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6012/1536259722234
                              - type: text
                                data: >-
                                  ### App Name

                                  Use the brand name you’ve given your app for
                                  your app title throughout your app content.
                                  This listing name should be a concise title
                                  for easy identification and should not include
                                  additional taglines or descriptors. The name
                                  will always appear alongside your summary, so
                                  there’s no need to muddy your app’s branding
                                  with duplicate content when that tagline is
                                  already displayed with it.


                                  #### Pricing & Categorization

                                  Select one of our pre-formatted pricing
                                  options to call out your app’s starting price.
                                  If you offer a forever-free plan, choose the
                                  “Free” option. If your app does not fit one of
                                  our formatted options, specify your details in
                                  a few words in the “Other” selection.

                                  - If you need to specify more detail on your
                                  pricing options, save it for your app
                                  description.  

                                  Choose the most appropriate category for your
                                  app.
                              - type: callout
                                data:
                                  body: >-
                                    If your solution is a connector to a
                                    specific third-party service, or you’re
                                    offering only a particular feature, make
                                    sure to include both the name of the third
                                    party service or feature and your company
                                    name​ (Ex: “Marketplace by BigCommerce,”
                                    “Search by BigCommerce”). The company name
                                    needs to follow the feature.
                              - type: text
                                data: >-
                                  ### App Logo

                                  Your primary app logo should be 350 x 130px
                                  (or larger at this ratio) with a white
                                  background and dark branding in the
                                  foreground. The logo should only include
                                  branding, no taglines necessary.


                                  ### App Icon

                                  The app icon will be included on the main app
                                  detail page and the sidebar in the BigCommerce
                                  control panel once the app is installed. This
                                  should be a square 200x200px image.


                                  ### Price

                                  Select one of our pre-formatted pricing
                                  options to call out your app’s starting price.
                                  If you offer a forever-free plan, choose the
                                  “Free” option. If your app does not fit one of
                                  our options, specify your details in a few
                                  words in the “Other” selection.
                              - type: callout
                                data:
                                  body: >-
                                    If you need to specify more detail on your
                                    pricing options, save it for your app
                                    description.
                              - type: text
                                data: >-
                                  ### App Summary

                                  A short tagline description of your app that
                                  will be used on your app card in category and
                                  search results within the Marketplace. 128
                                  characters max.


                                  ### App Icon

                                  Your app icon will be included on the main app
                                  detail page and the sidebar in the BigCommerce
                                  control panel once the app is installed. This
                                  should be a square 200 x 200px image.


                                  ### Category

                                  Choose the most appropriate category for your
                                  app. Take a look at the live
                                  [Marketplace](https://www.bigcommerce.com/apps/)
                                  for an idea of where solutions are currently
                                  assigned to help decide the right category.
                                  The category selection will also be a search
                                  attribute for your listing. BigCommerce will
                                  review your category assignment and may
                                  re-categorize your listing prior to launch.
                                  One category maximum.
                          - title: Details
                            blocks:
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6012/1536260365610
                                header:
                                  anchor: app-details
                              - type: text
                                data: >-
                                  ### App Details

                                  A more in-depth value proposition for your
                                  listing, including how your solution works,
                                  why your solution stands out in its category,
                                  and why a merchant should choose you over
                                  other competitors. Avoid using fluff or
                                  buzzwords, as this field will not be indexed
                                  for search. 200 words max recommended.


                                  ### Videos

                                  Include videos that highlight the purpose and
                                  value of your solution. Select the video
                                  hosting platform (YouTube or Vimeo) and enter
                                  the video ID.


                                  #### Video Best Practices


                                  **YouTube**


                                  Turn off ads for any videos you've already
                                  uploaded. 


                                  1. Sign in to YouTube.


                                  2. In the top right, click your account icon >
                                  Creator Studio.


                                  3. On the left, select Video Manager.


                                  4. Select the video(s) where you want to turn
                                  ads off.


                                  5. Click Actions > More actions >
                                  Monetization.


                                  6. Select Off.


                                  7. Click Submit.


                                  **Vimeo**


                                  Per Vimeo’s guidelines, businesses may not use
                                  Basic or Plus accounts to host videos. If you
                                  want to upload commercial videos, you must use
                                  Vimeo PRO or Business. Commercial content
                                  includes:


                                  Videos promoting or representing a for-profit
                                  business or brand 

                                  Videos containing any form of advertising 

                                  Videos hosted on behalf of a business (i.e.,
                                  uploaded to Vimeo and embedded on your
                                  company’s website) 

                                  Product demos and tutorials


                                  *Note:* Ads appear to viewers based on their
                                  level of Vimeo membership - not yours. Basic
                                  and non-logged in viewers may see ad banners
                                  below the video player.


                                  ### Case Studies

                                  These can either be “Thought Leadership” case
                                  studies and/or traditional case studies that
                                  demonstrate how BigCommerce merchants have
                                  benefited from using your solution with their
                                  business. Use the + ​icon to add a case study,
                                  and the x ​icon to remove. Four case studies
                                  maximum.
                              - type: callout
                                data:
                                  type: warning
                                  body: >-
                                    Case studies that include competitor
                                    platforms are not allowed and will be
                                    removed. Partners will be required to
                                    repurpose general case studies, remove
                                    competitor platform mentions, and republish
                                    the asset accordingly.
                              - type: text
                                data: >-
                                  ### Features

                                  Use these fields to enumerate the major
                                  features your platform or solution has to
                                  offer. Include a brief title for each feature,
                                  and a description of the feature to accompany
                                  it. The feature title will be search indexed
                                  in the Marketplace, so be specific with your
                                  feature names and include major functions
                                  potential users will search for. Use the +
                                  icon to add a feature, and the x icon to
                                  remove. Utilize the rich text editing of these
                                  fields to bold, underline, or italicize copy
                                  as needed. 


                                  Up to five features can be added.
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6012/1536260434551
                              - type: text
                                data: >-
                                  ### Legal Terms & Privacy 

                                  Links to your privacy policy and terms of
                                  service. This requirement is in place due to
                                  legal liability and is non-optional. 


                                  ### International Optimization

                                  Please add the countries for which your
                                  solution is optimized and those which your
                                  solution does not currently support. 
                              - type: callout
                                data:
                                  type: info
                                  body: >-
                                    This feature will not currently be utilized
                                    in the Marketplace, but will be a part of
                                    planned internationalization updates.
                              - type: text
                                data: >-
                                  ### Help Guides

                                  Links to your User and Installation Guides as
                                  a reference for existing users and prospects.


                                  We now ask that you include links to your
                                  solution’s user installation guide (PDF,
                                  support articles, etc.) and standard user
                                  guide for prospective users to review before
                                  installation. If you do not submit links, this
                                  field will not be displayed on your listing
                                  detail page, however we highly recommend
                                  including these with your submission.
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6012/1536260486010
                              - type: text
                                data: >-
                                  ### App Screenshot

                                  Add screenshots of your solution’s
                                  functionality or user interface as it appears
                                  when integrated with BigCommerce so users know
                                  what to expect.


                                  ### Alternate Logo

                                  Your alternate logo will be used if your app
                                  is featured on the homepage carousel of the
                                  Marketplace. This image should be 259 x 158px
                                  (or larger at this ratio) with a dark
                                  background and white or light branding in the
                                  foreground. The logo should only include
                                  branding, no taglines necessary.
                          - title: Technical
                            blocks:
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6012/1536260547856
                                header:
                                  anchor: app-technical
                              - type: text
                                data: >-
                                  ### Multiple Users


                                  By default, your app will only be accessible
                                  to the store owner (i.e., the user who created
                                  the store). Optionally, you can allow your app
                                  to be accessible to other store users.
                                  Consider the following before enabling
                                  [multi-user
                                  support](/api-docs/getting-started/building-apps-bigcommerce/building-apps#multi-user-support):


                                  -   Once you enable multi-user support, a
                                  store admin will still need to grant access to
                                  other users from within the store control
                                  panel. For each user account, there are
                                  settings that grant access to specific apps.
                                      
                                  -   Your app should be aware that when it
                                  receives the [Load
                                  Callback](/api-docs/getting-started/building-apps-bigcommerce/building-apps#load-uninstall-removal-requests),
                                  the user information passed in might not be
                                  the store owner’s. You’ll need to determine
                                  how to respond if you see a different user.
                                  For example, you may want to provision a new
                                  user account in order to personalize the
                                  experience.
                                      
                                  -   You can optionally specify a [Remove User
                                  Callback
                                  URI](/api-docs/getting-started/building-apps-bigcommerce/building-apps#load-uninstall-removal-requests)
                                  to receive a callback when a store admin
                                  revokes a user’s access.
                                      
                                  ### App Type


                                  Select the type of app. We recommend [Single
                                  Click
                                  Apps](/api-docs/getting-started/building-apps-bigcommerce/types-of-apps#single-click-apps)
                                  although some qualify to [Connector
                                  Apps.](/api-docs/getting-started/building-apps-bigcommerce/types-of-apps#connector)


                                  ### Callback URLS


                                  You must have an [Auth Callback
                                  URI](/api-docs/getting-started/building-apps-bigcommerce/building-apps#installation-update-sequence)
                                  and a [Load Callback
                                  URI](/api-docs/getting-started/building-apps-bigcommerce/building-apps#installation-update-sequence)
                                  to register your app.


                                  #### Public URIs Required before Submission


                                  Because the Auth Callback URI and Load
                                  Callback URI requests originate from the
                                  browser and not from BigCommerce, you can use
                                  non–publicly-available URIs and a self-signed
                                  certificate for a quick start. However, you
                                  must switch to – and test your app with – a
                                  publicly available Auth Callback URI and Load
                                  Callback URI before submitting your app for
                                  consideration in the App Marketplace.


                                  If you want to receive a callback when the
                                  store owner uninstalls your app, you can
                                  provide an [Uninstall Callback
                                  URI](/api-docs/getting-started/building-apps-bigcommerce/building-apps#load-uninstall-removal-requests).
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6012/1536260600336
                              - type: text
                                data: >-
                                  ### OAuth Scopes

                                  If you know the [OAuth
                                  scopes](/api-docs/getting-started/about-api/authentication#oauth-scopes)
                                  that your app requires, you should select
                                  these. If you do not yet know the scopes that
                                  you need, you can just request minimal
                                  permissions (such as Information: Read-Only)
                                  to get started. However, once you determine
                                  the scopes you need, you must:

                                  - Modify the scopes of your app in My Apps and
                                  save the changes.

                                  - Obtain the new OAuth token during the [App
                                  Installation or Update
                                  flow](https://developer.bigcommerce.com/api/#app-installation-and-update-sequence).

                                  - Retest your app to make sure it still
                                  functions properly with the new token.
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6012/1536260650757
                              - type: text
                                data: >-
                                  Add in any instructions needed to test the app
                                  thoroughly. 
                          - title: Review
                            blocks:
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6012/1536260677950
                                header:
                                  anchor: app-review
                              - type: text
                                data: >-
                                  Review the information added before submitting
                                  the app. Look over this page carefully, once
                                  the app is submitted, if it is rejected there
                                  will be another fee for submission.
                          - title: Preview
                            blocks:
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6012/1536261272003
                                header:
                                  anchor: app-preview
                              - type: text
                                data: >-
                                  This is an approximation of what the app’s
                                  page will look like in the BigCommerce
                                  Marketplace.
                          - title: Payment & Submission
                            blocks:
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6012/1536261347648
                                header:
                                  anchor: app-payment
                              - type: text
                                data: >-
                                  At this point you make sure the information
                                  has been filled out completely and the app has
                                  been thoroughly tested before submitting for
                                  review. Updates to the App will not require
                                  the submission fee again. 
        - title: Catalog
          route:
            path: /catalog
          data:
            children:
              - title: Products
                route:
                  path: /products-overview
                data:
                  blocks:
                    - type: html
                      data: "<h1> Products Overview </h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3>On This Page</h3>\n\t<ul>\n    <li><a href=\"#products-overview_introduction\">Introduction</a></li>\n\t<li><a href=\"#products-overview_products\">Products</a></li>\n    <li><a href=\"#products-overview_pricing-precision\">Pricing Precision </a></li>\n    <li><a href=\"#products-overview_product-images\">Product Images</a></li>\n    <li><a href=\"#products-overview_product-videos\">Product Videos</a></li>\n    <li><a href=\"#products-overview_custom_fields\">Custom Fields</a></li>\n    <li><a href=\"#products-overview_bulk-pricing-rules\">Bulk Pricing Rules</a></li>\n     <li><a href=\"#products-overview_metafields\">Product Metafields</a></li>\n     <li><a href=\"#products-overview_reviews\">Product Reviews</a></li>\n     <li><a href=\"#products-overview_brands\">Brands</a></li>\n     <li><a href=\"#products-overview_variant-options\">Variant Options</a></li>\n     <li><a href=\"#products-overview_variants\">Variants</a></li>\n     <li><a href=\"#products-overview_modifier-options\">Modifier Options</a></li>\n    <li><a href=\"#products-overview_complex-rules\">Complex Rules</a></li>\n     <li><a href=\"#products-overview_categories\">Categories</a></li>\n    \n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Introduction


                        The Catalog refers to a store’s collection of physical
                        and digital products. The Catalog includes all the
                        information about a product such as MPN, warranty,
                        price, and images. 


                        ### Prerequisites

                        Scopes


                        The following
                        [OAuth](/api-docs/getting-started/authentication#authentication_oauth-scopes)
                        scopes are required:

                        * Modify Catalog
                      header:
                        anchor: products-overview_introduction
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Products


                        [Products](/api-reference/catalog/catalog-api/products/getproducts)
                        are the primary catalog entity, and the primary function
                        of the e-commerce platform is to sell products on the
                        storefront and other selling channels.


                        Products can either be Simple or Complex. 


                        Products can also be Physical or Digital. 


                        * Physical products are typically products that exist in
                        a physical form, have a weight, and are being sold by
                        retailers with the intent of shipping them to
                        customers. 


                        * Digital products, on the other hand, may not have a
                        physical representation in the real world; this includes
                        downloadable products such as computer software, ebooks,
                        music, images, and other digital media. Alternatively, a
                        digital product may be used to sell services such as spa
                        treatments, consulting, and so forth - which also do not
                        require shipping.
                      header:
                        anchor: products-overview_products
                    - type: callout
                      data:
                        title: Product Creation
                        body: Only one Product can be created at a time.
                    - type: text
                      data: >-
                        ### Create a Simple Product


                        Simple products do not have any options, modifiers, or
                        variants, and therefore cannot be configured or modified
                        before they are added to cart. A simple product is its
                        own variant. 
                      header: {}
                    - type: http
                      data:
                        headers:
                          Accepts: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{{CLIENT ID}}'
                          X-Auth-Token: '{{ACCESS TOKEN}}'
                        method: post
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products
                        body: |-
                          {
                            "name": "BigCommerce Coffee Mug",
                            "price": "10.00",
                            "categories": [
                              23,
                              21
                            ],
                            "weight": 4,
                            "type": "physical"
                          }
                      header:
                        title: Try It Now
                        subtitle: >-
                          Use this to create your own Simple Product. Replace
                          the test data with your own.
                    - type: callout
                      data:
                        body: >-
                          When options are created via the /products endpoint,
                          the display_type defaults to radio button.
                        title: Creating Options
                      header: {}
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ### Create a Complex Product


                        Complex products have at least one option and may have
                        modifiers or variants.


                        The [Create
                        Products](/api-reference/catalog/catalog-api/products/getproducts)
                        endpoint supports the creation of multiple variants
                        along with the base product in a single call.
                      header: {}
                    - type: http
                      data:
                        headers:
                          Accepts: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{{CLIENT ID}}'
                          X-Auth-Token: '{{ACCESS TOKEN}}'
                        method: post
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products
                        body: |-
                          {
                            "name": "BigCommerce Coffee Mug",
                            "price": "10.00",
                            "categories": [
                              23,
                              21
                            ],
                            "weight": 4,
                            "type": "physical",
                            "variants": [
                              {
                                "sku": "SKU-BLU",
                                "option_values": [
                                  {
                                    "option_display_name": "Mug Color",
                                    "label": "Blue"
                                  }
                                ]
                              },
                              {
                                "sku": "SKU-GRAY",
                                "option_values": [
                                  {
                                    "option_display_name": "Mug Color",
                                    "label": "Gray"
                                  }
                                ]
                              }
                            ]
                          }
                      header:
                        title: Try It Now
                        subtitle: >-
                          Use this to create your own test product. Replace the
                          test data with your own.
                    - type: text
                      data: >-
                        The [Create a
                        Product](/api-reference/catalog/catalog-api/products/createproduct)
                        endpoint supports the creation of multiple variants
                        along with the base product in a single call.


                        ### Digital Products


                        Digital products are purchaseable items that don't have
                        a physical representation and are not shipped to the
                        customer; for example, manuals, ebooks, or music. A
                        downloadable product file can be associated with a
                        digital product.


                        Downloadable product files are intended for products of
                        the “digital” type, typically for selling some kind of
                        media file or software. Product dimensions are not
                        required because the item is not shipped.


                        Files must be added to digital products using the
                        [Control Panel or
                        WebDav](https://support.bigcommerce.com/articles/Public/Creating-Downloadable-Products/#adding-downloadable-product)
                        (attaching via the API is not supported). Additional
                        settings such as a description of the file and maximum
                        downloads can be set in the Control Panel.
                    - type: http
                      data:
                        headers:
                          Accepts: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{{CLIENT ID}}'
                          X-Auth-Token: '{{ACCESS TOKEN}}'
                        method: post
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products
                        body: |-
                          {
                            "name": "ebook: A Guide to Coffee",
                            "price": "10.00",
                            "categories": [
                              23,
                              21
                            ],
                            "type": "digital",
                            "images": [
                              {
                                "is_thumbnail": true,
                                "image_url": "https://your-custom-image/image_name.png"
                              }
                            ]
                          }
                      header:
                        title: Try It Now
                        subtitle: >-
                          Use this to create your own Digital Product. Replace
                          the test data with your own.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Pricing Precision


                        Price can be input using up to 4 decimal places.


                        Depending on the price, it can round up or down. We
                        allow up to 4 decimal places and use the 5th decimal
                        place to either roundup or down. This holds true for all
                        pricing options available on a product.


                        Example:


                        * “price”: 10.99999 - rounds up to 11

                        * “price”: 10.99994 - rounds down to 10.9999


                        ### Display

                        Currency settings allows for inputting a large number of
                        decimal places for display. Since pricing precision cuts
                        off at 4, the rest are displayed as zero’s.
                      header:
                        anchor: products-overview_pricing-precision
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1553018091114
                      header:
                        title: Currency Decimal Places
                      config:
                        fluid: true
                        centered: true
                        maxWidth: '805'
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Product Images


                        [Product
                        images](/api-reference/catalog/catalog-api/product-images/getproductimages)
                        are used to show shoppers what they’re buying and
                        merchandise products. When creating an image,
                        `image_url` or an `image_file` can be passed in. 


                        If using `image_file` Content-Type needs to be set to 

                        Content-Type: multipart/form-data. Any other updates
                        using the /POST or /PUT will be rejected with the
                        form-data.
                      header:
                        anchor: products-overview_product-images
                    - type: http
                      data:
                        method: put
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/images
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                        body: |-
                          {
                            "is_thumbnail": true,
                            "sort_order": 1,
                            "description": "Yellow Large Bath Towel",
                            "image_url": "https://your-custom-image/image_name.png"
                          }
                      header:
                        title: Try it Now
                        subtitle: >-
                          Use this to add a Image to your Product. Replace the
                          test data with your own.
                    - type: text
                      data: >-
                        ### Product Thumbnails


                        Only one image can be the [product
                        thumbnail](/api-reference/catalog/catalog-api/models/productimage).
                        The product thumbnail is the image that shows on the
                        product listing page, in search results and any other
                        location that features the product. If only one image is
                        on the product it becomes both the thumbnail and the
                        main product image. Images can also be added to
                        [variants](/api-reference/catalog/catalog-api/product-variants/getvariantsbyproductid). 
                      header: {}
                    - type: code
                      data: |-
                        {
                          "data": {
                            "id": 382,
                            "product_id": 158,
                            "is_thumbnail": true,
                            "sort_order": 0,
                            "description": "",
                            "image_file": "a/521/foglinenbeigestripetowel1b_1024x1024__83011__60806.jpg",
                            "url_zoom": "https://cdn8.bigcommerce.com/s-{{store_hash}}/products/158/images/382/foglinenbeigestripetowel1b_1024x1024__83011__60806.1534344511.1280.1280.jpg?c=2",
                            "url_standard": "https://cdn8.bigcommerce.com/s-{{store_hash}}/products/158/images/382/foglinenbeigestripetowel1b_1024x1024__83011__60806.1534344511.560.850.jpg?c=2",
                            "url_thumbnail": "https://cdn8.bigcommerce.com/s-{{store_hash}}/products/158/images/382/foglinenbeigestripetowel1b_1024x1024__83011__60806.1534344511.330.500.jpg?c=2",
                            "url_tiny": "https://cdn8.bigcommerce.com/s-{{store_hash}}/products/158/images/382/foglinenbeigestripetowel1b_1024x1024__83011__60806.1534344511.66.100.jpg?c=2",
                            "date_modified": "2018-08-15T14:48:31+00:00"
                          },
                          "meta": {}
                        }
                      header:
                        title: Product Thumbnails
                        subtitle: >-
                          GET
                          https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/{{product_id}}/images/{{images_id}}
                      config:
                        mode: json
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Product Videos

                        [Product
                        Videos](/api-reference/catalog/catalog-api/product-videos/getproductvideos),
                        in addition to images, can help shoppers understand what
                        they’re buying and help sell the product. A product can
                        have more than one video.


                        * Product videos must be hosted on YouTube. The video_id
                        corresponds to the “v” parameter in a video url. 


                        Example: https://www.youtube.com/watch?v=***R12345677***
                      header:
                        anchor: products-overview_product-videos
                    - type: http
                      data:
                        method: put
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/videos
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                        body: |-
                          {
                            "title": "BigCommerce Mug Video",
                            "description": "Video Describing the Mug",
                            "sort_order": 1,
                            "type": "youtube",
                            "video_id": "123345AA"
                          }
                      header:
                        subtitle: >-
                          Use this to add a Video to your Product. Replace the
                          test data with your own.
                        title: Try it Now
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Custom Fields


                        [Custom
                        fields](/api-reference/catalog/catalog-api/product-custom-fields/getcustomfields)
                        are a feature intended for product specifications, in a
                        key: value arrangement. As an example, there might be
                        fields indicating technical specifications about an LED
                        TV  such as screen size, maximum resolution, HDR
                        support, etc. Alternatively, if selling wine, I might
                        use Custom Fields for specifications such as vintage,
                        region, grape, etc. Custom fields can not be used to add
                        rules such as changing the weight or price of a
                        product. 
                      header:
                        anchor: products-overview_custom_fields
                    - type: callout
                      data:
                        body: >-
                          There is a limit of 250 characters for custom field
                          values.
                    - type: text
                      data: >-
                        Custom Fields are intended to be used in a couple of
                        contexts:


                        * Displaying specifications on the product detail page
                        and on the product listing pages such as category and
                        brand pages.

                        * Powering faceted search (searching/filtering by custom
                        field values)
                    - type: http
                      data:
                        method: put
                        body: |-
                          {
                            "name": "Release Year",
                            "value": "2018"
                          }
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/custom-fields
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                      header:
                        subtitle: >-
                          Use this to add a Custom Field to your Product.
                          Replace the test data with your own.
                        title: Try It Now
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Bulk Pricing Rules


                        [Bulk Pricing
                        Rules](/api-reference/catalog/catalog-api/product-bulk-pricing-rules/getbulkpricingrules)
                        are intended for merchants who want to offer wholesale
                        discounts for buying in bulk. They apply once products
                        are added to cart, but they are displayed as a callout
                        on the storefront to let shoppers know how they can
                        save.


                        Bulk Pricing rules in the catalog are on the product,
                        meaning that they’ll trigger even if several different
                        variants of the product are in the cart, as long as the
                        total quantity of those variants meets one of the
                        quantity breaks. [Price List bulk
                        pricing](/api-reference/catalog/pricelists-api/price-lists-records/setpricelistrecordcollection)
                        works differently.
                      header:
                        anchor: products-overview_bulk-pricing-rules
                    - type: http
                      data:
                        method: put
                        body: |-
                          {
                            "bulk_pricing_rules": [
                              {
                                "quantity_min": 10,
                                "quantity_max": 15,
                                "type": "price",
                                "amount": 3
                              },
                              {
                                "quantity_min": 16,
                                "quantity_max": 25,
                                "type": "price",
                                "amount": 5
                              }
                            ]
                          }
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/bulk-pricing-rules
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                      header:
                        title: Try It Now
                        subtitle: >-
                          Use this to add Bulk Pricing Rules to your Product.
                          Replace the test data with your own.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Product Metafields


                        [Metafields](/api-reference/catalog/catalog-api/product-metafields/createproductmetafield)
                        allow a developer to set up key and namespace pairs to
                        store data against a resource, like a product. The data
                        does not appear in the storefront or the control panel.
                        This is useful for when information needs to be passed
                        back and forth between an app and the store. 


                        Metafields can be added to variants, products,
                        categories, and brands.
                      header:
                        anchor: products-overview_metafields
                    - type: http
                      data:
                        method: put
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/metafields
                        body: |-
                          {
                            "permission_set": "read",
                            "namespace": "Location",
                            "key": "bin_number",
                            "value": "#4456",
                            "description": "location of the product",
                            "resource_type": "product",
                            "resource_id": 131
                          }
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                      header:
                        subtitle: >-
                          Use this to add a Metafield to your Product. Replace
                          the test data with your own.
                        title: Try It Now
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Product Reviews

                        [Product reviews
                        ](/api-reference/catalog/catalog-api/product-reviews/getproductreviews)contains
                        ratings and feedback from shoppers who have purchased a
                        product. Reviews are displayed on product pages. 


                        Reviews cannot be created in the control panel, but they
                        can be created via API. Creating them via API is useful
                        if you are migrating to BigCommerce from another
                        platform and do not want to lose existing reviews. 


                        Product Reviews are a native platform feature, but they
                        can be turned off in favor of a custom setup.
                      header:
                        anchor: products-overview_reviews
                    - type: http
                      data:
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/reviews
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                        method: post
                        body: |-
                          {
                            "title": "Great Coffee Mug",
                            "text": "This coffee mug kept my liquids hot for several hours.",
                            "status": "pending",
                            "rating": 5,
                            "email": "testing@bigcommerce.com",
                            "name": "BigCommerce",
                            "date_reviewed": "2018-07-20T17:45:13+00:00"
                          }
                      header:
                        subtitle: >-
                          Use this to create a Product Review. Replace the test
                          data with your own.
                        title: Try It Now
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Brands


                        [Brands](/api-reference/catalog/catalog-api/brands/getbrands)
                        are another form of catalog taxonomy, similar to
                        Categories. However, there are a few differences:


                        * Exist as a single “list” on the store, with no tree
                        structure

                        * Can only have a single assignment to a product; a
                        product may have at most one brand, but a brand can have
                        many products.
                         
                        They’re primarily used to tag products so that consumers
                        can find Brands they’re interested in (such as Nike
                        shoes). Brands have their own page on the storefront
                        which shows all the products in that Brand. They’re also
                        used as part of faceted search navigation.
                      header:
                        anchor: products-overview_brands
                    - type: http
                      data:
                        method: post
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/brands
                        body: |-
                          {
                            "name": "BigCommerce",
                            "page_title": "BigCommerce",
                            "meta_keywords": [
                              "ecommerce",
                              "best in class",
                              "grow your business"
                            ],
                            "image_url": "https://your-custom-image.png"
                          }
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                      header:
                        subtitle: >-
                          Use this to create your own Brand. Replace the test
                          data with your own.
                        title: Try It Now
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Variant Options


                        [Variant
                        options](/api-reference/catalog/catalog-api/product-variant-options/getoptions)
                        are any choices that the shopper needs to make that will
                        result in the selection of a variant. Color and Size are
                        typical examples of Variant Options.  A t-shirt can have
                        different combinations of sizes and colors.  


                        Example:

                        * Color is a Variant Option; Red, Orange, and Green are
                        Variant Option Values

                        * Size is a Variant Option; Small, Medium, and Large are
                        Variant Option Values


                        The combination of Small & Red is what is selected on
                        the storefront and correlates to a product variation,
                        also called a SKU. 
                         
                        **Variant options:**


                        * Require the shopper to select a value

                        * Only support “multiple choice” option types

                        * Rectangle

                        * Radio button

                        * Color swatch

                        * Product pick list

                        * Product pick list with images

                        * Will automatically generate variants when created in
                        the CP

                        * Are auto-generated from variants when a product is
                        created with variants via V3 API Product /POST



                        ### Variant Options Example:


                        | If the product is | Variant Option |

                        | -- | -- |

                        | T-Shirt | Blue</br>----------</br> Small<br>
                        Medium</br> Large|

                        | Backpack | Black</br>Yellow<br>----------<br>2L <br>
                        3L<br> 8L |



                        ### Options created on V2 and V3


                        * Variant options created on V3 cannot be accessed from
                        the Control Panel. They can only be accessed via the
                        API.

                        * If a product has options that were created using the
                        V2 API, additional options cannot be added using the V3
                        API.

                        * SKUs in V2 map to variants in V3.

                        * Base variants are not SKUs in V2.
                      header:
                        anchor: products-overview_variant-options
                    - type: callout
                      data:
                        body: >-
                          Creating a variant option does not automatically
                          create SKUs or build out variants. SKUs can be built
                          out later using the [variants
                          endpoint](/api-reference/catalog/catalog-api/product-variants/createvariant).
                    - type: text
                      data: >-
                        ### Create Variant Options

                        The following request will create options that will show
                        on the storefront as choices that can be selected by the
                        customer. In a separate request, you could build out
                        SKUs based on these variant

                        option values or a combination of variant option

                        values. A request like this could also be used to

                        add new choices to a variant that has already been
                        created.
                    - type: code
                      data: |-
                        {
                          "product_id": 134,
                          "name": "Size Rectangle",
                          "display_name": "Size",
                          "type": "rectangles",
                          "option_values": [
                            {
                              "label": "S",
                              "sort_order": 0,
                              "is_default": false
                            },
                            {
                              "label": "M",
                              "sort_order": 1,
                              "is_default": true
                            },
                            {
                              "label": "L",
                              "sort_order": 2,
                              "is_default": false
                            }
                          ]
                        }
                      header:
                        subtitle: >-
                          /POST
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/options
                        title: Create Size Variant Option
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Variant

                        [Variants](/api-reference/catalog/catalog-api/product-variants/getvariantsbyproductid)
                        represent an item as it sits on the shelf in the
                        warehouse or a particular saleable product. A product
                        might be a t-shirt, while the variant would be “a small,
                        red t-shirt”. Variants are selected by shoppers on the
                        storefront via Product Options. In the case where a
                        product is simple, meaning it does not have any options,
                        the product is its own variant - called a base variant.
                        Everything you can buy should be a variant.


                        * Options build out variants. 

                        * Variants are usually what inventory is tracked
                        against 

                        * Can have their own price, weight, dimensions, image,
                        etc - or they can inherit these values from the product
                        if they have not been specified

                        * Must have a SKU code (unless they’re a base variant)

                        * In the case of non-base variants, variants will relate
                        to a particular combination of variant option values -
                        such as “small” and “red”


                        ### Variants:


                        | If the product is | Variant Option | Variant |

                        | -- | -- | -- |

                        | T-Shirt | Blue</br>----------</br> Small<br>
                        Medium</br> Large| SM-BLU<br> SM-MED <br> SM-LARG

                        | Backpack | Black</br>Yellow<br>----------<br>2L <br>
                        3L<br> 8L |BLACK-2L<br>BLACK-3L<br>BLACK
                        8L</br>----------<br>YELLOW-2L<br>YELLOW-3L<br>YELLOW-8L|



                        ## Create a Variant

                        Variants can be created in two ways:

                        * From existing variant options using the variant
                        options endpoint.
                        [v3/catalog/products/{product_id}/options](/api-reference/catalog/catalog-api/product-variants/createvariant)

                        * By adding the variants with variant options and skus
                        when creating the product. See [Create a Complex
                        Product](/api-reference/catalog/catalog-api/products/createproduct).


                        This will go over using existing variant options to
                        create the variants.


                        Use the
                        `https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/131/options`
                        endpoint to get the option information.
                      header:
                        anchor: products-overview_variants
                    - type: code
                      data: |-
                        {
                          "data": [
                            {
                              "id": 193,
                              "product_id": 134,
                              "name": "Size1533313432-134",
                              "display_name": "Size",
                              "type": "rectangles",
                              "sort_order": 0,
                              "option_values": [
                                {
                                  "id": 163,
                                  "label": "S",
                                  "sort_order": 0,
                                  "value_data": null,
                                  "is_default": false
                                },
                                {
                                  "id": 164,
                                  "label": "M",
                                  "sort_order": 1,
                                  "value_data": null,
                                  "is_default": true
                                },
                                {
                                  "id": 165,
                                  "label": "L",
                                  "sort_order": 2,
                                  "value_data": null,
                                  "is_default": false
                                }
                              ],
                              "config": []
                            },
                            {
                              "id": 194,
                              "product_id": 134,
                              "name": "Color1533313946-134",
                              "display_name": "Color",
                              "type": "swatch",
                              "sort_order": 1,
                              "option_values": [
                                {
                                  "id": 166,
                                  "label": "Blue",
                                  "sort_order": 1,
                                  "value_data": {
                                    "colors": [
                                      "#123C91"
                                    ]
                                  },
                                  "is_default": false
                                },
                                {
                                  "id": 167,
                                  "label": "Green",
                                  "sort_order": 2,
                                  "value_data": {
                                    "colors": [
                                      "#0F961E"
                                    ]
                                  },
                                  "is_default": false
                                },
                                {
                                  "id": 168,
                                  "label": "Red",
                                  "sort_order": 3,
                                  "value_data": {
                                    "colors": [
                                      "#E60C0C"
                                    ]
                                  },
                                  "is_default": false
                                }
                              ],
                              "config": []
                            }
                          ],
                          "meta": {
                            "pagination": {
                              "total": 2,
                              "count": 2,
                              "per_page": 50,
                              "current_page": 1,
                              "total_pages": 1,
                              "links": {
                                "current": "?page=1&limit=50"
                              }
                            }
                          }
                        }
                      header:
                        subtitle: >-
                          /GET
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/options
                        title: Example Response
                      config:
                        mode: json
                        highlightRange:
                          - from: '4'
                            to: '12'
                    - type: http
                      data:
                        method: get
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/options
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                      header:
                        subtitle: Get Variant Options
                        title: Try It Now
                    - type: text
                      data: >-
                        In the above response, there are two variant options of
                        size and color with three values each. 


                        To combine the variant option values into variants and
                        build out SKUs use the following endpoint:


                        `https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/131/variants`
                    - type: callout
                      data:
                        body: >-
                          Variants need to be created one at a time using this
                          endpoint. Only one variant option at a time can be
                          created; individual variant options will contain an
                          array of multiple values. To use a variant array and
                          create variants in the same call as the base product,
                          use the
                          [/catalog/product](/api-reference/catalog/catalog-api/products/createproduct)
                          endpoint during product creation.
                    - type: http
                      data:
                        method: put
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/variants
                        body: |-
                          {
                            "cost_price": 3,
                            "price": 12.99,
                            "retail_price": 15.99,
                            "weight": 1,
                            "width": 4,
                            "height": 14.6,
                            "depth": 22,
                            "is_free_shipping": true,
                            "purchasing_disabled": true,
                            "purchasing_disabled_message": "This item not available at this time.",
                            "product_id": 134,
                            "sku": "SMALL-BLUE",
                            "option_values": [
                              {
                                "id": 163,
                                "option_id": 193
                              },
                              {
                                "id": 166,
                                "option_id": 194
                              }
                            ]
                          }
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                      header:
                        subtitle: >-
                          Use this to add Variants to your Product . Replace the
                          test data with your own.
                        title: Try It Now
                    - type: text
                      data: "The `option_values` array combines the options Small and Blue to create the SKU SMALL-BLUE. The id in the option_values array is the id from the variant option response option_values > id. The option_id is the id of the option. \n\n```\n {\n            \"id\": 193, //option_id\n            \"product_id\": 134,\n            \"name\": \"Size1533313432-134\",\n            \"display_name\": \"Size\",\n            \"type\": \"rectangles\",\n            \"sort_order\": 0,\n            \"option_values\": [\n                {\n                    \"id\": 163, //id\n                    \"label\": \"S\",\n                    \"sort_order\": 0,\n                    \"value_data\": null,\n                    \"is_default\": false\n                }\n\t\t\t\t\t\t\t\t...\n```\n\n<br>\n\n### Create a Variant Using the Products Endpoint\n\nThe following example creates a base product, variant options, and variants in a single call to the /products endpoint. You can use this method to create a product and its variants in a single call without creating variant options first, but the option display type will default to radio button."
                    - type: callout
                      data:
                        body: >-
                          Swatch, Radio Buttons, Rectangle, dropdown, Product
                          List and Product List with Images. 
                        title: Supported Types
                    - type: http
                      data:
                        method: post
                        body: |-
                          {
                            "name": "BigCommerce Coffee Mug",
                            "price": "10.00",
                            "categories": [
                              23,
                              21
                            ],
                            "weight": 4,
                            "type": "physical",
                            "variants": [
                              {
                                "sku": "SKU-BLU",
                                "option_values": [
                                  {
                                    "option_display_name": "Mug Color",
                                    "label": "Blue"
                                  }
                                ]
                              },
                              {
                                "sku": "SKU-GRAY",
                                "option_values": [
                                  {
                                    "option_display_name": "Mug Color",
                                    "label": "Gray"
                                  }
                                ]
                              }
                            ]
                          }
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                      header:
                        subtitle: >-
                          Use this to create your own Product using the products
                          endpoint . Replace the test data with your own.
                        title: Try It Now
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Modifier Options


                        [Modifier
                        options](/api-reference/catalog/catalog-api/product-modifiers/getmodifiers)
                        are any choices that the shopper can make that will
                        change the way the merchant fulfills the product.
                        Examples include:

                        * A checkbox to add shipping insurance

                        * Text to be engraved on the product

                        * A color that an unfinished product is to be painted
                        before it’s shipped
                         
                        Critically, the modifier will not change the SKU/variant
                        being fulfilled, and you cannot track inventory against
                        combinations of modifier values. Modifiers typically
                        would not change which product is “picked off the shelf”
                        in the warehouse, but they change what happens to that
                        product before it’s sent to the shopper, or how it’s
                        sent.
                         
                        Modifier options:

                        * May be required or non-required

                        * Support all option types

                        * Cannot be used as part of a variant



                        An adjuster can be added to a modifier option to change
                        things such as increasing the price, changing the
                        weight, or shipping rules.  Adjusters cannot be applied
                        to all modifier types.


                        ### Modifier Options Example:


                        | If the product is | Variant Option | Variant |Modifier
                        |

                        | -- | -- | -- | -- |

                        | T-Shirt | Blue</br>----------</br> Small<br>
                        Medium</br> Large| SM-BLU<br> SM-MED <br> SM-LARG|
                        Checkbox<br>Donate to Charity|

                        | Backpack | Black</br>Yellow<br>----------<br>2L <br>
                        3L<br> 8L |BLACK-2L<br>BLACK-3L<br>BLACK
                        8L</br>----------<br>YELLOW-2L<br>YELLOW-3L<br>YELLOW-8L|
                        Text Field<br> Add Embroidery|
                      header:
                        anchor: products-overview_modifier-options
                    - type: callout
                      data:
                        body: >-
                          Swatch, radio buttons, rectangle list, drop-down,
                          product list, product list with images
                        title: Modifiers that support Adjusters
                    - type: text
                      data: >-
                        ### Add a modifier with price adjuster to an existing
                        product


                        The following example shows how to add a modifier, a
                        checkbox with a price adjuster, that will increase the
                        product's price by five dollars. 


                        Creating a checkbox with an adjuster requires two
                        separate calls: one to create the checkbox and a second
                        to add the adjuster. Adjusters are defined within the
                        `option_values` array, but `option_values` are not
                        allowed in the request to create a checkbox modifier
                        because creating a checkbox automatically generates two
                        mandatory option values: a Yes and a No. Once the
                        checkbox has been created along with its option values,
                        you can update the modifier to add an adjuster. 
                    - type: callout
                      data:
                        body: >-
                          swatch, radio buttons, drop-down, rectangle list,
                          product list, product list with images, and checkbox.
                        title: >-
                          Modifiers that require a second step to add an
                          adjuster
                    - type: text
                      data: 'First, a POST to create the modifier. '
                    - type: http
                      data:
                        method: put
                        body: |-
                          {
                            "type": "checkbox",
                            "required": false,
                            "config": {
                              "default_value": "Yes",
                              "checked_by_default": false,
                              "checkbox_label": "Check for Donation"
                            },
                            "display_name": "Add a $5 Donation"
                          }
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/modifiers
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                      header:
                        subtitle: >-
                          Use this to add a Modifier to your Product. Replace
                          the test data with your own.
                        title: Try It Now
                    - type: text
                      data: >-
                        Since this is a checkbox which has two states,
                        checked/unchecked or yes/no, two option values are
                        created. The default adjuster values are null. 
                    - type: code
                      data: |-
                        {
                          "data": [
                            {
                              "id": 160,
                              "product_id": 131,
                              "name": "Add-a-$5-Donation1535039590-191",
                              "display_name": "Add a $5 Donation",
                              "type": "checkbox",
                              "required": false,
                              "config": {
                                "checkbox_label": "Check for Donation",
                                "checked_by_default": false
                              },
                              "option_values": [
                                {
                                  "id": 149,
                                  "option_id": 160,
                                  "label": "Yes",
                                  "sort_order": 0,
                                  "value_data": {
                                    "checked_value": true
                                  },
                                  "is_default": false,
                                  "adjusters": {
                                    "price": {
                                      "adjuster": null,
                                      "adjuster_value": null
                                    },
                                    "weight": null,
                                    "image_url": "",
                                    "purchasing_disabled": {
                                      "status": false,
                                      "message": ""
                                    }
                                  }
                                },
                                {
                                  "id": 150,
                                  "option_id": 160,
                                  "label": "No",
                                  "sort_order": 1,
                                  "value_data": {
                                    "checked_value": false
                                  },
                                  "is_default": true,
                                  "adjusters": {
                                    "price": null,
                                    "weight": null,
                                    "image_url": "",
                                    "purchasing_disabled": {
                                      "status": false,
                                      "message": ""
                                    }
                                  }
                                }
                              ]
                            }
                          ],
                          "meta": {
                            "pagination": {
                              "total": 1,
                              "count": 1,
                              "per_page": 50,
                              "current_page": 1,
                              "total_pages": 1,
                              "links": {
                                "current": "?page=1&limit=50"
                              }
                            }
                          }
                        }
                      header:
                        subtitle: Create Modifier Option
                        title: Response
                    - type: text
                      data: >-
                        Next send a PUT request to update the modifier value.
                        This increases the price by $5 when the Yes option value
                        is selected.
                    - type: http
                      data:
                        method: put
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/modifiers/{modifier_id}/values
                        body: |-
                          {
                            "is_default": false,
                            "adjusters": {
                              "price": {
                                "adjuster": "relative",
                                "adjuster_value": 5
                              }
                            }
                          }
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                      header:
                        subtitle: >-
                          Use this to add Modifier Values to your Product.
                          Replace the test data with your own.
                        title: Try It Now
                    - type: text
                      data: >-
                        ### Troubleshooting: 422 Error


                        ```

                        {
                            "status": 422,
                            "title": "The product is currently associated with an option set, please remove it before editing an option or modifier.",
                            "type": "https://developer.bigcommerce.com/api#api-status-codes",
                            "errors": {
                                "product_id": "The product is currently associated with an option set, please remove it before editing an option or modifier."
                            }
                        }

                        ```


                        To fix this error:

                        * Modify the products using the V2 API

                        * Remove the option set using the V2 API or the Control
                        Panel, then remake the variants and modifiers using V3
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Complex Rules


                        [Complex
                        rules](/api-reference/catalog/catalog-api/product-complex-rules/getcomplexrules)
                        allow merchants to set up conditions and actions based
                        on shopper option selections on the storefront. You can
                        use them to vary the following based on option
                        selections made by the shopper:

                        * Price

                        * Weight

                        * Image

                        * Purchasability


                        Adjustments made by complex rules are displayed to
                        shoppers in real-time on the storefront.


                        For the majority of merchant use cases, **best
                        practice** will be to either assign values (such as a
                        price) directly to a variant or use adjusters on the
                        modifier option itself. However complex rules exist for
                        rare cases where a rule condition is too complex to
                        express in those forms easily. 


                        Use complex rules when an adjustment should be triggered
                        by:

                        * The selection of values across multiple modifier
                        options

                        * The combination of a particular variant/SKU and a
                        modifier option value.


                        ### Complex Rules Example:


                        | If the product is | Variant Option | Variant |Modifier
                        | Complex Rule |

                        | -- | -- | -- | -- | -- |

                        | T-Shirt | Blue</br>----------</br> Small<br>
                        Medium</br> Large| SM-BLU<br> SM-MED <br> SM-LARG|
                        Checkbox<br>Donate to Charity| Checkox<br> Donate to
                        Charity.<br> Add $5

                        | Backpack | Black</br>Yellow<br>----------<br>2L <br>
                        3L<br> 8L |BLACK-2L<br>BLACK-3L<br>BLACK
                        8L</br>----------<br>YELLOW-2L<br>YELLOW-3L<br>YELLOW-8L|
                        Text Field<br> Add Embroidery| N/A


                        <br>


                        ### Creating Complex Rules Based On Modifiers


                        Complex rules must be based on a combination of two or
                        more modifiers, such as two checkboxes. The following
                        example will add $10 to the product price when both
                        boxes are checked. 
                      header:
                        anchor: products-overview_complex-rules
                    - type: http
                      data:
                        method: put
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/complex-rules
                        body: |-
                          {
                            "product_id": 1200,
                            "enabled": true,
                            "price_adjuster": {
                              "adjuster_value": 10
                            },
                            "conditions": [
                              {
                                "modifier_id": 506,
                                "modifier_value_id": 852
                              },
                              {
                                "modifier_id": 507,
                                "modifier_value_id": 854
                              }
                            ]
                          }
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                      header:
                        subtitle: >-
                          Use this to add a Complex Rules to a Modifier. Replace
                          the test data with your own.
                        title: Try It Now
                    - type: text
                      data: >-
                        ### Troubleshooting


                        Complex rules must consist of multiple conditions that
                        trigger the rule adjustment. If multiple conditions are
                        not specified, the request will return a 422
                        Unprocessable Entity.


                        ```

                        {
                            "status": 422,
                            "title": "The rule must contain multiple modifier conditions with unique modifier ids or a variant condition and modifier condition",
                            "type": "https://developer.bigcommerce.com/api#api-status-codes"
                        }

                        ```
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Categories


                        [Categories](/api-reference/catalog/catalog-api/category/getcategories)
                        are a hierarchy of products available on the store,
                        presented in a tree structure. A store’s category
                        structure determines the primary menu structure of most
                        storefront themes, which are directly tied to it.


                        All products must be associated with at least one
                        Category, although a Category does not need to contain
                        any products. Unlike some e-commerce platforms, products
                        on BigCommerce can be associated with more than one
                        Category. 


                        A product associated with categories does not currently
                        have any priority or weighted order (there’s no “primary
                        category”), which can make it difficult to integrate
                        with some external systems which might wish to use a
                        product’s categories to map to a category structure in
                        that external system.
                      header:
                        anchor: products-overview_categories
                    - type: http
                      data:
                        method: post
                        body: |-
                          {
                            "parent_id": 18,
                            "name": "Shoes",
                            "description": "Shoes Available for purchase",
                            "sort_order": 1,
                            "page_title": "Shoes",
                            "is_visible": true
                          }
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/categories
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                      header:
                        subtitle: >-
                          Create a Category. Replace the test data with your
                          own.
                        title: Try It Now
                    - type: text
                      data: >-
                        ### Category Tree


                        [Category
                        Tree](/api-reference/catalog/catalog-api/catalog/getcatalogsummary)
                        returns a simple view of the parent > child relationship
                        of all categories in the store. This endpoint can be
                        used to fetch the categories if building out a custom
                        navigation for a store.
                    - type: code
                      data: |-
                        {
                          "data": [
                            {
                              "id": 33,
                              "parent_id": 0,
                              "name": "Clothing",
                              "is_visible": true,
                              "url": "/clothing/",
                              "children": []
                            },
                            {
                              "id": 23,
                              "parent_id": 0,
                              "name": "Shop All",
                              "is_visible": true,
                              "url": "/shop-all/",
                              "children": []
                            },
                            {
                              "id": 25,
                              "parent_id": 0,
                              "name": "Towels",
                              "is_visible": true,
                              "url": "/towels/",
                              "children": [
                                {
                                  "id": 26,
                                  "parent_id": 25,
                                  "name": "Bath Towels",
                                  "is_visible": true,
                                  "url": "/towels/bath-towels/",
                                  "children": [
                                    {
                                      "id": 30,
                                      "parent_id": 26,
                                      "name": "Bath Towels",
                                      "is_visible": true,
                                      "url": "/towels/bath-towels/bath-towels/",
                                      "children": []
                                    },
                                    {
                                      "id": 29,
                                      "parent_id": 26,
                                      "name": "Hand Towels",
                                      "is_visible": true,
                                      "url": "/towels/bath-towels/hand-towels/",
                                      "children": [
                                        {
                                          "id": 31,
                                          "parent_id": 29,
                                          "name": "Washcloths",
                                          "is_visible": true,
                                          "url": "/towels/bath-towels/hand-towels/wash-cloths/",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "id": 28,
                                  "parent_id": 25,
                                  "name": "Beach Towels",
                                  "is_visible": true,
                                  "url": "/towels/beach-towels/",
                                  "children": []
                                },
                                {
                                  "id": 27,
                                  "parent_id": 25,
                                  "name": "Kitchen Towels",
                                  "is_visible": true,
                                  "url": "/towels/kitchen-towels/",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "id": 18,
                              "parent_id": 0,
                              "name": "Bath",
                              "is_visible": true,
                              "url": "/bath/",
                              "children": [
                                {
                                  "id": 34,
                                  "parent_id": 18,
                                  "name": "Shoes",
                                  "is_visible": true,
                                  "url": null,
                                  "children": []
                                }
                              ]
                            },
                            {
                              "id": 32,
                              "parent_id": 0,
                              "name": "Hoodies",
                              "is_visible": true,
                              "url": "/hoodies/",
                              "children": []
                            },
                            {
                              "id": 19,
                              "parent_id": 0,
                              "name": "Garden",
                              "is_visible": true,
                              "url": "/garden/",
                              "children": []
                            },
                            {
                              "id": 21,
                              "parent_id": 0,
                              "name": "Kitchen",
                              "is_visible": true,
                              "url": "/kitchen/",
                              "children": []
                            },
                            {
                              "id": 20,
                              "parent_id": 0,
                              "name": "Publications",
                              "is_visible": true,
                              "url": "/publications/",
                              "children": []
                            },
                            {
                              "id": 22,
                              "parent_id": 0,
                              "name": "Utility",
                              "is_visible": true,
                              "url": "/utility/",
                              "children": []
                            }
                          ],
                          "meta": {}
                        }
                      header:
                        title: Category Tree Response Example
                      config:
                        mode: json
                    - type: http
                      data:
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/summary
                        method: get
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                      header:
                        subtitle: Get your store's Category Tree
                        title: 'Try It Now '
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Resources


                        ### Webhooks

                        *
                        [Products](/api-docs/getting-started/webhooks/webhook-events#webhook-events_products)

                        *
                        [Categories](/api-docs/getting-started/webhooks/webhook-events#webhook-events_category)

                        *
                        [SKU](/api-docs/getting-started/webhooks/webhook-events#webhook-events_sku)


                        ### Related Endpoints

                        * [Catalog API](/api-reference/catalog/catalog-api)
              - title: Pricing Order
                config:
                  sidebar:
                    token: reference
                route:
                  path: /pricing-order-operation
                data:
                  blocks:
                    - type: html
                      data: <h1>Price Order of Operations</h1>
                    - type: text
                      data: "The table below lists out each price type available on a product. The table is read from top to bottom with the default price having the lowest weight and the tax having the highest weight when calculating price.\_\_"
                    - type: text
                      data: >-

                        | Price Type | Description | Notes |

                        |--|--| --|

                        | Default Product Price | Required on product  |  |

                        | Product Sale Price | Optional on product. | Overrides
                        default price.|

                        | Variant Price | Optional on product. | Overrides
                        product sale price |

                        | Variant Sale Price | Optional on product.| Overrides
                        variant price. |

                        | Customer Group Discount | Available in Fixed ($5),
                        Relative (-$2), or Percentage (-25%). Might apply to one
                        product, category, subcategory or the entire store's
                        products. | Overrides variant sale price. |

                        | Product Bulk Pricing | Available in Fixed ($5),
                        Relative (-$2), or Percentage (-25%). Dependent on total
                        quantity of the product including SKUs added to cart. |
                        Overrides customer group discount. |

                        | | <p style="text-align:center;font-weight:bold;">Price
                        Lists override all previous pricing</p> | |

                        | Price List Variants | Required for a price list
                        record.  | Overrides all previous pricing and excludes
                        SKUs from the total number of items for product bulk
                        pricing. |

                        | Price List Variant Sale Price | Optional on product.
                        Overrides if variant pricing is set and selected. |
                        Overrides price list pricing. |

                        | Price List Variant Bulk Pricing | Available in Fixed
                        ($5), Relative (-$2), or Percentage (-25%). Dependent on
                        quantity added to cart. | Overrides price list sale
                        price on variants |

                        | Price List Variant with Product Pick List | The
                        Product Pick List is configured to change the price when
                        a Pick List Item is selected. | Overrides price list
                        bulk pricing | 

                        | Product with Modifier | Optional on product. A
                        modifier includes choices such as add $5 for insurance.
                        Can be fixed ($5) or percentage (%10) to add or remove
                        from total product price | Overrides price list with a
                        product pick list |

                        | Product with a Product Pick List | If the product pick
                        list is configured to change the price, it will update
                        the price when the option is selected. | Overrides
                        product with modifier |

                        | | <p
                        style="text-align:center;font-weight:bold;">Cart</p>||

                        | Cart Level Discounts | Cart Level Discounts apply
                        automatically when the shopper meets certain conditions
                        or takes certain actions. | Modifies the final product
                        or cart price depending on the discount type. |

                        | Coupons | Coupons require customer action to take
                        effect. | Modifies the final product or cart price
                        depending on the coupon type. |

                        | Tax | Products can be assigned to a different tax
                        class, which will change the final amount the shopper
                        pays. | Tax is the last to calculate after shipping and
                        promotions are applied. |
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Resources


                        ### Webhooks

                        *
                        [Products](/api-docs/getting-started/webhooks/webhook-events#webhook-events_products)

                        *
                        [Cart](/api-docs/getting-started/webhooks/webhook-events#webhook-events_cart)


                        ### Related Endpoints

                        * [Storefront Cart
                        API](/api-reference/cart-checkout/storefront-cart-api) 

                        * [Server to Server Cart
                        API](/api-reference/cart-checkout/server-server-cart-api)

                        * [Price Lists
                        API](/api-reference/catalog/pricelists-api)

                        * [Catalog API](/api-reference/catalog/catalog-api)


                        ### Related Articles

                        * [Price Lists](/api-docs/catalog/price-list-overview)

                        * [Products
                        Overview](/api-docs/catalog/products-overview)
              - title: Price Lists
                route:
                  path: /price-list-overview
                data:
                  blocks:
                    - type: html
                      data: "<h1>Price List API</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#pricelist_what-is-a-pricelist\">What is a Price List?</a></li>\n        <li><a href=\"#pricelist_definitions\">Definitions</a></li>\n        <li><a href=\"#pricelist_notes\">Notes</a></li>\n        <li><a href=\"#pricelist_oauth-scopes\">OAuth Scopes</a></li>\n        <li><a href=\"#pricelist_available-webhooks\">Webhooks Available</a></li>\n    \t\t<li><a href=\"#pricelist_related-endpoints\">Related Endpoints</a></li>\n        <li><a href=\"#pricelist_object-properties\">Object Properties</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## What is a Price List?  


                        A Price List allows you to populate different versions
                        of catalog pricing and assign them to different
                        [Customer
                        Groups](/api-reference/customer-subscribers/customers-api).
                        The prices are specified exclusively at the variant
                        level. 


                        If an active Price List does not contain prices for a
                        variant then the Catalog pricing will be used. The
                        association of a Price List to a Customer Group can be
                        done either via the Control Panel or using the [Customer
                        Groups
                        API.](/api-reference/customer-subscribers/customers-api)


                        Price Lists will provide overridden price values to the
                        Stencil storefront. Final price display can be further
                        customized within the Stencil template. See the [Price
                        Object](https://stencil.bigcommerce.com/docs/price-object-properties)
                        in Stencil for further documentation.
                      header:
                        anchor: pricelist_what-is-a-pricelist
                    - type: text
                      data: '---'
                      header: {}
                    - type: text
                      data: "## Definitions\n\n- `Price List` : A collection of price records. `Price Records` make up a price list.\n \n- `Price Record`: A price override for a particular variant - minimally, this is a variant ID, price, and currency.\n        \n```\n\t{\n\t\t\"variant_id\": 3121,\n\t\t\"price\": 10.0,\n\t\t\"sale_price\": 8.0,\n\t\t\"retail_price\": 12.0,\n\t\t\"map_price\": 6.0,\n\t\t\"currency\": \"EUR\"\n\t}\n```\n\n        \n- `PriceRecordBatch`: A way to update several `Price Records` in a `Price List` at once. Using this bulk upsert endpoint, you can upsert up to 1000 Price Records in a single API call.\n\n- `Currency`:  A `Price List` can contain records for multiple currencies. At this time, *only price records that match the store's default currency will be used to determine storefront and in-cart prices.* Although BigCommerce supports a storefront currency selection, this is not currently integrated with Price Lists and will merely convert prices from the store's default currency for display convenience."
                      header:
                        anchor: pricelist_definitions
                    - type: code
                      data: |-
                        [{
                          "variant_id": 3121,
                          "price": 10.0,
                          "sale_price": 8.0,
                          "retail_price": 12.0,
                          "map_price": 6.0,
                          "currency": "USD"
                        }, {
                          "variant_id": 3255,
                          "price": 11.0,
                          "sale_price": 9.0,
                          "retail_price": 13.0,
                          "map_price": 7.0,
                          "currency": "USD"
                        }, {
                          "variant_id": 3256,
                          "price": 12.0,
                          "sale_price": 10.0,
                          "retail_price": 14.0,
                          "map_price": 8.0,
                          "currency": "USD"
                        }, {
                          "variant_id": 3257,
                          "price": 13.0,
                          "sale_price": 11.0,
                          "retail_price": 15.0,
                          "map_price": 9.0,
                          "currency": "USD"
                        }, {
                          "variant_id": 3258,
                          "price": 14.0,
                          "sale_price": 12.0,
                          "retail_price": 16.0,
                          "map_price": 10.0,
                          "currency": "USD"
                        }] 
                      header:
                        title: Example Price List
                      config:
                        mode: json
                    - type: code
                      data: |-
                        [

                            {
                                "id": 1,
                                "name": "Price List Test",
                                "is_default": false,
                                "category_access": {
                                    "type": "all"
                                },
                                "discount_rules": [
                                    {
                                        "type": "price_list",
                                        "price_list_id": 1
                                    }
                                ]
                            }
                        ]
                      header:
                        title: Example Price List assigned to a customer group
                    - type: text
                      data: >-
                        Under `discount_rules` the `type` is set to `price_list`
                        and the `price_list_id` is 1. Which is the id of the
                        price list the group has been assigned to.
                    - type: text
                      data: >-
                        ## Notes


                        - Bulk Pricing Tiers may additionally be associated with
                        a Price Record to indicate different pricing as the
                        quantity in cart increases.
                          
                        - If a variant has a `Price Record` any existing
                        product-level bulk pricing will not apply in the cart. 
                        For variants without `Price Records`, any existing
                        product bulk pricing will apply.
                      header:
                        anchor: pricelist_notes
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## OAuth Scopes

                        *
                        [Products](/api-docs/getting-started/basics/authentication#authentication_oauth-scopes)
                      header:
                        anchor: pricelist_oauth-scopes
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Webhooks Available


                        There are no direct webhooks available for Price Lists.
                        Since Price Lists directly relate to products, webhooks
                        related to products will fire for corresponding changes
                        such as pricing. 


                        *
                        [Products](/api-docs/getting-started/webhooks/webhook-events#webhook-events_products)

                        *
                        [SKU](/api-docs/getting-started/webhooks/webhook-events#webhook-events_sku)
                      header:
                        anchor: pricelist_available-webhooks
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Related Endpoints

                        * [Get Price List
                        Collection](/api-reference/catalog/pricelists-api/price-lists/getpricelistcollection)
                      header:
                        anchor: pricelist_related-endpoints
        - title: Store Management
          route:
            path: /store-management
          data:
            children:
              - title: Shipping
                route:
                  path: /shipping
                data:
                  children:
                    - title: Overview
                      route:
                        path: /shipping-overview
                      data:
                        blocks:
                          - type: html
                            data: "<h1>Shipping</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#shipping_what-is-a-shipment\">What is a Shipment?</a></li>\n        <li><a href=\"#shipping_storefront-server-checkout\">Storefront Checkout and Server to Server Checkout</a></li>\n        <li><a href=\"#shipping_order-shipping-addresses\">Order Shipping Addresses</a></li>\n        <li><a href=\"#shipping_shipping-zone-methods\">Shipping Zone and Shipping Methods</a></li>\n        <li><a href=\"#shipping_real-time-carriers\">Real-Time Carriers</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## What is a Shipment?

                              Shipments are created from orders. A shipment
                              represents a grouping of order line items that are
                              shipped to a customer, and multiple shipments can
                              be created from a single order.


                              The V2 Shipping API allows you to manage Shipping
                              Zones, Shipping Methods, and Shipping Carrier
                              Connections.


                              The Order Shipments resource creates a shipment
                              for an order. You can specify the shipping
                              provider, tracking number and shipping address id
                              when creating a shipment.


                              For more see:

                              * [Create a
                              Shipment](/api-reference/orders/orders-api/order-shipments/postordersorderidshipments)
                            header:
                              anchor: shipping_what-is-a-shipment
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Storefront Checkout and Server-to-Server
                              Checkout API


                              The Storefront and Server-to-Server Checkout APIs
                              provide methods for managing a checkout up until
                              the point when it is finalized into an order.
                              Because shipments can only be created from
                              finalized orders, a shipment cannot be created
                              from Checkout API endpoints. 


                              However, both the Storefront and Server-to-Server
                              Checkout APIs provide methods for creating a
                              Consignment, which specifies the line items that
                              should ship to a particular address. Creating a
                              Consignment corresponds with the actions that a
                              shopper might take when filling out the storefront
                              checkout page, assigning the items in their basket
                              to their respective shipping destinations. 


                              A Checkout will always have one Consignment
                              assigned to it, which is the first shipping
                              address. A Consignment supports multiple shipping
                              addresses, with each address having its own line
                              items.


                              For more see:

                              * [Storefront
                              Checkout](/api-reference/cart-checkout/storefront-checkout-api/checkout/checkoutsconsignmentsbycheckoutidpost)

                              * [Server to Server
                              Checkout](/api-reference/cart-checkout/server-server-checkout-api/checkout/checkoutsconsignmentsbycheckoutidpost)
                            header:
                              anchor: shipping_storefront-server-checkout
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Order Shipping Addresses


                              The Order Shipping Addresses endpoint allows you
                              to view the shipping addresses on an order. This
                              will be the address(es) the items are shipped to. 
                              An order can have more than one shipping address.


                              For more see:

                              * [Order Shipping
                              Addresses](/api-reference/orders/orders-api/order-shipping-addresses)
                            header:
                              anchor: shipping_order-shipping-addresses
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Shipping Zone and Shipping Methods


                              Shipping zones can be configured in the control
                              panel or using the API to designate where a
                              merchant ships their products and which shipping
                              methods should be available in each geographic
                              region. 


                              An example of a shipping zone might be North
                              America, and within that shipping zone, the
                              shipping methods might be Free Shipping,
                              Ship-by-Weight, and USPS.


                              For more see:

                              * [Shipping
                              Zones](/api-reference/shipping/shipping-api/shipping-zones/getshippingzones)

                              * [Shipping
                              Methods](/api-reference/shipping/shipping-api/shipping-method/getshippingzoneszoneidmethods)
                            header:
                              anchor: shipping_shipping-zone-methods
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Real-Time Carriers


                              BigCommerce offers native integrations with many
                              real-time shipping carriers such as UPS, Fedex,
                              and USPS. The Real-Time Carriers resource allows
                              you to connect an account for one of our natively
                              supported shipping carrier integrations. 


                              For a list of all supported carriers, see
                              [Real-Time Quote
                              Providers](https://support.bigcommerce.com/articles/Public/Setting-Up-a-Real-Time-Shipping-Quote-Shipping-Method/#providers).


                              For more see:

                              * [Set Up Real-Time
                              Carriers](/api-reference/shipping/shipping-api/shipping-carrier/postshippingcarrierconnection)

                              * [Configure Real-Time
                              Carriers](/api-reference/shipping/shipping-api/shipping-method/postshippingzoneszoneidmethods)
                            header:
                              anchor: shipping_real-time-carriers
                    - title: Shipper HQ
                      route:
                        path: /shipper-hq
                      data:
                        blocks:
                          - type: html
                            data: "<h1>Shipper HQ Metafields</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#shipper-hq-object-properties\">ShipperHQ Object Properties</a></li>\n        <li><a href=\"#control-panel-behavior\">Control Panel Behavior</a></li>\n        <li><a href=\"#add-shipperhq-metafield\">Add ShipperHQ Metafield</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              When ShipperHQ is enabled on a store, additional
                              fields become available on the product level:

                              * Shipping Origins

                              * Origin Locations

                              * Dimensional Rules are accessible. 


                              These field values can be set in the Control Panel
                              by the merchant as well as using the

                              [Product Metafields
                              Endpoint](/api-reference/catalog/catalog-api/product-metafields/createproductmetafield)
                              or the [Variant Metafields
                              Endpoint](/api-reference/catalog/catalog-api/product-variants-metafields/createvariantmetafield).
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## ShipperHQ Object Properties


                              | Property | Type | Values |

                              |---|---|---|

                              | permission_set | string | This must be set to
                              `write`. Setting to any other field will cause
                              unintended behavior. **required** |

                              | key | enum | Members: `shipping-groups`,
                              `shipping-origins`, `shipping-dimensional-rules`
                              **required** |

                              | value | JSON encoded string | This will be the
                              name of the attribute type in ShipperHQ. This
                              needs to be input exactly how it is listed within
                              ShipperHQ. To pass in more than one Shipping
                              Origin, Origin Location or Dimensional Rule use an
                              array with a comma-separated list. White spaces
                              and special characters need to be escaped. Must be
                              a JSON encoded string `"[\"Origin Name from
                              SHQ-1\",\" Origin Name from SHQ-2\"]"`
                              **required** |

                              | namespace | string | This will always be
                              `shipping.shipperhq` **required** |

                              | resource_type | string | Either `product` or
                              `variant` |

                              | resource_id | string | Id of the product or
                              variant **read-only** |

                              | description | string | ShipperHQ shipping
                              origins associated with this product/sku.
                              **read-only** |

                              | date_created | string | Date and time of the
                              metafield's creation. **read-only** |

                              | date_modified | string | Date and time when the
                              metafield was last updated. **read-only** |

                              | id | number | Id of the Metafield. **read-only**
                              |
                            header:
                              anchor: shipper-hq-object-properties
                          - type: callout
                            data:
                              type: warning
                              body: >-
                                The metafields must be entered exactly,
                                otherwise they will not work. Since metafields
                                can also be used to store information against a
                                product, if the <code>namespace</code> for
                                example is set to shipping and not
                                <code>shipping.shipperhq</code>, it will not
                                update the shipping information.
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              ## Control Panel Behavior


                              When Shipping Origins are set using the API, the
                              fields cannot be deleted using the Control Panel.
                              A /DELETE request must be sent to the metafields
                              resource.


                              `/DELETE
                              https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/{{product_id}}/metafields`
                            header:
                              anchor: control-panel-behavior
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Add ShipperHQ Metafield


                              `/POST
                              https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/{{product_id}}/metafields`
                            header:
                              anchor: add-shipperhq-metafield
                          - type: code
                            data: "{\n\t\"permission_set\": \"write\",\n\t\"key\": \"shipping-origins\",\n\t\"value\": \"[\\\"Alaska\\\",\\\"California\\\"]\",\n\t\"namespace\": \"shipping.shipperhq\"\n}"
                            header:
                              title: SHQ Add Metafield Request
                          - type: code
                            data: "{\n\t\"data\": [{\n\t\t\t\"id\": 51,\n\t\t\t\"key\": \"shipping-origins\",\n\t\t\t\"value\": \"[\\\"Alaska\\\",\\\"California\\\"]\",\n\t\t\t\"namespace\": \"shipping.shipperhq\",\n\t\t\t\"permission_set\": \"write\",\n\t\t\t\"resource_type\": \"product\",\n\t\t\t\"resource_id\": 214,\n\t\t\t\"description\": \"ShipperHQ shipping origins associated with this product/sku\",\n\t\t\t\"date_created\": \"2018-07-19T17:56:08+00:00\",\n\t\t\t\"date_modified\": \"2018-07-24T14:51:43+00:00\"\n\t\t},\n\t\t{\n\t\t\t\"id\": 52,\n\t\t\t\"key\": \"shipping-groups\",\n\t\t\t\"value\": \"[\\\"SHIPPING GROUP NAME\\\"]\",\n\t\t\t\"namespace\": \"shipping.shipperhq\",\n\t\t\t\"permission_set\": \"write\",\n\t\t\t\"resource_type\": \"product\",\n\t\t\t\"resource_id\": 214,\n\t\t\t\"description\": \"ShipperHQ shipping group rules associated with this product/sku\",\n\t\t\t\"date_created\": \"2018-07-24T14:51:43+00:00\",\n\t\t\t\"date_modified\": \"2018-07-24T14:51:43+00:00\"\n\t\t},\n\t\t{\n\t\t\t\"id\": 53,\n\t\t\t\"key\": \"shipping-dimensional-rules\",\n\t\t\t\"value\": \"[\\\"DIMENSIONAL RULES NAME\\\"]\",\n\t\t\t\"namespace\": \"shipping.shipperhq\",\n\t\t\t\"permission_set\": \"write\",\n\t\t\t\"resource_type\": \"product\",\n\t\t\t\"resource_id\": 214,\n\t\t\t\"description\": \"ShipperHQ dimensional rules associated with this product/sku\",\n\t\t\t\"date_created\": \"2018-07-24T14:51:43+00:00\",\n\t\t\t\"date_modified\": \"2018-07-24T14:51:43+00:00\"\n\t\t}\n\t],\n\t\"meta\": {\n\t\t\"pagination\": {\n\t\t\t\"total\": 3,\n\t\t\t\"count\": 3,\n\t\t\t\"per_page\": 50,\n\t\t\t\"current_page\": 1,\n\t\t\t\"total_pages\": 1,\n\t\t\t\"links\": {\n\t\t\t\t\"current\": \"?page=1&limit=50\"\n\t\t\t}\n\t\t}\n\t}\n}"
                            header:
                              title: SHQ Add Metafield Response
                    - title: Shipping Provider API
                      route:
                        path: /shipping-provider-api
                      data:
                        blocks:
                          - type: html
                            data: |-
                              <h1> Shipping Provider API </h1>
                              <div class="otp" id="no-index">
                              <h3> On this Page </h3>
                              <ul>
                                <li><a href="#shipping-provider_prerequisites">Prerequisites</a></li>
                                <li><a href="#shipping_provider-signup">Sign Up</a></li>
                                <li><a href="#shipping_provider-before_development">Before Development</a></li>
                                <li><a href="#shipping_provider-developing-app">Developing the App</a></li>
                                <li><a href="#shipping_provider-return_shipping_quotes">Return Shipping Quotes</a></li>
                                <li><a href="#shipping_provider-submitting-app">Submitting the App</a></li>
                                 <li><a href="#shipping_provider-app_diagram">App Diagram</a></li>
                                <li><a href="#shipping_provider-definitions">Defintions</a></li>
                                <li><a href="#shipping_provider-faq">FAQ</a></li>
                              </ul>
                              </div>
                          - type: text
                            data: >-
                              The Shipping Provider API allows third parties to
                              integrate their own shipping carriers into the
                              BigCommerce checkout and control panel. Once
                              integrated, shoppers can fetch quotes on the
                              front-end from the shipping carrier within the
                              cart and checkout pages as they do with any other
                              shipping provider available today. Merchants have
                              access to configure and customize these providers
                              through the control panel as they would any other
                              shipping provider.


                              * A dropshipper that requires their own rates

                              * A merchant that already has a shipping table

                              * Third party logistics

                              * Create a combination of in store and shipping
                              for shoppers
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Prerequisites


                              ### Scopes 

                              The following
                              [OAuth](/api-docs/getting-started/authentication#authentication_oauth-scopes)
                              scopes are required:

                              - Information and Settings 


                              ### Endpoints 

                              Be familiar with the following API Endpoints:

                              - [Shipping
                              Zones](/api-reference/store-management/shipping-api/shipping-zones)

                              - [Shipping
                              Methods](/api-reference/store-management/shipping-api/shipping-method)

                              - [Shipping
                              Carriers](/api-reference/store-management/shipping-api/shipping-carrier)
                            header:
                              anchor: shipping-provider_prerequisites
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Sign Up


                              When creating your app, the shipping data needs to
                              be added to our Carrier Registry so it returns to
                              shoppers on the front-end.


                              To get your app setup send an email to: 

                              <a
                              href="mailto:shippingproviderapi@bigcommerce.com">shippingproviderapi@bigcommerce.com</a>.


                              Please include:

                              * Name

                              * Partner ID

                              * App ID (see below)

                              * Email

                              * Description of the app


                              To get your app ID, create an app in [Developer
                              Tools](https://devtools.bigcommerce.com/), fill
                              out the information on [Step 3
                              Technical](https://developer.bigcommerce.com/api-docs/partner/app-store-approval-requirements).
                              In the URL the app will have a unique ID. This is
                              what is sent in exchange for a carrier ID which
                              can be used to test the app.
                            header:
                              anchor: shipping_provider-signup
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1552664114224
                            header:
                              title: App ID
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Before Development


                              BigCommerce will send requests to your server to
                              get information back about shipping quotes,
                              credential validation and configuration. 


                              ### Your Service URLs

                              Since BigCommerce will be sending requests, you
                              will need to provide BigCommerce with URLs that
                              can accept quote requests and optionally a URL to
                              check and validate connection options during app
                              registration. These can be any valid HTTPS URL
                              using port 443, for example:


                              `https://yourhost.com/rate`


                              Your host and rate should be replaced with your
                              own host and path. 


                              ### Routes


                              You should create a URL to provide shipping quotes
                              on your API. This is the URL used to check the
                              available shipping rates. The second URL
                              (optional) checks the merchant’s connection
                              settings are valid. It can perform any checks
                              necssary to do so such as looking up credentials
                              in your database or calling a downstream service
                              to verify them.


                              ### Requests and Responses


                              BigCommerce will send and receive data using JSON.
                              The request for rates will always be formatted
                              using the [Base Rate Request
                              Model](/api-reference/store-management/shipping-provider-api/models/baseraterequest).
                              The response for rates should be formatted using
                              the [Carrier Quote
                              Object](/api-reference/store-management/shipping-provider-api/models/carrierquoteobject).
                              The request to check for merchant app credentials
                              will be formatted as Check Connection Options
                              Request Payload and the response should be
                              formatted using the  Check Connection Options
                              Response Payload. 


                              ### Error Handling

                              In the case of errors, error messages should be
                              included in the response payload under the
                              messages key.


                              Example:


                              ```

                              {
                                "valid": false,
                                "messages" [
                                  {
                                    "text": "Your account ID is invalid",
                                    "type": "ERROR"
                                  }
                                ]
                              }

                              ```
                            header:
                              anchor: shipping_provider-before_development
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Developing the App


                              The intended use of the Shipping Provider API is
                              to create an app that merchants can install on
                              their store. This can be a standalone app or part
                              of an existing application. When developing the
                              app there are a few things to consider which are
                              listed below.


                              ### Control Panel Installation Workflow


                              During the app setup, if the Check Connection
                              Options URL is configured for the carrier, an
                              attempt to connect the carrier via the Shipping
                              Manager UI or the Connect Carrier API causes a
                              request to be made to that URL with the provided
                              options. The resource should respond indicating if
                              the credentials are valid and should provide an
                              explanation of what is wrong. If no such URL is
                              configured, this check will be skipped and the
                              credentials are assumed valid as long as they pass
                              type checks.
                            header:
                              anchor: shipping_provider-developing-app
                          - type: code
                            data: |-
                              {
                                "connection_options" {
                                  "account_id": "a1ty"
                                }
                              }
                            header:
                              title: Sample Request
                              subtitle: >-
                                POST
                                https://developerserver.com/check_connection_options
                          - type: code
                            data: |-
                              {
                                "valid": false,
                                "messages" [
                                  {
                                    "text": "Your account ID is invalid",
                                    "type": "ERROR"
                                  }
                                ]
                              }
                            header:
                              subtitle: >-
                                POST
                                https://developerserver.com/check_connection_options
                              title: Sample Response
                          - type: callout
                            data:
                              body: >-
                                The step of validating the credentials is
                                optional. It does not change how the app
                                operates. It is best practice to authenticate
                                the user against your database or the downstream
                                provider service. 
                          - type: text
                            data: >-
                              Once the app is installed, it will be made
                              available for configuration by merchants and API
                              users. A merchant can navigate to the Shipping
                              Manager and enable, configure and disable the
                              carrier for any defined zone.


                              ### API Installation Workflow


                              To set up a carrier using the API, first connect
                              it using the Connect Carrier API. Make a request
                              containing the connection settings required by
                              your carrier. The ID of the carrier is required.
                              The carrier ID will be issued by BigCommerce when
                              your carrier is registered. All connection fields
                              are unique per carrier. If your carrier doesn’t
                              require any connection settings then this object
                              can be left empty.
                          - type: code
                            data: |-
                              {
                                "carrier_id": "carrier_33",
                                "connection": {
                                  "key": "userKey",
                                  "account_number": "userAccountNumber"
                                }
                              }
                            header:
                              subtitle: >-
                                POST
                                https://developerserver.com/shipping/carrier/connection
                              title: 'Sample Request '
                          - type: code
                            data: |-
                              {
                                "carrier_id": "carrier_33",
                                "connection": {}
                              }
                            header:
                              title: Sample Request with Empty Object
                              subtitle: >-
                                POST
                                https://developerserver.com/shipping/carrier/connection
                          - type: text
                            data: >-
                              Once connected, it’s possible to create shipping
                              methods for a connected carrier in any shipping
                              zone. Shipping zones can be queried using the
                              Shipping Zones resource. For any zone, a request
                              can be made to the Shipping Methods resource using
                              the zone ID from the Shipping Zones resource to
                              create a new method for the connected carrier. The
                              shipping carrier’s ID is required in the type
                              field.
                          - type: code
                            data: |-
                              {
                                "name": "Example Shipping Carrier",
                                "type": "carrier_33",
                                "settings": {
                                  "carrier_options": {
                                    "account_id": "a1ty"
                                  }
                                },
                                "enabled": true
                              }
                            header:
                              title: Sample Request
                              subtitle: >-
                                POST
                                https://api.bigcommerce.com/stores/{store_hash}/v2/shipping/zones/{zone_id}/methods
                          - type: code
                            data: |-
                              {
                                "id": 24,
                                "name": "Per Order Test",
                                "type": "perorder",
                                "settings": {
                                  "rate": 8.3
                                },
                                "enabled": true,
                                "handling_fees": {
                                  "fixed_surcharge": 3
                                },
                                "is_fallback": false
                              }
                            header:
                              title: Sample Response
                              subtitle: >-
                                POST
                                https://api.bigcommerce.com/stores/{store_hash}/v2/shipping/zones/{zone_id}/methods
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Returning Shipping Quotes


                              Whenever shipping rates are required, BigCommerce
                              checks its internal cache for valid entries. If a
                              valid entry exists, it will be used and the
                              shipping carrier will not be called. If a valid
                              cache entry does not exist, a request is made to
                              the Quote URL with details of the items to be
                              shipped, the shipping origin, and shipping
                              destination. If any connection settings or zone
                              settings are configured, these are also included.
                              The shipping carrier must then respond with zero
                              or more Shipping Quotes.
                            header:
                              anchor: shipping_provider-return_shipping_quotes
                          - type: code
                            data: |-
                              {
                                "base_options": {
                                  "origin": {
                                    "street_1": "685 MARKET ST",
                                    "street_2": "",
                                    "zip": "94105",
                                    "city": "SAN FRANCISCO",
                                    "state_iso2": "CA",
                                    "country_iso2": "US",
                                    "address_type": "commercial"
                                  },
                                  "destination": {
                                    "street_1": "",
                                    "street_2": "",
                                    "zip": "94103",
                                    "city": "",
                                    "state_iso2": "CA",
                                    "country_iso2": "US",
                                    "address_type": "residential"
                                  },
                                  "items": [
                                    {
                                      "sku": "SKU-100",
                                      "variant_id": "1",
                                      "product_id": "1",
                                      "name": "Shirt",
                                      "length": {
                                        "units": "in",
                                        "value": 1
                                      },
                                      "width": {
                                        "units": "in",
                                        "value": 1
                                      },
                                      "height": {
                                        "units": "in",
                                        "value": 1
                                      },
                                      "weight": {
                                        "units": "oz",
                                        "value": 1
                                      },
                                      "discounted_price": {
                                        "currency": "USD",
                                        "amount": "10"
                                      },
                                      "declared_value": {
                                        "currency": "USD",
                                        "amount": "10"
                                      },
                                      "quantity": 1,
                                      "attributes": []
                                    }
                                  ],
                                  "customer": {
                                    "customer_groups": [
                                      {
                                        "customer_group_id": 5,
                                        "customer_group_name": "Retail"
                                      }
                                    ],
                                    "customer_id": 6
                                  },
                                  "store_id": "ru7t7fv9",
                                  "request_context": {
                                    "reference_values": [
                                      {
                                        "name": "cart_id",
                                        "value": "8"
                                      }
                                    ]
                                  }
                                },
                                "connection_options": {
                                  "key": "userKey",
                                  "account_number": "userAccountNumber"
                                },
                                "zone_options": {
                                  "show_transit_time": true
                                },
                                "rate_options": []
                              }
                            header:
                              title: Sample Request
                              subtitle: 'POST https://developerserver.com/rate'
                          - type: code
                            data: |-
                              {
                                "quote_id": "sample_quote",
                                "messages": [],
                                "carrier_quotes": [
                                  {
                                    "carrier_info": {
                                      "code": "usps_pitney_bowes",
                                      "display_name": "USPS"
                                    },
                                    "quotes": [
                                      {
                                        "code": "",
                                        "rate_id": "9vcV1JfckPJZW2pjeNXcKP5y",
                                        "display_name": "USPS Priority Mail",
                                        "cost": {
                                          "currency": "USD",
                                          "amount": 6.35
                                        },
                                        "transit_time": {
                                          "units": "BUSINESS_DAYS",
                                          "duration": 1
                                        },
                                        "dispatch_date": "2018-08-29T00:00:00-05:00"
                                      },
                                      {
                                        "code": "",
                                        "rate_id": "EakTRTvck2XYGVAQw9Mza8WW",
                                        "display_name": "USPS Priority Mail Express",
                                        "cost": {
                                          "currency": "USD",
                                          "amount": 22.98
                                        },
                                        "transit_time": {
                                          "units": "BUSINESS_DAYS",
                                          "duration": 1
                                        },
                                        "dispatch_date": "2018-08-29T00:00:00-05:00"
                                      }
                                    ]
                                  },
                                  {
                                    "carrier_info": {
                                      "code": "fedex",
                                      "display_name": "FedEx"
                                    },
                                    "quotes": [
                                      {
                                        "code": "GND",
                                        "rate_id": "JnQ2MPqkAMX9cBsw0jyt551R",
                                        "display_name": "FedEx Ground",
                                        "cost": {
                                          "currency": "USD",
                                          "amount": 8.53
                                        },
                                        "transit_time": {
                                          "units": "BUSINESS_DAYS",
                                          "duration": 1
                                        },
                                        "dispatch_date": "2018-09-05T11:00:00-05:00"
                                      },
                                      {
                                        "code": "2DA",
                                        "rate_id": "QwygEz9XjZx1bT9rfDZsVxSy",
                                        "display_name": "FedEx 2 Day",
                                        "cost": {
                                          "currency": "USD",
                                          "amount": 10.47
                                        },
                                        "transit_time": {
                                          "units": "BUSINESS_DAYS",
                                          "duration": 2
                                        },
                                        "dispatch_date": "2018-09-05T11:00:00-05:00"
                                      }
                                    ]
                                  }
                                ]
                              }
                            header:
                              title: Sample Response
                              subtitle: 'POST https://developerserver.com/rate'
                          - type: text
                            data: >-
                              When an app with an associated shipping carrier is
                              uninstalled, all of the shipping methods and the
                              connection info for that carrier is automatically
                              removed from the store. Quote requests will no
                              longer be made and users will no longer see
                              shipping quotes for that carrier.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Submitting the App


                              Before submitting your app make sure you have the
                              following information. 


                              **Single Carrier vs Multi Carrier**


                              Whether the app is a single carrier or multiple
                              carriers. A single carrier app will offer one
                              service such as USPS. A multi carrier app will
                              offer more than one carrier such as USPS, DHL and
                              Canada Post. 


                              **Name and Description**


                              Name and description of the shipping carrier or
                              carriers. 


                              **Logo**


                              A 70x70 pixel logo that represents the shipping
                              carrier app. 


                              **Configuration Fields**


                              Any shipping zone-specific or connection-specific
                              fields to be made available to merchants or APIs
                              for configuration. Configuration fields can
                              include which rates to offer, packaging type or
                              packing method.  


                              To sumbit your app send an email to <a
                              href="shippingproviderapi@bigcommerce.com">shippingproviderapi@bigcommerce.com</a>.
                            header:
                              anchor: shipping_provider-submitting-app
                          - type: text
                            data: '---'
                          - type: text
                            data: '## App Diagram'
                            header:
                              anchor: shipping_provider-app_diagram
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1552664566834
                            header:
                              title: Carrier Service API
                          - type: text
                            data: >-
                              Only one registered shipping carrier may be
                              associated with an app. This [registered
                              carrier](#shipping_provider-definitions) can
                              provide quotes from multiple downstream carriers
                              if desired. In this case it will become a
                              multi-carrier aggregator.
                          - type: text
                            data: >-
                              ## Definitions


                              | Name | Description |

                              | -- | -- |

                              | Configuration Fields | The fields the merchant
                              will see in the control panel. Merchants can
                              navigate to the Shipping Manager and enable,
                              configure and disable the carrier for any defined
                              zone. They will also be able to activate the app
                              using the Carrier Connection API. Then use the
                              Shipping Zones API and Shipping Methods API to
                              configure the app from there. |

                              | Quote URL | A URL for a resource of the shipping
                              carrier that accepts quote requests and responds
                              with shipping quotes. For more on the Quote URL
                              see typical app workflow below.| 

                              | Single Carrier vs Multi Carrier | A single
                              carrier app will offer only one shipping provider.
                              A multi carrier app will aggregate multiple
                              shipping carriers in one app.| 

                              | Countries Available | A list of countries where
                              the shipping carrier can be used. The default
                              behavior is that the carrier is available for
                              every shipping origin. In most cases this list
                              should be as broad as possible. For example, if
                              your carrier operates worldwide, make it available
                              worldwide. The countries can be limited further
                              than what the shipping carrier has provided. If
                              the service is worldwide, then leave this field
                              blank to specify that it is worldwide. This is an
                              optional step. |

                              | Shipping Carrier |  A shipping carrier is what
                              is built to provide quotes to BigCommerce. If a
                              shipping carrier uses more than one shipping
                              provider then it becomes a multi carrier
                              aggregator. A carrier includes a name, description
                              and a logo. |

                              | Multi-Carrier Aggregator | A shipping solution
                              that provides shipping quotes for multiple
                              carriers.|

                              | Check Connection Options URL | A URL for a
                              shipping carrier resource that accepts check
                              requests containing the connection options
                              provided by a user when enabling the carrier and
                              indicates whether or not those settings are valid.
                              This is an optional step. |

                              | Shipping Quote | An estimation of cost to ship a
                              set of items from an origin to a destination. |

                              | Shipping Zone | Describes a set of destination
                              addresses and the applicable shipping settings,
                              such as handling fees and available shipping
                              methods.|

                              | Shipping Origin | The location from which goods
                              are shipped. This determines which shipping
                              carriers are available for the merchant to
                              configure in the control panel. |
                            header:
                              anchor: shipping_provider-definitions
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## FAQ

                              **Can I have more than one app at a time?**  

                              Yes, only one app at a time can be published. The
                              others can be for use as testing or as private
                              apps.
                            header:
                              anchor: shipping_provider-faq
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Resources

                              ### Webhooks

                              -
                              [Shipping](/api-docs/getting-started/webhooks/webhook-events#webhook-events_shipment)

                              ### Related Endpoints

                              - [Shipping
                              Provider](/api-reference/store-management/shipping-provider-api)

                              - [Shipping
                              Zones](/api-reference/store-management/shipping-api/shipping-zones)

                              - [Shipping
                              Methods](/api-reference/store-management/shipping-api/shipping-method)

                              - [Shipping
                              Carriers](/api-reference/store-management/shipping-api/shipping-carrier)
        - title: Customers & Subscribers
          route:
            path: /customers
          data:
            blocks: []
            children:
              - title: 'Overview '
                route:
                  path: /customers-subscribers-overview
                data:
                  blocks:
                    - type: html
                      data: "<h1>Customer and Subscribers</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#customers-subscribers_what-is-a-customer\">Customer</a></li>\n    \t\t<li><a href=\"#customers-subscribers_what-is-a-subscriber\">Subscriber</a></li>\n        <li><a href=\"#customers-subscribers_subscribers-v-customers\">Subscribers vs. Customers</a></li>\n        <li><a href=\"#customers-subscribers_what-is-a-guest\">Guests</a></li>\n        <li><a href=\"#customers-subscribers_customer-login\">Customer Login API</a></li>\n        <li><a href=\"#customers-subscribers_current-customer\">Current Customer API</a></li>\n        <li><a href=\"#customer-subscribers_customer-api\">Customer API</a></li>\n        <li><a href=\"#customer-subscribers_difference-v2-v3\">Differences Between V2 and V3 Customer API</a></li>\n        <li><a href=\"#customer-subscribers_faq\">FAQ</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Introduction


                        ### Prerequisites

                        **Scopes**


                        The following
                        [OAuth](/api-docs/getting-started/authentication#authentication_oauth-scopes)
                        scopes are required:

                        - Customers View/Modify

                        - Customers Login
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## What is a Customer?


                        A customer is anyone who has made a purchase on a store
                        and created an account. BigCommerce then stores email
                        address, customer address, and name against the customer
                        as a record. You can also extend the data for your
                        customer records using custom account sign up form
                        fields and the customer attributes API. 
                         
                        ### Customer Groups


                        Customer groups allow you to organize your customers,
                        give them discounts, and restrict access to specific
                        products or categories. For more information see
                        [Customer
                        Groups](https://support.bigcommerce.com/s/article/Customer-Groups).
                      header:
                        anchor: customers-subscribers_what-is-a-customer
                    - type: callout
                      data:
                        body: Customer Groups are only available on specific plans.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## What is a Subscriber?


                        A subscriber is someone who has signed up for a store’s
                        newsletter.  

                        Subscribers can be added by:


                        -   Signing up for the newsletter via the signup box
                        located in the footer of most storefront themes

                        -   Signing up for the newsletter during checkout

                        -   POSTing to the Subscribers API


                        Where possible, the API indicates the origin of the
                        subscriber. If the subscriber was added during checkout,
                        the Order ID is included.
                      header:
                        anchor: customers-subscribers_what-is-a-subscriber
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Subscribers vs. Customers


                        - A subscriber is not always a customer. Someone can
                        sign up for the newsletter only and not create an
                        account.

                        - A customer is not always a subscriber. Signing up for
                        the newsletter is a separate action from creating an
                        account and purchasing an item.

                        - A customer and a subscriber can be the same. If a
                        shopper checks out on the storefront, creates an account
                        and opts into the newsletter, they are a customer and a
                        subscriber.
                      header:
                        anchor: customers-subscribers_subscribers-v-customers
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## What is a Guest?


                        Store
                        [settings](https://forum.bigcommerce.com/s/article/Checkout-Settings#checkout-settings)
                        can be set to allow a shopper to complete checkout
                        without creating an account. These shoppers are not
                        captured as customers or stored in the BigCommerce
                        system. If you want to capture guest data, using the
                        [Storefront
                        APIs](/api-docs/cart-and-checkout/cart-and-checkout-overview)
                        can help.
                      header:
                        anchor: customers-subscribers_what-is-a-guest
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Customer Login API


                        The Customer Login API allows for single sign-on. Once a
                        customer has authenticated by logging in to a third
                        party system (CMS, portal, or app), you can use the
                        customer login API to seamlessly log the customer into
                        their BigCommerce customer account.
                      header:
                        anchor: customers-subscribers_customer-login
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Current Customer API

                        The Current Customer API allows your application to
                        identify logged in customers. This is useful when you
                        need to show customer specific information.
                      header:
                        anchor: customers-subscribers_current-customer
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Customer API

                        There are two Customer API endpoints available. 

                        - V2 Customers API

                        - V3 Customers API


                        ### V3 Customers API


                        The [V3 Customers
                        API](/api-reference/customer-subscribers/v3-customers-api)
                        is comprised of Customers, Customer Attributes, Customer
                        Address, and Customer Form Fields. 


                        Customers are any shopper that has created an account on
                        the store. The Customers object comprises customers
                        address, attributes, form fields and authentication. The
                        V3 Customers API can accomplish the same tasks as the
                        existing V2 Customers API, with greater efficiency. 


                        [Customer
                        Attributes](/api-reference/customer-subscribers/v3-customers-api/models/customerattribute)
                        are a name, value key pair that are stored against a
                        Customer. For example, if you want to keep a list of hat
                        sizes, the name can be “Hat Sizes” and the value can be
                        10. Each customer can have several name, value pairs
                        stored.
                      header:
                        anchor: customer-subscribers_customer-api
                    - type: callout
                      data:
                        body: >-
                          Each customer can have up to 100 name, value pairs
                          stored
                    - type: text
                      data: >-
                        Customer Attributes are created separately from the
                        customer. After the name and type are created, then the
                        attributes can be added to the customer using the name,
                        value pair.


                        [Customer
                        Addresses](/api-reference/customer-subscribers/v3-customers-api/models/address)
                        consist of a customers address and phone number.
                        Customers can have multiple addresses stored against
                        them.


                        [Customer Form Fields
                        Values](/api-reference/customer-subscribers/v3-customers-api/models/formfieldvalue)
                        are fields on either the customer address or customer
                        signup that accept any string data. An example of a
                        signup field can have a customer input a Wholesaler ID
                        or for an address field, have them input any special
                        delivery instructions. Creating form fields needs to be
                        done from the [Control
                        Panel](https://support.bigcommerce.com/s/article/Editing-Form-Fields#account-fields). 

                        Using the API you are able to access and edit the values
                        for the fields on your Customer and Customer Address
                        records. 


                        ### V2 Customers API


                        The V2 Customers API is comprised of Customers, Customer
                        Addresses and Customer Groups. The Customers object is
                        comprised of basic customer information such as customer
                        name and phone number. 


                        [Customer
                        Addresses](/api-reference/customer-subscribers/customers-api/models/customeraddress)
                        consist of a customers address and phone number.
                        Customers can have multiple addresses stored against
                        them.


                        [Customer
                        Groups](/api-reference/customer-subscribers/customers-api/models/customergroup)
                        allow you to organize your customers, give them
                        discounts, and restrict access to specific products or
                        categories. Customer groups are not yet available on the
                        V3 Customers API.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Differences Between V2 and V3 Customer API


                        ### Making Requests


                        The new Customers API is easier to use. It reduces the
                        API calls needed to accomplish a task. For example,
                        creating a new Customer with the V2 API there was a need
                        to hit several endpoints. Now the customer attributes
                        and address are created in one step with Create a
                        Customer, allowing you to batch create multiple
                        customers, and their subresources, in a single API call.


                        **Create a Customer**


                        Single Customer on V3

                        - `/customers`


                        Single Customer on V2

                        * `/customers/{customer_id}`

                        * `/customers/{customer_id}/addresses`



                        ### Queries


                        With the V3 Customers API, queries become a powerful
                        tool. Instead of using a different endpoint to get
                        customer sub-resources, there is one GET endpoint per
                        resource with filters to refine the request. 


                        **Get Customer Addresses**


                        Get Customer Address by name and company on V3

                        `/customers/addresses?company:in=bigcommerce,commongood&customer_id:in1,2,3`


                        Get Customer Address by name and company on V2

                        `/customers/{customer_id}/addresses/{customer_address_id}`


                        ### Requests


                        Requests on this endpoint require an array object for
                        all Create and Update Actions.
                      header:
                        anchor: customer-subscribers_difference-v2-v3
                    - type: code
                      data: |-
                        [
                          {
                            “id”: 12,
                            “email”: 'janedoe@email.com',
                            “first_name”: 'Jane',
                            “last_name”: 'Doe'
                          }
                        ]
                      header:
                        title: Update a Customer V3
                        subtitle: /customer
                    - type: code
                      data: |-
                        {
                          “first_name”: 'Jane',
                          “email”: 'jane@email.com',
                          “phone”: '1234567890'
                        }
                      header:
                        title: Update a Customer on V2
                        subtitle: '/customers/{customer_id}'
                    - type: text
                      data: >-
                        ### Upsert


                        Upsert is used for Form Field Values and Customer
                        Attributes. Upsert looks for a match to the existing
                        record, and if one is found, then it makes an update. If
                        a match is not found, it creates a new record.


                        ### Authentication Object


                        On the new Customers endpoint, when creating a customer
                        there are two ways to set customers passwords. 

                        - A new password can be set under the `authentication >
                        new password` object in a /PUT or /POST. 

                        - To have customers reset the password set
                        `force_password_reset` to `true` under `authentication >
                        new password` object in a /PUT or /POST


                        [Password
                        Confirmation](/api-reference/customer-subscribers/customers-api/customers/createanewcustomer)
                        and
                        [Validation](/api-reference/customer-subscribers/customers-api/customer-passwords/validatecustomerpassword)
                        are still available under V2 Customers. 
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## FAQ


                        **Which API should I use?**


                        When possible use the V3 Customers API since we will
                        eventually begin the process of deprecating the existing
                        V2 Customers API. 


                        **How can I validate customer passwords?**


                        Password validation is only available on V2 Customers
                        API. Validation will return a true or false. The V3
                        Customers API can reset a customers password or input a
                        new password. 
                      header:
                        anchor: customer-subscribers_faq
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Resources

                        ### Endpoints Still on V2

                        - [Customer
                        Groups](/api-reference/customer-subscribers/customers-api/customer-groups)

                        - [Password
                        Validation](/api-reference/customer-subscribers/customers-api/customer-passwords/validatecustomerpassword)

                        - [Password
                        Confirmation](/api-reference/customer-subscribers/customers-api/customers/createanewcustomer)

                        ### Related Endpoints

                        -   [Customer Login
                        API](https://developer.bigcommerce.com/api-docs/customers/customer-login-api)

                        -   [Current Customer
                        API](https://developer.bigcommerce.com/api-docs/customers/current-customer-api)

                        -   [Customers
                        API](/api-reference/customer-subscribers/v3-customers-api)

                        -   [Subscribers
                        API](https://developer.bigcommerce.com/api-reference/customer-subscribers/subscribers-api)


                        ### Webhooks

                        -
                        [Customers](/api-docs/getting-started/webhooks/webhook-events#webhook-events_customer)

                        ### Related Articles

                        - [Adding and Editing Fields in the Account Signup
                        Form](https://support.bigcommerce.com/s/article/Editing-Form-Fields#account-fields)
                        (BigCommerce Support)
              - title: Customer Login API
                route:
                  path: /customer-login-api
                data:
                  blocks:
                    - type: html
                      data: "<h1> Customer Login API </h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#customer-login_introduction\"> Introduction</a></li>\n    <li><a href=\"#customer-login_jwt\"> JWT</a></li>\n\t\t<li><a href=\"#customer-login_oauth-scope\">OAuth Scope</a></li>\n    <li><a href=\"#customer-login_sample-code\">Sample Code</a></li>\n    <li><a href=\"#customer-login_access-url\">Acces URL</a></li>\n    <li><a href=\"#customer-login_logging-in-a-customer\">Logging In a Customer</a></li>\n    li><a href=\"#customer-login_logout-customer\">Logging Out a Customer</a></li>\n    <li><a href=\"#customer-login_troubleshooting-customer-login-api\">Troubleshooting</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Introduction

                        The Customer Login API enables single sign-on (SSO). It
                        allows your apps to programmatically log in a storefront
                        customer by using the login entry point URL:
                        `/login/token/{token}`. Here, {token} must be a JSON Web
                        Token (JWT) containing the parameters for the customer
                        login request, signed by your application’s Oauth client
                        secret.


                        Example use cases for the Customer Login API include:


                        * Integration with a SSO provider or IdP

                        * Continuous login between a BC storefront and another
                        system, such as a WordPress blog

                        * Any login method other than BC's typical email and
                        password login - for example, if you wanted to enable
                        customers to log in via a phone number and SMS password
                      header:
                        anchor: customer-login_introduction
                    - type: text
                      data: >-
                        ## JWT


                        JWT is a standard for verifying a login signature
                        between two parties. For a full overview of the JWT
                        standard, please see [JWT.IO](https://jwt.io/), where
                        you can find links to client libraries (in many
                        languages) that facilitate the generation and
                        verification of JWT tokens. BigCommerce also supplies
                        helper methods for generating login tokens in our [API
                        Client Libraries](/tools-resources).


                        ### JWT Standard


                        A valid JWT token is a string composed of three parts,
                        separated by periods (“.”), which correspond to the
                        encoded header, the encoded payload, and the signature.
                      header:
                        anchor: customer-login_jwt
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1535390918772
                      header:
                        anchor: example-jwt-token
                        title: Example JWT Token
                      config:
                        centered: true
                        maxWidth: '800'
                        maxHeight: '800'
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1535391044482
                      header:
                        title: Key
                        anchor: token-key
                      config:
                        centered: true
                        maxWidth: '400'
                        maxHeight: '400'
                    - type: text
                      data: "### Header\n\nThe header specifies the type of token (JWT) and the hashing algorithm.\n\n```\n{\n\t\"typ\": \"JWT\",\n\t\"alg\": \"HS256\" \n}\n```\n\nThe type and algorithm are always JWT and HS256. Those are the only values BigCommerce supports."
                      header: {}
                    - type: text
                      data: >-
                        ### Payload

                        The payload contains a series of claims that identify
                        the application requesting the login, the store, and the
                        customer to be logged in. Optionally, you can specify a
                        redirect URL to direct the customer to a page other than
                        the My Account page after login. 


                        Once a request has is made with a given `jti`, it cannot
                        be made again. This parameter is used to prevent replay
                        attacks by malicious actors intercepting the request or
                        obtaining it after the fact.


                        The `request_ip` field can be used as an additional
                        security precaution, to prevent a malicious actor from
                        intercepting the request and making it from another
                        browser or system before you do. If you supply this
                        value, BigCommerce checks the incoming request to ensure
                        that it is being made from the stated IP address
                        otherwise the request fails. We strongly encourage
                        setting this IP address value, but doing so is optional,
                        to support those cases where this information is not
                        available.
                      header: {}
                    - type: code
                      data: |
                        {
                        "iss": "Your app’s Oauth client ID",
                        "iat": "timestamp for when the token was issued",
                        "jti": "randomly generated string",
                        "operation": "customer_login",
                        "store_hash": "abc123",
                        "customer_id": 1234,
                        "redirect_to": "/account.php",
                        "request_ip": "111.222.333.444"
                        }
                      header:
                        anchor: example-payload
                        title: Example Payload
                      config:
                        mode: json
                    - type: text
                      data: >-
                        | Field Name | Type | Description |

                        | --- | --- | --- |

                        | iss | string | Indicates the token's issuer. This is
                        your application's client ID, which is obtained during
                        application registration in Developer Portal. |

                        | iat | integer| Time when the token was generated. This
                        is a numeric value indicating the number of seconds
                        since the [Unix
                        epoch](http://en.wikipedia.org/wiki/Unix_time).|

                        | jti | string | Request ID string that must be unique
                        across all requests made by your app. A UUID or other
                        random string would be an appropriate value. Most
                        libraries contain a method for generating a uuid. For
                        testing a [UUID
                        generator](https://www.uuidgenerator.net/) can be used,
                        but it recommended to use built in libraries.|

                        | operation | string | Must contain the string
                        "customer_login". |

                        | store_hash | string | Store hash identifying the store
                        you are logging into. |

                        | customer_id | integer | ID of the customer you are
                        logging in, as obtained through the Customer API. |

                        | redirect_to | string | Optional field containing a
                        relative path for the shopper's destination after login.
                        Will default to `/account.php`. |

                        | request_ip | string | Optional field containing the
                        expected IP address for the request. If provided,
                        BigCommerce will check that it matches the browser
                        trying to log in. If there is not a match, it will be
                        rejected |
                      header: {}
                    - type: text
                      data: >-
                        ### Signature


                        The signature is created by signing the header and
                        payload with the hashing algorithm specified in the
                        header (HS256) and your application’s Client Secret. 
                      header: {}
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## OAuth Scope

                        Your OAuth API credentials must include the
                        [customers_login](/api-docs/getting-started/basics/authentication#authentication_oauth-scopes)
                        scope.
                      header:
                        anchor: customer-login_oauth-scope
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Access URL

                        After generating the JWT token, your app should
                        immediately redirect the shopper’s browser to the
                        following access point URL to log the customer into
                        their account: `/login/token/{token}`


                        Example:

                        `https://storedomain.com/login/token/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
                        .eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ`
                      header:
                        anchor: customer-login_access-url
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Logging in a Customer

                        The following tutorial will walk through creating a
                        login token. We recommend scripting this process since
                        the iat is invalid after 30 seconds. For the purpose of
                        illustration, this tutorial will walk through creating a
                        token manually using the debugger tool at JWT.io,
                        although doing so can be tricky due to time
                        constraints.  


                        **Prerequisites**:

                        Client ID and Client Secret generated from the store
                        with the scope set to [Customers
                        Login](/api-docs/getting-started/basics/authentication#authentication_oauth-scopes).
                      header:
                        anchor: customer-login_logging-in-a-customer
                    - type: text
                      data: >-
                        ### Create a JWT Token


                        1. Run a /GET request against the
                        [Customers](/api-reference/customer-subscribers/customers-api/customers/getacustomer)
                        resource. Choose a customer and make note of the
                        customer_id. 
                      header: {}
                    - type: callout
                      data:
                        type: success
                        body: >-
                          If you are unsure how to make a /GET request see our
                          tutorial on [making your first request]().
                        title: Making a /GET request
                      header: {}
                    - type: text
                      data: >-
                        2. Create the payload by filling in the PAYLOAD:DATA on
                        jwt.io
                    - type: code
                      data: |-
                        {
                            "iss": "1234r5t6y7u8i9o0p",
                            "iat": 1535393113,
                            "jti": "20b7c03e-00da-4d29-91bf-2aa06a57575b",
                            "operation": "customer_login",
                            "store_hash": "{store_hash}",
                            "customer_id": 2,
                            "redirect_to": "/account.php"
                        }
                      header:
                        title: Create the Payload
                        anchor: create-the-paylpad
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1535469059335
                      header:
                        subtitle: JTW.io fields
                      config:
                        centered: true
                        maxWidth: '800'
                        maxHeight: '800'
                    - type: callout
                      data:
                        type: error
                        title: IAT Claim
                        body: 'The iat claim is only good for 30 seconds. '
                      header:
                        anchor: iat-claim
                    - type: text
                      data: >
                        3.  Add your Client Secret in the Verify Signature
                        Section. Replace the text `your-256-bit-secret` with the
                        Client Secret.

                        4. Copy the token from the encoded box and paste at the
                        end of the login/token url.  


                        *https://store-url/login/token/generated-jwt-token*


                        **Example**: 

                        https://storedomain.com/login/token/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
                        .eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9
                        .TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ


                        5. Paste the URL into the address bar.


                        If the request was successful then you will be logged in
                        as the customer and directed to /account.php. If it was
                        unsuccessful there will be a login attempt message and
                        you will be directed to /login.php
                    - type: text
                      data: >-
                        ## Sample Code


                        Code to generate a valid JWT token for a storefront
                        login request is provided in our API Client Libraries.
                        The list items below link to the repositories maintained
                        by BigCommerce:


                        * [PHP
                        Sample](https://github.com/bigcommerce/bigcommerce-api-php/blob/master/src/Bigcommerce/Api/Client.php#L421)

                        * [Python
                        Sample](https://github.com/bigcommerce/bigcommerce-api-python/blob/master/bigcommerce/customer_login_token.py)

                        * [Ruby
                        Sample](https://github.com/bigcommerce/bigcommerce-api-ruby/blob/master/examples/customers/customer_login.rb)


                        Client libraries in many other languages are at JWT.io.
                      header:
                        anchor: customer-login_sample-code
                    - type: tabs
                      data:
                        children:
                          - title: PHP Sample
                            blocks:
                              - type: code
                                data: |2-
                                      public static function getCustomerLoginToken($id, $redirectUrl = '', $requestIp = '')
                                      {
                                          if (empty(self::$client_secret)) {
                                              throw new Exception('Cannot sign customer login tokens without a client secret');
                                          }

                                          $payload = array(
                                              'iss' => self::$client_id,
                                              'iat' => time(),
                                              'jti' => bin2hex(random_bytes(32)),
                                              'operation' => 'customer_login',
                                              'store_hash' => self::$store_hash,
                                              'customer_id' => $id
                                          );

                                          if (!empty($redirectUrl)) {
                                              $payload['redirect_to'] = $redirectUrl;
                                          }

                                          if (!empty($requestIp)) {
                                              $payload['request_ip'] = $requestIp;
                                          }

                                          return JWT::encode($payload, self::$client_secret, 'HS256');
                                      }
                                header:
                                  subtitle: >-
                                    https://github.com/bigcommerce/bigcommerce-api-php/blob/master/src/Bigcommerce/Api/Client.php#L421
                                  title: Client.php
                                  anchor: php-sample
                                config:
                                  mode: php
                          - title: Python Sample
                            blocks:
                              - type: code
                                data: |+
                                  import os
                                  import time
                                  import uuid
                                  import jwt


                                  class CustomerLoginTokens(object):
                                      @classmethod
                                      def create(cls, client, id, redirect_url=None, request_ip=None):

                                          # Get the client_secret needed to sign tokens from the environment
                                          # Intended to play nice with the Python Hello World sample app
                                          # https://github.com/bigcommerce/hello-world-app-python-flask
                                          client_secret = os.getenv('APP_CLIENT_SECRET')

                                          if not client_secret:
                                              raise AttributeError('No OAuth client secret specified in the environment, '
                                                                   'please specify an APP_CLIENT_SECRET')

                                          try:
                                              client_id = client.connection.client_id
                                              store_hash = client.connection.store_hash
                                          except AttributeError:
                                              raise AttributeError('Store hash or client ID not found in the connection - '
                                                                   'make sure an OAuth API connection is configured. Basic auth is not supported.')

                                          payload = dict(iss=client_id,
                                                         iat=int(time.time()),
                                                         jti=uuid.uuid4().hex,
                                                         operation='customer_login',
                                                         store_hash=store_hash,
                                                         customer_id=id
                                                         )

                                          if redirect_url:
                                              payload['redirect_url'] = redirect_url

                                          if request_ip:
                                              payload['request_ip'] = request_ip

                                          token = jwt.encode(payload, client_secret, algorithm='HS256')

                                          return token.decode('utf-8')

                                      @classmethod
                                      def create_url(cls, client, id, redirect_url=None, request_ip=None):
                                          secure_url = client.Store.all()['secure_url']
                                          login_token = cls.create(client, id, redirect_url, request_ip)
                                          return '%s/login/token/%s' % (secure_url, login_token)

                                header:
                                  title: customer_login_token.py
                                  subtitle: >-
                                    https://github.com/bigcommerce/bigcommerce-api-python/blob/master/bigcommerce/customer_login_token.py
                                  anchor: python-sample
                                config:
                                  mode: python
                          - title: Ruby Sample
                            blocks:
                              - type: code
                                data: >-
                                  require 'bigcommerce'


                                  Bigcommerce.configure do |config|
                                    config.store_hash = ENV['BC_STORE_HASH']
                                    config.client_id = ENV['BC_CLIENT_ID']
                                    config.client_secret = ENV['BC_CLIENT_SECRET']
                                    config.access_token = ENV['BC_ACCESS_TOKEN']
                                  end


                                  # Get a customer

                                  customer = Bigcommerce::Customer.all(page:
                                  1).first


                                  # Generate token login url

                                  puts customer.login_token
                                header:
                                  subtitle: >-
                                    https://github.com/bigcommerce/bigcommerce-api-ruby/blob/master/examples/customers/customer_login.rb
                                  title: customer_login.rb
                                  anchor: ruby-sample
                                config:
                                  mode: ruby
                      header:
                        title: JWT Token Sample Code
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Logging Out a Customer


                        To logout a customer programatically, set the redirect
                        URL in the JWT to `/login.php?action=logout`. This will
                        log out the customer even though the cross-origin
                        request to

                        `/login/token/{jwt}` will return an opaque response.
                      header:
                        anchor: customer-login_logout-customer
                    - type: text
                      data: >-
                        ## Troubleshooting


                        * If the server generating the iat is out of sync, the
                        login token will fail if the timestamp indicates a time
                        in the future or an expired token.


                        * The login URL can be visited only once. Once a GET
                        request is run against the link, the token is
                        invalidated. 


                        * Tokens can be validated or generated for testing
                        purposes using the debugger at https://jwt.io/.


                        * Tokens will be valid for a very short timeframe after
                        they are first generated, so tokens should not be
                        generated in advance. Instead, the application should
                        generate the token and then immediately redirect the
                        user’s browser to `/login/token/{token}`. If you're
                        seeing issues related to your system time differing from
                        BC's server time, you can use the <a
                        href="/api-reference/store-management/store-information-api/time-zone/gettime">/v2/time</a>
                        endpoint as a source of truth.
                      header:
                        anchor: customer-login_troubleshooting-customer-login-api
              - title: Current Customer API
                route:
                  path: /current-customer-api
                data:
                  blocks:
                    - type: html
                      data: "<h1> Current Customer API </h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#current-customer_identifying-logged-in-customers\">Identifying Logged-In Customers Securely</a></li>\n    <li><a href=\"#current-customer_logged-in-customers-javascript\">Example JavaScript</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Identifying Logged-In Customers Securely


                        If your application interacts dynamically with the
                        BigCommerce storefront, and conveys information that is
                        specific to a particular logged-in customer, you must
                        confirm that customer’s identity within the insecure
                        environment of the user’s browser.


                        To address this need, BigCommerce provides a Current
                        Customer endpoint, which your app can access via
                        JavaScript on the storefront. This endpoint returns a
                        JWT with identifying details about the customer. The
                        information is signed with your [OAuth client
                        secret](/api-docs/getting-started/basics/authentication#authentication_client-id-secret).
                      header:
                        anchor: current-customer_identifying-logged-in-customers
                    - type: text
                      data: >-
                        ## Example JavaScript


                        Below is example JavaScript that will access this JWT.
                        To test the JWT functionality, you can install this
                        JavaScript on your sandbox BigCommerce store. Your
                        application’s Client ID must be included in the request
                        (to identify the requesting application):
                      header:
                        anchor: current-customer_logged-in-customers-javascript
                    - type: code
                      data: |
                        <script type="text/javascript">
                        function customerJWT() {  
                            var appClientId = "**BC_CLIENT_ID**"; // TODO: Fill this in with your app's client ID
                            var xmlhttp = new XMLHttpRequest();
                            xmlhttp.onreadystatechange = function() {
                                if (xmlhttp.readyState == 4 ) {
                                   if (xmlhttp.status == 200) {
                                       alert('Customer JWT:\n' + xmlhttp.responseText);
                                   }
                                   else if (xmlhttp.status == 404) {
                                      alert('Not logged in!');
                                   }
                                   else {
                                       alert('Something went wrong');
                                   }
                                }
                            };
                            xmlhttp.open("GET", "/customer/current.jwt?app_client_id="+appClientId, true);
                            xmlhttp.send();
                        }
                        customerJWT();
                        </script>
                      header:
                        title: Identify Logged In Customers
                        anchor: identify-customers-script
                      config:
                        mode: html
                    - type: text
                      data: >-
                        If you are logged into the storefront with a customer
                        account, the above JavaScript should alert to the
                        browser with a JWT token. If no customer is logged in,
                        BigCommerce will return a 404 response, and you will see
                        an error message. The JWT returned from this endpoint
                        (example below) can be decoded on JWT.IO
                    - type: code
                      data: |-
                        {
                          "customer": {
                            "id": 4927,
                            "email": "john.doe@gmail.com",
                            "group_id": "6"
                          },
                          "iss": "bc/apps",
                          "sub": "abc123",
                          "iat": 1480831863,
                          "exp": 1480832763,
                          "version": 1,
                          "aud": "6sv16tfx3j5gsopm42ss5dd67g2srvq",
                          "application_id": "6sv16tasdgr2b5hs5dd67g2srvq",
                          "store_hash": "abc123",
                          "operation": "current_customer"
                        }
                      header:
                        title: Logged in Customers Response
                        anchor: logged-in-customer-response
                      config:
                        mode: json
                    - type: text
                      data: >-
                        By design, your application should send this token to
                        the application’s server, validate it against your
                        client secret, and then use it as a trusted indication
                        of the logged-in customer’s identity, before displaying
                        confidential information to them. 


                        An end-to-end example, which displays a customer’s
                        recently purchased products, is available in our
                        [Ruby](https://github.com/bigcommerce/hello-world-app-ruby-sinatra/)
                        and
                        [PHP](https://github.com/bigcommerce/hello-world-app-php-silex/)
                        sample apps.
        - title: Storefront
          route:
            path: /storefront
          data:
            children:
              - title: Scripts
                route:
                  path: /scripts-overview
                data:
                  blocks:
                    - type: html
                      data: "<h1>Scripts API</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#scripts_introduction\">Introduction</a></li>\n    \t\t<li><a href=\"#scripts_script-manager-partner-guidelines\">Script Manager API Partner Guidelines</a></li>\n        <li><a href=\"#script_prerequisites\">Prerequisites</a></li>\n        <li><a href=\"#scripts_upgrades-installation\">Upgrades and Installation</a></li>\n        <li><a href=\"#scripts_fixing-missing-scripts\">Fixing Missing Scripts</a></li>\n        <li><a href=\"#scripts_scripts-notes\">Notes</a></li>\n        <li><a href=\"#scripts_scripts-visibility\">Visibility Locations </a></li>\n    \t\t<li><a href=\"#scripts_oauth-scopes\"> OAuth Scopes</a></li>\n    \t\t<li><a href=\"#scripts_related-endpoints\">Related Endpoints</a></li>\n        <li><a href=\"#script_object-properties\">Object Properties</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Introduction


                        The BigCommerce Scripts API can be used to inject a
                        script into a store's template files. Some use cases:

                        * Insert tracking codes

                        * Storefront single-click applications

                        * Live chat, support plugins

                        * Theme extension or connector apps
                      header:
                        anchor: scripts_introduction
                    - type: text
                      data: >-
                        ## Script Manager API Partner Guidelines


                        With the Script Manager API, your Apps now have the
                        ability to insert scripts into a user’s storefront
                        without requiring the user to manually paste a snippet
                        of code into their control panel. You can freely update
                        these scripts while your App is installed, and, if
                        desired, automatically remove scripts if your App is
                        uninstalled.


                        For Apps being installed on our latest theme engine
                        (Stencil), this process is relatively straightforward.
                        However, if your App is already live, you may have
                        already asked merchants to paste a code snippet in one
                        of these two sections in the control panel:


                        - Footer Scripts

                        - Web Analytics


                        Also, since our older (Blueprint-based) themes do not
                        support the Script Manager API, you’ll still need some
                        way of providing users of older themes the documentation
                        they need, without burdening users of newer themes with
                        additional, unnecessary steps.


                        To help you transition to the Script Manager API, we’ve
                        provided some recommended strategies to deal with these
                        different situations. 


                        #### Stencil vs Blueprint


                        As mentioned above, BigCommerce supports two theme
                        engines: Stencil and Blueprint. Stencil is our latest
                        technology, and all new stores only have access to
                        Stencil themes. However, older stores may still be using
                        our legacy theme engine, Blueprint, which does not have
                        the ability to render scripts inserted through the
                        Script Manager API.


                        Because of this, you’ll need to check whether a user is
                        running Stencil to determine if their store supports the
                        Script Manager API. To do this, use the [Get Store
                        Information
                        API](https://developer.bigcommerce.com/api/v2/#store-information-reference)
                        endpoint and check the `stencil_enabled` flag. (requires
                        [store_v2_information_read_only
                        scope](https://developer.bigcommerce.com/api/#oauth-scopes)).
                      header:
                        anchor: scripts_script-manager-partner-guidelines
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Prerequisites


                        To better understand the content of this document, you
                        should be familiar with the app installation procedure,
                        which is outlined here:

                        [App
                        Installation](/api-docs/getting-started/building-apps-bigcommerce/building-apps#building-apps_installation-update-sequence)
                      header:
                        anchor: scripts_script-prerequisites
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Upgrades and Installation


                        ### Installing An App on Stencil


                        For Apps being installed on Stencil stores, we recommend
                        inserting your scripts immediately after receiving the
                        POST response during the Auth Callback flow. Add your
                        scripts using the Create Script endpoint of the Script
                        Manager API.


                        We highly recommend leaving the auto_uninstall flag set
                        to true, so that your App will properly clean itself up
                        when uninstalled. More information about this flag can
                        be found <a href="#script_object-properties">here</a>.


                        #### Upgrading Existing Apps on Stencil


                        If your App has already been released, you may have
                        existing users with pasted-in code somewhere in their
                        control panel. There are a few possible ways to deal
                        with this situation.


                        1.) __Do nothing__


                        If you don’t need to upgrade existing merchants to the
                        Script Manager API, it’s perfectly fine to leave them
                        as-is. You’ll need to maintain documentation for the
                        manual uninstallation process so that merchants with
                        older installations know what to clean up, and you won’t
                        be able to automatically update or add scripts for these
                        users. 


                        2.) __Prompt merchants to upgrade__


                        If you want your merchants to gradually update to the
                        new Script Manager over time, you can prompt them to do
                        so on your App’s landing page. You’ll need to keep track
                        of which of your merchants are not using the Script
                        Manager yet to know whether you need to display this
                        prompt. Also, make sure to check that they are running
                        Stencil (via the Get Store Information endpoint) before
                        prompting them to upgrade.


                        Once a user decides to upgrade, you can walk them
                        through removing the old pasted-in code in their control
                        panel, and then, once the merchant clicks a button,
                        install your scripts through the Script Manager API.


                        3.) __Silently upgrade to the Script Manager API__


                        Finally, if it’s possible for your old, pasted-in
                        scripts to live alongside the new Script Manager API
                        scripts, you may be able to upgrade to using the Script
                        Manager API without any user intervention being
                        required. Whether or not this is possible will vary
                        depending on the implementation of your App.


                        While your merchants will be loading more data on their
                        storefront pages than necessary, this method will allow
                        you to transition to using the Script Manager API for
                        all of your installations immediately. Keep in mind
                        you’ll still need to document the manual uninstallation
                        process for existing installations.


                        ### Installing Apps on Blueprint Stores 


                        As mentioned, the Blueprint theme engine does not
                        support the Script Manager API. Any scripts inserted
                        through this API will not be rendered on any storefront
                        pages. To prevent unpredictable behavior should a user
                        change their theme, we highly recommend checking the Get
                        Store Information endpoint for Stencil support prior to
                        installing any scripts through the Script Manager API.
                        Additionally, you’ll still want to show the old manual
                        installation steps when a store does not support
                        Stencil. 


                        ### Existing Blueprint Installations 


                        Existing blueprint installations won’t be affected, but
                        remember that if you are prompting existing Stencil
                        users to upgrade to the Script Manager, you’ll want to
                        suppress this message for Blueprint users. 
                      header:
                        anchor: scripts_upgrades-installation
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ### Fixing Missing Scripts


                        It’s possible that your App installation may find itself
                        unexpectedly missing one or more scripts. Below are some
                        possible causes of this issue.


                        1.) __The Merchant Deleted Your Script__ 


                        Merchants are given a warning when attempting to delete
                        a script belonging to an App, but we do allow them to do
                        so.


                        If you want to handle this situation gracefully, we
                        recommend you check the [Get
                        Scripts](/api-reference/storefront/content-scripts-api/scripts/getscripts)
                        endpoint on your App Detail Page (returned by the [Load
                        Callback
                        URI](/api-docs/getting-started/building-apps-bigcommerce/building-apps#building-apps_processing-signed-payload)
                        to determine whether the expected scripts are present.
                        If they are not, you can prompt the user to click a
                        button to automatically repair their installation.


                        We ask that you request the user’s permission rather
                        than doing this automatically, as they may have had a
                        good reason for deleting the missing script. 


                        2.) __The Merchant's Theme is Not Set Up Correctly__ 


                        In order to render scripts, the theme templates must
                        have the handlebars expressions {{head.scripts}} and
                        {{footer.scripts}} in the pages where scripts should be
                        rendered. If either of these is absent, scripts on that
                        page with location set to head or footer (respectively)
                        will not be rendered.


                        Of particular note, {{head.scripts}} was only recently
                        added to the checkout and order confirmation pages in
                        our Cornerstone theme, and widespread adoption of this
                        standard outside of Cornerstone is still an ongoing
                        process.


                        To ensure your App is compatible with as many themes as
                        possible, we recommend footer over head for checkout,
                        order_confirmation and all_pages visibilities. 


                        3.) __Scripts Are Not Rendering in the Checkout and
                        Order Confirmation__ 


                        In order to render scripts, the store must have
                        BigCommerce’s Optimized one-page checkout enabled. This
                        is the default checkout type for all new Stencil stores.
                        Existing stores have to manually change the checkout
                        type as detailed in this article. 


                        Stencil themes from the marketplace support the
                        [Optimized One-Page
                        Checkout](https://support.bigcommerce.com/articles/Public/Optimized-Single-Page-Checkout#signup).
                        However, there could be instances where the merchant
                        maintains their own private theme and the theme has not
                        been updated to support the Optimized one-page checkout.
                        In this case, the merchant is required to add the theme
                        support, following the steps
                        [here](https://stencil.bigcommerce.com/docs/optimized-checkout-prereqs).  
                      header:
                        anchor: scripts_fixing-missing-scripts
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Notes


                        - If you are injecting scripts into the Checkout, you
                        will need to update the scope to Checkout Content.
                        Accounts can only be created by the [store
                        owner](https://support.bigcommerce.com/articles/Public/Store-API-Accounts/).

                        - Merchants will be able to see the scripts installed on
                        the store in the Control Panel. Within the native tag
                        manager, merchant actions will be limited to viewing a
                        script and deleting a script.

                        - Scripts can be located in the header
                        `{{head.scripts}}` or footer `{{footer.scripts}}`.

                        - Scripts Manager is only for Stencil themes. Blueprint
                        store users will still need to copy and paste in code.

                        - The current visibility options are `storefront`,
                        `checkout`, `all_pages` and `order_confirmation`.

                        - Scripts injected via the Scripts API will not render
                        when you are developing a theme locally via Stencil CLI.
                      header:
                        anchor: scripts_scripts-notes
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Script Visibility Locations


                        | Scope | Visibility |

                        | -- | -- |

                        | `all_pages` | Add Wishlist </br> Blog List </br> Blog
                        Post</br> Brand Pages </br> All Brands Page </br> Cart
                        </br> Category </br> Checkout </br> Checkout </br>
                        Product Compare </br> Order Confirmation </br> Page
                        </br> Contact Form </br> Product </br> Search </br> All
                        Wishlist </br> Wish List |

                        | `storefront` |  Add Wishlist </br> Blog List </br>
                        Blog Post</br> Brand Pages </br> All Brands Page </br>
                        Cart </br> Category </br> Checkout </br> Checkout </br>
                        Product Compare </br> Page </br> Contact Form </br>
                        Product </br> Search </br> All Wishlist </br> Wish List
                        |

                        | `checkout` | Checkout | 

                        | `order_confirmation` | Order Confirmation | 


                        Scripts can not be injected to:

                        - giftcertificates.php

                        - sitemap.php

                        - account.php

                        - login.php

                        - 404 pages
                      header:
                        anchor: scripts_scripts-visibility
                    - type: text
                      data: '---'
                    - type: text
                      data: "## OAuth Scopes\n* Checkout Content\t\n* Content\n\nFor more details and a full list of available scopes, see [Oauth Scopes](/api-docs/getting-started/basics/authentication#authentication_oauth-scopes)."
                      header:
                        anchor: scripts_oauth-scopes
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Related Endpoints

                        * [Get
                        Scripts](/api-reference/content/content-scripts-api)
                      header:
                        anchor: scripts_related-endpoints
              - title: Widgets
                route:
                  path: /widgets
                data:
                  children:
                    - title: Overview
                      route:
                        path: /widgets-overview
                      data:
                        blocks:
                          - type: html
                            data: "<h1>Widgets API</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#widgets_regions\">Regions</a></li>\n        <li><a href=\"#widgets_widget-templates\">Widget Templates</a></li>\n        <li><a href=\"#widgets_widgets\">Widgets</a></li>\n        <li><a href=\"#widgets_placements\">Placements</a></li>\n        <li><a href=\"#widgets_layouts\">Layouts</a></li>\n    <li><a href=\"#widgets_placement-and-layouts\">Placements and Layouts</a></li>\n    \t\t<li><a href=\"#widgets_storefront\">Widgets on the Storefront</a></li>\n    \t\t<li><a href=\"#widgets_definitions\">Definitions</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              The Widgets API allows developers to
                              programmatically associate content with regions on
                              a BigCommerce storefront. The content can consist
                              of HTML, CSS, and JavaScript, and the API supports
                              configuration via Handlebars variables. It can
                              support many types of content such as YouTube
                              Videos, image sliders, and chat apps.


                              Some benefits are:

                              * Inject modular, reusable blocks of content
                              inside new and existing store pages

                              * Build tools that allow non-technical users to
                              control content without editing theme files

                              * Target specific products, categories or brands
                              with widgets


                              We are going to review all the components that
                              make a widget. Then, we’ll use what we’ve learned
                              to create a widget .
                            header:
                              anchor: widgets_introduction
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Regions


                              [Regions](/api-reference/storefront/widgets-api/models/themeregion)
                              are specific locations in the Stencil theme files
                              where a widget is placed. A region is added at the
                              file level using the format {{{region
                              name="..."}}}. A region can be named however you
                              like, but it is best practice to give it a name
                              that is descriptive of the location and function.
                              A theme file can have as many regions as you want,
                              with more than one widget assigned to the region
                              and the
                              [Placement](/api-docs/storefront/widgets/widgets-overview#widgets_placements)
                              `sort_order` controlling how the widgets appear on
                              the Storefront.
                            header:
                              anchor: widgets_regions
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1551970794664
                            header:
                              title: Storefront --Content Region
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1551970767918
                            header:
                              title: Template File -- Content Region
                            config:
                              fluid: true
                              maxWidth: '805'
                          - type: text
                            data: >-
                              Most themes in the BigCommerce marketplace come
                              with predefined regions. It is best to utilize
                              those first. By editing the theme and adding theme
                              regions, updates will need to be manually
                              managed. 
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Widget Templates


                              [Widget
                              Templates](/api-reference/storefront/widgets-api/models/widgettemplate)
                              are handlebars-enabled HTML templates which define
                              the structure of the widget on a page. Widget
                              Templates can use the built in handlebar helpers
                              such as {{if}} and {{each}}. Using the helpers
                              allows for conditional logic to be built into the
                              Widget Templates. Widget templates can be reused
                              to build multiple widgets.


                              ### Widget Template Examples

                              **Simple List**


                              The Simple List template creates a list where each
                              item in the list can have a different color. This
                              example uses the [each block
                              helper](https://handlebarsjs.com/builtin_helpers.html)
                              in handlebars to loop through each item in the
                              list and display it. The text and color are
                              determined by handlebars placeholders that are set
                              when creating the
                              [Widget]((/api-reference/storefront/widgets-api/widget/createwidget).
                            header:
                              anchor: widgets_widget-templates
                          - type: code
                            data: |-
                              {
                                "name": "Simple List",
                                "template": "<ul>{{#each list_items}}<li style=\"color:{{color}};\">{{text}}</li>{{/each}}</ul>"
                              }
                            header:
                              title: Simple List
                              subtitle: >-
                                The list takes advantage of loops to display
                                each list item on the page. 
                            config:
                              mode: json
                          - type: code
                            data: >-
                              {

                              "name": "Simple Slider",

                              "template": "<ul class='slider'>{{#each
                              slides}}<li class='slide'><img
                              src={{image}}'/</li>{{/each}}</ul>"

                              }
                            header:
                              title: Image Slider
                              subtitle: >-
                                The slider takes advantage of loops to display
                                each slide on the page.
                            config:
                              mode: json
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Widgets


                              [Widgets](/api-reference/storefront/widgets-api/models/widget)
                              are a unit of content that are placed on specific
                              pages in a Stencil theme. Widgets are made of a
                              widget configuration written in json and a widget
                              template UUID. Widgets are rendered as part of the
                              HTML on the storefront.
                            header:
                              anchor: widgets_widgets
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1551971053085
                            header:
                              title: Storefront -- Widget
                          - type: text
                            data: >-
                              ### Widget Configuration


                              A Widget Configuration is the JSON payload that
                              defines the content to be rendered with a given
                              Widget Template. In the previous simple list
                              example, the widget template loops over a
                              list_items array using `{{#each}}`. 


                              In the example below, we define the list_items
                              array and supply values for the color and text of
                              each list item. Since the template is created
                              separately from the configuration, the same
                              template UUID can be used multiple times for
                              configuration.
                          - type: code
                            data: |-
                              {
                                "slides": [
                                  {"image":"http://imageurl.com/nh35jn/test.png"},
                                  {"image":"http://imageurl.com/fdhdfh/test2.png"}
                                ]
                              }
                            header:
                              title: Widget Configuration Slides
                            config:
                              mode: json
                          - type: code
                            data: |
                              {
                              "list_items":[
                              { 
                              "color": "orange", 
                              "text": " Item One"
                              },
                              { 
                              "color": "blue", 
                              "text": "Item Two"
                              }
                              ]
                              }
                            header:
                              title: Widget Configuration List Items
                            config:
                              mode: json
                          - type: callout
                            data:
                              body: >-
                                Keep in mind that when reusing the
                                `widget_configuration` the array will have to be
                                called `list_items`. Otherwise, the widget will
                                be created on the frontend, but there will be no
                                data, so nothing is rendered. This is because
                                `list_items` was defined when the widget
                                template was originally created. The widget
                                configuration name can anything that is set when
                                the widget_template is created.
                          - type: code
                            data: |-
                              {
                                "name": "Simple List",
                                "widget_configuration": {
                                  "list_items_two": [
                                    {
                                      "color": "orange",
                                      "text": "Fifth item"
                                    },
                                    {
                                      "color": "blue",
                                      "text": "Sixth item"
                                    }
                                  ]
                                },
                                "widget_template_uuid": "7bfb9a46-75cc-45bc-bf39-a6a43b77111f"
                              }
                            header:
                              title: 'List Items Example: Incorrect'
                            config:
                              mode: json
                              highlightRange:
                                - from: '4'
                                  to: '4'
                          - type: text
                            data: >-
                              The example above uses `list_items_two`, on line
                              four, in the configuration which is not the same
                              as `list_items`. If `list_items` has already been
                              established during the initial configuration it
                              must be set as `list_items` when being used
                              again. 
                          - type: code
                            data: |-
                              {
                                "name": "Simple List",
                                "widget_configuration": {
                                  "list_items": [
                                    {
                                      "color": "orange",
                                      "text": "Fifth item"
                                    },
                                    {
                                      "color": "blue",
                                      "text": "Sixth item"
                                    }
                                  ]
                                },
                                "widget_template_uuid": "7bfb9a46-75cc-45bc-bf39-a6a43b77111f"
                              }
                            header:
                              title: 'List Items Example: Correct'
                            config:
                              mode: json
                              highlightRange:
                                - from: '4'
                                  to: '4'
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Placements


                              [Placements](/api-reference/storefront/widgets-api/placement/createplacement)
                              determine the Region where the Widget is placed
                              and in what order. The order of the placement is
                              controlled by the `sort_order` when creating the
                              placement. 

                              A placement must be created in order use a Widget
                              on the storefront.



                              Placements can be used in two ways:

                              * On their own using the `sort_order` and region
                              to determine placement in a theme.

                              * With a Layout, for more control arranginging
                              widgets such as a table or column. Using Layouts
                              is an optional step. The Widget can still be
                              rendered without a Layout.


                              ### Placements `entity_id`


                              When creating a placement, there is an option to
                              provide an `entity_id`. 

                              This is the ID for a specific page, brand,
                              category or page. For example, if a Widget needs
                              to be on all product pages, leave `entity_id`
                              blank. If the Widget should only appear on a
                              certain product page, then assign `entity_id` the
                              product ID. 


                              `entity_id` can be used with the following page
                              types:

                              * pages/brand

                              * pages/category

                              * pages/page

                              * pages/product



                              ### Create a Widget Placement with Region


                              Below, the region and sort order have a value, so
                              the widget will appear on the home page. 
                            header:
                              anchor: widgets_placements
                          - type: code
                            data: |-
                              {
                                  "widget_uuid": "2dfeb50e-5f8c-4df2-8525-a338091eed32",
                                  "entity_id": "14",
                                  "sort_order": 1,
                                  "region": "home_header_image",
                                  "template_file": "pages/home",
                                  "status": "active"
                              }
                            header:
                              title: Widget with Region
                            config:
                              mode: json
                              highlightRange:
                                - from: '5'
                                  to: '5'
                          - type: text
                            data: >-
                              ### Create a Widget Placement Without a Region

                              Leaving the region and sort order off the request
                              will return just the `placement_id` in the
                              response, allowing for the widget to be rendered
                              using Layouts. 
                          - type: code
                            data: |-
                              {
                                  "widget_uuid": "2dfeb50e-5f8c-4df2-8525-a338091eed32",
                                  "entity_id": "14",
                                  "template_file": "pages/home",
                                  "status": "active"
                              }
                            header:
                              title: Widget Without a Region
                            config:
                              mode: json
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ### Layouts

                              [Layouts](/api-reference/storefront/widgets-api/models/layout)
                              allow a developer to control the position of
                              widgets on the storefront. A Layout allows you to
                              style around the Placement. Layout uses the markup
                              field which accepts any valid HTML and CSS. A
                              Layout can contain multiple Placements.
                            header:
                              anchor: widgets_layouts
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1551971170727
                            config:
                              fluid: true
                              maxWidth: '805'
                            header:
                              title: Storefront -- Layouts
                          - type: text
                            data: >-
                              ### Layouts `bc-placements`


                              `bc-placements` is a special field that takes in a
                              placement id and allows the widget to be
                              positioned anywhere in the layout. The `id` is the
                              Placement ID.
                          - type: code
                            data: |-
                              <div>
                                 <div style="width: 33.3%; float: left; display: inline-block; padding: 5px; box-sizing: border-box">
                                   <bc-placement id="73ee60d9-72e4-4dce-be93-c96b861cb5ff"></bc-placement>
                                 </div>
                                 <div style="width: 33.3%; float: left; display: inline-block; padding: 5px; box-sizing: border-box">
                                   <bc-placement id="3466ccb8-cb3e-4811-8266-acae20d1bb93"></bc-placement>
                                 </div>
                                   <div style="width: 33.3%; float: left; display: inline-block; padding: 5px; box-sizing: border-box">
                                   <bc-placement id="73ee60d9-72e4-4dce-be93-c96b861cb5ff"></bc-placement>
                                 </div>
                              </div>
                            header:
                              title: Layouts bc-placements Example
                            config:
                              mode: html
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Placements and Layouts


                              In order to position widgets inside a page you
                              need to use placements. Placements determine in
                              which region the widgets is located and in what
                              the order it will be displayed in case there are
                              other widgets in the same region. 


                              Placements can be used in two ways:


                              **1. Placement + Widget:**  

                              When creating a placement with a widget, the
                              widget content takes the full region width. Any
                              additional widgets that are placed onto the same
                              region will be stacked above or below based on the
                              `sort_order` property for each placement.


                              If you are creating marketplace applications that
                              create placements directly, you don’t need to use
                              the `sort_order` property. 


                              **2. Placement + Layout:**  

                              If you want to arrange widgets inside a page using
                              a multi-column style system, then you can create
                              the placement with a Layout. You can also add
                              additional styling around placements when using
                              Layouts.  


                              Using Layouts is optional and most recommended
                              when you have multiple placements that you want to
                              arrange in a particular way. You can still arrange
                              content in a multi-column style system using HTML
                              and CSS only without having to use Layouts when
                              creating a single placement. 
                            header:
                              anchor: widgets_placement-and-layouts
                          - type: text
                            data: >-
                              ## Widgets on the Storefront


                              Widgets are rendered on the storefront as a data
                              tag in the HTML.


                              * Region -- data-content-region

                              * Layout -- data-layout-id

                              * Widget -- data-widget-id

                              * Placement does not generate a data tag. Only the
                              Widget.


                              A Region can contain multiple Layouts with Widgets
                              and Placements or Widgets without a Layout. Within
                              a single region, you might have widgets whose
                              positioning is determined by a Layout, as well as
                              widgets whose positioning is determined simply by
                              a Placement. In the example below, the region is
                              named “widget_page.” Nested within that region is
                              a Layout, which contains a widget. The region also
                              contains a Placement, or a widget that’s been
                              placed on the page without a Layout.
                            header:
                              anchor: widgets_storefront
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1551971208326
                            header:
                              title: Storefront
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1551895293134
                            header:
                              title: Widgets Console
                            config:
                              fluid: true
                              maxWidth: '805'
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Definitions


                              | Name | Definition |

                              |--|--|

                              | Widgets | Widgets are the units of content to be
                              placed on specific pages in a Stencil theme. Each
                              widget is comprised of a widget configuration and
                              a widget template. *There is a limit of 1000
                              widgets per store.* | 

                              | Widget Templates | Widget Templates are
                              Handlebars-enabled HTML templates which define the
                              widget’s structure on a page. These templates can
                              include conditional logic as well as looping.
                              *There is a limit of 100 total widget templates
                              per store.* |

                              | Placements | Placements are the records to track
                              which widget appears on which page, and in what
                              order.  Currently, placements can only exist on
                              the following pages: </br>* pages/blog-post </br>
                              * pages/blog</br>* pages/brand</br>*
                              pages/brands</br>* pages/cart</br>*
                              pages/category</br>* pages/home</br>*
                              pages/page</br>* pages/product</br>*
                              pages/search</br> *There is a limit of 75
                              placements per template file and 6500 total
                              placements per store.*|

                              | Regions | Regions are specific spots in a
                              Stencil template file where Widgets can be placed.
                              Regions are defined at the theme file level using
                              the following syntax: `{{{region name="..."}}}`.
                              There can be many widgets inside a given region,
                              and these widgets can have an assigned sort order.
                              |

                              | Widget Configuration | This is a JSON payload
                              that contains data used when rendering the widget.
                              Each widget has a configuration, and there is a
                              64kb limit on the size of the JSON. The widget
                              configuration must be valid JSON, but we don’t
                              enforce any additional requirement on the
                              structure of the configuration. |

                              | Layout | A way to style multiple widgets on a
                              page or position a Widget. A Layout will accept
                              any HTML and CSS. *There is a limit of 1000 total
                              layouts per store.* |
                            header:
                              anchor: widgets_definitions
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Resources


                              ### Related Endpoints

                              * [Widgets
                              API](/api-reference/storefront/widgets-api)
                            header:
                              anchor: widget_resources
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Next Steps

                              * [Widgets
                              Tutorial](/api-docs/storefront/widgets/widgets-tutorial)

                              * [Wigets Code
                              Samples](/api-docs/storefront/widgets/widgets-code-samples)
                            header:
                              anchor: widget_next-steps
                    - title: Widgets Tutorial
                      config:
                        sidebar:
                          token: tutorial
                      route:
                        path: /widgets-tutorial
                      data:
                        blocks:
                          - type: html
                            data: "<h1>Widgets Tutorial</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#widget-tutorial_add-a-region\">Add a Region</a></li>\n        <li><a href=\"#widget-tutorial_create-widget-template\">Create a Widget Template</a></li>\n        <li><a href=\"#widget-tutorial_create-widget\">Create a Widget</a></li>\n        <li><a href=\"#widget-tutorial_create-placement\">Create the Placement</a></li>\n        <li><a href=\"#widget-tutorial_create-layout\">Create the Layout</a></li>\n    \t\t<li><a href=\"#widget-tutorial_reuse-widget-template\">Reuse the Widget</a></li>\n        <li><a href=\"#widget-tutorial_resources\">Resources</a></li>\n    <li><a href=\"#widget-tutorial_next-steps\">Next Steps</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              In this tutorial, we will cover:

                              * Creating a Region

                              * Creating a Widget Template

                              * Creating a Widget

                              * Placing the Widget

                              * Creating the Layout


                              This tutorial assumes knowlege of
                              [Widgets](/api-docs/storefront/widgets/widgets-overview). 
                          - type: callout
                            data:
                              body: >-
                                The instructions below use the Cornerstone
                                Theme. Your theme may differ.
                          - type: text
                            data: "## Prerequisites:\n* Stencil Theme. This tutorial uses Cornerstone.\n* Scopes  \nThe following Oauth scopes are required:\n\t* [Content](/api-docs/getting-started/authentication#authentication_oauth-scopes) set to Modify\n* Image URL. If you don’t have one, there is an example in the tutorial.\n* Category Page ID. A [GET Categories](/api-reference/catalog/catalog-api/category/getcategories) request will returns a list of category IDs.\n\nWe will be making a widget that shows three images, with a hover effect and each image linking out to a different location. "
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1551898706416
                            header:
                              title: Category Page Widget
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Add a Region

                              Add `{{{region name="category_header_banner"}}}`
                              to the pages>category.html file. This is where the
                              widgets will appear on the category page. In this
                              example, the region is added to line 24. 
                            header:
                              anchor: widget-tutorial_add-a-region
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1551898921184
                            header:
                              title: Add Region to category.html
                          - type: callout
                            data:
                              type: info
                              body: >-
                                Regions can only be added to files under
                                pages/templates, including subfolders.
                          - type: text
                            data: >-
                              To check the region was added successfully, use
                              [Get Content
                              Regions](/api-reference/storefront/widgets-api/regions/getcontentregions).
                          - type: http
                            data:
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/content/regions
                              method: get
                              headers:
                                Accept: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{$$.env.X-Auth-Client}'
                                X-Auth-Token: '{$$.env.X-Auth-Token}'
                              query:
                                templateFile: pages/category
                            header:
                              title: Get Content Region
                          - type: code
                            data: |-
                              {
                                  "data": [
                                      {
                                          "name": "header_bottom"
                                      },
                                      {
                                          "name": "category_header_banner"
                                      }
                                  ],
                                  "meta": {}
                              }
                            header:
                              title: Sample Response
                              subtitle: Get Content Regions
                            config:
                              mode: json
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Create a Widget Template


                              Widget Templates are the reusable piece of
                              structure. In this walkthrough we are creating a
                              header image. `image_source` is set using
                              handlebars so the header image can be changed
                              every time the template is reused. The template
                              also takes advantage of conditional logical with
                              `#each images`. Instead of creating a template
                              with three lines of code for each image, one line
                              can loop through each image provided. 



                              * name -- Name of the widget template (required)

                              * template -- Html to create the widget template
                              (required)


                              In the response the Widget Template UUID returned.
                              Make note of it for use later when creating the
                              Widget.
                            header:
                              anchor: widget-tutorial_create-widget-template
                          - type: http
                            data:
                              method: post
                              body: "{\n\t\"name\": \"Header Images\",\n\t\"template\": \"{{#each images}}<a href='{{image_url}}'><img src={{image_source}} style='width:33.3%'/></a>{{/each}}\"\n}"
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/content/widget-templates
                              headers:
                                Accept: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{$$.env.X-Auth-Client}'
                                X-Auth-Token: '{$$.env.X-Auth-Token}'
                            header:
                              title: Create a Widget Template
                          - type: code
                            data: |-
                              {
                                  "data": {
                                      "uuid": "3a1b0044-c9b3-47d3-9929-01ab0c20243b",
                                      "name": "Header Images",
                                      "schema": [],
                                      "template": "{{#each images}}<a href='{{image_url}}'><img src={{image_source}} style='width:33.3%'/></a>{{/each}}",
                                      "date_created": "2019-02-25T18:35:04.904Z",
                                      "date_modified": "2019-02-25T18:35:04.904Z",
                                      "kind": "custom"
                                  },
                                  "meta": {}
                              }
                            header:
                              title: 'Sample Response '
                              subtitle: Create Widget Template
                            config:
                              mode: json
                              highlightRange:
                                - from: '3'
                                  to: '3'
                          - type: text
                            data: '---'
                          - type: text
                            data: "## Create a Widget\n\nHere, we will use the Widget Template to add the links and the images. There are many ways to use widget templates and we will go over just one. For more examples, see [Code Samples](/api-docs/storefront/widgets/widgets-code-samples). \n\n* name -- Something short and descriptive. (required)\n* description -- a longer explanation if needed (not required)\n* widget_configuration -- Based on the original widget_template configuration and can vary by the widget created.\n\t* image_source -- Since this is the handlebar placeholder, it requires an image value.\n* widget_template_uuid -- UUID from the Widget Template response.\n\nFor widget_configuration `images is the top level array, with `image_url` and `image_source` for each object. There are three images in this example since the width of each was set to 33.3%.\n\nIn the response the Widget UUID is returned. Make note of it for use later when creating the Placement."
                            header:
                              anchor: widget-tutorial_create-widget
                          - type: http
                            data:
                              method: post
                              body: |-
                                {
                                  "name": "Header Images",
                                  "widget_configuration": {
                                    "images": [
                                      {
                                        "image_url": "{where-the-image-should-link-to}",
                                        "image_source": "https://cdn11.bigcommerce.com/s-n0i50vy/images/stencil/1280x1280/products/91/309/thekinfolktablecover_1024x1024__80715.1456436719.jpg?c=2&imbypass=on"
                                      },
                                      {
                                        "image_url": "{where-the-image-should-link-to}",
                                        "image_source": "https://cdn11.bigcommerce.com/s-n0i50vy/images/stencil/1280x1280/products/109/361/kinfolkessentialissue_1024x1024__22507.1456436715.jpg?c=2&imbypass=on"
                                      },
                                      {
                                        "image_url": "{where-the-image-should-link-to}",
                                        "image_source": "https://cdn11.bigcommerce.com/s-n0i50vy/images/stencil/500x659/products/85/282/livingwithplants_grande__26452.1456436666.jpg?c=2&imbypass=on"
                                      }
                                    ]
                                  },
                                  "widget_template_uuid": "{your-widget-template-uuid}"
                                }
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/content/widgets
                              headers:
                                Accept: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{$$.env.X-Auth-Client}'
                                X-Auth-Token: '{$$.env.X-Auth-Token}'
                            header:
                              title: Create a Widget
                          - type: code
                            data: |-
                              {
                                  "data": {
                                      "uuid": "a8940709-5655-4401-a341-62c44e3180b2",
                                      "name": "Header Images",
                                      "widget_configuration": {
                                          "images": [
                                              {
                                                  "image_url": "{where-the-image-should-link-to}",
                                                  "image_source": "https://cdn11.bigcommerce.com/s-n0i50vy/images/stencil/1280x1280/products/91/309/thekinfolktablecover_1024x1024__80715.1456436719.jpg?c=2&imbypass=on"
                                              },
                                              {
                                                  "image_url": "{where-the-image-should-link-to}",
                                                  "image_source": "https://cdn11.bigcommerce.com/s-n0i50vy/images/stencil/1280x1280/products/109/361/kinfolkessentialissue_1024x1024__22507.1456436715.jpg?c=2&imbypass=on"
                                              },
                                              {
                                                  "image_url": "{where-the-image-should-link-to}",
                                                  "image_source": "https://cdn11.bigcommerce.com/s-n0i50vy/images/stencil/500x659/products/85/282/livingwithplants_grande__26452.1456436666.jpg?c=2&imbypass=on"
                                              }
                                          ],
                                          "_": {
                                              "id": "a8940709-5655-4401-a341-62c44e3180b2"
                                          }
                                      },
                                      "widget_template": {
                                          "uuid": "3a1b0044-c9b3-47d3-9929-01ab0c20243b",
                                          "name": "Header Images",
                                          "schema": [],
                                          "template": "{{#each images}}<a href='{{image_url}}'><img src={{image_source}} style='width:33.3%'/></a>{{/each}}",
                                          "date_created": "2019-02-25T18:35:04.904Z",
                                          "date_modified": "2019-02-25T18:35:04.904Z",
                                          "kind": "custom"
                                      },
                                      "date_created": "2019-02-25T18:36:45.238Z",
                                      "date_modified": "2019-02-25T18:36:45.238Z",
                                      "description": ""
                                  },
                                  "meta": {}
                              }
                            header:
                              title: Sample Response
                              subtitle: Create a Widget
                            config:
                              mode: json
                              highlightRange:
                                - from: '3'
                                  to: '3'
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Create the Placement


                              Placement defines the page and region where the
                              widget should appear. Remember that
                              [Placements](/api-docs/storefront/widgets/widgets-overview#widgets_placements)
                              can either lead to a Layout or they can be used on
                              their own. In this walkthrough we will use
                              Layouts. 


                              * widget_uuid -- UUID of the Widget

                              * entity_id -- The page, category, brand or
                              product ID the widget should appear on

                              * sort_order -- If there is more than one Widget
                              on a page, use the sort order to control the order
                              they are displayed

                              * region -- region the template will show. It
                              should match the template file

                              * template_file -- template file the region was
                              added to

                              * status -- if the widget is active or inactive



                              If you wanted to see the results of the Widget
                              without a layout, use the Placement without the
                              layout code sample below. If you would like to
                              learn more about Layouts use the Create Placement
                              code sample below. 
                            header:
                              anchor: widget-tutorial_create-placement
                          - type: http
                            data:
                              method: post
                              body: |-
                                {
                                  "widget_uuid": "{your-widget-uuid}",
                                  "entity_id": "{your-category-id}",
                                  "sort_order": 1,
                                  "region": "category_header_banner",
                                  "template_file": "pages/category",
                                  "status": "active"
                                }
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/content/placements
                              headers:
                                Accept: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{$$.env.X-Auth-Client}'
                                X-Auth-Token: '{$$.env.X-Auth-Token}'
                            header:
                              title: Create Placement Without a Layout
                              subtitle: >-
                                The region and sort_order are filled in to make
                                the Widget appear on the storefront.
                          - type: text
                            data: >-
                              To make use of Layouts for custom markdown use the
                              code sample below. Replace the `widget_uuid` with
                              your own.


                              Make note of the `placement_uuid` for use in
                              Layouts later.
                          - type: http
                            data:
                              method: post
                              body: |-
                                {
                                  "widget_uuid": "{your-widget-uuid}",
                                  "entity_id": "{your-category-id}",
                                  "template_file": "pages/category",
                                  "status": "active"
                                }
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/content/placements
                              headers:
                                Accept: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{$$.env.X-Auth-Client}'
                                X-Auth-Token: '{$$.env.X-Auth-Token}'
                            header:
                              title: Create Placement With a Layout
                          - type: code
                            data: |
                              {
                                  "data": {
                                      "uuid": "bb34b23b-0d4b-4b9b-9e24-c8b0dcfd5e08",
                                      "template_file": "pages/category",
                                      "region": "",
                                      "sort_order": 0,
                                      "entity_id": "21",
                                      "status": "active",
                                      "widget": {
                                          "uuid": "a8940709-5655-4401-a341-62c44e3180b2",
                                          "name": "Header Images",
                                          "widget_configuration": {
                                              "images": [
                                                  {
                                                      "image_url": "{where-the-image-should-link-to}",
                                                      "image_source": "https://cdn11.bigcommerce.com/s-n0i50vy/images/stencil/1280x1280/products/91/309/thekinfolktablecover_1024x1024__80715.1456436719.jpg?c=2&imbypass=on"
                                                  },
                                                  {
                                                      "image_url": "{where-the-image-should-link-to}",
                                                      "image_source": "https://cdn11.bigcommerce.com/s-n0i50vy/images/stencil/1280x1280/products/109/361/kinfolkessentialissue_1024x1024__22507.1456436715.jpg?c=2&imbypass=on"
                                                  },
                                                  {
                                                      "image_url": "{where-the-image-should-link-to}",
                                                      "image_source": "https://cdn11.bigcommerce.com/s-n0i50vy/images/stencil/500x659/products/85/282/livingwithplants_grande__26452.1456436666.jpg?c=2&imbypass=on"
                                                  }
                                              ],
                                              "_": {
                                                  "id": "a8940709-5655-4401-a341-62c44e3180b2"
                                              }
                                          },
                                          "widget_template": {
                                              "uuid": "3a1b0044-c9b3-47d3-9929-01ab0c20243b",
                                              "name": "Header Images",
                                              "schema": [],
                                              "template": "{{#each images}}<a href='{{image_url}}'><img src={{image_source}} style='width:33.3%'/></a>{{/each}}",
                                              "date_created": "2019-02-25T18:35:04.904Z",
                                              "date_modified": "2019-02-25T18:35:04.904Z",
                                              "kind": "custom"
                                          },
                                          "date_created": "2019-02-25T18:36:45.238Z",
                                          "date_modified": "2019-02-25T18:36:45.238Z",
                                          "description": ""
                                      },
                                      "date_created": "2019-02-25T18:37:10.658Z",
                                      "date_modified": "2019-02-25T18:37:10.658Z"
                                  },
                                  "meta": {}
                              }
                            header:
                              title: Sample Response
                              subtitle: Create Placement
                            config:
                              mode: json
                              highlightRange:
                                - from: '3'
                                  to: '3'
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Create a Layout


                              A Layout accepts any html. Using a layout can
                              allow you to create complicated widget placements
                              on the storefront. 


                              * entity_id -- The page, category, brand or
                              product ID the widget should appear on. 

                              * region -- region the template will show. It
                              should match the template file

                              * template_file -- template file the region was
                              added to

                              * markup -- this accepts any valid HTML and CSS
                              including style tags. 

                              * bc-placement -- A special id that is used in
                              layouts. It is populated with the placement ID.


                              The markup in the sample requst body adds the
                              style of opacity to each image on hover.
                            header:
                              anchor: widget-tutorial_create-layout
                          - type: http
                            data:
                              method: post
                              body: |-
                                {
                                  "entity_id": "{your-category-id}",
                                  "region": "category_header_banner",
                                  "template_file": "pages/category",
                                  "markup": "<style>img:hover{opacity: 0.3;}</style><div><div style='padding:5px margin-bottom:40px;'><bc-placement id='bb34b23b-0d4b-4b9b-9e24-c8b0dcfd5e08'></bc-placement></div></div>"
                                }
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/content/layouts
                              headers:
                                Accept: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{$$.env.X-Auth-Client}'
                                X-Auth-Token: '{$$.env.X-Auth-Token}'
                            header:
                              title: Create a Layout
                          - type: code
                            data: |-
                              {
                                  "data": {
                                      "uuid": "cacdadcf-07ec-43f3-aec4-f8e3382d7618",
                                      "template_file": "pages/category",
                                      "entity_id": "21",
                                      "region": "category_header_banner",
                                      "markup": "<style>img:hover{opacity: 0.3;}</style><div><div style='padding:5px;'><bc-placement id='bb34b23b-0d4b-4b9b-9e24-c8b0dcfd5e08'></bc-placement></div></div>",
                                      "date_created": "2019-02-25T18:38:08.455Z",
                                      "date_modified": "2019-02-25T18:38:08.455Z"
                                  },
                                  "meta": {}
                              }
                            header:
                              subtitle: Create Layout
                              title: Sample Response
                          - type: text
                            data: >-
                              At this point you should see the widget on the
                              category page of your choice. 
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Reuse the Widget Template


                              Now that the Widget Template has been created it
                              can be reused on a different page again. 


                              To reuse the Widget Template:

                              * Choose where to display the widget by either
                              creating a
                              [Region](/api-reference/storefront/widgets-api/regions/getcontentregions)
                              or use and existing one

                              * Decide if the Widget should appear on all pages
                              or if it should use an `entity_id`

                              * Get the [Widget Template
                              ID](/api-reference/storefront/widgets-api/widget-template/getwidgettemplates)

                              * [Create the
                              Widget](/api-reference/storefront/widgets-api/widget/createwidget)
                              with the Widget Template ID

                              * Either [Create a
                              Placement](/api-reference/storefront/widgets-api/placement/createplacement)
                              or [Create a
                              Layout](/api-reference/storefront/widgets-api/layout/createlayout)
                              using the Widget
                            header:
                              anchor: widget-tutorial_reuse-widget-template
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Resources


                              ### Related Endpoints

                              * [Widgets
                              API](/api-reference/storefront/widgets-api)


                              ### Related Articles

                              * [Widgets
                              Overview](/api-docs/storefront/widgets/widgets-overview)
                            header:
                              anchor: widget-tutorial_resources
                          - type: text
                            data: '---'
                          - type: text
                            data: >-

                              ### Next Steps

                              * [Wigets Code
                              Samples](/api-docs/storefront/widgets/widgets-code-samples)
                            header:
                              anchor: widget-tutorial_next-steps
                    - title: Widgets Code Samples
                      config:
                        sidebar:
                          token: code samples
                      route:
                        path: /widgets-code-samples
                      data:
                        blocks:
                          - type: html
                            data: "<h1>Widgets Code Samples</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#widget-code-sample_simple-list\">Simple List</a></li>\n        <li><a href=\"#widget-code-sample_simple-html\">Simple HTML</a></li>\n        <li><a href=\"#widget-code-sample_simple-text-styling\">Simple Text with Styling</a></li>\n        <li><a href=\"#widget-code-sample_you-tube-embed\">Youtube Embed with Layout</a></li>\n        <li><a href=\"#widget-code-sample_image-slider\">Image Slider</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              Below are widgets that can be used as building
                              blocks to expand on. Widgets are flexible and
                              re-useable making them ideal for creating custom
                              storefront. 
                          - type: text
                            data: '## Simple List'
                            header:
                              anchor: widget-code-sample_simple-list
                          - type: code
                            data: |

                              <ul>
                              {{#each list_items}}
                               <li style="color:{{color}};">{{text}}</li>
                              {{/each}}
                              </ul>
                            header:
                              title: Widget Template
                              subtitle: Simple List
                            config:
                              mode: html
                          - type: code
                            data: "{\n\t\"name\": \"Simple List Test\",\n\t\"widget_configuration\":{\n\t\t\"list_items\":[\n\t\t\t\t{\n\t\t\t\t\t\"color\": \"blue\",\n\t\t\t\t\t\"text\": \"The color is blue\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"color\": \"green\",\n\t\t\t\t\t\"text\": \"The color is green\"\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\t{\n\t\t\t\t\t\"color\": \"red\",\n\t\t\t\t\t\"text\": \"The color is red\"\n\t\t\t\t}\n\t\t\t]\n\t},\n\t\"widget_template_uuid\":\"your-template-uuid\"\n}"
                            header:
                              title: Sample Widget Configuration
                              subtitle: Simple List
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1551901776600
                            header:
                              title: Storefront View
                              subtitle: Simple List
                            config:
                              centered: true
                              fluid: true
                              maxWidth: '805'
                          - type: text
                            data: '---'
                          - type: text
                            data: '## Simple HTML'
                            header:
                              anchor: widget-code-sample_simple-html
                          - type: code
                            data: '{{{html}}}'
                            header:
                              title: Widget Template
                              subtitle: Simple HTML
                            config:
                              mode: html
                          - type: code
                            data: "{\n\t\"name\": \"Simple List Test\",\n\t\"widget_configuration\":{\n\t\t\"html\":\"<h1> This widget will accept any HTML </h1>\"\n\t},\n\t\"widget_template_uuid\":\"your-template-uuid\"\n}"
                            header:
                              title: Sample Widget Configuration
                              subtitle: Simple HTML
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1551901919454
                            header:
                              title: Storefront
                              subtitle: Simple HTML
                            config:
                              centered: true
                              fluid: true
                              maxWidth: '805'
                          - type: text
                            data: '---'
                          - type: text
                            data: '## Simple Text with Styling'
                            header:
                              anchor: widget-code-sample_simple-text-styling
                          - type: code
                            data: >-
                              "<style>#bc-simple-text-{{_.id}} {color:
                              {{color}};background:
                              {{background_color}};font-size:
                              {{font_size}};font-style:
                              {{font_style}};font-weight:
                              {{font_weight}};font-family:
                              {{font_family}};text-align:
                              {{text_align}};margin-top:
                              {{margin_top}};margin-bottom:
                              {{margin_bottom}};margin-left:
                              {{margin_left}};margin-right:
                              {{margin_right}};padding-top:
                              {{padding_top}};padding-bottom:
                              {{padding_bottom}};padding-left:
                              {{padding_left}};padding-right:
                              {{padding_right}};}</style><p
                              id='bc-simple-text-{{_.id}}'>{{text}}</p>"
                            header:
                              subtitle: Simple Text with Styling
                              title: Widget Template
                            config:
                              mode: html
                          - type: code
                            data: "{\n\t\"name\": \"Simple Text with Styling\",\n\t\"widget_configuration\":{\n\t\t\"text\": \"Simple Text with Styling\",\n\t\t\"_.id\": \"1\",\n\t\t\"color\": \"white\",\n\t\t\"background_color\": \"#3C1F8C\",\n\t\t\"font_size\": \"45px\",\n\t\t\"font_weight\": \"bold\",\n\t\t\"font_family\": \"'Palatino Linotype', 'Book Antiqua', Palatino, serif\",\n\t\t\"text_align\": \"center\",\n\t\t\"margin_right\": \"50px\",\n\t\t\"margin_left\": \"50px\",\n\t\t\"padding_top\": \"25px\",\n\t\t\"padding_bottom\": \"25px\"\n\t},\n\t\"widget_template_uuid\":\"your-template-uuid\"\n}"
                            header:
                              title: Sample Widget Configuration
                              subtitle: Simple Text with Styling
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1551902366345
                            header:
                              subtitle: Simple Text with Styling
                              title: Storefront
                            config:
                              centered: true
                              fluid: true
                              maxWidth: '805'
                          - type: text
                            data: '---'
                          - type: text
                            data: '## Youtube Embed with Layout'
                            header:
                              anchor: widget-code-sample_you-tube-embed
                          - type: code
                            data: >-
                              "<iframe    id='ytplayer-{{_.id}}'   
                              type='text/html'    width='{{width}}'   
                              height='{{height}}'   
                              src='https://www.youtube.com/embed/{{video_id}}?autoplay={{autoplay}}&color={{color}}&controls={{controls}}&disablekb={{disablekb}}&fs={{fs}}&rel={{rel}}&showinfo={{showinfo}}'   
                              frameborder='{{frameborder}}'>  </iframe>"
                            header:
                              title: Widget Template
                              subtitle: Youtube Embed with Layout
                            config:
                              mode: html
                          - type: code
                            data: "{\n\t\"name\": \"Website YouTube Embed\",\n\t\"widget_configuration\":{\n        \"width\": \"100%\",\n        \"height\": \"500px\",\n        \"video_id\": \"EhYBjzqd-nI\"\n\n\t},\n\t\"widget_template_uuid\":\"your-template-uuid\"\n}"
                            header:
                              subtitle: Youtube Embed with Layout
                              title: Sample Widget Configuration
                          - type: code
                            data: |-
                              {
                                  "region": "widget_page",
                                  "template_file": "pages/page",
                                  "markup": "<div style='text-align:center'; height:500px;><bc-placement id='c3c12f8b-d198-41b1-b2cc-f0801f6ad2e5'></bc-placement></div>"
                              }
                            header:
                              title: Sample Layout
                              subtitle: Youtube Embed with Layout
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1551902559005
                            header:
                              title: Storefront
                              subtitle: Youtube Embed with Layout
                            config:
                              fluid: true
                              centered: true
                              maxWidth: '805'
                          - type: text
                            data: '---'
                          - type: text
                            data: '## Image Slider'
                            header:
                              anchor: widget-code-sample_image-slider
                          - type: code
                            data: >-
                              "<ul class=\"slider\">\n{{#each slides}}\n<ul
                              class=\"slide\"><img class=\"mySlides\"
                              src=\"{{image}}\"/></ul>\n{{/each}}\n</ul>\n<script>\nvar
                              slideIndex = 0;\ncarousel();\nfunction carousel()
                              {\nvar i;\nvar x =
                              document.getElementsByClassName(\"mySlides\");\nfor
                              (i = 0; i < x.length; i++) {\nx[i].style.display =
                              \"none\"; \n}\nslideIndex++;\nif (slideIndex >
                              x.length) {slideIndex = 1}
                              \nx[slideIndex-1].style.display = \"block\";
                              \nsetTimeout(carousel, 4000); // Change image
                              every 4 seconds\n}\n</script>"
                            header:
                              title: Widget Template
                              subtitle: Image Slider
                          - type: code
                            data: |-
                              {
                                "name": "Home Page Slider",
                                "widget_configuration": {
                                    "slides": [
                                        {
                                            "image": "https://upload.wikimedia.org/wikipedia/commons/3/3f/Puppy_French_Bulldog.jpg"
                                        },
                                        {
                                            "image": "https://upload.wikimedia.org/wikipedia/commons/c/c1/2009-04-21_APBT_pup_on_deck.jpg"
                                        },
                                        {
                                            "image": "https://upload.wikimedia.org/wikipedia/commons/e/e7/Beagle_puppy_Cadet.jpg"
                                        }
                                    ]
                                },
                                "widget_template_uuid":"your-widget-id"
                              }
                            header:
                              subtitle: Image Slider
                              title: Widget Configuration
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1551906683783
                            header:
                              subtitle: Image Slider
                              title: Storefront
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Resources


                              ### Related Endpoints

                              * [Widgets
                              API](/api-reference/storefront/widgets-api)


                              ### Related Articles

                              * [Widgets
                              Overview](/api-docs/storefront/widgets/widgets-overview)

                              * [Widgets
                              Tutorial](/api-docs/storefront/widgets/widgets-tutorial)
                            header: {}
        - title: Cart and Checkout
          route:
            path: /cart-and-checkout
          data:
            children:
              - title: Overview
                route:
                  path: /cart-and-checkout-overview
                data:
                  blocks:
                    - type: html
                      data: "<h1>Cart and Checkout</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#cart-checkout_storefront-cart-and-checkout\">Storefront Cart and Checkout</a></li>\n        <li><a href=\"#cart-checkout_server-to-server-cart-and-checkout\">Server-to-Server Cart and Checkout</a></li>\n    <li><a href=\"#cart-checkout_troubleshooting\">Troubleshooting Cart Errors</a></li>\n        <li><a href=\"#cart-checkout_available-webhooks\">Available Webhooks</a></li>\n    \t\t<li><a href=\"#cart-checkout_oauth-scopes\">OAuth Scopes</a></li>\n        <li><a href=\"#cart-checkout_related-endpoints\">Related Endpoints</a></li>\n    \n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Storefront Cart and Checkout


                        The Storefront APIs are for managing the contents of a
                        shopper's cart and checkout using JavaScript in the
                        context of a storefront session. 


                        ### When to Use the Storefront APIs


                        * Analytics and Tracking

                        * Retrieving cart data client-side

                        * Quick Order Form

                        * Upsell applications


                        ### Using the Fetch API

                        The [Fetch
                        API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)
                        is an alternative to
                        [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest)
                        for making http requests in JavaScript. You can use the
                        Fetch API to interact with the Storefront APIs and
                        return a shopper's cart, checkout or order. 


                        Fetch API is supported by most modern browsers, but it
                        is not supported in Internet Explorer. We recommend
                        using a [Polyfill](https://github.com/github/fetch) for
                        Internet Explorer 10+ and XMLHttpRequest for earlier
                        versions.


                        To learn more about using the Fetch API with the
                        Storefront see our tutorial
                        [here](/api-docs/cart-and-checkout/working-sf-apis). 


                        You can run fetch requests from the browser console to
                        test, or you can  use the [Scripts
                        API](/api-docs/scripts/scripts-overview) to add inject
                        JavaScript into your theme's footer.
                      header:
                        anchor: cart-checkout_storefront-cart-and-checkout
                    - type: code
                      data: |-
                        <script>
                        console.log('Log Cart');
                        fetch('/api/storefront/cart', {
                          credentials: 'include'
                        }).then(function(response) {
                          return response.json();
                        }).then(function(myJson) {
                          console.log(myJson);
                        });
                        </script>
                      header:
                        title: Log Cart Details to the Console
                      config:
                        mode: html
                    - type: code
                      data: >-
                        <script>

                        console.log('Log Checkout');

                        fetch('/api/storefront/cart?includes=consignments.availableShippingOptions',
                        {
                                credentials: 'include'
                              })
                              .then(function(response) {
                                return response.json();
                              }).then(function(cartJson) {
                                console.log(cartJson);
                                return cartJson[0].id;
                              }).catch(function(error) {
                                console.log(error);
                              }).then(function(cartId) {
                                fetch('/api/storefront/checkouts/' + cartId, {
                                  credentials: 'include'
                                }).then(function(response) {
                                  return response.json();
                                }).then(function(checkoutJson) {
                                  console.log(checkoutJson);
                                }).catch(function(error) {
                                  console.log(error);
                                })
                              });

                        </script>
                      header:
                        title: Log Checkout Details to the Console
                      config:
                        mode: html
                    - type: code
                      data: >-
                        <script>

                        console.log("Log Order");

                        fetch('/api/storefront/order/{{checkout.order.id}}',
                        {credentials: 'include'})

                        .then(function(response) {

                        return response.json();

                        })

                        .then(function(myJson) {

                        console.log(myJson);

                        });

                        </script>
                      header:
                        title: Log Order Details to the Console
                      config:
                        mode: html
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Server-to-Server Cart and Checkout


                        The Server-to-Server APIs are for managing the contents
                        of a shopping cart and checkout remotely, from a server.
                        Using the Cart, Checkout and Payment API allows for a
                        fully headless ecommerce solution.


                        ### CaaS


                        [Commerce-as-a-Service](https://www.bigcommerce.com/commerce-as-a-service/)
                        is made possible with the Server-to-Server APIs. It lets
                        the underlying cart, checkout, order and payment APIs be
                        called from a separate app, allowing you to create a
                        completely custom checkout without ever touching the
                        BigCommerce storefront.



                        ## When to Use

                        * Modifying cart contents, such as price matching

                        * Taking a shopper through cart and checkout using an
                        app

                        * Quote Builder - Building a cart then restoring it on
                        the storefront

                        * Native mobile apps

                        * Pre-filling customer information
                      header:
                        anchor: cart-checkout_server-to-server-cart-and-checkout
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Troubleshooting Cart Errors

                        We will go over common Storefront Cart and Checkout as
                        well as Server to Server Cart and Checkout errors. Each
                        scenario will include the error message and how to fix
                        the error. The most common errors are listed below.


                        ### Please create some text for the API option [422]

                        *Server to Server Cart API*


                        ***Issue:*** When a cart is created containing a product
                        that has an incorrect or missing text modifier. 


                        ***Resolution:***

                        Options and modifiers refer to a list of choices on a
                        product. Options are used to build out variants and
                        modifiers are not tied to variants at all. To learn more
                        about options and modifiers see [Products
                        Overview](/api-docs/catalog/products-overview#products-overview_modifier-options).


                        To add a product to the cart that has a single modifier
                        (text field), POST to the [Cart
                        API](/api-reference/cart-checkout/server-server-cart-api/cart/createacart)
                        without the `variant_id`. 
                      header:
                        anchor: cart-checkout_troubleshooting
                    - type: code
                      data: |

                        {
                          "line_items": [
                            {
                              "quantity": 1,
                              "product_id": 1001,
                              "option_selections": [
                                {
                                  "option_id": 123,
                                  "option_value": "Hello!"
                                }
                              ]
                            }
                          ]
                        }
                      header:
                        title: Single Modifier
                      config:
                        mode: json
                    - type: text
                      data: >-
                        To add a product to the cart that has one option (radio
                        button)  associated with it, use just the `variant_id`
                        in the request. 
                    - type: code
                      data: |-
                        {
                          "line_items": [
                            {
                              "quantity": 1,
                              "product_id": 1001,
                              "variant_id": 2331
                            }
                        ]
                        }
                      header:
                        title: Single Option
                      config:
                        mode: json
                    - type: text
                      data: >-
                        To add a product that has both an option and a modifier
                        associated with it, then use the `option_id` and
                        `option_value`. This example uses a radio button
                        (option) and a text field (modifier).
                    - type: code
                      data: |
                        {
                          "line_items": [
                            {
                              "quantity": 1,
                              "product_id": 101,
                              "option_selections": [
                                {
                                  "option_id": 231,
                                  "option_value": 456
                                },

                                {
                                  "option_id": 123,
                                  "option_value": "Hello!"
                                }
                              ]
                            }
                          ]
                      header:
                        title: Modifier and Option
                      config:
                        mode: json
                    - type: text
                      data: >-
                        ### Missing line_items in request body [422]


                        *Server to Server Cart API*


                        ***Issue:*** 

                        When a required product modifier is missing. A product
                        can have a modifier that is not required. In those cases
                        the product can be added to a cart without the
                        modifier. 


                        ***Resolution:***

                        Use the [Get
                        Products](/api-reference/catalog/catalog-api/products/getproducts)
                        or [Get
                        Modifier](/api-reference/catalog/catalog-api/product-modifiers/getmodifiers)
                        endpoints to return the modifier ID. The `modifier_id` =
                        `option_id`. 


                        To create a cart with a product modifier:
                    - type: code
                      data: |

                        {
                          "line_items": [
                            {
                              "quantity": 1,
                              "product_id": 1001,
                              "option_selections": [
                                {
                                  "option_id": 123,
                                  "option_value": "Hello!"
                                }
                              ]
                            }
                          ]
                        }
                      header:
                        title: Create cart with modifier
                    - type: text
                      data: >-
                        ### A shipping address for this order is incomplete
                        [422]

                        *Server to Server Cart API*


                        ***Issue:***

                        This can return when the customer ID of a cart has
                        changed. 


                        ***Resolution:***

                        The customer ID is linked to discounts and pricing
                        available to that customer. If that is changed then
                        anything that affects the cart price is invalidated.
                        This includes coupons, discounts, taxes and shipping.


                        A cart should be created with the `customer_id` as part
                        of the request body. Use the [Get
                        Customers](/api-reference/customer-subscribers/customers-api/customers/getallcustomers)
                        endpoint to get the `customer_id`. 


                        To create a cart with a `customer_id`:
                    - type: code
                      data: |
                        {
                          “customer_id”: 12,
                          "line_items": [
                            {
                              "quantity": 5,
                              "product_id": 191
                            }
                          ]
                        }
                      header:
                        title: Create cart with customer ID
                      config:
                        mode: json
                    - type: text
                      data: >-
                        ### This product has options, variant ID is required
                        [422]

                        *Server to Server Cart API*


                        ***Issue:***  When a product has options and variant ID
                        is not supplied in either the create or update cart
                        request. 


                        ***Resolution:***

                        To get the variant ID use the [Get
                        Products](/api-reference/catalog/catalog-api/products/getproducts)
                        endpoint or the [Get
                        Variants](/api-reference/catalog/catalog-api/product-variants/getvariantsbyproductid)
                        endpoint.

                        To create a cart with a variant ID:
                    - type: code
                      data: |-
                        {
                          "line_items": [
                            {
                              "quantity": 1,
                              "product_id": 1001,
                              "variant_id": 2331
                            }
                        ]
                        }
                      header:
                        title: Create cart with variant ID
                      config:
                        mode: json
                    - type: text
                      data: >-
                        ***Issue:***

                        The incorrect `option_id` is supplied.


                        ***Resolution:***

                        To get the correct option_id make a request to [Get
                        Products

                        ](/api-reference/catalog/catalog-api/products/getproducts)
                        or [Get
                        Options](/api-reference/catalog/catalog-api/product-variant-options/getoptions). 
                    - type: code
                      data: |
                        {
                          "line_item": {
                            "quantity": 1,
                            "product_id": 76,
                            "list_price": 170.00,
                            "option_selections": [
                              {
                                "option_id": 21506,
                                "option_value": 10090
                              }
                            ]
                          }
                        }
                      header:
                        title: Create cart option ID
                    - type: text
                      data: >-
                        *Storefront Cart API*


                        ***Issue:***


                        * Missing required modifier on the storefront. This can
                        include a text modifier with no selection. Make sure the
                        optionValue is not blank.

                        * The variantID is incorrect.

                        * The modifierID is incorrect.



                        **Resolution:**

                        To add a product to the cart that has a single modifier
                        (text field), POST to the [Cart
                        API](/api-reference/cart-checkout/storefront-cart-api/cart/createacart)
                        without the `variant_id`. Use the `optionId` and
                        `optionValue` instead. 
                    - type: code
                      data: |-
                        {
                          "lineItems": [
                            {
                              "quantity": 1,
                              "product_id": 1001,
                              "optionSelections": [
                                {
                                  "optionId": 123,
                                  "optionValue": "Hello!"
                                }
                              ]
                            }
                          ]
                        }
                      header:
                        title: Create cart optionId and optionValue
                      config:
                        mode: json
                    - type: text
                      data: >-
                        To add a product to the cart that has one option (radio
                        button)  associated with it, use just the `variant_id`
                        in the request. 
                    - type: code
                      data: |-
                        {
                          "lineItems": [
                            {
                              "quantity": 1,
                              "productId": 1001,
                              "variantId": 2331
                            }
                        ]
                        }
                      header:
                        title: Create Storefront Cart variantID
                      config:
                        mode: json
                    - type: text
                      data: >-
                        To add a product that has both an option and a modifier
                        associated with it, then use the `option_id` and
                        `option_value`. This example uses a radio button
                        (option) and a text field (modifier).
                    - type: code
                      data: |-
                        {
                          "lineItems": [
                            {
                              "quantity": 1,
                              "product_id": 101,
                              "optionSelections": [
                                {
                                  "optionId": 231,
                                  "optionValue": 456
                                },

                                {
                                  "optionId": 123,
                                  "optionValue": "Hello!"
                                }
                              ]
                            }
                          ]
                        }
                      header:
                        title: Add item with option and modifier
                      config:
                        mode: json
                    - type: text
                      data: >+
                        ### Internal Server Error [500]


                        *Server to Server Cart API* 


                        ***Issue:***

                        When less than a product’s minimum required purchase or
                        more than the maximum allowed purchase is added to cart.


                        ***Resolution:***

                        Check the product for `order_quantity_minimum` and
                        `order_quantity_maximum `for the correct amount to add
                        the cart. Use the [Get
                        Product](/api-reference/catalog/catalog-api/products/getproducts)
                        endpoint.


                        ***Issue:***

                        Adding more product quantity to a cart than what’s in
                        stock. 


                        ***Resolution:***

                        Check the product for `inventory_level` to see how many
                        are in stock. Use the [Get
                        Product](/api-reference/catalog/catalog-api/products/getproducts)
                        endpoint.


                        ***Issue:***

                        Trying to edit a Cart that does not exist. 


                        ***Resolution:***

                        Carts are only valid 30 days past the
                        `date_last_modified`. Check the [Get
                        Carts](/api-reference/cart-checkout/storefront-cart-api/cart/getacart)
                        endpoint for the current available session cart.


                        *Storefront Cart API*


                        ***Issue:***

                        When less than a product’s minimum required purchase or
                        more than the maximum allowed purchase is added to cart.
                        Use the [Get
                        Product](/api-reference/catalog/catalog-api/products/getproducts)
                        endpoint to check for min/max purchase restrictions.


                        ***Resolution:***

                        Check the product for order_quantity_minimum and
                        order_quantity_maximum for the correct amount to add the
                        cart. Use the [Get
                        Product](/api-reference/catalog/catalog-api/products/getproducts)
                        endpoint.

                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Available Webhooks

                        *
                        [Orders](/api-docs/getting-started/webhooks/webhook-events#webhook-events_orders)

                        *
                        [SKU](/api-docs/getting-started/webhooks/webhook-events#webhook-events_sku)

                        *
                        [Cart](/api-docs/getting-started/webhooks/webhook-events#webhook-events_cart)
                      header:
                        anchor: cart-checkout_available-webhooks
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## OAuth Scopes

                        * Carts

                        * Checkouts

                        * Products

                        * Checkout Content

                        * Order Transactions


                        For more details and a full list of available scopes,
                        see [Oauth
                        Scopes](/api-docs/getting-started/basics/authentication#authentication_oauth-scopes).
                      header:
                        anchor: cart-checkout_oauth-scopes
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Related Endpoints

                        * [Storefront
                        Cart](/api-reference/cart-checkout/storefront-cart-api)

                        * [Storefront
                        Checkout](/api-reference/cart-checkout/storefront-checkout-api)

                        * [Server-to-Server
                        Cart](/api-reference/cart-checkout/server-server-cart-api)

                        * [Server-to-Server
                        Checkout](/api-reference/cart-checkout/server-server-checkout-api)
                      header:
                        anchor: cart-checkout_related-endpoints
              - title: Working with Storefront APIs
                config:
                  sidebar:
                    token: tutorial
                route:
                  path: /working-sf-apis
                data:
                  blocks:
                    - type: html
                      data: "<h1>Working with the Storefront APIs</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#working-sf-apis_prerequisites\">Prerequisites</a></li>\n        <li><a href=\"#working-sf-apis_create-postdata\">Create postData() Function</a></li>\n        <li><a href=\"#working-sf-apis_storefront-cart\">Storefront Cart</a></li>\n    \t\t<li><a href=\"#working-sf-apis_storefront-checkout\">Storefront Checkout</a></li>\n        <li><a href=\"#working-sf-apis_troubleshooting\">Troubleshooting</a></li>\n    \t\t<li><a href=\"#working-sf-apis_realated-endpoints\">Related Endpoints</a></li>\n    \n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Prerequisites:

                        * Chrome/Firefox/Safari - Fetch does not work every
                        version of [Internet
                        Explorer](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Browser_compatibility).
                        We recommend installing a
                        [polyfill](https://github.com/github/fetch#html), then
                        use fetch as usual.

                        * BigCommerce Store with at least two
                        [products](/api-reference/catalog/catalog-api/products/createproduct)
                        and a [shipping
                        option](/api-docs/shipping/shipping-overview#shipping_shipping-zone-methods)
                        available. 

                        * Familiar with browser developer console


                        This tutorial reviews the Fetch API and then uses it to
                        complete some storefront actions. 


                        Interaction with the Storefront APIs should be done
                        using JavaScript. The Storefront APIs do not require API
                        Tokens to work. The URL should be served over https and
                        be on the [permanent
                        URL](https://forum.bigcommerce.com/s/article/Changing-Domains);
                        otherwise, it can cause
                        [CORs](https://developers.google.com/web/ilt/pwa/working-with-the-fetch-api#cross-origin_requests)
                        errors in the console.
                      header:
                        anchor: working-sf-apis_prerequisites
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create postData() function


                        Below is the function we are going to use to create a
                        new cart using the Storefront Cart API.
                      header:
                        anchor: working-sf-apis_create-postdata
                    - type: code
                      data: |-
                        postData(`/api/storefront/cart`, {
                                "lineItems": [
                                {
                                    "quantity": 1,
                                    "productId": 196
                                },
                                {
                                    "quantity": 1,
                                    "productId": 184
                                }
                                ]}
                            )
                          .then(data => console.log(JSON.stringify(data))) 
                          .catch(error => console.error(error));

                        function postData(url = ``, cartItems = {}) {
                              return fetch(url, {
                                  method: "POST",
                                  credentials: "same-origin",
                                  headers: {
                                      "Content-Type": "application/json" },
                                  body: JSON.stringify(cartItems), 
                              })
                              .then(response => response.json()); 
                          }
                      header:
                        title: postData
                      config:
                        mode: js
                    - type: text
                      data: >-
                        Let’s review the function. First, we call the
                        `postData()` function, which is defined at the bottom of
                        the code excerpt.
                    - type: callout
                      data:
                        body: >-
                          JavaScript allows function declarations to be
                          [hoisted](https://scotch.io/tutorials/understanding-hoisting-in-javascript#toc-hoisting-functions),
                          so the function postData() can be called before being
                          defined.
                    - type: text
                      data: >-
                        The `postData()` function accepts two arguments: a URL
                        string and a body. 


                        The URL string that we pass in is
                        `/api/storefront/cart`. There is no need to provide the
                        full store URL when making the request in the browser
                        because the URL path appends to the current website URL.


                        For the request body, we pass in the `lineItems` array,
                        which contains the product IDs and quantities to add to
                        cart. 


                        Note that when we define the `postData` function, we set
                        the body parameter to cartItems, which is an empty
                        object. When the `lineItems` array is passed to the
                        function, the cartItems object automatically wraps the
                        array in a set of outer curly braces. Keep this in mind
                        when adapting this code to accept a different request
                        body--otherwise, your request body may wind up with an
                        extra set of curly braces.  


                        After the line items, fetch uses
                        [then()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then)
                        which accepts the data that is returned and prints it to
                        the console. 


                        If there is an error, the next line
                        [catch()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch)
                        prints the returned error to the console. 
                    - type: code
                      data: |-
                        function postData(url = ``, cartItems = {}) {
                              return fetch(url, {
                                  method: "POST",
                                  credentials: "same-origin",
                                  headers: {
                                      "Content-Type": "application/json" },
                                  body: JSON.stringify(cartItems), 
                              })
                             .then(response => response.json()); 
                          }
                    - type: text
                      data: >-
                        Next, we are going to walk through the postData()
                        function above. Here the arguments for `url` and
                        `cartItems` are defined. In later examples, you will see
                        we can pass in different items depending on what we need
                        in the fetch request.  postData() returns another
                        function, fetch(). Fetch takes a URL, method and a body.
                        Other
                        [arguments](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Supplying_request_options)
                        can be added such as credentials, headers, etc. 


                        [Credentials](https://github.com/github/fetch#sending-cookies)
                        are set to
                        [same-origin](https://developer.mozilla.org/en-US/docs/Web/API/Request/credentials).
                        The credentials that you need will depend on your app
                        setup. Review your app setup carefully; otherwise, this
                        will cause
                        [CORs](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS)
                        errors. Below is a simplified guide on when to use each
                        type of credential.


                        | Credential | When to Use |

                        | -- | -- |

                        | same-origin | If the request and response server is
                        the same. Ex. bigcommerce.com => bigcommerce.com |

                        | include | If the request and response domain are
                        different. Ex. bigcommerce.com =>
                        developers.bigcommerce.com  |

                        | omit | To disable sending cookies to any domain |


                        Content-Type is set to application/json. The body data
                        needs to match the content-type. BigCommerce only sends
                        and accepts the Storefront API  data in json. 

                         The body is set to [JSON.stringify()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) which converts JavaScript values to a string. 

                        Finally, `.then()` is parsing the response to JSON. 


                        Now that we have the basics of creating a function with
                        the fetch() API, we are going to use it to create a
                        cart, get a cart and delete cart items. 
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Storefront Cart


                        ### Create Cart


                        First, we pass in the request URL to create a cart into
                        the function call. 


                        Then we need to pass in the `lineItems` array. The
                        `quantity` and `productId` are required to create a
                        cart. If there are
                        [variants](/api-reference/catalog/catalog-api/product-variants/getvariantsbyproductid)
                        then the variantId or optionId with the optionValues
                        need to be added.  See [Create
                        Cart](/api-reference/cart-checkout/storefront-cart-api/cart/createacart)
                        for more examples. The response will be printed to the
                        browser console.  Make sure to note the value for cartId
                        as it will be used later.
                      header:
                        anchor: working-sf-apis_storefront-cart
                    - type: code
                      data: |-
                        postData(`/api/storefront/cart`, {
                                "lineItems": [
                                {
                                    "quantity": 1,
                                    "productId": 191
                                },
                                {
                                    "quantity": 1,
                                    "productId": 185
                                }
                                ]}
                            )
                          .then(data => console.log(JSON.stringify(data))) 
                          .catch(error => console.error(error));

                        function postData(url = ``, cartItems = {}) {
                              return fetch(url, {
                                  method: "POST",
                                  credentials: "same-origin",
                                  headers: {
                                      "Content-Type": "application/json" },
                                  body: JSON.stringify(cartItems), 
                              })
                              .then(response => response.json()); 
                          }
                      header:
                        title: Create Cart
                      config:
                        mode: js
                    - type: code
                      data: "{\n\t\"id\": \"1650fb51-172b-4cde-a220-90c6a8ef9293\",\n\t\"customerId\": 0,\n\t\"email\": \"\",\n\t\"currency\": {\n\t\t\"name\": \"US Dollars\",\n\t\t\"code\": \"USD\",\n\t\t\"symbol\": \"$\",\n\t\t\"decimalPlaces\": 2\n\t},\n\t\"isTaxIncluded\": false,\n\t\"baseAmount\": 73.95,\n\t\"discountAmount\": 0,\n\t\"cartAmount\": 73.95,\n\t\"coupons\": [],\n\t\"discounts\": [{\n\t\t\"id\": \"7349b13a-1453-4050-a769-1a6ad1823369\",\n\t\t\"discountedAmount\": 0\n\t}, {\n\t\t\"id\": \"4a69cbdf-4320-4e1f-852b-0edc2a55f13a\",\n\t\t\"discountedAmount\": 0\n\t}],\n\t\"lineItems\": {\n\t\t\"physicalItems\": [{\n\t\t\t\"id\": \"7349b13a-1453-4050-a769-1a6ad1823369\",\n\t\t\t\"parentId\": null,\n\t\t\t\"variantId\": 362,\n\t\t\t\"productId\": 191,\n\t\t\t\"sku\": \"\",\n\t\t\t\"name\": \"Openhouse No. 3\",\n\t\t\t\"url\": \"https://{store_url)/all/openhouse-no-3/\",\n\t\t\t\"quantity\": 1,\n\t\t\t\"brand\": \"Openhouse Magazine\",\n\t\t\t\"isTaxable\": true,\n\t\t\t\"imageUrl\": \"https://cdn11.bigcommerce.com/s-{store_hash)/products/191/images/475/openhousevol3_1024x1024__59692__16355.1534344544.330.500.jpg?c=2\",\n\t\t\t\"discounts\": [],\n\t\t\t\"discountAmount\": 0,\n\t\t\t\"couponAmount\": 0,\n\t\t\t\"listPrice\": 27.95,\n\t\t\t\"salePrice\": 27.95,\n\t\t\t\"extendedListPrice\": 27.95,\n\t\t\t\"extendedSalePrice\": 27.95,\n\t\t\t\"isShippingRequired\": true,\n\t\t\t\"type\": \"physical\",\n\t\t\t\"giftWrapping\": null\n\t\t}, {\n\t\t\t\"id\": \"4a69cbdf-4320-4e1f-852b-0edc2a55f13a\",\n\t\t\t\"parentId\": null,\n\t\t\t\"variantId\": 356,\n\t\t\t\"productId\": 185,\n\t\t\t\"sku\": \"\",\n\t\t\t\"name\": \"Utility Caddy\",\n\t\t\t\"url\": \"https://{store_url)/all/utility-caddy/\",\n\t\t\t\"quantity\": 1,\n\t\t\t\"brand\": \"OFS\",\n\t\t\t\"isTaxable\": true,\n\t\t\t\"imageUrl\": \"https://cdn11.bigcommerce.com/s-{store_hash)/products/185/images/449/utilitybucket1_1024x1024__78563__75042.1534344535.330.500.jpg?c=2\",\n\t\t\t\"discounts\": [],\n\t\t\t\"discountAmount\": 0,\n\t\t\t\"couponAmount\": 0,\n\t\t\t\"listPrice\": 46,\n\t\t\t\"salePrice\": 46,\n\t\t\t\"extendedListPrice\": 46,\n\t\t\t\"extendedSalePrice\": 46,\n\t\t\t\"isShippingRequired\": true,\n\t\t\t\"type\": \"physical\",\n\t\t\t\"giftWrapping\": null\n\t\t}],\n\t\t\"digitalItems\": [],\n\t\t\"giftCertificates\": [],\n\t\t\"customItems\": []\n\t},\n\t\"createdTime\": \"2018-11-06T19:22:51+00:00\",\n\t\"updatedTime\": \"2018-11-06T19:22:51+00:00\"\n}"
                      header:
                        title: Create Cart Response
                    - type: text
                      data: >-
                        ### Get Cart


                        The function below is slightly different. The postData()
                        that was present in Create a Cart above is removed since
                        the function only needs to print the response data to
                        the console. To return the full product data in a cart,
                        an include query parameter must be added. See [Get Cart
                        endpoint](/api-reference/cart-checkout/storefront-cart-api/cart/getacart)
                        for more details. 
                    - type: code
                      data: >-
                        fetch('/api/storefront/cart?include=lineItems.digitalItems.options,lineItems.physicalItems.options',
                        {
                          credentials: 'same-origin'}
                             )
                          .then(function(response) {
                            return response.json();
                          })
                          .then(function(myJson) {
                            console.log(JSON.stringify(myJson));
                          });
                      header:
                        title: Get Cart
                    - type: code
                      data: "[{\n\t\"id\": \"1650fb51-172b-4cde-a220-90c6a8ef9293\",\n\t\"customerId\": 0,\n\t\"email\": \"\",\n\t\"currency\": {\n\t\t\"name\": \"US Dollars\",\n\t\t\"code\": \"USD\",\n\t\t\"symbol\": \"$\",\n\t\t\"decimalPlaces\": 2\n\t},\n\t\"isTaxIncluded\": false,\n\t\"baseAmount\": 73.95,\n\t\"discountAmount\": 0,\n\t\"cartAmount\": 73.95,\n\t\"coupons\": [],\n\t\"discounts\": [{\n\t\t\"id\": \"7349b13a-1453-4050-a769-1a6ad1823369\",\n\t\t\"discountedAmount\": 0\n\t}, {\n\t\t\"id\": \"4a69cbdf-4320-4e1f-852b-0edc2a55f13a\",\n\t\t\"discountedAmount\": 0\n\t}],\n\t\"lineItems\": {\n\t\t\"physicalItems\": [{\n\t\t\t\"id\": \"7349b13a-1453-4050-a769-1a6ad1823369\",\n\t\t\t\"parentId\": null,\n\t\t\t\"variantId\": 362,\n\t\t\t\"productId\": 191,\n\t\t\t\"sku\": \"\",\n\t\t\t\"name\": \"Openhouse No. 3\",\n\t\t\t\"url\": \"https://{store_url)/all/openhouse-no-3/\",\n\t\t\t\"quantity\": 1,\n\t\t\t\"brand\": \"Openhouse Magazine\",\n\t\t\t\"isTaxable\": true,\n\t\t\t\"imageUrl\": \"https://cdn11.bigcommerce.com/s-{store_hash)/products/191/images/475/openhousevol3_1024x1024__59692__16355.1534344544.330.500.jpg?c=2\",\n\t\t\t\"discounts\": [],\n\t\t\t\"discountAmount\": 0,\n\t\t\t\"couponAmount\": 0,\n\t\t\t\"listPrice\": 27.95,\n\t\t\t\"salePrice\": 27.95,\n\t\t\t\"extendedListPrice\": 27.95,\n\t\t\t\"extendedSalePrice\": 27.95,\n\t\t\t\"isShippingRequired\": true,\n\t\t\t\"type\": \"physical\",\n\t\t\t\"giftWrapping\": null,\n\t\t\t\"options\": [{\n\t\t\t\t\"name\": \"Add a $5 Donation\",\n\t\t\t\t\"nameId\": 82,\n\t\t\t\t\"value\": \"\",\n\t\t\t\t\"valueId\": 186\n\t\t\t}]\n\t\t}, {\n\t\t\t\"id\": \"4a69cbdf-4320-4e1f-852b-0edc2a55f13a\",\n\t\t\t\"parentId\": null,\n\t\t\t\"variantId\": 356,\n\t\t\t\"productId\": 185,\n\t\t\t\"sku\": \"\",\n\t\t\t\"name\": \"Utility Caddy\",\n\t\t\t\"url\": \"https://{store_url)/all/utility-caddy/\",\n\t\t\t\"quantity\": 1,\n\t\t\t\"brand\": \"OFS\",\n\t\t\t\"isTaxable\": true,\n\t\t\t\"imageUrl\": \"https://cdn11.bigcommerce.com/s-{store_hash)/products/185/images/449/utilitybucket1_1024x1024__78563__75042.1534344535.330.500.jpg?c=2\",\n\t\t\t\"discounts\": [],\n\t\t\t\"discountAmount\": 0,\n\t\t\t\"couponAmount\": 0,\n\t\t\t\"listPrice\": 46,\n\t\t\t\"salePrice\": 46,\n\t\t\t\"extendedListPrice\": 46,\n\t\t\t\"extendedSalePrice\": 46,\n\t\t\t\"isShippingRequired\": true,\n\t\t\t\"type\": \"physical\",\n\t\t\t\"giftWrapping\": null,\n\t\t\t\"options\": []\n\t\t}],\n\t\t\"digitalItems\": [],\n\t\t\"giftCertificates\": [],\n\t\t\"customItems\": []\n\t},\n\t\"createdTime\": \"2018-11-06T19:22:51+00:00\",\n\t\"updatedTime\": \"2018-11-06T19:22:51+00:00\"\n}]"
                      header:
                        title: Get Cart Response
                      config:
                        mode: json
                    - type: text
                      data: >-
                        ### Delete Cart Item


                        In the code below there are a few changes. One is the
                        arguments for deleteCartItem() now accept a cartId and
                        itemId as strings. These are passed into the
                        deleteCartItem() at the top. The URL is being built
                        using concatenation. 


                        We have also introduced a new way to handle errors.
                        Error handling in fetch can be pulled out into a
                        standalone function and be used to return any data or
                        messages you want as a way to keep the code
                        [DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself). 
                    - type: callout
                      data:
                        type: warning
                        body: Deleting the last item in your cart deletes the cart.
                    - type: code
                      data: >-
                        deleteCartItem(`/api/storefront/carts/`,
                        `c057c316-71d8-4b58-86e1-f6f2ed003683`,
                        `94bf4255-13a0-4109-b37a-5122ee3dd18c`)
                          .then(data => console.log(JSON.stringify(data)))
                          .then(handleErrors) 
                          .catch(error => console.error(error));

                        function handleErrors(response) {
                            if (!response.ok) {
                                throw Error(response.statusText);
                            }
                            return response;
                        }


                        function deleteCartItem(url = ``, cartId = ``, itemId =
                        ``) {
                              return fetch(url + cartId + '/items/' + itemId , {
                                  method: "DELETE",
                                  credentials: "same-origin",
                                  headers: {
                                      "Content-Type": "application/json;,          
                                      },
                                 body: JSON.stringify(data),
                              })
                              .then(response => response.json()); 
                          }
                      header:
                        title: Delete Cart Item
                      config:
                        mode: js
                    - type: text
                      data: >-
                        ## Storefront Checkout

                        Next, we will cover using the Storefront Checkout to add
                        a billing address, add a shipping address and update a
                        shipping address to add the shipping option.


                        Make sure you have created a cart using the Storefront
                        Cart, added two different `lineItems` and have a
                        shipping method set up on the store. See [Create
                        Cart](#working-sf-apis_storefront-cart) above if you
                        deleted your cart and need to make a new one. 
                      header:
                        anchor: working-sf-apis_storefront-checkout
                    - type: callout
                      data:
                        body: checkoutId and the cartId are same.
                    - type: text
                      data: >-
                        ### Add billing address to checkout


                        A billing address is required to complete a checkout. In
                        postData() we pass in the `checkoutId` and the billing
                        address object.
                    - type: code
                      data: >
                        postData(`/api/storefront/checkouts/`,
                        `e8b7c677-f67a-4e39-a5ed-f405c9a06bcf`, {

                        "firstName": "Jane",
                                    "lastName": "Doe",
                                    "email": "janedoe@email.com",
                                    "company": "BigCommerce",
                                    "address1": "123 Main Street",
                                    "address2": "Apt 1",
                                    "city": "Austin",
                                    "stateOrProvinceCode": "TX",
                                    "countryCode": "USA",
                                    "postalCode": "78751"
                        })
                          .then(data => console.log(JSON.stringify(data))) 
                          .catch(error => console.error(error));

                        function postData(url = ``, checkoutId = ``, data = {},)
                        {
                            return fetch(url + checkoutId + `/billing-address`,  {
                                method: "POST", 
                                credentials: "same-origin",
                                headers: {
                                    "Content-Type": "application/json",
                                },
                                body: JSON.stringify(data),
                            })
                            .then(response => response.json()); 
                        }
                      header:
                        title: Add billing address
                    - type: text
                      data: >-
                        ### Add shipping address or consignment to checkout 

                        A consignment consists of a shipping address with the
                        associated lineItems.  At a minimum, at least one
                        shipping address with line items and shipping options
                        must be part of the checkout.


                        A shipping address can only be added to checkout with
                        lineItems. If multiple shipping locations are used,
                        match each `lineItem` with the correct shipping address
                        as shown in the example below. For more examples see
                        [Create
                        Consignment](/api-reference/cart-checkout/storefront-checkout-api/checkout/checkoutsconsignmentsbycheckoutidpost).


                        When adding a shipping address to the checkout
                        `?include=consignments.availableShippingOptions` must be
                        included to return the shipping options available for
                        any address. To add the shipping option a [put
                        request](/api-reference/cart-checkout/storefront-checkout-api/checkout/checkoutsconsignmentsbycheckoutidandconsignmentidput)
                        must be sent for each consignment. We will cover this in
                        the next section. 


                        To get the line item IDs needed for consignment, send a
                        request to [/GET
                        Checkout](/api-reference/cart-checkout/storefront-checkout-api/checkout/checkoutsbycheckoutidget).
                        Try to modify the /GET Cart request so it returns
                        Checkout Details. If you are having trouble, see the
                        code sample below. 
                    - type: code
                      data: >-
                        fetch('/api/storefront/checkouts/1650fb51-172b-4cde-a220-90c6a8ef9293',
                        {
                          credentials: 'same-origin'}
                             )
                          .then(function(response) {
                            return response.json();
                          })
                          .then(function(myJson) {
                            console.log(JSON.stringify(myJson));
                          });
                      header:
                        title: Get Checkout by ID
                      config:
                        mode: js
                    - type: code
                      data: "{\n\t\"id\": \"1650fb51-172b-4cde-a220-90c6a8ef9293\",\n\t\"cart\": {\n\t\t\"id\": \"1650fb51-172b-4cde-a220-90c6a8ef9293\",\n\t\t\"customerId\": 0,\n\t\t\"email\": \"janedoe@email.com\",\n\t\t\"currency\": {\n\t\t\t\"name\": \"US Dollars\",\n\t\t\t\"code\": \"USD\",\n\t\t\t\"symbol\": \"$\",\n\t\t\t\"decimalPlaces\": 2\n\t\t},\n\t\t\"isTaxIncluded\": false,\n\t\t\"baseAmount\": 73.95,\n\t\t\"discountAmount\": 0,\n\t\t\"cartAmount\": 73.95,\n\t\t\"coupons\": [],\n\t\t\"discounts\": [{\n\t\t\t\"id\": \"7349b13a-1453-4050-a769-1a6ad1823369\",\n\t\t\t\"discountedAmount\": 0\n\t\t}, {\n\t\t\t\"id\": \"4a69cbdf-4320-4e1f-852b-0edc2a55f13a\",\n\t\t\t\"discountedAmount\": 0\n\t\t}],\n\t\t\"lineItems\": {\n\t\t\t\"physicalItems\": [{\n\t\t\t\t\"id\": \"7349b13a-1453-4050-a769-1a6ad1823369\",\n\t\t\t\t\"parentId\": null,\n\t\t\t\t\"variantId\": 362,\n\t\t\t\t\"productId\": 191,\n\t\t\t\t\"sku\": \"\",\n\t\t\t\t\"name\": \"Openhouse No. 3\",\n\t\t\t\t\"url\": \"https://{store_url)/all/openhouse-no-3/\",\n\t\t\t\t\"quantity\": 1,\n\t\t\t\t\"brand\": \"Openhouse Magazine\",\n\t\t\t\t\"isTaxable\": true,\n\t\t\t\t\"imageUrl\": \"https://cdn11.bigcommerce.com/s-{store_hash)/products/191/images/475/openhousevol3_1024x1024__59692__16355.1534344544.330.500.jpg?c=2\",\n\t\t\t\t\"discounts\": [],\n\t\t\t\t\"discountAmount\": 0,\n\t\t\t\t\"couponAmount\": 0,\n\t\t\t\t\"listPrice\": 27.95,\n\t\t\t\t\"salePrice\": 27.95,\n\t\t\t\t\"extendedListPrice\": 27.95,\n\t\t\t\t\"extendedSalePrice\": 27.95,\n\t\t\t\t\"isShippingRequired\": true,\n\t\t\t\t\"giftWrapping\": null,\n\t\t\t\t\"addedByPromotion\": false\n\t\t\t}, {\n\t\t\t\t\"id\": \"4a69cbdf-4320-4e1f-852b-0edc2a55f13a\",\n\t\t\t\t\"parentId\": null,\n\t\t\t\t\"variantId\": 356,\n\t\t\t\t\"productId\": 185,\n\t\t\t\t\"sku\": \"\",\n\t\t\t\t\"name\": \"Utility Caddy\",\n\t\t\t\t\"url\": \"https://{store_url)/all/utility-caddy/\",\n\t\t\t\t\"quantity\": 1,\n\t\t\t\t\"brand\": \"OFS\",\n\t\t\t\t\"isTaxable\": true,\n\t\t\t\t\"imageUrl\": \"https://cdn11.bigcommerce.com/s-{store_hash)/products/185/images/449/utilitybucket1_1024x1024__78563__75042.1534344535.330.500.jpg?c=2\",\n\t\t\t\t\"discounts\": [],\n\t\t\t\t\"discountAmount\": 0,\n\t\t\t\t\"couponAmount\": 0,\n\t\t\t\t\"listPrice\": 46,\n\t\t\t\t\"salePrice\": 46,\n\t\t\t\t\"extendedListPrice\": 46,\n\t\t\t\t\"extendedSalePrice\": 46,\n\t\t\t\t\"isShippingRequired\": true,\n\t\t\t\t\"giftWrapping\": null,\n\t\t\t\t\"addedByPromotion\": false\n\t\t\t}],\n\t\t\t\"digitalItems\": [],\n\t\t\t\"giftCertificates\": [],\n\t\t\t\"customItems\": []\n\t\t},\n\t\t\"createdTime\": \"2018-11-06T19:22:51+00:00\",\n\t\t\"updatedTime\": \"2018-11-06T19:25:26+00:00\"\n\t},\n\t\"billingAddress\": {\n\t\t\"id\": \"5be1eaa653e37\",\n\t\t\"firstName\": \"Jane\",\n\t\t\"lastName\": \"Doe\",\n\t\t\"email\": \"janedoe@email.com\",\n\t\t\"company\": \"BigCommerce\",\n\t\t\"address1\": \"123 Main Street\",\n\t\t\"address2\": \"Apt 1\",\n\t\t\"city\": \"Austin\",\n\t\t\"stateOrProvince\": \"\",\n\t\t\"stateOrProvinceCode\": \"\",\n\t\t\"country\": \"\",\n\t\t\"countryCode\": \"\",\n\t\t\"postalCode\": \"78751\",\n\t\t\"phone\": \"\",\n\t\t\"customFields\": []\n\t},\n\t\"consignments\": [],\n\t\"orderId\": null,\n\t\"shippingCostTotal\": 0,\n\t\"shippingCostBeforeDiscount\": 0,\n\t\"handlingCostTotal\": 0,\n\t\"taxTotal\": 12.22,\n\t\"coupons\": [],\n\t\"taxes\": [{\n\t\t\"name\": \"This is tax\",\n\t\t\"amount\": 12.22\n\t}],\n\t\"subtotal\": 73.95,\n\t\"grandTotal\": 86.17,\n\t\"giftCertificates\": [],\n\t\"createdTime\": \"2018-11-06T19:22:51+00:00\",\n\t\"updatedTime\": \"2018-11-06T19:25:26+00:00\",\n\t\"customerMessage\": \"\"\n}"
                      header:
                        title: Get Checkout Response
                    - type: callout
                      data:
                        body: ' If your cart only has one lineItem or a quantity of one, run a [POST Cart](//api-reference/cart-checkout/storefront-cart-api/cart/createacart) request with a new lineItem, then come back here.'
                    - type: text
                      data: >-
                        Below, there are two shipping addresses in an array with
                        a lineItem assigned to each. Note that
                        `?include=consignments.availableShippingOptions` is
                        being added as a query parameter. Without this, the
                        `availableShippingOptions` will not return in the
                        response. 
                    - type: code
                      data: >-
                        postData(`/api/storefront/checkouts/`,
                        `1650fb51-172b-4cde-a220-90c6a8ef9293`,

                        [{
                                "shippingAddress": {
                                    "firstName": "Jane",
                                    "lastName": "Doe",
                                    "email": "janedoe@email.com",
                                    "company": "BigCommerce",
                                    "address1": "123 Main Street",
                                    "address2": "Apt 1",
                                    "city": "Austin",
                                    "stateOrProvinceCode": "TX",
                                    "countryCode": "US",
                                    "postalCode": "78751"
                                },
                                "lineItems": [{
                                    "itemId": "fb924c6c-10fb-456a-bccb-02d9fb426199",
                                    "quantity": 1
                                }]
                            },
                            {
                                "shippingAddress": {
                                    "firstName": "John",
                                    "lastName": "Doe",
                                    "email": "johnedoe@email.com",
                                    "company": "BigCommerce",
                                    "address1": "123 South Street",
                                    "address2": "Apt 5",
                                    "city": "Austin",
                                    "stateOrProvinceCode": "TX",
                                    "countryCode": "US",
                                    "postalCode": "78726"
                                },
                                "lineItems": [{
                                    "itemId": "98ceac68-cac9-49af-9050-95494f32474c",
                                    "quantity": 1
                                }]
                            }
                            ]

                        )
                          .then(data => console.log(JSON.stringify(data))) // JSON-string from `response.json()` call
                          .catch(error => console.error(error));

                        function postData(url = ``, checkoutId = ``, data = {},)
                        {
                            return fetch(url + checkoutId + `/consignments?include=consignments.availableShippingOptions`,   {
                                method: "POST", 
                                credentials: "same-origin",
                                headers: {
                                    "Content-Type": "application/json" ,
                                },
                                body: JSON.stringify(data), 
                            })
                            .then(response => response.json()); }
                      header:
                        title: Create Consignment
                      config:
                        mode: js
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          When a signed in customer proceeds to the create
                          consignment step with an incomplete shipping address,
                          the shipping address will auto-populate with the the
                          most recently used address from the customer's address
                          book.
                    - type: code
                      data: "{\n\t\"id\": \"1650fb51-172b-4cde-a220-90c6a8ef9293\",\n\t\"cart\": {\n\t\t\"id\": \"1650fb51-172b-4cde-a220-90c6a8ef9293\",\n\t\t\"customerId\": 0,\n\t\t\"email\": \"janedoe@email.com\",\n\t\t\"currency\": {\n\t\t\t\"name\": \"US Dollars\",\n\t\t\t\"code\": \"USD\",\n\t\t\t\"symbol\": \"$\",\n\t\t\t\"decimalPlaces\": 2\n\t\t},\n\t\t\"isTaxIncluded\": false,\n\t\t\"baseAmount\": 73.95,\n\t\t\"discountAmount\": 0,\n\t\t\"cartAmount\": 73.95,\n\t\t\"coupons\": [],\n\t\t\"discounts\": [{\n\t\t\t\"id\": \"7349b13a-1453-4050-a769-1a6ad1823369\",\n\t\t\t\"discountedAmount\": 0\n\t\t}, {\n\t\t\t\"id\": \"4a69cbdf-4320-4e1f-852b-0edc2a55f13a\",\n\t\t\t\"discountedAmount\": 0\n\t\t}],\n\t\t\"lineItems\": {\n\t\t\t\"physicalItems\": [{\n\t\t\t\t\"id\": \"7349b13a-1453-4050-a769-1a6ad1823369\",\n\t\t\t\t\"parentId\": null,\n\t\t\t\t\"variantId\": 362,\n\t\t\t\t\"productId\": 191,\n\t\t\t\t\"sku\": \"\",\n\t\t\t\t\"name\": \"Openhouse No. 3\",\n\t\t\t\t\"url\": \"https://{store_url)/all/openhouse-no-3/\",\n\t\t\t\t\"quantity\": 1,\n\t\t\t\t\"brand\": \"Openhouse Magazine\",\n\t\t\t\t\"isTaxable\": true,\n\t\t\t\t\"imageUrl\": \"https://cdn11.bigcommerce.com/s-{store_url)/products/191/images/475/openhousevol3_1024x1024__59692__16355.1534344544.330.500.jpg?c=2\",\n\t\t\t\t\"discounts\": [],\n\t\t\t\t\"discountAmount\": 0,\n\t\t\t\t\"couponAmount\": 0,\n\t\t\t\t\"listPrice\": 27.95,\n\t\t\t\t\"salePrice\": 27.95,\n\t\t\t\t\"extendedListPrice\": 27.95,\n\t\t\t\t\"extendedSalePrice\": 27.95,\n\t\t\t\t\"isShippingRequired\": true,\n\t\t\t\t\"giftWrapping\": null,\n\t\t\t\t\"addedByPromotion\": false\n\t\t\t}, {\n\t\t\t\t\"id\": \"4a69cbdf-4320-4e1f-852b-0edc2a55f13a\",\n\t\t\t\t\"parentId\": null,\n\t\t\t\t\"variantId\": 356,\n\t\t\t\t\"productId\": 185,\n\t\t\t\t\"sku\": \"\",\n\t\t\t\t\"name\": \"Utility Caddy\",\n\t\t\t\t\"url\": \"https://{store_url)/all/utility-caddy/\",\n\t\t\t\t\"quantity\": 1,\n\t\t\t\t\"brand\": \"OFS\",\n\t\t\t\t\"isTaxable\": true,\n\t\t\t\t\"imageUrl\": \"https://cdn11.bigcommerce.com/s-{store_url)/products/185/images/449/utilitybucket1_1024x1024__78563__75042.1534344535.330.500.jpg?c=2\",\n\t\t\t\t\"discounts\": [],\n\t\t\t\t\"discountAmount\": 0,\n\t\t\t\t\"couponAmount\": 0,\n\t\t\t\t\"listPrice\": 46,\n\t\t\t\t\"salePrice\": 46,\n\t\t\t\t\"extendedListPrice\": 46,\n\t\t\t\t\"extendedSalePrice\": 46,\n\t\t\t\t\"isShippingRequired\": true,\n\t\t\t\t\"giftWrapping\": null,\n\t\t\t\t\"addedByPromotion\": false\n\t\t\t}],\n\t\t\t\"digitalItems\": [],\n\t\t\t\"giftCertificates\": [],\n\t\t\t\"customItems\": []\n\t\t},\n\t\t\"createdTime\": \"2018-11-06T19:22:51+00:00\",\n\t\t\"updatedTime\": \"2018-11-06T19:53:35+00:00\"\n\t},\n\t\"billingAddress\": {\n\t\t\"id\": \"5be1eaa653e37\",\n\t\t\"firstName\": \"Jane\",\n\t\t\"lastName\": \"Doe\",\n\t\t\"email\": \"janedoe@email.com\",\n\t\t\"company\": \"BigCommerce\",\n\t\t\"address1\": \"123 Main Street\",\n\t\t\"address2\": \"Apt 1\",\n\t\t\"city\": \"Austin\",\n\t\t\"stateOrProvince\": \"\",\n\t\t\"stateOrProvinceCode\": \"\",\n\t\t\"country\": \"\",\n\t\t\"countryCode\": \"\",\n\t\t\"postalCode\": \"78751\",\n\t\t\"phone\": \"\",\n\t\t\"customFields\": []\n\t},\n\t\"consignments\": [{\n\t\t\"id\": \"5be1f13f00e2c\",\n\t\t\"shippingCost\": 0,\n\t\t\"handlingCost\": 0,\n\t\t\"couponDiscounts\": [],\n\t\t\"discounts\": [],\n\t\t\"lineItemIds\": [\"7349b13a-1453-4050-a769-1a6ad1823369\"],\n\t\t\"shippingAddress\": {\n\t\t\t\"firstName\": \"Jane\",\n\t\t\t\"lastName\": \"Doe\",\n\t\t\t\"email\": \"janedoe@email.com\",\n\t\t\t\"company\": \"BigCommerce\",\n\t\t\t\"address1\": \"123 Main Street\",\n\t\t\t\"address2\": \"Apt 1\",\n\t\t\t\"city\": \"Austin\",\n\t\t\t\"stateOrProvince\": \"Texas\",\n\t\t\t\"stateOrProvinceCode\": \"TX\",\n\t\t\t\"country\": \"United States\",\n\t\t\t\"countryCode\": \"US\",\n\t\t\t\"postalCode\": \"78751\",\n\t\t\t\"phone\": \"\",\n\t\t\t\"customFields\": []\n\t\t},\n\t\t\"availableShippingOptions\": [{\n\t\t\t\"id\": \"9363fd74-8508-4f8b-beb2-77ede2beaa1c\",\n\t\t\t\"type\": \"shipping_byweight\",\n\t\t\t\"description\": \"Ship by Weight\",\n\t\t\t\"imageUrl\": \"\",\n\t\t\t\"cost\": 8,\n\t\t\t\"transitTime\": \"\",\n\t\t\t\"isRecommended\": false\n\t\t}, {\n\t\t\t\"id\": \"20ae4fdf-747f-4ec5-86da-11ecd70ae03e\",\n\t\t\t\"type\": \"shipping_flatrate\",\n\t\t\t\"description\": \"Flat Rate\",\n\t\t\t\"imageUrl\": \"\",\n\t\t\t\"cost\": 12,\n\t\t\t\"transitTime\": \"\",\n\t\t\t\"isRecommended\": false\n\t\t}, {\n\t\t\t\"id\": \"b7783bb7-7695-467f-afd0-bf1c84fffdd2\",\n\t\t\t\"type\": \"shipping_upsready\",\n\t\t\t\"description\": \"UPS® (UPS Next Day Air®)\",\n\t\t\t\"imageUrl\": \"/img/shipping-providers/upsready_70x70.png\",\n\t\t\t\"cost\": 44.41,\n\t\t\t\"transitTime\": \"1 business day\",\n\t\t\t\"isRecommended\": false\n\t\t}]\n\t}, {\n\t\t\"id\": \"5be1f13f07bae\",\n\t\t\"shippingCost\": 0,\n\t\t\"handlingCost\": 0,\n\t\t\"couponDiscounts\": [],\n\t\t\"discounts\": [],\n\t\t\"lineItemIds\": [\"4a69cbdf-4320-4e1f-852b-0edc2a55f13a\"],\n\t\t\"shippingAddress\": {\n\t\t\t\"firstName\": \"John\",\n\t\t\t\"lastName\": \"Doe\",\n\t\t\t\"email\": \"johnedoe@email.com\",\n\t\t\t\"company\": \"BigCommerce\",\n\t\t\t\"address1\": \"123 South Street\",\n\t\t\t\"address2\": \"Apt 5\",\n\t\t\t\"city\": \"Austin\",\n\t\t\t\"stateOrProvince\": \"Texas\",\n\t\t\t\"stateOrProvinceCode\": \"TX\",\n\t\t\t\"country\": \"United States\",\n\t\t\t\"countryCode\": \"US\",\n\t\t\t\"postalCode\": \"78726\",\n\t\t\t\"phone\": \"\",\n\t\t\t\"customFields\": []\n\t\t},\n\t\t\"availableShippingOptions\": [{\n\t\t\t\"id\": \"620a7267-8e0d-4868-bf24-2b3983ccc746\",\n\t\t\t\"type\": \"shipping_byweight\",\n\t\t\t\"description\": \"Ship by Weight\",\n\t\t\t\"imageUrl\": \"\",\n\t\t\t\"cost\": 8,\n\t\t\t\"transitTime\": \"\",\n\t\t\t\"isRecommended\": false\n\t\t}, {\n\t\t\t\"id\": \"834a4114-df5e-453d-a476-8de2287d1dfa\",\n\t\t\t\"type\": \"shipping_flatrate\",\n\t\t\t\"description\": \"Flat Rate\",\n\t\t\t\"imageUrl\": \"\",\n\t\t\t\"cost\": 12,\n\t\t\t\"transitTime\": \"\",\n\t\t\t\"isRecommended\": false\n\t\t}, {\n\t\t\t\"id\": \"9f40c667-0ab5-46d4-b436-c678517c5415\",\n\t\t\t\"type\": \"shipping_upsready\",\n\t\t\t\"description\": \"UPS® (UPS Next Day Air®)\",\n\t\t\t\"imageUrl\": \"/img/shipping-providers/upsready_70x70.png\",\n\t\t\t\"cost\": 44.41,\n\t\t\t\"transitTime\": \"1 business day\",\n\t\t\t\"isRecommended\": false\n\t\t}]\n\t}],\n\t\"orderId\": null,\n\t\"shippingCostTotal\": 0,\n\t\"shippingCostBeforeDiscount\": 0,\n\t\"handlingCostTotal\": 0,\n\t\"taxTotal\": 5.92,\n\t\"coupons\": [],\n\t\"taxes\": [{\n\t\t\"name\": \"This is tax\",\n\t\t\"amount\": 5.92\n\t}],\n\t\"subtotal\": 73.95,\n\t\"grandTotal\": 79.87,\n\t\"giftCertificates\": [],\n\t\"createdTime\": \"2018-11-06T19:22:51+00:00\",\n\t\"updatedTime\": \"2018-11-06T19:53:35+00:00\",\n\t\"customerMessage\": \"\"\n}"
                      header:
                        title: Create Consignment Response
                      config:
                        mode: json
                        highlightRange:
                          - from: '96'
                            to: '141'
                    - type: text
                      data: >-
                        ### Update Consignment to Add a Shipping Option


                        So far we have created a cart, added a billing address
                        and shipping address, and assigned the lineItems to the
                        address they should be shipped. Now we are going to make
                        two PUT requests to assign a shipping option for each
                        address. Only one consignment can be updated at a time.
                        If you sent in the
                        `?include=consignments.availableShippingOptions` with
                        the previous request, then pick the appropriate
                        `shippingOptionId` for each consignment. 
                    - type: code
                      data: "\t\"consignments\": [{\n\t\t\"id\": \"5be1f13f00e2c\",\n\t\t\"shippingCost\": 0,\n\t\t\"handlingCost\": 0,\n\t\t\"couponDiscounts\": [],\n\t\t\"discounts\": [],\n\t\t\"lineItemIds\": [\"7349b13a-1453-4050-a769-1a6ad1823369\"],\n\t\t\"shippingAddress\": {\n\t\t\t\"firstName\": \"Jane\",\n\t\t\t\"lastName\": \"Doe\",\n\t\t\t\"email\": \"janedoe@email.com\",\n\t\t\t\"company\": \"BigCommerce\",\n\t\t\t\"address1\": \"123 Main Street\",\n\t\t\t\"address2\": \"Apt 1\",\n\t\t\t\"city\": \"Austin\",\n\t\t\t\"stateOrProvince\": \"Texas\",\n\t\t\t\"stateOrProvinceCode\": \"TX\",\n\t\t\t\"country\": \"United States\",\n\t\t\t\"countryCode\": \"US\",\n\t\t\t\"postalCode\": \"78751\",\n\t\t\t\"phone\": \"\",\n\t\t\t\"customFields\": []\n\t\t},\n\t\t\"availableShippingOptions\": [{\n\t\t\t\"id\": \"9363fd74-8508-4f8b-beb2-77ede2beaa1c\",\n\t\t\t\"type\": \"shipping_byweight\",\n\t\t\t\"description\": \"Ship by Weight\",\n\t\t\t\"imageUrl\": \"\",\n\t\t\t\"cost\": 8,\n\t\t\t\"transitTime\": \"\",\n\t\t\t\"isRecommended\": false\n\t\t}, {\n\t\t\t\"id\": \"20ae4fdf-747f-4ec5-86da-11ecd70ae03e\",\n\t\t\t\"type\": \"shipping_flatrate\",\n\t\t\t\"description\": \"Flat Rate\",\n\t\t\t\"imageUrl\": \"\",\n\t\t\t\"cost\": 12,\n\t\t\t\"transitTime\": \"\",\n\t\t\t\"isRecommended\": false\n\t\t}, {\n\t\t\t\"id\": \"b7783bb7-7695-467f-afd0-bf1c84fffdd2\",\n\t\t\t\"type\": \"shipping_upsready\",\n\t\t\t\"description\": \"UPS® (UPS Next Day Air®)\",\n\t\t\t\"imageUrl\": \"/img/shipping-providers/upsready_70x70.png\",\n\t\t\t\"cost\": 44.41,\n\t\t\t\"transitTime\": \"1 business day\",\n\t\t\t\"isRecommended\": false\n\t\t}]"
                      header:
                        title: Example Consignment with Available Shipping Options
                      config:
                        mode: json
                    - type: code
                      data: >-
                        postData(`/api/storefront/checkouts/`,
                        `1650fb51-172b-4cde-a220-90c6a8ef9293`,
                        `5be1f13f07bae`,{"shippingOptionId":
                        "9f40c667-0ab5-46d4-b436-c678517c5415"})
                          .then(data => console.log(JSON.stringify(data))) 
                          .catch(error => console.error(error));

                        function postData(url = ``, checkoutId = ``,
                        consignmentId = ``, data = {},) {
                            return fetch(url + checkoutId + `/consignments/` + consignmentId,   {
                                method: "PUT", 
                                credentials: "same-origin",
                                headers: {
                                    "Content-Type": "application/json;",
                                },
                                body: JSON.stringify(data), 
                            })
                            .then(response => response.json()); 
                        }
                      header:
                        title: Update Consignment with Available Shipping Options
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Troubleshooting


                        * Did you get a CORs error response? 

                        Check to make sure you have the right credentials set
                        up. Most requests will use same-origin or include. 


                        * Did you get a 404?

                        Make sure you have at least one item in your cart.
                        Deleting all items removes the cart and returns a 404 in
                        the browser console.
                      header:
                        anchor: working-sf-apis_troubleshooting
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Related Endpoints

                        - [Storefront
                        Cart](/api-reference/cart-checkout/storefront-cart-api)

                        - [Storefront
                        Checkout](/api-reference/cart-checkout/storefront-checkout-api)
                      header:
                        anchor: working-sf-apis_realated-endpoints
              - title: Checkout SDK
                route:
                  path: /checkout-sdk
                data:
                  blocks:
                    - type: html
                      data: "<h1> Checkout SDK </h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#checkout-sdk_what-can-i-do\"> What Can I Do with the SDK?</a></li>\n\t\t<li><a href=\"#checkout-sdk_where-to-get\">Where Can I Get the SDK?\n</a></li>\n    <li><a href=\"#checkout-sdk_support-customization\">Support and Customization\n</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        The Checkout JS SDK is a wrapper for the BigCommerce
                        Storefront Checkout API.


                        It allows a developer to create a custom checkout
                        experience to move a customer through the checkout
                        process.

                        The SDK handles all the ‘heavy-lifting’ such as customer
                        login, getting shipping quotes and submitting payment
                        for an order.

                        With the Checkout JS SDK, you can build a [custom
                        checkout
                        presentation](https://github.com/bigcommerce/checkout-sdk-js-example)
                        layer in popular frontend frameworks such as React.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## What Can I Do with the SDK?


                        -   It can initialize payment and shipping providers
                        that require client-side setup through a common
                        interface. Below are some examples of these providers:
                            
                            -   PayPal Express
                            -   Braintree
                            -   Stripe 
                            -   Square
                            -   Amazon
                            -   Klarna
                          
                        -   It provides a JavaScript interface for interacting
                        with the web API.
                            -   Fetch and submit resources:
                                -   Cart
                                -   Order
                                -   Customer
                            -   Fetch available options:
                                -   Shipping addresses
                                -   Shipping countries
                                -   Shipping states
                                -   Billing addresses
                                -   Billing countries
                                -   Billing states
                                -   Shipping methods
                                -   Payment methods
                         
                        The Checkout JS SDK allows you to present the checkout
                        process to the shopper in any way you like, and, through
                        frontend technologies and external web services, augment
                        the checkout with extra information. 


                        However, the Checkout JS SDK does not allow you to
                        change the underpinnings of the checkout - you must
                        still conform to the model of the Checkout API
                        underpinning the SDK to complete a Checkout and create
                        an Order in BigCommerce. 

                        The SDK does not allow you to implement custom payment,
                        shipping, or tax calculation providers into the checkout
                        - instead, the configured providers for these services
                        on a given store are expressed via our Checkout API.
                      header:
                        anchor: checkout-sdk_what-can-i-do
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Where Can I Get the SDK?

                        The Checkout JS SDK and associated documentation is
                        available from the [BigCommerce SDK Repo.](
                        https://github.com/bigcommerce/checkout-sdk-js)
                      header:
                        anchor: checkout-sdk_where-to-get
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Support and Customization

                        - Enterprise clients can reach out to their account
                        manager to review services and resources available.

                        - For more on our design policy please visit [Design
                        Support](https://forum.bigcommerce.com/s/article/BigCommerce-Design-Policy#support).
                      header:
                        anchor: checkout-sdk_support-customization
              - title: Add to Cart URLs
                route:
                  path: /add-to-cart-url
                data:
                  blocks:
                    - type: html
                      data: "<h1>Add to Cart URLs</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#add-cart-url_select-specific-sku\">Select Specific SKU (Product/Variant) on Product Detail Page</a></li>\n        <li><a href=\"#add-cart-url_add-specific-sku-cart\">Add Specific SKU to Cart</a></li>\n        <li><a href=\"#add-cart-url_add-sku-checkout-go-to-cart\">Add Specific SKU to Cart and Go Directly to Checkout</a></li>\n    \t<li><a href=\"#add-cart-url_add-specific-sku-checkout-source\">Add Specific SKU, Go to Checkout, and Include Source</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        Your apps can use a product's or variant's <a
                        href="https://support.bigcommerce.com/s/article/Options-SKUs-Rules"
                        target="_blank">SKU</a> to create custom product URLs in
                        order to perform specific actions, like:


                        * Pre-select a specific SKU’s product option values when
                        loading a product detail page.

                        * Add a specific SKU to the cart.

                        * Add a specific SKU to the cart and go directly to
                        checkout.

                        * Add a specific SKU to the cart, go directly to
                        checkout, and include a source parameter for analytics
                        and conversion tracking.
                    - type: text
                      data: '---'
                    - type: callout
                      data:
                        title: 'Limitation: One Item per URL'
                        body: >-
                          Each of the custom links described here can add only a
                          single item (quantity 1) to the cart at a time.
                    - type: text
                      data: >-
                        ## Select Specific SKU (Product/Variant) on Product
                        Detail Page


                        To link to a specific product variant, append
                        `?sku=INSERT-SKU-HERE` to the product URL, as shown
                        below. This will link to the product page, with the
                        variant's options already selected.


                        ### Structure:

                        `site.com/sample-test-product-w-options/?sku=INSERT-SKU-HERE`



                        ### Example:

                        `myawesomestore.com/shirt/?sku=SHIRT-SM-RED`
                      header:
                        anchor: add-cart-url_select-specific-sku
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Add Specific SKU to Cart


                        To automatically add a product or variant to a shopper's
                        cart and take them directly to the cart page, append   

                        `/cart.php?action=add&sku=INSERT-SKU-HERE` to the
                        store's domain.


                        ### Structure:

                        `/site.com/cart.php?action=add&sku=INSERT-SKU-HERE`


                        ### Example:

                        `myawesomestore.com/cart.php?action=add&sku=SHIRT-SM-RED`
                      header:
                        anchor: add-specific-sku-cart
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Add Specific SKU to Cart and Go Directly to Checkout

                        To automatically add a product or variant to a shopper's
                        cart and forward them directly to checkout, append   

                        `/cart.php?action=buy&sku=INSERT-SKU-HERE` to the
                        store's domain.


                        ### Structure:

                        `/site.com/cart.php?action=buy&sku=INSERT-SKU-HERE`


                        ### Example:

                        `myawesomestore.com/cart.php?action=buy&sku=SHIRT-SM-RED`
                      header:
                        anchor: add-cart-url_add-sku-checkout-go-to-cart
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Add Specific SKU, Go to Checkout, and Include Source


                        To automatically add a product or variant to a shopper's
                        cart, forward them to checkout, and also include a
                        source parameter for analytics/conversion tracking,
                        append
                        `cart.php?action=buy&sku=INSERT-SKU-HERE&source=SOURCE-HERE`
                        to the store's domain. (The&#160;source parameter can be
                        any string.)


                        ### Structure:

                        `site.com/cart.php?action=buy&sku=INSERT-SKU-HERE&source=SOURCE-HERE`


                        ### Example:

                        `myawesomestore.com/cart.php?action=buy&sku=SHIRT-SM-RED&source=JULY-EMAIL-NEWSLETTER`
                      header:
                        anchor: add-cart-url_add-specific-sku-checkout-source
        - title: Payments
          route:
            path: /payments
          data:
            children:
              - title: Payments API
                route:
                  path: /payments-api-overview
                data:
                  blocks:
                    - type: html
                      data: "<h1>Payments API</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#payments_processing-payment\">Processing a Payment</a></li>\n        <li><a href=\"#payments_stored-cards\">Stored Cards</a></li>\n        <li><a href=\"#payments_credit-cards\">Credit Cards</a></li>\n    <li><a href=\"#payments_orders-api\">Orders API</a></li>\n    \t\t<li><a href=\"#payments_technical-details\">Technical Details</a></li>\n        <li><a href=\"#payments_sample-app-diagram\">Sample App Diagram</a></li>\n    \t\t<li><a href=\"#payments_error-codes\">Error Codes</a></li>\n        <li><a href=\"#payments_faq\">FAQ</a></li>\n    \n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Introduction


                        The Payments API enables you to process payments through
                        the store’s connected payment gateway. A payment can be
                        taken for an order that is created using either the
                        [Server to Server Checkout API
                        Orders](https://developer.bigcommerce.com/api-reference/cart-checkout/server-server-checkout-api)
                        endpoint or creating an order using [V2
                        Orders](https://developer.bigcommerce.com/api-reference/orders/orders-api/orders/postorders)
                        endpoint.


                        Payments are processed via a sequence of requests to two
                        API hosts:

                        * Create the payment token:  
                        `https://api.bigcommerce.com/stores/{store_hash}/v3/payments/access_tokens`

                        * Process the payment:  
                        `https://payments.bigcommerce.com/stores/{store_hash}/payments`


                        ### Prerequisites

                        **Scopes**  

                        The following
                        [OAuth](/api-docs/getting-started/authentication#authentication_oauth-scopes)
                        scopes are required:

                        * Create Payments

                        * Get Payment Methods
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          If your application handles credit card data, you will
                          need to be PCI Compliant. SAQs (self-assessment
                          questionnaires) can be submitted to 

                          <a
                          href="mailto:compliance@bigcommerce.com">compliance@bigcommerce.com</a>.
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Processing a Payment


                        Payments can be processed using cards stored with the
                        BigCommerce Stored Credit Cards feature or by providing
                        a credit card number.  


                        **The following gateways are supported for stored
                        cards:**


                        * Authorize.net

                        * Paypal Powered by Braintree

                        * CyberSource

                        * Stripe


                        **The following gateways are supported for credit
                        cards:**


                        * Authorize.net

                        * PayPal powered by Braintree

                        * CardConnect

                        * Chase Merchant Services

                        * Chase Integrated Payments

                        * Cybersource Direct

                        * eWAY Rapid

                        * First Data Payeezy Gateway

                        * Heartland Payment Systems

                        * MIGS

                        * MyVirtualMerchant

                        * NMI

                        * PayPal Payments Pro (Payflow Edition) UK

                        * PayPal Payments Pro (Payflow Edition) US

                        * Sage Pay/Protx VSP Direct

                        * QuickBooks Payments

                        * SecureNet

                        * Stripe

                        * Worldpay Core

                        * WorldPay

                        * USA ePay
                      header:
                        anchor: payments_processing-payment
                    - type: callout
                      data:
                        body: >-
                          The API flow does not currently support hosted/offsite
                          providers such as PayPal and Adyen and wallet type
                          payments such as Amazon Pay.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ### Stored Cards

                        There are three steps to using a stored card to make a
                        payment.


                        1. [Get Payment
                        Methods](/api-reference/payments/payments-create-payment-token-api/payment-methods/paymentsmethodsget)

                        2. [Create Access
                        Token](/api-reference/payments/payments-create-payment-token-api/payment-access-token/paymentsaccesstokenspost)

                        3. [Process
                        Payment](/api-reference/payments/payments-process-payments/payment/paymentspost)


                        To use stored cards with the Payments API or the
                        Checkout SDK make sure stored cards are enabled in the
                        stores Control Panel. To enable stored credit cards on
                        your storefront, navigate to **Store Setup › Payments**
                        and click the tab for your payment gateway. Toggle the
                        switch to enable Stored Credit Cards and Save. For more
                        on enabling stored cards, see [Enabling Stored Credit
                        Cards](https://support.bigcommerce.com/s/article/Enabling-Stored-Credit-Cards).


                        **Requirements for Stored Cards**


                        * Your store must be on a Plus plan or higher.

                        * Your store needs to be using Optimized One-Page
                        Checkout.

                        * Your store needs to be using a compatible payment
                        gateway.


                        1. To pay with a stored card, first make a call to [Get
                        Payment
                        Methods](/api-reference/payments/payments-create-payment-token-api/payment-methods/paymentsmethodsget)
                        for the `stored_instruments > token`. The `order_id` is
                        passed in as a query parameter.


                        This token is the same as `payment_instrument_token`
                        from [Get
                        Transactions](https://developer.bigcommerce.com/api-reference/orders/orders-transactions-api).
                      header:
                        anchor: payments_stored-cards
                    - type: http
                      data:
                        method: get
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/payments/methods
                        query:
                          order_id: ''
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                      header:
                        title: Get Payment Methods
                    - type: code
                      data: |-
                        {
                          "data": [
                            {
                              "id": "stripe.card",
                              "name": "Stripe",
                              "test_mode": true,
                              "type": "card",
                              "supported_instruments": [
                                {
                                  "instrument_type": "VISA",
                                  "verification_value_required": true
                                },
                                {
                                  "instrument_type": "MASTERCARD",
                                  "verification_value_required": true
                                },
                                {
                                  "instrument_type": "AMEX",
                                  "verification_value_required": true
                                },
                                {
                                  "instrument_type": "DISCOVER",
                                  "verification_value_required": true
                                },
                                {
                                  "instrument_type": "JCB",
                                  "verification_value_required": true
                                },
                                {
                                  "instrument_type": "DINERS_CLUB",
                                  "verification_value_required": true
                                },
                                {
                                  "instrument_type": "STORED_CARD",
                                  "verification_value_required": true
                                }
                              ],
                              "stored_instruments": [
                                {
                                  "type": "stored_card",
                                  "brand": "VISA",
                                  "expiry_month": 9,
                                  "expiry_year": 2020,
                                  "issuer_identification_number": "424242",
                                  "last_4": "4242",
                                  "token": "050a1e5c982e5905288ec5ec33f292772762033a070a45g434qfb16bf1940b51ef",
                                  "is_default": true
                                }
                              ]
                            }
                          ],
                          "meta": {}
                        }
                      header:
                        title: Sample Response
                        subtitle: Get Payment Methods
                      config:
                        mode: json
                        highlightRange:
                          - from: '46'
                            to: '46'
                    - type: text
                      data: >-
                        On line 46 is the `token`. Make note of the token to use
                        as part of processing the payment in the request body.


                        ### Create Access Token

                        2. Make a request to [Create Access
                        Token](/api-reference/payments/payments-create-payment-token-api/payment-access-token/paymentsaccesstokenspost)
                        to get the authorization token that needs to be passed
                        in the header when processing the payment. The ID of the
                        order needs to be part of the request body.
                    - type: code
                      data: |-
                        {
                          "order": {
                            "id": 215
                          }
                        }
                      header:
                        title: Sample Request
                        subtitle: Create Payment Access Token
                    - type: http
                      data:
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/payments/access_tokens
                        method: post
                        body: |-
                          {
                            "order": {
                              "id": your-order-id
                            }
                          }
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                      header:
                        title: Create Payment Access Token
                    - type: code
                      data: |-
                        {
                          "data": {
                            "id": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1NTEzOTQxNDIsIm5iZiI6MTU1MTM5MDU0MiwiaXNzIjoicGF5bWVudHMuYmlnY29tbWVyY2UuY29tIiwic3ViIjoianJhaDZnbW4iLCJqdGkiOiI3Nzg3ZmU1Zi01OWJmLTQ3ZWMtYTFmZC00ZDQ3ZTkwNjFlNWMiLCJpYXd4gJ8uHDk3kDhhuyefsrtr45mRhdGEiOnsic3RvcmVfaWQiOjEwMjU2NDYsIm9yZGVyX2lkIjoyMTUsImFtb3VudCI6OTgwMCwiY3VycmVuY3kiOiJVU0QifX0.WbR90d8m4gn8wK7kPMDEoVq8B0hHC5Ul5H4Hpqq6Yvo"
                          },
                          "meta": {}
                        }
                      header:
                        title: Sample Response
                        subtitle: Create Payment Access Token
                      config:
                        mode: json
                    - type: text
                      data: >-
                        ### Process the Payment

                        3. To process the payment, send a POST to [Process
                        Payment](/api-reference/payments/payments-process-payments/payment/paymentspost).
                        You will need the following information from [Get
                        Payment
                        Methods](/api-reference/payments/payments-create-payment-token-api/payment-methods/paymentsmethodsget)
                        in step one. 


                        **Get Payment Methods = Process Payment**

                        * type = type

                        * token = token

                        * last_four = verfication_value

                        * id = payment_method_id


                        The headers to process a payment are different than the
                        headers you normally send with a BigCommerce API. The
                        Authorization token is the ID that is returned in Get
                        Payment Access Token (step two). 


                        **Headers**

                        * Accept: application/vnd.bc.v1+json

                        * Authorization: PAT {your-access-token}

                        * Content-Type: application/json
                    - type: callout
                      data:
                        type: warning
                        body: 'There is a space between PAT {your-access-token}.'
                    - type: code
                      data: |
                        curl -X POST \
                          https://payments.bigcommerce.com/stores/{store_hash}/payments \
                          -H 'Accept: application/vnd.bc.v1+json' \
                          -H 'Authorization: PAT eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1NTEzOTQxNDIsIm5iZiI6MTU1MTM5MDU0MiwiaXNzIjoicGF5bWVudHMuYmlnY29tbWVyY2UuY29tIiwic3ViIjoianJhaDZnbW4iLCJqdGkiOiI3Nzg3ZmU1Zi01OWJmLTQ3ZWMtYTFmZC00ZDQ3ZTkwNjFlNWMiLCJpYXQiOjE1NTEzOTA1NDIsImRhdGEiOnsic3RvcmVfaWQiOjEwMjU2NDYsIm9yZGVyX2lkIjoyMTUsImFtb3VudCI6OTgwMCwiY3VycmVuY3kiOiJVU0QifX0.WbR90d8m4gn8wK7kPMDEoVq8B0hHC5Ul5H4Hpqq6Yvo' \
                          -H 'Content-Type: application/json' \
                          -d '{
                          "payment": {
                            "instrument": {
                              "type": "stored_card",
                              "token": "050a1e5c982e5905288ec5ec33f292772762033a0704f46fccb16bf1940b51ef", // from Get Payment Methods
                              "verification_value": "4242"
                            },
                            "payment_method_id": "stripe.card"
                          }
                        }'
                      header:
                        title: Sample Request
                        subtitle: Process Payment
                      config:
                        mode: shell
                    - type: code
                      data: |-
                        {
                          "data": {
                            "id": "693bb4cd-3f20-444a-8315-6369f582c68a",
                            "status": "success",
                            "transaction_type": "purchase"
                          }
                        }
                      header:
                        title: Sample Response
                        subtitle: Process Payment
                      config:
                        mode: json
                    - type: http
                      data:
                        url: >-
                          https://payments.bigcommerce.com/stores/{store_hash}/payments
                        method: post
                        body: |-
                          {
                            "payment": {
                              "instrument": {
                                "type": "stored_card",
                                "token": "{your-access-token}",
                                "verification_value": "{verification value}"
                              },
                              "payment_method_id": "{payment-method}.card"
                            }
                          }
                        headers:
                          Authorization: '{$$.env.Authorization}'
                          Accept: application/vnd.bc.v1+json
                          Content-Type: application/json
                      header:
                        title: Process Payment
                    - type: text
                      data: >-
                        If the purchase was successful it will return a status
                        of success.  The order is then automatically moved to an
                        Awaiting Fulfillment status. If you get a different
                        response, see [Error Codes](#payments_error-codes) for
                        troubleshooting.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Credit Cards


                        There are two steps to using a credit card to make a
                        payment.


                        1. [Create Access
                        Token](/api-reference/payments/payments-create-payment-token-api/payment-access-token/paymentsaccesstokenspost)

                        2. [Process
                        Payment](/api-reference/payments/payments-process-payments/payment/paymentspost)
                      header:
                        anchor: payments_credit-cards
                    - type: text
                      data: >-
                        ### Create Access Token

                        1. Make a request to [Create Access
                        Token](/api-reference/payments/payments-create-payment-token-api/payment-access-token/paymentsaccesstokenspost)
                        to to get the authorization token that needs to be
                        passed in the header when processing the payment. The ID
                        of the order needs to be part of the request body.
                    - type: code
                      data: |-
                        {
                          "order": {
                            "id": 215
                          }
                        }
                      header:
                        title: Sample Request
                        subtitle: Create Payment Access Token
                      config:
                        mode: json
                    - type: code
                      data: |-
                        {
                          "data": {
                            "id": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1NTEzOTQxNDIsIm5iZiI6MTU1MTM5MDU0MiwiaXNzIjoicGF5bWVudHMuYmlnY29tbWVyY2UuY29tIiwic3ViIjoianJhaDZnbW4iLCJqdGkiOiI3Nzg3ZmU1Zi01OWJmLTQ3ZWMtYTFmZC00ZDQ3ZTkwNjFlNWMiLCJpYXd4gJ8uHDk3kDhhuyefsrtr45mRhdGEiOnsic3RvcmVfaWQiOjEwMjU2NDYsIm9yZGVyX2lkIjoyMTUsImFtb3VudCI6OTgwMCwiY3VycmVuY3kiOiJVU0QifX0.WbR90d8m4gn8wK7kPMDEoVq8B0hHC5Ul5H4Hpqq6Yvo"
                          },
                          "meta": {}
                        }
                      header:
                        title: Sample Response
                        subtitle: Create Payment Access Token
                    - type: http
                      data:
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/payments/access_tokens
                        method: post
                        body: |-
                          {
                            "order": {
                              "id": your-order-id
                            }
                          }
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{$$.env.X-Auth-Client}'
                          X-Auth-Token: '{$$.env.X-Auth-Token}'
                      header:
                        title: Create Payment Access Token
                    - type: text
                      data: >-
                        ### Process the Payment


                        2. To process the payment, send a POST to [Process
                        Payment](/api-reference/payments/payments-process-payments/payment/paymentspost).


                        The headers to process a payment are different than the
                        headers you normally send with a BigCommerce API. The
                        Authorization token is the ID that is returned in Get
                        Payment Access Token(step two). 


                        **Headers**

                        * Accept: application/vnd.bc.v1+json

                        * Authorization: PAT {your-access-token}

                        * Content-Type: application/json


                        Send the request with the following fields from the
                        credit card:

                        * type -- Will always be card

                        * payment_method_id -- The name of the card in the
                        format `payment-provider.card`

                        * number

                        * cardholder_name

                        * expiry_month

                        * expiry_year

                        * verification_value


                        If any of these fields are incorrect, the payment might
                        be rejected.
                    - type: callout
                      data:
                        body: 'There is a space between PAT {your-access-token}.'
                        type: warning
                    - type: code
                      data: |-
                        curl -X POST \
                          https://payments.bigcommerce.com/stores/{store_hash}/payments \
                          -H 'Accept: application/vnd.bc.v1+json' \
                          -H 'Authorization: PAT eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1NTEzOTQxNDIsIm5iZiI6MTU1MTM5MDU0MiwiaXNzIjoicGF5bWVudHMuYmlnY29tbWVyY2UuY29tIiwic3ViIjoianJhaDZnbW4iLCJqdGkiOiI3Nzgadskfjua451OWJmLTQ3ZWMtYTFmZC00ZDQ3ZTkwNjFlNWMiLCJpYXQiOjE1NTEzOTr4gk78dhshehdGEiOnsic3RvcmVfaWQiOjEwMjU2NDYsIm9yZGVyX2lkIjoyMTUsImFtb3VudCI6OTgwMCwiY3VycmVuY3kiOiJVU0QifX0.WbR90d8m4gn8wK7kPMDEoVq8B0hHC5Ul5H4Hpqq6Yvo' \
                          -H 'Content-Type: application/json' \
                          -d '{
                          "payment": {
                            "instrument": {
                              "type": "card",
                              "number": "4242424242424242",
                              "cardholder_name": "Jane Doe",
                              "expiry_month": 12,
                              "expiry_year": 2020,
                              "verification_value": "422"
                            },
                            "payment_method_id": "stripe.card"
                          }
                        }'
                      header:
                        title: Sample Request
                        subtitle: Process Payment
                    - type: code
                      data: |-
                        {
                          "data": {
                            "id": "693bb4cd-3f20-444a-8315-6369f582c68a",
                            "status": "success",
                            "transaction_type": "purchase"
                          }
                        }
                      header:
                        title: Sample Response
                        subtitle: Process Payment
                    - type: http
                      data:
                        url: >-
                          https://payments.bigcommerce.com/stores/{store_hash}/payments
                        method: post
                        body: |-
                          {
                            "payment": {
                              "instrument": {
                                "type": "card",
                                "number": "{card-number}",
                                "cardholder_name": "{cardholder-name}",
                                "expiry_month": expiration-month-two-digit,
                                "expiry_year": expiration-year-four-digit,
                                "verification_value": "{verification-value-cvv}"
                              },
                              "payment_method_id": "{payment-provider}.card"
                            }
                          }
                        headers:
                          Authorization: '{$$.env.Authorization}'
                          Accept: application/vnd.bc.v1+json
                          Content-Type: application/json
                      header:
                        title: Process Payment
                    - type: text
                      data: >-
                        If the purchase was successful it will return a status
                        of success.  The order is then automatically moved to an
                        Awaiting Fulfillment status. If you get a different
                        response, see [Error Codes](#payments_error-codes) for
                        troubleshooting.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Using the Orders API


                        It is possible to take a payment for an order created
                        using the [Orders API](api-reference/orders/orders-api).
                        When creating the order using the Orders API make sure
                        the `status_id:0`. If the order status is not created
                        with the status set to `0` or `Incomplete`, the Payments
                        API will return an [error](#payments_error-codes).

                        The billing address and line items should be filled in
                        when creating the order. The order can be created as a
                        guest order by either seeting the 

                        `customer_id:0`or leaving it blank. After the order is
                        created, then follow the steps for either a [credit
                        card](#payments_credit-cards) or a [stored
                        card](#payments_stored-cards).
                      header:
                        anchor: payments_orders-api
                    - type: code
                      data: |-
                        {
                            "status_id": 0,
                            "customer_id": 11,
                            "billing_address": {
                                "first_name": "Jane",
                                "last_name": "Does",
                                "company": "",
                                "street_1": "123 Main Street",
                                "street_2": "",
                                "city": "Austin",
                                "state": "Texas",
                                "zip": "78751",
                                "country": "United States",
                                "country_iso2": "US",
                                "email": "janedoe@email.com"
                            },
                            "shipping_addresses": [
                                {
                                    "first_name": "Trishy",
                                    "last_name": "Test",
                                    "company": "Acme Pty Ltd",
                                    "street_1": "666 Sussex St",
                                    "street_2": "",
                                    "city": "Anywhere",
                                    "state": "Some State",
                                    "zip": "12345",
                                    "country": "United States",
                                    "country_iso2": "US",
                                    "phone": "",
                                    "email": "janedoe@email.com"
                                }
                            ],
                            "products": [
                                {
                                    "name": "BigCommerce Poster",
                                    "quantity": 1,
                                    "price_inc_tax": 10.98,
                                    "price_ex_tax": 10
                                },
                                {
                                    "name": "BigCommerce Poster II",
                                    "quantity": 1,
                                    "price_inc_tax": 50,
                                    "price_ex_tax": 45
                                }
                            ]
                        }
                      header:
                        title: Example Create Order
                      config:
                        mode: json
                    - type: text
                      data: >-
                        ## Technical Details 


                        ### Using Test Credit Cards


                        The following is a list of supported gateways and a list
                        of their test credit cards. These can be useful while
                        getting your app setup. Check your credit card setup in
                        both
                        [BigCommerce](https://support.bigcommerce.com/s/article/Online-Payment-Methods#setup)
                        and the payment gateway to make sure testing is
                        configured properly. If the credit cards do not work or
                        stop working please reach out the payment provider as
                        these are not maintained by BigCommerce. 


                        *
                        [Authorize.Net](https://developer.authorize.net/hello_world/testing_guide/)

                        * [Paypal Powered by
                        Braintree](https://developers.braintreepayments.com/guides/credit-cards/testing-go-live/php)

                        *
                        [CyberSource](https://www.cybersource.com/developers/other_resources/quick_references/test_cc_numbers/)

                        * [Stripe](https://stripe.com/docs/testing#cards)



                        ### Token

                        The `payment_access_token` is not from the payment
                        provider. It is created by BigCommerce.


                        ### Decline Payments

                        If a payment is declined it will return a 4XX error with
                        details if available. 


                        ### Authorization

                        If a payment gateway is configured for authorization
                        only, the payment will be authorized at the time of
                        processing. The order will have to later be captured
                        through the control panel. If the gateway is set for
                        authorization and capture, the payment will be
                        authorized and captured when payment is processed.


                        ### Stored Cards

                        The Payments API supports payment with cards that are
                        currently stored. It does not provide a method for
                        storing new cards.


                        ### Control Panel

                        Orders created and captured via the API will look the
                        same as other orders created via the storefront or other
                        apps. The order source will be “Checkout API.” 


                        ### Data Access

                        The card data is not accessible via the API once the
                        payment is processed. 


                        ### Rate Limits

                        BigCommerce has rates limits in place for this API. Some
                        payment providers will provide checks on the incoming
                        requests.
                      header:
                        anchor: payments_technical-details
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Sample App Diagram


                        The following diagram shows how the
                        `payment_access_token` interacts with BigCommerce API
                        and BigCommerce payments. 


                        Orders can be created using the [Server to Server API
                        Endpoints](https://developer.bigcommerce.com/api-reference/cart-checkout/server-server-checkout-api/checkout/postcheckoutscheckoutidorders)
                        or [Orders
                        API](https://developer.bigcommerce.com/api-reference/orders/orders-api).
                      header:
                        anchor: payments_sample-app-diagram
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1553180551833
                      header:
                        title: Sample App
                      config:
                        centered: true
                        fluid: true
                        maxWidth: '805'
                    - type: text
                      data: '---'
                    - type: text
                      data: "## Error Codes\n\n### 10000\nAn internal error has occurred within the API.\n\n**Possible Causes**\n- Connection error\n\n**Possible Solutions**\n* Try the request again.\n\n### 10001\nMissing or incorrect required fields.\n\n**Possible Causes** \n* Missing or Incorrect Fields.\n\n**Possible Solutions**  \n* Check the request for any data that is incorrect or is missing\n\n### 30000\nMerchant payment configuration could not be found.\n\n**Possible Causes**  \n* The payment provider has not been configured in the store.\n\n**Possible Solutions**  \n* Check the [payment gateways](https://support.bigcommerce.com/s/article/Online-Payment-Methods#setup) settings in your BigCommerce store. \n\n### 30001\nMerchant payment configuration is not correctly being configured.\n\n**Possible Causes**\n* The payment configuration is being rejected by the payment gateway.\n\n**Possible Solutions**\n- Check the [payment gateways](https://support.bigcommerce.com/s/article/Online-Payment-Methods#setup) settings in your BigCommerce store. \n- Reach out the the payment gateway to check the information is correct.\n\n### 30002\nVaulting service is currently not available.\n\n**Possible Causes**  \n* The vaulting feature is not enabled on this store.\n\n**Possible Solutions**  \n* Reach out to the store owner to enable [Stored Credit Cards](https://support.bigcommerce.com/s/article/Enabling-Stored-Credit-Cards). \n\n### 30003\nOrder could not be found.\n\n**Possible Causes**\n- The order does not exist.\n- The order ID is not correct.\n\n**Possible Solutions**  \n* Check the current orders in the store using [Get All Orders](https://developer.bigcommerce.com/api-reference/orders/orders-api/orders/getorders).\n\n\n### 30004\nThe validation on line item and grand total does not match. \n\n**Possible Solutions**\n* Recreate the payment access token\n* Recreate the order\n* Ensure the store settings for taxes and discounts are setup correctly. \n\n\n### 30050\nPayment instrument could not be saved.\n\n**Possible Causes**  \n* Credit card information is incorrect.\n\n**Possible Solutions**\n* Check that the card information is correct.\n\t* `expiry_month` is two digits\n\t* `expiry_year` is four digits\n\n### 30051\nThe stored card was not found.\n\n**Possible Causes**  \n* The card requested for payment is not associated to the shopper.\n\n**Possible Solutions**  \n* Use [Get Payment Methods](/api-reference/payments/payments-create-payment-token-api/payment-methods/paymentsmethodsget) to see available vaulted cards.\n\n### 30100\nPayment access token could not be created.\n\n\n### 30101\nOrder is invalid.\n\n**Possible Causes**  \n* The order is in the wrong status.\n\n**Possible Solutions**\n - Orders must be in Incomplete Status with a `status_id:0`.\n - The order must be created by the Checkout SDK, Checkout API or V2 Orders API. Orders created in the Control and set to an incomplete status will return this error. \n\n### 30102\nThe payment was declined.\n\n**Possible Causes**\n- The card information provided was incorrect\n- The token provided was incorrect\n\n**Possible Solutions**\n- Check that the provider shopper information is correct\n- Make sure the token in the Authorization header field is correct\n\n### 30103\nCard has expired\n\n### 30104\nThe payment was declined. Please contact card issuer for more information.\n\n### 30105\nThe payment was declined due to duplicate payment being submitted.\n\n### 30106\nThe payment was declined due to insufficient funds."
                      header:
                        anchor: payments_error-codes
                    - type: text
                      data: '---'
                    - type: text
                      data: "## FAQ\n\n\n**How can I store a credit card?**\n\nWhen processing a credit payment set `save_instrument: true`. The shopper can also store credit cards during checkout. If you are using the Checkout SDK, it can store the credit card as part of the checkout.\n\n**How do I get a list of stored credit cards?**\n\nUse the Get Payment Methods to get a list of stored payment instruments.\_\n\n**Can I add my payment gateway?**\n\nThe Payments API does not support adding a third party gateway. Payments are processed through BigCommerce.\n\n**Can I issue a refund?**\n\nRefunds can be issued either using the [Control Panel](https://support.bigcommerce.com/s/article/Processing-Refunds) or through the payment gateway directly.\n\n**How do I process payment for a capture credit card?**\n\nOnce a payment has been authorized, the capture step will need to be completed using the [Control Panel](https://support.bigcommerce.com/s/article/How-can-I-set-my-payment-gateway-to-only-authorize-transactions-and-not-capture-the-funds-automatically).\n\n**Can I use this on orders with more than one shipping address?**\nYes, checkouts and orders with more than one consignment can use the Payments API. \n\n**Is store credit supported?**\n\nStore credit is not a supported payment method with the Payments API. Store credit can still be used by the shopper on the storefront, part of the control panel or with the Checkout API.\n\n**Are gift certificates supported?**\n\nGift certificates are not supported with the Payments API. Gift certificates can still be used by the \n"
                      header:
                        anchor: payments_faq
                    - type: text
                      data: >-
                        ## Resources


                        ### Webhooks

                        There are no specific webhooks for payments. 


                        **Related Webhooks:**

                        -
                        [Orders](https://developer.bigcommerce.com/api-docs/getting-started/webhooks/webhook-events#webhook-events_orders)

                        -
                        [Cart](https://developer.bigcommerce.com/api-docs/getting-started/webhooks/webhook-events#webhook-events_cart)


                        ### Related Endpoints

                        * [Create Access
                        Token](/api-reference/payments/payments-create-payment-token-api/payment-access-token/paymentsaccesstokenspost)

                        * [Get Payment
                        Methods](/api-reference/payments/payments-create-payment-token-api/payment-methods/paymentsmethodsget)

                        * [Process
                        Payment](/api-reference/payments/payments-process-payments/payment/paymentspost)


                        ### Related Articles

                        * [Enabling Stored Credit
                        Cards](https://support.bigcommerce.com/s/article/Enabling-Stored-Credit-Cards)
                        (BigCommerce Support)

                        * [Processing
                        Refunds](https://support.bigcommerce.com/s/article/Processing-Refunds)
                        (BigCommerce Support)

                        * [Manually Capturing Transactions (Authorize
                        Only)](https://support.bigcommerce.com/s/article/How-can-I-set-my-payment-gateway-to-only-authorize-transactions-and-not-capture-the-funds-automatically)
                        (BigCommerce Support)

                        * [Available Payment
                        Gateways](https://support.bigcommerce.com/s/article/Available-Payment-Gateways)
                        (BigCommerce Support)
        - title: Orders
          route:
            path: /orders
          data:
            children:
              - title: Overview
                route:
                  path: /orders-overview
                data:
                  blocks:
                    - type: html
                      data: "<h1>Orders</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    \t\t<li><a href=\"#order-overview_what-is-a-order\">What is a Order?</a></li>\n    \t\t<li><a href=\"#order-overview_available-endpoints\">Available Endpoints</a></li>\n        <li><a href=\"#order-overview_storefront-orders\">Storefront Orders API</a></li>\n        <li><a href=\"#order-overview_server-server-checkout\">Server to Server Checkout Orders</a></li>\n        <li><a href=\"#order-overview_v2-orders\">Orders API</a></li>\n    \t\t<li><a href=\"#order-overview_transactions\">Order Transactions</a></li>\n        <li><a href=\"#order-overview_oauth-scopes\">OAuth Scopes</a></li>\n        <li><a href=\"#order-overview_available-webhooks\">Webhooks Available</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## What is an Order?

                        An order is a collection of items, along with customer
                        and shipping information, that has been finalized with a
                        payment or attempted payment. 


                        Orders can contain both digital or physical products.
                        Digital items are delivered via email and do not require
                        a shipping address, whereas physical items require a
                        shipping address and a delivery method. 


                        BigCommerce offers two possible workflows for creating
                        orders via the API: the Server-to-Server Checkout API
                        or  the Orders API.

                        * The Server-to-Server Checkout API represents an
                        extension of the Server-to-Server Cart API and can be
                        used to complete a purchase from product selection to
                        conversion.

                        * The Orders API is used to retrieve or update existing
                        orders or to push orders from a third party, like a POS,
                        to BigCommerce.
                      header:
                        anchor: order-overview_what-is-a-order
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Available Endpoints


                        | Name | Description |

                        | -- | -- |

                        | [Storefront
                        Orders](/api-reference/orders/storefront-orders-api) |
                        Retrieve order information from the Order Confirmation
                        page using JavaScript |

                        | [Server to Server
                        Checkout](/api-reference/cart-checkout/server-server-checkout-api/checkout/createanorder)
                        | Create an order from an existing checkout |

                        | [Orders API](/api-reference/orders/orders-api) |
                        Create and manage orders. Can manage orders created via
                        API or the Control Panel |

                        | [Order
                        Transactions](/api-reference/orders/orders-transactions-api)
                        | Get transaction information for existing orders. Read
                        Only Endpoint |
                      header:
                        anchor: order-overview_available-endpoints
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ##  Storefront Orders API 

                        The Storefront Orders API can be used to return
                        information about a just-placed order on the order
                        confirmation page. You can interact with the Storefront
                        Orders API using an app or a browser API. 


                        For an example using the Fetch API to log order
                        information to the console, see [Storefront Orders
                        API](http://).


                        ### When to Use:

                        * Scrape order information

                        * Send order data to an analytics app
                      header:
                        anchor: order-overview_storefront-orders
                    - type: code
                      data: >-
                        <script>

                        console.log("Log Orders")

                        fetch('/api/storefront/order/{{checkout.order.id}}',
                        {credentials: 'include'})

                        .then(function(response) {

                        return response.json();

                        })

                        .then(function(myJson) {

                        console.log(myJson);

                        });

                        </script>
                      header:
                        title: Log Orders to Console
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Server-to-Server Checkout API


                        The Server-to-Server Checkout API allows you to create a
                        checkout programmatically and then convert it to an
                        order. From there, the order can be managed in the
                        Control Panel or using the V2 Orders API. [See
                        Server-to-Server Checkout](http://) for more.


                        ### When to Use:

                        * Create an order from an existing checkout
                      header:
                        anchor: order-overview_server-server-checkout
                    - type: text
                      data: '---'
                    - type: text
                      data: >-

                        ## Orders API

                        The Orders API can be used to create an order without
                        first creating a cart and checkout. It also allows you
                        to manage an order's billing address, products, coupons,
                        and taxes. See [Orders
                        API](/api-reference/orders/orders-api) for a complete
                        list of methods.


                        ### When to Use: 

                        * Create an order and bypass creating a cart and
                        checkout

                        * Make changes to existing orders

                        * Export or import order information to a third-party
                        system
                      header:
                        anchor: order-overview_v2-orders
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Order Transactions

                        The Order Transactions API is a read-only endpoint that
                        returns transaction or payment data about an order. The
                        data returned does not include payment tokens for a
                        third party such as Braintree. 


                        ### When to Use:

                        * View transaction information about an Order. 
                      header:
                        anchor: order-overview_transactions
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## OAuth Scopes

                        - Orders

                        - Carts

                        - Checkouts


                        For a more details and a full list of available scopes,
                        see [Oauth
                        Scopes](/api-docs/getting-started/basics/authentication#authentication_oauth-scopes).
                      header:
                        anchor: order-oauth-scopes
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Webhooks Available

                        -
                        [Orders](/api-docs/getting-started/webhooks/webhook-events#webhook-events_orders)
                      header:
                        anchor: order-webhooks-available
              - title: Orders API
                route:
                  path: /orders-api-overview
                data:
                  blocks:
                    - type: html
                      data: "<h1>Orders API Overview</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    \t\t<li><a href=\"#orders-api-overview_create-order\">Create an Order</a></li>\n            <ul>\n                <li><a href=\"#orders-api-overview_add-produt-options\">Add an Existing Product with Options</a></li>\n                <li><a href=\"#orders-api-overview_add-custom-product\">Create a Custom Product</a></li>\n                <li><a href=\"#orders-api-overview_order-products\">Order Products</a></li>\n                <li><a href=\"#orders-api-overview_add-billing-address\">Add a Billing Address</a></li>\n                <li><a href=\"#orders-api-overview_add-shipping-address\">Add a Shipping Address</a></li>\n                <li><a href=\"#orders-api-overview_other-recommended-fields\">Other Recommended Fields</a></li>\n                <li><a href=\"#orders-api-overview_create-order-example\">Create Order Example</a></li>\n            </ul>\n            <li><a href=\"#orders-api-guide_order-response\">Order Response</a></li>\n            <li><a href=\"#orders-api-overview_shipping-order\">Shipping an Order</a></li>\n            <ul>\n                <li><a href=\"#orders-api-overview_create-order-shipment\">Create an Order Shipment</a></li>\n                <li><a href=\"#orders-api-overview_multiple-locations\">Multiple Locations</a></li>\n                <li><a href=\"#orders-api-overview_custom-quotes\">Custom Quotes</a></li>\n                <li><a href=\"#orders-api-overview_shipping-carrier\">Shipping Carrier</a></li>\n            </ul>\n            <li><a href=\"#orders-api-overview_taxes\">Taxes</a></li>\n                <ul><li><a href=\"#orders-api-overview_taxes_avalara\">Avalara</a></li></ul>\n            <li><a href=\"#orders-api-overview_calculation_totals\">Calculation of Totals</a></li>\n            <li><a href=\"#orders-api-overview_order_status\">Order Status</a></li>\n            <ul><li><a href=\"#orders-api-overview_custom-order-status\">Custom Order Status</a></li></ul>\n            <li><a href=\"#orders-api-overview_faq\">FAQ</a></li>\n            \n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Introduction


                        The Orders API is used when an order is being created
                        manually. If you are using the Server to Server Checkout
                        an Order can be created using the orders endpoint. The
                        order can then be updated if needed.


                        A sample order workflow might include:

                        * Creating the order for either an existing customer or
                        guest

                        * Taking payment using either the Control Panel or third
                        party payment solutions

                        * Creating a shipment for the order to generate an order
                        confirmation email and mark it as shipped



                        ### Prerequisites:

                        **BigCommerce Store**  

                        An active BigCommerce store with a sellable
                        [product](/api-reference/catalog/catalog-api/products/createproduct)


                        **Scopes**  

                        The following
                        [OAuth](/api-docs/getting-started/authentication#authentication_oauth-scopes)
                        scopes are required:

                        * Modify Orders
                      header:
                        anchor: orders-api-overview_introduction
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create an Order


                        We will go over adding an existing product, adding a
                        custom product, adding a billing address and adding a
                        shipping address. At the end of this section, you will
                        be able to see the full sample request to create an
                        order.


                        Want to skip ahead and see the [full
                        request](/api-docs/orders/orders-api-overview#orders-api-overview_create-order-example)?


                        At a minimum, an order needs products and a billing
                        address. If either of these fields are left off the
                        order is rejected.


                        A order can be created with either an existing Product
                        or using a Custom Product.
                      header:
                        anchor: orders-api-overview_create-order
                    - type: text
                      data: "### Add an Existing Product with Options\n\n**Required Fields:**\n- product_id\n- product_options (required if adding a product with variants)\n\t- product_option > id\n\t- product_option > value\n- quantity\n- price_inc_tax (optional)\n- price_ex_tax (optional)\n\nTo get the `product_option > id` and `product_option > value`, make a request to [Get Variants](/api-reference/catalog/catalog-api/product-variants/getvariantsbyproductid). Variants will return the `option_value > id` and `option_values > option_id`.\n\nMake note of the `option_values > id` and `option_values > option_id`. These will be passed into the products array."
                      header:
                        anchor: orders-api-overview_add-produt-options
                    - type: callout
                      data:
                        body: >-
                          If price_ex_tax or price_inc_tax is set, then they
                          both need to bet specified. Otherwise the order total
                          will not calculate correctly.
                    - type: code
                      data: |-
                        {
                            "data": [
                                {
                                    "id": 421,
                                    "product_id": 184,
                                    "sku": "RED",
                                    "sku_id": 383,
                                    "price": null,
                                    "calculated_price": 249,
                                    "sale_price": null,
                                    "retail_price": null,
                                    "map_price": null,
                                    "weight": null,
                                    "calculated_weight": 15,
                                    "width": null,
                                    "height": null,
                                    "depth": null,
                                    "is_free_shipping": false,
                                    "fixed_cost_shipping_price": null,
                                    "purchasing_disabled": false,
                                    "purchasing_disabled_message": "",
                                    "image_url": "",
                                    "cost_price": 0,
                                    "upc": "",
                                    "mpn": "",
                                    "gtin": "",
                                    "inventory_level": 0,
                                    "inventory_warning_level": 0,
                                    "bin_picking_number": "",
                                    "option_values": [
                                        {
                                            "id": 180,
                                            "label": "Red",
                                            "option_id": 200,
                                            "option_display_name": "Color"
                                        },
                                        {
                                            "id": 192,
                                            "label": "Small",
                                            "option_id": 230,
                                            "option_display_name": "T-Shirt Size"
                                        }
                                    ]
                                }
                        ...
                      header:
                        title: Example /GET Variants Response
                        subtitle: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/variants
                      config:
                        mode: json
                        highlightRange:
                          - from: '30'
                            to: '42'
                    - type: text
                      data: >-
                        Next, create the products array which includes the
                        custom product and the existing product with product
                        options. Using the `option_id` and `option_value > id`
                        from the previous request we can build the products
                        array. 


                        `product_options` > `id` = `option_values` > `option_id`


                        `product_options` > `value` = `option_values` > `id`


                        The `product_options` > `value` must be passed in as a
                        string.
                    - type: code
                      data: |-
                        "products":[
                                  {
                                      "name": "BigCommerce Poster",
                                      "quantity": 1,
                                      "price_inc_tax": 10.98,
                                      "price_ex_tax": 10.00
                                  },
                                  {
                                      "product_id": 184,
                                        "product_options":[
                                            {
                                                "id": 200,
                                                "value": "180"
                                            },
                                            {
                                                "id": 230,
                                                "value": "192"
                                            }
                                        ]

                                  }
                              ]
                      header:
                        title: Example Products Array
                        subtitle: This is an abbreviated request
                      config:
                        mode: json
                    - type: text
                      data: |-
                        ### Create a Custom Product

                        **Required Fields:**
                        * name – Product Name
                        * quantity – Number of items
                        * price_inc_tax – Price including tax
                        * price_ex_tax – Price excluding tax
                        * sku (optional)
                      header:
                        anchor: orders-api-overview_add-custom-product
                    - type: code
                      data: |2-
                          "products": [
                            {
                              "name": "BigCommerce Poster",
                              "quantity": 1,
                              "price_inc_tax": 10.98,
                              "price_ex_tax": 10
                            },

                             {
                              "name": "BigCommerce Coffee Mug",
                              "quantity": 1,
                              "price_inc_tax": 50.00,
                              "price_ex_tax": 45.00
                            }
                          ]
                      header:
                        subtitle: This is an abbreviated request
                        title: Custom Order Products Array
                      config:
                        mode: json
                    - type: callout
                      data:
                        body: >-
                          Creating a custom product does not add it to the
                          catalog. Only to the current order.
                    - type: text
                      data: >-
                        ### Order Products


                        **Pricing**


                        If price is not specified, it will automatically pick up
                        the price from the store’s product catalog. However, you
                        can override this via `price_inc_tax` and
                        `price_ex_tax`.


                        If the `price_inc_tax` or `price_ex_tax` specified then
                        any variant pricing is ignored and the order products
                        base_price is updated according to the store settings.
                        For example, if the store is set to display prices with
                        tax included, then the `base_price` will be
                        `price_inc_tax`.



                        **Stock**


                        For products that are configured to track stock, the
                        quantity specified on the order will reduce the stock on
                        hand. When there is not enough inventory to fulfill the
                        order, the order will be rejected with an “out of stock”
                        error code.


                        **Min and Max Quantities**


                        For products that have min and max quantities specified
                        in their settings, the API will honor these, and will
                        reject orders appropriately.


                        **Options**


                        For products where product options are required, the API
                        will validate these requirements to ensure that the
                        product options are specified.
                      header:
                        anchor: orders-api-overview_order-products
                    - type: text
                      data: |-
                        ### Add a Billing Address

                        **Required Fields:**
                        * first_name 
                        * last_name 
                        * street_1 
                        * city 
                        * state 
                        * zip 
                        * country 
                        * country_iso2 
                        * email
                      header:
                        anchor: orders-api-overview_add-billing-address
                    - type: code
                      data: |2-
                            "billing_address": {
                                "first_name": "Jane",
                                "last_name": "Doe",
                                "company": "",
                                "street_1": "123 Main Street",
                                "street_2": "",
                                "city": "Austin",
                                "state": "Texas",
                                "zip": "78751",
                                "country": "United States",
                                "country_iso2": "US",
                                "email": "janedoe@email.com"
                            }
                      header:
                        title: Add a Billing Address
                        subtitle: This is an abbreviated request
                      config:
                        mode: json
                    - type: callout
                      data:
                        body: >-
                          If a shipping address is not provided, it defaults to
                          the billing address.
                    - type: text
                      data: >-
                        ### Add a Shipping Address - optional


                        **Required Fields:**

                        * first_name 

                        * last_name 

                        * street_1 

                        * city 

                        * state 

                        * zip 

                        * country 

                        * country_iso2 

                        * email


                        The shipping address is input as an array object since
                        more than one shipping address can be added at a time.
                        Adding multiple shipping addresses allows for an order
                        to ship to multiple locations.
                      header:
                        anchor: orders-api-overview_add-shipping-address
                    - type: code
                      data: |2-
                            "shipping_addresses": [
                                {
                                    "first_name": "Trishy",
                                    "last_name": "Test",
                                    "company": "Acme Pty Ltd",
                                    "street_1": "666 Sussex St",
                                    "street_2": "",
                                    "city": "Anywhere",
                                    "state": "Some State",
                                    "zip": "12345",
                                    "country": "United States",
                                    "country_iso2": "US",
                                    "phone": "",
                                    "email": "trish@testing.com"
                                }
                      header:
                        title: Add a shipping address
                        subtitle: This is an abbreviated request
                      config:
                        mode: json
                    - type: text
                      data: >-
                        ### Other Recommended Fields

                        Below are fields which are recommended but not required
                        when creating an order.


                        **Customer ID**


                        The customer_id will determine the price the shopper
                        pays for an item. Customer ID’s are tied to customer
                        group discounts and Price Lists. Set the `customer_id`
                        to 0 when creating a guest order.


                        **Shipping Address**


                        If a shipping address is not provided, it will default
                        to the billing addresses provided.


                        **Status**


                        If a status is not provided, it defaults to a status of
                        1 or Pending. 


                        **Discounts**


                        Manual discounts are supported. To add a manual discount
                        either overwrite the product price or use
                        `discount_amount`. This accepts a fixed dollar amount.
                      header:
                        anchor: orders-api-overview_other-recommended-fields
                    - type: text
                      data: >-
                        ### Create Order Example


                        After the products, billing and shipping address are
                        added, an order can be created.
                      header:
                        anchor: orders-api-overview_create-order-example
                    - type: code
                      data: |-
                        {
                          "status_id": 0,
                          "customer_id": 11,
                          "billing_address": {
                            "first_name": "Jane",
                            "last_name": "Doe",
                            "street_1": "123 Main Street",
                            "city": "Austin",
                            "state": "Texas",
                            "zip": "78751",
                            "country": "United States",
                            "country_iso2": "US",
                            "email": "janedoe@email.com"
                          },
                          "shipping_addresses": [
                            {
                              "first_name": "Trish",
                              "last_name": "Test",
                              "company": "Acme Pty Ltd",
                              "street_1": "666 Sussex St",
                              "city": "Austin",
                              "state": "Texas",
                              "zip": "78751",
                              "country": "United States",
                              "country_iso2": "US",
                              "email": "elsie@example.com"
                            }
                          ],
                          "products": [
                            {
                              "name": "BigCommerce Poster",
                              "quantity": 1,
                              "price_inc_tax": 10.98,
                              "price_ex_tax": 10
                            },
                             {
                              "name": "BigCommerce Coffee Mug",
                              "quantity": 1,
                              "price_inc_tax": 50.00,
                              "price_ex_tax": 45.00
                            },
                                  {
                                      "product_id": 184,
                                        "product_options":[
                                            {
                                                "id": 200,
                                                "value": "180"
                                            },
                                            {
                                                "id": 230,
                                                "value": "192"
                                            }
                                        ]

                                  }
                          ]
                        }
                      header:
                        title: Create an Order Request
                      config:
                        mode: json
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Order Response


                        The response will have abbreviated order contents with
                        sub-resources available to get the full order
                        information. The order is automatically set to a status
                        of 1 or Pending. It also returns an id which is the
                        order id. 


                        In the example below, the order ID is 193.

                        * The order products sub-resource will list the products
                        added.

                        * The shipping_addresses sub-resource will have the
                        shipping addresses.

                        * The coupons sub-resource will have any coupons added
                        to the order.
                      header:
                        anchor: orders-api-guide_order-response
                    - type: callout
                      data:
                        body: >-
                          Coupons can not be added to an order via API. Use the
                          `discount_amount` instead.
                    - type: code
                      data: |-
                        {
                          "id": 193,
                          "customer_id": 0,
                          "date_created": "Fri, 12 Oct 2018 19:06:23 +0000",
                          "date_modified": "Fri, 12 Oct 2018 19:06:23 +0000",
                          "date_shipped": "",
                          "status_id": 1,
                          "status": "Pending",
                          "subtotal_ex_tax": "10.0000",
                          "subtotal_inc_tax": "10.9800",
                          "subtotal_tax": "0.9800",
                          "base_shipping_cost": "0.0000",
                          "shipping_cost_ex_tax": "0.0000",
                          "shipping_cost_inc_tax": "0.0000",
                          "shipping_cost_tax": "0.0000",
                          "shipping_cost_tax_class_id": 0,
                          "base_handling_cost": "0.0000",
                          "handling_cost_ex_tax": "0.0000",
                          "handling_cost_inc_tax": "0.0000",
                          "handling_cost_tax": "0.0000",
                          "handling_cost_tax_class_id": 0,
                          "base_wrapping_cost": "0.0000",
                          "wrapping_cost_ex_tax": "0.0000",
                          "wrapping_cost_inc_tax": "0.0000",
                          "wrapping_cost_tax": "0.0000",
                          "wrapping_cost_tax_class_id": 0,
                          "total_ex_tax": "10.0000",
                          "total_inc_tax": "10.9800",
                          "total_tax": "0.9800",
                          "items_total": 1,
                          "items_shipped": 0,
                          "payment_method": "Manual",
                          "payment_provider_id": null,
                          "payment_status": "",
                          "refunded_amount": "0.0000",
                          "order_is_digital": false,
                          "store_credit_amount": "0.0000",
                          "gift_certificate_amount": "0.0000",
                          "ip_address": "",
                          "geoip_country": "",
                          "geoip_country_iso2": "",
                          "currency_id": 1,
                          "currency_code": "USD",
                          "currency_exchange_rate": "1.0000000000",
                          "default_currency_id": 1,
                          "default_currency_code": "USD",
                          "staff_notes": null,
                          "customer_message": null,
                          "discount_amount": "0.0000",
                          "coupon_discount": "0.0000",
                          "shipping_address_count": 1,
                          "is_deleted": false,
                          "ebay_order_id": "0",
                          "cart_id": null,
                          "billing_address": {
                            "first_name": "Jane",
                            "last_name": "Doe",
                            "company": "",
                            "street_1": "123 Main Street",
                            "street_2": "",
                            "city": "Austin",
                            "state": "Texas",
                            "zip": "78751",
                            "country": "United States",
                            "country_iso2": "US",
                            "phone": "",
                            "email": "janedoe@email.com",
                            "form_fields": []
                          },
                          "is_email_opt_in": false,
                          "credit_card_type": null,
                          "order_source": "external",
                          "external_source": null,
                          "products": {
                            "url": "https://api.bigcommerce.com/stores/{store_hash}/v2/orders/193/products",
                            "resource": "/orders/193/products"
                          },
                          "shipping_addresses": {
                            "url": "https://api.bigcommerce.com/stores/{store_hash}/v2/orders/193/shippingaddresses",
                            "resource": "/orders/193/shippingaddresses"
                          },
                          "coupons": {
                            "url": "https://api.bigcommerce.com/stores/{store_hash}/v2/orders/193/coupons",
                            "resource": "/orders/193/coupons"
                          },
                          "external_id": null,
                          "external_merchant_id": null,
                          "custom_status": "Pending"
                        }
                      header:
                        title: Create Order Response
                      config:
                        mode: json
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Shipping an Order

                        We will go over creating a shipment for an order,
                        shipping quotes, shipping carriers and shipping to
                        multiple locations. 
                      header:
                        anchor: orders-api-overview_shipping-order
                    - type: text
                      data: >-
                        ### Create an Order Shipment


                        **Required Fields:**

                        * order_address_id

                        * shipping_provider

                        * items


                        Once an Order has products, a billing address and at
                        least one shipping address a order shipment can be
                        created. Order shipments are a way to mark an order as
                        shipped with the shipping information. 


                        To get the `order_address_id`  use the ID returned in
                        [Order Shipping
                        Address](https://developer.bigcommerce.com/api-reference/orders/orders-api/order-shipping-addresses/getordersorderidshippingaddressesid).


                        The items array requires the product quantity and
                        `order_product_id`. The `order_product_id` is the ID
                        returned from [Order
                        Products](https://developer.bigcommerce.com/api-reference/orders/orders-api/order-products/getordersorderidproducts).


                        There does not need to be a shipping provider. If the
                        shipping provider is not sent in at all, it will default
                        to custom and a tracking link is not generated. To have
                        the tracking link generated without a shipping provider,
                        provide an empty string. To add a shipping provider, see
                        the available options on [Order
                        Shipment](/api-reference/orders/orders-api/models/ordershipment). 


                        Once the order shipment is created, it will
                        automatically send out an email to the billing address
                        with the shipment confirmation. To stop this behavior
                        adjust the [Order
                        Notification](https://support.bigcommerce.com/s/article/Customer-Order-Notifications#enable)
                        settings in the Control Panel. 


                        If the order shipment is deleted, the status of the
                        shipment is still in shipped. The status will need to be
                        [manually
                        changed](/api-reference/orders/orders-api/order-status/getorderstatuses).
                      header:
                        anchor: orders-api-overview_create-order-shipment
                    - type: code
                      data: |-
                        {
                          "tracking_number": "EJ958083578UK",
                          "comments": "Janes Order",
                          "order_address_id": "128",
                          "shipping_provider": "",
                          "items": [
                                {
                                    "order_product_id": 194,
                                    "product_id": 0,
                                    "quantity": 1
                                },
                                {
                                    "order_product_id": 195,
                                    "product_id": 0,
                                    "quantity": 1
                                }
                          ]
                        }
                      header:
                        title: Create Order Shipment
                      config:
                        mode: json
                    - type: code
                      data: |
                        {
                            "id": 11,
                            "order_id": 228,
                            "customer_id": 11,
                            "order_address_id": 131,
                            "date_created": "Wed, 13 Mar 2019 16:35:37 +0000",
                            "tracking_number": "EJ958083578US",
                            "merchant_shipping_cost": "0.0000",
                            "shipping_method": "None",
                            "comments": "Ready to go...",
                            "shipping_provider": "",
                            "tracking_carrier": "",
                            "billing_address": {
                                "first_name": "Jane",
                                "last_name": "Doe",
                                "company": "",
                                "street_1": "123 Main Street",
                                "street_2": "",
                                "city": "Austin",
                                "state": "Texas",
                                "zip": "78751",
                                "country": "United States",
                                "country_iso2": "US",
                                "phone": "",
                                "email": "janedoe@email.com"
                            },
                            "shipping_address": {
                                "first_name": "Trishy",
                                "last_name": "Test",
                                "company": "Acme Pty Ltd",
                                "street_1": "666 Sussex St",
                                "street_2": "",
                                "city": "Anywhere",
                                "state": "Some State",
                                "zip": "12345",
                                "country": "United States",
                                "country_iso2": "US",
                                "phone": "",
                                "email": "elsie@example.com"
                            },
                            "items": [
                                {
                                    "order_product_id": 194,
                                    "product_id": 0,
                                    "quantity": 1
                                },
                                {
                                    "order_product_id": 195,
                                    "product_id": 0,
                                    "quantity": 1
                                }
                            ]
                        }
                      header:
                        title: Order Shipment Response
                      config:
                        mode: json
                    - type: text
                      data: >-
                        ### Multiple Locations


                        Orders can have multiple shipment locations. There needs
                        to be more than one product or quantity of a product and
                        more than one shipping addresses. A shipping address can
                        be added either during the create or using an update.


                        To ship to multiple locations create an order shipment
                        for each location and items. Only one POST request per
                        shipment.
                      header:
                        anchor: orders-api-overview_multiple-locations
                    - type: callout
                      data:
                        body: >-
                          When adding shipping addresses during an order PUT or
                          POST, the API will allow you to add more than is
                          necessary.
                    - type: text
                      data: >-
                        ### Custom Quotes

                        An order can be created with a `shipping_cost_ex_tax`
                        and `shipping_cost_inc_tax`. This is a way to add a
                        custom shipping amount to an order. This can be added
                        when creating or updating an order. 
                      header:
                        anchor: orders-api-overview_custom-quotes
                    - type: callout
                      data:
                        body: >-
                          Both `shipping_cost_ex_tax` and
                          `shipping_cost_inc_tax` must be included otherwise,
                          the final order amount will not be calculated
                          correctly. 
                    - type: text
                      data: >-
                        ### Shipping Carrier

                        Generating a quote through a shipping carrier is
                        currently not supported. A shipping carrier can be
                        specified when creating an Order Shipment. The quote can
                        be generate elsewhere, then update the
                        `shipping_cost_ex_tax` and `shipping_cost_inc_tax` for
                        the order total to be correct.. 
                      header:
                        anchor: orders-api-overview_shipping-carrier
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Taxes

                        Tax will be calculated based on the tax rules specified
                        in the store, except in the case of automatic taxes.
                        However, in both cases, you can optionally override the
                        tax values by specifying `price_inc_tax` and
                        `price_ex_tax`.


                        If a store has automatic tax enabled, BigCommerce does
                        not compute sales tax on orders created via the API.
                      header:
                        anchor: orders-api-overview_taxes
                    - type: text
                      data: >-
                        ### Avalara

                        When the store is subscribed to Avalara Premium, a value
                        of API Tax Override is written to the Order Tax object’s
                        name field.


                        Abbreviated state names in shipping and billing
                        addresses will prevent tax documents from being
                        submitted to Avalara. To ensure successful Avalara
                        tax-document submission, spell state names out in full.
                        For example, supplying CA as a state name leads to no
                        tax-document submission. Supplying California as a state
                        name leads to a successful submission.


                        POST or PUT orders on stores with Avalara Premium cause
                        tax documents to be submitted. If a store has subscribed
                        to Avalara Premium, BigCommerce automatically submits
                        tax documents to Avalara when the order achieves a paid
                        status. See Order Status below for a list of paid
                        statuses.


                        You can create overrides for calculated values such as
                        product prices, subtotal and totals by sending a fixed
                        value in the request. If values are not supplied for
                        these properties, they will be automatically calculated
                        based on the preset store values and tax rules.



                        | Existing Status | Status Passed | Resultant Status |
                        Avalara Tax Document Submission |

                        | --- | --- | --- | --- |

                        | Any | None | `Pending` | None |

                        | Paid or `Refunded` | Paid | Paid | None |

                        | Unpaid or `Refunded` | Unpaid | Unpaid | None |

                        | Paid or `Refunded` | Unpaid | Unpaid | Tax document
                        voided |

                        | Unpaid or `Refunded` | Paid | Paid | Tax document
                        submitted |
                      header:
                        anchor: orders-api-overview_taxes_avalara
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Overriding Preset Values

                        You can create overrides for calculated values such as
                        product prices, subtotal and totals by sending a fixed
                        value in the request. If values are not supplied for
                        these properties, they will be automatically calculated
                        based on the preset store values and tax rules.
                      header:
                        anchor: '#orders-api-overview_override-preset-values'
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Calculation of Totals

                        When not specified, order subtotal and total are
                        automatically calculated.


                        You can override order subtotal and/or total. If you
                        choose to override one, we strongly recommend that
                        override both, because the system will not be able to
                        accurately calculate the other.


                        Edits to the following properties will trigger a
                        recalculation of the subtotal and total:


                        *   products

                        *   discount_amount

                        *   shipping_cost_ex_tax

                        *   shipping_cost_inc_tax

                        *   handling_cost_ex_tax

                        *   handling_cost_inc_tax

                        *   wrapping_cost_ex_tax

                        *   wrapping_cost_inc_tax

                        *   billing_address

                        *   shipping_addresses
                      header:
                        anchor: orders-api-overview_calculation_totals
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Order Status

                        When moving through order management, the order status
                        is not automatically updated. This needs to be changed
                        as needed. 


                        You can specify `status_id`, which will automatically
                        set the corresponding status. When `status_id` is not
                        specified, it will be automatically set to 1, which will
                        set status to Pending.


                        The following statuses are of the paid type:

                        * Shipped

                        * Partially Shipped

                        * Awaiting Pickup

                        * Awaiting Shipment

                        * Completed

                        * Awaiting Fulfillment


                        BigCommerce considers all statuses other than those
                        above to be of the unpaid type, except Refunded, which
                        is considered neither paid or unpaid. 
                      header:
                        anchor: orders-api-overview_order_status
                    - type: text
                      data: >-
                        ### Custom Order Status


                        The order status label can be changed in the Control
                        Panel. This **does not** change the underlying
                        functionality. See our support article on [Order
                        Status](https://support.bigcommerce.com/s/article/Order-Statuses#rename).
                      header:
                        anchor: orders-api-overview_custom-order-status
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## FAQ


                        **Is adding coupons available?**


                        Coupon redemption is not currently supported. The
                        `coupon_discount` field can not be written to. A
                        discount can be added to the order by using the
                        `discount_amount`.


                        **How do I create an order for a guest?**


                        To specify a guest checkout, set `customer_id` to 0.


                        **How do I set the order source?**


                        The `order_source` cannot be specified, and will be set
                        to external. You can optionally specify a value for
                        `external_source` to specify which external source the
                        order is coming from - e.g., POS system X, accounting
                        system Y, etc.


                        **Can I create an order with only custom products?**


                        Yes, the products are not added to the store's catalog.


                        **What is the difference between country_ISO2 and
                        country?** 


                        In the shipping and billing addresses, there is no
                        requirement to specify country when `country_ISO2` is
                        specified and vice versa.


                        **How can I take a payment for an Order?**

                        You can either process payment through a third party or
                        using the Control Panel. 


                        **Can I generate a shipping quote from a carrier using
                        the API?**


                        Not at this time. If an order is created either in the
                        Control Panel or via API, then it returns a 204 when
                        trying to get a [Shipping
                        Quote](https://developer.bigcommerce.com/api-reference/orders/orders-api/models/shippingquotes).
                      header:
                        anchor: orders-api-overview_faq
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Resources

                        ### Webhooks

                        -
                        [Orders](/api-docs/getting-started/webhooks/webhook-events#webhook-events_orders)


                        ### Related Endpoints

                        -
                        [Orders](/api-reference/orders/orders-api/orders/postorders)

                        - [Order
                        Shipments](/api-reference/orders/orders-api/order-shipments/postordersorderidshipments)

                        - [Order
                        Status](/api-reference/orders/orders-api/order-status/getorderstatuses)

                        - [Shipping
                        Quotes](/api-reference/orders/orders-api/order-shipping-addresses-quotes/getordersorderidshippingaddressesshippingaddressidshippingquotes)

                        - [Order
                        Products](/api-reference/orders/orders-api/order-products/getordersorderidproducts)

                        - [Order Shipping
                        Address](/api-reference/orders/orders-api/order-shipping-addresses/getordersorderidshippingaddresses)

                        - [Order
                        Coupons](/api-reference/orders/orders-api/order-coupons/getordersorderidcoupons)
                            
                        ### Related Articles

                        - [Order
                        Status](https://support.bigcommerce.com/s/article/Order-Statuses#rename)
                        (BigCommerce Support)

                        - [Order
                        Notifications](https://support.bigcommerce.com/s/article/Customer-Order-Notifications#enable)
                        (BigCommerce Support) 
                      header:
                        anchor: orders-api-overview_resources
  /api-reference:
    title: API Reference
    data:
      children:
        - title: Catalog
          route:
            path: /catalog
          data:
            children:
              - title: Catalog API
                config:
                  includeDownloadLink: true
                route:
                  path: /catalog-api
                data:
                  $ref: ./BigCommerce_Catalog_API.oas2.yml
              - title: Price Lists API
                config:
                  includeDownloadLink: true
                route:
                  path: /pricelists-api
                data:
                  $ref: ./BigCommerce_Price_Lists_API.oas2.yml
        - title: Store Management
          route:
            path: /store-management
          data:
            children:
              - title: Store Information API
                config:
                  includeDownloadLink: true
                route:
                  path: /store-information-api
                data:
                  $ref: ./BigCommerce_Store_Information_API.oas2.yml
              - title: ' Currency API'
                config:
                  includeDownloadLink: true
                route:
                  path: /currency-api
                data:
                  $ref: ./BigCommerce_Currency_API.oas2.yml
              - title: Geography API
                config:
                  includeDownloadLink: true
                route:
                  path: /geography-api
                data:
                  $ref: ./BigCommerce_Geography_API.oas2.yml
              - title: Tax Class API
                config:
                  includeDownloadLink: true
                route:
                  path: /tax-classes-api
                data:
                  $ref: ./BigCommerce_Tax_Class_API.oas2.yml
              - title: Shipping API
                config:
                  includeDownloadLink: true
                route:
                  path: /shipping-api
                data:
                  $ref: ./BigCommerce_Shipping_API.oas2.yml
              - title: Shipping Provider API
                route:
                  path: /shipping-provider-api
                data:
                  $ref: ./BigCommerce_Shipping_Provider_API.oas2.yml
                config:
                  includeDownloadLink: true
        - title: Customers & Subscribers
          route:
            path: /customer-subscribers
          data:
            children:
              - title: V3 Customers API
                config:
                  sidebar:
                    token: BETA
                  includeDownloadLink: true
                route:
                  path: /v3-customers-api
                data:
                  $ref: ./BigCommerce_Customers_V3_API.oas2.yml
              - title: Customers API
                config:
                  includeDownloadLink: true
                route:
                  path: /customers-api
                data:
                  $ref: ./BigCommerce_Customers_API.oas2.yml
              - title: Subscribers API
                config:
                  includeDownloadLink: true
                route:
                  path: /subscribers-api
                data:
                  $ref: ./BigCommerce_Subscribers_API.oas2.yml
              - title: Wishlist API
                config:
                  sidebar:
                    token: beta
                  includeDownloadLink: true
                route:
                  path: /wishlist-api
                data:
                  $ref: ./BigCommerce_Wishlist_API.oas2.yml
        - title: Marketing
          route:
            path: /marketing
          data:
            children:
              - title: Marketing API
                config:
                  includeDownloadLink: true
                route:
                  path: /marketing-api
                data:
                  $ref: ./BigCommerce_Marketing_API.oas2.yml
              - title: Store Content API
                config:
                  includeDownloadLink: true
                route:
                  path: /store-content-api
                data:
                  $ref: ./BigCommerce_Store_Content_API.oas2.yml
        - title: Storefront
          route:
            path: /storefront
          data:
            children:
              - title: Scripts API
                config:
                  includeDownloadLink: true
                route:
                  path: /content-scripts-api
                data:
                  $ref: ./BigCommerce_Scripts_API.oas2.yml
              - title: Themes API
                config:
                  includeDownloadLink: true
                route:
                  path: /themes-api
                data:
                  $ref: ./BigCommerce_Themes_API.oas2.yml
              - title: Widgets API
                config:
                  includeDownloadLink: true
                route:
                  path: /widgets-api
                data:
                  $ref: ./BigCommerce_Widgets_API.oas2.yml
        - title: Cart & Checkout
          route:
            path: /cart-checkout
          data:
            children:
              - title: Storefront Cart API
                config:
                  includeDownloadLink: true
                route:
                  path: /storefront-cart-api
                data:
                  $ref: ./BigCommerce_Storefront_Cart_API.oas2.yml
              - title: Storefront Checkout API
                config:
                  includeDownloadLink: true
                route:
                  path: /storefront-checkout-api
                data:
                  $ref: ./BigCommerce_Storefront_Checkout_API.oas2.yml
              - title: Server to Server Cart API
                config:
                  includeDownloadLink: true
                route:
                  path: /server-server-cart-api
                data:
                  $ref: ./BigCommerce_Server_to_Server_Cart_API.oas2.yml
              - title: Server to Server Checkout API
                config:
                  includeDownloadLink: true
                route:
                  path: /server-server-checkout-api
                data:
                  $ref: ./BigCommerce_Server_to_Server_Checkout_API.oas2.yml
        - title: Orders
          route:
            path: /orders
          data:
            children:
              - title: Orders API
                config:
                  includeDownloadLink: true
                route:
                  path: /orders-api
                data:
                  $ref: ./BigCommerce_Orders_API.oas2.yml
              - title: Order Transactions API
                config:
                  includeDownloadLink: true
                route:
                  path: /orders-transactions-api
                data:
                  $ref: ./BigCommerce_Order_Transactions_API.oas2.yml
              - title: Storefront Orders API
                config:
                  includeDownloadLink: true
                route:
                  path: /storefront-orders-api
                data:
                  $ref: ./BigCommerce_Storefront_Orders_API.oas2.yml
        - title: Payments
          route:
            path: /payments
          data:
            children:
              - title: Payment Token & Payment Methods
                route:
                  path: /payments-create-payment-token-api
                config:
                  includeDownloadLink: true
                data:
                  $ref: ./BigCommerce_Payments_API.oas2.yml
              - title: Process Payment
                route:
                  path: /payments-process-payments
                data:
                  $ref: ./BigCommerce_Process_Payment_API.oas2.yml
                config:
                  includeDownloadLink: true
              - title: Enabled Store Payment Methods
                config:
                  includeDownloadLink: true
                route:
                  path: /payment-methods-api
                data:
                  $ref: ./BigCommerce_Enabled_Payment_Methods_API.oas2.yml
  /stencil-docs:
    title: Stencil Docs
    data:
      children:
        - title: Getting Started
          route:
            path: /getting-started
          data:
            children:
              - title: About Stencil
                route:
                  path: /about-stencil
                data:
                  blocks:
                    - type: html
                      data: <h1>About Stencil</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#about_what-is-stencil\"> What is Stencil?</a></li>\n\t\t<li><a href=\"#about_features-and-stack\"> Stencil Development Features and Technology Stack</a></li>\n\t\t<li><a href=\"#about_key-components\">Key Components: Video Demo</a></li>\n\t\t<li><a href=\"#about_blueprint\"> Blueprint (Legacy Framework) Documentation </a></li>\n\t</ul>\n</div>\n"
                    - type: text
                      data: >-
                        ## What is Stencil?


                        Stencil is BigCommerce's theme engine. It incorporates
                        industry best practices in technology, design standards,
                        and SEO, and allows you to build a stunning storefront
                        that engages shoppers and encourages checkouts on any
                        device. Stencil themes are supported on the [following
                        browsers](https://support.bigcommerce.com/s/article/Themes-Supported-Browsers).


                        In addition to the features listed below, Stencil allows
                        merchants to customize a storefront’s look and feel with
                        no coding, making it accessible to a wide range of
                        users.


                        Stencil powers BigCommerce’s
                        [Cornerstone](https://github.com/bigcommerce/cornerstone)
                        theme, which serves as your framework for creating
                        custom sites. Cornerstone is available on Github and
                        will be referenced throughout the documentation in order
                        to demonstrate Stencil’s capabilities. See the
                        [Cornerstone theme
                        demo](http://cornerstone-light-demo.mybigcommerce.com/).


                        ### Related Links:

                        * [Cornerstone Github
                        Repository](https://github.com/bigcommerce/cornerstone)

                        * [Cornerstone theme
                        demo](http://cornerstone-light-demo.mybigcommerce.com/)

                        * [Store Design (BigCommerce
                        Support)](https://forum.bigcommerce.com/s/article/Store-Design)
                      header:
                        anchor: about_what-is-stencil
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Stencil Development Features and Technology Stack


                        Stencil provides the following features, allowing
                        BigCommerce theme developers to create beautiful,
                        dynamic, and powerful storefronts.



                        ### Stencil Command Line Interface (Stencil CLI)


                        The Stencil CLI enables developers to locally develop
                        and customize on any Stencil theme with no impact on a
                        merchant's live storefront during the development
                        process. When developing locally, you will have access
                        to real-time Browsersync preview and testing across
                        desktop, mobile, and tablet devices/viewports.


                        Stencil CLI runs on the
                        [Node.js](https://nodejs.org/en/) runtime environment.
                        Installing Node.js also provides the required [npm
                        package manager](https://www.npmjs.com/package/npm).


                        ### Logic-Based Templates


                        Stencil's logic based templates allow BigCommerce
                        developers to customize storefront pages efficiently
                        with the lightweight templating languge, Handlebars.js. 
                        Handlebars allows you to efficiently embed dynamic and
                        conditional logic onto your storefront pages.


                        ### CSS and Design Assets


                        Stencil's Sass and SCSS support allows developers to
                        nest properties, variables, and mix-ins. Cornerstone
                        uses a BigCommerce pattern library called Citadel, which
                        is built on top of the ZURB Foundation framework,
                        version 5.5.3.


                        **Note:** Stencil does not support Foundation 6.x, due
                        to incompatible updates introduced between versions 5.x
                        and 6.x.


                        Foundation offers the framework for creating a
                        responsive theme. You have the option of swapping out
                        Foundation for another framework, although doing so
                        would require significant work.


                        Foundation assets bundled with Cornerstone are located
                        in these subdirectories: 


                        * `Cornerstone/assets/scss/settings/foundation/ `

                        * `Cornerstone/assets/scss/components/foundation/`


                        ### Page-specific Resource Definition


                        YAML front matter allows you to request only the objects
                        you need on the storefront, increasing page speed and
                        allowing you to define the content to render with just a
                        few keystrokes.


                        ### Javascript Event Hooks


                        Stencil themes can access remote objects through event
                        hooks, using the hooks to trigger defined events based
                        on shopper behavior. This will allow you to collect
                        product data and optimize a shopper's experience. To
                        facilitate theme-building, BigCommerce provides the
                        [stencil-utils client-side JavaScript
                        library](/stencil-docs/adding-event-hooks-to-your-theme/stencil-utils-api-reference)
                        for managing event hooks.


                        For more information, see the [Event Hook
                        Overview](/stencil-docs/adding-event-hooks-to-your-theme/event-hook-overview-and-examples#event_event-hook).


                        ---


                        ## Store Design


                        [Store
                        Design](https://support.bigcommerce.com/s/article/Store-Design)
                        is a browser-based tool that enables merchants to
                        rapidly customize a theme's look and feel with no
                        coding.


                        Theme developers' can customize the configuration of the
                        Store Design tool. A developer's configuration choices
                        determine the customizable theme aspects and the range
                        of choices that exists for each customizable aspect
                        using the Store Design tool. For example, a developer
                        can grant access to customization to colors, fonts,
                        display of page features, and number of products to
                        display per feature with the Store Design tool.


                        ### Stencil Theme Variations


                        Each Stencil theme can contain one to four variations.
                        You can optimize individual variations for specific
                        markets, audiences and styles – while still managing and
                        distributing all of these variations as one theme.

                        Cornerstone comes with 3 variations: Cornerstone Light,
                        Cornerstone Warm, and Cornerstone Bold.


                        ### Responsive, Mobile-Friendly Themes


                        BigCommerce stores powered by Stencil allow shoppers to
                        have a first class experience _across any device_.
                      header:
                        anchor: about_features-and-stack
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Key Components: Video Demo


                        Watch Stencil senior developer's tour of Stencil's key
                        components:


                        <iframe width="560" height="315"
                        src="https://www.youtube.com/embed/p5SR8N0SeCg"
                        frameborder="0" allowfullscreen></iframe>
                      header:
                        anchor: about_key-components
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Blueprint (Legacy Framework) Documentation


                        If you are looking for information on Blueprint,
                        BigCommerce's legacy theme framework, you can access
                        that [here](/legacy/blueprint-themes).
                      header:
                        anchor: about_blueprint
              - title: Transitioning to Stencil
                route:
                  path: /transitionining-to-stencil
                data:
                  blocks:
                    - type: html
                      data: <h1>Transitioning to Stencil</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#choosing-dev-path\"> Choosing a Development Path</a></li>\n\t\t<li><a href=\"#front-matter-quick-start\">Front-Matter Quick Start</a></li>\n    <li><a href=\"#handlebars-matter-quick-start\">Handlebars Quick Start</a></li>\n\t\t<li><a href=\"#seo-tips\">SEO Tips and Best Practices</a></li>\n\t\t<li><a href=\"#blueprint-to-stencil\">Blueprint to Stencil Features Map</a></li>\n    <li><a href=\"#interacting-with-api\">Interacting with the BigCommerce API</a></li>\n    <li><a href=\"#partnering-with-bc\">Partnering with BigCommerce</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Choosing a Development Path


                        Are you approaching Stencil from a different theming
                        framework, like Blueprint, BigCommerce's legacy
                        framework? Or moving to the Stencil templating
                        environment from a pure HTML and CSS-based design?


                        You have four (non-mutually exclusive) options for
                        developing Stencil themes:


                        * Find an Agency Partner

                        * Light Customization using the Theme Editor

                        * Light Customization using HTML and CSS

                        * Adapting a Stencil Theme or Developing from Scratch


                        ###  Find an Agency Partner


                        If you prefer to have an expert collaborator customize
                        your theme, we recommend working with one of our
                        certified certified BigCommerce Agency Partners.
                        Reference the following resources to do so:


                        * [Partner
                        Directory](https://partners.bigcommerce.com/directory/search?i=75)

                        * [Working with a Design
                        Partner](https://support.bigcommerce.com/articles/Learning/Working-with-a-Design-Partner)
                        (Support Guide)


                        ### Light Customization with Stencil Theme Editor


                        Stencil can be customized without the use of any
                        specialized development tools or techniques by using of
                        the Stencil Theme Editor. The Stencil Theme Editor still
                        enables customization of a theme's colors, typography,
                        banners, headings, carousel, and footer. It also enables
                        customization of broader layout characteristics, such as
                        the number of products displayed in various panels,
                        category pages, and brand pages.


                        For details, see the following support resources:


                        * [Theme
                        Editor](https://support.bigcommerce.com/s/article/Stencil-Themes)

                        * [Personalizing Your
                        Theme](https://support.bigcommerce.com/articles/Learning/Personalizing-your-New-Theme) 


                        ### Light Customization with HTML and CSS


                        If you are most comfortable working in HTML and CSS,
                        Stencil's *Edit Theme Files* feature allows you to
                        directly edit most of your theme's files from the
                        Control Panel. For details, see the following resources:


                        * [Editing Stencil Theme
                        Files](https://support.bigcommerce.com/s/article/Stencil-Themes#edit) 

                        * [Getting Started with the Stencil
                        Framework](https://www.youtube.com/watch?v=waJ1dg_dAh8&index=11&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0)
                        (Video overview of copying and editing a theme's files)


                        ### Adapt a Stencil Theme, or Develop from Scratch


                        For complete control over a theme's appearance and logic
                        – including the ability to edit _all_ theme
                        configuration files – you will want to use the Stencil
                        Command-line interface, also known as the Stencil CLI.


                        To learn Stencil CLI's templating conventions, see
                        Installing Stencil CLI. Also take a look at
                        BigCommerce's [Getting Started with the Stencil
                        Framework](https://www.youtube.com/playlist?list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0)
                        video playlist.
                      header:
                        anchor: choosing-dev-path
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Front-Matter Quick Start


                        Stencil templates start with a section of "front matter"
                        where you can and concisely customize each page's design
                        and layout details. 


                        This front-matter section uses conventions from YAML, a
                        simple, widely used markup language. If you haven't used
                        these conventions before, refer to our [Front-Matter
                        Overview](/stencil-docs/front-matter/front-matter-overview).
                      header:
                        anchor: front-matter-quick-start
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Handlebars Quick Start


                        Stencil uses Handlebars.js to assemble dynamic content
                        into the storefront pages that are displayed to
                        shoppers. The dynamic content can be drawn from a few
                        sources, like the store's catalog.


                        Handlebars' syntax is quite simple, and it allows you to
                        accomplish powerful JavaScript operations with minimal
                        JavaScript code. To learn more about Handlebars.js, see
                        these third-party tutorials: 


                        * [Learn Handlebars in 10 Minutes or
                        Less](http://tutorialzine.com/2015/01/learn-handlebars-in-10-minutes/)

                        * [A Beginner’s Guide to
                        Handlebars](https://www.sitepoint.com/a-beginners-guide-to-handlebars/)

                        * [Getting Started with
                        Handlebars.js](http://blog.teamtreehouse.com/getting-started-with-handlebars-js)

                        * [Handlebars interactive
                        tutorial](http://tryhandlebarsjs.com/)
                      header:
                        anchor: handlebars-quick-start
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## SEO Tips and Best Practices


                        Search-engine optimization (SEO) helps translate an
                        elegant theme into a successful, high-conversion
                        storefront. Because so many shoppers reach online stores
                        through a search engine, a search-optimized site will be
                        more visible – attracting more traffic. 


                        The Stencil framework is [designed for high SEO
                        performance](https://www.bigcommerce.com/improve-organic-traffic/).
                        However, you will want to keep SEO in mind as you build
                        out each theme and storefront. For guidelines, please
                        see these BigCommerce support articles (which are a
                        series of intermediate to advanced chapters in our Guide
                        to SEO):


                        * [SEO Do's and
                        Don'ts](https://support.bigcommerce.com/s/article/What-is-SEO)

                        * [Developing a Keyword
                        Strategy](https://support.bigcommerce.com/articles/Learning/Developing-a-Keyword-Strategy/)

                        * [SEO Success
                        Essentials](https://support.bigcommerce.com/articles/Learning/Bigcommerce-SEO-Success-Essentials/)

                        * [Advanced SEO on
                        BigCommerce](https://support.bigcommerce.com/s/article/Advanced-SEO-on-Bigcommerce)


                        Also checkout our [Guide to Keyword
                        Research](https://support.bigcommerce.com/s/article/Value-of-Keywords).
                      header:
                        anchor: seo-tips
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Blueprint-to-Stencil Features Map 


                        This following support and video resurces are designed
                        to help you identify the Stencil counterparts to
                        familiar Blueprint components.


                        * [What to Consider When Changing Your
                        Theme](https://support.bigcommerce.com/s/article/What-to-Consider-When-Changing-Your-Theme)

                        * [Stencil and the BigCommerce Control
                        Panel](https://www.youtube.com/watch?v=d2F6F8LJXzs&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0&index=2)
                        (Video tour of Blueprint-to-Stencil  changes in the
                        BigCommerce control panel)
                      header:
                        anchor: blueprint-to-stencil
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Interacting with the BigCommerce API


                        Interacting with the BigCommerce API

                        BigCommerce's growing API resources enable application
                        developers to create private scripts or apps that
                        support a single store, or to create public apps offered
                        to multiple stores via BigCommerce's App Marketplace.


                        As a theme developer, you can rely on apps to enhance
                        your themes' capabilities, and to extend or complement
                        the storefront features built into the BigCommerce
                        platform. Popular app areas include inventory
                        management, email marketing, coupons, reviews, shipping,
                        tax accounting, and security. For more information, see
                        BigCommerce's:


                        * [App Marketplace](https://www.bigcommerce.com/apps/)

                        * [API
                        documentation](https://developer.bigcommerce.com/api-docs)
                      header:
                        anchor: interacting-with-api
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Partnering with BigCommerce


                        No formal business relationship is required to develop
                        themes on the BigCommerce platform. However, consider
                        applying to become a become a BigCommerce Agency
                        Partner, in order to accelerate your development of new
                        business and revenue. For details, see our:


                        * [Overview of BigCommerce
                        Partnerships](https://www.bigcommerce.com/partners/)

                        * [Agency
                        Partners](https://www.bigcommerce.com/partners/design-solution/)
                        – basics and application links

                        * [Technology
                        Partners](https://www.bigcommerce.com/partners/developers/)
                        – basics and application links

                        * [Partnership
                        Application](https://partners.bigcommerce.com/English/register_email.aspx)
                      header:
                        anchor: partnering-with-bc
              - title: Installing Stencil
                route:
                  path: /installing-stencil
                data:
                  blocks:
                    - type: html
                      data: <h1>Installing Stencil</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#installing_video-demo\">Video Demo</a></li>\n    <li><a href=\"#installing_prerequisites\">Prerequisites by OS</a></li>\n    <li><a href=\"#installing_installing-the-stencil-cli\">Installing the Stencil Command Line Interface (CLI)</a></li>\n    <li><a href=\"#installing_cloning-cornerstone\">Cloning Cornerstone Using Github</a></li>\n    <li><a href=\"#installing_installing-stencils-js-utilities\">Installing Stencil's Javascript Utilities</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        Below you’ll find instructions on installing the Stencil
                        CLI, cloning the Cornerstone theme, and installing
                        Stencil’s Javascript utilities.

                        Each OS has different prerequisites, so check the
                        Prerequisites by OS section before attempting
                        installation.
                    - type: text
                      data: >-
                        ## Video Demo


                        Watch a brief demonstration of the Stencil installation
                        and launch:


                        <iframe width="560" height="315"
                        src="https://www.youtube.com/embed/iWBrJalyM0A"
                        frameborder="0" allow="autoplay; encrypted-media"
                        allowfullscreen></iframe>
                      header:
                        anchor: installing_video-demo
                    - type: tabs
                      data:
                        children:
                          - title: ' Mac OS Prerequisites'
                            blocks:
                              - type: html
                                data: <h1>Mac OS Prerequisites</h1>
                              - type: html
                                data: "<div class=\"otp\" id=\"no-index\">\n\t<h3>On This Tab</h3>\n\t<ul>\n    <li><a href=\"#mac_xcode\">Installing Xcode</a></li>\n    <li><a href=\"#mac_nodejs\">Installing Node.js</a></li>\n    <li><a href=\"#mac_troubleshooting\">Troubleshooting</a></li>\n\t</ul>\n</div>\n"
                              - type: callout
                                data:
                                  body: >-
                                    These instructions have been tested on Mac
                                    OS X Yosemite. Dependencies for other
                                    platforms will be added upon further
                                    testing.
                                  title: Platform Support
                              - type: text
                                data: >-
                                  ## Installing Xcode 


                                  You must install the [Xcode development
                                  tools](https://developer.apple.com/xcode/)
                                  (latest stable version).
                                header:
                                  anchor: mac_xcode
                              - type: text
                                data: '---'
                              - type: text
                                data: >-
                                  ## Node.js 


                                  Stencil requires the <a
                                  href="https://nodejs.org/">Node.js</a> runtime
                                  environment, version <a
                                  href="https://nodejs.org/en/blog/release/">6.x
                                  or later</a>. We have tested Stencil on
                                  selected Node.js versions, from <a
                                  href="https://nodejs.org/en/blog/release/v6.10.3/">6.10.3</a>
                                  to <a
                                  href="https://nodejs.org/en/blog/release/v7.9.0/">7.9.0</a>. 


                                  We recommend that you install or update
                                  Node.js using <a
                                  href="https://github.com/creationix/nvm#installation">nvm</a>.
                                  First install nvm, version <a
                                  href="https://github.com/creationix/nvm/tree/v0.31.0">0.31.0</a>,
                                  as follows:


                                  ```

                                  curl -o-
                                  https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh
                                  | bash

                                  ```


                                  Next, explicitly install a supported Node.js
                                  version, using this convention:<br>


                                  ```

                                  nvm install 6.4.0

                                  ```
                                header:
                                  anchor: mac_nodejs
                              - type: callout
                                data:
                                  body: >-
                                    You can choose to instead download the
                                    latest x.x version of Node.js from the
                                    Node.js Foundation's archives, using URLs of
                                    the form:
                                    https://nodejs.org/dist/latest-v6.x/,
                                    https://nodejs.org/dist/latest-v7.x/, etc.
                                    We recommend installing only LTS ("Long-Term
                                    Support"/"Mature and Dependable") versions.
                                  title: Notes on Dependencies
                              - type: text
                                data: '---'
                              - type: text
                                data: >
                                  ## Troubleshooting


                                  If you run into any problems with Stencil
                                  installation or launch, first consult
                                  [Troubleshooting Your
                                  Setup](/stencil-docs/getting-started/launching-stencil/troubleshooting-your-setup). 


                                  If that does not resolve your issue, consult
                                  our [Support
                                  resources](https://support.bigcommerce.com/s/),
                                  which include community and peer support via
                                  BigCommerce and Stack Overflow forums.
                                header:
                                  anchor: mac_troubleshooting
                          - title: Linux Prerequisites
                            blocks:
                              - type: html
                                data: <h1>Linux Prerequisites</h1>
                              - type: html
                                data: "<div class=\"otp\" id=\"no-index\">\n\t<h3>On This Tab</h3>\n\t<ul>\n    <li><a href=\"#linux_root\">Root Permissions</a></li>\n     <li><a href=\"#linux_git-client\">Git Client</a></li>\n     <li><a href=\"#linux_nodejs\">Node.js</a></li>\n      <li><a href=\"#linux_troubleshooting\">Troubleshooting</a></li>\n\t</ul>\n</div>"
                              - type: callout
                                data:
                                  body: >-
                                    These instructions have been tested on
                                    Linux/Ubuntu v.14.04.4. 
                                  title: Platform Support
                              - type: text
                                data: >-
                                  ## Root Permissions


                                  You should have administrator/root permissions
                                  on your machine. (If not, you may need to
                                  precede some of the below commands with the
                                  `sudo` prefix.)
                                header:
                                  anchor: linux_root
                              - type: text
                                data: '---'
                              - type: text
                                data: >-
                                  ## Git Client


                                  You must have a [Git
                                  client](https://git-scm.com/downloads)
                                  installed.
                                header:
                                  anchor: linux_git-client
                              - type: text
                                data: '---'
                              - type: text
                                data: >-
                                  ## Node.js


                                  Stencil requires the Node.js runtime
                                  environment, version 6.x or later. We have
                                  tested Stencil on selected Node.js versions,
                                  from 6.10.3 to 7.9.0.


                                  We recommend that you install or update
                                  Node.js using nvm. First install nvm, version
                                  0.31.0, as follows:


                                  `curl -o-
                                  https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh
                                  | bash`


                                  Next, explicitly install a supported Node.js
                                  version, using this convention:


                                  `nvm install 6.4.0`
                                header:
                                  anchor: linux_nodejs
                              - type: text
                                data: '---'
                              - type: text
                                data: >-
                                  ## Troubleshooting


                                  If you run into any problems with Stencil
                                  installation or launch, please first see our
                                  Troubleshooting Your Setup page. Next, please
                                  consult our Support resources, which include
                                  community/peer support via BigCommerce and
                                  Stack Overflow forums.
                                header:
                                  anchor: linux_troubleshooting
                          - title: Windows Prerequisites
                            blocks:
                              - type: html
                                data: <h1>Windows Prerequisites</h1>
                              - type: html
                                data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Tab </h3>\n\t<ul>\n     <li><a href=\"#windows_root-permissions\">Root Permissions</a></li>\n     <li><a href=\"#windows_git-client\">Git Client and Git BASH</a></li>\n     <li><a href=\"#windows_python-installation\">Python Installation</a></li>\n     <li><a href=\"#windows_python-node-config\">Python/Node Configuration</a></li>\n     <li><a href=\"#windows_node-installation\">Node.js Installation</a></li>\n     <li><a href=\"#windows_compiler-options\">C++ Compiler Options</a></li>\n    <li><a href=\"#windows_troubleshooting\">Troubleshooting</a></li>\n\t</ul>\n</div>"
                              - type: callout
                                data:
                                  body: >-
                                    The following instructions have been tested
                                    on Windows 10. Dependencies for other
                                    platforms will be added upon further
                                    testing.
                                  title: Platform Support
                              - type: text
                                data: >-
                                  ## Root Permissions


                                  You must have authorization to run Powershell
                                  "as administrator" on your machine.
                                header:
                                  anchor: windows_root-permissions
                              - type: text
                                data: '---'
                              - type: text
                                data: >-
                                  ## Git Client and Git BASH


                                  You must have a Git client installed. The Git
                                  for Windows distribution includes a Git
                                  client, and also provides the Git BASH
                                  emulator for command-line access. All commands
                                  should be run in Git Bash from here.
                                header:
                                  anchor: windows_git-client
                              - type: text
                                data: '---'
                              - type: text
                                data: >-
                                  ## Python Installation


                                  Install [Python 2.7.x for
                                  Windows](https://www.python.org/downloads/windows/).
                                  This is required for Visual Studio's Windows
                                  Build Tools, installed below. **Python 3.x is
                                  not supported.**


                                  In the installer dialog shown below, change
                                  the bottom default, so as to enable the `Add
                                  python.exe to Path` option. This provides
                                  global command-line access to Python.
                                header:
                                  anchor: windows_python-installation
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6116/1539115629012
                              - type: text
                                data: '---'
                              - type: text
                                data: >-
                                  ## Node.js Installation


                                  Stencil requires the
                                  [Node.js](https://nodejs.org/en/) runtime
                                  environment, version 6.x or later.


                                  On Windows, we have tested Stencil CLI on
                                  selected Node.js version
                                  [7.10.0](https://nodejs.org/en/blog/release/v7.10.0/7.10.0).
                                  We recommend that you install only an LTS
                                  ("Long-Term Support"/"Mature and Dependable")
                                  version, and that you download that version's
                                  `.msi` installer (not its `.exe` binary).


                                  **Note:** _You can choose to instead download
                                  the latest x.x version of Node.js from the
                                  Node.js Foundation's archives, using URLs of
                                  the form:
                                  [https://nodejs.org/dist/latest-v8.x/](https://nodejs.org/dist/latest-v8.x/),
                                  [https://nodejs.org/dist/latest-v8.x/](https://nodejs.org/dist/latest-v8.x/),
                                  etc. In all cases, we recommend installing
                                  only LTS ("Long-Term Support"/"Mature and
                                  Dependable") versions, and that you download
                                  the .msi installer, not the .exe binary.

                                  However, please see the restriction on
                                  technical assistance in the Notes on
                                  Dependencies below._


                                  To verify your Node.js installation or
                                  reinstallation, this [blog
                                  post](http://blog.teamtreehouse.com/install-node-js-npm-windows)
                                  provides Windows-specific tips and tests.
                                header:
                                  anchor: windows_node-installation
                              - type: callout
                                data:
                                  body: >-
                                    You will need to restart your computer to
                                    complete Node.js installation.
                                  type: warning
                                  title: Restart Required
                              - type: text
                                data: >-
                                  ## Python/Node Configuration


                                  After installing both Python and Node.js,
                                  configure Python within the Node.js runtime
                                  environment by running this npm command:


                                  `npm config set python python2.7`
                                header:
                                  anchor: windows_python-node-config
                              - type: callout
                                data:
                                  body: >-
                                    The [node package
                                    manager](https://www.npmjs.com/) was
                                    installed as part of Node.js. As you proceed
                                    through Stencil CLI setup (and later
                                    refreshes), you will use this command-line
                                    utility to install packages/modules, and to
                                    configure and manage dependencies and their
                                    versions.
                                  title: About Node Package Manager (npm)
                              - type: text
                                data: >
                                  ## C++ Compiler Options


                                  Choose to either install Turbo C++ or Visual
                                  Studio for your C++ Compiler.


                                  ### Turbo C++


                                  You can install Turbo C++ as a lighter version
                                  instead of Visual Studio. The installation
                                  takes about 5 minutes. After installation, a
                                  box opens that highlights the features of
                                  Turbo C++. This box can be closed since it is
                                  not needed to complete installation. If you
                                  prefer using Visual Studio then use the steps
                                  below.


                                  ### Visual Studio Installation

                                  Install MicroSoft Visual Studio. Stencil
                                  requires a 2013 or later release, Community
                                  Edition (free) or higher.


                                  Be sure to install Visual Studio's "Common
                                  Tools" component. You can also add this
                                  component later in the window shown below.


                                  ### Visual Studio Version/Node Configuration

                                  Finally, configure Visual Studio within the
                                  Node.js runtime environment by running the
                                  following npm command.

                                  (Replace the 2015 parameter with 2013 or 2017,
                                  as needed, to match the Visual Studio release
                                  you have installed:)


                                  `npm config set msvs_version 2015`
                                header:
                                  anchor: windows_compiler-options
                              - type: callout
                                data:
                                  title: Notes on Dependencies
                                  body: >-
                                    While alternate versions might also support
                                    Stencil, BigCommerce does not offer
                                    technical assistance on substitutions for,
                                    or customized versions of, the tested
                                    dependencies listed here.


                                    Once Stencil is fully installed, you can
                                    check dependencies' installed versions by
                                    examining your
                                    `<theme-name>/package.jsonfile`.
                              - type: text
                                data: >-
                                  ## Troubleshooting


                                  If you run into any problems with Stencil
                                  installation or launch, please first see our
                                  [Troubleshooting Your
                                  Setup](/stencil-docs/getting-started/launching-stencil/troubleshooting-your-setup)
                                  article. If that doesn't solve the issue, try
                                  consulting our [Support
                                  resources](https://forum.bigcommerce.com/s/group/0F913000000HLjECAW/bigcommerce-developers).
                                header:
                                  anchor: windows_troubleshooting
                      header:
                        title: Stencil Prerequisites by OS
                        anchor: installing_prerequisites
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Installing the Stencil Command Line Interface


                        The first step toward developing on Stencil is to
                        install the Stencil CLI. 


                        You can do this via the following command (_If you are
                        using Windows, you will need to run this command in git
                        bash._):


                        `npm install -g @bigcommerce/stencil-cli`


                        ### Items to Note


                        * The command above requires <a
                        href="https://www.npmjs.com/">npm</a> to be installed in
                        your local development environment.


                        * In Windows, this `npm` command's execution might at
                        times appear to freeze. However, the installer is
                        running. 

                        Give it several minutes to complete installation.


                        * On Mac OS machines with installed xcode, version 5.x,
                        this `npm` command has generated errors of the form: 

                        `npm ERR! invalid: string_decoder`. The workaround is to
                        upgrade xcode to the latest stable xcode version 

                        (7.3.1 as of this page's last revision). 


                        * If you receive a file-permissions error, and you did
                        not install Node.js via <a
                        href="https://github.com/creationix/nvm#installation">nvm</a>
                        (Node Version Manager), 

                        then either install nvm now, or follow one of the
                        workarounds on [this external
                        page](https://docs.npmjs.com/getting-started/fixing-npm-permissions).
                      header:
                        anchor: installing_installing-the-stencil-cli
                    - type: callout
                      data:
                        body: >-
                          To ensure the Stencil CLI is compatible with all the
                          changes introduced in Cornerstone 2.0.0, you must
                          upgrade to the latest version of Stencil CLI (1.15.1)
                          if using Cornerstone 2.x.x.


                          Occasionally, you will receive a command line prompt
                          to run the installation command when you restart your
                          Stencil server. This occurs when BigCommerce publishes
                          a critical fix in Stencil CLI, to resolve an issue
                          like a newly discovered security exploit.
                        title: CLI Force Upgrade and Cornerstone 2.0.0
                        type: warning
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Cloning Cornerstone using Github


                        _Windows users need to run this in git bash._


                        Navigate to a directory where you would like to install
                        a subdirectory for your theme. You must have appropriate
                        write permissions in this directory. 


                        Execute the following command to clone Stencil's base
                        theme, Cornerstone, into a new subdirectory named
                        `/cornerstone/`


                        `git clone
                        https://github.com/bigcommerce/cornerstone.git`
                          
                        If the above command fails, and you are accessing GitHub
                        anonymously, give the URL this alternate prefix:


                        `git clone git://github.com/bigcommerce/cornerstone.git`


                        In the next step, you will install Stencil's [JavaScript
                        utilities](/stencil-docs/getting-started/installing-stencil#installing_installing-stencils-js-utilities)
                        to enable API access via Ajax.
                      header:
                        anchor: installing_cloning-cornerstone
                    - type: callout
                      data:
                        body: >-
                          If you are reinstalling over a base theme on which you
                          have already begun development, first back up your
                          theme's `.stencil` file. This contains your store URL,
                          BigCommerce username and access tokens, and other
                          basic settings. Preserving those settings will speed
                          up initializing and launching the new version. If you
                          would like to allow for complete rollback, back up
                          your entire theme's directory.
                        type: error
                        title: Back Up before Reinstalling
                    - type: text
                      data: '---'
                    - type: text
                      data: "## Installing Stencil's Javascript Dependencies\n\n_Windows users need to run this in git bash._\n\nComplete the following steps:\n\nNavigate to your Stencil theme directory. This example assumes that this target directory has the default name `cornerstone`.\n\n`cd cornerstone`\n\nNext, execute the following command inside of that directory:\n\t\n`npm install`\n\nThis will install the required npm modules to properly leverage the Stencil event framework.\n\nNow that your installation is complete, you can move on to [preparing your store/tokens](/stencil-docs/getting-started/authentication-and-tokens)"
                      header:
                        anchor: installing_installing-stencils-js-utilities
              - title: Authentication & Tokens
                route:
                  path: /authentication-and-tokens
                data:
                  blocks:
                    - type: html
                      data: <h1>Creating an API Account to Obtain OAuth Tokens</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#authentication_creating-an-api-account\">Creating an API Account</a></li>\n    <li><a href=\"#authentication_issuing-additional\">Issuing Additional Tokens</a></li>\n    <li><a href=\"#authentication_revoking-tokens\">Revoking Tokens</a></li>\n    <li><a href=\"#authentication_copying-oauth-tokens\">Copying OAuth Tokens</a></li>\n\t</ul>\n</div>"
                    - type: callout
                      data:
                        type: error
                        body: >-
                          If you've successfully installed Stencil you're ready
                          to create a BigCommerce API Account. 

                          _If you have not yet installed Stencil, see
                          [Installing
                          Stencil](/stencil-docs/getting-started/installing-stencil)._
                        title: Status Check
                    - type: text
                      data: >-
                        ## Creating an API Account 


                        Follow the steps below to create an API Account and
                        obtain your OAuth Tokens.


                        1. Using the store owner's credentials, log into the
                        control panel of the store for which you are
                        developing. 


                        2. From the left nav, select `Advanced Settings` > `API
                        Accounts`.


                        3. From the resulting Store API Accounts page, select
                        the `Create API Account` button.


                        4. Give your account a name that reflects its purpose.


                        _The BigCommerce platform does not validate this name,
                        however, we recommend naming accounts by purpose to help
                        you keep track of which accounts you need to keep
                        active. You should assign a name that will make the
                        account's purpose clear to you and other store
                        administrators._


                        5. Under OAuth Scopes, set the Themes selector to either
                        `modify` or `read-only`.


                        _The read-only scope is sufficient to
                        authorize/initialize a Stencil theme. However, the
                        modify scope will achieve the same goal, while also
                        authorizing this account to upload themes to the store
                        from the command line._


                        6. Click `Save`. 


                        _Doing so will display a modal, from which you can copy
                        your `Client ID` and `Access Token` values. The modal
                        will also prompt your browser to download a .txt file
                        that contains your credentials. You will need these
                        values to authorize and initialize your Stencil theme.
                        If you're ready to do so now, move ahead to [Authorizing
                        and Initializing
                        Stencil](/stencil-docs/getting-started/launching-stencil/authorizing-and-initializing)._
                      header:
                        anchor: authentication_creating-an-api-account
                    - type: callout
                      data:
                        type: warning
                        title: Reserved Role
                        body: >-
                          Currently, only the store owner can create an OAuth
                          API account according to the instructions below. Also,
                          note that each store is limited to 50 accounts at a
                          time.
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Issuing Additional Tokens


                        To issue store tokens for additional themes or
                        developers, repeat the process outlined in Creating an
                        API Account.


                        (Even if you originally initialized your theme using a
                        legacy API [Basic-Auth] token, you will need to generate
                        any new tokens using the new OAuth flow.)


                        You can create up to 50 API accounts/tokens per store.
                        If you hit this limit and still need to create new
                        tokens, you will need to delete existing accounts.
                        Deleting an account will invalidate the corresponding
                        token, which will affect any developer using that token.
                      header:
                        anchor: authentication_issuing-additional
                    - type: text
                      data: >-
                        ## Revoking OAuth Tokens


                        **Note**: After completing the below process, there is
                        no undo. The following process completely deletes the
                        selected account(s), revoking the corresponding
                        token(s).


                        If you are completely sure you would like to revoke an
                        existing OAuth store token, delete the corresponding
                        Store API account with the following steps:


                        1. Navigate to the Control Panel's `API Accounts` page.


                        2. Select the trash-can button to the right of the
                        account that you want to delete.


                        _*You can also use the check boxes at left to select
                        multiple accounts to delete them all at once._
                      header:
                        anchor: authentication_revoking-tokens
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1537421464104
                    - type: text
                      data: >-
                        ## Copying OAuth Tokens 


                        To access an existing OAuth token to authorize your
                        theme:


                        1. Open the `.txt` file that the BigCommerce control
                        panel generated when you created the API account.


                        _If you did not retain this file, you will need to
                        generate a new token by repeating the Creating an API
                        Account procedure._


                        2. Note the Client ID and Access Token hashes in the
                        file (or in the control-panel modal for your newly
                        created token).


                        3. If you are a merchant granting an outside theme
                        developer access to your store, provide the Client ID
                        and Access Token values to the developer. The developer
                        will need these when [Authorizing and Initializing
                        Stencil](/stencil-docs/getting-started/launching-stencil/authorizing-and-initializing).
                        If you are a merchant developing a theme against your
                        own store, you will use the same two values in the same
                        [Authorizing and Initializing
                        Stencil](/stencil-docs/getting-started/launching-stencil/authorizing-and-initializing)
                        step.
                      header:
                        anchor: 'authentication_copying-oauth-tokens '
              - title: Running Stencil Locally
                route:
                  path: /running-stencil-locally
                data:
                  children:
                    - title: Authorizing and Initializing Stencil
                      route:
                        path: /authorizing-and-initializing
                      data:
                        blocks:
                          - type: html
                            data: <h1>Authorizing and Initializing Stencil</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#authorizing_prerequisites\">Prerequisites</a></li>\n    <li><a href=\"#authorizing_authorizing-oauth\">Authorizing with OAuth Tokens</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Prerequisites


                              The following are required from performing
                              previous steps prior to authorizing and
                              Initializing your Stencil theme:


                              * An [API
                              account](/stencil-docs/getting-started/authentication-and-tokens)
                              with the Themes scope set to `read-only` or
                              `modify`

                              * a `Client ID` and `Access Token`, which are both
                              generated when an API account is created


                              **Note:** _`modify` access is required to run the
                              `stencil push` command, which uploads and applies
                              a theme to your store._
                            header:
                              anchor: authorizing_prerequisites
                          - type: callout
                            data:
                              body: >-
                                If you are sharing a theme across storefronts,
                                we strongly recommend that you clone a separate
                                subdirectory (each containing its own `.stencil`
                                file) for each store. This helps isolate and
                                secure each merchant's data.


                                You can clone your `/cornerstone/` subdirectory
                                now to create your first isolated copy, and then
                                switch to the resulting new subdirectory to
                                continue. (Prior to March 2017, Stencil's
                                default subdirectory name was `/stencil/`.)
                              title: ' Best Practice: Isolate Stores by Subdirectory'
                          - type: text
                            data: >-
                              ## Authorizing with OAuth Tokens


                              Use these steps to authorize and initialize
                              Stencil.


                              Use the following steps to authorize your theme
                              using an OAuth API account:


                              1. Have your store API account's `Client ID` and
                              `Access Token` hashes ready. 

                              (Refer back to [Authentication &
                              Tokens](/stencil-docs/getting-started/authentication-and-tokens))


                              2. Starting from the subdirectory for the
                              appropriate theme (and store), initialize Stencil
                              CLI by running the following command (_Windows
                              users need to run this in git bash_):


                              `stencil init`


                              3. You will be prompted to provide the homepage
                              URL of the production store against which you want
                              to develop. This can be your own store, or a
                              client store that you are customizing.


                              4. Next, you will be prompted to enter the port
                              where you would like to run your store on your
                              local machine. This can be any port you like, but
                              we recommend using port 3000.


                              5. Next, you will be prompted: `What is your
                              Stencil OAuth Client ID?` Enter your store API
                              account's Client ID.


                              (If you used this Client ID when you last ran
                              `stencil init`, you'll see it hinted on the
                              command line, and can just confirm it.)


                              6. Finally, you will be prompted: `What is your
                              Stencil OAuth Access Token?` If you entered these
                              credentials when you last ran stencil init, you'll
                              see the token hinted in cleartext. If not, paste
                              your `Access Token` hash onto the command line.
                              Then press Enter.


                              Your terminal window should now confirm that you
                              have successfully initialized Stencil CLI on your
                              local machine. With Stencil CLI initialized, you
                              are ready to start Stencil and begin development.
                            header:
                              anchor: authorizing_authorizing-oauth
                    - title: Troubleshooting Your Setup
                      route:
                        path: /troubleshooting-your-setup
                      data:
                        blocks:
                          - type: html
                            data: <h1>Troubleshooting Your Setup</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#troubleshooting_unsupported\">Unsupported Node Version</a></li>\n    <li><a href=\"#troubleshooting_npm-install\"><code>npm install</code> errors</a></li>\n    <li><a href=\"#troubleshooting_npm-install-stencil-init\">npm install and stencil init Errors</a></li>\n    <li><a href=\"#troubleshooting_stencil-init\">\"stencil init/stencil start errors</a></li>\n    <li><a href=\"#troubleshooting_stencil-start-missing-module\"><code>stencil start</code>/missing module Errors</a></li>\n    <li><a href=\"#troubleshooting_uncaught\">\"Uncaught TypeError: Illegal invocation\" error</a></li>\n    <li><a href=\"#troubleshooting_mac-os\">Mac OS: \"Xcode/iOS license...\" Errors upon Stencil Commands</a></li>\n    <li><a href=\"#troubleshooting_etimeout\">ETIMEOUT Errors on Node >4.4.0</a></li>\n    <li><a href=\"#troubleshooting_stencil-command-not-found\"><code>stencil</code> command not found</a></li>\n    <li><a href=\"#troubleshooting_500-errors\">500 Errors</a></li>\n    <li><a href=\"#troubleshooting_lint-errors\">Lint Errors upon Bundling</a></li>\n    <li><a href=\"#troubleshooting_module-not-found\">\"Module Not Found\" Errors upon Bundling</a></li>\n    <li><a href=\"#troubleshooting_short\">Short or Undescriptive JavaScript Diagnostics</a></li>\n    <li><a href=\"#troubleshooting_tr-300\">TR-300 Error upon Theme Upload</a></li>\n    <li><a href=\"#troubleshooting_uninstalling\">Uninstalling and Reinstalling Stencil CLI</a></li>\n\t</ul>\n</div>"
                          - type: callout
                            data:
                              title: First Check the Terminal Window
                              body: >-
                                For any unexpected behavior that you encounter
                                while developing your Stencil theme, first check
                                your terminal window where you started Stencil
                                CLI. 


                                In some cases, the terminal will provide a
                                verbose error message specifying where to look
                                for problems. In any case, it has the potential
                                to provide further insight on the issue.
                                Diagnostic suggestions are listed on this page
                                for error messages that may not be helpful in
                                revealing the issue you're experiencing.
                          - type: text
                            data: >-
                              ## Unsupported Node Version


                              If you receive the following error message, please
                              reinstall Node.js to a supported "LTS" ("Long-Term
                              Support") version:


                              ```

                              Debug: internal, implementation, error
                                      TypeError: Uncaught error: Object #<Object> has no method 'parse'
                                      at internals.implementation 
                                      (/usr/local/lib/node_modules/stencil-cli/server/plugins/CssCompiler/index.js:32:26)
                              ```


                              On Mac OS, we have tested Stencil CLI most
                              robustly on Node.js version 4.4.0. On Linux, we
                              have tested most robustly on version 4.1.2. On
                              Windows, we have tested most robustly on version
                              4.6.1. You’ll find detailed steps (for each
                              operating system) in these instructions'
                              Installing Stencil Prerequisites by OS section.
                            header:
                              anchor: troubleshooting_unsupported
                          - type: text
                            data: >-
                              ## `npm install` Errors


                              The following headings represent errors that may
                              occur when running the `npm install` command. The
                              content under each heading issues a fix for the
                              issue.


                              ### "Unmet Peer Dependency"


                              If you get any `Unmet Peer Dependency` errors when
                              issuing the `npm install` command – or at other
                              times – make sure you are running the `npm
                              install` command **inside** your theme directory.


                              If running the `npm install ` command inside your
                              theme directory does not resolve the error, try
                              one of the following:


                              * Try removing your theme directory's
                              `/node_modules/` subdirectory, by running `rm -rf
                              node_modules`


                              * Run the `npm cache clean` command


                              * Re-run `npm install`



                              ### Permissions (EPERM or EACCES) Error


                              If you get a file-permissions error such as
                              `EPERM` or `EACCES` when issuing the `npm install`
                              command, try one of the workarounds listed on this
                              [external](https://docs.npmjs.com/getting-started/fixing-npm-permissions)
                              page. 


                              ### "js/bundle" Errors


                              If you get errors of the following type upon
                              executing the `stencil init` command:


                              ```

                              Potentially unhandled rejection [6] TypeError:
                              Error loading "js/bundle" 

                              at
                              file:/Users/<username>/Desktop/Fortune-1.4.6/assets/js/bundle.js


                              Error evaluating
                              file:/Users/<username>/Desktop/Fortune-1.4.6/assets/js/bundle.js


                              Cannot read property 'createElement' of
                              undefined...

                              ```


                              try the following workaround:


                              1. Download and unzip a fresh copy of the theme.


                              3. Refresh theme dependencies by running `npm
                              install && jspm install`


                              3. Run `stencil init`.


                              *You will see the same error message as before,
                              but proceed.*


                              4. Delete the `<theme-name>/assets/js/bundle.js`
                              file.


                              5. Run `stencil init` again.

                              This should now execute properly.

                              6. Run `stencil start`


                              8. Verify your theme's launch at:
                              http://localhost:3000.
                            header:
                              anchor: troubleshooting_npm-install
                          - type: text
                            data: >-
                              ## `npm install` and `stencil init` Errors


                              If you get unexpected error messages when issuing
                              the `npm install` or `stencil init` commands,
                              check your Node.js version and ensure it aligns
                              with a version that is compatible for the Stencil
                              framework.
                            header:
                              anchor: troubleshooting_npm-install-stencil-init
                          - type: text
                            data: >-
                              ## `stencil init`/`stencil start` Errors


                              If you get unexpected error messages or unexpected
                              results upon executing the `stencil init`,
                              `stencil start`, or other Stencil CLI commands,
                              make sure you are working in the subdirectory for
                              the specific theme you intend to launch. 


                              One way of checking what directory you are working
                              in is by running the `pwd` command in your
                              terminal.
                            header:
                              anchor: troubleshooting_stencil-init
                          - type: text
                            data: >-
                              ## `stencil start`/missing module Errors


                              If executing `stencil start` provokes errors like
                              the following


                              ```

                              module.js:327

                              throw err;

                              ^


                              Error: Cannot find module 'webpack'

                              at Function.Module._resolveFilename
                              (module.js:325:15)

                              at Function.Module._load (module.js:276:25)

                              at Module.require (module.js:353:17)

                              at require (internal/module.js:12:17)

                              at Object.
                              (/Users/jane.doe/themes/cornerstone/stencil.conf.js:2:15)

                              at Module._compile (module.js:409:26)

                              at Object.Module._extensions..js
                              (module.js:416:10)

                              at Module.load (module.js:343:32)

                              at Function.Module._load (module.js:300:12)

                              at Module.require (module.js:353:17)

                              ```


                              switch to your theme directory and run `npm
                              install`. Running this command will add the
                              missing JavaScript library dependencies.


                              If you receive the same error again after running
                              `npm install`, you should completely uninstall and
                              reinstall both the Stencil framework and Node.js.
                            header:
                              anchor: troubleshooting_stencil-start-missing-module
                          - type: text
                            data: >-
                              ## "Uncaught TypeError: Illegal invocation" error


                              If you receive an `Uncaught TypeError: Illegal
                              invocation` console error, and previously
                              installed Stencil using the original jspm-based
                              installation flow and later switched to our
                              current webpack installation flow, please remove
                              your theme's `/node_modules/` subdirectory, then
                              re-run `npm install` inside your theme's
                              directory.
                            header:
                              anchor: troubleshooting_uncaught
                          - type: text
                            data: >
                              ## Mac OS: "Xcode/iOS license..." Errors upon
                              Stencil Commands


                              On Mac OS, if you have recently installed a new
                              version of Xcode, the command line will display
                              the following error when you next try to use or
                              reinstall Stencil: 


                              `error: Agreeing to the Xcode/iOS license requires
                              admin privileges, please re-run as root via sudo.`


                              To resolve this error, do the following:

                              * Launch Xcode.

                              * Accept its user agreement.

                              * Quit Xcode.

                              * Re-execute your Stencil command.
                            header:
                              anchor: troubleshooting_mac-os
                          - type: text
                            data: >-
                              ## ETIMEOUT Errors on Node >4.4.0


                              If you are running a version of Node.js higher
                              than 4.4.0, and you receive an `ETIMEOUT` error
                              when running Stencil CLI, re-install the latest
                              version of Stencil CLI to resolve this error by
                              following the workflow in Installing Stencil
                              CLI/Framework.
                            header:
                              anchor: troubleshooting_etimeout
                          - type: text
                            data: >
                              ## `stencil` command not found


                              ### Reinstall Stencil CLI


                              If you receive the error message -bash: `stencil:
                              command not found`, ensure that you have followed
                              the steps on Installing Stencil CLI/Framework or
                              attempt to reinstall the Stencil CLI. 


                              ### Redirect Bash shell


                              If you receive the error message -bash: stencil:
                              command not found, enter echo $NVM_DIR. If this
                              command returns nothing, then run source
                              ~/.bash_profile and try running running stencil
                              commands again.


                              ### Check/Specify `nvm` Version


                              If you receive a `stencil: command not found`
                              error message upon executing stencil start from
                              inside your theme subdirectory: Check whether nvm
                              has installed multiple versions of Node.js, by
                              entering the following command:


                              `ls ~/.nvm/versions/node`


                              If this reports more than one version, specify
                              your platform's supported Node.js
                              `<version_number>` by entering: 


                              `nvm use <version_number>`


                              To prevent this error from recurring, add the same
                              `nvm use <version_number>` command to your
                              ~/.bash_profile file.
                            header:
                              anchor: troubleshooting_stencil-command-not-found
                          - type: text
                            data: >-
                              ## `stencil start` errors


                              ### "Unauthorized...username/token" Error


                              If executing the `stencil start` command generates
                              an `Unauthorized, please use a valid
                              username/token` error: Please make sure that the
                              `.stencil` file contains the correct store URL.
                              Also, verify that you have copied the correct
                              username and token. If you continue to get the
                              same error, please reissue tokens.


                              ### "Unable to load registry %bitbucket%"


                              If you have downloaded and installed a Marketplace
                              theme (other than Cornerstone), and after running
                              stencil start, received the error `Unable to load
                              registry %bitbucket%`: Try this workaround.


                              1. Back up your current theme
                              directory/directories. 

                              (In a default installation, the theme directory is
                              named `.../cornerstone/`. Prior to March 2017,
                              this directory's name defaulted to `.../stencil/`.
                              Use the same substitutions for other code examples
                              on this page.)


                              2. To ensure that you install refreshed
                              dependencies, delete your
                              `<theme-name>/node_modules/` and
                              `<theme-name>/assets/jspm_packages/`
                              subdirectories. (You can check installed versions
                              of dependencies by examining your
                              `<theme-name>/package.json` file.)


                              3. Starting inside your theme directory, enter
                              this alternate sequence of commands:


                              ```

                              npm install -g jspm-git

                              npm install

                              jspm config registries.bitbucket.baseurl
                              git+ssh://git@bitbucket.org/

                              jspm config registries.bitbucket.handler jspm-git

                              jspm install

                              ```


                              4. Re-launch your theme.
                          - type: text
                            data: >-
                              ## 500 Errors


                              If you see errors like or _similar_ to below:


                              `{"statusCode":500,"error":"Internal Server
                              Error","message":"An internal server error
                              occurred"}`


                              they often indicate a template syntax error, such
                              as unmatched or missing punctuation. Check your
                              terminal window for more details.
                            header:
                              anchor: troubleshooting_500-errors
                          - type: text
                            data: >
                              ## Lint Errors upon Bundling


                              If bundling your theme triggers multiple lint
                              errors related to the `bundle.js` file, your theme
                              is missing the `.eslintignore` file. Please
                              retrieve this file from the [Cornerstone
                              repo](https://github.com/bigcommerce/cornerstone),
                              then re-run `stencil bundle`.
                            header:
                              anchor: troubleshooting_lint-errors
                          - type: text
                            data: >-
                              ## "Module Not Found" Errors upon Bundling


                              If you see the following error when running
                              stencil bundle, this is a past bug that has since
                              been corrected.


                              `[ModuleNotFoundError: Module not found: Error:
                              Cannot resolve module 'pace' in...]`


                              To remove the error, please update your
                              Cornerstone version. 
                            header:
                              anchor: troubleshooting_module-not-found
                          - type: text
                            data: >-
                              ## Short or Undescriptive JavaScript Diagnostics


                              If JavaScript errors in your browser's developer
                              tools are not reporting filenames and line
                              numbers, try changing your `webpack.conf.js`
                              file's sourcemap entry from:


                              `devtool: 'eval-cheap-module-source-map'`


                              to:


                              `devtool: 'eval-source-map'`


                              The `eval-cheap-module-source-map` option performs
                              faster rebuilds, but omits line numbers. The
                              `eval-source-map` option is slower, but more
                              verbose. 
                            header:
                              anchor: troubleshooting_short
                          - type: text
                            data: >-
                              ## TR-300 Error upon Theme Upload


                              If uploading your theme triggers a TR-300 error,
                              this can indicate an included source-map file
                              (`bundle.js.map`) that exceeds its size limit of 5
                              MB. If your `bundle.js.map` exceeds that limit,
                              the workaround is to move this file outside your
                              theme directory before re-running `stencil
                              bundle`. 
                            header:
                              anchor: troubleshooting_tr-300
                          - type: text
                            data: >-
                              ## Uninstalling and Reinstalling Stencil CLI


                              If you encounter persistent problems in
                              initializing or starting Stencil, you have the
                              option of completely removing Stencil CLI and
                              doing a fresh reinstall. You would do so as
                              follows:


                              1. From your command line, issue the command:

                              `npm uninstall -g @bigcommerce/stencil-cli`


                              2. Navigate back to the Installing and Launching
                              Stencil section and repeat all installation steps
                              to reinstall dependencies and restore your theme,
                              according to your development scenario.


                              A more-drastic measure is to **also** uninstall
                              and reinstall Stencil CLI's Node.js prerequisites
                              (along with uninstalling Stencil CLI). We do not
                              recommend this, as it might disable other Node.js
                              applications on your local machine.
                            header:
                              anchor: troubleshooting_uninstalling
                    - title: CLI Options and Commands
                      route:
                        path: /stencil-cli-options-and-commands
                      data:
                        blocks:
                          - type: html
                            data: <h1>Stencil CLI Options and Commands</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#stencil_basic-cli\">Basic CLI Options and Commands</a></li>\n    <li><a href=\"#stencil_stencil-start\">Stencil Start Options</a></li>\n    <li><a href=\"#stencil_stencil-push\">Stencil Push Options</a></li>\n    <li><a href=\"#stencil_quick\">Quick Reference</a></li>\n    <li><a href=\"#stencil_local-launch-theme\">Local Launch: Theme Only</a></li>\n    <li><a href=\"#stencil_local-launch-theme-and-editor\">Local Launch: Theme and Theme Editor</a>\n    <li><a href=\"#stencil_local-launch-theme-and-editor\">Local Launch: Disabling Caching</a>\n\t</ul>\n</div>"
                          - type: text
                            data: "## Basic CLI Options and Commands\n\nThe syntax to run a basic Stencil CLI command is: `stencil <commands> [options] <parameter>`.\n\nTo see the basic options and commands that the Stencil CLI package supports, enter any of the following forms of the help option on your command line:\n\n```\nstencil\nstencil help\nstencil --help\nstencil -h\n```\n\nYour terminal window will display options and commands listed in the tables below. \n\t\n<table>\n  <tr>\n    <th>Option</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>-h, --help</td>\n    <td>Outputs usage information.</td>\n  </tr>\n  <tr>\n    <td>-V, --version</td>\n    <td>Outputs the version number (which is read from package.json file</span>).</td>\n  </tr>\n</table>\n\n<p></p>\n<table>\n\t\n  <tr>\n    <th>Command</th>\n    <th>Description</th>\n  </tr>\n\t\n  <tr>\n    <td>init</td>\n    <td >Interactively creates a .stencil file, which configures how to run a BigCommerce store locally.</td>\n  </tr>\n\t\n  <tr>\n    <td>start</td>\n    <td>Starts up the BigCommerce store, using theme files in the current directory. \n    </td>\n  </tr>\n\t\n  <tr>\n    <td>bundle</td>\n    <td>Bundles up the theme into a structured .zip file, which can be uploaded to BigCommerce. (Please see restrictions here).</td>\n  </tr>\n  \n  <tr>\n    <td>push</td>\n    <td>Bundles up the theme into a structured .zip file; then directly uploads (pushes) the .zip to BigCommerce.</td>\n  </tr>\n  \n  <tr>\n    <td>release</td>\n    <td>Creates a new release in a theme's GitHub repository. Developers outside BigCommerce can use this for forks (not master) of Stencil's Cornerstone base theme, or for their own parallel themes independent of Cornerstone.</td>\n  </tr>\n  \n  <tr>\n    <td>help &lt;command&gt;</td>\n    <td>display help and return all the options available to use for the specified command. For example, <code>stencil help bundle</code> will return the options that are available to use specifically with the <code>stencil bundle</code> command.\n    </td>\n  </tr> \n\t\n</table>\n"
                            header:
                              anchor: '#stencil_basic-cli'
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1538055264839
                            header:
                              title: Basic Stencil CLI Options and Commands
                          - type: callout
                            data:
                              title: '''stencil start'' and ''stencil push'' Options'
                              body: >-
                                The `stencil start` and `stencil push` CLI
                                Commands have additional custom options that can
                                be used with the command, which are detailed
                                below.
                          - type: text
                            data: "## Stencil Start Options\n\nTo see Stencil CLI's additional options for the `stencil start` command (described above), enter the following on your command line:\n\n`stencil help start` \n\nYour terminal screen should read similar to the table below.\n\n<table>\n\t<tr>\n    <th>Option</th>\n    <th>Definition</th> \n\t</tr>\n  <tr>\n    <td>-V, --version</td>\n    <td>Outputs the version number</td> \n  </tr>\n  <tr>\n    <td>-o, --open</td>\n    <td>Automatically open default browser</td> \n  </tr>\n\t  <tr>\n\t\t\t<td>-v, --variation [name]</td>\n\t\t\t<td>Set which theme variation to use while developing</td> \n  </tr>\n\t  <tr>\n\t\t\t<td>-t, --test</td>\n\t\t\t<td>Enable QA mode which will bundle all javascript for speed to test locally</td> \n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>--tunnel</td>\n\t\t\t<td>Create a tunnel URL which points to your local server which anyone can use</td> \n\t\t</tr>\n\t  <tr>\n\t\t\t<td>-e, --theme-editor</td>\n\t\t\t<td>Run Theme Editor server</td> \n  </tr>\n\t  <tr>\n    <td>-n, --no-cache</td>\n    <td>Turns off caching for API resource data per storefront page. The cache lasts for 5 minutes before automatically refreshing.</td> \n  </tr>\n\t  <tr>\n\t\t\t<td>--theme-editor-port [port]</td>\n\t\t\t<td>Run the Theme Editor on a different port</td> \n  </tr>\n\t  <tr>\n\t\t\t<td>-h, --help</td>\n\t\t\t<td>output usage information</td> \n  </tr>\n</table>\n"
                            header:
                              anchor: '#stencil_stencil-start'
                          - type: text
                            data: "## Stencil Push Options\n\nTo see Stencil CLI's additional options for the stencil push command (described above), enter the following on your command line:\n\n`stencil help push`\n\nYour terminal screen should read similar to the table below.\n\n<table>\n\t<tr>\n    <th>Option</th>\n    <th>Definition</th> \n\t</tr>\n  <tr>\n    <td>-V, --version</td>\n    <td>outputs the version number</td> \n  </tr>\n  <tr>\n    <td>--host [hostname]</td>\n    <td>specify the API host (default: https://api.bigcommerce.com)</td> \n  </tr>\n\t  <tr>\n\t\t\t<td>-f, --file [filename]</td>\n\t\t\t<td>specify the filename of the bundle to upload</td> \n  </tr>\n\t  <tr>\n\t\t\t<td>-s, --save [filename]</td>\n\t\t\t<td>specify the filename to save the bundle as</td> \n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>-a, --activate [variationname]</td>\n\t\t\t<td>This will skip the prompts that normally come up asking if you would like to activate the theme and to specify a variation.\n\nYou can either specify the variation name after the flag or leave it blank to select the first variation (Light for Cornerstone).</td> \n\t\t</tr>\n\t  <tr>\n\t\t\t<td>-h, --help</td>\n\t\t\t<td>Output usage information.</td> \n\t\t</tr>\n</table>"
                            header:
                              anchor: stencil_stencil-push
                          - type: text
                            data: >+
                              You can use the `-f` or `--filename` option in
                              cases where you have already run `stencil bundle`
                              to bundle your theme, but the resulting .zip file
                              has not yet uploaded to BigCommerce. Use the
                              generated .zip file's **filename** as a parameter
                              to identify the generated file in your theme
                              directory. An example of the command is outlined
                              below.


                              `stencil push -f Cornerstone-2.3.2.zip`


                              In this example, `Cornerstone-2.3.2.zip` is the
                              name of the file that was generated after running
                              `stencil bundle`.


                              When you run `stencil push` with the `-f` or
                              `--filename` option, Stencil CLI skips all its
                              bundling steps and diagnostics. It proceeds
                              directly to uploading the specified file,
                              displaying its processing progress bar to show
                              upload status.

                          - type: text
                            data: '---'
                          - type: text
                            data: "## Theme Editor Local Launch Quick Reference\n\n<table> \n\t<tr>\n\t\t<th>Launch type</th>\n\t\t<th>Command</th>\n\t\t<th>Theme Port URL</th>\n\t\t<th>Theme Editor Port URL</th>\n\t</tr>\n\t<tr>\n\t\t<td>Theme Only</td>\n\t\t<td><code>stencil start</code></td>\n\t\t<td>http://localhost:3000 (or custom \n\t\tport)</td>\n\t\t<td>N/A</td>\n\t</tr>\n\t<tr>\n\t\t<td>Theme, Theme Editor</td>\n\t\t<td><code>stencil start -e</code>\n\t\t</td>\n\t\t<td>http://localhost:3000 (or custom \n\t\tport)</td>\n\t\t<td>http://localhost:8181</td>\n\t</tr>\n\t<tr>\n\t\t<td>Theme <b>and</b> Theme Editor \n\t\t</td>\n\t\t<td><code>stencil start -e --theme-\n\t\teditor-port 9000</code></td>\n\t\t<td>http://localhost:3000 (or custom \n\t\tport)</td>\n\t\t<td>http://localhost:9000\n(#### = custom port)</td>\n\t</tr>\n"
                            header:
                              anchor: stencil_quick
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Local Launch: Theme Only


                              After initializing Stencil, issue the following
                              command in your theme directory (_Windows users
                              need to run this in git bash_):


                              `stencil start`


                              When you navigate to your designated port (e.g
                              http://localhost:3000), you should see the
                              storefront you selected with the local Stencil
                              theme applied.


                              ## Troubleshooting Token Errors


                              If you receive the following error message, 


                              `Unauthorized, please use a valid username/token`


                              then store token authentication has failed.


                              In this case, please track back and review the
                              following articles:


                              * [Authentication &
                              Tokens](/stencil-docs/getting-started/authentication-and-tokens):
                              How to issue or reissue tokens in the BigCommerce
                              control panel.

                              * [Authorizing and Initializing
                              Stencil:](/stencil-docs/getting-started/launching-stencil/authorizing-and-initializing):
                              How to initialize Stencil with your username and
                              token.
                            header:
                              anchor: stencil_local-launch-theme
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Local Launch: Theme and Theme Editor


                              If you want to view or reconfigure the Theme
                              Editor/Store Design settings, you can run Stencil
                              locally while also launching a local version of
                              Theme Editor. This will help you see the UX
                              changes that result from editing the `schema.json`
                              file. 


                              To run Stencil locally while also launching a
                              local version of Theme Editor, start in your theme
                              directory and run the same command as above
                              (`stencil start`), but append the `-e` option:


                              `stencil start -e`


                              The Theme Editor server will run in parallel with
                              the stencil theme at
                              [http://localhost:8181](http://localhost:8181/).


                              ### Customizing Theme Editor's Port


                              You can override Theme Editor's default port by
                              appending the "--theme-editor-port [port]" option.
                              For example, to specify port `9000`, you would
                              enter:


                              `stencil start -e --theme-editor-port 9000

                              `


                              To verify Theme Editor's launch, you would then go
                              to http://localhost:9000. Using this option, you
                              can specify any port between `1024` and `65535`.
                            header:
                              anchor: stencil_local-launch-theme-and-editor
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              ## Local Launch: Disabling Caching


                              By default, Stencil caches API resource data per
                              storefront page. This minimizes server traffic
                              while you develop your theme locally.

                              If you prefer to see your changes reflected
                              immediately in your live store, you can turn off
                              caching by appending the `--no-cache` or `-n`
                              option:


                              `stencil start --no-cache`

                              `stencil start -n`


                              ### To re-enable caching:


                              Kill the current Stencil server (_ctrl + c will do
                              the job_) and restart Stencil, this time omitting
                              the `--no-cache` or `-n` option.


                              `stencil start` 
                            header:
                              anchor: stencil_disabling
                    - title: Cornerstone File Structure
                      route:
                        path: /cornerstone-file-structure
                      data:
                        blocks:
                          - type: html
                            data: <h1>Cornerstone File Structure</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#cornerstone_templates-pages\">templates/pages</a></li>\n    <li><a href=\"#cornerstone_templates-components\">templates/components</a></li>\n    <li><a href=\"#cornerstone_templates-layouts\">templates/layouts</a></li>\n    <li><a href=\"#cornerstone_assets\">assets/</a></li>\n    <li><a href=\"#cornerstone_lang\">lang</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              Cornerstone is the base Stencil theme, and it is
                              also the default theme for all newly initialized
                              local storefronts. Cornerstone provides the
                              standard file structure, base design pattern, and
                              default file assets necessary to start developing
                              a custom storefront experience.


                              The Cornerstone file structure consists of four
                              main subdirectories, which are detailed below.
                            header: {}
                          - type: text
                            data: >-
                              ## template/pages

                              <span class="fp">templates/pages</span> contains
                              all the base template pages used in a BigCommerce
                              Stencil storefront. The pages are grouped by page
                              category.  For details, see [Pages
                              Subdirectory](/stencil-docs/template-files/templates-directory/pages-subdirectory).
                            header:
                              anchor: cornerstone_template-pages
                          - type: callout
                            data:
                              type: warning
                              title: 'Prevent Rendering Errors '
                              body: >-
                                In order to prevent any rendering errors, avoid
                                changing the html file names in the <span
                                class="fp">template/pages</span> directory.
                          - type: text
                            data: >-
                              ## template/components

                              The <span class="fp">templates/components</span>
                              directory consists of code snippets and partials
                              that can be reused throughout your theme. This
                              components directory is grouped by component type.
                              For details, see [Components
                              Subdirectory](/stencil-docs/template-files/templates-directory/components-subdirectory).
                            header:
                              anchor: cornerstone_template-components
                          - type: text
                            data: >-
                              ## template/layout

                              The <span class="fp">templates/layout</span>
                              directory defines the overall structure (header,
                              footer, etc.) for your storefront. Within this
                              directory, you can create multiple layouts for
                              different use cases, making it easy to switch
                              between different variations for the same theme.
                              For details, see [Layout
                              Subdirectory](/stencil-docs/template-files/templates-directory/layout-subdirectory).
                            header:
                              anchor: cornerstone_template-layout
                          - type: text
                            data: >-
                              ## assets/

                              <span class="fp">assets/</span> (images, CSS and
                              JavaScript files) will be located in this
                              directory. For details, see [Assets
                              Directory](/stencil-docs/css-and-design-assets/assets-directory).
                            header:
                              anchor: cornerstone_assets
                          - type: text
                            data: >
                              ## lang/

                              <span class="fp">lang/</span> contains translation
                              files, including the required <span
                              class="fn">en.json</span>. For details, see
                              [Internationalization/Localization](/stencil-docs/internationalization-and-localization/localizing-stores)


                              When developing in your local environment, all
                              files that you change in your Stencil theme
                              directory (<span class="fp">/cornerstone/</span>
                              in our default installation) will be reflected
                              immediately at
                              [http://localhost:3000](http://localhost:3000).
                            header:
                              anchor: cornerstone_lang
                  blocks: []
              - title: Advanced Installation Options
                route:
                  path: /advanced-installation-options
                data:
                  blocks: []
                  children:
                    - title: Navigating Your Setup Scenario
                      route:
                        path: /navigating-your-setup-scenario
                      data:
                        blocks:
                          - type: html
                            data: <h1>Navigating Your Setup Scenario</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#navigating_illustration\">Illustration of Stencil's Setup Options</a></li>\n    <li><a href=\"#navigating_initial\">Intial Cornerstone Setup</a></li>\n    <li><a href=\"#navigating_download-and-install\">Download and Install a New Version of Cornerstone</a></li>\n    <li><a href=\"#navigating_download-marketplace\">Download a Marketplace Theme</a></li>\n    <li><a href=\"#navigating_implementing-custom-build\">Implementing a Custom Build System</a></li>\n    <li><a href=\"#navigating_blueprint-store\">Blueprint Store Launched Before January 26th, 2016</a></li>\n\t</ul>\n</div>"
                          - type: callout
                            data:
                              type: warning
                              title: Notes on Dependencies
                              body: >
                                Our installation instructions have been tested
                                on Mac OS X Yosemite, Linux/Ubuntu v.14.04.4,
                                and Windows. Dependencies for other
                                platforms/releases will be added upon further
                                testing.
                          - type: text
                            data: >-
                              ## Illustration of Stencil's Setup Options


                              The diagram below visually illustrates _all_
                              currently supported workflows for setting up a
                              Stencil theme. You will choose one pathway to
                              setup Stencil for your store. The color codes for
                              each setup scenario are as follows: 


                              * [Black arrows: Initial setup with the default
                              Cornerstone theme.](#navigating_initial)


                              * [Orange arrows: Refresh Cornerstone from Theme
                              Marketplace.](#navigating_cornerstone-refresh)


                              * [Purple arrows: Customize a theme (_other than_
                              Cornerstone) downloaded from Theme
                              Marketplace.](#navigating_download-marketplace)


                              * [Green arrows: Configure a custom JavaScript
                              build
                              system](#navigating_implementing-custom-build)


                              * [Blue arrows: Adds onto any of the preceding
                              four scenarios. If developing for a BigCommerce
                              Blueprint production store launched before Jan.
                              26, 2016, you must add one extra step to enable
                              Stencil in the store's control
                              panel.](#navigating_blueprint-store)
                            header:
                              anchor: navigating_illustration
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1538540242143
                            config:
                              centered: true
                              fluid: true
                              bordered: true
                          - type: callout
                            data:
                              title: Detailed Steps Described Below
                              body: >-
                                Continue reading to get a detailed description
                                and breakdown of the steps required for each
                                setup scenario.
                          - type: text
                            data: >-
                              ## Initial Cornerstone Setup 


                              This is the workflow to start developing based on
                              BigCommerce's default Cornerstone theme. This
                              workflow uses Webpack as the JavaScript build
                              system. Steps required:


                              * [Install your necessary
                              prerequisites](/stencil-docs/getting-started/installing-stencil#installing_prerequisites)

                              * [Install Stencil
                              CLI](/stencil-docs/getting-started/installing-stencil#installing_installing-the-stencil-cli)

                              * [Clone the Cornerstone theme using
                              Github](/stencil-docs/getting-started/installing-stencil#installing_cloning-cornerstone)

                              * [Install JavaScript
                              Utilities](/stencil-docs/getting-started/installing-stencil#installing_installing-stencils-js-utilities)

                              * [Create an API Account to prepare store and
                              tokens](/stencil-docs/getting-started/authentication-and-tokens#authentication_creating-an-api-account)



                              Once you have completed these steps, proceed to
                              the _Launching Stencil_ section.
                            header:
                              anchor: navigating_initial
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Download and Install a New Version of
                              Cornerstone 


                              If you would like to download and install a
                              **new** version of Cornerstone from BigCommerce's
                              Theme Marketplace, perform the following steps:


                              * Ensure all necessary prerequisites are installed

                              * [Ensure Stencil CLI is
                              installed](/stencil-docs/getting-started/installing-stencil#installing_installing-the-stencil-cli)

                              * [Download a new Cornerstone .zip
                              file](/stencil-docs/getting-started/advanced-installation-options/downloading-the-cornerstone-theme#downloading_downloading-cornerstone-zip)

                              * [Reinstall JavaScript
                              Utilities](/stencil-docs/getting-started/installing-stencil#installing_installing-stencils-js-utilities)

                              * Repeat steps in _Launching Stencil_
                            header:
                              anchor: navigating_download-and-install
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Download a Marketplace Theme 


                              If you would like to customize a theme _other
                              than_ Cornerstone, follow the required steps to
                              download a theme from BigCommerce's Theme
                              Marketplace. This workflow requires BitBucket.
                              Some earlier theme versions will also require
                              additional steps for the jspm JavaScript build
                              system. Steps required:


                              * [Install all necessary
                              prerequisites](/stencil-docs/getting-started/installing-stencil#installing_prerequisites)

                              * [Install Stencil
                              CLI](/stencil-docs/getting-started/installing-stencil#installing_installing-the-stencil-cli)

                              * [Set up BitBucket and Download the Marketplace
                              theme's .zip
                              file](/stencil-docs/getting-started/advanced-installation-options/downloading-a-marketplace-theme#downloading_setting-up-bitbucket)

                              * [Install JavaScript Utilities within the
                              Marketplace
                              Theme](/stencil-docs/getting-started/installing-stencil#installing_installing-stencils-js-utilities)

                              * [Create an API Account to Prepare Your Store and
                              Tokens](/stencil-docs/getting-started/authentication-and-tokens#authentication_creating-an-api-account)

                              * Complete the steps outlined in _Launching
                              Stencil_
                            header:
                              anchor: navigating_download-marketplace
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Implement a Custom JavaScript Build System 


                              The Stencil framework currently uses Webpack 4 as
                              its default Javascript Build system (jspm for
                              older versions), but if you prefer, you can
                              substitute this for a custom JavaScript build
                              system such as Grunt. Steps recommended:


                              * [Install all necessary
                              prerequisites](/stencil-docs/getting-started/installing-stencil#installing_prerequisites)

                              * [Install Stencil
                              CLI](/stencil-docs/getting-started/installing-stencil#installing_installing-the-stencil-cli)

                              * [Clone the Cornerstone theme using
                              Github](/stencil-docs/getting-started/installing-stencil#installing_cloning-cornerstone)

                              * [Install JavaScript
                              Utilities](/stencil-docs/getting-started/installing-stencil#installing_installing-stencils-js-utilities)

                              * [Configure your custom build
                              system](/stencil-docs/getting-started/advanced-installation-options/configuring-webpack-or-custom-build)

                              * [Create an API Account to Prepare Your Store and
                              Tokens](/stencil-docs/getting-started/authentication-and-tokens)

                              * Proceed to _Launching Stencil_
                            header:
                              anchor: navigating_implementing-custom-build
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Blueprint Store Launched before January 26th,
                              2016


                              If your store is **both**:

                              * running on a Blueprint theme

                              * was launched before Jan. 26th, 2016 


                              and you would like to enable Stencil development
                              on it, you must perform the following steps:


                              * Follow the installation path above that
                              corresponds to your development scenario

                              * Enable Stencil in the store’s control panel
                            header:
                              anchor: navigating_blueprint-store
                    - title: Downloading the Cornerstone Theme
                      route:
                        path: /downloading-the-cornerstone-theme
                      data:
                        blocks:
                          - type: html
                            data: >-
                              <h1>Downloading the Cornerstone Theme from the
                              BigCommerce Control Panel</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#downloading_downloading-cornerstone-zip\">Downloading the Cornerstone .zip file</a></li>\n    <li><a href=\"#downloading_reinstalling-dependencies\">Reinstalling Dependencies and Relaunching</a></li>\n    <li><a href=\"#downloading_next-steps\">Next Steps</a></li>\n\t</ul>\n</div>"
                          - type: callout
                            data:
                              type: error
                              title: Back Up Before Reinstalling
                              body: >-
                                If you are reinstalling over a base theme on
                                which you have already begun development, first
                                back up at least your theme's .stencil file.
                                This file contains your store URL, your
                                BigCommerce username and access tokens, and
                                other basic settings. Preserving those settings
                                will speed up initializing and launching the new
                                version. To allow complete rollback, back up
                                your whole theme directory. (In a current
                                default installation, this directory is named
                                `cornerstone`. Prior to March 2017, this
                                directory's name defaulted to `stencil`).
                          - type: text
                            data: "## Downloading the Cornerstone .zip file from the Control Panel\n\n_If you have not yet added Cornerstone to your store, navigate to `Storefront` > `Themes Marketplace` and add the Cornerstone theme to your store._\n\nUse these steps to download a the Cornerstone theme from the store Control Panel: \n\n**Note:** The steps below are required only if you are downloading a clean copy of Stencil's default Cornerstone theme, specifically from the BigCommerce Theme Marketplace. \n\nIf you are downloading a Marketplace theme other than Cornerstone for customization, you must follow the workflow outlined in [Downloading a Marketplace Themes](/stencil-docs/getting-started/advanced-installation-options/downloading-a-marketplace-theme).\n    \n* Go to `Storefront` -> `My Themes`.\n\n* Click the Cornerstone theme's thumbnail:\n\t* If Cornerstone is the store's currently active theme, click its image thumbnail at the top of the page, under the `Current Theme` heading.\n\t* If Cornerstone is _not_ the current theme, scroll down below the lower My Themes subheading, find, and click the Cornerstone thumbnail.\n\n_The Cornerstone theme's description should zoom to full-page and display a Theme Options drop-down list at the upper right._\n\n* From the `Theme Options` drop-down list, select `Download theme file` to download this Cornerstone release as it was refreshed on Theme Marketplace. \n\n* Unpack the zipped theme to a working directory. This can either be the directory where you have been developing your theme or a new directory.\n"
                            header:
                              anchor: '#downloading_downloading-cornerstone-zip'
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              ## Reinstalling Dependencies and Relaunching


                              * Ensure that your theme includes all current
                              dependencies by repeating the [Stencil Utils
                              installation.](/stencil-docs/getting-started/installing-stencil#installing_installing-stencils-js-utilities) 


                              * To relaunch, repeat the steps listed in the
                              _Launching Stencil_ section.
                            header:
                              anchor: '#downloading_reinstalling-dependencies'
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Next Steps


                              When you are ready to upload your custom theme to
                              a store, follow the instructions in [Bundling and
                              Uploading a
                              Theme](/stencil-docs/prepare-and-upload-a-theme/bundling-and-uploading).
                            header:
                              anchor: '#downloading_next-steps'
                          - type: callout
                            data:
                              body: >-
                                Distribution of Cornerstone-based themes is
                                subject to BigCommerce's Cornerstone license,
                                including the mandatory incorporation of
                                BigCommerce's copyright statement.
                              title: Distribution of Cornerstone-based Themes
                              type: error
                    - title: Downloading a Marketplace Theme
                      route:
                        path: /downloading-a-marketplace-theme
                      data:
                        blocks:
                          - type: html
                            data: >-
                              <h1>Downloading a Marketplace Theme from the
                              BigCommerce Control Panel</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#downloading_setting-up-bitbucket\">Setting Up BitBucket SSH Keys</a></li>\n    <li><a href=\"#downloading_downloading-a-marketplace-theme\">Downloading a Marketplace Theme for Customization</a></li>\n    <li><a href=\"#downloading_checking-themes-version\">Checking the Theme's Version</a></li>\n    <li><a href=\"#downloading_jspm-steps\">jspm Steps for Earlier Versions</a></li>\n    <li><a href=\"#downloading_installing-modules\">Installing Modules (Webpack themes)</a></li>\n    <li><a href=\"#downloading_next-steps\">Next Steps</a></li>\n    </ul>\n</div>"
                          - type: callout
                            data:
                              body: >
                                BitBucket registry access is required for all
                                Pixel Union Marketplace Themes. See [Setting Up
                                BitBucket SSH Keys for Pixel Union Marketplace
                                Themes](#downloading_setting-up-bitbucket) for
                                steps to complete this. 
                              title: BitBucket Registry Access
                              type: warning
                          - type: text
                            data: >-
                              ## Setting Up BitBucket SSH Keys for Pixel Union
                              Marketplace Themes 


                              To set up Stencil CLI for Pixel Union Themes, you
                              must authorize communication among your local
                              system, the BitBucket registry, and GitHub.
                            header:
                              anchor: downloading_setting-up-bitbucket
                          - type: callout
                            data:
                              type: warning
                              body: >-
                                Steps beyond this point require that you have
                                active accounts on both BitBucket and GitHub.
                              title: BitBucket and Github Accounts Required
                          - type: text
                            data: >+
                              To authorize ongoing communication, you must set
                              up a secure shell (SSH) key that is shared between
                              BitBucket and GitHub. This is a multi-step
                              process, which is beyond the scope of this
                              documentation. However, we have tested the
                              following instructions and found them to be
                              reliable:


                              * [Setting up SSH for Git on BitBucket](

                              https://confluence.atlassian.com/bitbucket/set-up-ssh-for-git-728138079.html)


                              _Follow the default instructions to create a key
                              in your `~/.ssh/config`_


                              * [Setting up SSH on GitHub (a series of linked
                              steps)](

                              https://help.github.com/articles/connecting-to-github-with-ssh/)

                          - type: callout
                            data:
                              body: >-
                                Marketplace themes other than Cornerstone must
                                be purchased in order to be downloadable.


                                You are entitled to customize a free or
                                purchased theme for a store that you support.
                                However, the theme's original creator retains
                                rights to that theme's design. So, except for
                                Cornerstone-based themes, you may not upload a
                                derived theme to a public theme marketplace
                                (whether BigCommerce's or third-party), nor sell
                                it privately.
                              title: ' Theme Access, Copyright/Ownership, and Distribution'
                          - type: text
                            data: "## Downloading a Marketplace Theme for Customization\n\nUse these steps to download a theme (other than Cornerstone) available in the store control panel's Storefront Design area. \n\n1. If you have not yet added the theme to your store, start at **Storefront Design** > **Themes Marketplace**, and add the theme.\n\n2. Go to **Storefront Design** > **My Themes**.\n\n3. Click the theme's thumbnail:\n\t \n\t* To download the store's currently active theme, click the image thumbnail at the top of the page, under the Current Theme heading.\n\t\n\t* To download an inactive theme, scroll down below the lower My Themes subheading, and click the appropriate theme's thumbnail.\n\nYour selected theme will zoom up to a full-page description and display a Theme Options drop-down list at the upper right.\n\n4. Note the version number displayed under the theme's title and credits. At Checking the Theme's Version below, you will use this number to choose between two installation flows.\n\n5. From the Theme Options drop-down list, select the appropriate Download option. (The options visible depend on your theme's current state:)\n\n\t* Download current theme: Download the theme version that is now active on the storefront. (This option appears only if you selected the Current Theme.)\n\n\t* Download your latest customizations: Download the theme's most recently saved version. (This option appears only for themes that have been customized for this store.)\n\n\t* Download theme file: Download the theme as it was originally uploaded to Theme Marketplace. \n\n6. Unpack the zipped theme to a working directory.\n(In the remainder of this documentation, substitute this working directory's name for the default `stencil` path or the `theme-name` placeholder.)"
                            header:
                              anchor: downloading_downloading-a-marketplace-theme
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1538543505088
                            header:
                              title: Theme Options
                              subtitle: 'Dropdown list options as related to step #5'
                            config:
                              centered: true
                              fluid: true
                              bordered: true
                              maxWidth: '600'
                              maxHeight: '1000'
                          - type: callout
                            data:
                              body: >-
                                Some versions of the BigCommerce control panel
                                offer you shortcuts for steps 3–5 above,
                                removing the need to click the theme
                                card/thumbnail:


                                * For your store's currently active theme, look
                                for a version number to the right of the
                                thumbnail. You can select the Advanced drop-down
                                list to display options similar to those at step
                                5 above.


                                * For inactive themes, look for a version number
                                at the theme card's lower left. Also, you can
                                select the "..." menu at the theme card's lower
                                right to display options similar to those at
                                step 5 above.
                              title: Theme Download Shortcuts
                          - type: text
                            data: >
                              ## Checking the Theme's Version


                              Refer to the theme's version number that you noted
                              above at Downloading a Theme for Customization:


                              * If the version number is 1.10.0 or higher, the
                              theme uses Webpack as its JavaScript build system.
                              Skip ahead to the simplified installation
                              instructions in Installing Modules (Webpack
                              Themes).


                              * If the theme's version number is lower than
                              1.10.0, the theme uses jspm as its JavaScript
                              build system. Follow the steps outlined on the
                              jspm tab below on [jspm Steps to install modules
                              for Stencil
                              Themes](#downloading_checking-modules).
                            header:
                              anchor: downloading_checking-themes-version
                          - type: callout
                            data:
                              body: >-
                                For version numbers below 1.10.0, consider using
                                the options My Themes option in the control
                                panel to download a newer version of the same
                                theme. This will allow you to jump ahead to the
                                streamlined instructions below at Installing
                                Modules (Webpack Themes).


                                **Note**: These version numbers do not apply to
                                the Cornerstone theme. All currently supported
                                Cornerstone versions use Webpack. A clean
                                version of the theme can be downloaded using the
                                instructions in [Downloading the Cornerstone
                                Theme]().
                              title: Consider Updating Your Theme
                              type: warning
                          - type: tabs
                            data:
                              children:
                                - title: Webpack
                                  blocks:
                                    - type: text
                                      data: >-
                                        ## Installing Modules for Webpack themes


                                        For Marketplace themes whose version
                                        number is 1.10.0 or higher, simply use
                                        npm to install the modules required to
                                        access Stencil JavaScript events:


                                        1. Navigate to your theme directory.
                                        This example assumes that this target
                                        directory has the default name
                                        Cornerstone:


                                        `cd cornerstone`


                                        2. Within that directory, install the
                                        stencil-utils module to ensure that all
                                        your dependencies are up to date:


                                        `npm install`
                                - title: jspm
                                  blocks:
                                    - type: text
                                      data: >-
                                        ## Legacy: Configuring themes with jspm
                                        (Marketplace theme versions earlier than
                                        1.10.0)


                                        * Installing jspm

                                        * Registering the jspm Instance

                                        * Installing jspm-git

                                        * Adding BitBucket as a jspm registry

                                        * Installing Modules (jspm Themes)
                                    - type: text
                                      data: >-
                                        Use the following steps for Marketplace
                                        themes (other than Cornerstone) for
                                        which the version number is lower than
                                        1.10.0


                                        ## Installing jspm 


                                        You must [install jspm](http://jspm.io)
                                        to manage your pre-1.10.0 theme's
                                        JavaScript dependencies. We have tested
                                        Stencil on jspm version 0.16.30 for Mac
                                        OS and Linux, and on version 0.16.31 for
                                        Windows. Use the following npm command
                                        to install a tested version of jspm with
                                        global scope - for Mac OS or Linux: 


                                        `npm install -g jspm@0.16.30`


                                        Or, for Windows:


                                        `npm install -g jspm@0.16.31`


                                        You can use the same command to upgrade
                                        an earlier jspm installation to a
                                        Stencil-supported version.
                                    - type: text
                                      data: >
                                        ## Registering the jspm Instance 


                                        Next, register your jspm instance with
                                        GitHub.

                                        Navigate to your [GitHub Personal Access
                                        Tokens
                                        page](https://github.com/settings/tokens).


                                        Generate a new personal access token
                                        with the name Stencil and scope repo.
                                        GitHub provides specific instructions
                                        [here](https://help.github.com/articles/generating-an-ssh-key/).


                                        Verify that your new token includes the
                                        following scopes: 


                                        * `repo:status`

                                        * `repo_deployment`

                                        * `public_repo`


                                        Once you have generated your token, run
                                        the following command to associate your
                                        jspm module with your GitHub account:


                                        `jspm registry config github`


                                        You will be prompted (`"Set up GitHub
                                        credentials?`) to enter your
                                        authentication token. Copy the personal
                                        access token you created above and paste
                                        it in.
                                    - type: text
                                      data: >-
                                        ## Installing jspm-git 


                                        For the next step, you will need the
                                        [jspm-git registry
                                        plug-in](https://www.npmjs.com/package/jspm-git\).


                                        To install it with global scope, enter
                                        the following on a command line:

                                        `npm install -g jspm-git`


                                        If you already have an earlier version
                                        of jspm-git installed, you might need to
                                        update it to handle Git projects with
                                        two-digit version numbers (such as
                                        `1.10.0`). If so, use this command:


                                        `npm upgrade jspm-git@latest`
                                    - type: text
                                      data: >-
                                        ## Adding BitBucket as a jspm Registry 


                                        Working with downloaded Marketplace
                                        themes requires that you next add
                                        BitBucket as a registry for jspm. To
                                        proceed, set up a
                                        [BitBucket](https://bitbucket.org/product)
                                        account, if you do not already have one.


                                        Next, enter the following on a command
                                        line:


                                        `jspm registry create bitbucket
                                        jspm-git`


                                        You will be prompted for a base URL for
                                        your git server. Enter the following:
                                        `ssh://git@bitbucket.org`
                                    - type: text
                                      data: "## Installing Modules (jspm Themes)\n\t\nNext, install the npm and jspm modules required to access Stencil JavaScript events: Navigate to your theme directory. \n\nThis example assumes that this target directory has the default name `stencil`\n\n`cd stencil` \n\nWithin that directory, install (or reinstall) the `stencil-utils` module to ensure that all your dependencies are up to date:`npm install` Then execute the following command to complete installation: `jspm install`"
                            header:
                              title: >-
                                Steps to Install Modules for (Webpack or jspm)
                                Stencil Themes 
                              anchor: downloading_checking-modules
                          - type: text
                            data: >
                              ## Next Steps


                              To authorize, initialize, and launch your theme,
                              follow the steps in [Launching
                              Stencil](/stencil-docs/getting-started/launching-stencil)
                              section.


                              Later, when you are ready to upload your
                              customized theme to a store, you should follow the
                              zipping and uploading instructions in Bundling and
                              Submitting a Theme and Troubleshooting Theme
                              Uploads.
                            header:
                              anchor: downloading_next-steps
                          - type: callout
                            data:
                              title: 'BitBucket Reauthentication '
                              body: >-
                                When you issue the `stencil init` command to
                                [authorize and initialize
                                Stencil](/stencil-docs/getting-started/launching-stencil/authorizing-and-initializing),
                                you might receive error messages about resolving
                                BitBucket as an SSH host. These errors occur
                                when you have not recently logged into
                                BitBucket. 


                                When prompted, enter the BitBucket password you
                                used in Setting Up BitBucket SSH Keys above.
                                This will clear the errors and allow you to
                                proceed.
                              type: warning
                    - title: Theme Updates & Version Control
                      route:
                        path: /theme-updates-and-version-control
                      data:
                        blocks:
                          - type: html
                            data: <h1>Theme Updates and Version Control</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#theme-updates_customizing\">Customizing Strategically for Easier Updates</a></li>\n    <li><a href=\"#theme-updates_goruck-best-pracs\">GoRuck's Best Practices for Handling Theme Updates</a></li>\n    <li><a href=\"#theme-updates_synchronizing-cornerstone\">Synchronizing Your Theme With Cornerstone's Updates</a></li>\n    <li><a href=\"#theme-updates_synchronizing-multiple\">Synchronizing Updates for Multiple Themes</a></li>\n\t</ul>\n</div>\n\n"
                          - type: callout
                            data:
                              title: Distributed Version Control via Git
                              body: >-
                                Many techniques discussed below rely on GitHub's
                                _distributed version control_ model and
                                features. For the underlying principles, please
                                see [Git's own
                                documentation](https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control).
                          - type: text
                            data: >-
                              ## Customizing Strategically for Easier Updates


                              In order to keep your store and Stencil theme
                              performant, it's crucial to know the best way to
                              set up your customized Stencil theme in order to
                              smoothly incorporate future bug fixes,
                              enhancements, and updates that are applied to the
                              base theme. 
                            header:
                              anchor: theme-updates_customizing
                          - type: text
                            data: '---'
                          - type: text
                            data: "## GoRuck's Best Practices for Handling Theme Updates\n\nThe guidelines provided are from Web Developement team from the BigCommerce client, [GoRuck](https://www.goruck.com/). \n\nGoRuck's scenario addresses maintaining a single custom theme that is based on a third-party Marketplace theme (a theme other than Cornerstone). These guidelines can also apply to maintaining a custom theme based on Stencil's default Cornerstone theme.\n\n### Handling and Managing Theme Updates\n\n_We've made significant changes to our theme, and one principle that I've found successful is isolating my changes as much as possible. I try to put my changes into their own files, whether they're changes to templates, JavaScript, or SCSS._\n\n_I also name all my files, CSS classes and identifiers, and JavaScript methods and classes with a `gr-` prefix (as an abbreviation for our company, GORUCK LLC). Also, any changes I make to standard theme files are identified with a comment, such as:_\n\n`//Go Ruck Customization`\n\t\t\n_For example, I have a file in `assets/scss/` named `gr-theme.scss`. All of the styles I've added to the theme are either in this file, or imported by this file. So for styling, my only changes to the theme itself are in a handful of places where I had to change an existing theme style (identified with a comment), plus this one line in `templates/layout/base.html`:_\n\n`{{{stylesheet '/assets/css/gr-theme.css'}}}`\n\n_I've found that this approach provides several advantages:_\n\n* It makes it easier to distinguish my custom code from code supplied by the default theme.\n* It makes it less likely that my code will get intermingled with the standard theme code. This, in turn, prevents my code from unexpectedly being affected by theme updates.\n* It makes it easier to merge base-theme updates into my theme code.\n\n### Comparing and Merging Theme Updates\n\n_Having isolated my changes as much as I can, I identify theme changes and updates by comparing base themes, rather than by comparing base themes to my customized theme. When a new version of the theme is released, I download the `.zip` file from the BigCommerce Control Panel._\n\n_I then use a desktop diff tool (Beyond Compare) to \ncompare the new version to the .zip file of the theme's previous release. I ignore changes in the .zip file's\n `meta/` and `parsed/` folders, and to its `manifest.json`, and do a `Compare Contents` on the rest of the files._\n\nUltimately, I need to examine the changes carefully, to identify any changes that might affect, or be affected by, my customizations. And I need to test thoroughly. But comparing the stock themes to each other reduces the number of changes I have to examine. \n\nAlso, because I isolate my changes, most of the theme changes can be copied directly into the corresponding file in my customized theme. In practice, this means that I can limit my testing to the areas affected by changes in the standard theme, rather than having to re-test all my own changes.\n\nI personally find that it is also helpful to migrate *every* theme update into my customized version, as the update is released. If I were to wait, and to allow changes to accumulate and become more substantial, I think it would be more difficult to adequately test – and correctly integrate – the changes. Similarly, I'm grateful to the developer of our base theme (Pixel Union) for updates that have always made small, incremental changes.\n\n### Dynamic Content Injection\n\n_We've also come up with a variety of techniques for dynamically placing content on a page. For example, we can dynamically add tabs to a product page, using content stored on our WebDAV. Similarly, we can inject content from an external file into the body of a page. This allows us to put something that appears in many places, like a sizing chart, in a single place where it can be easily updated._\n\n_Or, we can use the BigCommerce control panel's various HTML editors – for Products, Categories, and Content > Web Pages – to inject content into predefined \"dropzones\" (custom div's). This allows us to generate a wide variety of content pages using a single custom template._\n\nAll of these techniques minimize the complexity of merging base-theme updates into our customized theme. For further details and examples on how we implement these techniques, see [Dynamic Content Rendering on Stencil Storefronts](/stencil-docs/conditional-logic-examples/dynamic-content-rendering)."
                            header:
                              anchor: theme-updates_goruck-best-pracs
                          - type: text
                            data: '---'
                          - type: text
                            data: >+
                              ## Synchronizing Your Theme With Cornerstone's
                              Updates


                              This section addresses two methods that will allow
                              you to keep your customized Stencil theme up to
                              date with Cornerstone's updates, enhancements, and
                              bug fixes:


                              * Updating Lightly Customized Themes

                              * Updating Heavily Customized Themes


                              We've adapted these tips from one a Stencil theme
                              developer who is an active member of the
                              BigCommerce Community.


                              ### Updating Lightly Customized Themes


                              In this scenario, you can use Git's cherry-pick
                              option to merge in specific Cornerstone commits.


                              Use the Stencil Framework Release Notes to look up
                              specific updates' commit hashes on the Cornerstone
                              repository.


                              See [this explanation of how to use the
                              cherry-pick
                              option](https://stackoverflow.com/questions/9339429/what-does-cherry-picking-a-commit-with-git-mean)
                              (Stack Overflow).


                              ### Updating Highly Customized Themes


                              Here, unexpected errors from automatic merges can
                              be time-consuming to undo. So, consider this
                              handtooled approach:


                              Use GitHub's Web interface to inspect each
                              Cornerstone commit (change) of interest. Each
                              commit will show you – for all changed files – a
                              diff view highlighting any deletions (left/red)
                              and any insertions (right/green).


                              For changes that you want to incorporate into your
                              theme, access the source code.


                              As illustrated below, you can either access
                              individual files via Github's Raw view, or you can
                              download a .zip of the whole Cornerstone repo in
                              order to access all files locally.


                              Manually edit the changes into your theme's
                              affected files.


                              ### Accessing Individual Files


                              In the file-by-file approach: For each commit that
                              you would like to incorporate into your custom
                              theme, do the following for each of the commit's
                              changed files.


                              In GitHub's diff view, click the View button at
                              the upper right. (We show it highlighted with a
                              red border and a tooltip.) You will see the file's
                              full contents, as shown below.


                              Click the Raw button at the upper right (which we
                              show highlighted in red). This will reveal the
                              file's full contents as plaintext – allowing you
                              to copy and paste without picking up the table
                              metadata used to display line numbering.


                              ### Downloading the Cornerstone Repository


                              This approach downloads all theme files at once,
                              allowing you to copy/paste their relevant contents
                              locally.


                              1. Navigate to the [Cornerstone Github
                              Repository](https://github.com/bigcommerce/cornerstone).

                              2. On the right hand side of the page, click the
                              green `Clone or download` button, and select
                              Download ZIP.



                            header:
                              anchor: theme-updates_synchronizing-cornerstone
                          - type: text
                            data: >-
                              ## Synchronizing Updates for Multiple Themes


                              These tips run from simpler to more-complex
                              scenarios, with a similar progression from simpler
                              to more-complex tools.


                              ### Enlist Your Clients in Future-Proofing

                              Warn your clients that editing their themes' .html
                              files (via Edit Theme Files) will complicate
                              future theme upgrades. Ask clients to keep a
                              record of such changes, so that when you release a
                              theme update, they can reapply their changes
                              themselves.


                              ### Max Out Variations

                              For very simple theme differences (like changing
                              color values), you can maintain a different theme
                              variation per storefront or use case. Given
                              Stencil's limit of four variations per theme, this
                              approach obviously has limited scalability.


                              ### Customize Outside the Theme

                              Rely as much as possible on dynamic aspects of the
                              BigCommerce control panel, like the Footer Scripts
                              editor. (Control‑panel customizations are saved
                              per store, without complicating your theme's
                              codebase.) For other examples of control-panel
                              options, please see Dynamic Content Injection
                              above.


                              ### Use Conditional Logic within Master Templates

                              For subtle changes to a portion of a template
                              file, use Handlebars helpers and conditionals to
                              render different HTML for each client's flavor of
                              the theme.


                              ### Parallel GitHub Repo's

                              Where different clients' theme flavors diverge
                              into completely custom pages – for example, each
                              client has a wildly different homepage layout –
                              Git's systematic version control helps. You will
                              probably want to fork or branch separate repo's,
                              one per client, and maintain/update them in
                              parallel.


                              As with relying on theme variations, this approach
                              has limited scalability. Beyond a certain number
                              of clients/themes (certainly by 10), it becomes
                              cumbersome.


                              ### Buffered Updates to Multiple Themes

                              For greater scalability, you might choose to
                              create your own master fork/branch of Cornerstone
                              for your group of themes. Keep that fork/branch in
                              sync with Cornerstone updates, then cascade the
                              updates to theme-specific repo's that you
                              fork/branch from this master. (This extends the
                              approach of isolating customizations, outlined
                              above.)
                            header:
                              anchor: theme-updates_synchronizing-multiple
                    - title: Configuring Webpack or a Custom Build System
                      route:
                        path: /configuring-webpack-or-custom-build
                      data:
                        blocks:
                          - type: html
                            data: >-
                              <h1>Configuring Webpack or a Custom Build
                              System</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#configuring_webpack-jspm-other\">Webpack, jspm, or Other JavaScript Managers</a></li>\n    <li><a href=\"#configuring_webpack-specific\">Webpack-Specific Configuration</a></li>\n    <li><a href=\"#configuring_build-system\">Build-System Configuration File</a></li>\n    <li><a href=\"#configuring_watched-folders\">Watched Folders: watchOptions Object</a></li>\n    <li><a href=\"#configuring_javascript-rebundling\">JavaScript Rebundling: development Function</a></li>\n    <li><a href=\"#configuring_theme-packaging\">Theme Packaging: production Function</a></li>\n\t</ul>\n</div>\n\n\n\n\n"
                          - type: text
                            data: >-
                              ## Webpack, jspm, or Other JavaScript Managers


                              Stencil themes are Node.js applications, and
                              therefore contain dependencies on other JavaScript
                              libraries. For the default Cornerstone theme, we
                              provide the [Webpack](https://webpack.js.org/)
                              build manager to handle these dependencies. 


                              As you develop and customize a theme based on
                              Cornerstone, you have option to reconfigure
                              Webpack's watched folders, and to even substitute
                              a different build system. These options are
                              explained below.


                              All themes in the BigCommerce Theme Marketplace
                              use Webpack. However, older versions of certain
                              themes used the jspm JavaScript dependency manager
                              instead of Webpack. Please see this page to
                              determine (by version number) whether you are
                              developing based on one of these earlier versions,
                              and to find the required jspm setup procedures.
                            header:
                              anchor: configuring_webpack-jspm-other
                          - type: callout
                            data:
                              type: info
                              body: >-
                                The steps below are required only if you plan to
                                modify or override the default Webpack-based
                                workflow that installs with Stencil's default
                                Cornerstone theme or and current theme in the
                                BigCommerce Theme Marketplace. If you do not
                                require these advanced configuration options,
                                you can safely skip this page.
                              title: Optional Workflow
                          - type: text
                            data: >-
                              ## Webpack-Specific Javascript Diagnostics


                              The following Webpack configuration options can
                              aid in troubleshooting.


                              If JavaScript errors in your browser's developer
                              tools are not reporting filenames and line
                              numbers, try changing your `webpack.conf.js`
                              file's
                              [sourcemap](https://webpack.js.org/guides/build-performance/#devtool)
                              entry from:


                              ```

                              devtool: 'source-map'

                              ```

                              to:


                              ```

                              devtool: 'eval-source-map'

                              ```


                              The `eval-source-map` option is slower, but more
                              verbose. This [Webpack Devtool
                              Configuration](https://webpack.js.org/configuration/devtool/)
                              article provides an overview of all devtool
                              options and details regarding each.
                            header:
                              anchor: configuring_webpack-specific
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Build-System Configuration File


                              To take advantage of automatic JavaScript bundling
                              and browser refresh, Stencil themes require the
                              [`stencil.conf.js`](https://github.com/bigcommerce/cornerstone/blob/master/stencil.conf.js)
                              file. If you would like to enable a custom build
                              system, you will need to edit this file.


                              Within `stencil.conf.js`, Stencil CLI looks for
                              the exported `watchOptions` object, and
                              `development` and `production` callbacks, shown
                              below. 


                              Continue reading to take a closer look at each of
                              these three references.
                            header:
                              anchor: configuring_build-system
                          - type: text
                            data: >-
                              ## Watched Folders: watchOptions Object


                              The `watchOptions` object defines directories for
                              the [Browsersync](https://browsersync.io/docs)
                              preview engine to watch or ignore, in two
                              respective lists. You are free to edit these
                              lists:


                              ```

                              var watchOptions = {
                                  // If files in these directories change, reload the page.
                                  files: [
                                      '/templates',
                                      '/lang'
                                  ],

                                  //Do not watch files in these directories
                                   ignored: [
                                      '/assets/scss',
                                      '/assets/less',
                                      '/assets/css',
                                      '/assets/dist',
                                  ]
                              };

                              ```
                            header:
                              anchor: configuring_watched-folders
                          - type: text
                            data: >-
                              ### JavaScript Rebundling: `development` Function


                              Upon the command-line instruction `stencil start`,
                              Stencil CLI will look for and call the
                              `development` function. 


                              In the base Cornerstone theme, we have created a
                              Webpack watcher to trigger a browser reload
                              whenever theme edits cause JavaScript to be
                              rebundled to the theme's `bundle.js` file. This
                              watcher uses options configured in the
                              `webpack.conf.js` file passed by `webpackConfig`.
                              So a JavaScript rebuild will refresh the browser:


                              ```

                              function development() {
                                  webpack(webpackConfig).watch({}, err => {
                                      if (err) {
                                          console.error(err.message, err.details);
                                      }

                                      process.send('reload');
                                  });
                              }

                              ```
                            header:
                              anchor: configuring_javascript-rebundling
                          - type: text
                            data: >-
                              ## Theme Packaging: `production` Function 


                              When you issue the command-line instruction
                              `stencil bundle`, to process and package a
                              completed theme for upload to a store, Stencil CLI
                              will look for and call the `production` function.
                              This function passes a callback as its first
                              argument to support asynchronous builds. 


                              The callback must be invoked somewhere inside the
                              `production` function to notify Stencil CLI that
                              the theme-specific build has completed and is
                              ready to package:


                              ```

                              function production() {
                                  webpackConfig.watch = false;
                                  webpackConfig.devtool = false;
                                  webpackConfig.plugins.push(new webpack.LoaderOptionsPlugin({
                                      minimize: true,
                                  }));
                                  webpackConfig.plugins.push(new webpack.optimize.UglifyJsPlugin({
                                      comments: false,
                                      compress: {
                                          warnings: true,
                                      },
                                      sourceMap: false, // Toggle to turn on source maps.
                                  }));

                                  webpack(webpackConfig).run(err => {
                                      if (err) {
                                          console.error(err.message, err.details);
                                          throw err;
                                      }

                                      process.send('done');
                                  });
                              }


                              if (process.send) {
                                  // running as a forked worker
                                  process.on('message', message => {
                                      if (message === 'development') {
                                          development();
                                      }

                                      if (message === 'production') {
                                          production();
                                      }
                                  });

                                  process.send('ready');
                              }

                              ```
                            header:
                              anchor: configuring_theme-packaging
            blocks: []
        - title: Development Quickstart
          route:
            path: /development-quickstart
          data:
            children:
              - title: Customizing a Theme
                route:
                  path: /customizing-a-theme
                data:
                  blocks:
                    - type: html
                      data: <h1>Customizing a Theme</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#customizing_video\">Customizing a Theme: Video Series</a></li>\n\t\t<li><a href=\"#customizing_config-json\">Configuring config.json Keys</a></li>\n    <li><a href=\"#customizing_basic-changes\">Making Basic Design/Layout Changes</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Customizing a Theme: Video Series


                        If you prefer to consume by watching video tutorials,
                        this video series will quickly get you started in
                        editing and customizing your Stencil theme.


                        1. [Customizing a Theme (Part 1) - Config.json and
                        Templates
                        Directory](https://www.youtube.com/watch?v=HORseXHq-nI&index=6&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0)

                        2. [Customizing a Theme (Part 2) - Lang and Assets
                        Directories](https://www.youtube.com/watch?v=OUg8ksWQGA0&index=7&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0)

                        3. [Customizing a Theme (Part 3) - Custom Pages, Fonts,
                        and
                        Icons](https://www.youtube.com/watch?v=ZwrVN5QrEZY&index=8&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0)


                        Continue reading if you would like information to
                        supplement the videos, or if you would get started
                        customizing your theme by reading and following along.
                      header:
                        anchor: customizing_video
                    - type: text
                      data: "## Configuring config.json Keys\n\n**Note:** these instructions will refer to the top-level theme directory as _cornerstone_.\n\nThe first thing you must do when beginning theme developement is configure certain values in the [cornerstone/config.json file](https://github.com/bigcommerce/cornerstone/blob/master/config.json). For example, here are the first few key/value sets in Cornerstone's config.json:\n\n```\n{\n\"name\": \"Cornerstone\",\n\"version\": \"1.0.0\",\n\"meta\": {\n  \"price\": 0,\n   \"documentation_url\": \t\t\n   \"https://support.bigcommerce.com/articles/Public/Cornerstone-\n   \tTheme-Manual\",\n  ...\n  }\n}\n```\n\nFor further details about `config.json` settings and a breakdown of each key/value set, see the in-depth [config.json metadata article](/stencil-docs/stencil-theme-editor/config-json-metadata). \n\nThe next code block shows how you might change these values to reflect your own theme’s name, version number, price on Theme Marketplace, and documentation URL:\n\n```\n{\n\"name\": \"MyTheme\",\n\"version\": \"1.1.2\",\n\"meta\": {\n  \"price\": 10000,\n  \"documentation_url\": \"https://www.mywebsite.com/theme-docs/my-theme.html\",\n  ...\n  }\n}\n```"
                      header:
                        anchor: customizing_config-json
                    - type: text
                      data: >-
                        ## Making Basic Design & Layout Changes


                        ### Changing the Footer’s Background Color (config.json)


                        In a browser, [load the local
                        version](/stencil-docs/getting-started/launching-stencil/running-stencil-locally)
                        of your storefront (by default,
                        [http://localhost:3000](http://localhost:3000). Note the
                        page footer’s appearance.


                        Next, open your `<theme-name>/config.json` in a text
                        editor. Change the page footer’s default background
                        color to red, by changing the value `"585858"` to
                        `"#a96e6e"` as indicated below:

                        ```

                        {
                         "settings": {
                          "footer-backgroundColor": "#a96e6e",
                          }
                        }

                        ```


                        This new value will propagate through the theme’s CSS
                        files and will globally change your footer. Refresh your
                        store’s home page in your browser to verify the change.


                        ### Changing the Product Image Size (config.json and
                        Handlebars)


                        In the `<theme-name>/config.json` file’s `"settings"`
                        section, you can define theme-wide image sizes for
                        rendering dynamic content. The excerpt below shows this
                        section’s predefined keys and values (dimensions in
                        pixels) for product thumbnails, galleries, and other
                        standard sizes.


                        ```

                        {
                          "settings": {
                             //...
                            "logo_size": "250x100",
                            "brand_size": "190x250",
                            "gallery_size": "300x300",
                            "productgallery_size": "500x659",
                            "product_size": "500x659",
                            "productthumb_size": "100x100",
                            "thumb_size": "100x100",
                            "zoom_size": "1280x1280",
                            "blog_size": "190x250",
                            // ...
                          },
                        }

                        ```


                        For definitions of each key’s usage, please see the
                        `config.json` reference. You can also create theme-wide
                        custom sizes by defining new key/value pair properties
                        in the `config.json` file.


                        Below is an example of code that calls one of the above
                        variables, in
                        Cornerstone's,`<theme-name>/templates/components/products/card.html`
                        file. (This file defines the display of products’ panels
                        or "cards" on multiple storefront pages.): 



                        ```<img class="card-image" src="{{getImage image
                        'productgallery_size' (cdn
                        theme_settings.default_image_product)}}"
                        alt="{{image.alt}}">

                        ```


                        Note the `{{getImage image 'productgallery_size'}}`
                        statement, a Handlebars reference to the standard
                        `productgallery_size` size defined in config.json.


                        Further examples will guide you in customizing your
                        storefront using the Handlebars templating language. 

                        For now, open `config.json` and try redefining some of
                        the default size values shown above. Then, refresh your
                        storefront’s home page (or other pages or modals) in
                        your browser, and note how the display of product images
                        changes to match your new global size values.


                        ### Redesigning Page Elements (config.json and
                        Handlebars)


                        The following example demonstrates how to redesign a
                        storefront page’s layout by editing Handlebars
                        statements in the page’s HTML. The goal here is simply
                        to move the Product landing page’s "Customers Also
                        Viewed" panel above that page’s "Product Reviews" panel.


                        With your storefront’s local version loaded in a
                        browser, click through to any product, and note the
                        relative positions of the "Product Reviews" and
                        "Customers Also Viewed" panels.


                        Next, open your working theme’s
                        `<theme-name>/templates/components/products/tabs.html
                        file`. As indicated below, delete or comment out the
                        `similar_by_views` components that are shown below:


                        ```

                        // delete the following component:
                          {{#if product.similar_by_views}}
                              <li class="tab" role="presentational">
                                  <a class="tab-title" href="#tab-similar" role="tab" tabindex="0" aria-selected="false" controls="tab-similar">{{lang 'products.similar_by_views'}}</a>
                              </li>
                          {{/if}}
                        </ul>



                        // delete the following component:


                        {{#if product.similar_by_views}}
                          <div role="tabpanel" aria-hidden="true" class="tab-content has-jsContent" id="tab-similar">
                              {{> components/products/carousel products=product.similar_by_views columns=6}}
                          </div>
                        {{/if}}

                        </div>

                        ```


                        Now open your `/templates/pages/product.html` file. As
                        indicated below (in bold), add the `similar_by_views`
                        component with a reusable carousel wrapper:


                        ```

                        {{#if product.videos.list.length}}
                          {{> components/products/videos product.videos}}
                        {{/if}}


                        {{#if product.similar_by_views}}
                           {{> components/products/carousel products=product.similar_by_views columns=6}}
                        {{/if}}


                        {{#if settings.show_product_reviews}}
                          {{> components/products/reviews reviews=product.reviews product=product urls=urls}}
                        {{/if}}

                        ```


                        In your browser, refresh the product page, and check the
                        new arrangement of these components.
                      header:
                        anchor: customizing_basic-changes
              - title: config.json Resource Interactions
                route:
                  path: /config-json-resource-interactions
                data:
                  blocks:
                    - type: html
                      data: <h1><code>config.json</code> Interactions</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#config_new\">New Products Example</a></li>\n    <li><a href=\"#config_changing\">Changing Page Layout using Local Front Matter</a></li>\n    <li><a href=\"#config_retrieving\">Retrieving Specific config. Values through Sass</a></li>\n    <li><a href=\"#config_adding\">Adding/Removing Components</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >
                        To customize your theme’s appearance at a global level,
                        the values that you define in the 

                        `<theme-name>/config.json` file interact with local
                        resources. Your config.json definitions set global
                        defaults for templates, front-matter attributes, and
                        Handlebars resources throughout your theme. You can also
                        define custom variables in config.json, named according
                        to your needs.


                        ## New Products Example


                        To see how interactions with `config.json` values work,
                        first note the default values in `config.json` for the
                        `homepage_new_products_count` and
                        `product_list_display_mode` keys:


                        ```

                        {

                        "settings": {
                          "homepage_new_products_count": 12,
                          "product_list_display_mode": "grid",
                          }
                        }

                        ```


                        Next, open your `<theme-name>templates/pages/home.html`
                        file. Highlighted in bold below is a statement that uses
                        the theme-wide settings above to customize an API
                        request to the server.


                        (Note the reference to the `homepage_new_products_count`
                        key in the file’s front matter, between the two "---"
                        delimiters. If your current theme’s `home.html` front
                        matter omits this `products:new:limit` definition, paste
                        it in for this demonstration.)


                        ```

                        ---

                        products:
                          new:
                            limit: {{theme_settings.homepage_new_products_count}}
                          featured:
                            limit: {{theme_settings.homepage_featured_products_count}}
                          top_sellers:
                            limit: {{theme_settings.homepage_top_products_count}}
                        carousel: {{theme_settings.homepage_show_carousel}}

                        blog:
                            recent_posts:
                                limit: {{theme_settings.homepage_blog_posts_count}}
                        ---

                        {{#partial "hero"}}


                        <!-- [...] -->


                        {{/partial}}

                        {{> layout/base}}

                        ```


                        If you load your storefront’s home page (by default,
                        [http://localhost:3000](http://localhost:3000), you
                        should see a "New Products" section that displays 12
                        products in a grid.
                      header:
                        anchor: config_new
                    - type: text
                      data: >
                        ## Changing Page Layout Using Local Front Matter


                        Look again at your
                        `<theme-name>templates/pages/home.html` file’s front
                        matter. As in the New Products example above, note how
                        the presence and number of featured products correlates
                        to your theme’s `config.json` setting:


                        ```

                        ---

                        [...]

                        products:
                          featured:
                              limit: {{theme_settings.homepage_featured_products_count}}
                        [...]

                        ---

                        ```


                        Next, try changing the `limit:
                        {{theme_settings.homepage_featured_products_count}}`
                        statement in the `home.html` file to a hard-coded limit:
                        2, as indicated below in bold:


                        ```

                        ---

                        products:
                          // [...]
                          featured:
                              limit: 2
                          // [...]  
                        ---


                        <!-- [...] -->


                        {{#partial "page"}}


                        <!-- [...] -->


                        <div class="main full">
                          {{#if products.featured}}
                              {{> components/products/featured products=products.featured columns=2}}
                          {{/if}}
                        </div>

                        {{/partial}}

                        {{> layout/base}}

                        ```


                        If you now reload your storefront’s home page in your
                        browser, you should see the number of displayed
                        "Featured Products" change from its default number (as
                        specified in `config.json`) to two.
                      header:
                        anchor: config_changing
                    - type: text
                      data: >
                        ## Retrieving Specific config.json Values through Sass


                        In `config.json`, global variables bring dynamic values
                        into the framework. Sass imports these global variables’
                        values to gracefully handle data like theme-wide colors’
                        hexadecimal values, and to make the data available to
                        Theme Editor. Here is one short snippet from
                        `config.json`:


                        ```

                        {

                        // [...]

                        "color-highlight": "#00abc9",

                        "color-highlightDark": "#f2f2f2",

                        "color-highlightDarker": "#dfdfdf",

                        // [...]

                        }

                        ```


                        Here are the corresponding references in the default
                        Stencil theme’s
                        `<theme-name>/assets/scss/settings/global/color/_color.scss`
                        file:


                        ```

                        // [...]

                        $color-highlight:       stencilColor("color-highlight");

                        $color-highlightDarker:
                        stencilColor("color-highlightDarker");

                        $color-highlightDark:  
                        stencilColor("color-highlightDark");

                        // [...]

                        ```


                        In `config.json`, try redefining one or more color
                        variables to hex values of your choice. Then re-render
                        your theme’s home page to see the effects.
                      header:
                        anchor: config_retrieving
                    - type: text
                      data: >
                        ## Adding/Removing Components


                        The storefront properties that Stencil abstracts as
                        Handlebars resources are completely portable between
                        HTML files. For an example of how this works, first open
                        any storefront page in a browser. In the page’s footer,
                        note the appearance of product Categories.


                        Next, open your
                        `<theme-name>/templates/components/common/footer.html`
                        file in a text editor. As indicated below, cut (or copy
                        and comment out) the code section shown below
                        (characterized by the strikethrough), and keep it on
                        your Clipboard:


                        ```

                        <footer class="footer" role="contentinfo">
                          <div class="container">
                              <section class="footer-info">
                                  <!-- [...] -->
                        <article class="footer-info-col footer-info-col--small">
                          <h5 class="footer-info-heading">{{lang 'footer.categories'}}</h5>
                          <ul class="footer-info-list">
                              {{#each categories}}
                              <li>
                                  <a href="{{url}}">{{name}}</a>
                              </li>
                              {{/each}}
                          </ul>
                        </article>

                        ```


                        If you now refresh the storefront page in your browser,
                        the Categories list should disappear from the footer.


                        Next, create a new
                        `<theme-name>/templates/components/footer/
                        `subdirectory. Paste the code block from the previous
                        cut/copy into a new file named
                        `<theme-name>/templates/components/footer/categories.html`,
                        and save it:


                        ```

                        <article class="footer-info-col footer-info-col--small">
                          <h5 class="footer-info-heading">{{lang 'footer.categories'}}</h5>
                          <ul class="footer-info-list">
                              {{#each categories}}
                              <li>
                                  <a href="{{url}}">{{name}}</a>
                              </li>
                              {{/each}}
                          </ul>
                        </article>

                        ```


                        Next, back in
                        `/templates/components/common/footer.html`, add a
                        reference to your new path/file, as indicated below in
                        comments:


                        ```

                        <footer class="footer" role="contentinfo">
                          <div class="container">
                              <section class="footer-info">
                                  <!-- [...] -->
                                  {{> components/footer/categories}}
                                  <!-- [...] -->
                              </section>
                          </div>
                        </footer>

                        ```


                        If you now refresh storefront pages in your browser, the
                        Categories list should reappear in the footer. The
                        component returns even though you have moved its data
                        resources to an arbitrary new location, and referenced
                        them indirectly.
                      header:
                        anchor: config_adding
              - title: Customizing Javascript
                route:
                  path: /customizing-javascript
                data:
                  blocks:
                    - type: html
                      data: <h1>Customizing Javascript</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#customizing-javascript_customizing\">Customizing Javascript for Individual Pages</a></li>\n    \t<li><a href=\"#customizing-javascript_bringing-handlebars\">Bringing Handlebars Context Values into JavaScript</a></li>\n\t\t<li><a href=\"#customizing-javascript_installing-various\">Installing Various JavaScript Libraries</a></li>\n    <li><a href=\"#customizing-example\">Example Links</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Customizing JavaScript for Individual Pages


                        In this article, we are going to add a very simple
                        Javascript customization into the [Cornerstone
                        theme](https://github.com/bigcommerce/cornerstone).
                      header:
                        anchor: customizing-javascript_customizing
                    - type: callout
                      data:
                        type: warning
                        title: >-
                          Compatible with Cornerstone versions earlier than
                          2.x.x
                        body: >-
                          This example will align only with Cornerstone versions
                          earlier than 2.x.x. This is due to changes that
                          occurred in [PR
                          #1229](https://github.com/bigcommerce/cornerstone/pull/1229),
                          which merged the `before`, `loaded`, and `after`
                          functions to `onReady`. See [commit
                          31bdd](https://github.com/bigcommerce/cornerstone/commit/31bdddbf64293d85192cae00e966d531f527b150#diff-eaddb008b4dd357a417047430ec8ea40)
                          for more details.
                    - type: text
                      data: >-
                        In a text editor, open the
                        `cornerstone/assets/js/theme/product.js` file. At the
                        top of the Product class, insert the "Hello World"
                        statement shown in bold below:
                    - type: code
                      data: |-
                        export default class Product extends PageManager {
                          constructor() {
                              super();
                          }

                          before(next) {
                              next();
                          }

                          loaded(next) {
                              console.log("Hello World");
                            // Init collapsible
                            collapsible();
                            [...]
                        }
                      header:
                        subtitle: <theme-name>/assets/js/theme/product.js
                        title: Hello World Statement
                      config:
                        mode: js
                    - type: text
                      data: >-
                        In your browser, refresh any product-details pop-up or
                        page to see your new `"Hello World"` message.
                    - type: text
                      data: >-
                        ## Bringing Handlebars Context Values into JavaScript


                        Within Stencil pages, you can inject any variables from
                        the Handlebars context into your client-side JavaScript.
                        You do so by calling the Stencil custom Handlebars
                        helper named `inject`, shown below:


                        `{{inject 'productThumbSize'
                        theme_settings.productthumb_size}}`


                        You could inject the above statement into a page
                        template rendered with `page_type = "Product"` (for
                        example: `<theme-name>/templates/pages/product.html`).
                        Stencil’s `PageManager` class will be provided this
                        context:
                      header:
                        anchor: customizing-javascript_bringing-handlebars
                    - type: code
                      data: |-
                        export default class Product extends PageManager {
                          constructor() {
                              super();
                          }

                          before(next) {
                              next();
                          }

                          loaded(next) {
                              console.log("Hello World");
                              console.log(this.context.productThumbSize);
                          }
                          
                        }
                      header:
                        title: PageManager class
                        subtitle: <theme-name>/templates/pages/product.html
                      config:
                        mode: js
                    - type: text
                      data: >-
                        Note that the
                        `console.log(this.context.themeImageSizes)`; statement
                        will report your configured image size, following the
                        `"Hello World"` message that you previously defined in
                        the [Customizing JavaScript for Individual
                        Pages](#customizing-javascript_customizing) above.
                    - type: code
                      data: |-
                        export default class Product extends PageManager {
                          constructor() {
                              super();
                          }

                          before(next) {
                              next();
                          }

                          loaded(next) {
                              console.log("Hello World");
                              console.log(this.context.productThumbSize);
                          }

                        }
                      config:
                        mode: js
                    - type: text
                      data: >-
                        ## Installing Various JavaScript Libraries


                        Once you have installed the default Stencil theme, you
                        can add custom JavaScript libraries. To see how this
                        works, find your favorite library on GitHub – for
                        example: https://github.com/jquery/jquery.


                        To install this particular library for Stencil themes,
                        you would entering the following on the command line:


                        `npm install jquery`


                        Next, you would open
                        `<theme-name>/assets/js/theme/product.js`, and insert
                        the statements excerpted below:
                      header:
                        anchor: customizing-javascript_installing-various
                    - type: code
                      data: |-
                        import $ from 'jquery';

                        $('.myElement').click(() => {
                            alert("You clicked myElement");
                        });
                      header:
                        subtitle: <theme-name>/assets/js/theme/product.js
                      config:
                        mode: js
                    - type: text
                      data: >-
                        As always, for specifics, refer to your chosen library’s
                        documentation.
                    - type: text
                      data: >-
                        ## Example Links 


                        For more-extended examples of adding custom JavaScript
                        to a theme, see the [Custom Javascript
                        Implementations](/stencil-docs/custom-javascript-implementations)
                        section.
                      header:
                        anchor: customizing-example
              - title: Rendering HTML with Ajax
                route:
                  path: /rendering-html-with-ajax
                data:
                  blocks:
                    - type: html
                      data: <h1>Rendering HTML with Ajax</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#rendering_rendering-html\">Rendering HTML with Ajax</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: "## Rendering HTML with Ajax\n\nStencil allows you to render dynamic components on the fly. For example, note this default code in `<theme-name>/templates/components/products/quick-view.html` (note also this file name, which Handlebars will reference later in this example):\n\n```\n<div class=\"modal-body quickView\">\n  <a href=\"#\" class=\"modal-close\" aria-label=\"Close\">&#215;</span></a>\n  {{> components/products/product-view}}\n</div>\n```\n\nTo render a different template, you would instead reference that template’s file name. For example, assume that you want to substitute a custom template that you’ve named: `<theme-name>/templates/components/products/quicker-view.html`.\n\nThis next code block is from the Stencil default theme’s `/assets/js/theme/global/quick-view.js` file. Note the `quicker-view.html` statements brought in to reference the new file name:\n\n```\nlet $modal = $('#modal'),\n  $modalContent = $('.modal-content', $modal),\n  $modalOverlay = $('.loadingOverlay', $modal),\n  modalModifierClasses = 'modal--large';\n\n$('body').on('click', '.quickview', (event) => {\n  let productId = $(event.currentTarget).data('product-id');\n\n  event.preventDefault();\n\n  // clear the modal\n  $modalContent.html('');\n  $modalOverlay.show();\n\n  // open modal\n  $modal.foundation('reveal', 'open');\n\n\t//quicker-view.html statement, replacing the standard template's quick-view.html template\n  utils.api.product.getById(productId, {template: 'products/quicker-view'}, function done(err, response) {\n      $modalOverlay.hide();\n      $modalContent.html(response);\n\n      return new ProductDetails($modalContent, context);\n  });\n});\nlet $modal = $('#modal'),\n  $modalContent = $('.modal-content', $modal),\n  $modalOverlay = $('.loadingOverlay', $modal),\n  modalModifierClasses = 'modal--large';\n\n$('body').on('click', '.quickview', (event) => {\n  let productId = $(event.currentTarget).data('product-id');\n\n  event.preventDefault();\n\n  // clear the modal\n  $modalContent.html('');\n  $modalOverlay.show();\n\n  // open modal\n  $modal.foundation('reveal', 'open');\n\n\t// \n  utils.api.product.getById(productId, {template: 'products/quicker-view'}, function done(err, response) {\n      $modalOverlay.hide();\n      $modalContent.html(response);\n\n      return new ProductDetails($modalContent, context);\n  });\n});\n```"
                      header:
                        anchor: rendering_rendering-html
              - title: Testing and Debugging Your Theme
                route:
                  path: /testing-and-debugging-your-theme
                data:
                  blocks:
                    - type: html
                      data: <h1>Testing and Debugging Your Theme</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#testing_testing-and-debugging\">Testing and Debugging Your Theme</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >
                        ## Testing and Debugging Your Theme


                        The Stencil framework provides built-in debugging tools
                        to aid in your custom front-end development.

                        When you want to see what data is available on the page
                        you are working on, you can simply add the `debug` query
                        string to your store’s localhost URL. Here is an
                        example:


                        `http://localhost:3000/product/this-is-a-sample-product?debug=context

                        `


                        This will return a list of all the objects available on
                        the page, in JSON syntax.


                        If you want to view the available JSON objects and
                        rendered page at the same time, simply change the
                        `debug` value to `bar`. Here is an example:


                        `http://localhost:3000/product/this-is-a-sample-product?debug=bar`


                        ### Using Browsersync to Render the Store on
                        Desktop/Tablet/Mobile for Testing


                        The Stencil framework uses Browsersync to help you
                        rapidly test your storefront themes across devices of
                        different viewports. After you launch Stencil with
                        stencil start, your console window will display several
                        IP addresses below the BigCommerce "B".


                        ```
                                                             `+h
                                                           `+ddd
                                                         .oddddd
                                                       .oddddddd
                                                     -sddddddddd
                                                  `-sddddddddddd
                                                 -shdddddddddddd
                                                 ...-:+ydddddddd
                                            `......`   `+ddddddd
                                            -ddddddh-    ddddddd
                                        `   .yyyyyyo.  `+ddddddd
                                      .o/    `````    :ydddddddd
                                    -ohd+   `//////:` `.sddddddd
                                  -sdddd+   -ddddddds   `hdddddd
                                :sdddddd+   .sssssso-   `ddddddd
                              :ydddddddd+              -yddddddd
                            /yddddddddddy+++++++++++oshddddddddd
                         `/hdddddddddddddddddddddddddddddddddddd
                        /hdddddddddddddddddddddddddddddddddddddd

                        _________________________


                        BigCommerce Stencil

                        _________________________


                        [BS] Proxying: http://localhost:4001

                        [BS] Access URLs:

                        ------------------------------------
                              Local: http://localhost:4000
                           External: http://172.24.4.28:4000
                        ------------------------------------
                                 UI: http://localhost:3001
                        UI External: http://172.24.4.28:3001

                        ------------------------------------

                        [BS] Watching files...

                        ```


                        Note the `External` IP address. You can copy/paste this
                        URL to access the Browsersync server from multiple
                        devices. Then, watch as scrolling and other actions sync
                        up across devices. (Note: Firewalls and other security
                        measures might interfere with this feature.)


                        To maximize the adoption of your themes, we recommend
                        that you use such testing to design responsive themes
                        that display and function well across multiple viewport
                        sizes.
                      header:
                        anchor: testing_testing-and-debugging
              - title: Managing Theme Variations
                route:
                  path: /manage-theme-variations
                data:
                  blocks:
                    - type: html
                      data: <h1>Managing Theme Variations</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#managing_creating\">Creating and Naming a New Theme Variation </a></li>\n\t\t<li><a href=\"#managing_changing\">Changing a Theme Variation’s Font Family (config.json)</a></li>\n    <li><a href=\"#managing_preparing\">Preparing a Variation's Thumbnails</a></li>\n    <li><a href=\"#managing_using-cli\">Using Stencil CLI to Change Variations</a></li>\n    <li><a href=\"#managing_bundling-and-uploading\">Bundling and Uploading Your Theme</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Creating and Naming a New Theme Variation  (Cascading
                        Settings from `config.json`)


                        You define variations in your `<theme-name>/config.json`
                        file. From the default Stencil theme’s config.json, here
                        is the Light variation’s definition, followed by the
                        head of the `Bold` variation’s definition:


                        ```

                        "variations": [

                        {
                          "name": "Light",
                          "id": "light",
                          "meta": {
                            "desktop_screenshot": "desktop_screenshot.jpg",
                            "mobile_screenshot": "mobile_screenshot.png",
                            "description": "This is the light style of the Stencil Theme",
                            "demo_url": "https://stencil-light.mybigcommerce.com",
                            "optimized_for": ["fashion", "image_heavy", "etc"],
                            "industries": []
                          },
                        {
                          "name": "Bold",
                          "id": "bold",
                        ...

                        ```


                        Try inserting a new custom variation of your own, below
                        the `"Light"` block shown above. Your variation’s
                        definition might look something like this:


                        ```

                        "variations": [

                        ...

                        {
                          "name": "MyCustomVariation",
                          "id": "my_custom_variation",
                          "meta": {
                            "desktop_screenshot": "my_custom_desktop_screenshot.jpg",
                            "mobile_screenshot": "my_custom_mobile_screenshot.png",
                            "description": "This is a really cool custom style of the Stencil Theme",
                            "demo_url": "https://stencil-custom.mybigcommerce.com",
                            "optimized_for": ["fashion", "image_heavy", "etc"],
                            "industries": []
                          },
                        {
                          "name": "Bold",
                          "id": "bold",
                        ...

                        "variations": [

                        ...

                        {
                          "name": "MyCustomVariation",
                          "id": "my_custom_variation",
                          "meta": {
                            "desktop_screenshot": "my_custom_desktop_screenshot.jpg",
                            "mobile_screenshot": "my_custom_mobile_screenshot.png",
                            "description": "This is a really cool custom style of the Stencil Theme",
                            "demo_url": "https://stencil-custom.mybigcommerce.com",
                            "optimized_for": ["fashion", "image_heavy", "etc"],
                            "industries": []
                          },
                        {
                          "name": "Bold",
                          "id": "bold",
                        ...

                        ```
                      header:
                        anchor: managing_creating
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Changing a Theme Variation’s Font Family
                        (config.json)


                        To learn more about defining variations, see the
                        `config.json` reference for details about each key’s
                        usage and allowable values. 

                        In particular, note the option to configure settings and
                        variables that are scoped to each variation. For
                        example, you could insert the
                        `"settings":...”body-font-family”` block shown below, to
                        set body text throughout this variation (only) to a
                        specific typeface/family:


                        ```

                        {
                          "name": "MyCustomVariation",
                          "id": "my_custom_variation",
                          "settings": {
                            ...
                            "body-font-family": "MyCoolFont, AnotherFont, sans-serif",
                            ...
                          }
                        }

                        ```
                      header:
                        anchor: managing_changing
                    - type: text
                      data: >
                        ## Preparing a Variation's Thumbnails


                        For details on preparing screenshots that enable
                        merchants to preview each variation – and to preview
                        your theme as a whole – in the BigCommerce control panel
                        and Theme Marketplace, see [Preparing Thumbnail
                        Images](/stencil-docs/stencil-theme-editor/preparing-thumbnail-images).
                      header:
                        anchor: managing_preparing
                    - type: text
                      data: >-
                        ## Using Stencil CLI to Change Variations


                        To locally test/debug a specific variation of your
                        theme, launch it by invoking the Stencil CLI’s
                        (command-line interface’s) `stencil start -v` switch.
                        Depending on how you’ve named your variation in
                        `config.json`, you would type something like this on the
                        command line:


                        `stencil start -v MyCustomVariation`
                      header:
                        anchor: managing_using-cli
                    - type: text
                      data: >
                        ## Bundling and Uploading Your Theme


                        If at this stage you are ready to bundle and upload your
                        theme, refer to [Bundling and
                        Uploading](/stencil-docs/prepare-and-upload-a-theme/bundling-and-uploading)
                        a Theme.
                      header:
                        anchor: managing_bundling-and-uploading
        - title: Store Design
          route:
            path: /store-design
          data:
            children:
              - title: Store Design Overview
                route:
                  path: /store-design-overview
                data:
                  blocks:
                    - type: html
                      data: <h1>Store Design Overview</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#stencil_stencil-theme-editor-overview\">Store Design</a></li>\n\t</ul>\n</div>"
                    - type: callout
                      data:
                        type: info
                        body: >
                          Stencil themes have now introduced the new rapid
                          customization tool and experience called **Store
                          Design** (previously Theme Editor). For more
                          information on using Store Design from a merchant
                          perspective, see our support [Store Design
                          article](https://forum.bigcommerce.com/s/article/Store-Design)
                          for more information.
                        title: 'From Theme Editor to Store Design '
                    - type: text
                      data: >-
                        ## Store Design Overview

                        [Store
                        Design](https://support.bigcommerce.com/s/article/Store-Design)
                        is a Graphical User Interface (GUI) that allows
                        BigCommerce merchants to rapidly modify and customize a
                        storefront's look and feel without manually entering any
                        code. A merchant using the Store Design can customize a
                        storefront theme by modifying characteristics from a
                        variety of menu options such as Styles, Colors,
                        Typography, Buttons, and more. Furthermore, Store Design
                        is a useful rapid-customization tool for developers. 


                        As a theme developer, alongside theaibility to use store
                        design, you also have the capability _configure your own
                        settings_ for Store Design (if you so choose). Your
                        configuration will give merchants who download your
                        theme the ability to use Store Design with your theme in
                        the ways you provide access to. Like previously
                        mentioned, Store Deisgn by default allows merchants to
                        customize everything from Styles, Colors, Typography,
                        Buttons, and more. As a theme developer, you can choose
                        and configure what features can be modified via the
                        Store Design for the theme that you develop.


                        The remainder of this section guides you, as a
                        developer, through configuring your own theme options.
                      header:
                        anchor: stencil_stencil-theme-editor-overview
                    - type: callout
                      data:
                        type: error
                        body: >-
                          Open only one instance of Store Design at a time
                          against each storefront. There is currently no
                          synchronization mechanism for configuration changes
                          made by multiple Store Design instances.
                        title: ' Single Instance per Storefront'
              - title: Configuring Store Design
                route:
                  path: /configuring-store-design
                data:
                  blocks:
                    - type: html
                      data: <h1>Configuring Store Design</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#configuring_configuration-files\">Configuration Files</a></li>\n    <li><a href=\"#configuring_managing-keys\">Managing Keys between Versions</a></li>\n    <li><a href=\"#configuring_persistent-settings\">Persistent Settings Storage</a></li>\n    <li><a href=\"#configuring_theme-upgrades\">Theme Upgrades and Settings</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Configuration Files


                        Each theme contains two related JSON files of key-value
                        pairs: <span class="fn">config.json</span> and <span
                        class="fn">schema.json.</span> These files' keys provide
                        the following features:


                        Keys that you include in <span
                        class="fn">schema.json</span> – together with their
                        corresponding <span class="fn">config.json</span>
                        default values – define the settings that merchants can
                        customize through Store Design's graphical interface.

                        Other <span class="fn">config.json</span> keys contain
                        metadata about the theme, such as the theme's name,
                        version, and resource controls.

                        Keys located in <span class="fn">config.json</span>'s
                        `variations` object define variations of the theme. For
                        example, a theme might have a "Light" variation and a
                        "Bold" variation, each with different typography and
                        colors. Each theme can include as many variations as you
                        like.

                        Keys located under both files' `settings` objects define
                        the theme's look, feel, and functionality.


                        For documentation on the principal keys included in
                        Stencil's reference Cornerstone theme, see this
                        section's [config.json
                        Metadata](/stencil-docs/stencil-theme-editor/config-json-metadata)
                        and [schema.json
                        Metadata](/stencil-docs/stencil-theme-editor/schema-json-metadata)
                        entries. For an introduction to the graphical editor,
                        see

                        [Store Design
                        Overview](/stencil-docs/stencil-theme-editor/stencil-theme-editor-overview).
                      header:
                        anchor: configuring_configuration-files
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Managing Keys between Versions


                        To make sure revisions to your theme are
                        backward-compatibile, we generally recommend that you
                        manage keys in both your <span
                        class="fn">config.json</span> and <span
                        class="fn">schema.json</span> files in an additive way.
                        Specific recommendations:


                        Adding new keys is generally fine. (However, each key in
                        <span class="fn">schema.json</span> must have a matching
                        default in <span class="fn">config.json</span>.)


                        * Use caution in deleting any key. Doing so can break
                        your new theme version's backward compatibility.

                        * We do not recommend renaming keys. Instead, we
                        recommend introducing a new key, while maintaining the
                        old key until it is no longer in use by anyone using an
                        older version of your theme.

                        * Each object within your <span
                        class="fn">config.json</span> › `variations` object
                        defines one theme variation. If you are adapting an
                        existing theme and consciously want to remove one or
                        more variations, you can do so by removing the
                        corresponding key(s).
                      header:
                        anchor: configuring_managing-keys
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Persistent Settings Storage


                        When store administrators use Store Design to customize
                        your theme for their store, the store's resulting
                        configuration settings are saved to a separate
                        configuration service at BigCommerce.
                      header:
                        anchor: configuring_persistent-settings
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Theme Upgrades and Settings


                        When a merchant upgrades your theme to a newer version,
                        all key-value pairs that were saved to the BigCommerce
                        configuration service are carried forward. For example,
                        assume this customization/upgrade scenario:


                        You release your Star Glow theme, version 1. This
                        theme's <span class="fn">config.json</span> includes a
                        key named `logo_size`, establishing a default value of
                        100x250. The combination of the key and the value
                        compose a `logo_size` setting.

                        The merchant uses Store Design to change the `logo_size`
                        setting to 175x275. This customized setting is stored in
                        the BigCommerce configuration service.

                        You release Star Glow, version 1.1. In this theme
                        revision, you have changed the `logo_size` to 300x300.

                        When the merchant applies Star Glow version 1.1 to their
                        store, their custom `logo_size` setting of 175x275
                        remains in effect.

                        If you the merchant creates a second store and applies
                        Star Glow version 1.1 to it, that store has no custom
                        `logo_size` setting – so it will default to the new
                        theme version's 300x300 value.
                      header:
                        anchor: configuring_theme-upgrades
              - title: schema.json (Store Design Metadata)
                route:
                  path: /schema-json-metadata
                data:
                  blocks:
                    - type: html
                      data: <h1>schema.json (Store Design Metadata)</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#schema_enabling\">Enabling Store Design</a></li>\n    <li><a href=\"#schema_best-practices\">Best Practices</a></li>\n    <li><a href=\"#schema_how-json\">How .json Entries Govern Store Design's UI</a></li>\n    <li><a href=\"#schema_theme-editor-data\">Store Designs Data Types</a></li>\n    <li><a href=\"#schema_data-structure\">Store Design Data Structure in schema.json</a></li>\n    <li><a href=\"#schema_ui-scope\">Arbitrary UI Scope and Sequence</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Enabling Store Design


                        To provide merchants with Store Design support for your
                        theme's settings, you must declare those settings in the
                        theme's <span class="fn">schema.json file</span>. You
                        must also include those settings in your theme's <span
                        class="fn">config.json</span> file, templates, and
                        Sass/CSS files. The basic division of labor is this:

                        * <span class="fn">schema.json</span> is an array of
                        objects, declaring which theme settings are editable in
                        Store Design. These objects also declare all possible
                        values to display in Store Design's GUI.

                        * <span class="fn">config.json</span> assigns (and
                        updates) a default value for each of the editable
                        settings.

                        * Each <span class="fn">schema.json</span> entry has an
                        id element that maps it to its corresponding config.json
                        entry. The id value identifies the relevant config.json
                        key name.

                        * For front-matter properties to be editable, your
                        theme's Handlebars template must call certain Handlebars
                        helpers to transform the config.json entries into
                        JavaScript values.

                        * For fonts to be editable, a Sass stylesheet must call
                        certain custom Sass functions to transform the <span
                        class="fn">config.json</span> font entries into CSS
                        values.

                        * For styles to be editable, a Sass stylesheet must call
                        certain custom Handlebars helpers to transform the <span
                        class="fn">config.json</span> entries into CSS values.


                        As users select options within the Store Design UI (and
                        save their selections), Stencil will automatically
                        rewrite <span class="fn">config.json</span> to record
                        new defaults for the theme.


                        ### File Management Requirements


                        See Stencil's default Cornerstone theme for examples
                        that fulfill all of the above requirements. However,
                        remember these hard requirements:


                        * For any theme setting (such as a Sass variable or a
                        front-matter value) to be merchant-customizable,

                        that setting – and its possible values – must be present
                        in <span class="fn">schema.json</span>. You must
                        manually provide these declarations, according to the
                        structure described here.


                        * Also, each key that you create in schema.json must
                        have a corresponding <span class="fn">config.json</span>
                        key whose name matches its id value. This <span
                        class="fn">config.json</span> key sets the default value
                        (even if that is simply an empty string). A <span
                        class="fn">schema.json</span> setting without an
                        `id`-matched <span class="fn">config.json</span> key
                        will not appear to users in the Store Design GUI.
                      header:
                        anchor: schema_enabling
                    - type: text
                      data: >+
                        ## Best Practices


                        Please follow these guidelines to head off errors upon
                        theme upload, and to avoid possible loss of
                        customizations made via the Store Design GUI at runtime:


                        * Single-Instance Restriction per Storefront: We
                        strongly recommend opening only one instance of Store
                        Design, at a time, against each storefront. This is
                        because there is currently no synchronization mechanism
                        to reconcile configuration changes made by multiple
                        Store Design instances. So <span
                        class="fn">schema.json</span> will record the last
                        changes made by any instance – but changes saved earlier
                        by other instances might be lost.


                        * Single-Storefront Restriction per Editor: In the
                        current release, users can have only one storefront at a
                        time open in Store Design. (A workaround is to open an
                        "Incognito"/private-browsing window on an additional
                        storefront, to bypass the cookie that imposes this
                        restriction.)


                        * File Name, Location, and Structure: Your theme's <span
                        class="fn">schema.json</span> file must be named
                        schema.json, must reside in the root of your
                        `<theme-name>` subdirectory (e.g.: <span
                        class="fp">/cornerstone/schema.json</span>), and must be
                        valid JSON.


                        * File Size: The maximum allowable size for a theme's
                        <span class="fn">schema.json</span> file is 64 KB.
                        Exceeding this limit will trigger an error upon
                        uploading the theme to BigCommerce. (Other than this
                        size constraint, there is no limit on the number of keys
                        and values that you can place in a theme's <span
                        class="fn">schema.json</span>.)

                      header:
                        anchor: schema_best-practices
                    - type: text
                      data: >-
                        ## How .json Entries Govern Store Design's UI


                        Your entries in the `schema.json` and `config.json`
                        files directly shape users' options in Store Design:

                        * Theme Variations always appear at the top of the Store
                        Design panel. These variations are defined only in <span
                        class="fn">config.json</span>, and their definition
                        order in that file governs their display order in Store
                        Design.

                        * Merchants must select one variation to edit, at a
                        time, in Store Design. The selections that they make in
                        the remainder of Store Design's UI will apply to only
                        that selected variation.

                        * Store Design's remaining sequence of top-level
                        (Section) headings corresponds directly to the sequence
                        of top-level (Section) objects that you declare in
                        `schema.json`


                        The options displayed within these expandable Section
                        headings correspond directly to the keys/values that you
                        nest within <span class="fn">schema.json</span>'s
                        corresponding Section objects.


                        In all, the structure that you give your theme's <span
                        class="fn">config.json</span> and <span
                        class="fn">schema.json</span> files directly governs the
                        UI that Store Design exposes to merchants. So these
                        files provide your UI design tools.
                      header:
                        anchor: schema_how-json
                    - type: text
                      data: >
                        ## Store Design Data Types


                        Store Design supports these data types:

                        * color

                        * font

                        * select [drop-down list]

                        * checkbox

                        * imageDimension

                        * text


                        Within <span class="fn">schema.json</span>, each
                        object's data type is declared in a statement like the
                        one highlighted here:
                      header:
                        anchor: schema_theme-editor-data
                    - type: code
                      data: |2-
                         {
                                "type": "color",
                                "label": "Text Color",
                                "id": "body-font-color"
                              },
                      config:
                        mode: json
                    - type: text
                      data: >-
                        ### Types versus "heading" Labels


                        Within <span class="fn">schema.json</span>, you will
                        also see `"type": "heading"` statements like this one –
                        highlighted earlier in the same object used for the
                        above example:
                    - type: code
                      data: |-
                        {
                            "name": "Colors",
                            "settings": [
                              {
                                "type": "heading",
                                "content": "General"
                              },
                              {
                                "type": "color",
                                "label": "Text Color",
                                "id": "body-font-color"
                              },
                            {...}
                             ]
                        }
                      header: {}
                      config:
                        mode: json
                    - type: text
                      data: >-
                        These `"type": "heading"` statements do not reference
                        data types. Rather, they declare display captions for
                        the Store Design UI's subcategories – the middle level
                        nested within the Section headings, but outside the
                        individual options from which merchants can select.
                        (Those inner options are designated by `"label":
                        <label-text>` statements.)
                    - type: text
                      data: >
                        ## Store Design Data Structure in <span
                        class="fn">schema.json</span> 


                        The <span class="fn">schema.json</span> nesting
                        structure that you just saw maps directly to the Store
                        Design UI displayed to merchants: Below the `variations`
                        section (whose data are imported from <span
                        class="fn">config.json</span>), the order and nesting of
                        options in Store Design's UI directly matches the order
                        and nesting of your <span class="fn">schema.json</span>
                        entries.
                      header:
                        anchor: schema_data-structure
                    - type: text
                      data: >-
                        ## Arbitrary UI Scope and Sequence


                        You are free to decide which properties of your theme to
                        make editable in Store Design, and in which order to
                        display them. Store Design can expose any set of
                        properties as long as your <span
                        class="fn">schema.json</span> declares them using the
                        data types that Store Design supports.
                      header:
                        anchor: schema_ui-scope
              - title: config.json Metadata
                route:
                  path: /config-json-metadata
                data:
                  blocks:
                    - type: html
                      data: <h1><code>config.json</code> Metadata</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#config_configjson-overview\">config.json Overview</a></li>\n    <li><a href=\"#config_keys-and-example\">Keys and Example Values</a></li>\n    <li><a href=\"#config_requirements-and-restrictions\">Requirements and Restrictions</a></li>\n    <li><a href=\"#config_video-demo\">Video Demo</a></li>\n\t</ul>\n</div>\n\n\n"
                    - type: text
                      data: >
                        ## `config.json` Overview


                        You configure the `/theme‑name/config.json` file to
                        properly manage each of your custom theme's front-end
                        aspects. This `config.json` file’s functions are to:


                        * Provide global context for Stencil’s CSS and
                        Handlebars resources.

                        * Provide values for the Store Design GUI to manage.

                        * Provide metadata for your theme’s listing in the Theme
                        Marketplace.

                        * Define variations included in your theme.
                      header:
                        anchor: config_configjson-overview
                    - type: text
                      data: '---'
                    - type: text
                      data: '## Keys and Example Values'
                      header:
                        anchor: onfig_keys-and-example
                    - type: jsonSchema
                      data:
                        type: object
                        minProperties: 0
                        properties:
                          name:
                            type: string
                            example: Starlight
                            description: The theme name
                          version:
                            type: string
                            example: '"2.6.0"'
                            description: The theme's version number
                          meta:
                            type: object
                            description: >-
                              BigCommerce will use this metadata to list themes
                              in Theme Marketplace
                            properties:
                              price:
                                type: integer
                                example: 15000
                                description: >-
                                  Price, in cents, to purchase this theme in
                                  Theme Marketplace.
                              documentation_url:
                                type: string
                                example: >-
                                  "https://support.bigcommerce.com/articles/Public/Cornerstone-Theme-Manual"
                                description: URL of the theme's developer documentation.
                              author_name:
                                type: string
                                example: 'eCommerce Themes, Inc.'
                                description: >-
                                  Name of the developer or partner creating the
                                  theme.
                              author_email:
                                type: string
                                description: >-
                                  Contact email address for the developer or
                                  partner creating the theme.
                                example: '"contact@thethemecollective.com"'
                              author_support_url:
                                type: string
                                example: '"support@thethemecollective.com"'
                                description: >-
                                  Support URL for the developer or partner
                                  creating the theme.
                              composed_image:
                                type: string
                                example: '"starlight_mosaic.png"'
                                description: >-
                                  File name for a composed/mosaic screenshot of
                                  all variations of the theme, to appear on the
                                  "My Themes" page of purchased themes. The
                                  file-name value is arbitrary, but it must
                                  match the name of a file located in the
                                  `theme‑name/meta/` subdirectory.


                                  The actual file’s resolution must be 600 x 760
                                  pixels (horizontal x vertical).
                              features:
                                type: array
                                example:
                                  - fully_responsive
                                  - mega_navigation
                                  - multi_tiered_sidebar_menu
                                  - masonry_design
                                  - frontpage_slideshow
                                  - quick_add_to_cart
                                  - switchable_product_view
                                  - product_comparison_table
                                  - complex_search_filtering
                                  - customizable_product_selector
                                  - cart_suggested_products
                                  - free_customer_support
                                  - free_theme_upgrades
                                  - high_res_product_images
                                  - product_filtering
                                  - advanced_quick_view
                                  - product_showcase
                                  - persistent_cart
                                  - one_page_check_out
                                  - customized_check_out
                                  - product_videos
                                description: >-
                                  This should be an array of exact feature names
                                  supported in the theme. The
                                  "Default/Examples"column lists the complete
                                  namespace. At least one of the values listed
                                  there must be present.

                                  These values are used as metadata for Theme
                                  Marketplace searches. 

                                  The `"customized_check_out"` value has a
                                  second function: It must be present if you
                                  want to enable [Optimized One-Page
                                  Checkout](https://support.bigcommerce.com/articles/Public/Optimized-Single-Page-Checkout)
                                  for your theme.</td>
                                items:
                                  type: string
                            required:
                              - documentation_url
                              - author_name
                              - author_email
                              - author_support_url
                          css_compiler:
                            type: string
                            example: '"scss"'
                            default: SCSS
                            description: Name of the theme's CSS preprocessor.
                          autoprefixer_cascade:
                            type: boolean
                            description: >-
                              Denotes whether to enable the Autoprefixer CSS
                              postprocessor in order to add vendor prefixes to
                              CSS rules.
                            example: true
                          autoprefixer_browsers:
                            type: array
                            example:
                              - '> 1%'
                              - last 2 versions
                              - Firefox ESR
                            description: >-
                              Which legacy browsers
                              [Autoprefixer](https://github.com/postcss/autoprefixer)
                              should support, specified in
                              [Browserslist](https://github.com/ai/browserslist)
                              query format.
                            items:
                              type: string
                          settings:
                            type: object
                            description: >-
                              Display-oriented key names and values that you can
                              arbitrarily set for your theme. Handlebars
                              accesses the combined settings as the context
                              variable `{{theme_settings}}`.
                                    
                              Theme variations also have their own `settings`
                              sections. Values that you set at the variation
                              level will override global values that you set
                              here (for corresponding key names and within the
                              scope of that variation).


                              If you want to create a custom variable to use in
                              Handlebars, either add it within this theme-level
                              `settings` section, or add it down in a
                              variation-level `settings` section.


                              You would access your arbitrarily named custom
                              variable in Handlebars as
                              `{{theme_settings.<variablename>}}`.


                              Here is an example of a custom variable in the
                              default theme’s `config.json`:


                              `"settings": { "homepage_featured_products_count":
                              6,

                              }`


                              Here is the corresponding front matter in
                              `home.html` that calls this variable. (Note that
                              this is pure YAML – the `{{...}}` used to
                              reference `config.json` variables within pages’
                              front matter **do not** constitute a Handlebars
                              statement)


                              ```

                              ---

                              products:
                                featured:
                                    limit: {{theme_settings.homepage_featured_products_count}}
                              ---

                              ```
                            properties:
                              homepage_new_products_count:
                                type: integer
                                example: 12
                                description: >-
                                  Number of products to include in home page’s
                                  New Products section.
                              homepage_featured_products_count:
                                type: integer
                                description: >-
                                  Number of products to include in home page’s
                                  Featured Products section.
                                example: 4
                              homepage_top_products_count:
                                type: integer
                                description: >-
                                  Number of products to include in home page’s
                                  Top Products section.
                                example: 4
                              homepage_show_carousel:
                                type: boolean
                                example: true
                                description: >-
                                  Defines whether to display an image carousel
                                  on the home page.
                              homepage_stretch_carousel_images:
                                type: boolean
                                example: false
                              homepage_new_products_column_count:
                                type: integer
                                example: 4
                                description: >-
                                  Number of New Products columns to include on
                                  the home-page.
                              homepage_featured_products_column_count:
                                type: integer
                                description: >-
                                  Number of Featured Products columns to include
                                  on the home-page.
                                example: 3
                              homepage_top_products_column_count:
                                type: integer
                                description: >-
                                  Number of Top Products columns to include on
                                  the home-page.
                                example: 3
                              homepage_blog_posts_count:
                                type: integer
                                example: 3
                              productpage_videos_count:
                                type: integer
                                example: 8
                              productpage_reviews_count:
                                type: integer
                                example: 9
                              productpage_related_products_count:
                                type: integer
                                example: 10
                              productpage_similar_by_views_count:
                                type: integer
                                example: 10
                              categorypage_products_per_page:
                                type: integer
                                example: 12
                              shop_by_price_visibility:
                                type: boolean
                                example: true
                              brandpage_products_per_page:
                                type: integer
                                example: 12
                              searchpage_products_per_page:
                                type: integer
                                example: 12
                              show_product_quick_view:
                                type: boolean
                                example: true
                              show_powered_by:
                                type: boolean
                                example: true
                              shop_by_brand_show_footer:
                                type: boolean
                                example: true
                              show_copyright_footer:
                                type: boolean
                                example: true
                              show_accept_amex:
                                type: boolean
                                example: true
                              show_accept_discover:
                                type: boolean
                                example: true
                              show_accept_mastercard:
                                type: boolean
                                example: true
                              show_accept_paypal:
                                type: boolean
                                example: true
                              show_accept_visa:
                                type: boolean
                                example: true
                              show_product_details_tabs:
                                type: boolean
                              show_product_reviews_tabs:
                                type: boolean
                              show_product_weight:
                                type: boolean
                              show_product_dimensions:
                                type: boolean
                              product_list_display_mode:
                                type: string
                              logo-position:
                                type: string
                              logo_size:
                                type: string
                              logo_fontSize:
                                type: integer
                              logo-font:
                                type: string
                              brand_size:
                                type: string
                              gallery_size:
                                type: string
                              productgallery_size:
                                type: string
                              product_size:
                                type: string
                              productview_thumb_size:
                                type: string
                              productthumb_size:
                                type: string
                              thumb_size:
                                type: string
                              zoom_size:
                                type: string
                              blog_size:
                                type: string
                              default_image_brand:
                                type: string
                              default_image_product:
                                type: string
                              default_image_gift_certificate:
                                type: string
                              body-font:
                                type: string
                              headings-font:
                                type: string
                              fontSize-root:
                                type: integer
                              fontSize-h1:
                                type: integer
                              fontSize-h2:
                                type: integer
                              fontSize-h3:
                                type: integer
                              fontSize-h4:
                                type: integer
                              fontSize-h5:
                                type: integer
                              fontSize-h6:
                                type: integer
                              applePay-button:
                                type: string
                              color-textBase:
                                type: string
                              color-textBase--hover:
                                type: string
                              color-textBase--active:
                                type: string
                              color-textSecondary:
                                type: string
                              color-textSecondary--hover:
                                type: string
                              color-textSecondary--active:
                                type: string
                              color-textLink:
                                type: string
                              color-textLink--hover:
                                type: string
                              color-textLink--active:
                                type: string
                              color-textHeading:
                                type: string
                              color-primary:
                                type: string
                              color-primaryDark:
                                type: string
                              color-primaryDarker:
                                type: string
                              color-primaryLight:
                                type: string
                              color-secondary:
                                type: string
                              color-secondaryDark:
                                type: string
                              color-secondaryDarker:
                                type: string
                              color-error:
                                type: string
                              color-errorLight:
                                type: string
                              color-info:
                                type: string
                              color-infoLight:
                                type: string
                              color-success:
                                type: string
                              color-successLight:
                                type: string
                              color-warning:
                                type: string
                              color-warningLight:
                                type: string
                              color-black:
                                type: string
                              color-white:
                                type: string
                              color-whitesBase:
                                type: string
                              color-grey:
                                type: string
                              color-greyDarkest:
                                type: string
                              color-greyDarker:
                                type: string
                              color-greyDark:
                                type: string
                              color-greyMedium:
                                type: string
                              color-greyLight:
                                type: string
                              color-greyLighter:
                                type: string
                              color-greyLightest:
                                type: string
                              button--default-color:
                                type: string
                              button--default-colorHover:
                                type: string
                              button--default-colorActive:
                                type: string
                              button--default-borderColor:
                                type: string
                              button--default-borderColorHover:
                                type: string
                              button--default-borderColorActive:
                                type: string
                              button--primary-color:
                                type: string
                              button--primary-colorHover:
                                type: string
                              button--primary-colorActive:
                                type: string
                              button--primary-backgroundColor:
                                type: string
                              button--primary-backgroundColorHover:
                                type: string
                              button--primary-backgroundColorActive:
                                type: string
                              button--disabled-color:
                                type: string
                              button--disabled-backgroundColor:
                                type: string
                              button--disabled-borderColor:
                                type: string
                              icon-color:
                                type: string
                              icon-color-hover:
                                type: string
                              button--icon-svg-color:
                                type: string
                              icon-ratingEmpty:
                                type: string
                              icon-ratingFull:
                                type: string
                              carousel-bgColor:
                                type: string
                              carousel-title-color:
                                type: string
                              carousel-description-color:
                                type: string
                              carousel-dot-color:
                                type: string
                              carousel-dot-color-active:
                                type: string
                              carousel-dot-bgColor:
                                type: string
                              carousel-arrow-color:
                                type: string
                              carousel-arrow-bgColor:
                                type: string
                              carousel-arrow-borderColor:
                                type: string
                              card-title-color:
                                type: string
                              card-title-color-hover:
                                type: string
                              card-figcaption-button-background:
                                type: string
                              card-figcaption-button-color:
                                type: string
                              card--alternate-backgroundColor:
                                type: string
                              card--alternate-borderColor:
                                type: string
                              card--alternate-color--hover:
                                type: string
                              form-label-font-color:
                                type: string
                              input-font-color:
                                type: string
                              input-border-color:
                                type: string
                              input-border-color-active:
                                type: string
                              input-bg-color:
                                type: string
                              input-disabled-bg:
                                type: string
                              select-bg-color:
                                type: string
                              select-arrow-color:
                                type: string
                              checkRadio-color:
                                type: string
                              checkRadio-backgroundColor:
                                type: string
                              checkRadio-borderColor:
                                type: string
                              alert-backgroundColor:
                                type: string
                              alert-color:
                                type: string
                              alert-color-alt:
                                type: string
                              storeName-color:
                                type: string
                              body-bg:
                                type: string
                              header-backgroundColor:
                                type: string
                              footer-backgroundColor:
                                type: string
                              navUser-color:
                                type: string
                              navUser-color-hover:
                                type: string
                              navUser-dropdown-backgroundColor:
                                type: string
                              navUser-dropdown-borderColor:
                                type: string
                              navUser-indicator-backgroundColor:
                                type: string
                              navPages-color:
                                type: string
                              navPages-color-hover:
                                type: string
                              navPages-subMenu-backgroundColor:
                                type: string
                              navPages-subMenu-separatorColor:
                                type: string
                              dropdown--quickSearch-backgroundColor:
                                type: string
                              dropdown--wishList-backgroundColor:
                                type: string
                              blockquote-cite-font-color:
                                type: string
                              container-border-global-color-base:
                                type: string
                              container-fill-base:
                                type: string
                              container-fill-dark:
                                type: string
                              label-backgroundColor:
                                type: string
                              label-color:
                                type: string
                              overlay-backgroundColor:
                                type: string
                              loadingOverlay-backgroundColor:
                                type: string
                              pace-progress-backgroundColor:
                                type: string
                              spinner-borderColor-dark:
                                type: string
                              spinner-borderColor-light:
                                type: string
                              hide_content_navigation:
                                type: boolean
                              optimizedCheckout-header-backgroundColor:
                                type: string
                              optimizedCheckout-show-backgroundImage:
                                type: boolean
                              optimizedCheckout-backgroundImage:
                                type: string
                              optimizedCheckout-backgroundImage-size:
                                type: string
                              optimizedCheckout-show-logo:
                                type: string
                              optimizedCheckout-logo:
                                type: string
                              optimizedCheckout-logo-size:
                                type: string
                              optimizedCheckout-logo-position:
                                type: string
                              optimizedCheckout-headingPrimary-color:
                                type: string
                              optimizedCheckout-headingPrimary-font:
                                type: string
                              optimizedCheckout-headingSecondary-color:
                                type: string
                              optimizedCheckout-headingSecondary-font:
                                type: string
                              optimizedCheckout-body-backgroundColor:
                                type: string
                              optimizedCheckout-colorFocus:
                                type: string
                              optimizedCheckout-contentPrimary-color:
                                type: string
                              optimizedCheckout-contentPrimary-font:
                                type: string
                              optimizedCheckout-contentSecondary-color:
                                type: string
                              optimizedCheckout-contentSecondary-font:
                                type: string
                              optimizedCheckout-buttonPrimary-font:
                                type: string
                              optimizedCheckout-buttonPrimary-color:
                                type: string
                              optimizedCheckout-buttonPrimary-colorHover:
                                type: string
                              optimizedCheckout-buttonPrimary-colorActive:
                                type: string
                              optimizedCheckout-buttonPrimary-backgroundColor:
                                type: string
                              optimizedCheckout-buttonPrimary-backgroundColorHover:
                                type: string
                              optimizedCheckout-buttonPrimary-backgroundColorActive:
                                type: string
                              optimizedCheckout-buttonPrimary-borderColor:
                                type: string
                              optimizedCheckout-buttonPrimary-borderColorHover:
                                type: string
                              optimizedCheckout-buttonPrimary-borderColorActive:
                                type: string
                              optimizedCheckout-buttonPrimary-borderColorDisabled:
                                type: string
                              optimizedCheckout-buttonPrimary-backgroundColorDisabled:
                                type: string
                              optimizedCheckout-buttonPrimary-colorDisabled:
                                type: string
                              optimizedCheckout-formChecklist-backgroundColor:
                                type: string
                              optimizedCheckout-formChecklist-color:
                                type: string
                              optimizedCheckout-formChecklist-borderColor:
                                type: string
                              optimizedCheckout-formChecklist-backgroundColorSelected:
                                type: string
                              optimizedCheckout-buttonSecondary-font:
                                type: string
                              optimizedCheckout-buttonSecondary-color:
                                type: string
                              optimizedCheckout-buttonSecondary-colorHover:
                                type: string
                              optimizedCheckout-buttonSecondary-colorActive:
                                type: string
                              optimizedCheckout-buttonSecondary-backgroundColor:
                                type: string
                              optimizedCheckout-buttonSecondary-borderColor:
                                type: string
                              optimizedCheckout-buttonSecondary-backgroundColorHover:
                                type: string
                              optimizedCheckout-buttonSecondary-backgroundColorActive:
                                type: string
                              optimizedCheckout-buttonSecondary-borderColorHover:
                                type: string
                              optimizedCheckout-buttonSecondary-borderColorActive:
                                type: string
                              optimizedCheckout-link-color:
                                type: string
                              optimizedCheckout-link-font:
                                type: string
                              optimizedCheckout-discountBanner-backgroundColor:
                                type: string
                              optimizedCheckout-discountBanner-textColor:
                                type: string
                              optimizedCheckout-discountBanner-iconColor:
                                type: string
                              optimizedCheckout-orderSummary-backgroundColor:
                                type: string
                              optimizedCheckout-orderSummary-borderColor:
                                type: string
                              optimizedCheckout-step-backgroundColor:
                                type: string
                              optimizedCheckout-step-textColor:
                                type: string
                              optimizedCheckout-form-textColor:
                                type: string
                              optimizedCheckout-formField-borderColor:
                                type: string
                              optimizedCheckout-formField-textColor:
                                type: string
                              optimizedCheckout-formField-shadowColor:
                                type: string
                              optimizedCheckout-formField-placeholderColor:
                                type: string
                              optimizedCheckout-formField-backgroundColor:
                                type: string
                              optimizedCheckout-formField-errorColor:
                                type: string
                              optimizedCheckout-formField-inputControlColor:
                                type: string
                              optimizedCheckout-step-borderColor:
                                type: string
                              optimizedCheckout-header-borderColor:
                                type: string
                              optimizedCheckout-header-textColor:
                                type: string
                              optimizedCheckout-loadingToaster-backgroundColor:
                                type: string
                              optimizedCheckout-loadingToaster-textColor:
                                type: string
                              optimizedCheckout-link-hoverColor:
                                type: string
                              product_sale_badges:
                                type: string
                              color_badge_product_sale_badges:
                                type: string
                              color_text_product_sale_badges:
                                type: string
                              color_hover_product_sale_badges:
                                type: string
                              restrict_to_login:
                                type: boolean
                              swatch_option_size:
                                type: string
                              social_icon_placement_top:
                                type: boolean
                              social_icon_placement_bottom:
                                type: string
                              geotrust_ssl_common_name:
                                type: string
                              geotrust_ssl_seal_size:
                                type: string
                              navigation_design:
                                type: string
                              price_ranges:
                                type: boolean
                              pdp-price-label:
                                type: string
                              pdp-sale-price-label:
                                type: string
                              pdp-non-sale-price-label:
                                type: string
                              pdp-retail-price-label:
                                type: string
                          read_only_files:
                            type: array
                            items:
                              type: string
                          resources:
                            type: object
                            properties:
                              cart:
                                type: boolean
                              bulk_discount_rates:
                                type: boolean
                              shop_by_brand:
                                type: object
                                properties:
                                  limit:
                                    type: integer
                          variations:
                            type: array
                            items:
                              type: object
                              properties:
                                name:
                                  type: string
                                id:
                                  type: string
                                meta:
                                  type: object
                                  properties:
                                    desktop_screenshot:
                                      type: string
                                    mobile_screenshot:
                                      type: string
                                    description:
                                      type: string
                                    demo_url:
                                      type: string
                                    optimized_for:
                                      type: array
                                      items:
                                        type: string
                                    industries:
                                      type: array
                                      items:
                                        type: string
                                images:
                                  type: object
                                settings:
                                  type: object
                                  properties:
                                    homepage_featured_products_count:
                                      type: integer
                                    homepage_featured_products_column_count:
                                      type: integer
                                    body-font:
                                      type: string
                                    headings-font:
                                      type: string
                                    color-textBase:
                                      type: string
                                    color-textBase--hover:
                                      type: string
                                    color-textBase--active:
                                      type: string
                                    color-textSecondary:
                                      type: string
                                    color-textSecondary--hover:
                                      type: string
                                    color-textSecondary--active:
                                      type: string
                                    color-textLink:
                                      type: string
                                    color-textLink--hover:
                                      type: string
                                    color-textLink--active:
                                      type: string
                                    color-textHeading:
                                      type: string
                                    color-primary:
                                      type: string
                                    color-primaryDark:
                                      type: string
                                    color-primaryDarker:
                                      type: string
                                    color-primaryLight:
                                      type: string
                                    color-secondary:
                                      type: string
                                    color-secondaryDark:
                                      type: string
                                    color-secondaryDarker:
                                      type: string
                                    color-error:
                                      type: string
                                    color-errorLight:
                                      type: string
                                    color-info:
                                      type: string
                                    color-infoLight:
                                      type: string
                                    color-success:
                                      type: string
                                    color-successLight:
                                      type: string
                                    color-warning:
                                      type: string
                                    color-warningLight:
                                      type: string
                                    color-black:
                                      type: string
                                    color-white:
                                      type: string
                                    color-whitesBase:
                                      type: string
                                    color-grey:
                                      type: string
                                    color-greyDarkest:
                                      type: string
                                    color-greyDarker:
                                      type: string
                                    color-greyDark:
                                      type: string
                                    color-greyMedium:
                                      type: string
                                    color-greyLight:
                                      type: string
                                    color-greyLighter:
                                      type: string
                                    color-greyLightest:
                                      type: string
                                    button--default-color:
                                      type: string
                                    button--default-colorHover:
                                      type: string
                                    button--default-colorActive:
                                      type: string
                                    button--default-borderColor:
                                      type: string
                                    button--default-borderColorHover:
                                      type: string
                                    button--default-borderColorActive:
                                      type: string
                                    button--primary-color:
                                      type: string
                                    button--primary-colorHover:
                                      type: string
                                    button--primary-colorActive:
                                      type: string
                                    button--primary-backgroundColor:
                                      type: string
                                    button--primary-backgroundColorHover:
                                      type: string
                                    button--primary-backgroundColorActive:
                                      type: string
                                    button--disabled-color:
                                      type: string
                                    button--disabled-backgroundColor:
                                      type: string
                                    button--disabled-borderColor:
                                      type: string
                                    icon-color:
                                      type: string
                                    icon-color-hover:
                                      type: string
                                    button--icon-svg-color:
                                      type: string
                                    icon-ratingEmpty:
                                      type: string
                                    icon-ratingFull:
                                      type: string
                                    carousel-bgColor:
                                      type: string
                                    carousel-title-color:
                                      type: string
                                    carousel-description-color:
                                      type: string
                                    carousel-dot-color:
                                      type: string
                                    carousel-dot-color-active:
                                      type: string
                                    carousel-dot-bgColor:
                                      type: string
                                    carousel-arrow-color:
                                      type: string
                                    carousel-arrow-bgColor:
                                      type: string
                                    carousel-arrow-borderColor:
                                      type: string
                                    card-title-color:
                                      type: string
                                    card-title-color-hover:
                                      type: string
                                    card-figcaption-button-background:
                                      type: string
                                    card-figcaption-button-color:
                                      type: string
                                    card--alternate-backgroundColor:
                                      type: string
                                    card--alternate-borderColor:
                                      type: string
                                    card--alternate-color--hover:
                                      type: string
                                    form-label-font-color:
                                      type: string
                                    input-font-color:
                                      type: string
                                    input-border-color:
                                      type: string
                                    input-border-color-active:
                                      type: string
                                    input-bg-color:
                                      type: string
                                    input-disabled-bg:
                                      type: string
                                    select-bg-color:
                                      type: string
                                    select-arrow-color:
                                      type: string
                                    checkRadio-color:
                                      type: string
                                    checkRadio-backgroundColor:
                                      type: string
                                    checkRadio-borderColor:
                                      type: string
                                    alert-backgroundColor:
                                      type: string
                                    alert-color:
                                      type: string
                                    alert-color-alt:
                                      type: string
                                    storeName-color:
                                      type: string
                                    body-bg:
                                      type: string
                                    header-backgroundColor:
                                      type: string
                                    footer-backgroundColor:
                                      type: string
                                    navUser-color:
                                      type: string
                                    navUser-color-hover:
                                      type: string
                                    navUser-dropdown-backgroundColor:
                                      type: string
                                    navUser-dropdown-borderColor:
                                      type: string
                                    navUser-indicator-backgroundColor:
                                      type: string
                                    navPages-color:
                                      type: string
                                    navPages-color-hover:
                                      type: string
                                    navPages-subMenu-backgroundColor:
                                      type: string
                                    navPages-subMenu-separatorColor:
                                      type: string
                                    dropdown--quickSearch-backgroundColor:
                                      type: string
                                    dropdown--wishList-backgroundColor:
                                      type: string
                                    blockquote-cite-font-color:
                                      type: string
                                    container-border-global-color-base:
                                      type: string
                                    container-fill-base:
                                      type: string
                                    container-fill-dark:
                                      type: string
                                    label-backgroundColor:
                                      type: string
                                    label-color:
                                      type: string
                                    overlay-backgroundColor:
                                      type: string
                                    loadingOverlay-backgroundColor:
                                      type: string
                                    pace-progress-backgroundColor:
                                      type: string
                                    spinner-borderColor-dark:
                                      type: string
                                    spinner-borderColor-light:
                                      type: string
                                    optimizedCheckout-header-backgroundColor:
                                      type: string
                                    optimizedCheckout-headingPrimary-color:
                                      type: string
                                    optimizedCheckout-headingPrimary-font:
                                      type: string
                                    optimizedCheckout-headingSecondary-color:
                                      type: string
                                    optimizedCheckout-headingSecondary-font:
                                      type: string
                                    optimizedCheckout-body-backgroundColor:
                                      type: string
                                    optimizedCheckout-colorFocus:
                                      type: string
                                    optimizedCheckout-contentPrimary-color:
                                      type: string
                                    optimizedCheckout-contentPrimary-font:
                                      type: string
                                    optimizedCheckout-contentSecondary-color:
                                      type: string
                                    optimizedCheckout-contentSecondary-font:
                                      type: string
                                    optimizedCheckout-buttonPrimary-font:
                                      type: string
                                    optimizedCheckout-buttonPrimary-color:
                                      type: string
                                    optimizedCheckout-buttonPrimary-colorHover:
                                      type: string
                                    optimizedCheckout-buttonPrimary-colorActive:
                                      type: string
                                    optimizedCheckout-buttonPrimary-backgroundColor:
                                      type: string
                                    optimizedCheckout-buttonPrimary-backgroundColorHover:
                                      type: string
                                    optimizedCheckout-buttonPrimary-backgroundColorActive:
                                      type: string
                                    optimizedCheckout-buttonPrimary-borderColor:
                                      type: string
                                    optimizedCheckout-buttonPrimary-borderColorHover:
                                      type: string
                                    optimizedCheckout-buttonPrimary-borderColorActive:
                                      type: string
                                    optimizedCheckout-buttonPrimary-borderColorDisabled:
                                      type: string
                                    optimizedCheckout-buttonPrimary-backgroundColorDisabled:
                                      type: string
                                    optimizedCheckout-buttonPrimary-colorDisabled:
                                      type: string
                                    optimizedCheckout-formChecklist-backgroundColor:
                                      type: string
                                    optimizedCheckout-formChecklist-color:
                                      type: string
                                    optimizedCheckout-formChecklist-borderColor:
                                      type: string
                                    optimizedCheckout-formChecklist-backgroundColorSelected:
                                      type: string
                                    optimizedCheckout-buttonSecondary-font:
                                      type: string
                                    optimizedCheckout-buttonSecondary-color:
                                      type: string
                                    optimizedCheckout-buttonSecondary-colorHover:
                                      type: string
                                    optimizedCheckout-buttonSecondary-colorActive:
                                      type: string
                                    optimizedCheckout-buttonSecondary-backgroundColor:
                                      type: string
                                    optimizedCheckout-buttonSecondary-borderColor:
                                      type: string
                                    optimizedCheckout-buttonSecondary-backgroundColorHover:
                                      type: string
                                    optimizedCheckout-buttonSecondary-backgroundColorActive:
                                      type: string
                                    optimizedCheckout-buttonSecondary-borderColorHover:
                                      type: string
                                    optimizedCheckout-buttonSecondary-borderColorActive:
                                      type: string
                                    optimizedCheckout-link-color:
                                      type: string
                                    optimizedCheckout-link-font:
                                      type: string
                                    optimizedCheckout-discountBanner-backgroundColor:
                                      type: string
                                    optimizedCheckout-discountBanner-textColor:
                                      type: string
                                    optimizedCheckout-discountBanner-iconColor:
                                      type: string
                                    optimizedCheckout-orderSummary-backgroundColor:
                                      type: string
                                    optimizedCheckout-orderSummary-borderColor:
                                      type: string
                                    optimizedCheckout-step-backgroundColor:
                                      type: string
                                    optimizedCheckout-step-textColor:
                                      type: string
                                    optimizedCheckout-form-textColor:
                                      type: string
                                    optimizedCheckout-formField-borderColor:
                                      type: string
                                    optimizedCheckout-formField-textColor:
                                      type: string
                                    optimizedCheckout-formField-shadowColor:
                                      type: string
                                    optimizedCheckout-formField-placeholderColor:
                                      type: string
                                    optimizedCheckout-formField-backgroundColor:
                                      type: string
                                    optimizedCheckout-formField-errorColor:
                                      type: string
                                    optimizedCheckout-formField-inputControlColor:
                                      type: string
                                    optimizedCheckout-step-borderColor:
                                      type: string
                                    optimizedCheckout-header-borderColor:
                                      type: string
                                    optimizedCheckout-header-textColor:
                                      type: string
                                    optimizedCheckout-loadingToaster-backgroundColor:
                                      type: string
                                    optimizedCheckout-loadingToaster-textColor:
                                      type: string
                                    optimizedCheckout-link-hoverColor:
                                      type: string
                                    color_badge_product_sale_badges:
                                      type: string
                                    color_text_product_sale_badges:
                                      type: string
                                    color_hover_product_sale_badges:
                                      type: string
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Requirements and Restrictions


                        Your theme's <span class="fn">config.json</span> file
                        must meet the following requirements:


                        * It must be named <span class="fn">config.json</span>,
                        must reside in the root of your `<theme-name>` top level
                        subdirectory (e.g.: <span
                        class="fp">/cornerstone/config.json</span> or <span
                        class="fp">/stencil/config.json</span>), and must be
                        valid JSON.

                        * The maximum allowable size for a theme's <span
                        class="fn">config.json</span> file is 64 KB. Exceeding
                        this limit will trigger an error upon uploading the
                        theme to BigCommerce.

                        * Each key's value is restricted to 64 characters.
                        Exceeding this limit will similarly trigger an upload
                        error.

                        * Other than these size constraints, there is no limit
                        on the number of keys and values that you can place in a
                        theme's <span class="fn">config.json</span>.


                        _Carefully check your theme against all the requirements
                        listed here – including the required keys within the
                        `meta` object and `variations` array. While some
                        requirements are not enforced in local development, they
                        will be validated (and will trigger errors) when you
                        later upload your theme to BigCommerce._


                        ### Required Themewide Keys

                        The <span class="fn">config.json</span> file must
                        contain at least the following keys, with appropriate
                        values (as outlined above):


                        *name

                        * `version`

                        * `settings` (which must itself be a valid JSON object)

                        * `variations` (an array of at least one, and at most
                        four, variation objects)

                        * `meta` (an object; see specific requirements below)


                        ### Required `meta` Keys


                        The meta object must contain at least the following
                        keys, with appropriate values:


                        * `price`

                        * `author_name`

                        * `author_email`

                        * `author_support_url`

                        * `documentation_url`


                        For illustration, here is a commented excerpt:


                        ```

                        {
                          ...
                          "meta": {
                            "price": 15000, // in cents; non-negative integer, minimum 0
                            "author_name:" "eCommerce Themes, Inc.", // Must be a string, not null
                            "author_email": "support@example.com", // Must be a string, should be a valid email address, not null
                            "author_support_url": "http://example.com/contactus", //  Must be a string, should be a valid URL, not null
                            "documentation_url": "http://example.com/guide", // Must be a string, limit of 255 characters,
                                  not null
                            "composed_image": "path/to/composed.png", // Must be a string path to the composed-image file
                            "features": [ // Array of feature strings, all of which must be in the list enumerated here: 
                                  https://github.com/bigcommerce/theme-registry/blob/master/app/schemas/theme_config.json#L33
                              "fully_responsive" // Must include at least one feature, and no duplicate entries
                            ]
                          },
                          ...
                        }

                        ```


                        ### Required `variation` Keys


                        For each variation that you choose to include in your
                        theme (at least one is required), you must provide at
                        least the following keys and sub-element, with
                        appropriate values:


                        * `name`

                        * `id`

                        * `meta` (an object, containing at least:)

                        * `description`


                        For illustration, here is a redacted excerpt from
                        Cornerstone:
                      header:
                        anchor: config_requirements-and-restrictions
                    - type: code
                      data: |-
                        "variations": [
                            {
                              "name": "Light",
                              "id": "light",
                              "meta": {
                                "desktop_screenshot": "desktop_light.png",
                                "mobile_screenshot": "mobile_light.png",
                                "description": "Ideal for a wide range of businesses and brands, this design is fully responsive, simple, and ready for you to add your branding, logo, and products. ....",
                            ...
                            }
                          ]
                      config:
                        mode: json
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Video Demo


                        <iframe width="560" height="315"
                        src="https://www.youtube.com/embed/VZYZsDoEOpQ"
                        frameborder="0" allow="autoplay; encrypted-media"
                        allowfullscreen></iframe>
                      header:
                        anchor: config_video-demo
              - title: Preparing Thumbnail Images
                route:
                  path: /preparing-thumbnail-images
                data:
                  blocks:
                    - type: html
                      data: <h1>Preparing Thumbnail Images</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#preparing_where-and-how-merchants\">Where Merchants See Your Theme's Thumbnail Images</a></li>\n    <li><a href=\"#preparing_general-image\">General Image Requirements</a></li>\n    <li><a href=\"#preparing_themewide-composite\">Themewide Composite Image</a></li>\n    <li><a href=\"#preparing_variations\">Variations: Desktop/Mobile Screenshots</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Where Merchants See Your Theme's Thumbnail Images


                        A complete Stencil theme includes screenshots to show
                        off the theme on cards that appear in two locations
                        within the BigCommerce Control Panel:


                        * **Storefront** › **My Themes**: Each individual card
                        displays a _themewide composite image_, which is an
                        image that contains combination of screenshots of the
                        theme's multiple variations. 

                        * **Storefront** › **Themes Marketplace**: Each card
                        displays one variation of your theme. The three
                        variations of Cornerstone (Light, Warm, and Bold) are
                        displayed across three separate cards.
                      header:
                        anchor: preparing_where-and-how-merchants
                    - type: tabs
                      data:
                        children:
                          - title: Desktop View of My Themes
                            blocks:
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6116/1539625143199
                                header:
                                  title: Storefront › My Themes
                                  subtitle: >-
                                    Each card contains a themewide composite
                                    image, showing all the variations of the
                                    theme in each. In this image, we see 3
                                    variations for the Cornerstone theme and 4
                                    for the Showroom theme.
                                config:
                                  centered: true
                                  fluid: true
                                  bordered: true
                                  maxWidth: '600'
                                  maxHeight: '900'
                          - title: Desktop View of Themes Marketplace
                            blocks:
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6116/1539624737619
                                header:
                                  title: Storefront › Themes Marketplace
                          - title: Mobile View of Themes Marketplace
                            blocks:
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6116/1539625004658
                                config:
                                  centered: true
                                  fluid: true
                                  bordered: true
                                  maxWidth: '500'
                                  maxHeight: '1000'
                                header:
                                  title: Storefront › Themes Marketplace
                      header:
                        title: >-
                          How your theme will appear in the Control Panel and
                          Theme Marketplace
                    - type: text
                      data: >-
                        ## General Image Requirements


                        Below are details about:

                        * how to size and save these images to stage them within
                        your theme's directory structure

                        * how to reference the images in your
                        [config.json](https://github.com/bigcommerce/cornerstone/blob/master/config.json)
                        file.


                        All screenshots described below must meet the following
                        specifications in order for the `stencil bundle` command
                        to be able to process them:


                        * Saved to a supported image file type: .jpg/.jpeg,
                        .png, or .gif.

                        * Be stored in your
                        [<theme‑name>/meta/](https://github.com/bigcommerce/cornerstone/tree/master/meta)
                        subdirectory.

                        * Must be in **portrait aspect ratio**, with specific
                        resolutions listed under [Themewide Composite
                        Image](#preparing_themewide-composite) below.
                      header:
                        anchor: preparing_general-image
                    - type: text
                      data: >
                        ## Themewide Composite Image


                        The themewide composite image represents your theme in
                        the control panel's **Storefront** › **My Themes**,
                        which shows merchants their currently available themes
                        (including any custom uploaded themes). 


                        This file will normally be a mosaic of screenshots from
                        multiple variations within your theme. It must meet the
                        following requirements, beyond the general
                        specifications above:


                        * Resolution of 600 x 760 pixels (horizontal x
                        vertical).

                        * File size smaller than 2 MB.

                        * Arbitrary filename prefix, referenced in your
                        [config.json](https://github.com/bigcommerce/cornerstone/blob/master/config.json)
                        file as the `meta` object's `composed_image` key value.


                        Here is an example of a compliant file type and
                        location:


                        `<theme‑name>/meta/composed.png`


                        Here is how you would reference this file within
                        [config.json](https://github.com/bigcommerce/cornerstone/blob/master/config.json):
                      header:
                        anchor: preparing_themewide-composite
                    - type: code
                      data: "{\n  [...]\n  \"meta\": {\n    [...]\n    \"composed_image\": \"composed.png\",\t\n    [...]\n}"
                      header:
                        title: config.json
                        subtitle: Referencing composed.png
                      config:
                        mode: js
                    - type: text
                      data: "## Variations: Desktop/Mobile Screenshots\n\nEach variation within your theme must be represented by two additional screenshots if you want that variation to appear in the control panel's  **Storefront** › **Themes Marketplace**, which shows merchants the themes that are available for download.\n\n### Desktop Screenshot\n\nThe first screenshot, showing your theme on a desktop viewport, must meet the following requirements beyond the general specifications above: \n* Resolution of 2048 x 2600 pixels (horizontal x vertical).\n* File size smaller than 5 MB\n* Arbitrary filename prefix, referenced in your [config.json](https://github.com/bigcommerce/cornerstone/blob/master/config.json) file as the `variations` object's `desktop_screenshot` key value.\n\t\n### Mobile Screenshot\n\nThe second screenshot, showing your theme on a mobile viewport, must meet the following requirements beyond the general specifications above: \n* Resolution of 304 x 540 pixels (horizontal x vertical).\n* File size smaller than 1 MB.\n* Arbitrary filename prefix, referenced in your [config.json](https://github.com/bigcommerce/cornerstone/blob/master/config.json) file as the `variations` object's `mobile_screenshot` key value.\n\nBelow is an example showing two files of compliant types and location:\n\n* `<theme‑name>/meta/desktop_bright.png`\n* `<theme‑name>/meta/mobile_bright.png`\t\n\nHere is how you would reference these files within [config.json](https://github.com/bigcommerce/cornerstone/blob/master/config.json), for a variation named `Bright`:\n\n\n "
                      header:
                        anchor: preparing_variations
                    - type: code
                      data: |
                        [...]
                          "variations": [
                            {
                              "name": "Bright",
                              "id": "bright",
                              "meta": {
                                "desktop_screenshot": "desktop_bright.png",
                                "mobile_screenshot": "mobile_bright.jpg",
                            [...]
                            }
                          ]
                      header:
                        title: config.json
                        subtitle: Referencing Bright Variation
                      config:
                        mode: js
              - title: Store Design Troubleshooting
                route:
                  path: /store-design-troubleshooting
                data:
                  blocks:
                    - type: html
                      data: <h1>Store Design Troubleshooting</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#theme-editor_empty\">Empty Drop-Down List in Store Design Panel</a></li>\n    <li><a href=\"#theme-editor_configured\">Configured Control Missing from Store Design Panel</a></li>\n    <li><a href=\"#theme-editor_theme-changes\">Theme Changes Not Saved from Store Design UI</a></li>\n\t</ul>\n</div>"
                    - type: callout
                      data:
                        title: Check the Terminal Window
                        body: >-
                          For any unexpected behavior that you encounter while
                          developing your Stencil theme, please also check the
                          terminal window where you started Stencil CLI. In some
                          cases, the terminal will provide a verbose error
                          message specifying where to look for problems. For
                          less-detailed error messages, we list diagnostic
                          suggestions in this documentation.
                    - type: text
                      data: >-
                        ## Empty Drop-Down List in Store Design Panel


                        * **Symptom:** A drop-down list's outline appears below
                        its configured label. However, the list appears to be
                        empty.

                        * **Likely Cause:** A default value specified in the
                        theme's <span class="fn">config.json</span> file is not
                        enumerated in the <span class="fn">schema.json</span>
                        file.

                        * **Resolution:** Update <span
                        class="fn">schema.json</span> to include the <span
                        class="fn">config.json<span> value.
                      header:
                        anchor: theme-editor_empty
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Configured Control Missing from Store Design Panel


                        * **Symptom:** A control that you have configured within
                        <span class="fn">schema.json</span> is completely absent
                        from the Store Design UI.

                        * **Likely Cause:** The specified "type" is one of:
                        text, text area, radio [button], or image.

                        (Store Design does not currently support these data
                        types.)

                        * **Resolution:** Display the user option via one of the
                        supported data types: color, font, select [drop-down
                        list], or checkbox.
                      header:
                        anchor: theme-editor_configured
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Theme Changes Not Saved from Store Design UI


                        * **Symptom:** Changes saved in a browser's Store Design
                        panel are not reflected in the storefront.

                        * **Likely Cause:** Check whether Store Design to
                        customize the same storefront.

                        * **Resolution:** We strongly recommend opening only one
                        instance of Store Design, at a time, per storefront.
                        BigCommerce currently provides no synchronization
                        mechanism for configuration changes from multiple Store
                        Design instances. So the storefront's <span
                        class="fn">schema.json</span> will record the last
                        changes made by any instance – but changes saved earlier
                        by other instances might be lost.
                      header:
                        anchor: theme-editor_theme-changes
        - title: Front Matter
          route:
            path: /front-matter
          data:
            children:
              - title: 'Front Matter '
                route:
                  path: /front-matter-overview
                data:
                  blocks:
                    - type: html
                      data: <h1>Front Matter Overview</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#front-matter-overview_declaring-objects\">Declaring Objects</a></li>\n    <li><a href=\"#front-matter-overview_yaml-syntax\">YAML Syntax – Requirements</a></li>\n    <li><a href=\"#front-matter-overview_filtering-attributes\">Filtering Attributes</a></li>\n    <li><a href=\"#front-matter-overview_combining-front-matter\">Combining Front Matter with Handlebars Attributes</a></li>\n    <li><a href=\"#front-matter-overview_default-versus-custom\">Default versus Custom Attributes, per Page</a></li>\n    <li><a href=\"#front-matter-overview_declaring-multiple\">Declaring Multiple Attributes</a></li>\n\t</ul>\n</div>\n\n\n\n\n\n\n"
                    - type: text
                      data: "## Declaring Front-Matter Objects\n\nWhen you create a store page that requires specific attributes (such as 'New Products') to be displayed, you must first declare the object and attribute on the page in a front-matter block at the top of the page's HTML template file. The front matter block makes the attribute accessible on the page. Then, to display the attribute on the storefront page, you will reference the the object using Handlebars within the page's HTML.\nFor example, to display 'new products' on a storefront's home page, you first need to make new products accessible on the home page. To achieve this, include the following front matter block at the top of the [home.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/home.html) file to declare the products object with its new attribute. This allows a storefront's home page to access a store's \"New Products.\"\n\n```\n---\nproducts:\n    new:\n    \tlimit: {{theme_settings.homepage_new_products_count}}\n---\n```\n\n**Note:** A 'limit' is required for Product Objects to render on a storefront page. You can hard code the limit value or utilize handlebars.js to reference it from the theme's config.json file. In this case, the limit value is being referenced from the `settings` JSON object in the `config.json` file using handlebars.js. Information on required attributes is detailed in the Front Matter Attributes Reference. \n\nAfter including the front matter block at the top of the home.html file, the New Products attribute will be accessible in the home page's context. As previously stated, simply including the front matter block will not display the attribute on the page. In order to actually display the new products on the desired storefront page, you will refernce the attribute using Handlebars in the same file you have added the front matter block to.\nIn this example, we will include the following code in Cornerstone's [home.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/home.html) file to display New Products on our store's home page. \n\n\n```\n  {{#if products.new}}\n        {{> components/products/new products=products.new columns=theme_settings.homepage_new_products_column_count}}\n    {{/if}}\n```\n"
                      header:
                        anchor: front-matter-overview_declaring-objects
                    - type: text
                      data: >+
                        ## YAML Syntax – Requirements


                        Stencil front matter uses the conventions of [YAML]()
                        (short for the recursive "YAML Ain't Markup Language").
                        Here are the YAML conventions you must follow in front
                        matter:


                        Place the front-matter block at the top of your
                        template.

                        Fence the beginning and end of the front-matter block
                        with a row of three hyphens (---), as you see in the
                        examples here.

                        Show attribute > key relationship (or object > property
                        relationship) by indenting the children. In the example
                        above, products is the object,

                        Place a colon (:) directly after each attribute name,
                        and directly after each key name. (Colons separate
                        key:value pairs.)

                        Identifiers are case-sensitive.


                        ### Restrictions


                        You can use front matter to specify attributes on the
                        tops of pages in your

                        `<theme-name>/templates/pages/` subdirectory.


                        You **cannot** use front matter to accomplish this on
                        pages in the following subdirectories:

                        * `<theme-name>/templates/components/`

                        * `<theme-name>/templates/layout/`

                        * `<theme-name>/templates/pages/custom/` 


                        * Indent using only spaces, not tabs. (YAML forbids
                        tabs, to avoid inconsistent encoding of tabs across
                        platforms.) An indent of even one space indicates a
                        child.


                        * Front matter on a given page cannot exceed 64 KB.


                        * If a front-matter directive contains an invalid
                        option, Stencil CLI will silently ignore that option.

                      header:
                        anchor: front-matter-overview_yaml-syntax
                    - type: text
                      data: >
                        ## Filtering Attributes


                        Some attributes can accept indented keys, or key-value
                        pairs, to further define the attribute. For example,
                        limit is a key commonly used to restrict the number of
                        objects to return for an attribute.

                        To return products similar to the product that a
                        customer is currently viewing – with a limit of six –
                        you would declare front matter as follows:


                        ```

                        ---

                        products:
                            similar_by_views:
                                limit: 6
                        ---

                        ```


                        Most keys have a default value, as listed in the [Front
                        Matter Attributes]() Reference. Specifying the key
                        without a value will call that default value. The
                        default value for `similar_by_views:limit:` happens to
                        be `4`, so inserting `limit` with no integer will
                        display four products:


                        ```

                        ---

                        products:
                            similar_by_views:
                                limit:
                        ---

                        ```
                      header:
                        anchor: front-matter-overview_filtering-attributes
                    - type: callout
                      data:
                        body: >-
                          To keep your pages lightweight, specify only the
                          attributes you need per page. Also, use the limit key
                          (with appropriate values) for attributes that accept
                          it.
                        title: Filtering for Faster Page Loads
                    - type: text
                      data: >-
                        ## Combining Front Matter with Handlebars Attributes


                        The next example builds on front-matter object
                        invocation and filtering, by showing a corresponding
                        Handlebars statement in HTML. Here is how you would
                        declare the `products` object to return four new
                        products, and to then display each product’s name:


                        ```

                        ---

                        products:
                            new:
                                limit: 4
                        ---


                        <h1> This is the HTML for the new-products example </h1>

                        {{#each products.new}}
                            <p>{{ name }}</p>
                        {{/each}}

                        ```
                      header:
                        anchor: front-matter-overview_combining-front-matter
                    - type: callout
                      data:
                        body: >-
                          In the above HTML, the {{ name }} identifier calls an
                          attribute of Stencil’s common product card model,
                          which consolidates details about a given product. For
                          this and other objects that you can access through
                          HTML, please see our reference section on Handlebars
                          objects.
                        title: ' Reading the Handlebars'
                    - type: text
                      data: >-
                        ## Default versus Custom Attributes, per Page


                        To make templates readily useful, they automatically
                        include a page’s default attributes. For example, a
                        theme’s
                        [product.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/product.html)
                        page will automatically include a product attribute.


                        However, if you want to include additional attributes on
                        a page, you can declare those attributes in front matter
                        using the conventions shown above. [The Declaring
                        Objects](#front-matter-overview_declaring-objects)
                        example shows the only way to display a "new products"
                        storefront section, which requires front-matter
                        invocation.
                      header:
                        anchor: front-matter-overview_default-versus-custom
                    - type: text
                      data: >+
                        ## Declaring Multiple Attributes


                        Below is an example that assumes you want to include a
                        product’s reviews and also related products. To display
                        images for the related products, the HTML statement
                        `<img src="{{getImage image 'gallery'}}">` relies on
                        Stencil's `{{getImage}}` custom Handlebars helper:


                        ```

                        ---

                        product:
                           reviews:
                               limit: 9
                           related_products:
                               limit: 10
                        ---



                        <h2>{{ product.name }}</h2>

                        {{#each product.reviews.list}}
                            <p>{{text}}</p>
                        {{/each}}

                        <h3>Related Products</h3>

                        {{#each product.related_products}}
                          <img src="{{getImage image 'gallery'}}">
                          <p>{{ name }}</p>
                        {{/each}}

                        ```

                      header:
                        anchor: front-matter-overview_declaring-multiple
              - title: Front Matter Attributes
                config:
                  sidebar:
                    token: Reference
                route:
                  path: /front-matter-attributes-reference
                data:
                  blocks:
                    - type: html
                      data: <h1>Front Matter Attributes Reference</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#front-matter-attributes-reference_global\">Global Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_category\">Category Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_blog\">Blog Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_product\">Product Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_brand\">Brand Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_brand-list\">Brand List Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_cart\">Cart Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_search\">Search Attributes</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: "## Global Attributes\n\nGlobal attributes are available on all pages.\n\n<table>\n  <tr>\n    <th>Attribute</th>\n    <th>Option with Sample Assignment</th>\n    <th>Default Value</th>\n    <th>Details and Other \nAllowable Values/Results</th>\n  </tr>\n  <tr>\n    <td>customer:</td>\n    <td></td>\n    <td></td>\n    <td>Customer attributes are always included, and are available if the active shopper is logged in.</td>\n  </tr>\n\n  <tr>\n  \t<td></td>\n  \t<td>addresses: true</td>\n    <td>true – on address page\n\nnull – on all other pages</td>\n    <td>Boolean indicating whether to retrieve addresses for this customer.\n\nNo filtering available. Default sorting is by address id, from lowest to highest.\n\nnull or false: Do not retrieve addresses.\ntrue: Retrieve addresses.</td>\n  </tr>\n  \n  <tr>\n    <td></td>\n    <td>returns: true</td>\n    <td>true – on returns page\n\nnull – on all other pages</td>\n    <td>Boolean indicating whether to retrieve product-return requests for this customer.\n      \n      No filtering available.\n      \n      true: Retrieve requests.\n      \n      null or false: Do not retrieve requests.</td>\n  </tr>\n  \n  <tr>\n    <td></td>\n    <td>wishlists: <br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: No wishlists displayed.\n      <br><p></p>\n      &lt;number&gt; limits the number of wishlists displayed.\n      <br><p></p>\n      If &lt;number&gt; is not defined, retrieves an unlimited number of wishlists.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">orders: <br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">null</td>\n    <td class=\"\">Contains all orders, complete or not.\n      <br><p></p>\n      null: no orders displayed.\n      <br><p></p>\n      &lt;number&gt; limits the number of orders displayed.\n      <br><p></p>\n      If &lt;number&gt; is not defined, displays 20 orders. (Default sorting is by order id, from lowest to highest.)</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">recently_viewed_products:</td>\n    <td class=\"\">null</td>\n    <td class=\"\">Boolean indicating whether to display recently viewed products.<br><p></p>\n\nNo filtering available.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\">products:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">(When filtering/limiting, products' default sorting is by order id, from lowest to highest.)</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">featured: <br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: No featured products displayed.<br><p></p>\n&lt;number&gt; limits the number of featured products displayed.\n      <br><p></p>\n      If &lt;number&gt; is not set, defaults to 4 products.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">new:<br>\n      <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">\nnull</td>\n    <td class=\"\">null: No new products displayed.<br><p></p>\n&lt;number&gt; limits the number of new products displayed. Maximum allowable value is 25.\n      <br><p></p>\n      If &lt;number&gt; is not defined, defaults to 8 products.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">top_sellers: <br>\n      <span class=\"indent1\">limit:  &lt;number&gt;</span></td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: No top-selling products displayed.\n      <br><p></p>\n      &lt;number&gt; limits the number of top sellers displayed.\n      <br><p></p>\n      If &lt;number&gt; is not defined, defaults to all top sellers.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">carousel: true</td>\n    <td class=\"\"></td>\n  <td class=\"\">null</td>\n    <td class=\"\">Boolean indicating whether to display a carousel on storefront.\n      <br><p></p>\n      No filtering available.\n      <br><p></p>\n      null or false: No carousel display.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">blog:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">(Default sorting is by published_date, from most-recent to earliest.)</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">recent_posts:<br>\n      <span class=\"indent1\">limit: &lt;number&gt;</span>\n    </td>\n    <td class=\"\">20</td>\n    <td class=\"\">null: No recent blog posts displayed.\n      <br><p></p>      \n      &lt;number&gt; limits the number of recent blog posts displayed.\n      <br><p></p>      \n      If &lt;number&gt; is not defined, defaults to the maximum of 20 blog posts.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">summary: &lt;number&gt;</td>\n    <td class=\"\">100</td>\n    <td class=\"\"><!-- null: No summary characters displayed.<br><p></p> -->      \n      &lt;number&gt; sets the number of characters to display in each blog-post summary.\n      <br><p></p>\n      If &lt;number&gt; is not defined, displays 100 characters.</td>\n  </tr>\n  \n  <!-- <tr>\n    <td class=\"\">brands:<br>\n        <span class=\"indent1\">&lt;number&gt;</span></td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: Do not display a brand list.<br><p></p>\n&lt;number&gt; limits the number of brands to return.<br><p></p>\nIf &lt;number&gt; is not defined, returns all brands.</td>\n  </tr> -->\n  \n  <tr>\n    <td class=\"\">cart: true</td>\n    <td class=\"\"></td>\n    <td class=\"\">false</td>\n    <td class=\"\">Boolean indicating whether to retrieve cart data.<br><p></p>\ntrue: Return cart data.<br><p></p>\nfalse: Do not return cart data.</td>\n  </tr>\n  \n  <tr>\n    <td>categories: true</td>\n    <td></td>\n    <td>false</td>\n    <td>Boolean indicating whether to retrieve the <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/categories\">category tree</a> during an AJAX request.\n      <br><p></p>\n      true: Retrieve the category tree.\n      <br><p></p>\n      false: Do not retrieve the category tree.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">description: true</td>\n    <td class=\"\">\nfalse</td>\n    <td class=\"\">\nBoolean indicating whether to retrieve category descriptions dynamically from the database.\n      <br><p></p>\n      Set to true for themes that must display category descriptions when pages render. (This can slow page loads.)</td>\n  </tr>\n    \n  <tr>\n    <td>shop_by_brand:</td>\n    <td>limit: &lt;number&gt;</td>\n    <td>null</td>\n    <td>Typically used in a footer or sidebar.<br><p></p>\nnull: Do not display this brand list.<br><p></p>\n&lt;number&gt; limits the number of brands to return.<br><p></p>\nIf &lt;number&gt; is not defined, returns 10 brands, ordered by the number of products per brand.</td>\n  </tr>\n</table>"
                      header:
                        anchor: front-matter-attributes-reference_global
                    - type: text
                      data: >-
                        ## Category Attributes 


                        Category attributes are available in the context of a
                        category.


                        <table>
                          <tr>
                            <th>Attribute</th>
                            <th>Option with Sample Assignment</th>
                            <th>Default Value</th>
                            <th>Details</th>
                          </tr>
                          <tr>
                            <td>category:</td>
                            <td></td>
                            <td></td>
                            <td></td>
                          </tr>

                          <tr>
                            <td></td>
                            <td>shop_by_price:</td>
                            <td>
                        false</td>
                            <td>
                        Boolean indicating whether to display Shop-by-Price
                        controls.</td>
                          </tr>

                          <tr>
                            <td></td>
                            <td>products:<br>
                                <span class="indent1">limit: &lt;number&gt;</span></td>
                            <td>
                        16</td>
                            <td>
                        Defines the number of products displayed per page for
                        this category. Range of possible values is 1&ndash;100
                        products.</td>
                          </tr>
                        </table>
                      header:
                        anchor: front-matter-attributes-reference_category
                    - type: text
                      data: >-
                        ## Blog Attributes


                        Blog attributes are available in the context of a blog.


                        <table>
                          <tr>
                            <th>Attribute</th>
                            <th>Sub-Attribute</th>
                            <th>Option with Sample Assignment</th>
                            <th>Default Value</th>
                            <th>Details</th>
                          </tr>
                          
                          <tr>
                            <td class="">blog:</td>
                            <td class=""></td>
                            <td class=""></td>
                            <td class=""></td>
                            <td class=""></td>
                          </tr>

                          <tr>
                            <td class=""></td>
                            <td class="">posts:</td>
                            <td class=""></td>
                            <td class=""></td>
                            <td class="">(Default sorting is by published_date, from most-recent to earliest.)</td>
                          </tr>

                          <tr>
                            <td class=""></td>
                            <td class=""></td>
                            <td class="">limit: &lt;number&gt;</td>
                            <td class="">null</td>
                            <td class="">null: No blog posts displayed.<br><p></p>
                              &lt;number&gt; limits the number of blog posts displayed.<br><p></p>
                              Maximum is 20 blog posts per page.
                            </td>
                          </tr>
                          
                          <tr>
                            <td class=""></td>
                            <td class=""></td>
                            <td class="">pages: &lt;number&gt;</td>
                            <td class="">5</td>
                            <td class="">
                        null: No pagination.<br><p></p>
                              
                              &lt;number&gt; sets the number of pages to display in pagination links.<br><p></p>
                              
                              If &lt;number&gt; is not defined, defaults to 5 pages.
                            </td>
                          </tr>
                          
                          <tr>
                            <td class=""></td>
                            <td class=""></td>
                            <td class="">summary: &lt;number&gt;</td>
                            <td class="">250</td>
                            <td class=""> <!-- null: No summary characters displayed.<br><p></p> -->  
                              &lt;number&gt; sets the number of characters to display in each blog-post summary.<br><p></p>
                        If &lt;number&gt; is not defined, displays 250
                        characters.</td>
                          </tr>
                        </table>
                      header:
                        anchor: front-matter-attributes-reference_blog
                    - type: text
                      data: >-
                        ## Product Attributes 


                        Product attributes are available in the context of a
                        product.


                        <table>
                          <tr>
                            <td>Attribute</td>
                            <td>Option with Sample Assignment</td>
                            <td>Default Value</td>
                            <td>Details</td>
                          </tr>
                          <tr>
                            <td class="">product:</td>
                            <td class=""></td>
                            <td class=""></td>
                            <td class="">(When filtering/limiting, products' default sorting is by order id, from lowest to highest.)</td>
                          </tr>

                          <tr>
                            <td class=""></td>
                            <td class="">videos:<br>
                                <span class="indent1">limit: &lt;number&gt;</span></td>
                            <td class="">
                        [unlimited]</td>
                            <td class="">If product.videos is not defined, no videos are returned.<br><p></p>
                              
                              If product.videos is defined, the default behavior is to return all videos. <!-- Check & correct this. --> <br><p></p>
                              
                              If product.videos.limit is also defined, &lt;number&gt; sets the maximum number of videos returned.</td>
                          </tr>
                          
                          <tr>
                            <td class=""></td>
                            <td class="">images:<br>
                                <span class="indent1">limit: &lt;number&gt;</span></td>
                            <td class="">
                        [unlimited]</td>
                            <td class="">If product.images is not defined, no images are returned.<br><p></p>
                              
                              If product.images is defined, you must also define product.images.limit, which throttles the number of images returned. <br><p></p>
                        The maximum allowable value for this option's
                        &lt;number&gt; parameter is 5 images.</td>
                          </tr>
                          
                          <tr>
                            <td class=""></td>
                            <td class="">reviews: true<br>
                                <span class="indent1">limit: &lt;number&gt;</span></td>
                            <td>[false]</td>
                            <td>Boolean indicating whether to display product reviews.
                                
                              If product.reviews is present, and is not explicitly set to "false", reviews will appear.
                              
                              If &lt;number&gt; is not defined, defaults to 10 reviews.
                              (When filtering/limiting reviews, default sorting is by review id, from lowest to highest.)</td>
                          </tr>
                          
                          <tr>
                            <td class=""></td>
                            <td class="">related_products:<br>
                                <span class="indent1">limit: &lt;number&gt;</span></td>
                            <td class="">
                        [unlimited]</td>
                            <td class="">Displays products that are related by name.<br><p></p>
                              
                              &lt;number&gt; limits the number of products displayed.<br><p></p>
                              
                              If &lt;limit&gt; is absent or undefined, the default behavior is to display all related products.<br><p></p> 

                        Inserting “limit:” with no integer will display 0
                        products. </td>
                          </tr>
                          
                          <tr>
                            <td></td>
                            <td>similar_by_views:<br>
                                <span class="indent1">limit: &lt;number&gt;</span></td>
                            <td>[unlimited]</td>
                            <td>Displays products similar to those displayed in the current page context.<br><p></p>
                              
                              &lt;number&gt; limits the number of products displayed.
                              
                              If &lt;limit&gt; is absent or undefined, default is to display 4 products.</td>
                          </tr>
                        </table>
                      header:
                        anchor: front-matter-attributes-reference_product
                    - type: text
                      data: >-
                        ## Brand Attributes


                        Brand attributes are available in the context of a
                        brand.<br><br>


                        <table>
                          <tr>
                            <td>Attribute</td>
                            <td>Option with Sample Assignment</td>
                            <td>Default Value</td>
                            <td>Details</td>
                          </tr>
                          <tr>
                            <td>brand:</td>
                            <td></td>
                            <td></td>
                            <td></td>
                          </tr>

                          <tr>
                            <td class=""></td>
                            <td class="">products: <br>
                              <span class="indent1">limit: &lt;number&gt;</span></td>
                            <td class="">
                        50</td>
                            <td class="">
                        Defines the number of products displayed per page for
                        this brand. Range of possible values is 1&ndash;50
                        products.</td>
                          </tr>
                        </table>
                      header:
                        anchor: front-matter-attributes-reference_brand
                    - type: text
                      data: >-
                        ## Brand List Attributes


                        These attributes are available in the context of a list
                        of brands.<br><br>


                        <table>
                          <tr>
                            <td>Attribute</td>
                            <td>Option with Sample Assignment</td>
                            <td>Default Value</td>
                            <td>Details</td>
                          </tr>
                          <tr>
                            <td>brands:</td>
                            <td></td>
                            <td></td>
                            <td>(When retrieving a collection of brands, default sorting is by brand id, from lowest to highest.)</td>
                          </tr>

                          <tr>
                            <td class=""></td>
                            <td class="">limit: &lt;number&gt;</td>
                            <td class="">50</td>
                            <td class="">
                        Sets the number of brands displayed in the list. If
                        &lt;limit&gt; is not defined, returns all brands, up to
                        a maximum of 50.</td>
                          </tr>
                        </table>
                      header:
                        anchor: front-matter-attributes-reference_brand-list
                    - type: text
                      data: >-
                        ## Cart Attributes 


                        Cart attributes are available in the context of a
                        shopper's cart.


                        <table>
                          <tr>
                            <td>Attribute</td>
                            <td>Sub-Attribute</td>
                            <td>Option with Sample Assignment</td>
                            <td>Default Value</td>
                            <td>Details</td>
                          </tr>
                          <tr>
                            <td>cart</td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                          </tr>
                          <tr>
                            <td></td>
                            <td>suggestions:</td>
                            <td></td>
                            <td></td>
                            <td>Suggested products to display to shopper, based on cart contents. <NOBR>(If enabled,</nobr> these suggestions appear only immediately after the shopper adds an item to the cart.)</td>
                          </tr>
                          <tr>
                            <td class=""></td>
                            <td class=""></td>
                            <td class="">limit: &lt;number&gt;</td>
                            <td class="">null</td>
                            <td class="">null: Do not display suggested products.<br><p></p>
                        &lt;number&gt; limits the number of suggested products
                        to return.

                        If &lt;number&gt; is not defined, returns 4 suggested
                        products.</td>
                          </tr>
                        </table>
                      header:
                        anchor: front-matter-attributes-reference_cart
                    - type: text
                      data: >-
                        ## Search Attributes 


                        Search attributes are available in the context of a
                        search results page.


                        <table>
                          <tr>
                            <td>Attribute</td>
                            <td>Sub-Attribute</td>
                            <td>Option with Sample Assignment</td>
                            <td>Default Value</td>
                            <td>Details</td>
                          </tr>
                          <tr>
                            <td>search</td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                          </tr>
                          <tr>
                            <td></td>
                            <td>product_results:</td>
                            <td></td>
                            <td></td>
                            <td></td>
                          </tr>

                          <tr>
                            <td></td>
                            <td></td>
                            <td>limit: &lt;number&gt;</td>
                            <td>16</td>
                            <td>
                        Defines the number of product search results displayed
                        per page. Range of possible values is 1&ndash;100
                        products.</td>
                          </tr>
                        </table>
                      header:
                        anchor: front-matter-attributes-reference_search
        - title: Template Files
          route:
            path: /template-files
          data:
            children:
              - title: Templates Directory
                route:
                  path: /templates-directory
                data:
                  children:
                    - title: Components Subdirectory
                      route:
                        path: /components-subdirectory
                      data:
                        blocks:
                          - type: html
                            data: <h1>Components Subdirectory</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#components_components-subdirectory\">Components Subdirectory</a></li>\n    <li><a href=\"#components_naming-requirements\">Naming Requirements</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Components Subdirectory


                              The `/templates/components/` subdirectory contains
                              Handlebars and HTML components (provided as
                              `.html` files) to create page structure. You can
                              reuse these code snippets and partials throughout
                              your theme.


                              You can take a look at the Cornerstone components
                              subdirectory and its contents in the [Github
                              repository
                              here](https://github.com/bigcommerce/cornerstone/tree/master/templates/components).


                              Subdirectories of `/templates/components/` group
                              together pages that serve a particular storefront
                              function. For example,
                              [here](https://github.com/bigcommerce/cornerstone/tree/master/templates/components/search)
                              are the `.html` files contained in the `/search/`
                              subdirectory.


                              Furthermore, the [`/common/`
                              subdirectory](https://github.com/bigcommerce/cornerstone/tree/master/templates/components/common)
                              contains forms and icons resources, plus a
                              collection of single-purpose files.
                            header:
                              anchor: components_components-subdirectory
                          - type: text
                            data: >-
                              ## Naming Requirements


                              **Important:** Three children of the
                              `/templates/components/` subdirectory each contain
                              a set of templates whose file names must remain
                              constant. However, you are free to move each set
                              of template files to other path locations – as
                              long as you keep each set together in one folder
                              and specify the new location. Those folders are
                              note below:


                              *
                              [common/forms](https://github.com/bigcommerce/cornerstone/tree/master/templates/components/common/forms)

                              *
                              [common/faceted-search/facets](https://github.com/bigcommerce/cornerstone/tree/master/templates/components/faceted-search/facets)

                              *
                              [common/products/options](https://github.com/bigcommerce/cornerstone/tree/master/templates/components/products/options)
                            header:
                              anchor: components_naming-requirements
                          - type: callout
                            data:
                              body: >-
                                You can use front matter to specify resources
                                only on pages in the `/templates/pages/`
                                subdirectory, not on pages here in the
                                `/templates/components/` subdirectory.


                                Please bear in mind that if a front-matter
                                directive contains an invalid option, Stencil
                                CLI will silently ignore that option.
                              title: ' Front-Matter Restrictions'
                              type: warning
                    - title: Layout Subdirectory
                      route:
                        path: /layout-subdirectory
                      data:
                        blocks:
                          - type: html
                            data: <h1>Layout Subdirectory</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#layout_layout-subdirectory\">Layout Subdirectory</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Layout Subdirectory


                              The `/templates/layout/` subdirectory is where you
                              assemble Handlebars resources to define your
                              storefront site’s overall structure (header,
                              footer, etc.). You can implement multiple layouts
                              here for different use cases, making it easy to
                              switch between different look-and-feel variations
                              of the same theme.


                              As prototypes, we have provided a minimal
                              [base.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/layout/base.html)
                              page in this subdirectory. To develop your theme,
                              you can copy and/or modify this prototype.


                              **Note:** _Be sure to set permission `755
                              (drwxr-xr-x)` on any new _subdirectories_ that you
                              add. Also, be sure to set permission `644
                              (rw-r--r--)` on any new _files_ that you add.
                              Without these permissions, running your theme
                              locally will fail with multiple error messages.
                              Bundling your theme will also fail, blocking its
                              upload to a store._
                            header:
                              anchor: layout_layout-subdirectory
                          - type: callout
                            data:
                              body: >-
                                You can use front matter to specify resources
                                only on pages in the `/templates/pages/`
                                subdirectory, but **not** on pages here in the
                                `/templates/layout/` subdirectory. If a
                                front-matter directive contains an invalid
                                option, Stencil CLI will silently ignore that
                                option.
                              title: Front Matter Restrictions
                              type: warning
                    - title: Pages Subdirectory
                      route:
                        path: /pages-subdirectory
                      data:
                        blocks:
                          - type: html
                            data: <h1>Pages Subdirectory</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#pages_pages-subdirectory\">Pages Subdirectory</a></li>\n    <li><a href=\"#pages_naming-requirements\">Naming Requirements</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Pages Subdirectory


                              The `/templates/pages/` subdirectory contains the
                              complete set of base template pages used to
                              construct a BigCommerce online store. These pages
                              call resources from the `/templates/components/`
                              and `/templates/layout/` subdirectories.


                              Children of [this
                              subdirectory](https://github.com/bigcommerce/cornerstone/tree/master/templates/pages)
                              group together pages that serve a particular
                              **storefront function**. For example, you can view
                              contents of the
                              [/errors/](https://github.com/bigcommerce/cornerstone/tree/master/templates/pages/errors)
                              and
                              [/gift-certificate/](https://github.com/bigcommerce/cornerstone/tree/master/templates/pages/gift-certificate)
                              subdirectories.


                              The subdirectory’s [.html
                              files](https://github.com/bigcommerce/cornerstone/tree/master/templates/pages)
                              are single-purpose pages.
                            header:
                              anchor: pages_pages-subdirectory
                          - type: text
                            data: >-
                              ## Naming Requirements


                              Do not change the names of the `/templates/pages/`
                              subdirectory or its contained files. These default
                              names are required for the storefront to compile
                              properly. You can, however, edit pages’
                              front‑matter and Handlebars resources to customize
                              the storefront theme’s look and function.
                            header:
                              anchor: pages_naming-requirements
                          - type: callout
                            data:
                              type: warning
                              body: >-
                                Pages in the `/templates/pages/` subdirectory
                                are the **only** place you can insert and modify

                                YAML front-matter attributes to customize the
                                rendered storefront.
                              title: ' Front-Matter Restriction'
                    - title: Google Analytics Enhanced ECommerce
                      route:
                        path: /google-analytics-enhanced-ecommerce
                      data:
                        blocks:
                          - type: html
                            data: <h1>Google Analytics Enhanced ECommerce</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#google-analytics_overview\">Overview</a></li>\n    <li><a href=\"#google-analytics_prerequisites\">Prerequisites</a></li>\n    <li><a href=\"#google-analytics_implementing\">Implementing Data Tags on a Cornerstone Based Theme</a></li>\n    <li><a href=\"#google-analytics_data-tag-ref\">Data Tag Reference</a></li>\n    <li><a href=\"#google-analytics_additional-resources\">Additional Resources</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Overview


                              Google Analytics is a free analytics tool that
                              helps you track visitors and conversions on your
                              store. BigCommerce has updated the Google
                              Analytics integration to support Enhanced
                              Ecommerce.  As apart of the Enhanced ECommerce
                              feature, Stencil themes now support Data Tags. 


                              Data Tags provide detailed data on the way
                              shoppers interact with your store’s products.
                              However, data tags are not only limited to only
                              product data collection. Data Tags can also track
                              your store’s header and footer for promotions and
                              can collect data on whether those promotions were
                              viewed and/or clicked. BigCommerce’s Data Tags are
                              powered by
                              [Segment](https://segment.com/docs/destinations/google-analytics/)
                              and
                              [Platform.js](https://github.com/segment-integrations/analytics.js-integration-google-analytics/blob/master/lib/index.js),
                              and will send your store’s product data through to
                              Google Analytics. 


                              Cornerstone versions 2.6.0+ will have Data Tags
                              already included in the theme.
                            header:
                              anchor: google-analytics_overview
                          - type: callout
                            data:
                              type: error
                              body: >-
                                While you can implement data tags with Blueprint
                                themes, we do not currently have specific
                                documentation on how to do this. The data tag
                                HTML structure, however, will be the same as it
                                is in a Stencil theme. 
                              title: GAEE for Blueprint
                          - type: text
                            data: >-
                              ## Prerequisites


                              In order to implement Data Tags in your store, you
                              must have an operating ECommerce store on the BC
                              Platform, and your store’s checkout must be using
                              Optimized One-Page Checkout.


                              Data Tags will work on any theme. For this
                              tutorial, we will be adding data tags to the
                              Cornerstone theme. 


                              ### Downloading a Theme

                              This tutorial will be based off of Cornerstone. If
                              you do not already have a local copy of
                              Cornerstone on your machine, see [Downloading the
                              Cornerstone
                              Theme](/stencil-docs/getting-started/advanced-installation-options/downloading-the-cornerstone-theme).


                              If you would like to implement Data Tags on your
                              custom theme and do not already have a copy of
                              your custom theme downloaded, see
                              [Downloading/Customizing Marketplace
                              Themes](/stencil-docs/getting-started/advanced-installation-options/downloading-a-marketplace-theme).


                              Note: the remainder of this tutorial will be
                              working off the refer to the theme’s base folder
                              as ‘cornerstone’.
                            header:
                              anchor: google-analytics_prerequisites
                          - type: text
                            data: >
                              ## Implementing Data Tags on a Cornerstone Based
                              Theme


                              ### Include the Enhanced ECommerce Property


                              1. Open your local copy of your theme and navigate
                              to the theme’s `cornerstone/config.json` file.


                              2. In the config.json file, navigate to the
                              features array. There’s should be a property in
                              this array called `enhanced ecommerce`. If the
                              `enhanced ecommerce` property is not present in
                              the features array, add it. The features object
                              should then look similar to image below.
                            header:
                              anchor: google-analytics_implementing
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1542318949910
                            header:
                              subtitle: config.json
                              title: Enhanced ECommerce Feature
                            config:
                              centered: true
                              fluid: true
                              bordered: true
                              maxWidth: '400'
                              maxHeight: '500'
                          - type: text
                            data: >-
                              You are now ready to begin adding data tags into
                              the HTML files across your Cornerstone theme. 
                          - type: text
                            data: >-
                              ### Adding Data Tags into Cornerstone’s HTML files


                              Data tags must be manually added to a product in
                              order to track shopper events and interactions
                              with a product. Because data tags collect product
                              data at a very granular level, there will be
                              multiple locations you will have to add tags on a
                              singular product in order to get a comprehensive
                              look at the product’s data. For example, if you
                              want to, it is imperative to note that a product
                              can be viewed by clicking any of the following:


                              * The name of the product

                              * The “Quick View” Button

                              * The product image


                              So, if you would like to track the clicks on a
                              specific product, in order to ensure you get a
                              fully comprehensive look at shoppers’ interactions
                              with a product, you will want to include a data
                              tag on each of these fields. If a specific product
                              possesses multiple data tags, the data tag that is
                              closest to the product is the one which will will
                              track clicks, product impressions, or product
                              views.


                              Data tags will be implemented in your store by
                              using simple HTML. In order to begin tracking, you
                              will add data tags as an attribute to the already
                              existing HTML tags present in your theme. 


                              See [Pull Request
                              #1377](https://github.com/bigcommerce/cornerstone/pull/1377/commits/55fc73eeb1edc6e140005ca811f090f06ab35435)
                              to see how Data Tags were implemented in
                              Cornerstone 2.6.0.


                              ### Data Tag Implementation Example


                              You can see a data tag implemented in the HTML
                              form tag in the code sample below:
                          - type: code
                            data: >-
                              <form action="{{urls.compare}}" method='POST'
                              data-list-name="Brand: {{brand.name}}"
                              data-product-compare>
                                  {{#if theme_settings.product_list_display_mode '===' 'grid'}}
                                      {{> components/products/grid products=brand.products show_compare=brand.show_compare theme_settings=theme_settings event="list"}}
                                  {{else}}
                                      {{> components/products/list products=brand.products show_compare=brand.show_compare theme_settings=theme_settings event="list"}}
                                  {{/if}}
                              </form>


                              {{> components/common/paginator pagination.brand}}
                            config:
                              mode: html
                              highlightRange:
                                - from: '1'
                                  to: '2'
                          - type: text
                            data: >-
                              In the above snippet, the data tag is embedded in
                              a `<form>` HTML tag in lines 1 and 2. The data tag
                              is  `data-list-name` and its value is `“Brand:
                              {{brand.name}}”`.
                          - type: text
                            data: >-
                              ## Data Tag Reference


                              Currently, BigCommerce supports 11 different data
                              tags. Below is a table with a breakdown of each
                              tag and its description.
                            header:
                              anchor: google-analytics_data-tag-ref
                          - type: callout
                            data:
                              type: warning
                              body: >-
                                * If tracking promotions data, either
                                `data-banner-id` or `data-name` are required.

                                * If tracking data for a product, either
                                `data-entity-id` or `data-name` are required.

                                * If tracking data for a product list,
                                `data-product-list` or `data-entity-id` are
                                required.


                                The “tracked product” refers to the product on
                                which you are inserting the data tag on.
                              title: Mandatory Data
                          - type: html
                            data: "<table>\n  <tr>\n  \t<th>Data Tag</th>\n    <th>Description</th>\n  \t<th>Value Type</th>\n  \t<th>Example</th>\n  </tr>\n   <tr>\n     <td><code>data-list-name</code></td>\n     <td>The <code>data-list-name</code> tag denotes the name of the list that will be reflected on Google Analytics.</td>\n  \t<td>string or handlebars helper</td>\n     <td> <b>String Example</b>:<code>data-list-name=“Kitchen Appliances”</code> \t\n       <br><br>\n<b>Handlebars Value Example</b>: The <code>data-list-name</code> tag can also get its value using Handlebars. For example, if you are adding a data tag to your carousel products in products/carousel.html, you could create the tag <code>data-list-name=\"{{list}}\"</code> and define the list value in products/new.html to be: <code>list=\"New products\"</code></td>\n  </tr>\n   <tr>\n     <td><code>data-entity-id</code></td>\n     <td>The <code>data-entity-id</code> is equal to the tracked item’s id.</td>\n  \t<td>integer</td>\n    <td><code>data-entity-id=12</code></td>\n  </tr>\n   <tr>\n    <td><code>data-position</code></td>\n       <td>The <code>data-position</code> tag is equal to the tracked product’s position or the tracked promotion’s position.</td>\n  \t<td>Value is an string if creating the data tag for a promotion. The string should denote where the promotion is.\n       <br><br>\n       Value is an integer if creating the data tag for a product. The integer should represent the product’s placement. An example use case for this data tag is to answer a question like, “does the product in position 1 sell more than the product in position 4?”</td>\n       <td><b>String Value Example:</b> <code>data-position=\"center\"</code>\n       <br><br>\n         <b>Integer Value Example:</b> <code>data-position=2\n</code>\n       </td>\n  </tr>\n     <tr>\n    <td><code>data-banner-id</code></td>\n       <td>The <code>data-banner-id</code> tag is the id of the banner being tracked. The banner id is not to be mistaken with the promotion id.</td>\n  \t<td>integer</td>\n       <td><code>data-banner-id=5</code></td>\n  </tr>\n     <tr>\n  \t<td><code>data-event-type</code></td>\n       <td>The <code>data-event-type</code> tag is equal to the shopper event that will be tracked. There are a 4 shopper/product interactions you can measure and set the data-event-type equal to. Custom events are not yet implemented.</td>\n  \t<td>string that can be either:\n      <ul>\n        <li>“promotion”</li> \n        <li>“promotion click”</li>\n        <li>“product”</li>\n        <li>“list”</li>\n       <td><code>data-event-type=“promotion”</code></td>\n  </tr>\n     <tr>\n  \t<td><code>data-name</code></td>\n       <td>The <code>data-name</code> tag is equal to the tracked product’s or banner’s name. The data-name tag is \n</td>\n  \t<td>string or handlebars helper</td>\n       <td><b>String Value Example:</b> <code>data-name=“Ruffle Off-the-Shoulder Top”</code>\n         \n         <br><br>\n         \n         <b>Handlebars Value Example:</b> The <code>data-name</code> tag can also get its value using Handlebars.\n\n For example, if you are adding a data tag to your footer in products/footer.html, you could create the tag: <code>data-name=”{{this.banner-name}}”</code>\n\nOr, if you are adding a data tag to a product list item in products/list-item.html, you could create the tag below <code>data-name=“{{name}}”</code> as long as these values are defined.</td>\n  </tr>\n     <tr>\n  \t<td><code>data-product-category</code></td>\n       <td>The <code>data-product-category</code> tag is equal to the tracked product’s category.\n</td>\n  \t<td>string</td>\n       <td><code>data-product-category=“Women’s Apparel”</code></td>\n  </tr>\n     <tr>\n  \t<td><code>data-product-brand</code></td>\n       <td>The <code>data-product-brand</code> tag is equal to the tracked product’s brand.\n</td>\n  \t<td>string</td>\n       <td><code>data-product-brand=“Ralph Lauren Corporation”</code></td>\n  </tr>\n     <tr>\n  \t<td><code>data-product-price</code></td>\n       <td>The <code>data-product-price</code> tag is equal to the tracked product’s price.\n</td>\n  \t<td>integer</td>\n       <td><code>data-product-price=“27.99”</code></td>\n  </tr>\n     <tr>\n  \t<td><code>data-product-sku</code></td>\n       <td>The <code>data-product-sku</code> tag is equal to the tracked product’s sku value.\n</td>\n  \t<td>string</td>\n       <td><code>data-product-sku=”S18T-Ots-YM”</code></td>\n  </tr>\n     <tr>\n  \t<td><code>data-product-variant</code></td>\n       <td>The <code>data-product-variant</code> is equal to the tracked product’s variant.\n</td>\n  \t<td>string</td>\n       <td><code>data-product-variant=”4-Yellow”</code></td>\n  </tr>\n</table>"
                          - type: text
                            data: >-
                              ## Additional Resources


                              * Cornerstone [PR
                              #1377](https://github.com/bigcommerce/cornerstone/pull/1377/commits/55fc73eeb1edc6e140005ca811f090f06ab35435)
                              (Github)

                              * [Customizing the BigCommerce Google Analytics
                              Enhanced ECommerce
                              Integration](https://medium.com/bigcommerce-developer-blog/customizing-the-bigcommerce-google-analytics-enhanced-ecommerce-integration-803d4338d018)
                              (Developer Blog)

                              * Commit showing the addition of [Google Analytics
                              Product Data
                              Tags](https://github.com/bigcommerce/cornerstone/commit/9a4ddcae7f531a9d542aeb8ebf38c8bda2656b1c)
                              (Github)

                              * [Google Analytics Enhanced
                              ECommerce](https://developers.google.com/analytics/devguides/collection/analyticsjs/enhanced-ecommerce#ecommerce-data)
                              (Google)
                            header:
                              anchor: google-analytics_additional-resources
                    - title: Google AMP
                      route:
                        path: /google-amp
                      data:
                        blocks:
                          - type: html
                            data: <h1>Google AMP</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#google-amp_overview\">Google AMP Overview</a></li>\n    <li><a href=\"#google-amp_implement\">Implement Google AMP into your Stencil theme</a></li>\n    <li><a href=\"#google-amp_location-of-amp-files\">Location of AMP Files within Cornerstone</a></li>\n    <li><a href=\"#google-amp_local-testing\">Local Testing</a></li>\n    <li><a href=\"#google-amp_additional-resources\">Additional Resources</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Google AMP Overview


                              Google AMP aka Accelerated Mobile Pages is an
                              [open source
                              initiative](https://www.ampproject.org/) to make
                              websites load faster across mobile devices.
                            header:
                              anchor: google-amp_overview
                          - type: text
                            data: >-
                              ## Implement Google AMP into your Stencil theme


                              Google AMP will be automatically added if your
                              store's theme is based on Cornerstone themes
                              1.6.0+.


                              Please see the user documentation on configuring
                              Google AMP into your store via the [Control
                              Panel](https://support.bigcommerce.com/articles/Public/Google-AMP?_ga=2.135679409.1406470381.1541441523-967431010.1523308107).


                              If you are using a custom theme for your
                              storefront, you will have to perform a few extra
                              steps in order to fully configure Google AMP on
                              your store. Reference the text information and
                              code samples below to do so. If you do not have a
                              custom theme, you can bypass the remainder of this
                              article.


                              After you have completed the previous steps, move
                              onto these steps if you have a custom storefront
                              theme activated.


                              Ensure the Google Analytics ID has been added in
                              the control panel. This is what will be used to
                              track AMP analytics. You can use more than one ID
                              to track [AMP traffic vs non-AMP
                              traffic](https://developers.google.com/analytics/devguides/collection/amp-analytics/#amp_vs_non-amp_traffic).


                              In the `/amp/category.html`, `layout/amp.html` and
                              `amp/product.html` template files replace
                              `theme_settings` with `settings`.


                              Example: In `layout/amp.html` (referenced below)
                              replace `theme_settings.amp_analytics_id` with

                              `settings.amp_analytics_id`.
                            header:
                              anchor: google-amp_implement
                          - type: code
                            data: "{{{snippet 'htmlhead'}}}\n         <script async custom-element=\"amp-form\" src=\"https://cdn.ampproject.org/v0/amp-form-0.1.js\"></script>\n         <script async custom-element=\"amp-sidebar\" src=\"https://cdn.ampproject.org/v0/amp-sidebar-0.1.js\"></script>\n\t\t\t  {{#if settings.amp_analytics_id}}\n         \t\t\t<script async custom-element=\"amp-analytics\" src=\"https://cdn.ampproject.org/v0/amp-analytics-0.1.js\"></script>\n         {{/if}}\n         {{#block \"amp-scripts\"}}{{/block}}"
                            header:
                              title: templates/layout/amp.html
                            config:
                              highlightRange:
                                - from: '4'
                                  to: '4'
                              mode: js
                          - type: text
                            data: >-
                              In
                              [config.json](https://github.com/bigcommerce/cornerstone/blob/master/config.json)
                              (referenced below) make sure `google_amp` is still
                              in the features array. See below for code snippet.
                          - type: code
                            data: |2-
                                "features": [
                                    "fully_responsive",
                                    "mega_navigation",
                                    "multi_tiered_sidebar_menu",
                                    "masonry_design",
                                    "frontpage_slideshow",
                                    "quick_add_to_cart",
                                    "switchable_product_view",
                                    "product_comparison_table",
                                    "complex_search_filtering",
                                    "customizable_product_selector",
                                    "cart_suggested_products",
                                    "free_customer_support",
                                    "free_theme_upgrades",
                                    "high_res_product_images",
                                    "product_filtering",
                                    "advanced_quick_view",
                                    "product_showcase",
                                    "persistent_cart",
                                    "one_page_check_out",
                                    "product_videos",
                                    "google_amp",
                                    "customized_checkout"
                                  ]
                            header:
                              title: config.json
                            config:
                              mode: json
                          - type: text
                            data: >-
                              If you are having any implementation issues,
                              review the [full Pull Request
                              #964](https://github.com/bigcommerce/cornerstone/pull/946/files)
                              for changes that need to be made to implement
                              Google AMP. 
                          - type: text
                            data: >
                              ## Location of AMP Files within Cornerstone



                              In versions 1.6.0+ of Cornerstone, there are a few
                              key file locations where the AMP information is
                              located:


                              * Base AMP layout template is located in
                              [templates/layout/amp.html](https://github.com/bigcommerce/cornerstone/blob/master/config.json).

                              * The files for Google AMP are located in
                              [/templates/pages/amp](https://github.com/bigcommerce/cornerstone/tree/master/templates/pages/amp).
                              This is where `product.html` and `category.html`
                              are located. (Note: there may be other files in
                              this folder, but the product and category pages
                              are the only one pages that currently support
                              Google AMP).

                              * The CSS is located in
                              [templates/components/amp/css](https://github.com/bigcommerce/cornerstone/tree/master/templates/components/amp/css).


                              After the Google Analytics ID has been added via
                              Control Panel, you can toggle AMP on the product
                              and category pages using the
                              [settings](https://support.bigcommerce.com/articles/Public/Google-AMP?_ga=2.205799699.1406470381.1541441523-967431010.1523308107)
                              there.
                            header:
                              anchor: google-amp_location-of-amp-files
                          - type: text
                            data: >-
                              ## Local Testing


                              You are able to test your AMP enabled pages at the
                              following endpoints when running your store
                              locally:


                              * `localhost:3000/amp/category_url/`

                              * `localhost:3000/amp/product_url/`
                            header:
                              anchor: google-amp_local-testing
                          - type: text
                            data: >-
                              ## Additional Resources


                              * [Adding Analytics to your AMP
                              Pages](https://developers.google.com/analytics/devguides/collection/amp-analytics/)

                              * [Adding Google AMP in the Control
                              Panel](https://support.bigcommerce.com/articles/Public/Google-AMP?_ga=2.228533533.1406470381.1541441523-967431010.1523308107)

                              * [Google AMP Home
                              Page](https://www.ampproject.org/)

                              * [Google Developer AMP
                              Resources](https://developers.google.com/amp/)
                            header:
                              anchor: google-amp_additional-resources
                    - title: Using Disqus with Stencil
                      route:
                        path: /using-disqus-with-stencil
                      data:
                        blocks:
                          - type: html
                            data: <h1>Using Disqus with Stencil</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#using-disqus_disqus-overview\">Disqus Overview</a></li>\n    <li><a href=\"#using-disqus_stencil-blog\">Integrating Disqus with your Stencil blog</a></li>\n    <li><a href=\"#using-disqus_stencil-product-pages\">Integrating Disqus with your Stencil Product Pages</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Disqus Overview 


                              Stencil themes have the ability to integrate with
                              Disqus, a third party commenting system that
                              allows users to leave blog comments on blog posts
                              made with Stencil's Built-In Blog. Disqus can also
                              be used with on Stencil product pages to allow
                              comment and review threads on individual products.
                            header:
                              anchor: using-disqus_disqus-overview
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              ## Integrating Disqus with your Stencil blog


                              To use Disqus blog comments in Stencil, follow the
                              steps below:


                              1. Log in to your BigCommerce Control Panel

                              2. Navigate to Storefront Design > My Themes

                              3. Open Edit Theme Files for your theme

                              4. Navigate to Templates > Pages > blog-post.html

                              5. Paste your Disqus Universal Code before the
                              closing {{/partial}} tag

                              6. Save your files

                              7. Apply your theme
                            header:
                              anchor: using-disqus_stencil-blog
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Integrating Disqus with your Stencil Product
                              Pages


                              1. Log in to your BigCommerce Control Panel

                              2. Navigate to Storefront Design > My Themes

                              3. Open Edit Theme Files for your theme

                              4. Navigate to Templates > Pages > product.html

                              5. Paste your Disqus Universal Code before the
                              closing {{/partial}} tag

                              6. In the Disqus Universal Code that you have
                              posted, there is a function that reads like below:


                              ```
                               var disqus_config = function () {
                                      this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
                                      this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
                                  };
                              ```


                              Change the value of this.page.url to be
                              `product.url;`, and the value of
                              this.page.identifier to be `product.id`; so that
                              the function now reads like below:


                              ```

                              var disqus_config = function () {
                                      this.page.url = product.url;
                                      this.page.identifier = product.id;
                                  };
                              ```


                              7. Save your files

                              8. Apply your theme
                            header:
                              anchor: using-disqus_stencil-product-pages
                          - type: text
                            data: >-
                              ## Additional Resources

                              * [Enabling Disqus for Product Reviews
                              (Blueprint)](https://forum.bigcommerce.com/s/article/How-do-I-enable-Disqus-as-my-Comment-Service?_ga=2.224340315.1984523106.1539568940-967431010.1523308107#get-code)

                              * [Using Disqus for Blog
                              Comments](https://forum.bigcommerce.com/s/article/Using-Disqus-Comments?_ga=2.224340315.1984523106.1539568940-967431010.1523308107)
                  blocks: []
              - title: Custom Templates
                route:
                  path: /custom-templates
                data:
                  children:
                    - title: About Custom Templates
                      route:
                        path: /about-custom-templates
                      data:
                        blocks:
                          - type: html
                            data: <h1>About Custom Templates</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#custom-templates_about-custom\">About Custom Templates</a></li>\n\t\t<li><a href=\"#custom-templates_stencil-versus-blueprint\">Stencil versus Blueprint Themes</a></li>\n    <li><a href=\"#custom-templates_video-demo\">Video Demo</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >
                              ## About Custom Templates


                              The Stencil framework allows theme developers and
                              merchants to assign custom layout templates to
                              storefront pages of the following types:


                              * Brand

                              * Category

                              * Product

                              * Page (meaning "Web Pages" – the BigCommerce
                              control panel's designation for static store
                              pages, which can include the store's home page)
                            header:
                              anchor: custom-templates_about-custom
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Stencil versus Blueprint Themes


                              If you are migrating from BigCommerce's legacy
                              Blueprint themes framework, please keep in mind
                              these differences in how Stencil handles custom
                              templates:


                              * The brand option is entirely new in Stencil. If
                              you are running on a Blueprint theme, you will not
                              be able to create a custom template for brand
                              pages.

                              * Unlike Blueprint, Stencil does not require that
                              custom templates' file names start with an
                              underscore (_).

                              * In the current Stencil release, you must create
                              and bundle custom templates using Stencil CLI
                              before you can upload the custom templates to
                              stores. However, once you have created and
                              uploaded templates, authorized store users can
                              assign them to storefront pages through the
                              control panel.
                            header:
                              anchor: custom-templates_stencil-versus-blueprint
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Video Demo


                              <iframe width="560" height="315"
                              src="https://www.youtube.com/embed/qgaDX7bhmd8"
                              frameborder="0" allow="autoplay; encrypted-media"
                              allowfullscreen></iframe>
                            header:
                              anchor: custom-templates_video-demo
                    - title: 'Authoring, Testing, & Uploading Custom Templates'
                      route:
                        path: /authoring-testing-uploading-custom-templates
                      data:
                        blocks:
                          - type: html
                            data: >-
                              <h1>Authoring, Testing, and Uploading Custom
                              Templates</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#authoring-testing-uploading_authoring\">Authoring Templates</a></li>\n    <li><a href=\"#authoring-testing-uploading_local-mapping\">Local Mapping and Testing</a></li>\n\t\t<li><a href=\"#authoring-testing-uploading_theme-upload\">Theme Upload</a></li>\n\t\t<li><a href=\"#authoring-testing-uploading_troubleshooting\">Troubleshooting Template Authoring</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Authoring a Custom Template


                              As a the theme developer, you must first create
                              the `custom` subdirectory in the `templates/pages`
                              directory, and four required subdirectories inside
                              of it (brand, category, product, page), which will
                              result in the following directory paths:


                              * templates/pages/custom/brand 

                              * templates/pages/custom/category

                              * templates/pages/custom/product

                              * templates/pages/custom/page


                              Next,  create the template HTML files, and then
                              place them in the appropriate
                              `<theme-name>/templates/pages/custom/`
                              subdirectories corresponding to the types listed
                              above. 
                            header:
                              anchor: authoring-testing-uploading_authoring
                          - type: callout
                            data:
                              type: warning
                              body: >-
                                Be sure to set permission `755 (drwxr-x-r-x)` on
                                any new subdirectories that you add.

                                Also, be sure to set permission `644 (rw-r–r–)`
                                on any new files that you add.


                                Without these permissions, running your theme
                                locally will fail with multiple error messages.

                                Bundling your theme will also fail, blocking its
                                upload to a store.
                              title: Subdirectory/File Permissions Required
                          - type: text
                            data: '---'
                          - type: text
                            data: "## Local Mapping and Testing\n\nTo test your custom templates locally, you must edit your `<theme-name>/.stencil` file to create mappings between each local template and a corresponding URL. Within the `.stencil` file, look for the following section:\n\n```\n\"customLayouts\": {\n    \"product\": {},\n    \"brand\": {},\n    \"category\": {},\n    \"page\": {}\n  }\n```\n\nIn this section, you would populate keys to create mappings. As a simple example, assume that you have a product custom template named alternate-`product.html`, and you want to see that template locally at the URL: http://localhost:3000/test-url/. In this case, you must populate the product key as follows:\n\n```\n    \"product\": {\n    \t\"alternate-product.html\":\"/test-url/\"\n    },\n```\n\n### Expanded Mapping Example\n\nHere is a more-complete example in which the `brand`, `page`, and `category` keys are also populated:\n\n```\n{\n  \"normalStoreUrl\": \"http://cornerstone-light-demo.mybigcommerce.com\",\n  \"port\": 3000,\n  \"username\": \"stencil\",\n  \"token\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n  \"customLayouts\": {\n    \"product\": {\n      \"custom-product.html\": \"/custom-product/\"\n    },\n    \"brand\": {\n      \"custom-brand.html\": \"/brands/custombrand/\"\n    },\n    \"page\": {\n      \"custom-page.html\": \"/custom-page/\"\n    },\n    \"category\": {\n      \"custom-category.html\": \"/custom-category/\"\n    }\n  }\n}\n```\n\n### Mapping Requirements and Options\n\nIn the .stencil mapping examples above:\n\n* Each mapped URL must be a URL for a brand, category, product, or static page that is _already configured in the store_. This means that you cannot insert a placeholder URL that is an arbitrary string of letters, such as /abcdefghijklmnop/.\n* Each URL’s trailing slash is _optional_.\n* The HTML files must reside in either the brand, category, product, or page subdirectories.\n* All brand URLs are nested under the /brands/ parent. Use URL encoding with brand URLs.\n* That parent for brand URLs is /brands/ (plural), while the corresponding subdirectory for HTML files is /brand/ (singular).\n* After editing your `.stencil` file, you must restart stencil to see your changes locally. Enter `stencil start` on the command line, appending any appropriate switches for your workflow (e.g.: `stencil start -e -n`).\n\n### Why These URL Requirements?\n\nWhen you create a local custom template page for products, you expect that page to have access to all Stencil product objects. However, the server cannot readily determine the page type of each local custom template. So we give it a hint: We instruct the server to look at the page type of the URL to which you have mapped the template.\n\nIn the above `.stencil` configuration example’s final entry, the server will look at the URL `/custom‑category/` within the store, deduce that the page type is `category`, and return a category context to Stencil CLI. This allows Stencil CLI to properly display the page in the browser when you visit http://localhost:3000/custom‑category/ locally, or when shoppers visit the corresponding public store page.\n\n### Mapping Multiple URLs\nBeyond the single URL mapped to each template in the above examples, you have the option of mapping an array of URLs to each template. This is shown in the following example for the product template:\n\n```\n  \"customLayouts\": {\n    \"product\": {\n      \"featured-product.html\": [\"/special-product-one\", \"/special-product-two\"],\n      \"clearance-product.html\": \"/clearance-product\"\n    },\n    \"brands\": {},\n    \"categories\": {},\n    \"page\": {}\n  }\n}\n```"
                            header:
                              anchor: authoring-testing-uploading_local-mapping
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Theme Upload


                              Finally, you must bundle and upload the theme to
                              BigCommerce. See the Bundling and Uploading a
                              Theme article for instructions on how to achieve
                              this.
                            header:
                              anchor: authoring-testing-uploading_theme-upload
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Troubleshooting Template Authoring


                              Here are solutions to some known problems in
                              locally authoring and testing custom templates:


                              ### Viewing Custom Brand Templates Locally


                              If you are having trouble viewing custom brand
                              templates locally, ensure that the URL used in
                              your .stencil file is of the form:
                              /brands/brandname. This is necessary because all
                              the brand pages are located under the /brands/ URL
                              path.

                              Also, bear in mind that currently, all brand URLs
                              are Unicode-encoded. So, for example, you should
                              replace a hyphen with: %252d.


                              ### Outdated Stencil CLI


                              If you have an old version of Stencil CLI
                              installed, it might lack support for custom
                              templates. You can easily update your CLI by
                              executing the following command:


                              `npm install -g bigcommerce/stencil-cli`
                            header:
                              anchor: authoring-testing-uploading_troubleshooting
                    - title: Assigning Templates to Pages
                      route:
                        path: /assigining-templates-to-pages
                      data:
                        blocks:
                          - type: html
                            data: <h1>Assigning Templates to Pages</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#assigning_merchant-performed\">Merchant Performed Actions</a></li>\n\t\t<li><a href=\"#assigning_assigning-a-web-page\">Assigning a Web Page Template</a></li>\n    <li><a href=\"#assigning_assigning-a-product\">Assigning a Product, Brand, or Category Template</a></li>\n    <li><a href=\"#assigning_troubleshooting\">Troubleshooting Template Assignments</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Merchant Performed Actions


                              Once the developer has uploaded a theme to
                              BigCommerce, the merchant (or other authorized
                              store user) can assign custom templates to
                              individual store pages in the BigCommerce Control
                              Panel. The steps are similar whether assigning
                              brands, categories, products, and static Web pages
                              – with slight differences. Below, we show examples
                              for assigning a Web Page and a Category. For
                              further details, please see the [Stencil Custom
                              Templates Knowledge Base
                              article](https://forum.bigcommerce.com/s/article/Stencil-Themes#custom-template).
                            header:
                              anchor: assigning_merchant-performed
                          - type: text
                            data: >-
                              ## Assigining a Web Page Template


                              Starting from the BigCommerce control panel's left
                              navigation pane:


                              1. Select `Storefront` > `Web Pages`.

                              2. From the resulting `View Web Pages` display,
                              select the existing Page 

                              3. Name to which you want to assign a custom
                              template. (Or select `Create a Web Page` to define
                              a new page.)

                              4. From the resulting `Edit a Web Page` display,
                              scroll down to the `Template Layout File`
                              drop-down list. Then select your desired custom
                              template from that list, as shown below.
                            header:
                              anchor: assigning_assigning-a-web-page
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1539930165487
                            config:
                              centered: true
                              fluid: true
                              bordered: true
                              maxWidth: '600'
                              maxHeight: '400'
                          - type: callout
                            data:
                              body: >-
                                Some static page types do not allow you to
                                assign custom templates. You can recognize these
                                excluded pages because their `Edit a Web Page`
                                display will not include a `Template Layout
                                File` drop-down list.
                              title: Static Pages You Can't Assign
                              type: warning
                          - type: text
                            data: >
                              ## Assigning a Product, Brand, or Category
                              Template


                              Starting from the BigCommerce control panel's left
                              navigation pane:


                              1. Select `Products` > `View` (for a product page)
                              `Products` > `Product Categories` (for a category
                              page), or `Products` > `Brands` (for a brand
                              page).

                              2. Select the Product Name, Category Name, or
                              Brand Name to which you want to assign a custom
                              template. (Or select the `Add` or `Create` button
                              at the upper left to define a new product,
                              category, or band.)

                              3. For a product page (only), you must select the
                              `Other Details` tab to proceed to the next step.

                              4. Scroll to the `Template Layout File` drop-down
                              list, and select your desired custom template from
                              that list, as shown below for a Category
                              assignment.

                              5. Click the Save & Exit or Save & Keep Editing
                              button at the lower right.
                            header:
                              anchor: assigning_assigning-a-product
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1539930552310
                            config:
                              fluid: true
                              centered: true
                              bordered: true
                              maxWidth: '500'
                              maxHeight: '200'
                          - type: text
                            data: >-
                              ## Troubleshooting Template Assignments


                              In case of problems a custom template in the
                              control panel: Check whether your theme's root
                              directory contains a file named `manifest.json`.

                              If you theme's root directory contains the file,
                              perofrm the following:

                              * delete the `manifest.json` file

                              * bundle the theme again with the `stencil bundle`
                              command

                              * upload the theme

                              * apply the theme


                              This should enable assigning the template in the
                              control panel.
                            header:
                              anchor: assigning_troubleshooting
                    - title: Customizing Invoices
                      route:
                        path: /customizing-invoices
                      data:
                        blocks:
                          - type: html
                            data: <h1>Customizing Invoices</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#customizing_email\">Customizing the Email Invoice Template</a></li>\n\t\t<li><a href=\"#customizing_merchant\">Customizing the Merchant Printable Invoice</a></li>\n    <li><a href=\"#customizing_customer\">Customizing the Customer Printable Invoice</a></li>\n\t</ul>\n</div>"
                          - type: callout
                            data:
                              body: >-
                                The email invoice (invoice_email.html) is part
                                of Email Templates in the Control Panel. Editing
                                email templates is covered in the BigCommerce
                                Knowledge Base
                                [here](https://support.bigcommerce.com/articles/Public/Customizing-Emails?_ga=2.195511786.718421096.1540222570-967431010.1523308107#editing-email-templates).


                                Typically, edits made through the Control Panel
                                will be explicitly covered in the BigCommerce
                                Knowledge Base. However, since the particular
                                email template we are looking at is the invoice
                                template and this article covers customization
                                of all invoices, it is also covered in this
                                article.
                              title: ' Email Invoice as apart of Email Templates'
                          - type: text
                            data: >-
                              ## Customizing the Email Invoice Template


                              The email invoice template is the contents of the
                              email that is sent to a customer after an order
                              has been completed. The email invoice can be
                              edited in the Control Panel in `Storefront` >
                              `Email Templates` > `invoice_email.html`
                            header:
                              anchor: customizing_email
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1540376724645
                          - type: text
                            data: >-
                              After clicking the `edit` button on the right, the
                              WYSIWYG Editor will appear. Follow the BigCommerce
                              [Knowledge Base
                              Article](https://support.bigcommerce.com/articles/Public/Invoices?&_ga=2.89197149.718421096.1540222570-967431010.1523308107#custom)
                              to complete customization of the Invoice Email
                              template.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Customizing the Merchant Printable Invoice


                              The Merchant Printable Invoice is the invoice that
                              can be printed from the control panel in `Orders`
                              > `View`. Clicking the `...` in the Action column
                              will generate a list of options, one option being
                              `Print Invoice`.
                            header:
                              anchor: customizing_merchant
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1540376852310
                            config:
                              centered: true
                              fluid: true
                              bordered: true
                              maxWidth: '200'
                              maxHeight: '600'
                          - type: text
                            data: >-
                              The invoice that is generated by clicking Print
                              Invoice here relies on a template and variables
                              from BigCommerce's legacy Blueprint themes
                              framework. This invoice can be customized by
                              performing the following steps:


                              1. Download the
                              [invoice_printable.zip](https://storage.googleapis.com/bigcommerce-production-dev-center/template-files/invoice_printable.zip)
                              file, which contains the skeleton of a printable
                              invoice.


                              2. Open the file in the text editor of your choice
                              and edit the HTML file to match your desired
                              customization.
                          - type: callout
                            data:
                              body: >+
                                To navigate through the Blueprint variables
                                contained in the HTML skeleton, please see [this
                                reference
                                material](https://developer.bigcommerce.com/themes/blueprint/?_ga=2.194005739.718421096.1540222570-967431010.1523308107#store-wide-global-variables).

                              title: |2
                                 Blueprint Variables and Customization
                          - type: text
                            data: >-
                              3. In the control panel, set your theme's checkout
                              type to `Custom one-page checkout (for
                              developers)`.


                              (Use the steps in [this support
                              article](https://support.bigcommerce.com/articles/Public/Checkout-Settings?_ga=2.86510302.718421096.1540222570-967431010.1523308107).)


                              4. [Use
                              WebDAV](https://support.bigcommerce.com/articles/Public/How-do-I-add-and-link-to-a-file-in-my-store?_ga=2.200813032.718421096.1540222570-967431010.1523308107#upload-a-file)
                              to upload your customized HTML file to WebDAV's
                              `/template/Snippets/` folder.


                              * This folder becomes available once you enable
                              Custom one-page checkout (for developers).

                              * For specific steps, please see [this support
                              article](https://support.bigcommerce.com/articles/Public/File-Access-WebDAV/?q=webdav&l=en_US&fs=Search&pn=1&_ga=2.200813032.718421096.1540222570-967431010.1523308107).

                              * Also see [this
                              page](/stencil-docs/prepare-and-upload-a-theme/shrinking-your-theme)
                              about using WebDAV with Stencil themes.

                              * We recommend the freeware WebDAV client
                              CyberDuck (Windows and Mac OS), for which your
                              store's control panel offers a downloadable
                              connection file prefilled with most store
                              credentials.


                              5. Once you have completed the above steps, you
                              are free to switch your theme's checkout type to
                              `One-page checkout` or `Optimized one-page
                              checkout`.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Customizing the Customer Printable Invoice


                              The customer printable invoice is the printable
                              invoice that is available on a storefront’s order
                              page for **shoppers that have registered accounts
                              with your store**.
                            header:
                              anchor: customizing_customer
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1540377767108
                          - type: text
                            data: >-
                              This invoice becomes available in a shopper’s
                              orders after completing an order. A shopper can
                              generate this invoice by clicking `Print Invoice`
                              on the right-hand side of the page.


                              As a developer, you can customize this invoice by
                              editing your theme’s `invoice.html` file that is
                              present in your theme's files. In Cornerstone,
                              this file is located in
                              `/cornerstone/templates/pages/account/orders/invoice.html`.
                    - title: Customizing Printable Packing Slips
                      route:
                        path: /customizing-printable-packing-slips
                      data:
                        blocks:
                          - type: html
                            data: <h1>Customizing Printable Packing Slips</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#customizing_packing\">Customizing Printable Packing Slips</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Customizing Printable Packing Slips


                              Customizing your Stencil theme's printable packing
                              slips currently requires a workaround, which
                              relies on a template and variables from
                              BigCommerce's legacy Blueprint themes framework.
                              Here are the workaround steps:


                              1. Download [this printable packing slip .zip
                              file](https://storage.googleapis.com/bigcommerce-production-dev-center/template-files/packing_slip_printable.zip),
                              which contains the skeleton of a printable packing
                              slip.


                              2. Edit the HTML file to match your desired
                              customization.


                              (To navigate through the Blueprint variables
                              contained in the HTML skeleton, please see the
                              reference material starting here.)


                              3. Set your theme's checkout type to Custom
                              one-page checkout (for developers).


                              (Use the steps in this [BigCommerce Support
                              article about
                              WebDAV](https://support.bigcommerce.com/articles/Public/File-Access-WebDAV/).)


                              4. [Use
                              WebDAV](https://support.bigcommerce.com/articles/Public/File-Access-WebDAV/)
                              to upload your customized HTML file to WebDAV's
                              `/template/` folder.


                              * This folder becomes available once you enable
                              `Custom one-page checkout (for developers)`.

                              * For specific steps, see our [Support article
                              about
                              WebDAV](https://support.bigcommerce.com/articles/Public/File-Access-WebDAV/)

                              * Also see [Shrinking Your Theme by Excluding
                              Static
                              Assets](https://developer.bigcommerce.com/stencil-docs/prepare-and-upload-a-theme/shrinking-your-theme)
                              to learn more about using WebDAV with Stencil
                              themes.

                              * We recommend the freeware WebDAV client
                              [CyberDuck](https://cyberduck.io/) (Windows and
                              Mac OS), for which your store's control panel
                              offers a downloadable [connection
                              file](https://forum.bigcommerce.com/s/article/File-Access-WebDAV#login-info)
                              prefilled with most store credentials.


                              5. Once you have completed the above steps, you
                              are free to switch your theme's checkout type to

                              `One-page checkout` or `Optimized one-page
                              checkout`.
                            header:
                              anchor: customizing_packing
              - title: Customize Stencil Checkout
                route:
                  path: /customize-stencil-checkout
                data:
                  children:
                    - title: Stored Credit Card Management
                      route:
                        path: /stored-credit-card-management
                      data:
                        blocks:
                          - type: html
                            data: <h1>Stored Credit Card Management</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#stored-cc-mgmt_overview\">Overview</a></li>\n    <li><a href=\"#stored-cc-mgmt_adding\">Adding Stored Credit Card Management to Your Custom Theme</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >+
                              ## Overview


                              Cornerstone versions 2.6.0+ include the ability to
                              manage [Stored Credit
                              Cards](https://support.bigcommerce.com/s/article/Enabling-Stored-Credit-Cards).


                              Previously, stored credit card management was only
                              accessible via the payment portion of checkout.
                              With the addition of Stored Credit Card
                              management, logged-in shoppers will now be able to
                              manage their stored credit cards from the My
                              Account page of the storefront. In the Cornerstone
                              theme, shoppers with store accounts will have the
                              ability to add new cards, delete cards, select a
                              default card, and edit the billing details of
                              existing cards from their customer account area of
                              your storefront.


                              Card data is stored securely with the payment
                              gateway.

                            header:
                              anchor: stored-cc-mgmt_overview
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1541629003006
                            header:
                              title: 'Stored Credit Card Management '
                            config:
                              centered: true
                              fluid: true
                              bordered: true
                              maxWidth: '500'
                              maxHeight: '500'
                          - type: callout
                            data:
                              type: warning
                              body: >-
                                After adding a card, shoppers will only be able
                                to modify the billing address. If other credit
                                card details need to be modified (such as
                                expiration date), the shopper must delete and
                                readd the card.
                              title: Editing Limitations
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Adding Stored Credit Card Management to Your
                              Custom Theme


                              Stored Credit Card Management was added to
                              Cornerstone in [pull request
                              #1376](https://github.com/bigcommerce/cornerstone/pull/1376).
                              To add Stored Credit Cards to pre-2.6.0
                              Cornerstone or Marketplace themes, copy the
                              changes from [PR
                              #1376](https://github.com/bigcommerce/cornerstone/pull/1376)
                              to your theme. This section will walk through
                              [each individual
                              commit](https://github.com/bigcommerce/cornerstone/pull/1376/commits),
                              highlighting the changes that you will need to
                              make to your template files.
                            header:
                              anchor: stored-cc-mgmt_adding
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              1. [Add the Payment Methods page to the shopper's
                              Account](https://github.com/bigcommerce/cornerstone/pull/1376/commits/24abc038fe346a8572b40da40c98a9465788957a)


                              _The code changes in this step:_


                              * Create the new Payment Methods page on a
                              shopper's account by modifying the `lang/en.json`,
                              `templates/components/account/navigation.html`,
                              and `templates/pages/account/payment-methods.html`
                              files
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1541629154209
                            header:
                              title: Payment Methods Page Addition Example
                            config:
                              centered: true
                              bordered: true
                              fluid: true
                              maxWidth: '700'
                              maxHeight: '700'
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              2. [Add Translations for Payment Methods
                              Titles](https://github.com/bigcommerce/cornerstone/pull/1376/commits/9edf1a0f6907811abf470db1486b4fdb199b27ae)


                              *The code changes in this step:*


                              * Make the Payments Method page translatable by
                              modifying the `lang/en.json` and
                              `templates/components/account/navigation.html`
                              files
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              3. [Include the Credit Card listing, initially
                              without the add, edit, and delete
                              actions](https://github.com/bigcommerce/cornerstone/pull/1376/commits/5574eb98c710f4540e8390420563099b6f5710bf)


                              *The code changes in this step:*


                              * Group the credit cards by payment providers

                              * Include the payment method icons

                              * Account for mobile and desktop layouts

                              * Account for translations


                              *Icons have been used to identify the credit card
                              **type**. The data only provides the card brand in
                              the credit card details.*
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1541630407609
                            config:
                              maxWidth: '600'
                              maxHeight: '600'
                              centered: true
                              fluid: true
                              bordered: true
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              4. [Add the Credit Card Actions (i,e,e Add, Edit,
                              and
                              Delete)](https://github.com/bigcommerce/cornerstone/pull/1376/commits/499016d320995852fe4ef621724e08556896b70d)


                              *The code changes in this step:*


                              *  add `Edit`, `Delete`, and `Add` buttons
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1541655663898
                            header:
                              title: 'Implementation of Add, Edit, and Delete Methods'
                            config:
                              centered: true
                              fluid: true
                              bordered: true
                              maxWidth: '500'
                              maxHeight: '500'
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              5. [Implement the `Delete Payment`
                              Method](https://github.com/bigcommerce/cornerstone/pull/1376/commits/cf102901d9061b7334e8c39f15a8904c37cf0652)


                              *The code changes in this step:*


                              * Bind the delete button's front end and back end


                              First, the click will trigger window confirm. The
                              confirmation modal has been added to prevent
                              unintended action. Then, on confirming, a post
                              request will be sent. The action is initiated
                              through a localized form post request in the
                              template which uses a
                              [`delete_url`](https://github.com/bigcommerce/cornerstone/blob/master/templates/components/account/payment-methods-list.html#L34)
                              key provided in the credit card details data.
                              Finally, there will be a redirect to the credit
                              card listing.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              6. [Implement the `Edit Payment`
                              Method](https://github.com/bigcommerce/cornerstone/pull/1376/commits/ab2fe1df455fa8ac93760904b718fbce7ce361ed)


                              *The code changes in this step:*


                              * Add the design for credit card details and the
                              edit billing address form, synced with existing
                              address fields validation


                              *The action is initiated via a
                              [redirect](https://github.com/bigcommerce/cornerstone/blob/master/templates/components/account/payment-methods-list.html#L36)
                              to the edit page. The page uses HTML, CSS, and
                              JavaScript for the billing address validation. The
                              "name on card" label and values are also removed,
                              as we do not store name along with the vaulted
                              credit card. The full
                              [edit-payment-method.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/account/edit-payment-method.html)
                              can be viewed in the Cornerstone Github Repo.*
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1541654303488
                            header:
                              title: Edit Payment Method Form
                            config:
                              centered: true
                              bordered: true
                              fluid: true
                              maxHeight: '500'
                              maxWidth: '500'
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              7. [Implement the `Add Payment`
                              Method](https://github.com/bigcommerce/cornerstone/pull/1376/commits/c960338c32faa8fb798b2826c72dfe9d74bf9751)


                              *The code changes in this step:* 


                              *  Adding new icon `lock.svg`

                              *  Unify the CSS classes for the add and edit
                              form.

                              *  Add a new template for edit form with an
                              injection of global variables into context.

                              *  Extend the `account.js` file with a new method
                              to initiate credit card and billing address fields
                              validations, mapping form fields name and value to
                              body request.

                              *  Add a `payment-method.js` file for credit card
                              validations and helpers with unit test.


                              *The add form will use ajax to validate and submit
                              the credit card details (this differs from the way
                              the edit form validates and submits). The
                              [payment-method.js
                              file](https://github.com/bigcommerce/cornerstone/blob/master/assets/js/theme/common/payment-method.js)
                              has been designed to be dragged and used in themes
                              to simplify its implementation.*


                              *The [add-payment-method.html
                              template](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/account/add-payment-method.html)
                              also requires some customization because variables
                              need to pass through handlebars in order to be
                              used by JavaScript. From [line 20 to 25 of the
                              template](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/account/add-payment-method.html#L20-L25),
                              we store variables, mostly for building the
                              request url and header. The request body will
                              directly use the form data. [More validations and
                              extra
                              mapping](https://github.com/bigcommerce/cornerstone/blob/24686de577c6ad5409ec8b82f5839c3d083cb760/assets/js/theme/account.js#L211)
                              are added to the `add-payment-method.html`
                              template as well.*
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1541629295212
                            header:
                              title: >-
                                Example of the addition of the Add Payment
                                Method
                            config:
                              centered: true
                              fluid: true
                              bordered: true
                              maxWidth: '500'
                              maxHeight: '700'
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              8. [Add the default Instrument for the add/edit
                              Payment
                              Method](https://github.com/bigcommerce/cornerstone/pull/1376/commits/5576aee5af0194e85cb11dbf44563f89b2687f40)


                              _The code changes in this step:_


                              * Add HTML and CSS for a single checkbox, default
                              instrument

                              * Capture form data on ADD and transform to
                              boolean

                              * Fix HTML credit card for tabulation navigation

                              * Fix for states reload list via AJAX
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1541655424566
                            header:
                              title: >-
                                Add default instrument checkbox to edit and add
                                form
                            config:
                              maxWidth: '400'
                              maxHeight: '400'
                              centered: true
                              fluid: true
                              bordered: true
                          - type: callout
                            data:
                              body: >-
                                Since this feature involves heavy code changes,
                                it may be easier to merge the necessary code
                                into your theme by utilizing Github's automated
                                process for syncing a fork. See Github's
                                documentation on [Syncing a
                                Fork](https://help.github.com/articles/syncing-a-fork/)
                                for more details on this method.
                              title: |
                                Utilizing Github Automation to Merge the Changes
                    - title: PayPal Smart Buttons
                      route:
                        path: /paypal-smart-buttons
                      data:
                        blocks:
                          - type: html
                            data: <h1>PayPal Smart Buttons</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#paypal-smart_overview\">PayPal Smart Buttons Overview</a></li>\n    <li><a href=\"#paypal-smart_include-smart-buttons\">Include Smart Buttons on a Stencil Theme</a></li>\n    <li><a href=\"#paypal-smart_mutually-exclusive\">Mutually Exclusive Options</a></li>\n    <li><a href=\"#paypal-smart_additional-resources\">Additional Resources</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## PayPal Smart Buttons Overview


                              PayPal Smart Buttons are available on Cornerstone
                              versions 2.6.0+. Theme developers can enable Smart
                              Buttons on a custom Stencil theme by adding
                              settings to the `config.json` file. Merchants will
                              have the ability to customize some style aspects
                              of the PayPal payment buttons at checkout using
                              Theme Editor/Store Design for stores that have
                              PayPal powered by Braintree enabled. In order to
                              make PayPal Smart Buttons customizable through
                              Theme Editor/Store Design, a theme developer will
                              need to make its customization properties
                              available by adding its schema to the
                              `schema.json` file. 
                            header:
                              anchor: paypal-smart_overview
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Enable Smart Buttons on Your Stencil Theme


                              To enable Smart Buttons on Cornerstone versions
                              pre-2.6.0 or Marketplace themes, append the
                              following highlighted `paymentbuttons` settings to
                              the `settings` object within your `config.json`
                              file:
                            header:
                              anchor: paypal-smart_include-smart-buttons
                          - type: code
                            data: |2-
                               "settings": {
                                  "...",
                                  "color_badge_product_sale_badges": "#007dc6",
                                  "color_text_product_sale_badges": "#ffffff",
                                  "color_hover_product_sale_badges": "#000000",
                                  "restrict_to_login": false,
                                  "swatch_option_size": "22x22",
                                  "social_icon_placement_top": false,
                                  "social_icon_placement_bottom": "bottom_none",
                                  "geotrust_ssl_common_name": "",
                                  "geotrust_ssl_seal_size": "M",
                                  "navigation_design": "simple",
                                  "price_ranges": true,
                                  "pdp-price-label": "",
                                  "pdp-sale-price-label": "Now:",
                                  "pdp-non-sale-price-label": "Was:",
                                  "pdp-retail-price-label": "MSRP:",
                                  "paymentbuttons-paypal-layout": "horizontal",
                                  "paymentbuttons-paypal-color": "gold",
                                  "paymentbuttons-paypal-shape": "pill",
                                  "paymentbuttons-paypal-size": "small",
                                  "paymentbuttons-paypal-label": "checkout",
                                  "paymentbuttons-paypal-tagline": true,
                                  "paymentbuttons-paypal-fundingicons": false
                                },
                            header:
                              subtitle: config.json
                              title: '"settings" object'
                            config:
                              mode: json
                              highlightRange:
                                - from: '18'
                                  to: '24'
                          - type: callout
                            data:
                              type: warning
                              body: >-
                                Adding the above keys to the `config.json` file
                                will enable Smart Buttons on a Stencil theme,
                                however, the merchant will **not** be able to
                                customize button styles through Theme
                                Editor/Store Design unless setting
                                configurations are added to `schema.json`.
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              ## Making Smart Buttons Customizable via Theme
                              Editor/Store Design


                              Merchants who enable PayPal powered by Braintree
                              can customize PayPal Smart Buttons via the Theme
                              Editor or Store Design. As a theme developer, you
                              can enable PayPal Smart Button customization via
                              [Theme Editor/Store
                              Design](/stencil-docs/stencil-theme-editor/schema-json-metadata),
                              by appending the following object to the
                              `schema.json` file:
                          - type: code
                            data: |
                              {
                                    "name": "Payment Buttons",
                                    "enable": "smartButtons",
                                    "settings": [
                                        {
                                          "type": "checkbox",
                                          "label": "Show Paypal tagline",
                                          "force_reload": true,
                                          "id": "paymentbuttons-paypal-tagline"
                                        },
                                        {
                                          "type": "checkbox",
                                          "label": "Show funding icons",
                                          "force_reload": true,
                                          "id": "paymentbuttons-paypal-fundingicons"
                                        },
                                        {
                                            "type": "select",
                                            "label": "Button color",
                                            "id": "paymentbuttons-paypal-color",
                                            "force_reload": true,
                                            "options": [
                                              {
                                                "value": "gold",
                                                "label": "Gold"
                                              },
                                              {
                                                "value": "blue",
                                                "label": "Blue"
                                              },
                                              {
                                                "value": "silver",
                                                "label": "Silver"
                                              },
                                              {
                                                "value": "black",
                                                "label": "Black"
                                              }
                                            ]
                                        },
                                        {
                                            "type": "select",
                                            "label": "Button shape",
                                            "id": "paymentbuttons-paypal-shape",
                                            "force_reload": true,
                                            "options": [
                                              {
                                                "value": "pill",
                                                "label": "Pill"
                                              },
                                              {
                                                "value": "rect",
                                                "label": "Rectangle"
                                              }
                                            ]
                                        },
                                        {
                                            "type": "select",
                                            "label": "Button size",
                                            "id": "paymentbuttons-paypal-size",
                                            "force_reload": true,
                                            "options": [
                                              {
                                                "value": "small",
                                                "label": "Small"
                                              },
                                              {
                                                "value": "medium",
                                                "label": "Medium"
                                              },
                                              {
                                                "value": "large",
                                                "label": "Large"
                                              },
                                              {
                                                "value": "responsive",
                                                "label": "Responsive"
                                              }
                                            ]
                                        },
                                        {
                                            "type": "select",
                                            "label": "Button content",
                                            "id": "paymentbuttons-paypal-label",
                                            "force_reload": true,
                                            "options": [
                                              {
                                                "value": "checkout",
                                                "label": "Paypal Checkout"
                                              },
                                              {
                                                "value": "pay",
                                                "label": "Pay with Paypal"
                                              },
                                              {
                                                "value": "buynow",
                                                "label": "Buy Now"
                                              },
                                              {
                                                "value": "paypal",
                                                "label": "Paypal"
                                              }
                                            ]
                                        },
                                        {
                                          "type": "select",
                                          "label": "Display style",
                                          "id": "paymentbuttons-paypal-layout",
                                          "force_reload": true,
                                          "options": [
                                            {
                                              "value": "horizontal",
                                              "label": "Show buttons horizontally"
                                            },
                                            {
                                              "value": "vertical",
                                              "label": "Show buttons vertically"
                                            }
                                          ]
                            header:
                              subtitle: schema.json
                              title: >-
                                Addition to schema.json file in order to enable
                                Theme Editor/Store Design customization
                            config:
                              mode: json
                          - type: callout
                            data:
                              body: >-
                                Some customization options are mutually
                                exclusive, meaning when used in combination with
                                other customization options, the smart button
                                button will completely fail to render on the
                                page. 


                                All mutually exclusive options are tied to the
                                layout setting `vertical.` If your layout
                                setting is `vertical,` take note of the
                                following customization **restrictions**:


                                * If you have a layout setting of `vertical`,
                                you **can not** have a button size of `small`.

                                * If you have a layout setting of `vertical`,
                                you **can not** customize the `branding` of the
                                button.

                                * If you have a layout setting of `vertical`,
                                you **can not** customize the `tagline` of the
                                button.

                                * If you have a layout setting of `vertical`,
                                you **can not** customize the `funding icons`
                                settings.
                              title: Mutually Exclusive Options
                              type: error
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              ## Additional Resources


                              * [PayPal Checkout
                              Customization](https://developer.paypal.com/demo/checkout/#/pattern/checkout)
                            header:
                              anchor: paypal-smart_additional-resources
                    - title: Enable & Restyle Optimized One-Page Checkout
                      route:
                        path: /optimized-one-page-checkout
                      data:
                        blocks:
                          - type: html
                            data: >-
                              <h1>Enable and Restyle Optimized One-Page
                              Checkout</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#optimized_enable\">Enable Optimized One Page Checkout</a></li>\n    <li><a href=\"#optimized_working\">Working with the Optimized Checkout SCSS File</a></li>\n    <li><a href=\"#optimized_configuring\">Configuring the Desktop Viewport</a></li>\n    <li><a href=\"#optimized_classes\">Classes Available for Customization</a></li>\n    <li><a href=\"#optimized_providing\">Providing User Options in Theme Editor</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >
                              ## Enable Optimized One Page Checkout


                              In order to customize Stencil's Optimized One Page
                              Checkout, you must first opt into BigCommerce's
                              Optimized One-Page Checkout option if your store
                              is not already running on Optimized One Page
                              Checkout. To do so, use the following steps:


                              1. Update your Stencil CLI installation to the
                              most-recent version, as outlined here.


                              2. Enable `Optimized One-Page Checkout` in the
                              store's control panel, as shown below. For more
                              details about using Optimized One-Page Checkout,
                              see  the [Checkout
                              Settings](https://support.bigcommerce.com/articles/Public/Checkout-Settings?_ga=2.265225801.718421096.1540222570-967431010.1523308107)
                              support article.


                              3. Within your theme's `config.json` file > `meta`
                              section, make sure the `features` array includes
                              the value `customized_checkout`, as shown below:


                              ```
                                 "meta": {
                                   [...]
                                   "features": [
                                     [...]
                                     "customized_checkout"
                              ```


                              4. Within your theme's
                              `<theme-name>/templates/pages/` subdirectory,
                              paste in a clean, uncustomized copy of the
                              `checkout.html` and

                              `order-confirmation.html` files. You can find
                              default templates for each file on our
                              [Cornerstone Github Repository]:


                              *
                              [checkout.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/checkout.html)
                              file template

                              *
                              [order-confirmation.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/order-confirmation.html)
                              file template


                              **Note:** _For Optimized One-Page Checkout to work
                              properly, the `order-confirmation.html` template
                              **must** be present in your theme. If this
                              template is absent, shoppers will receive a server
                              error upon submitting their order.(The
                              corresponding template was named
                              `order-complete.html` in earlier versions of
                              Stencil themes. But that minimal template is
                              **not** a substitute for the required current
                              template.)_
                            header:
                              anchor: optimized_enable
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1540227949000
                            header:
                              title: >-
                                Choosing Optimized One Page Checkout in the
                                Control Panel
                              subtitle: 'Step #2 in the above description'
                            config:
                              centered: true
                              fluid: true
                              bordered: true
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              ## Working with the Optimized Checkout SCSS File 


                              Cornerstone includes an SCSS file that styles the
                              Optimized Checkout page. In your local
                              installation, this file is located at
                              `<theme-name>/assets/scss/optimized-checkout.scss`.


                              You can access the most recent version of this
                              file in the [Cornerstone
                              repository](https://github.com/bigcommerce/cornerstone/blob/master/assets/scss/optimized-checkout.scss)
                              (Github). All themes share the same stylesheet for
                              the Optimized One-Page checkout, even those not
                              based on Cornerstone, so this stylesheet applies
                              universally across Stencil themes.


                              To customize the checkout page, you are free to
                              change classes' _contents_. However, **do not nest
                              elements, nor change any class names**.
                              BigCommerce imposes these restrictions because
                              each class here maps to multiple Optimized
                              Checkout elements. Changing the structure or
                              naming would break updates available in future
                              Optimized Checkout enhancements.
                            header:
                              anchor: optimized_working
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Configuring the Desktop Viewport 


                              Within the `optimized-checkout.scss` file, to set
                              up Optimized Checkout's responsive features, you
                              should configure the following breakpoint to
                              define your preferred desktop viewport size:


                              ```
                                  // TODO:
                                  // Configure media query to be 'desktop' breakpoint size
                                  // -----------------------------------------------------------------------------
                                  @media (min-width: 801px) {
                                      text-align: stencilString("optimizedCheckout-logo-position");
                                  }
                              ```
                            header:
                              anchor: optimized_configuring
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              ## Classes Available for Customization 


                              Below are the classes provided in Cornerstone's
                              `optimized-checkout.scss` file, with the
                              corresponding page elements that they style.
                              _These class names and mappings are subject to
                              change, so please check the inline comments in the
                              `optimized-checkout.scss` file that you downloaded
                              with your current Cornerstone release._


                              | **Class** | **Styles This Optimized One-Page
                              Checkout Element:** |

                              |---|---|

                              | `.optimizedCheckout-header` | Page header. |

                              | `.optimizedCheckout-headingPrimary` | Top-level
                              headings. |

                              | `.optimizedCheckout-headingSecondary` | Certain
                              lower-level elements, such as descriptions of cart
                              items. |

                              | `.optimizedCheckout-overlay` | Shipping Method
                              box. |

                              | `.optimizedCheckout-contentPrimary` | Body text
                              in the desktop `Order Summary`/`Order
                              Confirmation` (cart contents); drop-down-list
                              items; and text that summarizes completed steps. |

                              | `.optimizedCheckout-contentSecondary` | Text
                              labels on check boxes, and lower-level text in the
                              desktop Order Summary. |

                              | `.optimizedCheckout-button--primary` |
                              `CONTINUE` button and final `PAY` button. |

                              | `.optimizedCheckout-button--secondary` | `Edit`
                              buttons.

                              | `.optimizedCheckout-orderSummary` | Colors in
                              the `Order Summary` mobile drawer/modal.

                              | `.optimizedCheckout-step` | Large step-number
                              indicators on the page's left side. |

                              | `.optimizedCheckout-form-label` | Styles form
                              fields like `Email Address` – the field's
                              text-label color. | 

                              | `.optimizedCheckout-form-input` | Styles form
                              fields like `Email Address` – the entry box's
                              background and border colors. |
                            header:
                              anchor: optimized_classes
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Providing User Options in Theme Editor


                              As with other aspects of your theme's styling, you
                              can determine which aspects of Optimized One-Page
                              Checkout users will be able to customize in Theme
                              Editor. 


                              In Stencil's Cornerstone base theme, each
                              class/property available in
                              `optimized-checkout.scss` has a corresponding
                              key/value pair in the `config.json` file. For
                              examples of these key/value pairs, see [this
                              section]().


                              For examples of Theme Editor graphical controls
                              exposed to users through elements included in
                              Cornerstone's `schema.json` file, please see [this
                              section]().
                            header:
                              anchor: optimized_providing
                    - title: Currency Conversion
                      route:
                        path: /currency-conversion
                      data:
                        blocks:
                          - type: html
                            data: <h1>Currency Conversion</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#currency_currency-conversion\">Currency-Conversion Options</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Currency-Conversion Options


                              You can enable the display of alternate currencies
                              on your Stencil theme's Optimized One-Page
                              Checkout and order confirmation pages.
                            header:
                              anchor: currency_currency-conversion
                          - type: callout
                            data:
                              body: >-
                                The options on this page require that you first
                                enable Optimized One-Page Checkout. Find
                                instructions on how to do this in Enable and
                                Restyle Optimized One-Page Checkout.


                                Note that regardless of the display options that
                                you set below, transactions will always be
                                processed in the store's single default
                                currency. To change that setting, see Changing
                                Your Default Currency.
                              title: Restrictions
                              type: warning
                          - type: text
                            data: >-
                              To allow shoppers to view prices in multiple
                              currencies, you will need to add the desired
                              currencies via the BigCommerce control panel.


                              Shoppers will then be able to use the `Currency`
                              drop-down list, throughout the storefront, to
                              switch displayed prices among the currencies you
                              have enabled.


                              At checkout, the shopper will still be billed in
                              the store's default currency. As shown below, the
                              checkout and cart templates will show an
                              annotation about this, while flagging any
                              converted total (in a shopper's selected alternate
                              currency) as an `Estimated Total`:
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6116/1540232528988
                            config:
                              maxWidth: '400'
                              maxHeight: '600'
                              centered: true
                              fluid: true
                              bordered: true
                    - title: Multi Language Checkout
                      route:
                        path: /multi-language-checkout
                      data:
                        blocks:
                          - type: html
                            data: <h1>Multi Language Checkout</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#multi_multi-lang\">Multi Language Setup</a></li>\n    <li><a href=\"#multi_browsing\">Browsing Hidden Translation Keys</a></li>\n    <li><a href=\"#multi_adding\">Adding Your Own Translation Values</a></li>\n    <li><a href=\"#multi_localized\">Localized Country and State Names</a></li>\n    <li><a href=\"#multi_stencils-overall\">Stencil's Overall Limits on Translation</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Multi-Language Setup 


                              In the Cornerstone theme, both the Optimized
                              One-Page Checkout and the [order
                              confirmation](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/order-confirmation.html)
                              pages contain
                              [Handlebars`{{lang}}`](/stencil-docs/handlebars-syntax-and-helpers/handlebars-helpers-reference/string-helpers/custom-string-helpers#handlebars_lang)
                              statements to facilitate translation. The
                              `{{lang}}` statements enable automatic rendering
                              of their parameters into languages that shoppers
                              have selected in their browser preferences.


                              In the [default checkout page template
                              (cornerstone/templates/pages/checkout.html)](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/checkout.html),
                              one example that you can directly view is the page
                              header:
                            header:
                              anchor: multi_multi-lang
                          - type: code
                            data: >
                              {{#partial "head"}}


                              {{{ checkout.checkout_head }}}

                              {{{ stylesheet
                              '/assets/css/optimized-checkout.css' }}}

                              {{ getFontsCollection }}


                              <script type="text/javascript">
                                  window.language = {{{langJson 'optimized_checkout'}}};
                              </script>


                              {{{head.scripts}}}


                              {{/partial}}


                              {{#partial "page"}}

                              <header class="checkoutHeader
                              optimizedCheckout-header">
                                  <div class="checkoutHeader-content">
                                      <h1 class="is-srOnly">{{lang 'checkout.title'}}</h1>
                                      <h2 class="checkoutHeader-heading">
                                          <a class="checkoutHeader-link" href="{{urls.home}}">
                                              {{#if checkout.header_image}}
                                                  <img alt="{{settings.store_logo.title}}" class="checkoutHeader-logo" id="logoImage" src="{{ checkout.header_image }}"/>
                                              {{ else }}
                                                  <span class="header-logo-text">{{settings.store_logo.title}}</span>
                                              {{/if}}
                                          </a>
                                      </h2>
                                  </div>
                              </header>


                              {{{ checkout.checkout_content }}}


                              {{{ footer.scripts }}}


                              {{/partial}}


                              {{> layout/empty}}
                            header:
                              title: checkout.html
                              subtitle: '{{lang}} statement in page header'
                            config:
                              mode: html
                              highlightRange:
                                - from: '18'
                                  to: '18'
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Browsing Hidden Translation Keys


                              BigCommerce exposes only part of the checkout
                              page's structure through the local template
                              referenced above. For security purposes – and also
                              to offer all stores new checkout features
                              simultaneously – most checkout content is hidden.


                              This hidden content includes many more key/value
                              pairs that support translation. However, you can
                              see all the available keys with their default
                              English-language values in the
                              [opt-checkout-en.json.zip
                              file](https://storage.googleapis.com/bigcommerce-production-dev-center/template-files/opt-checkout-en.json.zip)
                            header:
                              anchor: multi_browsing
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Adding Your Own Translation Values


                              You can provide values for all of checkout's
                              supported translation keys – for all the languages
                              you want to support – even without direct access
                              to the hidden parts of the checkout template. Here
                              is how:


                              1. Download and unzip a local copy of the
                              [opt-checkout-en.json.zip
                              file](https://storage.googleapis.com/bigcommerce-production-dev-center/template-files/opt-checkout-en.json.zip),
                              also linked above in [Browsing Hidden Translation
                              Keys](#multi_browsing).


                              2. Copy and paste the whole file's contents into
                              your theme's `en.json` file and into the `.json`
                              file for each language you want to translate your
                              checkout page's text. To see requirements for
                              naming and deploying these translation files,
                              please this documentation's [Internationalization
                              section](/stencil-docs/internationalization-and-localization/).


                              3. Replace the keys' values with appropriate
                              phrases in each file's target language.
                            header:
                              anchor: multi_adding
                          - type: text
                            data: >-
                              ## Localized Country and State Names 


                              In the Optimized One-Page Checkout page's
                              `Shipping Address` and `Billing Address` fields,
                              BigCommerce currently provides automatic
                              translation of drop-down lists' displayed
                              `Country` and `State` names into 12 supported
                              languages. Here are the steps for enabling this
                              translation:


                              1. As for the translation options described above,
                              you must enable Optimized One-Page Checkout.


                              2. Within your `<theme-name>/lang/` subdirectory,
                              you must provide a `xx.json` file with the
                              appropriate two-letter prefix for one or more of
                              the `Supported Languages` in the Naming
                              Requirements table below. (The naming conventions
                              we follow are explained on this page.)


                              3. We recommend that you populate that file with
                              the checkout-specific keys/values covered above at
                              Adding Your Own Translation Values. This is not
                              strictly necessary to translate the drop-down
                              lists, but it is necessary to provide a consistent
                              translation of the surrounding Address sections.
                              You do not need to provide any keys/values for the
                              Country/State names, whose translations are
                              predefined within the BigCommerce platform.


                              4. As with the translation options described
                              above, the storefront will automatically display
                              the translated `Country/State` names to visitors
                              who have selected one of the supported languages
                              in their browser's locale preferences.


                              ### Country/State Translation – Naming
                              Requirements


                              BigCommerce Optimized One-Page Checkout will
                              currently translate displayed `Country/State`
                              names if your Stencil theme includes
                              `.../lang/xx.json` files named as shown below.


                              | Supported Language | Required Translation File
                              Name |

                              |------|------|

                              |  German | `de.json` |

                              | Spanish | `es.json` |

                              | French | `fr.json` |

                              | Hindi | `hi.json` |

                              | Italian | `it.json` |

                              | Japanese | `ja.json` |

                              | Korean | `ko.json` |

                              | Dutch | `nl.json` |

                              | Punjabi | `pa.json` |

                              | Tamil | `ta.json` |

                              | Chinese Simplified | `zh-TW.json` |

                              | Chinese Traditional | `zh.json` |
                            header:
                              anchor: multi_localized
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Stencil's Overall Limits on Translation


                              * Your theme's content will translate only to the
                              extent that you have created JSON files in your
                              `<theme-name>/lang/` subdirectory for each
                              language that you choose to support, and have
                              included key/value pairs for the parameters
                              (beyond `Country/State`) that you choose to
                              translate.


                              * Stencil's multi-language capabilities are
                              currently limited to these specific strings that
                              you specify within the theme. The Stencil
                              framework does not currently translate content
                              rendered from a store's database – for example,
                              products' names.


                              * Within these limitations, if you intend to do
                              business internationally, we recommend that you
                              specify appropriate alternate-language strings for
                              key parts of your storefront, product catalog, and
                              checkout. Doing so will make browsing, purchasing,
                              and payment easier for users in your target
                              market(s). For an overview of all localization
                              options, please see [Localizing
                              Stores](/stencil-docs/internationalization-and-localization/localizing-stores).
                            header:
                              anchor: multi_stencils-overall
                    - title: Checkout/Confirmation Injection Options
                      route:
                        path: /checkout-confirmation-injection
                      data:
                        blocks:
                          - type: html
                            data: <h1>Checkout/Confirmation Injection Options</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#checkout_adding\">Adding Storewide Styles</a></li>\n    <li><a href=\"#checkout_applying-storewide-header\">Applying Storewide Header</a></li>\n    <li><a href=\"#checkout_applying-storewide-scripts\">Applying Storewide Scripts</a></li>\n    <li><a href=\"#checkout_adding-trust-seals\">Adding Trust Seals</a></li>\n    <li><a href=\"#checkout_app-injection\">Checkout App Injection</a></li>\n\t</ul>\n</div>\n  \n"
                          - type: text
                            data: >-
                              ## Adding Storewide Styles 


                              A prerequisite for the next two options is to add
                              themewide styles to your Checkout or Order
                              Confirmation page. To do so, add this statement:


                              `{{{stylesheet '/assets/css/theme.css'}}}`


                              ...before this statement, which is already present
                              at the head of each template:


                              `{{{ checkout.checkout_head }}}`
                            header:
                              anchor: checkout_adding
                          - type: text
                            data: >+
                              ## Applying Storewide Header 


                              You can replace each page's predefined header with
                              your storewide header. To do so, first add
                              themewide styles as described above. Next, replace
                              the following code block (if present):


                              ```

                              <header class="checkoutHeader
                              optimizedCheckout-header">
                                  <div class="checkoutHeader-content">
                                      <h1 class="is-srOnly">{{lang 'checkout.title'}}</h1>
                                      <h2 class="checkoutHeader-heading">
                                          <a class="checkoutHeader-link" href="{{urls.home}}">
                                              {{#if checkout.header_image}}
                                                  <img alt="{{settings.store_logo.title}}" class="checkoutHeader-logo" id="logoImage" src="{{ checkout.header_image }}"/>
                                              {{ else }}
                                                  <span class="header-logo-text">{{settings.store_logo.title}}</span>
                                              {{/if}}
                                          </a>
                                      </h2>
                                  </div>
                              </header>

                              ```


                              with this simple Handlebars statement:


                              `{{> components/common/header }}`


                              Ensure that you paste it before this **existing**
                              statement:


                              `{{{ checkout.checkout_head }}}`

                            header:
                              anchor: checkout_applying-storewide-header
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Applying Storewide Scripts 


                              You have the following options to add and
                              customize headers and footers, on either or both
                              templates:


                              * Adding your themewide header/footer.

                              * Adding themewide scripts (for analytics, etc.).

                              * Adding both.


                              If you are working on a theme that does not have
                              the scripts already enabled, here are the steps to
                              enable these options:


                              1. Add themewide styles, as described above.


                              2. Towards the top of the checkout template
                              (`checkout.html`), add this Handlebars statement
                              to enable header scripts:


                              `{{{ head.scripts }}}`


                              Add it between these existing statements, so it
                              will ultimately read as shown below.


                              ```

                              <script type="text/javascript">
                                  window.language = {{{langJson 'optimized_checkout'}}};
                              </script>


                              {{{head.scripts}}}


                              {{/partial}}


                              {{#partial "page"}}

                              ```


                              Additionally, at the bottom of the checkout
                              template (`checkout.html`), add this Handlebars
                              statement to enable footer scripts:


                              `{{{ footer.scripts }}}`


                              Add it between these existing statements, so it
                              will ultimately read as shown below.


                              ```
                                  {{{ checkout.checkout_content }}}

                                  {{{ footer.scripts }}}

                                  {{/partial}}
                              ```


                              3. Towards the top of the order confirmation
                              template (`order-confirmation.html`), add this
                              Handlebars statement to enable header scripts:


                              `{{{ head.scripts }}}`


                              Add it between these existing statements, so it
                              will ultimately read as shown below.


                              ```

                              <script type="text/javascript">
                                  window.language = {{{langJson 'optimized_checkout'}}};
                              </script>


                              {{{head.scripts}}}


                              {{/partial}}


                              {{#partial "page"}}

                              ```


                              Additionally, at the bottom of the order
                              confirmation template (`order-confirmation.html`),
                              insert this Handlebars statement:


                              `{{{ footer.scripts }}}`


                              Insert it between these existing statements, so it
                              will ultimately read as shown below.


                              ```

                              {{{ checkout.order_confirmation_content }}}


                              {{{ footer.scripts }}}


                              {{/partial}}

                              ```


                              4. In your store's BigCommerce control panel,
                              ensure that you have inserted any desired script
                              text in the `Storefront` > `Script Manager` field.
                            header:
                              anchor: checkout_applying-storewide-scripts
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Adding Trust Seals 


                              To add a trust seal to either template:


                              1. Generate a code snippet (seal script) from your
                              trust-seal provider. You can find instructions for
                              GeoTrust seals in [this BigCommerce KB
                              article](https://support.bigcommerce.com/articles/Public/Adding-a-GeoTrust-SSL-seal-to-your--footer?_ga=2.254356814.718421096.1540222570-967431010.1523308107).
                              (Instructions for other providers will vary.)


                              2. Copy and paste the seal script into your
                              checkout or order confirmation template, before or
                              after the `{{{ checkout.checkout_content }}}`
                              Handlebars statement.
                            header:
                              anchor: checkout_adding-trust-seals
                          - type: text
                            data: >
                              ## App Injection: Script Examples 


                              With BigCommerce's extensible software, there are
                              a variety of ways to add scripts to your store.
                              The steps above outline only one method of adding
                              header and footer scripts to your store, which is
                              by directly editing the theme files.


                              As mentioned in the App Injection Script Examples,
                              you can use BigCommerce's Script Manager and
                              Script API to inject scripts to your store. The
                              Script Manager user interface is available to
                              store owners and other users via granted
                              permission directly in the Control Panel, or
                              scripts can be programmatically injected into the
                              store by developers using the Scripts API. These
                              are the recommended methods as they allow seamless
                              and intuitive injection of scripts.


                              The following sections present examples of scripts
                              that inject popular apps into the checkout/order
                              confirmation sequence.


                              ### Olark Live Chat 


                              As an example of injecting an app from the
                              BigCommerce Apps Marketplace, you could enable the
                              Olark Live Chat app on either page by by using the
                              script manager or our new Scripts API:


                              ```

                              <!-- begin olark code -->

                              <script type="text/javascript" async>

                              ;(function(o,l,a,r,k,y){if(o.olark)return;

                              r="script";y=l.createElement(r);r=l.getElementsByTagName(r)[0];

                              y.async=1;y.src="//"+a;r.parentNode.insertBefore(y,r);

                              y=o.olark=function(){k.s.push(arguments);k.t.push(+new
                              Date)};

                              y.extend=function(i,j){y("extend",i,j)};

                              y.identify=function(i){y("identifyv",k.i=i)};

                              y.configure=function(i,j){y("configure",i,j);k.c[i]=j};

                              k=y._={s:[],t:[+new Date],c:{},l:a};

                              })(window,document,"static.olark.com/jsclient/loader.js");

                              /* Add configuration calls bellow this comment */

                              olark.identify('4080-493-10-1035');</script>

                              <!-- end olark code -->

                              ```


                              ### Bluecheck Age Verification


                              Similarly, you could enable the Bluecheck
                              age-verification app by using the script manager
                              or our new Scripts API:


                              ```

                              <!-- Bluecheck AV Start Here -->
                                 <script src="https://api.bluecheck.me/modal/latest/custom/bigcommerce.js"></script>
                                 <script src='//api.bluecheck.me/age-gate/v2/loader.js.php?domain_token=[user-token-value]'></script>
                                 <span style='display:none' id='bc_selected_shipping_info'>%%GLOBAL_ShippingAddress%%</span>
                                 <span style='display:none' id='bc_selected_billing_info'>%%GLOBAL_BillingAddress%%</span>
                                 <span style='display:none' id='bc_customer_acct_email'>%%GLOBAL_CurrentCustomerEmail%%</span>
                                 <span style='display:none' id='bc_customer_acct_id'>%%GLOBAL_CurrentCustomerID%%</span>
                                 <span style='display:none' id='bc_customer_acct_fname'>%%GLOBAL_CurrentCustomerFirstName%%</span>
                                 <span style='display:none' id='bc_customer_acct_lname'>%%GLOBAL_CurrentCustomerLastName%%</span>
                                 <!-- Bluecheck AV End Here -->
                              ```


                              ### Rebillia Recurring Billing


                              To add the Rebillia app, you could add the
                              following tags by using the script manager or our
                              new Scripts API:


                              ```

                              <div id='rebillia_overlay'></div>


                              <script
                              src="https://js.braintreegateway.com/v2/braintree.js"></script>


                              <script type="text/javascript"
                              src="https://js.stripe.com/v2/"></script>


                              <script type="text/javascript">

                              function customerJWT(a){var
                              b="r1sc6nvnnhed377cozp2bfwfa69cfz5",c=new
                              XMLHttpRequest;c.onreadystatechange=function(){if(4==c.readyState)if(200==c.status){var
                              b=new
                              XMLHttpRequest;b.open("GET","https://demo.rebillia.com/storefront/login/"+c.responseText,!0),b.withCredentials=!0,b.send()}else
                              if(404==c.status){var d=new
                              XMLHttpRequest;params="bc_email="+a,d.open("POST","https://demo.rebillia.com/storefront/login/guest",!0),d.setRequestHeader("Content-type","application/x-www-form-urlencoded"),d.withCredentials=!0,d.send(params)}else
                              console.log("Something went
                              wrong")},c.open("GET","/customer/current.jwt?app_client_id="+b,!0),c.send()}var
                              currentcustomeremail="%%GLOBAL_CurrentCustomerEmail%%",shopPath="%%GLOBAL_ShopPathSSL%%",domainName="https://demo.rebillia.com",domainURL="https://demo.rebillia.com/";$(document).ready(function(){$.getScript(domainName+"/js/embed-common.js");var
                              a=window.location.href.match(/[^\/]+$/);if(a&&a.length){var
                              b=a[0].split(".");"account"!=b[0]&&"checkout"!=b[0]&&"finishorder"!=b[0]||$.getScript(domainName+"/js/embed-"+b[0]+".js"),"account"==b[0]&&customerJWT()}});

                              </script>

                              ```


                              ### Conversion Tracking: Conversions on Demand 


                              Here is one final example of an app that you could
                              enable by using the script manager or our new
                              Scripts API. This example enables Conversions on
                              Demand:


                              ```

                              <script type='text/javascript'>// <![CDATA[
                                  var cod_page_guid = 'CHECKOUT';
                                  var COD_CONFIG = {'platform':'bigcommerce', 'stoken':'as2_bcmarket_org'};
                                      (function(){
                                          var divCOD = document.createElement('div');
                                          divCOD.id = 'codScripts';
                                          var bodytag = document.getElementsByTagName('body')[0];
                                          bodytag.appendChild(divCOD);
                                          var cod = document.createElement('script');
                                          cod.type = 'text/javascript';
                                          cod.src = 'https://www.conversionsondemand.com/codadmin2/framework/cod-scripts-loader.js';
                                          var s = document.getElementById('codScripts');
                                          s.parentNode.insertBefore(cod, s);
                                      })(COD_CONFIG);
                              // ]]></script>

                              ```


                              ### Google Analytics: Addrexx Address
                              Verification 


                              The Addrexx app is integrated to the Checkout or
                              Order Confirmation page via the BigCommerce
                              control panel's Google Analytics box, rather than
                              through injection directly into either Stencil
                              template file. Here is the corresponding script to
                              enter into the control panel:


                              ```

                              <!-- START  Addrexx -->

                              <script type="text/javascript">

                              wwPage = window.location.href;

                              if (wwPage.indexOf("billing_address") >= 0 ||
                              wwPage.indexOf("create_account") >= 0 ||
                              wwPage.indexOf("shipping_address") >= 0 ||
                              wwPage.indexOf("checkout") >= 0) {

                              function loadaddrexx() {
                                  var _cc_url = "xxredda.s3.amazonaws.com/bcmarket/loader.js";
                                  var _cc_s = document.createElement('script');
                                  _cc_s.type = 'text/javascript';
                                  _cc_s.src = (("http:" === document.location.protocol) ? "http:" : "https:") + "//" + _cc_url;
                                  document.getElementsByTagName("head")[0].appendChild(_cc_s);
                              };

                              loadaddrexx();

                              }

                              </script>

                              <!-- END  Addrexx -->

                              ```
                            header:
                              anchor: checkout_app-injection
                    - title: Restyling the Apple Pay Button
                      route:
                        path: /restyling-the-apple-pay-button
                      data:
                        blocks:
                          - type: html
                            data: <h1>Restyling the Apple Pay Button</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#restyling_using\">Using Apple Pay</a></li>\n    <li><a href=\"#restyling_apple\">Apple Pay and Stencil Themes</a></li>\n    <li><a href=\"#restyling_implementing\">Implementing the Apple Pay Button</a></li>\n    <li><a href=\"#restyling_apple-pay-identity\">Apple Pay Identity Guidelines</a></li>\n    <li><a href=\"#restyling_styling\">Styling the Apple Pay Button</a></li>\n    <li><a href=\"#restyling_troubleshooting\">Troubleshooting</a></li>\n\t</ul>\n</div>"
                          - type: text
                            data: >-
                              ## Using Apple Pay


                              Apple Pay is a digital wallet that links to a
                              shopper's chosen credit or debit cards. It reduces
                              checkout friction in the same way other digital
                              wallets like PayPal do: Once a shopper has set up
                              Apple Pay, they don't need to enter or transfer
                              their actual credit or debit-card number, nor do
                              they need to re-enter their billing, shipping or
                              contact details.


                              Displaying the Apple Pay button to shoppers on
                              your storefront is subject to Apple's [geographic
                              constraints](https://support.apple.com/en-us/HT204916),
                              [supported devices and
                              software](https://support.apple.com/en-us/KM207105),
                              [industry and conduct
                              restrictions](https://developer.apple.com/apple-pay/acceptable-use-guidelines-for-websites/),
                              and policies regarding store checkout flow. 


                              For details, see the [Apple Pay for
                              Developers](https://developer.apple.com/apple-pay/)
                              site and [this BigCommerce support
                              article](https://support.bigcommerce.com/articles/Public/Connecting-with-Apple-Pay).
                            header:
                              anchor: restyling_using
                          - type: text
                            data: >-
                              ## Apple Pay and Stencil Themes


                              The Apple Pay button is included in most Stencil
                              themes, but its default appearance might not match
                              your store's theme. This article explains how to
                              do the following:

                              * script the button in themes that don't already
                              include it

                              * restyle the button within Apple's guidelines


                              ### Themes Incorporating Apple Pay 


                              Most current Stencil themes incorporate Apple Pay
                              by default. These include Cornerstone 1.4.0 (or
                              later) and most Theme Marketplace themes. 


                              ### Themes Omitting Apple Pay 


                              The following Stencil themes do _not_ include
                              Apple Pay:


                              * Cornerstone 1.3.4 or earlier

                              * Fortune

                              * Geneva

                              * Prosper

                              * Solo

                              * Earlier versions of Marketplace themes that have
                              since added Apple Pay

                              * Custom themes derived from any of the above


                              ### Apple Pay Button's Location 


                              By default, the Apple Pay button will appear on a
                              theme's Cart page. If the store has [enabled
                              site-wide
                              HTTPS](https://support.bigcommerce.com/articles/Public/Site-Wide-HTTPS/),
                              the Apple Pay button will also appear in the Quick
                              Cart modal. The Apple Pay button does _not_ appear
                              on the checkout page, because Apple Pay is
                              designed as a low-friction alternative that
                              bypasses the store's native checkout.
                            header:
                              anchor: restyling_apple
                          - type: text
                            data: >-
                              ## Implementing the Apple Pay Button


                              ### Themes Incorporating Apple Pay


                              To display the Apple Pay button in themes
                              incorporating Apple Pay, a store administrator
                              only needs to enable Apple Pay in the BigCommerce
                              control panel by selecting `Store Setup` >
                              `Payments` > `Digital Wallets` > `Apple Pay` >
                              `Set up`, as outlined in the [Connecting with
                              Apple
                              Pay](https://support.bigcommerce.com/articles/Public/Connecting-with-Apple-Pay#setup)
                              support article. 


                              ### Themes Omitting Apple Pay


                              To display the Apple Pay button on the Cart page
                              of themes omitting Apple Pay, you or a store
                              administrator must paste enabling CSS into the
                              footer script, as follows: 


                              1. Copy the CSS below.

                              2. In the BigCommerce control panel, select
                              `Storefront Design` > `Design Options` and then
                              the `Scripts` tab.

                              3. Paste the copied code into the Footer script
                              box and select `Save`.
                            header:
                              anchor: restyling_implementing
                          - type: code
                            data: >-
                              <style>

                              /* don’t display the button by default */

                              .apple-pay-checkout-button {
                                display: none;
                              }


                              /* display the button if apple pay is supported */

                              .apple-pay-supported .apple-pay-checkout-button {
                                display: inline-block;
                              }


                              /* renders a black background with white logo */

                              .apple-pay-checkout-button {
                                background-size: 100% 60%;
                                background-repeat: no-repeat;
                                background-position: 50% 50%;
                                border-radius: 5px;
                                padding: 0px;
                                box-sizing: border-box;
                                min-width: 175px;
                                min-height: 32px;
                                max-height: 64px;
                                background-image: -webkit-named-image(apple-pay-logo-white);
                                background-color: black;
                                text-indent: -9000em;
                                cursor: pointer;
                              }


                              /* for small screens, you should adjust the width
                              of the button to
                                 span the width of the containing block */
                              @media screen and (max-width: 480px) {
                                .apple-pay-checkout-button {
                                  width: 100%;
                                  height: 60px;
                                }
                              }

                              </style>
                            config:
                              mode: css
                          - type: text
                            data: >-
                              ## Apple Pay Identity Guidelines


                              As a condition for enabling Apple Pay, Apple
                              requires merchants to style and display the button
                              according to [Apple Pay Identity
                              Guidelines](https://developer.apple.com/apple-pay/Apple-Pay-Identity-Guidelines.pdf).
                              For BigCommerce's summary of the relevant
                              guidelines, see the [Integrating the Apple Pay
                              Button](https://support.bigcommerce.com/articles/Public/Integrating-the-Apple-Pay-button/#guidelines)
                              support article.
                            header:
                              anchor: restyling_apple-pay-identity
                          - type: text
                            data: "## Styling the Apple Pay Button\n\nBy default, a black version of the Apple Pay button will display in the storefront. However, Apple permits you to change the following three styling elements of the button, to match the style of your storefront:\n\n* Button background color, which must only be either white or black. A white button can have a black border.\n* Button height\n* Button width\n\n### Button Color – No Custom CSS Required\n\nIn themes incorporating Apple Pay, you or a store administrator can change the Apple Pay button's color in Theme Editor. Select: `Buttons` > `Apple Pay` > Button `Color`. \n\nThe drop-down list offers you the three options shown below: \n\n* Black (white text) – the default\n* White (black text)\n* White (black text with border)\n\n### Button Color – Custom CSS Required\n\nIn themes omitting Apple Pay, you must use custom CSS to change the Apple Pay button's color. Here are CSS snippets to recolor the default black button.\n\nTo render the button with a white background and black text, use this CSS:\n\n```\n.apple-pay-checkout-button {\n  background-image: -webkit-named-image(apple-pay-logo-black);\n  background-color: white;\n}\n```\n\nTo render the white Apple Pay button with black text and a black border, use this CSS:\n\n```\n.apple-pay-checkout-button {\n  background-image: -webkit-named-image(apple-pay-logo-black);\n  background-color: white;\n  border: .5px solid black\n}\n```\n### Button Size – Custom CSS Required \n\nResizing the button normally requires custom CSS. The following example shows how, by targeting the \n`.apple-pay-checkout-button` CSS selector, you can also manipulate the Apple Pay button's width and height. (This&#160;is subject to certain constraints imposed by Apple and BigCommerce, which are listed in the example's comments.)\n\n```\n.apple-pay-checkout-button {\n  width: 200px; /* apple specified minimum is 175px, there is no maximum */\n  height: 60px; /* apple specified minimum is 32px, maximum is 64px */\n}\t\n```"
                            header:
                              anchor: restyling_styling
                          - type: text
                            data: >-
                              ## Troubleshooting


                              Is your Apple Pay button configured but not
                              appearing on the storefront? To troubleshoot
                              issues like this, see the [Integrating the Apple
                              Pay
                              Button](https://support.bigcommerce.com/articles/Public/Integrating-the-Apple-Pay-button/#troubleshoot)
                              support article.
                            header:
                              anchor: restyling_troubleshooting
                    - title: Checkout JS SDK
                      route:
                        path: /checkout-js-sdk
                      data:
                        children:
                          - title: Getting Started in Vanilla JS
                            route:
                              path: /getting-started-in-vanilla-js
                            data:
                              blocks:
                                - type: html
                                  data: <h1>Getting Started in Vanilla JS</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#getting-started_installing\">Installing the Checkout JS SDK</a></li>\n    <li><a href=\"#getting-started_creating\">Creating a <code>checkout.js</code> file</a></li>\n    <li><a href=\"#getting-started_mapping\">Mapping the <code>checkout.js</code> file to the checkout page type</a></li>\t\n    <li><a href=\"#getting-started_preparing\">Preparing the <code>checkout.html</code> template file</a></li>\t\n    <li><a href=\"#getting-started_logging\">Logging the Checkout Object</a></li>\t\n    <li><a href=\"#getting-started_next-steps\">Next Steps</a></li>\t\n</ul>\n</div>\n\n\n\n\n\n\n"
                                - type: text
                                  data: >
                                    The Checkout JS SDK is a JavaScript library
                                    of methods for performing actions related to
                                    checkout. It includes methods for logging in
                                    a customer, adding addresses to the checkout
                                    object, and surfacing the shipping and
                                    payment methods that a merchant has
                                    configured. It’s everything you need to
                                    build your own custom checkout page on
                                    BigCommerce.


                                    We have provided a [sample checkout
                                    app](https://github.com/bigcommerce/checkout-sdk-js-example)
                                    built in React; the React sample app is a
                                    great place to get started if you prefer to
                                    build within a framework. However, because
                                    the SDK is built in vanilla JS, it’s
                                    framework agnostic. To illustrate that
                                    point, this tutorial will walk through the
                                    first steps for building a custom checkout
                                    directly into the theme files using vanilla
                                    JS. At the end of the tutorial, you will
                                    have installed the Checkout SDK, created a
                                    new JavaScript module for your icustom
                                    checkout, and console logged the checkout
                                    object.


                                    Before we get started, ensure your theme is
                                    setup for local development using Stencil
                                    CLI. See [Installing
                                    Stencil](/stencil-docs/getting-started/installing-stencil)
                                    if you have not already done this.
                                - type: text
                                  data: >
                                    ## Installing the Checkout JS SDK


                                    1. Open your terminal and navigate to your
                                    theme’s directory.


                                    For example, `cd cornerstone`


                                    2. Run the following command: 


                                    `npm install --save
                                    @bigcommerce/checkout-sdk`
                                  header:
                                    anchor: getting-started_installing
                                - type: text
                                  data: "## Creating a `checkout.js` file\n\n1. In your text editor, open your theme and create a new file in the assets/js/theme directory.\n\n2. Save the file as checkout.js. You can name your checkout JavaScript file anything you like, but the subsequent steps of this tutorial will assume the filename checkout.js.\n\n3. Add the following to your `checkout.js` file:\n\n```\nimport PageManager from './page-manager';\nimport { createCheckoutService } from '@bigcommerce/checkout-sdk';\n\nconst service = createCheckoutService();\n\nexport default class Checkout extends PageManager {\n\tasync onReady() {\n\t\tconst state = await service.loadCheckout();\nconsole.log(state.data.getCheckout());\n\t}\n}\n```\n\nImporting and extending the PageManager abstract class sets the page context for the `checkout.js` module. We also `import { createCheckoutService }` from the Checkout SDK. \n\nThe async keyword ensures that `onReady()` returns a Promise; the await keyword waits until the Promise resolves to load the checkout. Async/await is supported in nearly all modern browsers, but if you need to support older browsers like IE, you will require the [Promise polyfill](https://github.com/stefanpenner/es6-promise).\n\n4. Save the file. "
                                  header:
                                    anchor: getting-started_creating
                                - type: text
                                  data: >-
                                    ## Mapping the `checkout.js` file to the
                                    checkout page type


                                    1. Open the `app.js` file in your text
                                    editor.


                                    2. Add the following to map your checkout.js
                                    file to the checkout page type:

                                    `checkout: () =>
                                    import('./theme/checkout'),`
                                  header:
                                    anchor: getting-started_mapping
                                - type: image
                                  data: >-
                                    //s3.amazonaws.com/user-content.stoplight.io/6116/1540242854920
                                  config:
                                    centered: true
                                    fluid: true
                                    bordered: true
                                - type: text
                                  data: 3. Save the file.
                                - type: text
                                  data: >+
                                    ## Preparing the `checkout.html` template
                                    file


                                    1. Open the `checkout.html` file in your
                                    text editor.

                                    2. Comment out the `{{{
                                    checkout.checkout_content }}}` statement:

                                    <!--{{{ checkout.checkout_content }}}-->


                                    3. On the next line, add the following:

                                    ```

                                    <script>window.__webpack_public_path__ =
                                    "{{cdn 'assets/dist/'}}";</script>

                                    <script src="{{cdn
                                    'assets/dist/theme-bundle.main.js'}}"></script>


                                    <script>
                                        window.stencilBootstrap("{{page_type}}", {{jsContext}}).load();
                                    </script>


                                    ```


                                    4. Save the file.

                                  header:
                                    anchor: getting-started_preparing
                                - type: text
                                  data: >
                                    ## Logging the Checkout Object


                                    1. Navigate to the storefront and open your
                                    browser console.

                                    2. Add an item to your cart and proceed to
                                    the checkout page. The checkout page will be
                                    blank below the header.

                                    3. Note the checkout object logged to the
                                    console. 
                                  header:
                                    anchor: getting-started_logging
                                - type: text
                                  data: >-
                                    ## Next Steps


                                    Build out your custom checkout page by
                                    entering your HTML into the `checkout.html`
                                    file and JavaScript into checkout.js. For
                                    detailed documentation on all of the
                                    Checkout SDK library methods visit the [SDK
                                    GitHub
                                    repository](https://github.com/bigcommerce/checkout-sdk-js).
                                  header:
                                    anchor: getting-started_next-steps
                          - title: React.js Custom Checkout
                            route:
                              path: /implement-a-custom-checkout
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <h1>Implementing a Custom React.js Checkout
                                    to Cornerstone using the BigCommerce
                                    Checkout SDK</h1>
                                - type: html
                                  data: "<div class=\"otp\" id=\"no-index\">\n<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#implement_tutorial-overview\">Tutorial Overview</a></li>\n    <li><a href=\"#implement_steps\">Steps to Implement a Custom React Checkout</a></li>\n    <li><a href=\"#implement_additional\">Additional Resources</a></li>\t\n</ul>\n</div>\n"
                                - type: text
                                  data: >-
                                    ## Tutorial Overview


                                    This tutorial will take you through the
                                    steps to implement a custom checkout built
                                    with React to the Cornerstone Theme. The
                                    checkout will utilize BigCommerce's Checkout
                                    SDK. This tutorial assumes [Cornerstone
                                    2.4.0](https://github.com/bigcommerce/cornerstone/releases/tag/2.4.0)
                                    as a starting point.
                                  header:
                                    anchor: implement_tutorial-overview
                                - type: callout
                                  data:
                                    type: error
                                    body: >-
                                      Please note that the provided checkout
                                      example is a good starting and reference
                                      point, but is **NOT production ready**.
                                      You should **not** use this custom
                                      checkout in production as it stands.
                                    title: Checkout Example NOT production ready!
                                - type: text
                                  data: >-
                                    ## Steps to Implement a Custom React
                                    Checkout in Cornerstone


                                    ### Tutorial Prerequisites


                                    Before beginning this tutorial, you will
                                    need to have the Stencil CLI installed.


                                    If you do not yet have Stencil CLI
                                    installed, complete the steps in [Installing
                                    Stencil](/stencil-docs/getting-started/installing-stencil).
                                  header:
                                    anchor: implement_steps
                                - type: callout
                                  data:
                                    type: warning
                                    body: >
                                      This tutorial is **not** currently
                                      compatible with Cornerstone versions 3.0.0
                                      and above. If you would like to implement
                                      this checkout on your Cornerstone theme
                                      using the steps in this tutorial, you need
                                      to be developing on a Cornerstone theme
                                      below version 3.0.0. The tutorial assumes
                                      [Cornerstone
                                      2.4.0](https://github.com/bigcommerce/cornerstone/releases/tag/2.4.0)
                                      as a starting point.
                                    title: >-
                                      Compatible with Cornerstone versions below
                                      3.0
                                - type: text
                                  data: >-
                                    ### Install Dependencies


                                    The React app used to demonstrate the
                                    Checkout SDK has a few additional
                                    dependencies.

                                    In your theme directory (e.g.
                                    /stencil/cornerstone), run the following
                                    command:


                                    `npm install --save react react-dom
                                    react-text-mask classnames accounting
                                    babel-preset-react css-loader node-sass
                                    sass-loader style-loader
                                    @bigcommerce/checkout-sdk`



                                    ### Update webpack.common.js


                                    The React app includes .jsx files which will
                                    not be resolved using the default webpack
                                    configuration in Cornerstone. Additionally,
                                    loaders must be registered for .jsx and
                                    .scss files.


                                    **Note:** _Cornerstone 2.0 and above uses
                                    Webpack 4 which does **not** use a
                                    `webpack.conf.js` file like earlier Webpack
                                    versions. Instead, we will modify
                                    `webpack.common.js`._


                                    #### Register .jsx and .scss loaders


                                    In webpack.common.js, add the following
                                    objects to the `rules` array:


                                    ```

                                    {
                                      test: /\.jsx$/,
                                      exclude: /node_modules/,
                                      use: {
                                          loader: "babel-loader",
                                          options: {
                                              presets: ['react'],
                                          },
                                      }
                                    },


                                    {
                                      test: /\.scss$/,
                                      use:  [
                                          'style-loader',
                                          {
                                              loader: 'css-loader',
                                              options: {
                                                  modules: true
                                              }
                                          },
                                          'sass-loader'
                                      ],
                                    },

                                    ```


                                    Next, in webpack.common.js, add the
                                    following property to the `resolve` object:



                                    `extensions: ['.js', '.jsx']`



                                    ### Add React Checkout Components to Theme


                                    1. Clone or download BigCommerce's [Checkout
                                    SDK JS
                                    Example](https://github.com/bigcommerce/checkout-sdk-js-example)
                                    **outside** of your theme directory


                                    `git clone
                                    https://github.com/bigcommerce/checkout-sdk-js-example.git`


                                    If the above command fails, and you are
                                    accessing GitHub anonymously, give the URL
                                    this alternate prefix:


                                    `git clone
                                    git@github.com:bigcommerce/checkout-sdk-js-example.git`


                                    2. In your theme directory, navigate to
                                    `/assets/js/` and create a `checkout-app`
                                    directory (i.e. `/assets/js/checkout-app`)


                                    3. Copy the contents of
                                    `/checkout-sdk-js-example/src` into your new
                                    `/assets/js/checkout-app` directory 



                                    ### Import Dependencies


                                    Edit `/assets/js/app.js` and add the
                                    following lines toward the beginning with
                                    the other import statements:


                                    ```

                                    import React from 'react';

                                    import ReactDOM from 'react-dom';

                                    import Checkout from
                                    './checkout-app/Checkout/checkout';

                                    ```


                                    ### Define a Function to Initialize React


                                    Edit `/assets/js/app.js` and add the
                                    following lines to the end:


                                    ```

                                    window.initReact = function initReact() {
                                        ReactDOM.render(
                                            React.createElement(Checkout, null, null),
                                            document.getElementById('checkout-app')
                                        );
                                    };

                                    ```


                                    ### Customize the Checkout Template


                                    1. Edit `/templates/pages/checkout.html` and
                                    add the following lines between `{{{
                                    footer.scripts }}}` and `{{/partial}}`


                                    ```

                                    <script src="{{cdn
                                    'assets/dist/theme-bundle.main.js'}}"></script>
                                     
                                    <script type="text/javascript" defer>
                                        // Exported in app.js
                                        window.initReact();
                                    </script>

                                    ```


                                    2. In `/templates/pages/checkout.html`,
                                    replace `{{{ checkout.checkout_content }}}`
                                    with the following:


                                    ```<div id="checkout-app"></div>```


                                    ### Congratulations!


                                    You should now be able to view your example
                                    React checkout by running the `stencil
                                    start` command in your theme directory and
                                    navigating to your storefront at
                                    [http://localhost:3000](http://localhost:3000).


                                    You can make further customizations to the
                                    checkout by modifying the React components
                                    in `/assets/js/checkout-app`.
                                - type: tabs
                                  data:
                                    children:
                                      - title: webpack.common.js
                                        blocks:
                                          - type: code
                                            data: >
                                              LodashPlugin =
                                              require('lodash-webpack-plugin'),

                                              path = require('path'),

                                              webpack = require('webpack');


                                              // Common configuration, with extensions
                                              in webpack.dev.js and webpack.prod.js.

                                              module.exports = {

                                              bail: true,

                                              context: __dirname,

                                              entry: {
                                                main: './assets/js/app.js',
                                              },

                                              module: {
                                                rules: [
                                                    {
                                                        test: /\.js$/,
                                                        include: /(assets\/js|assets\\js|stencil-utils)/,
                                                        use: {
                                                            loader: 'babel-loader',
                                                            options: {
                                                                plugins: [
                                                                    'dynamic-import-webpack', // Needed for dynamic imports.
                                                                    'lodash', // Automagically tree-shakes lodash.
                                                                    'transform-regenerator', // Transforms async and generator functions.
                                                                ],
                                                                presets: [
                                                                    ['env', {
                                                                        loose: true, // Enable "loose" transformations for any plugins in this preset that allow them.
                                                                        modules: false, // Don't transform modules; needed for tree-shaking.
                                                                        useBuiltIns: true, // Tree-shake babel-polyfill.
                                                                    }],
                                                                ],
                                                            },
                                                        },
                                                    },
                                                    {
                                                        test: /jquery-migrate/,
                                                        use: 'imports-loader?define=>false',
                                                    },
                                                    {
                                                        test: /\.jsx$/,
                                                        exclude: /node_modules/,
                                                        use: {
                                                            loader: "babel-loader",
                                                            options: {
                                                                presets: ['react'],
                                                            },
                                                        }
                                                    },
                                                    {
                                                        test: /\.scss$/,
                                                        use:  [
                                                            'style-loader',
                                                            {
                                                                loader: 'css-loader',
                                                                options: {
                                                                    modules: true
                                                                }
                                                            },
                                                            'sass-loader'
                                                        ]
                                                    }
                                                ],
                                              },

                                              output: {
                                                chunkFilename: 'theme-bundle.chunk.[name].js',
                                                filename: 'theme-bundle.[name].js',
                                                path: path.resolve(__dirname, 'assets/dist'),
                                              },

                                              plugins: [
                                                new CleanPlugin(['assets/dist'], {
                                                    verbose: false,
                                                    watch: false,
                                                }),
                                                new LodashPlugin, // Complements babel-plugin-lodash by shrinking its cherry-picked builds further.
                                                new webpack.ProvidePlugin({
                                                    $: 'jquery',
                                                    jQuery: 'jquery',
                                                    'window.jQuery': 'jquery',
                                                }),
                                              ],

                                              resolve: {
                                                alias: {
                                                    'jquery-migrate': path.resolve(__dirname, 'node_modules/jquery-migrate/dist/jquery-migrate.min.js'),
                                                    jstree: path.resolve(__dirname, 'node_modules/jstree/dist/jstree.min.js'),
                                                    lazysizes: path.resolve(__dirname, 'node_modules/lazysizes/lazysizes.min.js'),
                                                    pace: path.resolve(__dirname, 'node_modules/pace/pace.min.js'),
                                                    'slick-carousel': path.resolve(__dirname, 'node_modules/slick-carousel/slick/slick.min.js'),
                                                    'svg-injector': path.resolve(__dirname, 'node_modules/svg-injector/dist/svg-injector.min.js'),
                                                    sweetalert2: path.resolve(__dirname, 'node_modules/sweetalert2/dist/sweetalert2.min.js'),
                                                },
                                                extensions: ['.js', '.jsx'],
                                              },

                                              };
                                            header:
                                              title: webpack.common.js
                                            config:
                                              mode: js
                                      - title: app.js
                                        blocks:
                                          - type: code
                                            data: >
                                              __webpack_public_path__ =
                                              window.__webpack_public_path__; //
                                              eslint-disable-line


                                              import 'babel-polyfill';

                                              import $ from 'jquery';

                                              import 'jquery-migrate';

                                              import Global from './theme/global';

                                              import React from 'react';

                                              import ReactDOM from 'react-dom';

                                              import Checkout from
                                              './checkout-app/Checkout/checkout';


                                              const getAccount = () =>
                                              import('./theme/account');

                                              const getLogin = () =>
                                              import('./theme/auth');

                                              const pageClasses = {
                                                  account_orderstatus: getAccount,
                                                  account_order: getAccount,
                                                  account_addressbook: getAccount,
                                                  shippingaddressform: getAccount,
                                                  account_new_return: getAccount,
                                                  'add-wishlist': () => import('./theme/wishlist'),
                                                  account_recentitems: getAccount,
                                                  account_downloaditem: getAccount,
                                                  editaccount: getAccount,
                                                  account_inbox: getAccount,
                                                  account_saved_return: getAccount,
                                                  account_returns: getAccount,
                                                  login: getLogin,
                                                  createaccount_thanks: getLogin,
                                                  createaccount: getLogin,
                                                  getnewpassword: getLogin,
                                                  forgotpassword: getLogin,
                                                  blog: () => import('./theme/blog'),
                                                  blog_post: () => import('./theme/blog-post'),
                                                  brand: () => import('./theme/brand'),
                                                  brands: () => import('./theme/brands'),
                                                  cart: () => import('./theme/cart'),
                                                  category: () => import('./theme/category'),
                                                  compare: () => import('./theme/compare'),
                                                  page_contact_form: () => import('./theme/contact-us'),
                                                  error: () => import('./theme/errors'),
                                                  404: () => import('./theme/404-error'),
                                                  giftcertificates: () => import('./theme/gift-certificate'),
                                                  giftcertificates_balance: () => import('./theme/gift-certificate'),
                                                  giftcertificates_redeem: () => import('./theme/gift-certificate'),
                                                  default: () => import('./theme/home'),
                                                  page: () => import('./theme/page'),
                                                  product: () => import('./theme/product'),
                                                  amp_product_options: () => import('./theme/product'),
                                                  search: () => import('./theme/search'),
                                                  rss: () => import('./theme/rss'),
                                                  sitemap: () => import('./theme/sitemap'),
                                                  newsletter_subscribe: () => import('./theme/subscribe'),
                                                  wishlist: () => import('./theme/wishlist'),
                                                  wishlists: () => import('./theme/wishlist'),
                                              };


                                              /**
                                               * This function gets added to the global window and then called
                                               * on page load with the current template loaded and JS Context passed in
                                               * @param pageType String
                                               * @param contextJSON
                                               * @returns {*}
                                               */
                                              window.stencilBootstrap = function
                                              stencilBootstrap(pageType, contextJSON =
                                              null, loadGlobal = true) {
                                                  const context = JSON.parse(contextJSON || '{}');

                                                  return {
                                                      load() {
                                                          $(async () => {
                                                              // Load globals
                                                              if (loadGlobal) {
                                                                  Global.load(context);
                                                              }

                                                              // Find the appropriate page loader based on pageType
                                                              const pageClassImporter = pageClasses[pageType];
                                                              if (typeof pageClassImporter === 'function') {
                                                                  const PageClass = (await pageClassImporter()).default;
                                                                  PageClass.load(context);
                                                              }
                                                          });
                                                      },
                                                  };
                                              };


                                              window.initReact = function initReact()
                                              {
                                                  ReactDOM.render(
                                                      React.createElement(Checkout, null, null),
                                                      document.getElementById('checkout-app')
                                                  );
                                              };
                                            header:
                                              title: app.js
                                            config:
                                              mode: js
                                      - title: checkout.html
                                        blocks:
                                          - type: code
                                            data: >-

                                              {{#partial "head"}}
                                               
                                              {{{ checkout.checkout_head }}}

                                              {{{ stylesheet
                                              '/assets/css/optimized-checkout.css' }}}

                                              {{ getFontsCollection }}
                                               
                                              <script type="text/javascript">
                                                  window.language = {{{langJson 'optimized_checkout'}}};
                                              </script>
                                               
                                              {{{head.scripts}}}
                                               
                                              {{/partial}}
                                               
                                              {{#partial "page"}}

                                              <header class="checkoutHeader
                                              optimizedCheckout-header">
                                                  <div class="checkoutHeader-content">
                                                      <h1 class="is-srOnly">{{lang 'checkout.title'}}</h1>
                                                      <h2 class="checkoutHeader-heading">
                                                          <a class="checkoutHeader-link" href="{{urls.home}}">
                                                              {{#if checkout.header_image}}
                                                                  <img alt="{{settings.store_logo.title}}" class="checkoutHeader-logo" id="logoImage" src="{{ checkout.header_image }}"/>
                                                              {{ else }}
                                                                  <span class="header-logo-text">{{settings.store_logo.title}}</span>
                                                              {{/if}}
                                                          </a>
                                                      </h2>
                                                  </div>
                                              </header>
                                               
                                              <div id="checkout-app"></div>
                                               
                                              {{{ footer.scripts }}}

                                              <script src="{{cdn
                                              'assets/dist/theme-bundle.main.js'}}"></script>
                                               
                                              <script type="text/javascript" defer>
                                                  // Exported in app.js
                                                  window.initReact();
                                              </script>

                                              {{/partial}}
                                               
                                              {{> layout/empty}}
                                            header:
                                              title: checkout.html
                                            config:
                                              mode: html
                                  header:
                                    title: >-
                                      Examples of files after completing this
                                      tutorial
                                - type: text
                                  data: >-
                                    ## Additional Resources


                                    * [www.reactjs.org](https://reactjs.org/)

                                    *
                                    [www.reactjs.org/tutorial/tutorial.html](https://reactjs.org/tutorial/tutorial.html)
                                    (Tutorial on the basics of React)

                                    *
                                    [https://webpack.js.org/concepts/](https://webpack.js.org/concepts/)
                                  header:
                                    anchor: implement_additional"
        - title: Handlebars and Stencil
          route:
            path: /handlebars-syntax-and-helpers
          data:
            children:
              - title: Handlebars.js
                route:
                  path: /handlebars-overview
                data:
                  blocks:
                    - type: html
                      data: <h1>Handlebars.js Overview</h1>
                    - type: html
                      data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_handlebars-js\">Handlebars.js</a></li>\n    <li><a href=\"#handlebars_template\">Template Logic</a></li>\n    <li><a href=\"#handlebars_custom\">Custom Handlebars Helpers</a></li>\n    <li><a href=\"#handlebars_stencil\">Stencil Handlebars Resources</a></li>\n    <li><a href=\"#handlebars_rendering\">Rendering Special Characters</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Handlebars.js


                        Handlebars is a minimal templating language that allows
                        you to create dynamic and robust templates for any
                        BigCommerce storefront. A Handlebars template looks just
                        like a regular HTML page, with the addition of
                        Handlebars expressions for all dynamic logic that you
                        embed into the page.


                        A Handlebars expression begins with: ``{{`` and ends
                        with: ``}}``.


                        Here is a basic example that accesses the title and body
                        variables:


                        ```

                        <div class="entry">

                        <div class="entry">
                          <h1>{{ title }}</h1>
                          <div class="body">
                            {{ body }}
                          </div>
                        </div>

                        ```


                        In production, Handlebars statements run on the server
                        side, generating HTML received by the shopper's browser.


                        You can view a [full reference page of all the
                        handlebars helpers available to Stencil
                        here](/stencil-docs/handlebars-syntax-and-helpers/handlebars-helpers-reference/handlebars-full),
                        or explore them using navigation on the left hand side.


                        For a thorough overview of how to use Handlebars inside
                        your templates, review the [Handlebars
                        documentation](http://handlebarsjs.com/) (Handlebars).
                      header:
                        anchor: handlebars_handlebars-js
                    - type: text
                      data: >-
                        ## Template Logic


                        With Handlebars, it’s easy to embed logic right into
                        your templates. Handlebars has built-in helpers for
                        widely used logic and iterator functions. You can find a
                        list of all built-in Handlebars helpers here.
                      header:
                        anchor: handlebars_template
                    - type: text
                      data: >-
                        ## Custom Handlebars Helpers


                        BigCommerce has extended the built-in Handlebars helpers
                        with certain custom Handlebars helpers. For details,
                        please proceed to the reference section.
                      header:
                        anchor: handlebars_custom
                    - type: text
                      data: >-
                        ## Stencil Handlebars Resources


                        For a comprehensive reference to the Stencil data
                        objects that you can manipulate via Handlebars
                        statements, please see the Stencil Object Model
                        Reference.
                      header:
                        anchor: handlebars_stencil
                    - type: text
                      data: >-
                        ## Rendering Special Characters


                        By default, Handlebars HTML-escapes values returned by a
                        Handlebars `{{ expression }}`. So, where a Handlebars
                        expression's referenced content includes special
                        characters, those characters will render literally on
                        the storefront as HTML entities.


                        In the example above, assume that the HTML referenced by
                        `{{ title }}` contains an ampersand and a "straight"
                        apostrophe. You will see the entities &amp; and &#039;
                        displayed literally on the storefront, instead of the
                        intended characters & and '. Similar display errors will
                        be triggered by apostrophes, quotation marks, primes,
                        and other extended characters.


                        The workaround is to place the Handlebars variable in
                        triple braces, like this: `{{{ title }}}`. Handlebars
                        documentation refers to this technique as a
                        "triple-stash."
                      header:
                        anchor: handlebars_rendering
              - title: Handlebars Helpers
                route:
                  path: /handlebars-helpers-reference
                data:
                  blocks: []
                  children:
                    - title: Handlebars Helpers Reference
                      route:
                        path: /handlebars-full
                      data:
                        blocks:
                          - type: html
                            data: <h1>Handlebars Helpers Reference</h1>
                          - type: html
                            data: "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li>Array Helpers</li>\n    <li>Collection Helpers</li>\n    <li>Comparison Helpers</li>\n    <li>Control-Flow Helpers</li>\n    <li>Date Helpers</li>\n    <li>HTML Helpers</li>\n    <li>Image Helpers</li>\n    <li>Inflection Helpers</li>\n\t\t<li>Injection Helpers</li>\n\t\t<li>Markdown Helpers</li>\n\t\t<li>Math Helpers</li>\n\t\t<li>Number Helpers</li>\n\t\t<li>Object Helpers</li>\n\t\t<li>Operator Helpers</li>\n\t\t<li>String Helpers</li>\n\t\t<li>URL Helpers</li>\n\t\t<li>Miscellaneous Helpers</li>\n    </ul>\n</div>"
                          - type: text
                            data: >-
                              This page describes all of the Handlebars helpers
                              supported on the Stencil framework. It includes
                              helpers that are custom to, or customized for,
                              Stencil.


                              For background information on using Handlebars
                              helpers, please see the [official Handlebars
                              documentation](http://handlebarsjs.com).
                            header: {}
                          - type: text
                            data: >-
                              # <a name="array"></a> Array Helpers


                              The following helpers are available to manage
                              arrays:


                              * [Stencil Custom Array Helpers](#array_custom)

                              * [Standard Array Helpers](#array_std) 


                              ## <a name="array_custom"></a> Stencil Custom
                              Array Helpers


                              The following array helpers are custom to the
                              Stencil framework.

                              ### {{itemAt}}


                              _Block helper that returns the item at the
                              specified index._


                              #### Parameters


                              * `array` {Array}

                              * `idx` {Number}

                              * `returns` {any} `value`


                              #### Example


                              Given the array `['a', 'b', 'c']`:


                              ```handlebars

                              {{itemAt array 1}}

                              //=> 'b'

                              ```


                              ### {{join}}


                              The `join` helper is custom to Stencil. It joins
                              an array of string items, with separators. It
                              returns a string. 


                              #### Parameters


                              - `values`: {Array}

                              - `separator`: {String}

                              - `limit=<number>`: An optional limit.


                              ### {{limit}}


                              The `limit` helper is custom to Stencil. It limits
                              the number of items returned from an array
                              variable, and returns a new array.


                              #### Parameters


                              - `data`: {Array}

                              - `limit`: {Number}


                              #### {{limit}} Example 


                              Assume that `{{cart.items}}` would return 10
                              items. You could use this helper to limit that
                              behavior to only the first four items, by
                              specifying: 


                              ```

                              {{limit cart.items 4}}

                              ```


                              ### {{pluck}}


                              The `pluck` helper is custom to Stencil. For one
                              specified search key(s), it retrieves
                              corresponding values from some or all elements in
                              a specified collection. 


                              The `pluck` helper returns the retrieved values in
                              a comma-separated string. This helper's general
                              form is:


                              ```

                              {{pluck ([limit] <collection> [<limit-value>])
                              '<search-key>'}}

                              ```


                              #### Parameters


                              - `limit`, `limit-value`: Optional parameters to
                              limit the number of results returned.

                              - `collection`: The collection to search.

                              - `search-key`: The string to search for.



                              #### {{pluck}} Example 1


                              Assume that the `categories` collection contains:


                              ```

                              categories: [
                                { "id": 1, "name": "Bakeware" },
                                { "id": 2, "name": "Cookware" },
                                { "id": 3, "name": "Cutlery" }
                              ]

                              ```


                              In this case, this Handlebars statement:


                              ```

                              {{pluck (limit categories 2) 'name'}}

                              ```


                              ...would return:


                              ```

                              "Bakeware,Cookware"

                              ```


                              #### {{pluck}} Example 2


                              If the `categories` themselves each contained an
                              image object, then you could use dot notation to
                              access that image object's children:


                              ```

                              categories: [
                                { "id": 1, "name": "Bakeware", "image": { "data": "http://...", "alt": "Bakeware image"} },
                                { "id": 2, "name": "Cookware" "image": { "data": "http://...", "alt": "Cookware image"} },
                                { "id": 3, "name": "Cutlery" "image": { "data": "http://...", "alt": "Cutlery image"} }
                              ]

                              ```


                              In this case, this Handlebars statement:


                              ```

                              {{pluck (limit categories 2) 'image.data'}}

                              ```


                              ...would return a comma-separated list of image
                              URLs.



                              ## <a name="array_std"></a> Standard Array Helpers


                              The following standard array helpers are supported
                              on the Stencil framework.


                              ### <a name="after"></a> {{after}}


                              Returns all of the items in an array after the
                              specified index. Opposite of [before](#before).


                              Given the array `['a', 'b', 'c']`:


                              #### Parameters


                              * `array` {Array}: Collection.

                              * `n` {Number}: Starting index (number of items to
                              exclude).

                              * `returns` {Array}: Array exluding `n` items.


                              #### Example


                              ```handlebars

                              {{after array 1}}

                              //=> '["c"]'

                              ```


                              ### {{arrayify}}


                              Casts the given `value` to an array.


                              #### Parameters


                              * `value` {any}

                              * `returns` {Array}


                              #### Example


                              ```handlebars

                              {{arrayify "foo"}}

                              //=> '["foo"]'

                              ```


                              ### <a name="before"></a> {{before}}


                              Returns all of the items in the collection before
                              the specified count. Opposite of [after](#after).


                              Given the array `['a', 'b', 'c']`:


                              #### Parameters


                              * `array` {Array}

                              * `n` {Number}

                              * `returns` {Array}: Array excluding items after
                              the given number.


                              #### Example


                              ```handlebars

                              {{before array 2}}

                              //=> '["a", "b"]'

                              ```


                              ### {{eachIndex}}


                              #### Parameters


                              * `array` {Array}

                              * `options` {Object}

                              * `returns` {String}


                              #### Example


                              ```handlebars

                              {{#eachIndex collection}}
                                {{item}} is {{index}}
                              {{/eachIndex}}

                              ```


                              ### {{filter}}


                              Block helper that filters the given array. Renders
                              the block for values that evaluate to `true`;
                              otherwise, returns the inverse block.


                              #### Parameters


                              * `array` {Array}

                              * `value` {any}

                              * `options` {Object}

                              * `returns` {String}


                              #### Example


                              ```handlebars

                              {{#filter array "foo"}}AAA{{else}}BBB{{/filter}}

                              //=> 'BBB

                              ```


                              ### <a name="first"></a> {{first}}


                              Returns the first item, or first `n` items, of an
                              array.


                              #### Parameters


                              * `array` {Array}

                              * `n` {Number}: Number of items to return,
                              starting at `0`.

                              * `returns` {Array}


                              #### Example


                              Given the array `['a', 'b', 'c', 'd', 'e']`:


                              ```handlebars

                              {{first array 2}}

                              //=> '["a", "b"]'

                              ```


                              ### {{forEach}}


                              Iterates over each item in an array, and exposes
                              the current item in the array as context to the
                              inner block. In addition to the current array
                              item, the helper exposes the following variables
                              to the inner block:


                              * `index`

                              * `total`

                              * `isFirst`

                              * `isLast`


                              Also, `@index` is exposed as a private variable,
                              and additional private variables may be defined as
                              hash arguments.


                              #### Parameters


                              * `array` {Array}

                              * `returns` {String}


                              #### Example


                              ```js

                              var accounts = [

                              {'name': 'John', 'email': 'john@example.com'},

                              {'name': 'Malcolm', 'email':
                              'malcolm@example.com'},

                              {'name': 'David', 'email': 'david@example.com'}

                              ];


                              // example usage

                              // {{#forEach accounts}}

                              //   <a href="mailto:{{ email }}" title="Send an
                              email to {{ name }}">

                              //     {{ name }}

                              //   </a>{{#unless isLast}}, {{/unless}}

                              // {{/forEach}}

                              ```


                              ### {{inArray}}


                              Block helper that renders the block if an array
                              has the given `value`. Optionally, you can specify
                              an inverse block to render when the array does not
                              have the given value.


                              #### Parameters


                              * `array` {Array}

                              * `value` {any}

                              * `options` {Object}

                              * `returns` {String}


                              #### Example


                              Given the array `['a', 'b', 'c']`:


                              ```handlebars

                              {{#inArray array "d"}}
                                foo
                              {{else}}
                                bar
                              {{/inArray}}

                              //=> 'bar'

                              ```


                              ### {{isArray}}


                              Returns true if `value` is an es5 array.


                              #### Parameters


                              * `value` {any}: The value to test.

                              * `returns` {Boolean}


                              #### Example


                              ```handlebars

                              {{isArray "abc"}}

                              //=> 'false'

                              ```


                              ### <a name="last"></a> {{last}}


                              Returns the last item, or last `n` items, of an
                              array. Opposite of [first](#first).


                              #### Parameters


                              * `array` {Array}

                              * `n` {Number}: Number of items to return,
                              starting with the last item.

                              * `returns` {Array}


                              #### Example


                              Given the array `['a', 'b', 'c', 'd', 'e']`:


                              ```handlebars

                              {{last array 2}}

                              //=> '["d", "e"]'

                              ```


                              ### {{lengthEqual}}


                              Block helper that compares the length of the given
                              array to the number passed as the second argument.
                              If the array length is equal to the given
                              `length`, the block is returned. Otherwise, you
                              have the option of returning an inverse block.


                              #### Parameters


                              * `array` {Array}

                              * `length` {Number}

                              * `options` {Object}

                              * `returns` {String}


                              #### Example


                              Given the array `['a', 'b', 'c', 'd', 'e']`:


                              ```handlebars

                              {{#lengthEqual array
                              10}}AAA{{else}}BBB{{/lengthEqual}}

                              //=> 'BBB'

                              ```


                              ### {{map}}


                              Returns a new array, created by calling `function`
                              on each element of the given `array`.


                              #### Parameters


                              * `array` {Array}

                              * `fn` {Function}

                              * `returns` {String}


                              #### Example


                              Given an array `['a', 'b', 'c']`:


                              ```js

                              // register `double` as a helper

                              function double(str) {
                                return str + str;
                              }

                              // then used like this:

                              // {{map array double}}

                              //=> '["aa", "bb", "cc"]'

                              ```


                              ### {{some}}


                              Block helper that returns the block *if* the
                              callback returns true for some value in the given
                              array.


                              #### Parameters


                              * `array` {Array}

                              * `cb` {Function}: Callback function.

                              * {Options}: Handlebars-provided options object.

                              * `returns` {Array}


                              #### Example


                              Given the array `[1, 'b', 3]`:


                              ```handlebars

                              {{#some array isString}}
                                Render me if the array has a string.
                              {{else}}
                                Render me if it doesn't.
                              {{/some}}

                              //=> 'Render me if the array has a string.'

                              ```


                              ### {{sort}}


                              Sorts the given `array`. If an array of objects is
                              passed, you may optionally pass (as the second
                              argument) a `key` to sort on. Alternatively, you
                              may pass a sorting function as the second
                              argument.


                              #### Parameters


                              * `array` {Array}: The array to sort.

                              * `key` {String|Function}: The object key to sort
                              by, or a sorting function.


                              #### Example


                              Given an array `['b', 'a', 'c']`:



                              ```handlebars

                              {{sort array}}

                              //=> '["a", "b", "c"]'

                              ```


                              ### {{sortBy}}


                              Sorts an `array`. If an array of objects is
                              passed, you may optionally pass a `key` to sort on
                              as the second argument. You may alternatively pass
                              a sorting function as the second argument.


                              #### Parameters


                              * `array` {Array}: The array to sort.

                              * `props` {String|Function}: One or more
                              properties to sort by, or sorting functions to
                              use.


                              #### Example


                              Given an array `[{a: 'zzz'}, {a: 'aaa'}]`:


                              ```handlebars

                              {{sortBy array "a"}}

                              //=> '[{"a":"aaa"}, {"a":"zzz"}]'

                              ```


                              ### <a name="withAfter"></a> {{withAfter}}


                              Use the items in the array, _after_ the specified
                              index, as context inside a block. Opposite of
                              [withBefore](#withBefore).


                              #### Parameters


                              * `array` {Array}

                              * `idx` {Number}

                              * `options` {Object}

                              * `returns` {Array}


                              #### Example


                              Given the array `['a', 'b', 'c', 'd', 'e']`:


                              ```handlebars

                              {{#withAfter array 3}}
                                {{this}}
                              {{/withAfter}}

                              //=> "de"

                              ```


                              ### <a name="withBefore"></a> {{withBefore}}


                              Use the items in the array, _before_ the specified
                              index, as context inside a block. Opposite of
                              [withAfter](#withAfter).


                              #### Parameters


                              * `array` {Array}

                              * `idx` {Number}

                              * `options` {Object}

                              * `returns` {Array}


                              #### Example


                              Given the array `['a', 'b', 'c', 'd', 'e']`:


                              ```handlebars

                              {{#withBefore array 3}}
                                {{this}}
                              {{/withBefore}}

                              //=> 'ab'

                              ```


                              ### <a name="withFirst"></a> {{withFirst}}


                              Uses a collection's first item inside a Handlebars
                              block expression. Opposite of
                              [withLast](#withLast).


                              #### Parameters


                              * `array` {Array}

                              * `idx` {Number}

                              * `options` {Object}

                              * `returns` {String}


                              #### Example


                              Given the array `['a', 'b', 'c']`:


                              ```handlebars

                              {{#withFirst array}}
                                {{this}}
                              {{/withFirst}}

                              //=> 'a'

                              ```

                              ### <a name="withLast"></a> {{withLast}}


                              Use the last item, or `n` items, in an array as
                              context inside a block. Opposite of
                              [withFirst](#withFirst).


                              #### Parameters


                              * `array` {Array}

                              * `idx` {Number}: The starting index.

                              * `options` {Object}

                              * `returns` {String}


                              #### Example


                              Given the array `['a', 'b', 'c']`:


                              ```handlebars

                              {{#withLast array}}
                                {{this}}
                              {{/withLast}}

                              //=> 'c'

                              ```


                              ### {{withSort}}


                              Block helper that sorts a collection and exposes
                              the sorted collection as context inside the block.


                              #### Parameters


                              * `array` {Array}

                              * `prop` {String}

                              * `options` {Object}: Specify `reverse="true"` to
                              reverse the array.

                              * `returns` {String}


                              #### Example


                              Given the array `['b', 'a', 'c']`:


                              ```handlebars

                              {{#withSort array}}{{this}}{{/withSort}}

                              //=> 'abc'

                              ```


                              # <a name="collection"></a> Collection Helpers


                              The following standard helpers are available to
                              handle collections.


                              ### {{isEmpty}}


                              Block helper that returns a block *if* the given
                              collection is empty. If the collection is not
                              empty, returns the inverse block (if supplied).


                              #### Parameters


                              * `collection` {Object}

                              * `options` {Object}

                              * `returns` {String}


                              ### {{iterate}}


                              Iterates over an array or object.


                              #### Parameters


                              * `context` {Object|Array}: The collection to
                              iterate over.

                              * `options` {Object}

                              * `returns` {String}


                              ### {{length}}


                              Returns the length of the given collection. When
                              using a string literal in the template, the string
                              must be value JSON. See the example below.
                              Otherwise, pass in an array or object from the
                              context.


                              #### Parameters


                              * `value` {Array|Object|String}

                              * `returns` {Number}: The length of the value.


                              #### Example


                              ```handlebars

                              {{length '["a", "b", "c"]'}}

                              //=> 3


                              //=> myArray = ['a', 'b', 'c', 'd', 'e'];

                              {{length myArray}}

                              //=> 5


                              //=> myObject = {'a': 'a', 'b': 'b'};

                              {{length myObject}}

                              //=> 2

                              ```


                              # <a name="comparison"></a> Comparison Helpers


                              The following standard helpers are available to
                              handle comparisons.


                              ### {{and}}


                              Block helper that renders the block if *both* of
                              the given values are truthy. If you specify an
                              inverse block, it will be rendered when falsy.


                              #### Parameters


                              * `a` {any}

                              * `b` {any}

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}


                              ### {{gt}}


                              Block helper that renders a block if `a` is
                              *greater than* `b`.


                              If an inverse block is specified, it will be
                              rendered when falsy. You may optionally use the
                              `compare=""` hash argument for the second value.


                              #### Parameters


                              * `a` {String}

                              * `b` {String}

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}: Block, or inverse block if
                              specified and falsy.


                              ### {{gte}}


                              Block helper that renders a block if `a` is
                              *greater than or equal to* `b`.


                              If an inverse block is specified, it will be
                              rendered when falsy. You may optionally use the
                              `compare=""` hash argument for the second value.


                              #### Parameters


                              * `a` {String}

                              * `b` {String}

                              * `options` {Object}: Handlebars-provided options
                              object

                              * `returns` {String}: Block, or inverse block if
                              specified and falsy.


                              ### {{has}}


                              Block helper that renders a block if `value` has
                              `pattern`. If an inverse block is specified, it
                              will be rendered when falsy.


                              #### Parameters


                              * `val` {any}: The value to check.

                              * `pattern` {any}: The pattern to check for.

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}


                              ### {{eq}}


                              Block helper that renders a block if `a` is *equal
                              to* `b`. If an inverse block is specified,  it
                              will be rendered when falsy. You may optionally
                              use the `compare=""` hash argument for the second
                              value.


                              #### Parameters


                              * `a` {String}

                              * `b` {String}

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}: Block, or inverse block if
                              specified and falsy.


                              ### {{ifEven}}


                              Returns `true` if the given value is an even
                              number.


                              #### Parameters


                              * `number` {Number}

                              * `options` {Object}: Handlebars-provided options
                              object

                              * `returns` {String}: Block, or inverse block if
                              specified and falsy.


                              #### Example


                              ```handlebars

                              {{#ifEven value}}
                                render A
                              {{else}}
                                render B
                              {{/ifEven}}

                              ```


                              ### {{ifNth}}


                              Conditionally renders a block *if* dividing the
                              `a` operand by `b` yields a remainder of zero. If
                              you specify an inverse block, it will be rendered
                              when the remainder is *not* zero.


                              #### Parameters


                              * {}: {Number}

                              * {}: {Number}

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}: Block, or inverse block if
                              specified and falsy.


                              ### {{ifOdd}}


                              Block helper that renders a block if `value` is
                              *an odd number*. If an inverse block is specified,
                              it will be rendered when falsy.


                              #### Parameters


                              * `value` {Object}

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}: Block, or inverse block if
                              specified and falsy.


                              #### Example


                              ```handlebars

                              {{#ifOdd value}}
                                render A
                              {{else}}
                                render B
                              {{/ifOdd}}

                              ```


                              ### {{is}}


                              Block helper that renders a block if `a` is *equal
                              to* `b`. If an inverse block is specified, it will
                              be rendered when falsy.


                              #### Parameters


                              * `a` {any}

                              * `b` {any}

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}


                              ### {{isnt}}


                              Block helper that renders a block if `a` is *not
                              equal to* `b`. If an inverse block is specified,
                              it will be rendered when falsy.


                              #### Parameters


                              * `a` {String}

                              * `b` {String}

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}


                              ### {{lt}}


                              Block helper that renders a block if `a` is *less
                              than* `b`.


                              If an inverse block is specified, it will be
                              rendered when falsy. You may optionally use the
                              `compare=""` hash argument for the second value.


                              #### Parameters


                              * `context` {Object}

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}: Block, or inverse block if
                              specified and falsy.


                              ### {{lte}}


                              Block helper that renders a block if `a` is *less
                              than or equal to* `b`.


                              If an inverse block is specified, it will be
                              rendered when falsy. You may optionally use the
                              `compare=""` hash argument for the second value.


                              #### Parameters


                              * `a` {String}

                              * `b` {String}

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}: Block, or inverse block if
                              specified and falsy.


                              ### {{neither}}


                              Block helper that renders a block if *neither of*
                              the given values are truthy. If you specify an
                              inverse block, it will be rendered when falsy.


                              #### Parameters


                              * `a` {any}

                              * `b` {any}

                              * `options` {}: Handlebars options object.

                              * `returns` {String}: Block, or inverse block if
                              specified and falsy.


                              ### {{unlessEq}}


                              Block helper that always renders the inverse block
                              *unless `a` is equal to `b`*.


                              #### Parameters


                              * `a` {String}

                              * `b` {String}

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}: Inverse block by default, or
                              block if falsy.


                              ### {{unlessGt}}


                              Block helper that always renders the inverse block
                              *unless `a` is greater than `b`*.


                              #### Parameters


                              * `context` {Object}

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}: Inverse block by default, or
                              block if falsy.


                              ### {{unlessLt}}


                              Block helper that always renders the inverse block
                              *unless `a` is less than `b`*.


                              #### Parameters


                              * `context` {Object}

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}: Block, or inverse block if
                              specified and falsy.


                              ### {{unlessGteq}}


                              Block helper that always renders the inverse block
                              *unless `a` is greater than or equal to `b`*.


                              #### Parameters


                              * `context` {Object}

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}: Block, or inverse block if
                              specified and falsy.


                              ### {{unlessLteq}}


                              Block helper that always renders the inverse block
                              *unless `a` is less than or equal to `b`*.


                              #### Parameters


                              * `context` {Object}

                              * `options` {Object}: Handlebars-provided options
                              object.

                              * `returns` {String}: Block, or inverse block if
                              specified and falsy.



                              # <a name="control"></a> Control-Flow Helpers


                              The following control-flow helpers have been
                              customized for the Stencil framework:


                              * [Conditional Control Flow](#ctrl_conditional)

                              * [Loop Control Flow](#ctrl_loop)


                              Beyond the formal examples below, syntax and
                              examples for control-flow helpers are covered in
                              the official Handlebars documentation
     