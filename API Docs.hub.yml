title: Dev Center
header:
  nav:
    left:
      - title: API Docs
        path: /api-docs
      - title: Stencil Docs
        path: /stencil-docs
      - title: Tools & Resources
        path: ''
      - title: Changelog
        path: /changelog
    right:
      - title: My Apps
        path: 'https://devtools.bigcommerce.com'
      - title: Create Account
        path: 'https://login.bigcommerce.com/signup'
pages:
  /:
    title: Developer Documentation
    data:
      $ref: ./Home.html
  /stencil-docs:
    title: Stencil Docs
    data:
      children:
        - title: Getting Started
          route:
            path: /getting-started
          data:
            children:
              - title: Transitioning to Stencil
                route:
                  path: /transitionining-to-stencil
                data:
                  blocks:
                    - type: text
                      data: '# Transitioning to Stencil'
                    - type: text
                      data: >-
                        Are you approaching Stencil from a different theming
                        framework, like BigCommerce's legacy Blueprint
                        framework? Are you moving to the Stencil templating
                        environment from pure HTML and CSS-based design?


                        Use this article to identify your ideal method for
                        Stencil theme development and learn Stencil's
                        conventions. It will cover the following information:


                        * Choosing a Development Path

                        * Front-Matter Quick Start

                        * Handlebars Quick Start

                        * SEO Tips/Best Practices

                        * Blueprint-to-Stencil Features Map

                        * Interacting with the BigCommerce API

                        * Partnering with BigCommerce

                        * Next Steps
                    - type: text
                      data: >-
                        ## Choosing a Development Path


                        You have four options for developing Stencil themes
                        (options are *not* mutually exclusive):


                        * Find a Design & Solutions Partner

                        * Light Customization using the Theme Editor

                        * Light Customization using HTML and CSS

                        * Adapting a Stencil Theme or Developing from Scratch
                    - type: text
                      data: >-
                        ###  Find a Design & Solutions Partner


                        If you prefer to have an expert collaborator customize
                        your theme, we recommend working with one of our
                        certified BigCommerce Design & Solutions Partners.
                        Reference the following resources to do so:


                        * [Partner
                        Directory](https://partners.bigcommerce.com/directory/search?i=75)

                        * [Working with a Design
                        Partner](https://support.bigcommerce.com/articles/Learning/Working-with-a-Design-Partner)
                        (Support Guide)
                    - type: text
                      data: >-
                        ### Light Customization – Graphical Theme Editor


                        Stencil can be customized without the use of any
                        specialized development tools or techniques by using of
                        the Stencil Theme Editor. The Stencil Theme Editor still
                        enables customization of a theme's colors, typography,
                        banners, headings, carousel, and footer. It also enables
                        customization of broader layout characteristics, such as
                        the number of products displayed in various panels,
                        category pages, and brand pages.


                        For details, please see:


                        * [Theme
                        Editor](https://support.bigcommerce.com/articles/Public/Using-the-Stencil-Theme-Editor/)
                        (Support article)

                        * [Stencil and the BigCommerce Control
                        Panel](https://www.youtube.com/watch?v=d2F6F8LJXzs&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0&index=2)
                        (Video introduction to Theme Editor)

                        * [Changing Your Store's
                        Theme](https://support.bigcommerce.com/articles/Learning/What-to-Consider-When-Changing-Your-Theme)
                        (Support guide)

                        * [Personalizing Your
                        Theme](https://support.bigcommerce.com/articles/Learning/Personalizing-your-New-Theme)
                        (Support guide)
                    - type: text
                      data: >-
                        ### Light Customization – HTML/CSS


                        If you are most comfortable working in HTML and CSS,
                        Stencil's *Edit Theme Files* feature allows you to
                        directly edit most of your theme's files. For details,
                        please see:


                        * [Edit Theme
                        Files](https://support.bigcommerce.com/articles/Public/Editing-Stencil-Theme-Files)
                        (Support article)

                        * [Edit Theme
                        Files](https://www.youtube.com/watch?v=waJ1dg_dAh8&index=11&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0)
                        (Video overview of copying and editing a theme's files)
                    - type: text
                      data: >-
                        ### Adapt a Stencil Theme, or Develop from Scratch


                        For complete control over a theme's appearance and logic
                        – including the ability to edit _all_ theme
                        configuration files – you will want to use the Stencil
                        CLI (command-line interface) framework. Stencil CLI is
                        described in detail in the remainder of this
                        documentation. 


                        To get up to speed on Stencil&#160;CLI's templating
                        conventions, please see the Quick Start sections just
                        below. Also see:


                        * [Getting Started with the Stencil
                        Framework](https://www.youtube.com/playlist?list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0)
                        (Videos)
                    - type: text
                      data: >+
                        ## Front-Matter Quick Start


                        Stencil templates start with a section of "front matter"
                        where you can and concisely customize each page's design
                        and layout details. 


                        This front-matter section uses conventions from YAML, a
                        simple, widely used markup language. If you haven't used
                        these conventions before, refer to our [Front-Matter
                        Overview](https://stencil.bigcommerce.com/docs/using-yaml-front-matter).


                    - type: text
                      data: >
                        ## Handlebars Quick Start


                        Stencil uses Handlebars.js to assemble dynamic content
                        into the storefront pages that are displayed to
                        shoppers. The dynamic content can be drawn from a few
                        sources, like the store's catalog.


                        Handlebars' syntax is quite simple, and it allows you to
                        accomplish powerful JavaScript operations with minimal
                        JavaScript code. To learn more about Handlebars.js, see
                        these third-party tutorials: 


                        * [Learn Handlebars in 10 Minutes or
                        Less](http://tutorialzine.com/2015/01/learn-handlebars-in-10-minutes/)

                        * [A Beginner’s Guide to
                        Handlebars](https://www.sitepoint.com/a-beginners-guide-to-handlebars/)

                        * [Getting Started with
                        Handlebars.js](http://blog.teamtreehouse.com/getting-started-with-handlebars-js)

                        * [Handlebars interactive
                        tutorial](http://tryhandlebarsjs.com/)
                    - type: text
                      data: >+
                        ## SEO Tips/Best Practices


                        Search-engine optimization (SEO) helps translate an
                        elegant theme into a successful, high-conversion
                        storefront. Because so many shoppers reach online stores
                        through a search engine, a search-optimized site will be
                        more visible – attracting more traffic. 


                        The Stencil framework is [designed for high SEO
                        performance](https://www.bigcommerce.com/improve-organic-traffic/).
                        However, you will want to keep SEO in mind as you build
                        out each theme and storefront. For guidelines, please
                        see these BigCommerce support articles (which are a
                        series of intermediate to advanced chapters in our Guide
                        to SEO):


                        * [SEO Do's and
                        Don'ts](https://support.bigcommerce.com/articles/Learning/Things-to-Know/)

                        * [Developing a Keyword
                        Strategy](https://support.bigcommerce.com/articles/Learning/Developing-a-Keyword-Strategy/)

                        * [SEO Success
                        Essentials](https://support.bigcommerce.com/articles/Learning/Bigcommerce-SEO-Success-Essentials/)

                        * [Advanced SEO on
                        BigCommerce](https://support.bigcommerce.com/articles/Learning/Advanced-SEO-on-Bigcommerce/)


                        Also checkout our [Guide to Keyword
                        Research](https://support.bigcommerce.com/articles/Learning/Value-of-Keywords/).


                    - type: text
                      data: >-
                        ## Blueprint-to-Stencil Features Map 


                        This following resources are designed to help you
                        identify the Stencil counterparts to familiar Blueprint
                        components.


                        * What to Consider When Changing Your Theme (Support
                        article)

                        * Stencil and the BigCommerce Control Panel (Video tour
                        of Blueprint-to-Stencil  changes in the BigCommerce
                        control panel)
              - title: Supported Browsers
                route:
                  path: /supported-browsers
                data:
                  blocks:
                    - type: text
                      data: '# Supported Browsers'
                    - type: text
                      data: >-
                        The following browsers are supported for BigCommerce
                        storefronts that use Stencil-based themes. The browsers
                        are sorted by popularity, beginning with the most
                        popular browsers. Please ensure that your theme
                        functions properly with all supported browsers.


                        ### Desktop Browsers


                        * Google Chrome (latest edition)

                        * Firefox (latest edition)

                        * Internet Explorer 10 and 11

                        * Safari (latest edition)

                        * Microsoft Edge (latest edition)


                        ## Mobile Browsers 


                        * Android Chrome browser (latest edition)

                        * iOS Safari browser (latest edition)
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          Browser support will cease to be offered if browser
                          usage falls below 2%.
                        title: Usage Support
              - title: Installation and Launch
                route:
                  path: /installation-and-launch
                data:
                  children:
                    - title: Mac OS Prerequisites
                      route:
                        path: /mac-os-prerequisites
                      data:
                        blocks:
                          - type: text
                            data: '# Mac OS Prerequisites'
                          - type: callout
                            data:
                              title: Platform Support
                              body: >-
                                These instructions have been tested on Mac OS X
                                Yosemite. Dependencies for other platforms will
                                be added upon further testing.
                          - type: text
                            data: >-
                              <span id="Prerequisites">To smoothly set up
                              Stencil on Mac OS, please first verify the
                              requirements listed here: </span>


                              * [Xcode](#xcode)

                              * [Node.js](#Node+npm_Mac)

                              * [Next Steps](#next)
                          - type: text
                            data: >-
                              ## <span id="xcode"> Xcode </span>


                              You must install the <a
                              href="https://developer.apple.com/xcode/download/">Xcode</a>
                              development tools (latest stable version).
                          - type: text
                            data: >-
                              ## <span id="Node+npm_Mac"> Node.js </span>


                              Stencil requires the <a
                              href="https://nodejs.org/">Node.js</a> runtime
                              environment, version <a
                              href="https://nodejs.org/en/blog/release/">6.x or
                              later</a>. We have tested Stencil on selected
                              Node.js versions, from <a
                              href="https://nodejs.org/en/blog/release/v6.10.3/">6.10.3</a>
                              to <a
                              href="https://nodejs.org/en/blog/release/v7.9.0/">7.9.0</a>. 


                              We recommend that you install or update Node.js
                              using <a
                              href="https://github.com/creationix/nvm#installation">nvm</a>.
                              First install nvm, version <a
                              href="https://github.com/creationix/nvm/tree/v0.31.0">0.31.0</a>,
                              as follows:


                              ```

                              curl -o-
                              https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh
                              | bash

                              ```


                              Next, explicitly install a supported Node.js
                              version, using this convention:<br>


                              ```

                              nvm install 6.4.0

                              ```
                          - type: callout
                            data:
                              title: Notes on Dependencies
                              body: >-
                                You can choose to instead download the latest
                                x.x version of Node.js from the Node.js
                                Foundation's archives, using URLs of the form:
                                https://nodejs.org/dist/latest-v6.x/,
                                https://nodejs.org/dist/latest-v7.x/, etc. In
                                all cases, we recommend installing only LTS
                                ("Long-Term Support"/"Mature and Dependable")
                                versions.


                                While alternate versions might also support
                                Stencil, BigCommerce does not offer technical
                                assistance on substitutions for, or customized
                                versions of, the tested dependencies listed
                                here.
                          - type: text
                            data: >+
                              ## Troubleshooting


                              If you run into any problems with Stencil
                              installation or launch, first consult
                              Troubleshooting Your Setup. 


                              If that does not resolve your issue, consult our
                              Support resources, which include community/peer
                              support via BigCommerce and Stack Overflow forums.

                          - type: text
                            data: >-
                              ## <span id="next" > Next Steps </span>


                              Navigate to Installing Stencil CLI tothe Stencil
                              framework.
                    - title: Linux Prerequisities
                      route:
                        path: /linux-prerequisites
                      data: {}
                    - title: 'Windows Prerequisites '
                      route:
                        path: /windows-prerequisites
                      data: {}
                    - title: Installing Stencil CLI/Framework
                      route:
                        path: /new-page-sjfek
                      data:
                        blocks:
                          - type: text
                            data: >
                              ## Video Demonstrations

                              Watch Stencil senior developer Mick Ryan's brief
                              demonstration of Stencil installation and launch:
                    - title: Adding a Base Theme
                      route:
                        path: /adding-a-base-theme
                      data: {}
                    - title: Installing Javascript
                      route:
                        path: /new-subpage
                      data: {}
              - title: Authentication
                route:
                  path: /authentication
                data:
                  children:
                    - title: Creating an API Account
                      route:
                        path: /creating-an-api-account
                      data: {}
                    - title: Issuing Additional Tokens
                      route:
                        path: /issuing-additional-tokens
                      data: {}
                    - title: Revoking Tokens
                      route:
                        path: /revoking-tokens
                      data: {}
                    - title: Copying a Token to Initialize Stencil
                      route:
                        path: /copying-a-token-to-initializ
                      data: {}
                    - title: Launching Stencil
                      route:
                        path: /launching-stencil
                      data: {}
              - title: Authorizing and Initializing Stencil
                route:
                  path: /authorizing-and-initializing-stencil
                data:
                  children:
                    - title: Running Stencil Locally
                      route:
                        path: /running-stencil-locally
                      data: {}
                    - title: Troubleshooting Your Setup
                      route:
                        path: /troubleshooting-your-setup
                      data: {}
                    - title: >-
                        Uninstalling/Reinstalling Stencil and Its Node
                        Prerequisites
                      route:
                        path: /installing-stencil
                      data: {}
                    - title: Stencil CLI Options and Commands
                      route:
                        path: /stencil-cli-options-and-commands
                      data: {}
                    - title: Stencil Theme's Path Anatomy
                      route:
                        path: /stencil-themes-path-anatomy
                      data: {}
        - title: Advanced Installation Options
          route:
            path: /advanced-installation-options
          data:
            blocks:
              - type: text
                data: ''
            children:
              - title: 'Stencil Setup, Illustrated'
                route:
                  path: /stencil-setup
                data:
                  blocks:
                    - type: text
                      data: >-
                        The diagram below looks complex because it shows _all_
                        currently supported workflows for setting up Stencil.
                        However, for a typical initial setup – incorporating the
                        default Cornerstone reference theme – you would just
                        follow the black arrows straight down from top to
                        bottom.


                        Here are the color codes for each setup scenario, with
                        links to details about individual steps:


                        * Black: Basic initial setup, relying on default
                        Cornerstone theme. 

                        * Purple: Customize a theme downloaded from Theme
                        Marketplace (_other than_ Cornerstone). 

                        * Orange: Refresh Cornerstone from Theme Marketplace. 

                        * Green: Configure a custom JavaScript build system, to
                        avoid dependence on Webpack and jspm.

                        * Blue: Adds onto any of the preceding four scenarios.
                        If developing for a BigCommerce Blueprint production
                        store launched before Jan. 26, 2016, you must add one
                        extra step to enable Stencil in the store's control
                        panel.
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1532113466661
              - title: Navigating Your Setup Scenario
                route:
                  path: /navigating-your-setup-scenario
                data:
                  blocks:
                    - type: text
                      data: >-
                        # Navigating Your Setup Scenario


                        //information that doesn't need to be indexed


                        Below, each heading identifies one theme-development
                        scenario and lists the minimum installation steps you
                        will need to support that scenario:


                        * Initial Cornerstone-Based Setup

                        * Cornerstone (or Diamond/Queen) Refresh

                        * Downloaded Marketplace Theme

                        * Custom Build System

                        * Blueprint Store Launched before 1/26/2016
                    - type: callout
                      data:
                        type: warning
                        title: Notes
                        body: >-
                          * Some steps are optional for some theme-development
                          workflows. See below to identify the recommended
                          installation pathway for your own scenario. 


                          * After successful framework installation (or
                          reinstallation), all scenarios will link you to the
                          Preparing Your Store/Tokens Launching Stencil
                          subsections, to launch your theme locally against a
                          BigCommerce storefront.


                          * Our installation instructions have been tested on
                          Mac OS X Yosemite, Linux/Ubuntu v.14.04.4, and
                          Windows. Dependencies for other platforms/releases
                          will be added upon further testing.


                          * If you encounter any problems, please see the
                          Troubleshooting entry.
                    - type: text
                      data: >-
                        ## Initial Cornerstone-Based Setup 


                        Start developing based on BigCommerce's default
                        Cornerstone theme. This is a streamlined workflow, using
                        Webpack as its JavaScript build system. Steps required:


                        * Install all prerequisites

                        * Install Stencil CLI

                        * Clone default Cornerstone theme

                        * Install JavaScript utilities with npm

                        * Prepare Store and Tokens

                        * Proceed to Launching Stencil
                    - type: text
                      data: >-
                        ## Cornerstone Refresh 


                        Download and install a new version of Cornerstone from
                        BigCommerce's Theme Marketplace. Steps required:


                        * Assume all prerequisites installed and Stencil CLI
                        installed

                        * Download fresh Cornerstone .zip

                        * Reinstall JavaScript utilities with npm

                        * Repeat Launching Stencil
                    - type: text
                      data: >-
                        ## Downloaded Marketplace Theme 


                        Customize a theme (_other than_ Cornerstone, Diamond, or
                        Queen) downloaded from BigCommerce's Theme Marketplace.
                        This workflow requires BitBucket, and some earlier theme
                        versions require additional steps for the jspm
                        JavaScript build system. Steps required:


                        * Install all prerequisites

                        * Install Stencil CLI

                        * Set up BitBucket, download .zip, and install
                        JavaScript dependencies

                        * Install JavaScript utilities with npm

                        * Prepare Store and Tokens

                        * Proceed to Launching Stencil
                    - type: text
                      data: >-
                        ## Custom JavaScript Build System 


                        Bypass Webpack (and jspm) by substituting a custom
                        JavaScript build system. Steps recommended:


                        * Install all prerequisites

                        * Install Stencil CLI

                        * Clone default Cornerstone theme

                        * Install JavaScript utilities with npm

                        * Configure your custom build system

                        * Prepare Store and Tokensstore-tokens)

                        * Proceed to Launching Stencil
                    - type: text
                      data: >-
                        ## Blueprint Store Launched before 1/26/2016 


                        Enable Stencil development on a BigCommerce production
                        store that was launched with a Blueprint theme before
                        Jan. 26, 2016. Steps required:

                          * Follow the installation path above that corresponds to your development scenario.
                          * As a separate (and simple) procedure, enable Stencil in the store's control panel.
              - title: Downloading a Refreshed Copy of Cornerstone
                route:
                  path: /downloading-a-refreshed-copy-of-cornerstone
                data:
                  blocks:
                    - type: callout
                      data:
                        body: >-
                          The steps below are required only if you are
                          downloading a refreshed copy of Stencil's default
                          Cornerstone theme, from the BigCommerce Theme
                          Marketplace.


                          If you are downloading a different Marketplace theme
                          for customization, you must instead use the workflow
                          outlined at Downloading and Customizing Marketplace
                          Themes.


                          (Cornerstone, Diamond, and Queen use a simplified
                          workflow that bypasses BitBucket requirements, and
                          that replaces jspm with the Webpack build system. You
                          can configure Webpack's watched folders, or substitute
                          your own build system. For details, please see Webpack
                          and Build-System Options)


                          To keep any _custom or customized theme updated with
                          the new features that BigCommerce adds to Cornerstone,
                          please see our guidelines on Theme Updates and Version
                          Control.
                        title: Optional Workflow
                    - type: callout
                      data:
                        type: error
                        title: Back Up Before Reinstalling
                        body: >-
                          If you are reinstalling over a base theme on which you
                          have already begun development, first back up at least
                          your theme's .stencil file. This file contains your
                          store URL, your BigCommerce username and access
                          tokens, and other basic settings. Preserving those
                          settings will speed up initializing and launching the
                          new version.


                          To allow complete rollback, back up your whole
                          theme-name directory. (In a current default
                          installation, this directory is named.../cornerstone/.
                          Prior to March 2017, this directory's name defaulted
                          to .../stencil/.
                    - type: text
                      data: >-
                        ## Downloading the Cornerstone .zip 


                        Use these steps to download a refreshed version of the
                        Cornerstone, Diamond, or Queen theme from the store
                        control panel's Storefront area: 


                        * If you have not yet added Cornerstone (or
                        Diamond/Queen) to your store, start at Themes
                        Marketplace and add the theme.
                            
                        Go to Storefront -> My Themes.


                        Unpack the zipped theme to a working directory.


                        (This can be the directory where you have been
                        developing your theme, or a new directory.)


                        Reinstalling Dependencies and Relaunching 


                        Ensure that your theme includes all current
                        dependencies, by repeating JavaScript
                        Utilitiesinstallation.
                          
                        Repeat the steps listed in the Launching Stencil
                        subsection


                        Next, ensure that your theme includes all current
                        dependencies by re-running npm, as follows:


                        Navigate to your theme directory. This example assumes
                        that this target directory has the default name stencil


                        `cd stencil`


                        `npm install`


                        You are now ready to resume development of your theme.
                        Please proceed to Launching Stencil


                        Later, when you are ready to upload your customized
                        theme to a store, you should follow the zipping and
                        uploading instructions in Bundling and Submitting a
                        Theme and Troubleshooting Theme Uploads.
              - title: Theme Updates and Version Control
                route:
                  path: /theme-updates-and-version-control
                data:
                  blocks:
                    - type: text
                      data: '# Theme Updates and Version Control'
                    - type: text
                      data: >-
                        This page offers version-control best practices for:

                        * Isolating Customizations for Easier Updates

                        * Synchronizing with Cornerstone Theme Updates

                        * Synchronizing Updates for Multiple Themes


                        Each section progresses from simpler to more-complex
                        scenarios.
                    - type: callout
                      data:
                        title: Distributed Version Control via Git
                        body: >-
                          Many techniques discussed below rely on GitHub's
                          _distributed version control_ model and features. For
                          the underlying principles, please see [Git's own
                          documentation](https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control).
                    - type: text
                      data: >-
                        ## Isolating Customizations for Easier Updates


                        How best to set up your customized Stencil theme to
                        smoothly incorporate future updates in its base theme?
                        We're gratefully sharing these guidelines from Ken
                        Utting, Web Developer for BigCommerce client
                        [goruck.com](https://www.goruck.com/). His scenario
                        (slightly edited here) addresses maintaining a single
                        custom theme that is based on a third-party Marketplace
                        theme. But&#160;these guidelines also apply to
                        maintaining one, or multiple, themes based on Stencil's
                        default Cornerstone theme.
                    - type: text
                      data: "## Best Practices for Handling Theme Updates\n\nWe've made significant changes to our theme, and one principle that I've found successful is isolating my changes as much as possible. I try to put my changes into their own files, whether they're changes to templates, JavaScript, or SCSS. \n\nI also name all my files, CSS classes and identifiers, and JavaScript methods and classes with a `gr-` prefix (as an abbreviation for our company, GORUCK LLC). Also, any changes I make to standard theme files are identified with a comment, such as: \n\n`Go Ruck Customization`\n\t\t\nFor example, I have a file in `assets/scss/` named `gr-theme.scss`. All of the styles I've added to the theme are either in this file, or imported by this file. So for styling, my only changes to the theme itself are in a handful of places where I had to change an existing theme style (identified with a comment), plus this one line in `templates/layout/base.html`:\n\n`{{{stylesheet '/assets/css/gr-theme.css'}}}`\n\nI've found that this approach provides several advantages: \n\n* It makes it easier to distinguish my custom code from code supplied by the default theme.\n* It makes it less likely that my code will get intermingled with the standard theme code. This, in turn, prevents my code from unexpectedly being affected by theme updates.\n* It makes it easier to merge base-theme updates into my theme code.\n\n##### Comparing and Merging Apples to Apples\n\nHaving isolated my changes as much as I can, I identify theme changes by comparing stock (base) themes, rather than by comparing base themes to my customized theme. When a new version of the theme is released, I download the .zip file from the BigCommerce control panel. \n\nI then use a desktop diff tool (Beyond Compare) to \ncompare the new version to the .zip file of the theme's previous release. I ignore changes in the .zip file's\n `meta/` and `parsed/` folders, and to its `manifest.json`, and do a `Compare Contents` on the rest of the files.\n\nUltimately, I need to examine the changes carefully, to identify any changes that might affect, or be affected by, my customizations. And I need to test thoroughly. But comparing the stock themes to each other reduces the number of changes I have to examine. \n\nAlso, because I isolate my changes, most of the theme changes can be copied directly into the corresponding file in my customized theme. In practice, this means that I can limit my testing to the areas affected by changes in the standard theme, rather than having to re-test all my own changes.\n\nI personally find that it is also helpful to migrate *every* theme update into my customized version, as the update is released. If I were to wait, and to allow changes to accumulate and become more substantial, I think it would be more difficult to adequately test – and correctly integrate – the changes. Similarly, I'm grateful to the developer of our base theme (Pixel Union) for updates that have always made small, incremental changes.\n\n##### Dynamic Content Injection\n\nFinally, we've also come up with a variety of techniques for dynamically placing content on a page. For example, we can dynamically add tabs to a product page, using content stored on our WebDAV. Similarly, we can inject content from an external file into the body of a page. This allows us to put something that appears in many places, like a sizing chart, in a single place where it can be easily updated. \n\nOr, we can use the BigCommerce control panel's various HTML editors – for Products, Categories, and Content > Web Pages – to inject content into predefined \"dropzones\" (custom div's). This allows us to generate a wide variety of content pages using a single custom template.\n\nAll of these techniques move content out of the theme, minimizing the complexity of merging base-theme updates into our customized theme. For details on how we use them, please see Dynamic Content Rendering on Stencil Storefronts."
              - title: Configuring Webpack or a Custom Build System
                route:
                  path: /configuring-webpack
                data:
                  blocks:
                    - type: text
                      data: '# Configuring Webpack or a Custom Build System'
                    - type: text
                      data: >-
                        ## Webpack, jspm, or Other JavaScript Managers


                        Stencil themes are Node.js applications, and therefore
                        contain dependencies on other JavaScript libraries. For
                        Stencil's default Cornerstone theme, we provide the
                        [Webpack](https://webpack.github.io/docs/) build manager
                        to handle these dependencies. 


                        As you develop a theme based on Cornerstone, you have
                        options to reconfigure Webpack's watched folders, and to
                        even substitute a different build system. These options
                        are explained below.


                        All themes currently in the BigCommerce Theme
                        Marketplace use Webpack. However, older versions of
                        certain themes used the jspm JavaScript dependency
                        manager instead of Webpack. Please see this page to
                        determine (by version number) whether you are developing
                        based on one of these earlier versions, and to find the
                        required jspm setup procedures.
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          BigCommerce does not offer technical assistance on
                          substitutions for the default dependencies listed in
                          this documentation.
                        title: Limited Support
                    - type: text
                      data: >-
                        ## Webpack-Specific Configuration


                        The following Webpack configuration options can aid in
                        troubleshooting.


                        ### More-Verbose JavaScript Diagnostics


                        If JavaScript errors in your browser's developer tools
                        are not reporting filenames and line numbers, try
                        changing your `webpack.conf.js` file's
                        [sourcemap](https://webpack.js.org/guides/build-performance/#devtool)
                        entry from:


                        ```

                        devtool: 'source-map'

                        ```

                        to:


                        ```

                        devtool: 'eval-source-map'

                        ```


                        The `eval-source-map` option is slower, but more
                        verbose. This [Webpack Devtool
                        Configuration](https://webpack.js.org/configuration/devtool/)
                        article provides an overview of all devtool options and
                        details regarding each.



                        ## Build-System Configuration File


                        To take advantage of automatic JavaScript bundling and
                        browser refresh, Stencil themes require the
                        [`stencil.conf.js`](https://github.com/bigcommerce/cornerstone/blob/master/stencil.conf.js)
                        file. To enable a custom build system, you would need to
                        edit this file.


                        Within `stencil.conf.js`, Stencil CLI looks for the
                        exported `watchOptions` object, and `development` and
                        `production` callbacks, shown below. 


                        Let's take a closer look at each of these three
                        references.


                        ## Watched Folders: watchOptions Object


                        The `watchOptions` object defines directories for the
                        [Browsersync](https://browsersync.io/docs) preview
                        engine to watch or ignore, in two respective lists. You
                        are free to edit these lists:


                        ```

                        /**
                         * Watch options for the core watcher
                         * @type {{files: string[], ignored: string[]}}
                         */
                        var watchOptions = {
                            // If files in these directories change, reload the page.
                            files: [
                                '/templates',
                                '/lang'
                            ],

                            //Do not watch files in these directories
                             ignored: [
                                '/assets/scss',
                                '/assets/less',
                                '/assets/css',
                                '/assets/dist',
                            ]
                        };

                        ```


                        ## JavaScript Rebundling: development Function


                        Upon the command-line instruction `stencil start`,
                        Stencil CLI will look for and call the `development`
                        function. 


                        In the base Cornerstone theme, we have created a Webpack
                        watcher to trigger a browser reload whenever theme edits
                        cause JavaScript to be rebundled to the theme's
                        `bundle.js` file. This watcher uses options configured
                        in the webpack.conf.js file passed by `webpackConfig`.
                        So a JavaScript rebuild will refresh the browser:


                        ```

                        function development() {
                            webpack(webpackConfig).watch({}, err => {
                                if (err) {
                                    console.error(err.message, err.details);
                                }

                                process.send('reload');
                            });
                        }

                        ```


                        ## Theme Packaging: production Function 


                        When you issue the command-line instruction `stencil
                        bundle`, to process and package a completed theme for
                        upload to a store, Stencil CLI will look for and call
                        the `production` function. This function passes a
                        callback as its first argument, to support asynchronous
                        builds. 


                        The callback must be invoked somewhere inside the
                        `production` function, to notify Stencil CLI that the
                        theme-specific build has completed and is ready to
                        package:


                        ```

                        function production() {
                            webpackConfig.watch = false;
                            webpackConfig.devtool = false;
                            webpackConfig.plugins.push(new webpack.LoaderOptionsPlugin({
                                minimize: true,
                            }));
                            webpackConfig.plugins.push(new webpack.optimize.UglifyJsPlugin({
                                comments: false,
                                compress: {
                                    warnings: true,
                                },
                                sourceMap: false, // Toggle to turn on source maps.
                            }));

                            webpack(webpackConfig).run(err => {
                                if (err) {
                                    console.error(err.message, err.details);
                                    throw err;
                                }

                                process.send('done');
                            });
                        }


                        if (process.send) {
                            // running as a forked worker
                            process.on('message', message => {
                                if (message === 'development') {
                                    development();
                                }

                                if (message === 'production') {
                                    production();
                                }
                            });

                            process.send('ready');
                        }

                        ```
        - title: Development Quickstart
          route:
            path: /new-page-hyafc
          data:
            children:
              - title: Creating a New Theme
                route:
                  path: /new-subpage-4
                data: {}
              - title: Making Basic Design and Layout Changes
                route:
                  path: /new-subpage-3
                data: {}
              - title: config.json-resource Interactions
                route:
                  path: /new-subpage-2
                data: {}
              - title: Customizing Javascript
                route:
                  path: /new-subpage-1
                data: {}
              - title: Remdering HTML with Ajax
                route:
                  path: /new-subpage
                data: {}
              - title: Testing and Debugging Your Theme
                route:
                  path: /new-subpage
                data: {}
              - title: Managing Theme Variations
                route:
                  path: /new-subpage
                data: {}
        - title: Theme Editor Configuration
          route:
            path: /theme-editor-configuration
          data:
            children:
              - title: What is the Stencil Theme Editor?
                route:
                  path: /new-subpage-3
                data:
                  blocks:
                    - type: text
                      data: >-
                        Two JSON files in your Stencil theme's home directory,
                        config.json and schema.json, govern which settings the
                        theme will expose.


                        The config.json file's key/value pairs define:

                        * Global, theme-wide variables

                        * Theme variations

                        * Variation-specific variables


                        The schema.json file specifies which theme settings will
                        be accessible through the Theme Editor GUI. Your entries
                        here also define the graphical controls presented to
                        merchants for each setting.
              - title: Configuration Overview
                route:
                  path: /new-subpage-2
                data: {}
              - title: config.json Metedata
                route:
                  path: /new-subpage-1
                data: {}
              - title: Preparing Thumbnail Images
                route:
                  path: /new-subpage
                data: {}
              - title: scheme.json/Theme Editor Metadata
                route:
                  path: /new-subpage
                data: {}
              - title: Preparing Thumbnail Images
                route:
                  path: /new-subpage
                data: {}
              - title: Theme Editor Troubleshooting
                route:
                  path: /new-subpage
                data: {}
        - title: Technology Stack
          route:
            path: /new-page-sj3dr
          data:
            children:
              - title: Technology Overview
                route:
                  path: /new-subpage
                data: {}
              - title: 'Templates, Partials, and Compilation'
                route:
                  path: /new-subpage-1
                data: {}
        - title: Shipping A Theme
          route:
            path: /shipping-a-theme
          data:
            children:
              - title: Shrinking Your Theme by Excluding Static Assets
                route:
                  path: /shrinking-your-theme
                data: {}
              - title: Staging a theme for CDN Delivery
                route:
                  path: /staging-a-theme
                data: {}
              - title: Bundling and Submitting a Theme
                route:
                  path: /bundling-and-submitting
                data: {}
              - title: Adding Recaptcha V2
                route:
                  path: /adding-recaptcha
                data: {}
              - title: Troubleshooting Theme Uploads
                route:
                  path: /new-subpage-4
                data: {}
        - title: Front-Matter Attributes
          route:
            path: /front-matter-attributes
          data:
            children:
              - title: Front Matter Reference
                route:
                  path: /new-subpage
                data: {}
        - title: Handlebars Syntax and Helpers
          route:
            path: /handlebars-syntax-and-helpers
          data:
            children:
              - title: Handlebars Helpers Reference
                route:
                  path: /handlebars-helpers-reference
                data:
                  blocks:
                    - type: text
                      data: '# Handlebars Helpers Reference'
                    - type: text
                      data: >
                        ## {{itemAt}}


                        _Block helper that returns the item at the specified
                        index._


                        #### Parameters


                        * `array` {Array}

                        * `idx` {Number}

                        * `returns` {any} `value`


                        #### {{itemAt}} Example


                        Given the array `['a', 'b', 'c']`:


                        ```

                        {{itemAt array 1}}

                        //=> 'b'


                        ```

                        ---


                        ## {{join}}


                        The `join` helper is custom to Stencil. It joins an
                        array of string items, with separators. It returns a
                        string. 


                        #### Parameters


                        - `values`: {Array}

                        - `separator`: {String}

                        - `limit=<number>`: An optional limit.


                        #### {{join}} Example


                        insert join example


                        ---


                        ### {{limit}}


                        The `limit` helper is custom to Stencil. It limits the
                        number of items returned from an array variable, and
                        returns a new array.


                        #### Parameters


                        - `data`: {Array}

                        - `limit`: {Number}


                        #### {{limit}} Example 


                        Assume that `{{cart.items}}` would return 10 items. You
                        could use this helper to limit that behavior to only the
                        first four items, by specifying: 


                        ```

                        {{limit cart.items 4}}

                        ```


                        ---


                        ### {{pluck}}


                        The `pluck` helper is custom to Stencil. For one or more
                        specified search key(s), it retrieves corresponding
                        values from some or all elements in a specified
                        collection. 


                        The `pluck` helper returns the retrieved values in a
                        comma-separated string. This helper's general form is:


                        ```

                        {{pluck ([limit] <collection> [<limit-value>])
                        '<search-key>'}}

                        ```


                        #### Parameters


                        - `limit`, `limit-value`: Optional parameters to limit
                        the number of results returned.

                        - `collection`: The collection to search.

                        - `search-key`: The string to search for.



                        #### {{pluck}} Example 1


                        Assume that the `categories` collection contains:


                        ```

                        categories: [
                          { "id": 1, "name": "Bakeware" },
                          { "id": 2, "name": "Cookware" },
                          { "id": 3, "name": "Cutlery" }
                        ]

                        ```


                        In this case, this Handlebars statement:


                        ```

                        {{pluck (limit categories 2) 'name'}}

                        ```


                        ...would return:


                        ```

                        "Bakeware,Cookware"

                        ```


                        #### {{pluck}} Example 2


                        If the `categories` themselves each contained an image
                        object, then you could use dot notation to access that
                        image object's children:


                        ```

                        categories: [
                          { "id": 1, "name": "Bakeware", "image": { "data": "http://...", "alt": "Bakeware image"} },
                          { "id": 2, "name": "Cookware" "image": { "data": "http://...", "alt": "Cookware image"} },
                          { "id": 3, "name": "Cutlery" "image": { "data": "http://...", "alt": "Cutlery image"} }
                        ]

                        ```


                        In this case, this Handlebars statement:


                        ```

                        {{pluck (limit categories 2) 'image.data'}}

                        ```


                        ...would return a comma-separated list of image URLs.


                        ---



                        ## <a name="array_std"></a> Standard Array Helpers


                        The following standard array helpers are supported on
                        the Stencil framework.


                        ### <a name="after"></a> {{after}}


                        Returns all of the items in an array after the specified
                        index. Opposite of [before](#before).


                        Given the array `['a', 'b', 'c']`:


                        #### Parameters


                        * `array` {Array}: Collection.

                        * `n` {Number}: Starting index (number of items to
                        exclude).

                        * `returns` {Array}: Array exluding `n` items.


                        #### Example


                        ```handlebars

                        {{after array 1}}

                        //=> '["c"]'

                        ```


                        ---


                        ## {{arrayify}}


                        Casts the given `value` to an array.


                        #### Parameters


                        * `value` {any}

                        * `returns` {Array}


                        #### {{arrayify}} Example


                        ```handlebars

                        {{arrayify "foo"}}

                        //=> '["foo"]'

                        ```

                        ---


                        ## <a name="before"></a> {{before}}


                        Returns all of the items in the collection before the
                        specified count. Opposite of [after](#after).


                        Given the array `['a', 'b', 'c']`:


                        #### Parameters


                        * `array` {Array}

                        * `n` {Number}

                        * `returns` {Array}: Array excluding items after the
                        given number.


                        #### {{before}} Example


                        ```handlebars

                        {{before array 2}}

                        //=> '["a", "b"]'

                        ```


                        ---


                        ## {{eachIndex}}


                        #### Parameters


                        * `array` {Array}

                        * `options` {Object}

                        * `returns` {String}


                        #### {{eachIndex}} Example


                        ```handlebars

                        {{#eachIndex collection}}
                          {{item}} is {{index}}
                        {{/eachIndex}}

                        ```


                        ---


                        ### {{filter}}


                        Block helper that filters the given array. Renders the
                        block for values that evaluate to `true`; otherwise,
                        returns the inverse block.


                        #### Parameters


                        * `array` {Array}

                        * `value` {any}

                        * `options` {Object}

                        * `returns` {String}


                        #### {{filter}} Example


                        ```handlebars

                        {{#filter array "foo"}}AAA{{else}}BBB{{/filter}}

                        //=> 'BBB

                        ```


                        ---


                        ## <a name="first"></a> {{first}}


                        Returns the first item, or first `n` items, of an array.


                        #### Parameters


                        * `array` {Array}

                        * `n` {Number}: Number of items to return, starting at
                        `0`.

                        * `returns` {Array}


                        #### {{first}} Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{first array 2}}

                        //=> '["a", "b"]'

                        ```


                        ---



                        ### {{forEach}}


                        Iterates over each item in an array, and exposes the
                        current item in the array as context to the inner block.
                        In addition to the current array item, the helper
                        exposes the following variables to the inner block:


                        * `index`

                        * `total`

                        * `isFirst`

                        * `isLast`


                        Also, `@index` is exposed as a private variable, and
                        additional private variables may be defined as hash
                        arguments.


                        #### Parameters


                        * `array` {Array}

                        * `returns` {String}


                        #### {{forEach}} Example


                        ```js

                        var accounts = [

                        {'name': 'John', 'email': 'john@example.com'},

                        {'name': 'Malcolm', 'email': 'malcolm@example.com'},

                        {'name': 'David', 'email': 'david@example.com'}

                        ];


                        // example usage

                        // {{#forEach accounts}}

                        //   <a href="mailto:{{ email }}" title="Send an email
                        to {{ name }}">

                        //     {{ name }}

                        //   </a>{{#unless isLast}}, {{/unless}}

                        // {{/forEach}}

                        ```


                        ---


                        ### {{inArray}}


                        Block helper that renders the block if an array has the
                        given `value`. Optionally, you can specify an inverse
                        block to render when the array does not have the given
                        value.


                        #### Parameters


                        * `array` {Array}

                        * `value` {any}

                        * `options` {Object}

                        * `returns` {String}


                        #### {{inArray}} Example


                        Given the array `['a', 'b', 'c']`:


                        ```handlebars

                        {{#inArray array "d"}}
                          foo
                        {{else}}
                          bar
                        {{/inArray}}

                        //=> 'bar'

                        ```


                        ---


                        ### {{isArray}}


                        Returns true if `value` is an es5 array.


                        #### Parameters


                        * `value` {any}: The value to test.

                        * `returns` {Boolean}


                        #### Example


                        ```handlebars

                        {{isArray "abc"}}

                        //=> 'false'

                        ```


                        ### <a name="last"></a> {{last}}


                        Returns the last item, or last `n` items, of an array.
                        Opposite of [first](#first).


                        #### Parameters


                        * `array` {Array}

                        * `n` {Number}: Number of items to return, starting with
                        the last item.

                        * `returns` {Array}


                        #### Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{last array 2}}

                        //=> '["d", "e"]'

                        ```


                        ### {{lengthEqual}}


                        Block helper that compares the length of the given array
                        to the number passed as the second argument. If the
                        array length is equal to the given `length`, the block
                        is returned. Otherwise, you have the option of returning
                        an inverse block.


                        #### Parameters


                        * `array` {Array}

                        * `length` {Number}

                        * `options` {Object}

                        * `returns` {String}


                        #### Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{#lengthEqual array 10}}AAA{{else}}BBB{{/lengthEqual}}

                        //=> 'BBB'

                        ```


                        ### {{map}}


                        Returns a new array, created by calling `function` on
                        each element of the given `array`.


                        #### Parameters


                        * `array` {Array}

                        * `fn` {Function}

                        * `returns` {String}


                        #### Example


                        Given an array `['a', 'b', 'c']`:


                        ```js

                        // register `double` as a helper

                        function double(str) {
                          return str + str;
                        }

                        // then used like this:

                        // {{map array double}}

                        //=> '["aa", "bb", "cc"]'

                        ```


                        ### {{some}}


                        Block helper that returns the block *if* the callback
                        returns true for some value in the given array.


                        #### Parameters


                        * `array` {Array}

                        * `cb` {Function}: Callback function.

                        * {Options}: Handlebars-provided options object.

                        * `returns` {Array}


                        #### Example


                        Given the array `[1, 'b', 3]`:


                        ```handlebars

                        {{#some array isString}}
                          Render me if the array has a string.
                        {{else}}
                          Render me if it doesn't.
                        {{/some}}

                        //=> 'Render me if the array has a string.'

                        ```


                        ### {{sort}}


                        Sorts the given `array`. If an array of objects is
                        passed, you may optionally pass (as the second argument)
                        a `key` to sort on. Alternatively, you may pass a
                        sorting function as the second argument.


                        #### Parameters


                        * `array` {Array}: The array to sort.

                        * `key` {String|Function}: The object key to sort by, or
                        a sorting function.


                        #### Example


                        Given an array `['b', 'a', 'c']`:



                        ```handlebars

                        {{sort array}}

                        //=> '["a", "b", "c"]'

                        ```


                        ### {{sortBy}}


                        Sorts an `array`. If an array of objects is passed, you
                        may optionally pass a `key` to sort on as the second
                        argument. You may alternatively pass a sorting function
                        as the second argument.


                        #### Parameters


                        * `array` {Array}: The array to sort.

                        * `props` {String|Function}: One or more properties to
                        sort by, or sorting functions to use.


                        #### {{sortBy}} Example


                        Given an array `[{a: 'zzz'}, {a: 'aaa'}]`:


                        ```handlebars

                        {{sortBy array "a"}}

                        //=> '[{"a":"aaa"}, {"a":"zzz"}]'

                        ```

                        ---


                        ### <a name="withAfter"></a> {{withAfter}}


                        Use the items in the array, _after_ the specified index,
                        as context inside a block. Opposite of
                        [withBefore](#withBefore).


                        #### Parameters


                        * `array` {Array}

                        * `idx` {Number}

                        * `options` {Object}

                        * `returns` {Array}


                        #### {{withAfter}} Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{#withAfter array 3}}
                          {{this}}
                        {{/withAfter}}

                        //=> "de"

                        ```


                        ### <a name="withBefore"></a> {{withBefore}}


                        Use the items in the array, _before_ the specified
                        index, as context inside a block. Opposite of
                        [withAfter](#withAfter).


                        #### Parameters


                        * `array` {Array}

                        * `idx` {Number}

                        * `options` {Object}

                        * `returns` {Array}


                        #### {{withBefore}} Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{#withBefore array 3}}
                          {{this}}
                        {{/withBefore}}

                        //=> 'ab'

                        ```


                        ### <a name="withFirst"></a> {{withFirst}}


                        Uses a collection's first item inside a Handlebars block
                        expression. Opposite of [withLast](#withLast).


                        #### Parameters


                        * `array` {Array}

                        * `idx` {Number}

                        * `options` {Object}

                        * `returns` {String}


                        #### {{withFirst}} Example


                        Given the array `['a', 'b', 'c']`:


                        ```handlebars

                        {{#withFirst array}}
                          {{this}}
                        {{/withFirst}}

                        //=> 'a'

                        ```
        - title: Stencil Object Model Reference
          route:
            path: /stencil-object-model-reference
          data:
            children:
              - title: Stencil Objects
                route:
                  path: /stencil-objects
                data:
                  children:
                    - title: Global Objects & Properties
                      route:
                        path: /global-objects
                      data:
                        children:
                          - title: Banners
                            route:
                              path: /banners
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description: </b>Elements of marketing
                                    banners at page’s top and/or bottom<br>


                                    <b>Handlebars Expressions:</b> <span
                                    class="inline-code">{{banner}}</span>, <span
                                    class="inline-code">{{{banner}}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">banners</td>
                                        <td class="">Blocks of static HTML content to define banners</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">top</span></td>
                                        <td class="">Array of HTML content/strings, for custom top-banner content; banners are populated from the BigCommerce control panel</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">bottom</span></td>
                                        <td class="">Array of HTML content/strings, for custom bottom-banner content; banners are populated from the BigCommerce control panel</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: Banner
                                  config: {}
                                - type: callout
                                  data:
                                    type: warning
                                    body: >-
                                      Where a banner contains HTML, the <span
                                      class="inline-code">banner</span> helper
                                      must be placed in triple braces, as in
                                      this 

                                      example: <span
                                      class="inline-code">{{{banner}}}</span>.
                                      (Double braces would escape the HTML.)
                                    title: Handlebars Formatting Exception
                          - title: Breadcrumbs
                            route:
                              path: /breadcrumbs
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description:</b> Defines a page's
                                    breadcrumbs – available on virtually all
                                    pages that have a breadcrumb trail<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{breadcrumbs}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">name</td>
                                        <td class="">Displayed name of this breadcrumb element</td>
                                      </tr>
                                      <tr>
                                        <td class="">url</td>
                                        <td class="">URL of this breadcrumb element</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: Stencil-Bread-ref
                          - title: Categories
                            route:
                              path: /categories
                            data:
                              blocks:
                                - type: text
                                  data: >-
                                    <A NAME="Categories"></a>

                                    <b>Description:</b> A list of all product
                                    categories shown in the current page
                                    context; default sorting is by category id,
                                    from lowest to highest<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{categories}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">id</td>
                                        <td class="">ID of the top-level category listed</td>
                                      </tr>
                                      <tr>
                                        <td class="">name</td>
                                        <td class="">Name of the top-level category</td>
                                      </tr>
                                      <tr>
                                        <td class="">description</td>
                                        <td class="">Description of the top-level category (optional &ndash; when requested in front matter)</td>
                                      </tr>
                                      <tr>
                                        <td class="">url</td>
                                        <td class="">URL to the category page</td>
                                      </tr>
                                      <tr>
                                        <td class="">count</td>
                                        <td class="">Number of products in this category</td>
                                      </tr>
                                      <tr>
                                        <td class="">children</td>
                                        <td class="">List of child categories for this top-level category</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> id</span></td>
                                        <td class="">ID of the child category</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> name</span></td>
                                        <td class="">Name of the child category</td>
                                      </tr>
                                        <tr>
                                        <td class=""><span class="indent1"> description</span></td>
                                        <td class="">Description of the child category (optional &ndash; when requested in front matter)</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> url</span></td>
                                        <td class="">URL of the child category</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> count</span></td>
                                        <td class="">Number of products in this child category</td>
                                      </tr>
                                    </table>
                          - title: Currency Selector
                            route:
                              path: /currency-selector
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description:</b> A list of all supported
                                    currencies, and the currency that is
                                    actively in use in the storefront<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{currency_selector}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">active_currency_id</td>
                                        <td class="">ID of the currency actively in use in the storefront</td>
                                      </tr>
                                      <tr>
                                        <td class="">active_currency_flag</td>
                                        <td class="">Country flag used to represent the active currency</td>
                                      </tr>
                                      <tr>
                                        <td class="">active_currency_name</td>
                                        <td class="">Name of the active currency</td>
                                      </tr>
                                      <tr>
                                        <td class="">active_currency_code</td>
                                        <td class="">Code for the active currency</td>
                                      </tr>
                                      <tr>
                                        <td class="">currencies</td>
                                        <td class="">List of all the currencies supported for this storefront</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> is_active</span></td>
                                        <td class="">Boolean that indicates whether this currency is active for use in the storefront</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> switch_url</span></td>
                                        <td class="">The URL to invoke a switch to this currency</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> id</span></td>
                                        <td class="">ID of the currency</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> name</span></td>
                                        <td class="">Name of the currency</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> flag</span></td>
                                        <td class="">Country flag used to visually represent the currency</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: CurrencySel
                          - title: Faceted Search
                            route:
                              path: /new-subpage-6
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <A NAME="FacSearch"></a>

                                    <b>Description: </b>Faceted-search object
                                    for searching globally, by category, or by
                                    brand<br>


                                    <b>Handlebars Expression</b><b>:</b> <span
                                    class="inline-code">{{faceted_search}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">facets</td>
                                        <td class="">List of all search facets available</td>
                                      </tr>
                                      <tr>
                                        <td class="">selected</td>
                                        <td class="">Container for the selected search facets</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">remove_all_url</span></td>
                                        <td class="">URL to remove all selected search restrictions</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">items</span></td>
                                        <td class="">Currently enabled search facets</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: FacetedSearch
                          - title: Featured Products
                            route:
                              path: /new-subpage-2
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description:</b> A list of all the
                                    featured products for the BigCommerce
                                    storefront<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{products.featured}}</span><br>


                                    <b>Object Properties:</b> References the <a
                                    href="/docs/common-product-card-model">product
                                    card model</a>.
                                  header:
                                    anchor: FeatProducts
                                - type: text
                                  data: >-
                                    <b> Usage Example: </b>


                                    From Stencil's base Cornerstone theme, the
                                    example below displays the global
                                    `{{products.featured}}` object on the
                                    `<theme-name>/templates/pages/home.html`
                                    page template.


                                    First, to declare the object, the following
                                    [front
                                    matter](/docs/using-yaml-front-matter) must
                                    be placed at the top of this template. This
                                    particular declaration also limits the
                                    number of featured products to be displayed:


                                    ```

                                    ---

                                    products:
                                        [...]
                                        featured:
                                            limit: {{theme_settings.homepage_featured_products_count}}
                                    ---

                                    ```

                                    The `homepage_featured_products_count` limit
                                    is one of two relevant variables defined in
                                    Cornerstone's
                                    [`config.json`&#160;file](/docs/configjson-reference),
                                    here:


                                    ```
                                      "settings": {
                                        [...]
                                        "homepage_featured_products_count": 8,
                                        [...]
                                        "homepage_featured_products_column_count": 4,
                                        [...]    
                                    ```


                                    In the body of the `home.html` template, the
                                    following Handlebars conditional statement
                                    displays the featured-products object
                                    declared above:


                                    ```
                                        {{#if products.featured}}
                                            {{> components/products/featured products=products.featured columns=theme_settings.homepage_featured_products_column_count}}
                                        {{/if}}
                                    ```


                                    This statement formats the featured-products
                                    display according to the
                                    `homepage_featured_products_column_count`
                                    variable, also defined in the `config.json`
                                    excerpt above.
                          - title: Footer
                            route:
                              path: /footer
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description: </b>The footer content for
                                    each storefront page<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{footer}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">sitemap_url</td>
                                        <td class="">The URL to the sitemap, based on store’s SEO setting</td>
                                      </tr>
                                      <tr>
                                        <td class="">scripts</td>
                                        <td class="">Scripts to be loaded after the HTML has loaded; includes performance metrics</td>
                                      </tr>
                                    </table>
                          - title: Home Slide Show
                            route:
                              path: /home-slide-show
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description:</b> A list of images, text,
                                    and style assets for a storefront’s image
                                    slide show<br>


                                    <b>Handlebars Expression: </b><span
                                    class="inline-code">{{carousel}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      
                                      <tr>
                                        <td class="">swap_frequency</td>
                                        <td class="">Indicates how often (in seconds) the slides will change; the value must be between 1 and 90,000 seconds</td>
                                      </tr>
                                      
                                      <tr>
                                        <td class="">slides</td>
                                        <td class="">Object containing properties for each slide in the slideshow</td>
                                      </tr>
                                      
                                      <tr>
                                        <td class=""><span class="indent1">image</span></td>
                                        <td class="">Path to the image file used on this slide</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">alt_text</span></td>
                                        <td class="">Alt text for the image</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">url</span></td>
                                        <td class="">URL to which the image will link</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">heading</span></td>
                                        <td class="">Heading message defined by the merchant</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">heading_color</span></td>
                                        <td class="">Color of the heading text</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">text</span></td>
                                        <td class="">Subheading defined by the merchant</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">text_color</span></td>
                                        <td class="">Color of the subheading text</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">button_text</span></td>
                                        <td class="">Text displayed on a call-to-action button defined by the merchant</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">button_text_color</span></td>
                                        <td class="">Color of the button</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: SlideShow
                          - title: HTML Head
                            route:
                              path: /html-head
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description: </b>Data to be included in
                                    the HTML &lt;head&gt; element<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{head}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">character_set</td>
                                        <td class="">The character set to specify</td>
                                      </tr>
                                      <tr>
                                        <td class="">meta_tags</td>
                                        <td class="">Meta tags to improve store SEO</td>
                                      </tr>
                                      <tr>
                                        <td class="">title</td>
                                        <td class="">Current page’s title</td>
                                      </tr>
                                      <tr>
                                        <td class="">stylesheets</td>
                                        <td class="">CSS files to be included</td>
                                      </tr>
                                      <tr>
                                        <td class="">scripts</td>
                                        <td class="">Scripts to be loaded in the &lt;head&gt; tag</td>
                                      </tr>
                                      <tr>
                                        <td class="">favicon</td>
                                        <td class="">The store’s favicon (Favorite icon)</td>
                                      </tr>
                                      <tr>
                                        <td class="">rsslinks</td>
                                        <td class="">RSS feeds to improve SEO</td>
                                      </tr>
                                      </tr>
                                    </table>
                          - title: Is_ajax
                            route:
                              path: /is-ajax
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description: </b>Boolean; returns true if
                                    the current executing request is an Ajax
                                    request<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{is_ajax}}</span><br>
                                  header:
                                    anchor: IsAjax
                          - title: Login
                            route:
                              path: /login
                            data: {}
            blocks:
              - type: html
                data: >-
                  <a name="Stencil-Obj-ref"></a>The entries in this section list
                  and describe the objects<!--, custom operators, and data
                  resources--> and properties that you can access
                  programmatically via Handlebars expressions:


                  <ul>
                    <!-- <li><a href="/docs/custom-handlebars-helpers">Stencil Custom Handlebars Helpers</a></li> -->
                   <li><a href="/stencil-object-model-reference/global-objects">Global Objects (subsection)</a></li>
                   <li><a href="/stencil-object-model-reference/common-object-formats">Common Objects</a></li>
                   <li><a href="/stencil-object-model-reference/product-resources">Product Objects</a></li>
                   <li><a href="/stencil-object-model-reference/category-resources">Category Objects</a></li>
                   <li><a href="/stencil-object-model-reference/brand-resources">Brand Objects</a></li>
                   <li><a href="/stencil-object-model-reference/cart-resources">Cart Objects</a></li>
                   <li><a href="/stencil-object-model-reference/customer-resources">Customer Objects</a></li>
                   <li><a href="/stencil-object-model-reference/blog-resources">Blog Objects</a></li>
                   <li><a href="/stencil-object-model-reference/forms-resources">Forms Objects</a></li>
                  </ul>
        - title: Event Hooks
          route:
            path: /event-hooks
          data:
            children:
              - title: Hook Examples
                route:
                  path: /hook-examples
                data: {}
              - title: Remote API Example
                route:
                  path: /remote-api-example
                data: {}
              - title: Data Tags/Event Hook Reference
                route:
                  path: /new-subpage-1
                data: {}
              - title: stencil-utils API Reference
                route:
                  path: /new-subpage-2
                data: {}
        - title: Conditional-Logic Examples
          route:
            path: /conditional-logic-examples
          data:
            children:
              - title: 'Catalog Price Object: How Properties interact'
                route:
                  path: /catalog-price-object
                data: {}
              - title: 'Cart Price Properties: Relationships'
                route:
                  path: /cart-price-relationships
                data: {}
              - title: Calling Theme-Wide Variables via Handlebars
                route:
                  path: /calling-theme-wide-variables
                data: {}
              - title: Dynamic Content Rendering on Stencil Storefronts
                route:
                  path: /dynamic-content-rendering
                data: {}
        - title: CSS And Design Assets
          route:
            path: /css-and-design-assets
          data:
            children:
              - title: Navigating Stencil Design Assets
                route:
                  path: /navigating-stencil-design-assets
                data: {}
              - title: Components/Design Patters
                route:
                  path: /components-design-patterns
                data: {}
              - title: Layouts Directory
                route:
                  path: /layouts-directory
                data: {}
              - title: Settings Directory
                route:
                  path: /settings-directory
                data: {}
              - title: Utilities Directory
                route:
                  path: /new-subpage-1
                data: {}
              - title: New Subpage
                route:
                  path: /new-subpage
                data: {}
        - title: Templates Reference
          route:
            path: /templates-reference
          data:
            children:
              - title: Navigating the Templates Directory
                route:
                  path: /new-subpage-2
                data:
                  children:
                    - title: Components Subdirectory
                      route:
                        path: /new-subpage-3
                      data: {}
                    - title: Layout Subdirectory
                      route:
                        path: /new-subpage-2
                      data: {}
                    - title: Pages Subdirectory
                      route:
                        path: /new-subpage-1
                      data: {}
                    - title: Stencil with Disqus
                      route:
                        path: /new-subpage
                      data: {}
              - title: Custom Templates
                route:
                  path: /components-and-compilation
                data:
                  children:
                    - title: 'Authoring, Testing, and Uploading Custom Templates'
                      route:
                        path: /new-subpage-2
                      data: {}
                    - title: Assigning Templates to Pages
                      route:
                        path: /new-subpage-1
                      data: {}
                    - title: Switching Themes with Custom Templates
                      route:
                        path: /new-subpage
                      data: {}
                    - title: Theme Updates with  Custom Templates
                      route:
                        path: /new-subpage
                      data: {}
                    - title: Limitations on Custom Templates
                      route:
                        path: /new-subpage-3
                      data: {}
              - title: Stencil Checkout
                route:
                  path: /new-subpage
                data:
                  children:
                    - title: Preparing Stencil for Optimized One-Page Checkout
                      route:
                        path: /new-subpage
                      data: {}
                    - title: Optimized One Page Checkout
                      route:
                        path: /new-subpage
                      data: {}
                    - title: Currency Conversion
                      route:
                        path: /new-subpage
                      data: {}
                    - title: Multi Language Checkout
                      route:
                        path: /new-subpage
                      data: {}
                    - title: Checkout/Confirmation Injection Options
                      route:
                        path: /new-subpage-1
                      data: {}
                    - title: Implementing a custom checkout
                      route:
                        path: /new-subpage-2
                      data: {}
                    - title: Styling the Apple Pay Button
                      route:
                        path: /new-subpage-3
                      data: {}
                    - title: Customizing Invoices and Packing Slips
                      route:
                        path: /new-subpage-4
                      data: {}
        - title: Internationalization/Localization
          route:
            path: /internationalization-and-localization
          data:
            children:
              - title: Localizing Stores
                route:
                  path: /new-subpage-3
                data: {}
              - title: Basis for Internationalization
                route:
                  path: /new-subpage-2
                data: {}
              - title: Required Subdirectories
                route:
                  path: /new-subpage-1
                data: {}
              - title: Localization File Structure
                route:
                  path: /new-subpage
                data: {}
              - title: Invoking Translation Keys
                route:
                  path: /new-subpage-4
                data: {}
        - title: Javascript Customization
          route:
            path: /javascript-customization
          data:
            children:
              - title: Adding Javascript to Stencil Theme
                route:
                  path: /new-subpage-4
                data: {}
              - title: Basic Non NPM Example
                route:
                  path: /new-subpage-3
                data: {}
              - title: Basic NPM example
                route:
                  path: /new-subpage-2
                data: {}
              - title: Advanced NPM Example
                route:
                  path: /new-subpage-1
                data: {}
              - title: Page Types and Life Cycle
                route:
                  path: /new-subpage
                data: {}
      blocks:
        - type: text
          data: '# Welcome to the BigCommerce Stencil Developer Documentation'
        - type: text
          data: '---'
        - type: text
          data: >-
            ## Objective of this documentation


            This documentation is intended to inform developers about the
            Stencil theming engine and how it can allow you as a developer to
            create beautiful, dynamic, and powerful storefronts.


            *Reference the [BigCommerce Developer Documentation
            Glossary](www.google.com) for any terminology that may sound foreign
            to you when reading the Stencil Developer Documentation.*
        - type: text
          data: '---'
        - type: text
          data: >-
            ## What is Stencil?


            Stencil is the theming engine for the BigCommerce platform. Stencil
            is the engine for the BigCommerce Cornerstone theme, which is the
            foundation a theme developer needs to quickly start developing
            premium, custom themes with Stencil. 


            Stencil also provides features that allow merchants to customize
            their storefront's look and feel with no coding, making Stencil a
            powerful and useful engine for all audiences.
        - type: text
          data: '---'
        - type: text
          data: >+
            <h3></a> Video Demo</h2>


            Watch Stencil senior developer's tour of Stencil's key
            components:<br><p></p>


            <iframe width="560" height="315"
            src="https://www.youtube.com/embed/p5SR8N0SeCg" frameborder="0"
            allowfullscreen></iframe>












        - type: text
          data: '---'
        - type: text
          data: >-
            ## Stencil Development Features and Technology Stack


            Stencil's provides the following features, allowing BigCommerce
            theme developers to create beautiful, dynamic, and powerful
            storefronts.


            ---


            **Stencil Command Line Interface (Stencil CLI)**


            The Stencil CLI enables developers to locally develop and customize
            on any Stencil theme with no impact on a merchant's live storefront
            during the development process. When locally developing, you will
            have access to real-time Browsersync preview and testing across
            desktop, mobile, and tablet devices/viewports.


            Stencil CLI runs on the Node.js runtime environment. Installing
            Node.js also provides the required npm package manager.


            ---

            **Logic-Based Templates** 


            Stencil's logic based templates allow BigCommerce developers to
            customize storefront pages efficiently with the lightweight
            templating languge, Handlebars.js.  Handlebars allows you to
            efficiently embed dynamic and conditional logic onto your storefront
            pages.


            ---


            **Sass/SCSS Support**


            Stencils Sass and SCSS support allows developers to nest properties,
            variables, and mixins. Use the familiar Foundation framework
            (provided) or substitute your choice of framework.


            Stencil's Cornerstone base theme uses a BigCommerce pattern library
            called Citadel, which is built on top of the ZURB Foundation
            framework, version 5.5.3. Stencil does not support Foundation 6.x,
            due to breaking changes introduced between versions 5.x and 6.x.


            Foundation offers the framework for creating a responsive theme. You
            have the option of swapping out Foundation for another framework,
            although doing so would require significant work.


            Foundation assets bundled with Cornerstone are located in these
            subdirectories: 


            * `Cornerstone/assets/scss/settings/foundation/ `

            * `Cornerstone/assets/scss/components/foundation/`


            Citadel extends Foundation’s mixins and components to provide
            Stencil’s own mixins, extensible components, and utilities. These
            include drop-down lists, forms, and similar resources. Citadel
            resources are named according to BEM and SUIT CSS conventions.
            Classes are named functionally, rather than based on visual
            presentation or content. Our style guide is published here.

            Citadel assets bundled with Cornerstone are located in these
            Cornerstone subdirectories: 


            * `Cornerstone/assets/scss/settings/citadel/`

            * `Cornerstone/assets/scss/components/citadel/`


            More detailed information about the Citadel and Foundation SCSS
            components, and their naming conventions will be covered in
            *Components and Design Patterns*.


            ---


            **Page-specific Resource Definition**


            Specify the dynamic content you want to be displayed on your
            storefront pages with YAML formatted front matter.


            ---


            **Javascript Event Hooks**


            Your Stencil themes can access remote objects through event hooks,
            using the hooks to trigger defined events based on shopper behavior.
            This will allow you to collect product data and optimize a shopper's
            experience.


            To facilitate theme-building, BigCommerce provides the stencil-utils
            client-side JavaScript library for managing event hooks.


            ---


            **Stencil Theme Editor**


            The Stencil Theme Editor is a browser-based tool that enables
            merchants to rapidly customize a theme's look and feel with no
            coding. 


            BigCommerce theme developers' configuration choices determine which
            theme aspects merchants can customize, and the range of choices for
            each aspect.


            Stencil's Theme Editor graphical interface enables merchants and
            store administrators to make styling changes to the theme currently
            applied to their storefront. 


            As a theme developer, you have the capability to define which style
            settings appear in the Stencil Theme Editor. You can grant access to
            colors, fonts, display/hiding of page features, and number of
            products/entries to display per feature.


            ---


            **Stencil Theme Variations**


            Each Stencil theme can contain one to four variations. You can
            optimize individual variations for specific markets, audiences and
            styles – while still managing and distributing all of these
            variations as one theme.

            Cornerstone comes with 3 variations: Cornerstone Light, Cornerstone
            Warm, and Cornerstone Bold.


            ---


            **Responsive, Mobile-Friendly Themes**


            BigCommerce stores powered by Stencil allow shoppers to have a first
            class experience across any device.


            ---


            This is simply a summary Stencil's core features. Continue reading
            through the Stencil Developer Documentation to learn about Stencil's
            full capabilities.
        - type: text
          data: '---'
        - type: text
          data: >-
            ## Legacy Framework Documentation


            If you are looking for information on Blueprint, BigCommerce's
            legacy theme framework, you can access that below:


            * [Themes (Blueprint)](https://developer.bigcommerce.com/themes)

            * [Stores API reference](https://developer.bigcommerce.com/api)
  /api-docs:
    title: API Docs
    data:
      $ref: ./API Docs Home Page.html
  /changelog:
    title: Changelog
    data:
      $ref: ./Changelog.html
  /legacy:
    title: Legacy
    data:
      children:
        - title: Blueprint
          route:
            path: /blueprint-themes
          data: {}
        - title: API Legacy Documentation
          route:
            path: /api-legacy
          data:
            children:
              - title: Product SKU
                route:
                  path: /v2-product-sku
                data:
                  blocks:
                    - type: html
                      data: "<h1>Product SKUs</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#v2-product-sku-object-properties\">SKU Object – Properties</a></li>\n        <li><a href=\"#v2-list-product-skus\">List Product SKUs</a></li>\n        <li><a href=\"#v2-get-a-product-sku\">Get a Product SKU </a></li>\n        <li><a href=\"#v2-get-a-count-of-product-skus\">Get a Count of Product SKU's </a></li>\n        <li><a href=\"#v2-create-a-product-sku\">Create a Product SKU</a></li>\n        <li><a href=\"#v2-update-a-product-sku\">Update a Product SKU</a></li>\n        <li><a href=\"#v2-delete-a-product-sku\">Delete a Product SKU</a></li>\n        <li><a href=\"#v2-delete-multiple-product-skus\"> Delete Multiple Product SKUs</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## SKU Object – Properties 


                        | Name | Type | Description |

                        | --- | --- | --- |

                        | id | int | |

                        | product_id | int | |

                        | sku | string | The unique SKU (stock keeping unit). |

                        | price | decimal | This SKU's base price on the
                        storefront. If this value is null, the product's default
                        price (set in the Product resource's `price` field) will
                        be used as the base price. |

                        | adjusted_price | decimal | The SKU's price on the
                        storefront – after the product's base price is
                        inherited, and/or any option set or any product rules
                        are applied. This property is READ-ONLY. |

                        | cost_price | decimal | The product's cost price. |

                        | upc | string | The UPC (Universal Product Code) for
                        this product combination. |

                        | inventory_level | int | The inventory level for the
                        product. |

                        | inventory_warning_level | int | The inventory warning
                        level for the product .|

                        | bin_picking_number | string | The BIN picking number.
                        |

                        | weight | decimal | This SKU's base weight on the
                        storefront. If this value is null, the product's default
                        weight (set in the Product resource's weight field) will
                        be used as the base weight. |

                        | adjusted_weight | decimal | This SKU's weight on the
                        storefront – after the product's base weight is
                        inherited, and/or any option set or any product rules
                        are applied. This property is READ-ONLY. |

                        | is_purchasing_disabled | boolean | if true, this
                        prohibits purchasing of the SKU. | 

                        | purchasing_disabled_message | string | The message to
                        display if purchasing is disabled on this SKU. | 

                        | image_file | string | The image that will be displayed
                        when this SKU is selected on the storefront. When
                        updating a SKU image, send the publicly accessible URL.
                        Supported image formats are JPEG, PNG, and GIF. | 

                        | options | object_array | This is an object
                        {"product_option_id": int, "option_value_id":int} |
                      header:
                        anchor: v2-product-sku-object-properties
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## List Product SKUs 


                        Gets the collection of SKUs associated with a product.



                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/skus`


                        ### Notes 


                        BigCommerce has updated the SKU schema to include
                        additional price, weight, image, and purchasable
                        properties. We will eventually remove the ability to
                        manage these properties via SKU rules. (Merchants are
                        already constrained from creating SKU-only rules in the
                        BigCommerce control panel.)


                        ### Filters 


                        Filter parameters can be added to the URL query string
                        to select specific skus in the collection.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | min_id | int |
                        /api/v2/products/{product_id}/skus?min_id={value} |

                        | max_id | int |
                        /api/v2/products/{product_id}/skus?max_id={value} |

                        | sku | string |
                        /api/v2/products/{product_id}/skus?sku={value} |

                        | upc | string |
                        /api/v2/products/{product_id}/skus?upc={value} |

                        | inventory_level | string |
                        /api/v2/products/{product_id}/skus?inventory_level={value}
                        |

                        | inventory_warning_level | string |
                        /api/v2/products/{product_id}/skus?inventory_warning_level={value}
                        |

                        | bin_picking_number | string |
                        /api/v2/products/{product_id}/skus?bin_picking_number={value}
                        |

                        | min_inventory_level | int |
                        /api/v2/products/{product_id}/skus?min_inventory_level={value}
                        |

                        | max_inventory_level | int |
                        /api/v2/products/{product_id}/skus?max_inventory_level={value}
                        |

                        | is_low_inventory | boolean |
                        /api/v2/products/{product_id}/skus?is_low_inventory={value}
                        |

                        | product_hash | int |
                        /api/v2/products/{product_id}/skus?product_hash={value}
                        |


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 skus are returned by
                        default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | page | int |
                        /api/v2/products/{product_id}/skus?page={number} |

                        | limit | int |
                        /api/v2/products/{product_id}/skus?limit={count} |


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": 1,
                            "product_id": 5,
                            "sku": "MB-1",
                            "price": null,
                            "adjusted_price": "1.5000",
                            "cost_price": "0.0000",
                            "upc": "",
                            "inventory_level": 0,
                            "inventory_warning_level": 0,
                            "bin_picking_number": "",
                            "weight": null,
                            "adjusted_weight": "0.00",
                            "is_purchasing_disabled": false,
                            "purchasing_disabled_message": "",
                            "image_file": "",
                            "options": [
                              {
                                "product_option_id": 15,
                                "option_value_id": 17
                              },
                              {
                                "product_option_id": 16,
                                "option_value_id": 28
                              }
                            ]
                          },
                          {
                            "id": 2,
                            "product_id": 5,
                            "sku": "MB-2",
                            "price": null,
                            "adjusted_price": "2.0000",
                            "cost_price": "0.0000",
                            "upc": "",
                            "inventory_level": 0,
                            "inventory_warning_level": 0,
                            "bin_picking_number": "",
                            "weight": null,
                            "adjusted_weight": "0.00",
                            "is_purchasing_disabled": true,
                            "purchasing_disabled_message": "We're sorry, this is unavailable.",
                            "image_file": "",
                            "options": [
                              {
                                "product_option_id": 15,
                                "option_value_id": 18
                              },
                              {
                                "product_option_id": 16,
                                "option_value_id": 26
                              }
                            ]
                          }
                        ]

                        ```
                      header:
                        anchor: v2-list-product-skus
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Product SKU 


                        Gets a single product SKU.


                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/skus/{id}`


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 5,
                          "product_id": 7,
                          "sku": "MBA-1atest",
                            "price": null,
                            "adjusted_price": "1.5000",
                          "cost_price": "0.0000",
                          "upc": "",
                          "inventory_level": 0,
                          "inventory_warning_level": 0,
                          "bin_picking_number": "",
                            "weight": null,
                            "adjusted_weight": "0.00",
                            "is_purchasing_disabled": false,
                            "purchasing_disabled_message": "",
                            "image_file": "https://thinglust.com/eyecandy.png",
                          "options": [
                            {
                              "product_option_id": 20,
                              "option_value_id": 51
                            }
                          ]
                        }

                        ```
                      header:
                        anchor: v2-get-a-product-sku
                    - type: text
                      data: '---'
                    - type: text
                      data: |-
                        ## Get a Count of Product SKUs 

                        Gets a count of the number of product SKUs in the store.


                        >`GET /stores/{store_hash}/v2/products/skus/count`


                        ### Response 

                        Example JSON returned in the response:

                        ```
                        {
                          "count": 1235
                        }
                        ```
                      header:
                        anchor: v2-get-a-count-of-product-skus
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create a Product SKU 


                        Creates a new product SKU.



                        >`POST
                        /stores/{store_hash}/v2/products/{product_id}/skus`



                        ### Read-only Properties 


                        The following properties of the sku are read-only. If
                        one or more of these properties are included in the
                        request, it will be rejected.


                        *   id

                        *   product_id

                        *   adjusted_price

                        *   adjusted_weight


                        ### Requirements 


                        The following properties of the sku are required. The
                        request won’t be fulfilled unless these properties are
                        valid.


                        *   sku

                        *   options


                        ### Notes 


                        To maximize system performance, BigCommerce caps the
                        number of SKUs associated with a product at 500. If you
                        attempt to add a SKU to a product that has 500 SKUs,
                        BigCommerce will return a 403 error.


                        BigCommerce has updated the SKU schema to include
                        additional price, weight, image, and purchasable
                        properties. We will eventually remove the ability to
                        manage these properties via SKU rules. (Merchants are
                        already constrained from creating SKU-only rules in the
                        BigCommerce control panel.)


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 5,
                          "product_id": 7,
                          "sku": "MBA-1atest",
                            "price": null,
                            "adjusted_price": "1.5000",
                          "cost_price": "0.0000",
                          "upc": "",
                          "inventory_level": 0,
                          "inventory_warning_level": 0,
                          "bin_picking_number": "",
                            "weight": null,
                            "adjusted_weight": "0.00",
                            "is_purchasing_disabled": false,
                            "purchasing_disabled_message": "",
                            "image_file": "",
                          "options": [
                            {
                              "product_option_id": 20,
                              "option_value_id": 51
                            }
                          ]
                        }

                        ```
                      header:
                        anchor: v2-create-a-product-sku
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Update a Product SKU 


                        Updates an existing product SKU.



                        >`PUT
                        /stores/{store_hash}/v2/products/{product_id}/skus/{id}`



                        ### Read-only Properties 


                        The following properties of the sku are read-only. If
                        one or more of these properties are included in the
                        request, it will be rejected.


                        *   id

                        *   product_id

                        *   adjusted_price

                        *   adjusted_weight


                        ### Requirements 


                        There are no required properties for updating a product
                        SKU.


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 5,
                          "product_id": 7,
                          "sku": "MBA-1atest",
                            "price": "4.9900",
                            "adjusted_price": "3.9900",
                          "cost_price": "2.9900",
                          "upc": "",
                          "inventory_level": 0,
                          "inventory_warning_level": 0,
                          "bin_picking_number": "",
                            "weight": null,
                            "adjusted_weight": "0.00",
                            "is_purchasing_disabled": true,
                            "purchasing_disabled_message": "We're sorry, this is unavailable.",
                            "image_file": "",
                          "options": [
                            {
                              "product_option_id": 20,
                              "option_value_id": 51
                            }
                          ]
                        }

                        ```
                      header:
                        anchor: v2-update-a-product-sku
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete a Product SKU 


                        Deletes a product SKU.


                        >`DELETE
                        /stores/{store_hash}/v2/products/{product_id}/skus/{id}`
                      header:
                        anchor: v2-delete-a-product-sku
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete Multiple Product SKUs 


                        Deletes multiple product SKUs.



                        >`DELETE
                        /stores/{store_hash}/v2/products/{product_id}/skus`



                        ### Filters 


                        Filter parameters can be added to the URL query string
                        to select specific SKUs in the collection.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | min_id | int |
                        /api/v2/products/{product_id}/skus?min_id={value} |

                        | max_id | int |
                        /api/v2/products/{product_id}/skus?max_id={value} |

                        | sku | string |
                        /api/v2/products/{product_id}/skus?sku={value} |

                        | upc | string |
                        /api/v2/products/{product_id}/skus?upc={value} |

                        | inventory_level | string |
                        /api/v2/products/{product_id}/skus?inventory_level={value}
                        |

                        | inventory_warning_level | string |
                        /api/v2/products/{product_id}/skus?inventory_warning_level={value}
                        |

                        | bin_picking_number | string |
                        /api/v2/products/{product_id}/skus?bin_picking_number={value}
                        |

                        | min_inventory_level | int |
                        /api/v2/products/{product_id}/skus?min_inventory_level={value}
                        |

                        | max_inventory_level | int |
                        /api/v2/products/{product_id}/skus?max_inventory_level={value}
                        |

                        | is_low_inventory | boolean |
                        /api/v2/products/{product_id}/skus?is_low_inventory={value}
                        |

                        | product_hash | int |
                        /api/v2/products/{product_id}/skus?product_hash={value}
                        |


                        ## Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 skus are returned by
                        default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | page | int |
                        /api/v2/products/{product_id}/skus?page={number} |

                        | limit | int |
                        /api/v2/products/{product_id}/skus?limit={count} |
                      header:
                        anchor: v2-delete-multiple-product-skus
              - title: Products
                route:
                  path: /v2-products
                data:
                  blocks:
                    - type: html
                      data: "<h1>Products</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#v2-product-object-properties\">Product Object – Properties</a></li>\n        <li><a href=\"#v2-list-products\">List Products</a></li>\n        <li><a href=\"#v2-get-a-product\">Get a Product</a></li>\n        <li><a href=\"#v2-get-a-product-count\">Get a Product Count</a></li>\n        <li><a href=\"#v2-create-a-product\">Create a Product</a></li>\n        <li><a href=\"#v2-delete-a-product\">Delete a Product</a></li>\n        <li><a href=\"#v2-delete-all-products\">Delete All Products</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Product Object – Properties 


                        | Name | Type | Description |

                        | --- | --- | --- | --- |

                        | id | int | The unique numerical ID of the product.
                        Increments sequentially. |

                        | keyword_filter | string | (This property is
                        deprecated.) |

                        | name | string | The product name. |

                        | type | enum | The product type. One of:<br> `physical`
                        – a physical stock unit.<br> `digital` – a digital
                        download. |

                        | sku | string | User-defined product code/stock keeping
                        unit (SKU). |

                        | description | text | Product description, which can
                        include HTML formatting. |

                        | search_keywords | text | A comma-separated list of
                        keywords that can be used to locate the product when
                        searching the store. |

                        | availability_description | string | Availability text,
                        displayed on the checkout page under the product title,
                        telling the customer how long it will normally take to
                        ship this product. E.g.: "Usually ships in 24 hours". |

                        | price | decimal | The product's price. Should include,
                        or exclude, tax based on the store settings. |

                        | cost_price | decimal | The product's cost price.
                        Stored for reference only; not used or displayed
                        anywhere on the store. |

                        | retail_price | decimal | The product's retail cost. If
                        entered, this retail price will be shown on the product
                        page. |

                        | sale_price | decimal | Sale price. If entered, this
                        will be used instead of value in the price field when
                        calculating the product's cost. |

                        | calculated_price | decimal | Price as displayed to
                        guests, adjusted for applicable sales and rules. (Cart
                        price might incorporate further discounts for logged-in
                        customers or customer groups.) Read-only. |

                        | sort_order | int | Priority to give this product when
                        included in product lists on category pages and in
                        search results. Lower integers will place the product
                        closer to the top of the results. |

                        | is_visible | boolean | Flag to determine whether or
                        not the product should be displayed to customers
                        browsing. If `true`, the product will be displayed. If
                        `false`, the product will be hidden from view. |

                        | is_featured | boolean | Flag to determine whether the
                        product should be included in the "featured products"
                        panel for shoppers viewing the store. |

                        | related_products | string | Defaults to `-1`, which
                        causes the store to automatically generate a list of
                        related products. To manually specify the list of
                        related products, include their IDs, separated by
                        commas. For example: `3, 6, 7, 21`. |

                        | inventory_level | int | Current inventory level of the
                        product. Simple inventory tracking must be enabled (see
                        the `inventory_tracking` field) for this to take effect.
                        |

                        | inventory_warning_level | int | Inventory Warning
                        level for the product. When the product's inventory
                        level drops below this warning level, the store owner
                        will be sent a notification. Simple inventory tracking
                        must be enabled (see the `inventory_tracking` field) for
                        this to take effect. |

                        | warranty | text | Warranty information displayed on
                        the product page. Can include HTML formatting. |

                        | weight | decimal | Weight of the product, which can be
                        used when calculating shipping costs. |

                        | width | decimal | Width of the product, which can be
                        used when calculating shipping costs. |

                        | height | decimal | Height of the product, which can be
                        used when calculating shipping costs. |

                        | depth | decimal | Depth of the product, which can be
                        used when calculating shipping costs. |

                        | fixed_cost_shipping_price | decimal | A fixed shipping
                        cost for the product. If defined, this value will be
                        used instead of normal shipping-cost calculation during
                        checkout. |

                        | is_free_shipping | boolean | Flag used to indicate
                        whether or not the product has free shipping. If `true`,
                        the shipping cost for the product will be zero. |

                        | inventory_tracking | enum | The type of inventory
                        tracking for the product. One of:<br> `none` – inventory
                        levels will not be tracked.<br> `simple` – inventory
                        levels will be tracked using the `inventory_level` and
                        `inventory_warning_level` fields.<br> `sku` – inventory
                        levels will be tracked based on individual product
                        options, which maintain their own warning levels and
                        inventory levels. |

                        | rating_total | int | The total rating for the product.
                        |

                        | rating_count | int | The total number of ratings the
                        product has had. |

                        | total_sold | int | Total quantity of this product sold
                        through transactions. |

                        | date_created | date | The date of which the product
                        was created. |

                        | brand_id | int | The product's brand |

                        | view_count | int | The number of times the product has
                        been viewed. |

                        | page_title | string | Custom title for the product's
                        page. If not defined, the product name will be used as
                        the page title. |

                        | meta_keywords | text | Custom meta keywords for the
                        product page. If not defined, the store's default
                        keywords will be used. |

                        | meta_description | text | Custom meta description for
                        the product page. If not defined, the store's default
                        meta description will be used. |

                        | layout_file | string | The layout template file used
                        to render this product category. This field is writable
                        only for stores with a Blueprint theme applied |

                        | is_price_hidden | boolean | The default `false` value
                        indicates that this product's price should be shown on
                        the product page. If set to `true`, the price will be
                        hidden hidden. (NOTE: To successfully set
                        `is_price_hidden` to `true`, the `availability` value
                        must be `disabled`.) |

                        | price_hidden_label | string | By default, an empty
                        string. If `is_price_hidden` is `true`, the value of
                        `price_hidden_label` will be displayed instead of the
                        price. (NOTE:&#160;To successfully set a non-empty
                        string value for `price_hidden_label`, the
                        `availability` value must be `disabled`.) |

                        | categories | array | An array of IDs for the
                        categories this product belongs to. When updating a
                        product, if an array of categories is supplied, then all
                        product categories will be overwritten. Does not accept
                        more than 1,000 ID values. |

                        | date_modified | date | The date that the product was
                        last modified. |

                        | event_date_field_name | string | Name of the field to
                        be displayed on the product page when selecting the
                        event/delivery date. |

                        | event_date_type | enum | One of the following
                        values:<br> `none` – Disables the event/delivery date
                        requirement and field.<br> `after` – The selected date
                        must fall either on, or after, the date specified in the
                        `event_date_start` field.<br> `before` – The selected
                        date must fall either before, or on, the date specified
                        in the `event_date_end` field.<br> `range` – The
                        selected date must fall between the `event_date_start`
                        and `event_date_end` dates. |

                        | event_date_start | date | When the product requires
                        the customer to select an event/delivery date, this date
                        is used as the "after" date. |

                        | event_date_end | date | When the product requires the
                        customer to select an event/delivery date, this date is
                        used as the "before" date. |

                        | myob_asset_account | string | MYOB Asset Account. |

                        | myob_income_account | string | MYOB Income Account. |

                        | myob_expense_account | string | MYOB Expense/COS
                        Account. |

                        | peachtree_gl_account | string | Peachtree General
                        Ledger Account. |

                        | condition | enum | The product's condition. Will be
                        shown on the product page if the value of the
                        `is_condition_shown` field is true. Possible values:
                        `New`, `Used`, `Refurbished`. |

                        | is_condition_shown | boolean | Flag used to determine
                        whether the product's condition will be shown to the
                        customer on the product page. |

                        | preorder_release_date | date | Pre-order release date.
                        See `availability` field for details on setting a
                        product's availability to accept pre-orders. |

                        | is_preorder_only | boolean | If set to `false`, the
                        product will not change its `availability` from
                        `preorder` to `available` on the release date.
                        Otherwise, on the release date the product's
                        availability/status will change to `available`. |

                        | preorder_message | string | Custom expected-date
                        message to display on the product page. If undefined,
                        the message defaults to the storewide setting. Can
                        contain the `%%DATE%%` placeholder, which will be
                        replaced with the release date. |

                        | order_quantity_minimum | int | The minimum quantity an
                        order must contain in order to purchase this product. |

                        | order_quantity_maximum | int | The maximum quantity an
                        order can contain when purchasing the product. |

                        | open_graph_type | enum | Type of product. Acceptable
                        values are: `product`, `album`, `book`, `drink`, `food`,
                        `game`, `movie`, `song`, `tv_show` |

                        | open_graph_title | string | Title of the product. If
                        not specified, the product's name will be used instead.
                        |

                        | open_graph_description | text | Description to use for
                        the product. If not specified, the `meta_description`
                        will be used instead. |

                        | is_open_graph_thumbnail | boolean | If set to `true`,
                        the product thumbnail image will be used as the open
                        graph image. |

                        | upc | string | The product UPC code, which is used in
                        feeds for shopping comparison sites. |

                        | date_last_imported | date | The date on which the
                        product was last imported using the bulk importer. |

                        | option_set_id | int | The ID of the [option
                        set](/api/v2/#option-sets) applied to the product.
                        (NOTE: To remove the option set from the product, set
                        the value to `null` on update.) |

                        | tax_class_id | int | The ID of the tax class applied
                        to the product. (NOTE: Value ignored if automatic tax is
                        enabled.) |

                        | option_set_display | enum | The position on the
                        product page where options from the option set will be
                        displayed. |

                        | bin_picking_number | string | The BIN picking number
                        for the product. |

                        | custom_url | string | Custom URL (if set) overriding
                        the structure dictated in the store's settings. If no
                        custom URL is set, this will contain the default URL. |

                        | primary_image | object | An image object,
                        corresponding to the image that is set as the product's
                        thumbnail. This object includes that image's `id`, plus
                        four URL values identifying where to pull the image at
                        different sizes:<br>`standard_url` is the image used in
                        the product page's image box.<br> `tiny_url` is the
                        thumbnail image displayed below the product page's image
                        box.<br> `thumbnail_url` is used for product list-box
                        images on category pages and in side panels.<br>
                        `zoom_url` is either the original image size provided to
                        BigCommerce, or the merchant-selected `Product Zoom
                        Image`/`Zoomed image` size – whichever is smaller. (You
                        can always access the product's original image via the
                        [Product Images resource](/api/v2/#product-images).) |

                        | availability | enum | Availability of the product.
                        Possible values:<br> `available` – the product can be
                        purchased on the storefront.<br> `disabled` - the
                        product is listed on the storefront, but cannot be
                        purchased.<br> `preorder` – the product is listed for
                        pre-orders. |

                        | brand | resource | The product's brand |

                        | downloads | resource | Total number of downloads for a
                        downloadable product. |

                        | images | resource | See the [Product Images
                        resource](/api/v2/#product-images) for information. |

                        | discount_rules | resource | See the [Bulk
                        Pricing/Discount](/api/v2/#bulk-pricing) resource for
                        information. |

                        | configurable_fields | resource | See the [Configurable
                        Fields](/api/v2/#configurable-fields) resource for
                        information. |

                        | custom_fields | resource | See the [Custom
                        Fields](/api/v2/#custom-fields) resource for
                        information. |

                        | videos | resource | See the [Videos
                        resource](/api/v2/#videos) for information. |

                        | skus | resource | Stock Keeping Units for the product.
                        See the [Product SKUs](/api/v2/#skus) resource for the
                        definition of a sku object. |

                        | rules | resource | Rules that apply only to this
                        product, based on the product's [option
                        set](/v2#product-option-sets). See [Product
                        Rules](/api/v2/#product-rules) resource for information.
                        |

                        | option_set | resource | See the [Product Option
                        Sets](/v2/#product-option-sets) resource for
                        information. |

                        | options | resource | Options from the [option
                        set](/api/v2/#option-sets) applied to the product. See
                        the [Product Options](/api/v2/#product-options) resource
                        for information. |

                        | tax_class | resource | Assigned tax class, when using
                        a manual tax setup. This can be a number matching one of
                        the tax classes set up in your store. |

                        | avalara_product_tax_code | resource | Accepts AvaTax
                        System Tax Codes, which identify products and services
                        that fall into special sales-tax categories. By using
                        these codes, merchants who subscribe to Avalara Premium
                        can calculate sales taxes more accurately.<br><br>
                        Stores without Avalara Premium will ignore the code when
                        calculating sales tax. Do not pass more than one code.
                        The codes are case-sensitive.<br><br> For details,
                        please see Avalara's <a
                        href="https://help.avalara.com/000_Avalara_AvaTax/Manage_Product_Taxability/010_Select_AvaTax_System_Tax_Codes"
                        target="_blank">overview</a> and <a
                        href="https://help.avalara.com/000_Avalara_AvaTax/Manage_Product_Taxability/Tax_Codes_-_Frequently_Asked_Questions"
                        target="_blank">FAQ</a> on AvaTax System Tax Codes. You
                        can also <a
                        href="https://help.avalara.com/@api/deki/files/1675/AvaTax_System_Tax_Codes_Toolkit.zip?revision=37"
                        target="_blank">download codes</a> as a zipfile of
                        spreadsheets, or <a
                        href="https://taxcode.avatax.avalara.com/"
                        target="_blank">search or browse codes</a> in Avalara's
                        Tax Code Search Tool. (These external links are subject
                        to change.) |
                      header:
                        anchor: v2-product-object-properties
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## List Products 


                        Gets the collection of products. (Default sorting is by
                        product id, from lowest to highest.)


                        > `GET /stores/{store_hash}/v2/products`


                        ### Filters 


                        Filter parameters can be added to the URL query string
                        to select specific products in the collection.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | min_id | int | /api/v2/products?min_id={value} |

                        | max_id | int | /api/v2/products?max_id={value} |

                        | name | string | /api/v2/products?name={value} |

                        | keyword_filter | string |
                        /api/v2/products?keyword_filter={value} |

                        | description | string |
                        /api/v2/products?description={value} |

                        | sku | string | /api/v2/products?sku={value} |

                        | condition | string |
                        /api/v2/products?condition={value} |

                        | availability | string |
                        /api/v2/products?availability={value} |

                        | brand_id | string | /api/v2/products?brand_id={value}
                        |

                        | min_date_created | dateTime or date |
                        /api/v2/products?min_date_created={value} |

                        | max_date_created | dateTime or date |
                        /api/v2/products?max_date_created={value} |

                        | min_date_modified | dateTime or date |
                        /api/v2/products?min_date_modified={value} |

                        | max_date_modified | dateTime or date |
                        /api/v2/products?max_date_modified={value} |

                        | min_date_last_imported | date |
                        /api/v2/products?min_date_last_imported={value} |

                        | max_date_last_imported | date |
                        /api/v2/products?max_date_last_imported={value} |

                        | min_price | decimal |
                        /api/v2/products?min_price={value} |

                        | max_price | decimal |
                        /api/v2/products?max_price={value} |

                        | min_number_sold | int |
                        /api/v2/products?min_number_sold={value} |

                        | max_number_sold | int |
                        /api/v2/products?max_number_sold={value} |

                        | is_visible | string |
                        /api/v2/products?is_visible={value} |

                        | is_featured | string |
                        /api/v2/products?is_featured={value} |

                        | min_inventory_level | int |
                        /api/v2/products?min_inventory_level={value} |

                        | max_inventory_level | int |
                        /api/v2/products?max_inventory_level={value} |

                        | include_sku | boolean |
                        /api/v2/products?include_sku={value} |

                        | category | string | /api/v2/products?category={value}
                        |

                        | product_tax_code | string |
                        /api/v2/products?product_tax_code={value} |


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 products are returned by
                        default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | Page | int | /api/v2/products?page={number} |

                        | Limit | int | /api/v2/products?limit={count} |


                        ### Notes 


                        You can filter the retrieved fields by appending one of
                        the following options to your request:


                        * ?include=

                        * ?include=@summary

                        * ?exclude=


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": 32,
                            "keyword_filter": null,
                            "name": "[Sample] Tomorrow is today, Red printed scarf",
                            "type": "physical",
                            "sku": "",
                            "description": "Densely pack your descriptions with useful information and watch products fly off the shelf.",
                            "search_keywords": null,
                            "availability_description": "",
                            "price": "89.0000",
                            "cost_price": "0.0000",
                            "retail_price": "0.0000",
                            "sale_price": "0.0000",
                            "calculated_price": "89.0000",
                            "sort_order": 0,
                            "is_visible": true,
                            "is_featured": true,
                            "related_products": "-1",
                            "inventory_level": 0,
                            "inventory_warning_level": 0,
                            "warranty": null,
                            "weight": "0.3000",
                            "width": "0.0000",
                            "height": "0.0000",
                            "depth": "0.0000",
                            "fixed_cost_shipping_price": "10.0000",
                            "is_free_shipping": false,
                            "inventory_tracking": "none",
                            "rating_total": 0,
                            "rating_count": 0,
                            "total_sold": 0,
                            "date_created": "Fri, 21 Sep 2012 02:31:01 +0000",
                            "brand_id": 17,
                            "view_count": 4,
                            "page_title": "",
                            "meta_keywords": null,
                            "meta_description": null,
                            "layout_file": "product.html",
                            "is_price_hidden": false,
                            "price_hidden_label": "",
                            "categories": [
                              14
                            ],
                            "date_modified": "Mon, 24 Sep 2012 01:34:57 +0000",
                            "event_date_field_name": "Delivery Date",
                            "event_date_type": "none",
                            "event_date_start": "",
                            "event_date_end": "",
                            "myob_asset_account": "",
                            "myob_income_account": "",
                            "myob_expense_account": "",
                            "peachtree_gl_account": "",
                            "condition": "New",
                            "is_condition_shown": false,
                            "preorder_release_date": "",
                            "is_preorder_only": false,
                            "preorder_message": "",
                            "order_quantity_minimum": 0,
                            "order_quantity_maximum": 0,
                            "open_graph_type": "product",
                            "open_graph_title": "",
                            "open_graph_description": null,
                            "is_open_graph_thumbnail": true,
                            "upc": null,
                            "avalara_product_tax_code": "",
                            "date_last_imported": "",
                            "option_set_id": null,
                            "tax_class_id": 0,
                            "option_set_display": "right",
                            "bin_picking_number": "",
                            "custom_url": "/tomorrow-is-today-red-printed-scarf/",
                            "primary_image": {
                              "id": 247,
                              "zoom_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.1280.1280.jpg?c=1",
                              "thumbnail_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.220.290.jpg?c=1",
                              "standard_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.386.513.jpg?c=1",
                              "tiny_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.44.58.jpg?c=1"
                            },
                            "availability": "available",
                            "brand": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/brands/17.json",
                              "resource": "/brands/17"
                            },
                            "images": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/images.json",
                              "resource": "/products/32/images"
                            },
                            "discount_rules": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/discountrules.json",
                              "resource": "/products/32/discountrules"
                            },
                            "configurable_fields": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/configurablefields.json",
                              "resource": "/products/32/configurablefields"
                            },
                            "custom_fields": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/customfields.json",
                              "resource": "/products/32/customfields"
                            },
                            "videos": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/videos.json",
                              "resource": "/products/32/videos"
                            },
                            "skus": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/skus.json",
                              "resource": "/products/32/skus"
                            },
                            "rules": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/rules.json",
                              "resource": "/products/32/rules"
                            },
                            "option_set": null,
                            "options": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/options.json",
                              "resource": "/products/32/options"
                            },
                            "tax_class": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/taxclasses/0.json",
                              "resource": "/taxclasses/0"
                            }
                          },
                          {
                            "id": 33,
                            "keyword_filter": null,
                            "name": "[Sample] Anna, multi-colored bangles",
                            "type": "physical",
                            "sku": "",
                            "description": "One of the best things you can do to make your store successful is invest some time in writing great product descriptions.</p>",
                            "search_keywords": null,
                            "availability_description": "",
                            "price": "59.0000",
                            "cost_price": "0.0000",
                            "retail_price": "0.0000",
                            "sale_price": "0.0000",
                            "calculated_price": "59.0000",
                            "sort_order": 0,
                            "is_visible": true,
                            "is_featured": true,
                            "related_products": "-1",
                            "inventory_level": 0,
                            "inventory_warning_level": 0,
                            "warranty": null,
                            "weight": "0.5000",
                            "width": "0.0000",
                            "height": "0.0000",
                            "depth": "0.0000",
                            "fixed_cost_shipping_price": "0.0000",
                            "is_free_shipping": false,
                            "inventory_tracking": "none",
                            "rating_total": 0,
                            "rating_count": 0,
                            "total_sold": 0,
                            "date_created": "Fri, 21 Sep 2012 02:46:41 +0000",
                            "brand_id": 18,
                            "view_count": 12,
                            "page_title": "",
                            "meta_keywords": null,
                            "meta_description": null,
                            "layout_file": "product.html",
                            "is_price_hidden": false,
                            "price_hidden_label": "",
                            "categories": [
                              14
                            ],
                            "date_modified": "Mon, 24 Sep 2012 05:28:02 +0000",
                            "event_date_field_name": "Delivery Date",
                            "event_date_type": "none",
                            "event_date_start": "",
                            "event_date_end": "",
                            "myob_asset_account": "",
                            "myob_income_account": "",
                            "myob_expense_account": "",
                            "peachtree_gl_account": "",
                            "condition": "New",
                            "is_condition_shown": false,
                            "preorder_release_date": "",
                            "is_preorder_only": false,
                            "preorder_message": "",
                            "order_quantity_minimum": 0,
                            "order_quantity_maximum": 0,
                            "open_graph_type": "product",
                            "open_graph_title": "",
                            "open_graph_description": null,
                            "is_open_graph_thumbnail": true,
                            "upc": null,
                            "avalara_product_tax_code": "",
                            "date_last_imported": "",
                            "option_set_id": 13,
                            "tax_class_id": 0,
                            "option_set_display": "right",
                            "bin_picking_number": "",
                            "custom_url": "/anna-multi-colored-bangles/",
                            "primary_image": {
                              "id": 245,
                              "zoom_url": "https://cdn.url.path/bcapp/et7xe3pz/products/33/images/245/HERO_cocolee_anna_92865__20303.1393831046.1280.1280.jpg?c=1",
                              "thumbnail_url": "https://cdn.url.path/bcapp/et7xe3pz/products/33/images/245/HERO_cocolee_anna_92865__20303.1393831046.220.290.jpg?c=1",
                              "standard_url": "https://cdn.url.path/bcapp/et7xe3pz/products/33/images/245/HERO_cocolee_anna_92865__20303.1393831046.386.513.jpg?c=1",
                              "tiny_url": "https://cdn.url.path/bcapp/et7xe3pz/products/33/images/245/HERO_cocolee_anna_92865__20303.1393831046.44.58.jpg?c=1"
                            },
                            "availability": "available",
                            "brand": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/brands/18.json",
                              "resource": "/brands/18"
                            },
                            "images": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/33/images.json",
                              "resource": "/products/33/images"
                            },
                            "discount_rules": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/33/discountrules.json",
                              "resource": "/products/33/discountrules"
                            },
                            "configurable_fields": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/33/configurablefields.json",
                              "resource": "/products/33/configurablefields"
                            },
                            "custom_fields": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/33/customfields.json",
                              "resource": "/products/33/customfields"
                            },
                            "videos": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/33/videos.json",
                              "resource": "/products/33/videos"
                            },
                            "skus": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/33/skus.json",
                              "resource": "/products/33/skus"
                            },
                            "rules": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/33/rules.json",
                              "resource": "/products/33/rules"
                            },
                            "option_set": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/optionsets/13.json",
                              "resource": "/optionsets/13"
                            },
                            "options": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/33/options.json",
                              "resource": "/products/33/options"
                            },
                            "tax_class": {
                              "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/taxclasses/0.json",
                              "resource": "/taxclasses/0"
                            }
                          }
                        ]

                        ```
                      header:
                        anchor: v2-list-products
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Product 


                        Gets a product.


                        *   OAuth 

                        > `GET /stores/{store_hash}/v2/products/{id}`

                        *   Basic Auth

                        > `GET /api/v2/products/{id}`


                        ### Notes 


                        You can filter the retrieved fields by appending one of
                        the following options to your request: 


                        - `?include=`

                        - `?include=@summary` 

                        - `?exclude=`


                        In particular, you can reduce payload size, and improve
                        performance, by excluding the `description` field.


                        ### Mandatory Fields 


                        However, the following fields are always present on
                        product API requests, and cannot be excluded:


                        - `id`

                        - `name`

                        - `date_modified`

                        - `primary_image`


                        ### include 


                        The following sample request will retrieve *only* the
                        specified `date_created`, `price`, and `cost_price`
                        fields, plus the [mandatory
                        fields](#get-a-product-mandatory) listed just above:


                        ```

                        https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32?include=date_created,price,cost_price

                        ```


                        Here is a corresponding sample response:


                        ```

                        {
                            "id": 32,
                            "name": "[Sample] Tomorrow is today, Red printed scarf",
                            "price": "89.0000",
                            "cost_price": "0.0000",
                            "date_created": "Fri, 21 Sep 2012 02:31:01 +0000",
                            "date_modified": "Thu, 10 Dec 2015 21:10:17 +0000",
                            "primary_image": {
                                "id": 247,
                                "tiny_url": "https://cdn.url.path/bcapp/k84uuwpy/products/32/images/247/in_123__14581.1348449270.60.90.jpg?c=1",
                                "standard_url": "https://cdn.url.path/bcapp/k84uuwpy/products/32/images/247/in_123__14581.1348449270.500.750.jpg?c=1",
                                "thumbnail_url": "https://cdn.url.path/bcapp/k84uuwpy/products/32/images/247/in_123__14581.1348449270.190.285.jpg?c=1",
                                "zoom_url": "https://cdn.url.path/bcapp/k84uuwpy/products/32/images/247/in_123__14581.1348449270.1280.1280.jpg?c=1"
                            },
                            "metadata": []
                        }

                        ```


                        ### include=@summary 


                        The `?include=@summary` option retrieves the following
                        predefined subset of fields, in addition to the
                        [mandatory fields](#get-a-product-mandatory) listed
                        above: 


                        - `availability`

                        - `calculated_price`

                        - `inventory_tracking`

                        - `sku`

                        - `inventory_level`

                        - `inventory_warning_level`

                        - `is_visible`

                        - `is_featured` 


                        Here is a sample request with the `?include=@summary`
                        option appended:


                        ```

                        https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32?include=@summary

                        ```


                        Here is a corresponding sample response:


                        ```

                        {
                            "id": 32,
                            "name": "[Sample] Tomorrow is today, Red printed scarf",
                            "sku": "TTRPS",
                            "calculated_price": "89.0000",
                            "is_visible": true,
                            "is_featured": true,
                            "inventory_level": 0,
                            "inventory_warning_level": 0,
                            "inventory_tracking": "none",
                            "date_modified": "Thu, 10 Dec 2015 21:10:17 +0000",
                            "availability": "available",
                            "primary_image": {
                                "id": 247,
                                "tiny_url": "https://cdn.url.path/bcapp/k84uuwpy/products/32/images/247/in_123__14581.1348449270.60.90.jpg?c=1",
                                "standard_url": "https://cdn.url.path/bcapp/k84uuwpy/products/32/images/247/in_123__14581.1348449270.500.750.jpg?c=1",
                                "thumbnail_url": "https://cdn.url.path/bcapp/k84uuwpy/products/32/images/247/in_123__14581.1348449270.190.285.jpg?c=1",
                                "zoom_url": "https://cdn.url.path/bcapp/k84uuwpy/products/32/images/247/in_123__14581.1348449270.1280.1280.jpg?c=1"
                            },
                            "metadata": []
                        }

                        ```


                        ### exclude 


                        The `?exclude=` option excludes one or more specified
                        fields. However, you cannot exclude the mandatory `id`,
                        `name`, `date_modified`, or `primary_image` fields.


                        Here is a sample request with the `?exclude=` option
                        appended:


                        ```

                        https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32?exclude=description

                        ```


                        We have omitted the corresponding sample response.
                        However, the following section shows a complete sample
                        response for a request submitted with no `?include` or
                        `?exclude` option. (The effect of the
                        `?exclude=description` option shown above would be to
                        omit the `"description": ` field shown as the sixth
                        field below.)



                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 32,
                          "keyword_filter": null,
                          "name": "[Sample] Tomorrow is today, Red printed scarf",
                          "type": "physical",
                          "sku": "",
                          "description": "Densely pack your descriptions with useful information and watch products fly off the shelf.",
                          "search_keywords": null,
                          "availability_description": "",
                          "price": "89.0000",
                          "cost_price": "0.0000",
                          "retail_price": "0.0000",
                          "sale_price": "0.0000",
                          "calculated_price": "89.0000",
                          "sort_order": 0,
                          "is_visible": true,
                          "is_featured": true,
                          "related_products": "-1",
                          "inventory_level": 0,
                          "inventory_warning_level": 0,
                          "warranty": null,
                          "weight": "0.3000",
                          "width": "0.0000",
                          "height": "0.0000",
                          "depth": "0.0000",
                          "fixed_cost_shipping_price": "10.0000",
                          "is_free_shipping": false,
                          "inventory_tracking": "none",
                          "rating_total": 0,
                          "rating_count": 0,
                          "total_sold": 0,
                          "date_created": "Fri, 21 Sep 2012 02:31:01 +0000",
                          "brand_id": 17,
                          "view_count": 4,
                          "page_title": "",
                          "meta_keywords": null,
                          "meta_description": null,
                          "layout_file": "product.html",
                          "is_price_hidden": false,
                          "price_hidden_label": "",
                          "categories": [
                            14
                          ],
                          "date_modified": "Mon, 24 Sep 2012 01:34:57 +0000",
                          "event_date_field_name": "Delivery Date",
                          "event_date_type": "none",
                          "event_date_start": "",
                          "event_date_end": "",
                          "myob_asset_account": "",
                          "myob_income_account": "",
                          "myob_expense_account": "",
                          "peachtree_gl_account": "",
                          "condition": "New",
                          "is_condition_shown": false,
                          "preorder_release_date": "",
                          "is_preorder_only": false,
                          "preorder_message": "",
                          "order_quantity_minimum": 0,
                          "order_quantity_maximum": 0,
                          "open_graph_type": "product",
                          "open_graph_title": "",
                          "open_graph_description": null,
                          "is_open_graph_thumbnail": true,
                          "upc": null,
                          "avalara_product_tax_code": "",
                          "date_last_imported": "",
                          "option_set_id": null,
                          "tax_class_id": 0,
                          "option_set_display": "right",
                          "bin_picking_number": "",
                          "custom_url": "/tomorrow-is-today-red-printed-scarf/",
                          "primary_image": {
                            "id": 247,
                            "zoom_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.1280.1280.jpg?c=1",
                            "thumbnail_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.220.290.jpg?c=1",
                            "standard_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.386.513.jpg?c=1",
                            "tiny_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.44.58.jpg?c=1"
                          },
                          "availability": "available",
                          "brand": {
                            "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/brands/17.json",
                            "resource": "/brands/17"
                          },
                          "images": {
                            "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/images.json",
                            "resource": "/products/32/images"
                          },
                          "discount_rules": {
                            "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/discountrules.json",
                            "resource": "/products/32/discountrules"
                          },
                          "configurable_fields": {
                            "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/configurablefields.json",
                            "resource": "/products/32/configurablefields"
                          },
                          "custom_fields": {
                            "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/customfields.json",
                            "resource": "/products/32/customfields"
                          },
                          "videos": {
                            "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/videos.json",
                            "resource": "/products/32/videos"
                          },
                          "skus": {
                            "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/skus.json",
                            "resource": "/products/32/skus"
                          },
                          "rules": {
                            "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/rules.json",
                            "resource": "/products/32/rules"
                          },
                          "option_set": null,
                          "options": {
                            "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/products/32/options.json",
                            "resource": "/products/32/options"
                          },
                          "tax_class": {
                            "url": "https://store-et7xe3pz.mybigcommerce.com/api/v2/taxclasses/0.json",
                            "resource": "/taxclasses/0"
                          }
                        }

                        ```
                      header:
                        anchor: v2-get-a-product
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Product Count 


                        Gets a count of products.

                         > `GET /stores/{store_hash}/v2/products/count`

                        ### Filters 


                        Filter parameters can be added to the URL query string
                        to select specific products in the collection.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | min_id | int | /api/v2/products?min_id={value} |

                        | max_id | int | /api/v2/products?max_id={value} |

                        | name | string | /api/v2/products?name={value} |

                        | keyword_filter | string |
                        /api/v2/products?keyword_filter={value} |

                        | description | string |
                        /api/v2/products?description={value} |

                        | sku | string | /api/v2/products?sku={value} |

                        | condition | string |
                        /api/v2/products?condition={value} |

                        | availability | string |
                        /api/v2/products?availability={value} |

                        | brand_id | string | /api/v2/products?brand_id={value}
                        |

                        | min_date_created | date |
                        /api/v2/products?min_date_created={value} |

                        | max_date_created | date |
                        /api/v2/products?max_date_created={value} |

                        | min_date_modified | date |
                        /api/v2/products?min_date_modified={value} |

                        | max_date_modified | date |
                        /api/v2/products?max_date_modified={value} |

                        | min_date_last_imported | date |
                        /api/v2/products?min_date_last_imported={value} |

                        | max_date_last_imported | date |
                        /api/v2/products?max_date_last_imported={value} |

                        | min_price | decimal |
                        /api/v2/products?min_price={value} |

                        | max_price | decimal |
                        /api/v2/products?max_price={value} |

                        | min_number_sold | int |
                        /api/v2/products?min_number_sold={value} |

                        | max_number_sold | int |
                        /api/v2/products?max_number_sold={value} |

                        | is_visible | string |
                        /api/v2/products?is_visible={value} |

                        | is_featured | string |
                        /api/v2/products?is_featured={value} |

                        | min_inventory_level | int |
                        /api/v2/products?min_inventory_level={value} |

                        | max_inventory_level | int |
                        /api/v2/products?max_inventory_level={value} |

                        | include_sku | boolean |
                        /api/v2/products?include_sku={value} |

                        | category | string | /api/v2/products?category={value}
                        |

                        | product_tax_code | string |
                        /api/v2/products?product_tax_code={value} |


                        ### Notes 


                        If no filters are applied, the total number of products
                        is returned.


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "count": 44
                        }

                        ```
                      header:
                        anchor: v2-get-a-product-count
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create a Product 


                        Creates a new product. The example request shows how to
                        create a basic product by sending a product object with
                        the minimum required properties.


                        > `POST /stores/{store_hash}/v2/products`


                        ### Read-only Properties 


                        The following properties of the product are read-only.
                        If one or more of these properties are included in the
                        request, it will be rejected.


                        *   id

                        *   calculated_price

                        *   brand

                        *   images

                        *   discount_rules

                        *   configurable_fields

                        *   custom_fields

                        *   primary_image

                        *   videos

                        *   skus

                        *   rules

                        *   option_set

                        *   options

                        *   tax_class


                        #### Requirements 


                        The following properties of the product are required.
                        The request won’t be fulfilled unless these properties
                        are valid.


                        *   name

                        *   price

                        *   categories

                        *   type

                        *   availability

                        *   weight


                        ### Notes 


                        Create a request by sending a product object with the
                        minimum required properties:


                        ```

                        {
                            "name": "Plain T-Shirt",
                            "type": "physical",
                            "description": "This timeless fashion staple will never go out of style!",
                            "price": "29.99",
                            "categories": [18],
                            "availability": "available",
                            "weight": "0.5"
                        }

                        ```


                        When the `is_visible` property is not provided, the
                        product's visibility is `false` by default.


                        To make newly created products immediately visible on
                        the storefront, you must set `is_visible` to `true` when
                        you create each product.


                        To maximize system performance, BigCommerce caps the
                        number of categories to which a product can belong. The
                        maximum is 1,000. If your `POST` includes an array of
                        more than 1,000 `categories` ID values, BigCommerce will
                        return a 403 error:


                        ```

                        403 Access Denied/Forbidden

                        ```


                        If automatic tax is enabled on the store, the value of
                        `tax_class_id` will have no effect on the calculation of
                        taxes.
                      header:
                        anchor: v2-create-a-product
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Update a Product 


                        Updates an existing product.


                        > `PUT /stores/{store_hash}/v2/products/{id}`



                        ### Read-only Properties 


                        The following properties of the product are read-only.
                        If one or more of these properties are included in the
                        request, it will be rejected.


                        *   id

                        *   rating_total

                        *   rating_count

                        *   number_sold

                        *   date_created

                        *   date_modified

                        *   date_last_imported

                        *   calculated_price

                        *   brand

                        *   images

                        *   discount_rules

                        *   configurable_fields

                        *   custom_fields

                        *   primary_image

                        *   videos

                        *   skus

                        *   rules

                        *   option_set

                        *   options

                        *   tax_class


                        ### Requirements 


                        There are no required properties when updating a
                        product.


                        ### Notes 


                        To update a product, set one or more product properties
                        in the `PUT` request:


                        ```

                        {
                            "custom_url": "/plain-tshirt/",
                            "is_visible": true
                        }

                        ```


                        For example, you can use a `PUT` to link a product to an
                        option set:


                        ```

                        {
                            "option_set_id": 14
                        }

                        ```


                        Invalid property values will produce a `400 Bad Request`
                        error response:


                        ### Request 


                        ``` 

                        {
                            "condition": "Worn"
                        }

                        ```


                        #### Response 


                        ```

                        400 Bad Request

                        ```


                        Trying to set read-only properties will also produce a
                        `400 Bad Request` error response:


                        ### Request 


                        ```

                        {
                            "number_sold": 99
                        }

                        ```


                        ### Response 


                        ```

                        400 Bad Request

                        ```


                        To maximize system performance, BigCommerce caps the
                        maximum number of categories to which a product can
                        belong, at 1,000. If your `PUT` includes an array of
                        more than 1,000 `categories` ID values, BigCommerce will
                        return a `403` error:


                        ```

                        403 Access Denied/Forbidden

                        ```


                        If automatic tax is enabled on the store, the value of
                        `tax_class_id` will have no effect on the calculation of
                        taxes.
                      header:
                        anchor: v2-update-a-product
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete a Product 


                        Deletes a product.


                        > `DELETE /stores/{store_hash}/v2/products/{id}`



                        ### Notes 


                        Successful deletion of a product returns a `204 No
                        Content` response:


                        ```

                        204 No Content

                        ```
                      header:
                        anchor: v2-delete-a-product
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete All Products 


                        Deletes all products from the store.


                        > `DELETE /stores/{store_hash}/v2/products`


                        ### Notes 


                        Successful deletion of all products returns a `204 No
                        Content` response:


                        ```

                        204 No Content

                        ```
                      header:
                        anchor: v2-delete-all-products
              - title: Brands
                route:
                  path: /v2-products-brands
                data:
                  blocks:
                    - type: text
                      data: "<h1>Brands</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#v2-brand-object-properties\">Brands Object – Properties</a></li>\n        <li><a href=\"#v2-list-brands\">List Brands</a></li>\n        <li><a href=\"#v2-get-a-brand\">Get a Brand</a></li>\n        <li><a href=\"#v2-get-a-brand-count\">Get a Count of Brands</a></li>\n        <li><a href=\"#v2-create-a-brand\">Create a Brand</a></li>\n        <li><a href=\"#v2-update-a-brand\">Update a Brand</a></li>\n        <li><a href=\"#v2-delete-a-brand\">Delete a Brand</a></li>\n        <li><a href=\"#v2-delete-all-brands\">Delete All Brands</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Brand Object – Properties 


                        | Name | Type | Description |

                        | --- | --- | --- |

                        | id | int |

                        | name | string | The name of the brand. Must be unique.
                        |

                        | page_title | string | The title shown in the browser
                        while viewing the brand. |

                        | meta_keywords | text | Comma-separated list of meta
                        keywords to include in the HTML. |

                        | meta_description | text | A meta description to
                        include. |

                        | image_file | string | A valid image. |

                        | search_keywords | string | A comma-separated list of
                        keywords that can be used to locate this brand. |
                    - type: text
                      data: >-
                        ## List Brands 


                        Gets the collection of brands. (Default sorting is by
                        brand id, from lowest to highest.)



                        >`GET /stores/{store_hash}/v2/brands`


                        ### Filters 


                        Filter parameters can be added to the URL query string
                        to select specific brands in the collection.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | name | string | /api/v2/brands?name={value} |

                        | min_id | int | /api/v2/brands?min_id={value} |

                        | max_id | int | /api/v2/brands?max_id={value} |


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, BigCommerce returns up to 50
                        brands by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | Page | int | /api/v2/brands?page={number} |

                        | Limit | int | /api/v2/brands?limit={count} |


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": 1,
                            "name": "Apple",
                            "page_title": "",
                            "meta_keywords": "",
                            "meta_description": "",
                            "image_file": "",
                            "search_keywords": ""
                          },
                          {
                            "id": 2,
                            "name": "Microsoft",
                            "page_title": "",
                            "meta_keywords": "",
                            "meta_description": "",
                            "image_file": "",
                            "search_keywords": ""
                          }
                        ]

                        ```
                      header:
                        anchor: v2-list-brands
                    - type: text
                      data: '---'
                    - type: text
                      data: |-
                        ## Get a Brand 

                        Gets a brand.

                        >`GET /stores/{store_hash}/v2/brands/{id}`

                        ### Response 

                        Example JSON returned in the response:

                        ```
                        {
                          "id": 1,
                          "name": "Apple",
                          "page_title": "",
                          "meta_keywords": "",
                          "meta_description": "",
                          "image_file": "",
                          "search_keywords": ""
                        }
                        ```
                      header:
                        anchor: v2-get-a-brand
                    - type: text
                      data: '---'
                    - type: text
                      data: |-
                        ## Get a Count of Brands 

                        Returns the total number of brands in the store.


                        >`GET /stores/{store_hash}/v2/brands/count`

                        ### Response 

                        Example JSON returned in the response:

                        ```
                        {
                          "count": 25
                        }
                        ```
                      header:
                        anchor: v2-get-a-brand-count
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create a Brand 


                        Creates a new brand.


                        >`POST /stores/{store_hash}/v2/brands`



                        ### Read-only Properties 


                        The following properties of the brand are read-only. If
                        one or more of these properties are included in the
                        request, it will be rejected.


                        *   id


                        ### Requirements 


                        The following properties of the brand are required. The
                        request won’t be fulfilled unless these properties are
                        valid.


                        *   name


                        ### Notes 


                        To maximize system performance, BigCommerce caps the
                        number of brands that can be added to a store at 30,000.
                        If your POST causes the store to exceed the maximum of
                        30,000 brands, BigCommerce will return a 403 error.


                        ### Request 


                        Example request object:


                        ```

                        {
                          "name": "Xmen",
                          "page_title": "X men brand"
                        }

                        ```


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 10,
                          "name": "Xmen",
                          "page_title": "X men brand",
                          "meta_keywords": null,
                          "meta_description": null,
                          "image_file": "",
                          "search_keywords": ""
                        }

                        ```
                      header:
                        anchor: v2-create-a-brand
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Update a Brand 


                        Updates an existing brand.


                        >`PUT /stores/{store_hash}/v2/brands/{id}`



                        ### Read-only Properties 


                        The following properties of the brand are read-only. If
                        one or more of these properties are included in the
                        request, it will be rejected.


                        *   id


                        ### Requirements 


                        The following properties of the brand are required. The
                        request won’t be fulfilled unless these properties are
                        valid.


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 10,
                          "name": "Xmen",
                          "page_title": "X men brand",
                          "meta_keywords": null,
                          "meta_description": null,
                          "image_file": "t/apirmzk0a__43675.jpg",
                          "search_keywords": "xmen, awesomeness"
                        }

                        ```
                      header:
                        anchor: v2-update-a-brand
                    - type: text
                      data: '---'
                    - type: text
                      data: |-
                        ## Delete a Brand 

                        Deletes a brand.

                        >`DELETE /stores/{store_hash}/v2/brands/{id}`
                      header:
                        anchor: v2-delete-a-brand
                    - type: text
                      data: '---'
                    - type: text
                      data: |-
                        ## Delete All Brands 

                        Deletes all brands belonging to a product.

                        >`DELETE /stores/{store_hash}/v2/brands`
                      header:
                        anchor: v2-delete-all-brands
              - title: Bulk Pricing
                route:
                  path: /v2-bulk-pricing
                data:
                  blocks:
                    - type: html
                      data: "<h1>Bulk Pricing Rules</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#v2-bulk-pricing-object-properties\">Bulk Pricing Rules Object – Properties</a></li>\n        <li><a href=\"#v2-list-bulk-pricing-rules\">List Bulk Pricing Rules</a></li>\n        <li><a href=\"#v2-bulk-pricing-rules\">Get a Product Bulk Pricing Rule </a></li>\n        <li><a href=\"#v2-get-a-count-bulk-pricing\">Get a Count of Bulk Pricing Rules</a></li>\n        <li><a href=\"#v2-create-a-bulk-pricing-rule\">Create a Product Bulk Pricing Rule </a></li>\n        <li><a href=\"#v2-update-a-bulk-pricing-rule\">Update a Product Bulk Pricing Rule</a></li>\n        <li><a href=\"#v2-delete-a-bulk-pricing-rule\">Delete a Product Bulk Pricing Rule</a></li>\n        <li><a href=\"#v2-delete-all-bulk-pricing-rules\">Delete Multiple Product Bulk Pricing Rules</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ##  Bulk Pricing Object – Properties 


                        | Name | Type | Description |

                        | --- | --- | --- |

                        | id | string | The ID of the bulk discount rule. |

                        | product_id | int | The ID of the product associated
                        with this bulk discount rule. |

                        | min | int | The minimum inclusive quantity of a
                        product to satisfy this rule. Must be greater than or
                        equal to zero. |

                        | max | int | The maximum inclusive quantity of a
                        product to satisfy this rule. Must be greater than the
                        min value, unless this field has a value of 0 (zero), in
                        which case there will be no maximum bound for this rule.
                        |

                        | type | enum |

                        | type_value | decimal | The value of the discount |
                      header:
                        anchor: v2-bulk-pricing-object-properties
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## List Bulk Pricing Rules 


                        Gets the collection of product bulk pricing rules.



                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/discount_rules`


                        ### Filters 


                        There are no filter parameters specific to
                        `discount_rules`.


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 bulk_pricing_rules are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | page | int |
                        /api/v2/products/{product_id}/discount_rules?page={number}
                        |

                        | limit | int |
                        /api/v2/products/{product_id}/discount_rules?limit={count}
                        |


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": "1",
                            "product_id": 30,
                            "min": 100,
                            "max": 500,
                            "type": "price",
                            "type_value": 2
                          }
                        ]

                        ```
                      header:
                        anchor: v2-list-bulk-pricing-rules
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Product Bulk Pricing Rule 


                        Gets a product bulk pricing rule.



                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/discount_rules/{id}`


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": "1",
                          "product_id": 30,
                          "min": 100,
                          "max": 500,
                          "type": "price",
                          "type_value": 2
                        }

                        ```
                      header:
                        anchor: v2-bulk-pricing-rules
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Count of Bulk Pricing Rules 


                        Gets a count of the number of bulk pricing rules in the
                        store.


                        >`GET
                        /stores/{store_hash}/v2/products/discount_rules/count`



                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "count": 9
                        }

                        ```
                      header:
                        anchor: v2-get-a-count-bulk-pricing
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create a Product Bulk Pricing Rule 


                        Creates a new product bulk pricing rule.



                        >`POST
                        /stores/{store_hash}/v2/products/{product_id}/discount_rules`



                        ### Read-only Properties 


                        The following properties of the discount rule are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   product_id


                        ### Requirements 


                        The following properties of the discount rule are
                        required. The request won’t be fulfilled unless these
                        properties are valid.


                        *   type

                        *   type_value


                        ### Notes 


                        To specify that a `min` or `max` value is unbounded,
                        these properties must be explicitly set with a value of
                        `0`. If neither `min` nor `max` properties are included
                        in the request, the existing value will remain
                        unchanged.


                        The range of the `min` and `max` values must not overlap
                        an existing rule associated with the same product.


                        ### Request 


                        Example request object:


                        ```

                        {
                          "min": 100,
                          "max": 500,
                          "type": "price",
                          "type_value": 2
                        }

                        ```


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": "1",
                          "product_id": 30,
                          "min": 100,
                          "max": 500,
                          "type": "price",
                          "type_value": 2
                        }

                        ```
                      header:
                        anchor: v2-create-a-bulk-pricing-rule
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Update a Product Bulk Pricing Rule 


                        Updates an existing product bulk pricing rule.



                        >`PUT
                        /stores/{store_hash}/v2/products/{product_id}/discount_rules/{id}`


                        ### Read-only Properties 


                        The following properties of the discount rule are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   product_id


                        ### Requirements 


                        The following properties of the discount rule are
                        required. The request won’t be fulfilled unless these
                        properties are valid.


                        *   type

                        *   type_value


                        ### Notes 


                        To specify that a `min` or `max` value is unbounded,
                        these properties must be explicitly set with a value of
                        `0`. If neither `min` nor `max` properties are included
                        in the request, the existing value will remain
                        unchanged.


                        The range of the `min` and `max` values must not overlap
                        an existing rule associated with the same product.


                        ### Request 


                        Example request object:


                        ```

                        {
                          "min": 200,
                          "max": 300,
                          "type": "fixed",
                          "type_value": 10
                        }

                        ```


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": "1",
                          "product_id": 30,
                          "min": 200,
                          "max": 300,
                          "type": "fixed",
                          "type_value": 10
                        }

                        ```
                      header:
                        anchor: v2-update-a-bulk-pricing-rule
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete a Product Bulk Pricing Rule 


                        Deletes a product bulk pricing rule.


                        >`DELETE
                        /stores/{store_hash}/v2/products/{product_id}/discount_rules/{id}`
                      header:
                        anchor: v2-delete-a-bulk-pricing-rule
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete Multiple Product Bulk Pricing Rules 


                        Deletes bulk pricing rules associated with a product.


                        >`DELETE
                        /stores/{store_hash}/v2/products/{product_id}/discount_rules`


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 `bulk_pricing_rules` are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | page | int |
                        /api/v2/products/{product_id}/discount_rules?page={number}
                        |

                        | limit | int |
                        /api/v2/products/{product_id}/discount_rules?limit={count}
                        |
                      header:
                        anchor: v2-delete-all-bulk-pricing-rules
              - title: Categories
                route:
                  path: /v2-categories
                data:
                  blocks:
                    - type: html
                      data: "<h1>Categories</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#v2-category-object-properties\">Category Object – Properties </a></li>\n        <li><a href=\"#v2-list-categories\">List Categories</a></li>\n        <li><a href=\"#v2-get-a-category\">Get a Category</a></li>\n        <li><a href=\"#v2-get-a-count-categories\">Get a Count of Categories</a></li>\n        <li><a href=\"#v2-create-a-category\">Create a Category</a></li>\n        <li><a href=\"#v2-update-a-category\">Update a Category</a></li>\n        <li><a href=\"#v2-delete-a-category\">Delete a Category</a></li>\n        <li><a href=\"#v2-delete-all-categories\">Delete All Categories</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Category Object – Properties 


                        | Name | Type | Description |

                        | --- | --- | --- |

                        | id | int | A read-only field containing the unique
                        numeric identifier of this category. |

                        | parent_id | int | The ID of the parent category to
                        which this category belongs.<br> (NOTE: the total number
                        of parent categories cannot exceed seven.) |

                        | name | string | The name of the category. Must be
                        unique. |

                        | description | text | A description for the category. |

                        | sort_order | int | The sort order of the category. |

                        | page_title | string | The page title for the category
                        page. |

                        | meta_keywords | text | Comma-separated list of meta
                        keywords to include in the HTML. |

                        | meta_description | text | A meta description to
                        include. |

                        | layout_file | string | A valid layout file. (Please
                        refer to [this
                        article](https://support.bigcommerce.com/articles/Public/Creating-Custom-Template-Files/)
                        on creating category files.) |

                        | parent_category_list | array | A read-only field
                        containing the ID of this category and the ID of its
                        parent category, if any. |

                        | image_file | string | A valid image. |

                        | is_visible | boolean | Is the category visible? |

                        | search_keywords | string | A comma-separated list of
                        keywords that can be used to locate this brand. |

                        | url | string | The context path of this category. |
                      header:
                        anchor: v2-category-object-properties
                    - type: text
                      data: >-
                        ## List Categories 


                        Gets the list of categories. (Default sorting is by
                        category id, from lowest to highest.)



                        >`GET /stores/{store_hash}/v2/categories`


                        ### Filters 


                        Filter parameters can be added to the URL query string
                        to select specific categories in the collection.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | parent_id | string |
                        /api/v2/categories?parent_id={value} |

                        | name | string | /api/v2/categories?name={value} |

                        | is_visible | string |
                        /api/v2/categories?is_visible={value} |

                        | min_id | int | /api/v2/categories?min_id={value} |

                        | max_id | int | /api/v2/categories?max_id={value} |


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 categories are returned
                        by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | Page | int | /api/v2/categories?page={number} |

                        | Limit | int | /api/v2/categories?limit={count} |


                        ### Response


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": 1,
                            "parent_id": 0,
                            "name": "Shop Mac",
                            "description": "",
                            "sort_order": 0,
                            "page_title": "",
                            "meta_keywords": "",
                            "meta_description": "",
                            "layout_file": "category.html",
                            "parent_category_list": [
                              1
                            ],
                            "image_file": "",
                            "is_visible": true,
                            "search_keywords": "",
                            "url": "/shop-mac/"
                          }
                        ]

                        ```
                      header:
                        anchor: v2-list-categories
                    - type: text
                      data: '---'
                    - type: text
                      data: |-
                        ## Get a Category 

                        Gets a single category.


                        >`GET /stores/{store_hash}/v2/categories/{id}`


                        ### Response

                        Example JSON returned in the response:

                        ```
                        {
                          "id": 10,
                          "parent_id": 1,
                          "name": "Xmen toys",
                          "description": "",
                          "sort_order": 2,
                          "page_title": "",
                          "meta_keywords": null,
                          "meta_description": null,
                          "layout_file": "category.html",
                          "parent_category_list": [
                            1,
                            10
                          ],
                          "image_file": "d/apiy2uz6q__69888.jpg",
                          "is_visible": true,
                          "search_keywords": "",
                          "url": "/xmen-toys/"
                        }
                        ```
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Count of Categories 


                        Gets a count of the total number of categories in the
                        store.



                        >`GET /stores/{store_hash}/v2/categories/count`



                        ### Response


                        Example JSON returned in the response:


                        ```

                        {
                          "count": 10
                        }

                        ```
                      header:
                        anchor: v2-get-a-count-categories
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create a Category 


                        Creates a new category.


                        >`POST /stores/{store_hash}/v2/categories`



                        ### Read-only Properties 


                        The following properties of the category are read-only.
                        If one or more of these properties are included in the
                        request, it will be rejected.


                        *   id

                        *   parent_category_list


                        ### Requirements 


                        The following properties of the category are required.
                        The request won’t be fulfilled unless these properties
                        are valid.


                        *   name


                        ### Notes 


                        To maximize system performance, BigCommerce caps the
                        number of categories that can be added to a store at
                        16,000. If your `POST` causes the store to exceed the
                        maximum of 16,000 categories, BigCommerce will return a
                        403 error.


                        In addition, BigCommerce caps the total number of parent
                        categories at seven. If your `POST` includes the ID of a
                        parent category in the `parent_id` field, BigCommerce
                        will check that parent category and its parent and so on
                        to determine the total number of parent categories. If
                        your `POST` would cause the total number of parent
                        categories to exceed seven, BigCommerce will return a
                        403 error.


                        ### Request


                        Example request object:


                        ```json

                        {
                          "name": "Xmen toys"
                        }

                        ```


                        ### Response


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 10,
                          "parent_id": 1,
                          "name": "Xmen toys",
                          "description": "",
                          "sort_order": 2,
                          "page_title": "",
                          "meta_keywords": null,
                          "meta_description": null,
                          "layout_file": "category.html",
                          "parent_category_list": [
                            1,
                            10
                          ],
                          "image_file": "d/apiy2uz6q__69888.jpg",
                          "is_visible": true,
                          "search_keywords": "",
                          "url": "/xmen-toys/"
                        }

                        ```
                      header:
                        anchor: v2-create-a-category
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Update a Category 


                        Updates an existing category.



                        >`PUT /stores/{store_hash}/v2/categories/{id}`



                        ### Read-only Properties 


                        The following properties of the category are read-only.
                        If one or more of these properties are included in the
                        request, it will be rejected.


                        *   id

                        *   parent_category_list


                        ### Requirements 


                        The following properties of the category are required.
                        The request won’t be fulfilled unless these properties
                        are valid.


                        ### Notes 


                        To maximize system performance, BigCommerce caps the
                        total number of parent categories at seven. If your
                        `PUT` includes the ID of a parent category in the
                        `parent_id` field, BigCommerce will check the parent and
                        any children of the current category to determine the
                        total number of parent categories. If your `PUT` would
                        cause the total number of parent categories to exceed
                        the maximum of seven, BigCommerce will return a 403
                        error.


                        ### Response


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 10,
                          "parent_id": 1,
                          "name": "Xmen toys",
                          "description": "",
                          "sort_order": 2,
                          "page_title": "",
                          "meta_keywords": null,
                          "meta_description": null,
                          "layout_file": "category.html",
                          "parent_category_list": [
                            1,
                            10
                          ],
                          "image_file": "d/apiy2uz6q__69888.jpg",
                          "is_visible": true,
                          "search_keywords": "",
                          "url": "/xmen-toys/"
                        }

                        ```
                      header:
                        anchor: v2-update-a-category
                    - type: text
                      data: '---'
                    - type: text
                      data: |
                        ## Delete a Category 

                        Deletes a category.

                        >`DELETE /stores/{store_hash}/v2/categories/{id}`
                      header:
                        anchor: v2-delete-a-category
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Delete All Categories 


                        Deletes all the categories in the store.


                        >`DELETE /stores/{store_hash}/v2/categories`


                        ### Delete Products before Categories


                        The Delete All Categories operation will not succeed
                        unless the store has zero products. If any products in
                        the store belong to any categories, the entire operation
                        will fail. Therefore, if you really want to delete all
                        the categories of the store, you must first delete all
                        of the products in the store.
                      header:
                        anchor: v2-delete-all-categories
              - title: Custom Fields
                route:
                  path: /v2-custom-fields
                data:
                  blocks:
                    - type: html
                      data: "<h1>Custom Fields</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#v2-custom-fields-object-properties\">Custom Field Object – Properties</a></li>\n        <li><a href=\"#v2-list-custom-fields\">List Custom Fields</a></li>\n        <li><a href=\"#v2-get-a-custom-field\">Get a Custom Field</a></li>\n        <li><a href=\"#v2-get-a-count-custom-fields\">Get a Count of Custom Fields </a></li>\n        <li><a href=\"#v2-create-a-custom-field\">Create a Custom Field</a></li>\n        <li><a href=\"#v2-update-a-custom-field\">Update a Custom Field</a></li>\n        <li><a href=\"#v2-delete-a-custom-field\">Delete a Custom Field</a></li>\n        <li><a href=\"#v2-delete-multiple-custom-fields\">Delete Multiple Custom Fields</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: |-
                        ## Custom Field Object – Properties 

                        | Name | Type | Description |
                        | --- | --- | --- |
                        | id | int | |
                        | product_id | int | ID of the associated product |
                        | name | string | key; limited to 250 characters |
                        | text | string | value; limited to 250 characters |
                      header:
                        anchor: v2-custom-fields-object-properties
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## List Custom Fields 


                        Gets custom fields associated with a product.


                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/custom_fields`

                        ### Filters 


                        There are no filter parameters specific to
                        `custom_fields`.


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 custom_fields are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | page | int |
                        /api/v2/products/{product_id}/custom_fields?page={number}
                        |

                        | limit | int |
                        /api/v2/products/{product_id}/custom_fields?limit={count}
                        |


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": 1,
                            "product_id": 30,
                            "name": "Toy manufactured in",
                            "text": "USA"
                          },
                          {
                            "id": 2,
                            "product_id": 45,
                            "name": "Release Date",
                            "text": "2013-12-25"
                          }
                        ]

                        ```
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Custom Field 


                        Gets a custom field associated with a product.


                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/custom_fields/{id}`


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 2,
                          "product_id": 30,
                          "name": "Toy manufactured in",
                          "text": "USA"
                        }

                        ```
                      header:
                        anchor: v2-get-a-custom-field
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Count of Custom Fields 


                        Gets a count of the number of custom fields in the
                        store.



                        >`GET
                        /stores/{store_hash}/v2/products/custom_fields/count`



                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "count": 0
                        }

                        ```
                      header:
                        anchor: v2-get-a-count-custom-fields
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create a Custom Field 


                        Creates a new custom field associated with a product



                        >`POST
                        /stores/{store_hash}/v2/products/{product_id}/custom_fields`


                        ### Read-only Properties 


                        The following properties of the custom field are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   product_id


                        ### Requirements 


                        The following properties of the custom field are
                        required. The request won’t be fulfilled unless these
                        properties are valid.


                        *   name

                        *   text


                        ### Request 


                        Example request object:


                        ```

                        {
                          "name": "Release Date",
                          "text": "2013-12-25"
                        }

                        ```


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 5,
                          "product_id": 45,
                          "name": "Release Date",
                          "text": "2013-12-25"
                        }

                        ```
                      header:
                        anchor: v2-create-a-custom-field
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Update a Custom Field 


                        Updates an existing custom field associated with a
                        product.



                        >`PUT
                        /stores/{store_hash}/v2/products/{product_id}/custom_fields/{id}`



                        ### Read-only Properties 


                        The following properties of the custom field are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   product_id


                        ### Requirements 


                        The following properties of the custom field are
                        required. The request won’t be fulfilled unless these
                        properties are valid.


                        *   name

                        *   text


                        ### Request 


                        Example request object:


                        ```

                        {
                          "name": "Release Date",
                          "text": "2013-12-31"
                        }

                        ```


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 5,
                          "product_id": 45,
                          "name": "Release Date",
                          "text": "2013-12-31"
                        }

                        ```
                      header:
                        anchor: v2-update-a-custom-field
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete a Custom Field 


                        Deletes a custom field associated with a product.


                        >`DELETE
                        /stores/{store_hash}/v2/products/{product_id}/custom_fields/{id}`
                      header:
                        anchor: v2-delete-a-custom-field
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete Multiple Custom Fields 


                        Deletes multiple custom fields associated with a
                        product.


                        *   OAuth

                        >`DELETE
                        /stores/{store_hash}/v2/products/{product_id}/custom_fields`


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 custom_fields are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | page | int |
                        /api/v2/products/{product_id}/custom_fields?page={number}
                        |

                        | limit | int |
                        /api/v2/products/{product_id}/custom_fields?limit={count}
                        |
                      header:
                        anchor: v2-delete-multiple-custom-fields
              - title: Options
                route:
                  path: /v2-options
                data:
                  blocks:
                    - type: html
                      data: "<h1>Options</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#v2-option-object-properties\">Options Object – Properties</a></li>\n        <li><a href=\"#v2-list-options\">List Options</a></li>\n        <li><a href=\"#v2-get-a-option\">Get an Option</a></li>\n        <li><a href=\"#v2-get-a-count-of-options\">Get a Count of Options</a></li>\n        <li><a href=\"#v2-create-a-option\">Create an Option</a></li>\n        <li><a href=\"#v2-update-a-option\">Update an Option</a></li>\n        <li><a href=\"#v2-delete-a-option\">Delete a Option</a></li>\n        <li><a href=\"#v2-delete-all-options\">Delete All Options</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Options Object – Properties 


                        | Name | Type | Description |

                        |---|---|---|

                        | name | string | Required field. The option's name, as
                        used internally. Must be unique. |

                        | display_name | string | Optional field. The option's
                        name, as displayed on the storefront. Defaults to same
                        value as `name`. However, a custom value can be defined
                        here, and can be reused among multiple options. |

                        | type | string | Optional field. The type of option,
                        which determines how it will display on the storefront.
                        Acceptable values: <br> `C`: Checkbox; <br>`D`: Date
                        field; <br>`F`: File upload field; <br>`MT`: Multi-line
                        text field; <br>`RB`: Radio buttons; <br>`RT`:
                        Rectangular boxes (for product sizes); <br>`S`:
                        Select/drop-down list; <br>`C`: Numbers-only text field;
                        <br>`P`: Product Pick list; <br>`CS`: Color/texture
                        Swatch; <br>`T`: Text field.  |

                        | values | object | Optional field. Object containing
                        option values: a `url` and a `resource`. |

                        | product_id | integer | Optional field; read-only. If
                        `null`, this option can be reused with any product. If
                        populated with a numeric ID, this option can be used
                        exclusively with the corresponding product. |
                      header:
                        anchor: v2-option-object-properties
                    - type: text
                      data: >-
                        ## List Options 


                        Gets the collection of options. (Default sorting is by
                        option id, from lowest to highest.)


                        >`GET /stores/{store_hash}/v2/options`


                        ### Filters 


                        Filter parameters can be added to the URL query string
                        to select specific options in the collection.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | name | string | /api/v2/options?name={value} |

                        | display_name | string |
                        /api/v2/options?display_name={value} |

                        | type | string | /api/v2/options?type={value} |


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 options are returned by
                        default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | Page | int | /api/v2/options?page={number} |

                        | Limit | int | /api/v2/options?limit={count} |


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": 3,
                            "product_id": null,
                            "name": "Colors",
                            "display_name": "Color",
                            "type": "CS",
                            "values": {
                              "url": "https://store-bwvr466.mybigcommerce.com/api/v2/options/3/values.json",
                              "resource": "/options/3/values",
                              "product_id": null
                            }
                          },
                          {
                            "id": 4,
                            "product_id": null,
                            "name": "Screen Sizes",
                            "display_name": "Screen Sizes",
                            "type": "RT",
                            "values": {
                              "url": "https://store-bwvr466.mybigcommerce.com/api/v2/options/4/values.json",
                              "resource": "/options/4/values",
                              "product_id": null
                            }
                          }
                        ]

                        ```
                      header:
                        anchor: v2-list-options
                    - type: text
                      data: '---'
                    - type: text
                      data: |-
                        ## Get an Option 

                        Gets an option.

                        >`GET /stores/{store_hash}/v2/options/{id}`

                        ### Response 

                        Example JSON returned in the response:

                        ```
                        {
                          "id": 3,
                          "product_id": null,
                          "name": "Colors",
                          "display_name": "Color",
                          "type": "CS",
                          "values": {
                            "url": "https://store-bwvr466.mybigcommerce.com/api/v2/options/3/values.json",
                            "resource": "/options/3/values",
                            "product_id": null
                          }
                        }
                        ```
                      header:
                        anchor: v2-get-a-option
                    - type: text
                      data: '---'
                    - type: text
                      data: |-
                        ## Get a Count of Options 

                        Gets a count of the number of options in the store.

                        >`GET /stores/{store_hash}/v2/options/count`


                        ### Response 

                        Example JSON returned in the response:

                        ```
                        {
                          "count": 4
                        }
                        ```
                      header:
                        anchor: v2-get-a-count-of-options
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create an Option 


                        Creates a new option.



                        >`POST /stores/{store_hash}/v2/options`



                        ### Read-only Properties 


                        The following properties of the option are read-only. If
                        one or more of these properties are included in the
                        request, it will be rejected.


                        *   id

                        *   values


                        ### Requirements 


                        The following properties of the option are required. The
                        request won’t be fulfilled unless these properties are
                        valid.


                        *   name

                        *   type


                        ### Request 


                        Example request object:


                        ```

                        {
                          "name": "Color",
                          "display_name": "Color",
                          "type": "CS"
                        }

                        ```


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 10,
                          "product_id": null,
                          "name": "Color",
                          "display_name": "Color",
                          "type": "CS",
                          "values": {
                            "url": "https://store-bwvr466.mybigcommerce.com/api/v2/options/10/values.json",
                            "resource": "/options/10/values",
                            "product_id": null
                          }
                        }

                        ```
                      header:
                        anchor: v2-create-a-option
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Update an Option 


                        Updates an existing option.


                        >`PUT /stores/{store_hash}/v2/options/{id}`


                        ### Read-only Properties 


                        The following properties of the option are read-only. If
                        one or more of these properties are included in the
                        request, it will be rejected.


                        *   `id`

                        *   `values`


                        ### Requirements 


                        The following properties of the option are required. The
                        request won’t be fulfilled unless these properties are
                        valid.


                        ### Request 


                        Example request object:


                        ```

                        {
                          "name": "Xmen toys",
                          "display_name": "xmen extreme toys",
                          "type": "T"
                        }

                        ```


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 18,
                          "product_id": null,
                          "name": "Xmen toys",
                          "display_name": "xmen extreme toys",
                          "type": "T",
                          "values": {
                            "url": "https://store-bwvr466.mybigcommerce.com/api/v2/options/18/values.json",
                            "resource": "/options/18/values",
                            "product_id": null
                          }
                        }

                        ```
                      header:
                        anchor: v2-update-a-option
                    - type: text
                      data: '---'
                    - type: text
                      data: |
                        ## Delete an Option 

                        Deletes an option.

                        >`DELETE /stores/{store_hash}/v2/options/{id}`
                      header:
                        anchor: v2-delete-a-option
                    - type: text
                      data: '---'
                    - type: text
                      data: |-
                        ## Delete All Options 

                        Deletes all options from the store.

                        >`DELETE /stores/{store_hash}/v2/options`
                      header:
                        anchor: v2-delete-all-options
                  children: []
              - title: Option Sets
                route:
                  path: /v2-option-sets
                data:
                  blocks:
                    - type: html
                      data: "<h1>Option Sets</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#v2-option-set-object-properties\">Option Set Object – Properties</a></li>\n        <li><a href=\"#v2-list-option-sets\">List Option Sets </a></li>\n        <li><a href=\"#v2-get-a-option-set\">Get an Option Set </a></li>\n        <li><a href=\"#v2-get-a-count-of-option-sets\">Get a Count of Option Sets</a></li>\n        <li><a href=\"#v2-create-a-option-set\">Create an Option Set</a></li>\n        <li><a href=\"#v2-update-a-option-set\">Update an Option Set </a></li>\n        <li><a href=\"#v2-delete-a-option-set\">Delete an Option Set</a></li>\n        <li><a href=\"#v2-delete-all-option-sets\">Delete All Option Sets</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Option Set Object – Properties 


                        | Name | Type | Description |

                        | --- | --- | --- |

                        | id | int | Optional field. Unique numeric ID for this
                        option set. Increments sequentially. |

                        | name | string | Required field. The option set's name,
                        as used internally. Must be unique. |

                        | options | object/resource | Optional field; read-only.
                        Object containing option-set options: a `url` and a
                        `resource`. |

                        | product_id (optional) | integer | Optional field;
                        read-only. If `null`, this option set can be reused with
                        any product. If populated with a numeric ID, this option
                        set can be used exclusively with the corresponding
                        product. |
                      header:
                        anchor: v2-option-set-object-properties
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## List Option Sets 


                        Gets the collection of option sets. (Default sorting is
                        by option-set id, from lowest to highest.)



                        >`GET /stores/{store_hash}/v2/option_sets`



                        ### Filters 


                        Filter parameters can be added to the URL query string
                        to select specific option_sets in the collection.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | name | string | /api/v2/option_sets?name={value} |


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 option_sets are returned
                        by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | Page | int | /api/v2/option_sets?page={number} |

                        | Limit | int | /api/v2/option_sets?limit={count} |


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": 1,
                            "product_id": null,
                            "name": "MacBook",
                            "options": {
                              "url": "https://store-bwvr466.mybigcommerce.com/api/v2/optionsets/1/options.json",
                              "resource": "/optionsets/1/options",
                              "product_id": null
                            }
                          },
                          {
                            "id": 2,
                            "product_id": null,
                            "name": "PixelSkin Case",
                            "options": {
                              "url": "https://store-bwvr466.mybigcommerce.com/api/v2/optionsets/2/options.json",
                              "resource": "/optionsets/2/options",
                              "product_id": null
                            }
                          }
                        ]

                        ```
                      header:
                        anchor: v2-list-option-sets
                    - type: text
                      data: '---'
                    - type: text
                      data: |-
                        ## Get an Option Set 

                        Gets an option set.


                        >`GET /stores/{store_hash}/v2/option_sets/{id}`


                        ### Response 

                        Example JSON returned in the response:

                        ```
                        {
                          "id": 10,
                          "product_id": null,
                          "name": "T-Shirt Facets",
                          "options": {
                            "url": "https://store-bwvr466.mybigcommerce.com/api/v2/optionsets/10/options.json",
                            "resource": "/optionsets/13/options",
                            "product_id": null
                          }
                        }
                        ```
                      header:
                        anchor: v2-get-a-option-set
                    - type: text
                      data: '---'
                    - type: text
                      data: |-
                        ## Get a Count of Option Sets 

                        Gets a count of the number of option sets in the store.


                        >`GET /stores/{store_hash}/v2/option_sets/count`

                        ### Response 

                        Example JSON returned in the response:

                        ```
                        {
                          "count": 4
                        }
                        ```
                      header:
                        anchor: v2-get-a-count-of-option-sets
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create an Option Set 


                        Creates a new Option set.


                        >`POST /stores/{store_hash}/v2/option_sets`



                        ### Read-only Properties 


                        The following properties of the option set are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   id

                        *   options


                        ### Requirements 


                        The following properties of the option set are required.
                        The request won’t be fulfilled unless these properties
                        are valid.


                        *   name


                        ### Request 


                        Example request object:


                        ```

                        {
                          "name": "T-Shirts"
                        }

                        ```


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 10,
                          "product_id": null,
                          "name": "T-Shirts",
                          "options": {
                            "url": "https://store-bwvr466.mybigcommerce.com/api/v2/optionsets/10/options.json",
                            "resource": "/optionsets/10/options",
                            "product_id": null
                          }
                        }

                        ```
                      header:
                        anchor: v2-create-a-option-set
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Update an Option Set 


                        Updates an existing option set.


                        >`PUT /stores/{store_hash}/v2/option_sets/{id}`


                        ### Read-only Properties 


                        The following properties of the option set are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   id

                        *   options


                        ### Requirements 


                        The following properties of the option set are required.
                        The request won’t be fulfilled unless these properties
                        are valid.


                        *   name


                        ### Request 


                        Example request object:


                        ```json

                        {
                          "name": "T-shirt Facets"
                        }

                        ```


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 10,
                          "product_id": null,
                          "name": "T-shirt Facets",
                          "options": {
                            "url": "https://store-bwvr466.mybigcommerce.com/api/v2/optionsets/10/options.json",
                            "resource": "/optionsets/13/options",
                            "product_id": null
                          }
                        }

                        ```
                      header:
                        anchor: v2-update-a-option-set
                    - type: text
                      data: '---'
                    - type: text
                      data: |-
                        ## Delete an Option Set 

                        Deletes an option set.

                        >`DELETE /stores/{store_hash}/v2/option_sets/{id}`
                      header:
                        anchor: v2-delete-a-option-set
                    - type: text
                      data: '---'
                    - type: text
                      data: |-
                        ## Delete All Option Sets 

                        Deletes all option sets in the store.

                        >`DELETE /stores/{store_hash}/v2/option_sets`
                      header:
                        anchor: v2-delete-all-option-sets
                  children: []
              - title: Option Set Options
                route:
                  path: /v2-option-set-options
                data:
                  blocks:
                    - type: html
                      data: "<h1>Option Set Options</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#v2-option-set-options-object-properties\">Option Set Option: Object – Properties</a></li>\n        <li><a href=\"#v2-list-option-set-options\">List Option Set Options</a></li>\n        <li><a href=\"#v2-get-a-option-set-option\">Get an Option Set Option</a></li>\n        <li><a href=\"#v2-create-a-option-set\">Create an Option Set</a></li>\n        <li><a href=\"#v2-update-a-option-set-option\">Update an Option Set Option</a></li>\n        <li><a href=\"#v2-delete-a-option-set-option\">Delete an Option Set Option</a></li>\n        <li><a href=\"#v2-delete-all-option-set-options\">Delete Multiple Option Set Options</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Option Set Option: Object – Properties 


                        | Name | Type | Description |

                        | --- | --- | --- |

                        | id | int | The ID of this option. |

                        | option_id | int | The ID of the option to which this
                        option set connects. |

                        | option_set_id | int | The ID of this option set. |

                        | display_name | string | The friendly name used for
                        this option set. |

                        | sort_order | int | The order in which the option is
                        displayed on the product page. |

                        | is_required | boolean | Specifies whether customer is
                        required to enter a value for this option before they
                        can add the product to their cart. |

                        | option | resource | The connected option. |

                        | values | object_array | Array of values for the
                        connected option. |
                      header:
                        anchor: v2-option-set-options-object-properties
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## List Option Set Options 


                        Gets the options associated with an option set. (Default
                        sorting is by option id, from lowest to highest.)



                        >`GET
                        /stores/{store_hash}/v2/option_sets/{option_set_id}/options`



                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 option_set_options are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | Page | int |
                        /api/v2/option_sets/{option_set_id}/options?page={number}
                        |

                        | Limit | int |
                        /api/v2/option_sets/{option_set_id}/options?limit={count}
                        |


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": 43,
                            "option_id": 18,
                            "option_set_id": 14,
                            "display_name": "Size",
                            "sort_order": 0,
                            "is_required": true,
                            "option": {
                              "url": "https://example.com/api/v2/options/18.json",
                              "resource": "/options/18"
                            },
                            "values": [
                              {
                                "label": "XS",
                                "sort_order": 0,
                                "value": "XS",
                                "option_value_id": 68
                              },
                              {
                                "label": "S",
                                "sort_order": 1,
                                "value": "S",
                                "option_value_id": 69
                              },
                              {
                                "label": "M",
                                "sort_order": 2,
                                "value": "M",
                                "option_value_id": 70
                              },
                              {
                                "label": "L",
                                "sort_order": 3,
                                "value": "L",
                                "option_value_id": 71
                              },
                              {
                                "label": "XL",
                                "sort_order": 4,
                                "value": "XL",
                                "option_value_id": 72
                              }
                            ]
                          },
                          {
                            "id": 44,
                            "option_id": 3,
                            "option_set_id": 14,
                            "display_name": "Color",
                            "sort_order": 1,
                            "is_required": true,
                            "option": {
                              "url": "https://example.com/api/v2/options/3.json",
                              "resource": "/options/3"
                            },
                            "values": [
                              {
                                "label": "Silver",
                                "sort_order": 1,
                                "value": "#cccccc",
                                "option_value_id": 7
                              },
                              {
                                "label": "Black",
                                "sort_order": 2,
                                "value": "#000000",
                                "option_value_id": 8
                              },
                              {
                                "label": "Purple",
                                "sort_order": 3,
                                "value": "#700170",
                                "option_value_id": 9
                              }
                            ]
                          }
                        ]

                        ```
                      header:
                        anchor: v2-list-option-set-options
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get an Option Set Option 


                        Gets an option set option.


                        >`GET
                        /stores/{store_hash}/v2/option_sets/{option_set_id}/options/{id}`


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 4,
                          "option_id": 5,
                          "option_set_id": 2,
                          "display_name": "Clock Speeds (CPU)",
                          "sort_order": 0,
                          "is_required": true,
                          "option": {
                            "url": "https://example.com/api/v2/options/5.json",
                            "resource": "/options/5"
                          }
                        }

                        ```
                      header:
                        anchor: v2-get-a-option-set-option
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create an Option Set Option 


                        Creates a new option associated with an option set.


                        >`POST
                        /stores/{store_hash}/v2/option_sets/{option_set_id}/options`


                        ### Read-only Properties 


                        The following properties of the option set option are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   id

                        *   option_set_id

                        *   values

                        *   option


                        ### Requirements 


                        The following properties of the option set option are
                        required. The request won’t be fulfilled unless these
                        properties are valid.


                        *   option_id


                        ### Request 


                        Example request object:


                        ```

                        {
                          "option_id": 10,
                          "display_name": "Choose a color",
                          "sort_order": 1,
                          "is_required": true
                        }

                        ```


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 2,
                          "option_id": 10,
                          "option_set_id": 1,
                          "display_name": "Choose a color",
                          "sort_order": 1,
                          "is_required": true,
                          "option": {
                            "url": "https://example.com/api/v2/options/10.json",
                            "resource": "/options/10"
                          }
                        }

                        ```
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Update an Option Set Option 


                        Updates an existing option set option.



                        >`PUT
                        /stores/{store_hash}/v2/option_sets/{option_set_id}/options/{id}`



                        ### Read-only Properties 


                        The following properties of the option set option are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   id

                        *   option_id

                        *   option_set_id

                        *   values

                        *   option


                        ### Requirements 


                        The following properties of the option set option are
                        required. The request won’t be fulfilled unless these
                        properties are valid.


                        ### Request 


                        Example request object:


                        ```

                        {
                          "display_name": "Pick a color...",
                          "sort_order": 2,
                          "is_required": false
                        }

                        ```


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 2,
                          "option_id": 10,
                          "option_set_id": 2,
                          "display_name": "Pick a color...",
                          "sort_order": 2,
                          "is_required": false,
                          "option": {
                            "url": "https://example.com/api/v2/options/10.json",
                            "resource": "/options/10"
                          }
                        }

                        ```
                      header:
                        anchor: v2-update-a-option-set-option
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete an Option Set Option 


                        Deletes an option belonging to an option set.


                        >`DELETE
                        /stores/{store_hash}/v2/option_sets/{option_set_id}/options/{id}`
                      header:
                        anchor: v2-delete-a-option-set-option
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete Multiple Option Set Options 


                        Deletes multiple options associated with an option set.


                        >`DELETE
                        /stores/{store_hash}/v2/option_sets/{option_set_id}/options`



                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 option_set_options are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | Page | int |
                        /api/v2/option_sets/{option_set_id}/options?page={number}
                        |

                        | Limit | int |
                        /api/v2/option_sets/{option_set_id}/options?limit={count}
                        |
                      header:
                        anchor: v2-delete-all-option-set-options
              - title: Option Values
                route:
                  path: /v2-option-values
                data:
                  blocks:
                    - type: text
                      data: >-
                        ## Option Value Object – Properties 


                        | Name | Type | Description |

                        | --- | --- | --- |

                        | id | int | A unique, read-only value that identifies
                        this option value. |

                        | option_id | int | A read-only value identifying the
                        option to which this option value is assigned. |

                        | label | string | The name of the label. Cannot be the
                        same as the label of another value already assigned to
                        the option. |

                        | sort_order | int |

                        | value | text | Acceptable values generally depend on
                        the option type, as defined in the option:<br><br> `RB`:
                        string to be displayed to the customer.<br> `RT`: string
                        to be displayed to the customer.<br> `S`: string to be
                        displayed to the customer.<br> `P`: product ID;<br>
                        `PI`: product ID.<br> `CS`: one of the following color
                        values – a hexadecimal color code to create a color
                        option (e.g., `#0f0000`);<br> a CSS 2.1 color name
                        (e.g., `blue`);<br> up to three hexadecimal color codes
                        and/or color names, separated by pipe symbols (e.g.,
                        <code>#FF0000&#124;lime&#124;#0000FF</code>);<br>  a URI
                        to an image to create a texture (e.g.,
                        `http://store.com/images/myimg.png`);<br> or the name of
                        an image file in the store's WebDAV `import` folder 
                        (e.g., `myimg.png`). |

                        | is_default | boolean | Whether or not this value is
                        selected by default. For each option, only one option
                        value can be selected by default. |
                      header:
                        anchor: v2-option-values
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## List Option Values 


                        Gets the values belonging to an option. (Default sorting
                        is by option-value id, from lowest to highest.)



                        >`GET
                        /stores/{store_hash}/v2/options/{option_id}/values`


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 option_values are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | Page | int |
                        /api/v2/options/{option_id}/values?page={number} |

                        | Limit | int |
                        /api/v2/options/{option_id}/values?limit={count} |


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": 1,
                            "option_id": 3,
                            "label": "Silver",
                            "sort_order": 2,
                            "value": "#cccccc",
                            "is_default": true
                          },
                          {
                            "id": 2,
                            "option_id": 3,
                            "label": "Black",
                            "sort_order": 1,
                            "value": "#000000",
                            "is_default": false
                          }
                        ]

                        ```
                      header:
                        anchor: v2-list-option-values
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get an Option Value 


                        Gets an option value.


                        >`GET
                        /stores/{store_hash}/v2/options/{option_id}/values/{id}`


                        #### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 9,
                          "option_id": 3,
                          "label": "Purple",
                          "sort_order": 3,
                          "value": "#700170",
                          "is_default": false
                        }

                        ```
                      header:
                        anchor: v2-get-an-option-value
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create an Option Value 


                        Creates a new option value.



                        >`POST
                        /stores/{store_hash}/v2/options/{option_id}/values`


                        ### Read-only Properties 


                        The following properties of the option value are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   id

                        *   option_id


                        ### Requirements 


                        The following properties of the option value are
                        required. The request won’t be fulfilled unless these
                        properties are valid.


                        *   label

                        *   value


                        ### Notes 


                        To maximize system performance, BigCommerce caps the
                        total number of values per option at 250. IF the option
                        has 250 values and you try to create another one,
                        BigCommerce will return a 403 error.


                        When you POST an `is_default`property of `true`, all
                        other option values on the parent option will have their
                        `is_default` property set to `false`.


                        ### Request 


                        Example request object:


                        ```

                        {
                          "label": "white",
                          "sort_order": 0,
                          "value": "#FFFFFF",
                          "is_default": true
                        }

                        ```


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 68,
                          "option_id": 3,
                          "label": "white",
                          "sort_order": 0,
                          "value": "#FFFFFF",
                          "is_default": true
                        }

                        ```
                      header:
                        anchor: v2-create-an-option-value
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Update an Option Value 


                        Updates an existing option value.



                        >`PUT
                        /stores/{store_hash}/v2/options/{option_id}/values/{id}`



                        ###  Read-only Properties


                        The following properties of the option value are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   id

                        *   option_id


                        #### Requirements 


                        The following properties of the option value are
                        required. The request won’t be fulfilled unless these
                        properties are valid.


                        ###  Notes


                        When you PUT an `is_default` property of `true`, all
                        other option values on the parent option will have their
                        `is_default` property set to `false`.


                        ### Request 


                        Example request object:


                        ```

                        {
                          "label": "whitish",
                          "sort_order": 1,
                          "value": "#FFFFEF",
                          "is_default": true
                        }

                        ```


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 68,
                          "option_id": 3,
                          "label": "whitish",
                          "sort_order": 1,
                          "value": "#FFFFEF",
                          "is_default": true
                        }

                        ```
                      header:
                        anchor: v2-update-an-option-value
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete an Option Value 


                        Deletes an option value.


                        >`DELETE
                        /stores/{store_hash}/v2/options/{option_id}/values/{id}`
                      header:
                        anchor: v2-delete-an-option-value
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete Multiple Option Values 


                        Deletes multiple values belonging to an option.


                        >`DELETE
                        /stores/{store_hash}/v2/options/{option_id}/values`


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 option_values are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | Page | int |
                        /api/v2/options/{option_id}/values?page={number} |

                        | Limit | int |
                        /api/v2/options/{option_id}/values?limit={count} |
                      header:
                        anchor: v2-delete-multiple-option-values
                  children: []
              - title: Product Images
                route:
                  path: /v2-product-images
                data:
                  blocks:
                    - type: html
                      data: "<h1>Product Images</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#v2-product-image-object-propertes\">Product Image Object – Properties </a></li>\n        <li><a href=\"#v2-list-product-images\">List Product Images</a></li>\n        <li><a href=\"#v2-get-a-product-image\">Get a Product Image </a></li>\n        <li><a href=\"#v2-get-a-count-of-product-images\">Get a Count of Product Images</a></li>\n        <li><a href=\"#v2-create-a-product-image\">Create a Product Image </a></li>\n        <li><a href=\"#v2-update-a-product-image\">Update a Product Image</a></li>\n        <li><a href=\"#v2-delete-a-product-image\">Delete a Product Image</a></li>\n        <li><a href=\"#v2-delete-multiple-product-images\">Delete Multiple Product Images</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Product Image Object – Properties 


                        | Name | Type | Description |

                        | --- | --- | --- |

                        | id | int |

                        | product_id | int | The ID of the product to which the
                        image belongs. |

                        | image_file | string | When specifying a product image,
                        the `image_file` should be specified as either: a path
                        to an image already uploaded via WebDAV to the import
                        directory (with the path relative to the import
                        directory); or a URL to an image accessible on the
                        internet. |

                        | is_thumbnail | boolean | If true, the image is used as
                        the product's thumbnail. |

                        | sort_order | int | The order in which the image will
                        be displayed on the product page. Lower integers will
                        give the image a higher priority. If the image is given
                        a lower priority, then when updating, all images with a
                        `sort_order` the same or greater than the image's new
                        `sort_order` value will have their `sort_order`
                        reordered. |

                        | description | text | The description for the image |

                        | date_created | date |
                      header:
                        anchor: v2-product-image-object-propertes
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## List Product Images 


                        Gets the images associated with a product. (Default
                        sorting is by image id, from lowest to highest.)



                        >GET
                        /stores/{store_hash}/v2/products/{product_id}/images


                        #### Filters 


                        There are no filter parameters specific to product
                        images.


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 product_images are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | page | int |
                        /api/v2/products/{product_id}/images?page={number} |

                        | limit | int |
                        /api/v2/products/{product_id}/images?limit={count} |


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": 247,
                            "product_id": 32,
                            "image_file": "sample_images/in_123__14581.jpg",
                            "zoom_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.1280.1280.jpg?c=1",
                            "thumbnail_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.386.513.jpg?c=1",
                            "standard_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.220.290.jpg?c=1",
                            "tiny_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.44.58.jpg?c=1",
                            "is_thumbnail": true,
                            "sort_order": 0,
                            "description": null,
                            "date_created": "Mon, 24 Sep 2012 01:14:30 +0000"
                          },
                          {
                            "id": 248,
                            "product_id": 32,
                            "image_file": "sample_images/in_122__93910.jpg",
                            "zoom_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/248/in_122__93910.1393831046.1280.1280.jpg?c=1",
                            "thumbnail_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/248/in_122__93910.1393831046.386.513.jpg?c=1",
                            "standard_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/248/in_122__93910.1393831046.220.290.jpg?c=1",
                            "tiny_url": "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/248/in_122__93910.1393831046.44.58.jpg?c=1",
                            "is_thumbnail": false,
                            "sort_order": 1,
                            "description": null,
                            "date_created": "Mon, 24 Sep 2012 01:17:14 +0000"
                          }
                        ]

                        ```
                      header:
                        anchor: v2-list-product-images
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Product Image 


                        Gets a product image.



                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/images/{id}`



                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 248,
                          "product_id": 32,
                          "image_file": "sample_images/in_122__93910.jpg",
                          "zoom_url": "https://cdn.bcapp.dev/bcapp/et7xe3pz/products/32/images/248/in_122__93910.1393831046.1280.1280.jpg?c=1",
                          "thumbnail_url": "https://cdn.bcapp.dev/bcapp/et7xe3pz/products/32/images/248/in_122__93910.1393831046.386.513.jpg?c=1",
                          "standard_url": "https://cdn.bcapp.dev/bcapp/et7xe3pz/products/32/images/248/in_122__93910.1393831046.220.290.jpg?c=1",
                          "tiny_url": "https://cdn.bcapp.dev/bcapp/et7xe3pz/products/32/images/248/in_122__93910.1393831046.44.58.jpg?c=1",
                          "is_thumbnail": false,
                          "sort_order": 1,
                          "description": null,
                          "date_created": "Mon, 24 Sep 2012 01:17:14 +0000"
                        }

                        ```
                      header:
                        anchor: v2-get-a-product-image
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Count of Product Images 


                        Gets a count of the number of product images in the
                        store.



                        >`GET /stores/{store_hash}/v2/products/images/count`



                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "count": 105
                        }

                        ```
                      header:
                        anchor: v2-get-a-count-of-product-images
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create a Product Image 


                        Creates a new product image.



                        >`POST
                        /stores/{store_hash}/v2/products/{product_id}/images`



                        ### Read-only Properties 


                        The following properties of the product image are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   id

                        *   date_created

                        *   product_id


                        ### Requirements 


                        The following properties of the product image are
                        required. The request won’t be fulfilled unless these
                        properties are valid.


                        *   image_file


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 116,
                          "product_id": 29,
                          "image_file": "p/022/astonishing-x-men-1-100k__36562.jpg",
                          "is_thumbnail": false,
                          "sort_order": 0,
                          "description": "",
                          "date_created": "Fri, 21 Dec 2012 18:54:04 +0000"
                        }

                        ```
                      header:
                        anchor: v2-create-a-product-image
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Update a Product Image 


                        Updates an existing product image.



                        >`PUT
                        /stores/{store_hash}/v2/products/{product_id}/images/{id}`



                        ### Read-only Properties 


                        The following properties of the product image are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   id

                        *   product_id

                        *   date_created


                        ### Requirements 


                        The following properties of the product image are
                        required. The request won’t be fulfilled unless these
                        properties are valid.


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 118,
                          "product_id": 30,
                          "image_file": "k/392/ud2vk0n1l0zcfr7gtlqi__43888.png",
                          "is_thumbnail": false,
                          "sort_order": 1,
                          "description": "",
                          "date_created": "Fri, 21 Dec 2012 19:01:03 +0000"
                        }

                        ```
                      header:
                        anchor: v2-update-a-product-image
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete a Product Image 


                        Deletes a product image.



                        >`DELETE
                        /stores/{store_hash}/v2/products/{product_id}/images/{id}`
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete Multiple Product Images 


                        Deletes multiple product images.


                        >`DELETE
                        /stores/{store_hash}/v2/products/{product_id}/images`


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 `product_images` are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | Page | int |
                        /api/v2/products/{product_id}/images?page={number} |

                        | Limit | int |
                        /api/v2/products/{product_id}/images?limit={count} |
                      header:
                        anchor: v2-delete-multiple-product-images
                  children: []
              - title: Product Options
                route:
                  path: /v2-product-options
                data:
                  blocks:
                    - type: html
                      data: "<h1>Product Options</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#v2-product-option-object-properties\"> Product Options Object – Properties</a></li>\n        <li><a href=\"#v2-list-product-options\">List Product Options</a></li>\n        <li><a href=\"#v2-get-a-product-option\">Get a Product Option</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: |-
                        ## Product Options Object – Properties 

                        | Title | Name | Type | Description |
                        | --- | --- | --- | --- |
                        | `id` | `int` |
                        | `option_id` | `int` |
                        | `display_name` | `string` |
                        | `sort_order` | `int` |
                        | `is_required` | `boolean` |
                      header:
                        anchor: v2-product-option-object-properties
                    - type: text
                      data: >-
                        ## List Product Options


                        Gets the options associated with a product.


                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/options`


                        ### Pagination


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250\. If a
                        limit isn’t provided, up to 50 product_options are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | `page` | int |
                        `/api/v2/products/{product_id}/options?page={number}` |

                        | `limit` | int |
                        `/api/v2/products/{product_id}/options?limit={count}` |


                        ### Response


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": 13,
                            "option_id": 8,
                            "display_name": "iPod Capacities",
                            "sort_order": 0,
                            "is_required": true
                          },
                          {
                            "id": 14,
                            "option_id": 9,
                            "display_name": "Accessories",
                            "sort_order": 1,
                            "is_required": false
                          }
                        ]

                        ```
                      header:
                        anchor: v2-list-product-options
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Product Option


                        Gets an option associated with a product.


                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/options/{id}`


                        ### Response


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 14,
                          "option_id": 9,
                          "display_name": "Accessories",
                          "sort_order": 1,
                          "is_required": false
                        }

                        ```
                      header:
                        anchor: v2-get-a-product-option
              - title: Product Reviews
                route:
                  path: /v2-product-reviews
                data:
                  blocks:
                    - type: html
                      data: "<h1>Product Reviews</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#v2-product-review-object-properties\">Product Review Object – Properties</a></li>\n        <li><a href=\"#v2-list-product-reviews\">List Product Reviews </a></li>\n        <li><a href=\"#v2-get-a-product-review\">Get a Product Review </a></li>\n        <li><a href=\"#v2-create-a-product-review\">Create a Product Review </a></li>\n        <li><a href=\"#v2-update-a-product-review\">Update a Product Review </a></li>\n        <li><a href=\"#v2-delete-a-product-review\">Delete a Product Review </a></li>\n        <li><a href=\"#v2-delete-all-product-reviews\">Delete All Product Reviews </a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Product Review Object – Properties 


                        | Name | Type | Description |

                        | --- | --- | --- |

                        | id | int | Unique database ID for this product review.
                        Read-only. |

                        | product_id | int | The ID of the product to which this
                        review belongs. Read-only. |

                        | author | string | The review's author, displayed on
                        the storefront. |

                        | date_created | date | RFC 2822 date that specifies the
                        creation time of the review. (If not specified, will use
                        the current time.) |

                        | rating | int | A whole number from 1–5, specifying the
                        product's rating in this review. |

                        | title | string | The review's title, displayed on the
                        storefront. |

                        | review | text | The full text of the review, displayed
                        on the storefront. |

                        | status | int | A status indicator. 0="Pending", 1=
                        "Approved", 2="Disapproved". |
                      header:
                        anchor: v2-product-review-object-properties
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## List Product Reviews 


                        Gets the reviews associated with a product. (Default
                        sorting is by review id, from lowest to highest.)


                        >`GET /stores/{store_hash}/v2/products/{id}/reviews`



                        ### Filters 


                        There are no filter parameters specific to product
                        reviews. 


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 product_reviews are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | page | int |
                        /api/v2/products/{product_id}/reviews?page={number} |

                        | limit | int |
                        /api/v2/products/{product_id}/reviews?limit={count} |


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": 190,
                            "product_id": 5310,
                            "author": "John Doe",
                            "date_created": "Wed, 12 Dec 2012 06:00:00 +0000",
                            "title": "My experience with the widget",
                            "review": "This widget worked for me, but might not work for everyone.",
                            "rating": 4,
                            "status": 1
                          },
                          {
                            "id": 191,
                            "product_id": 5310,
                            "author": "Jane Doe",
                            "date_created": "Tue, 12 Nov 2013 06:00:00 +0000",
                            "title": "Great product, slow shipping",
                            "review": "Took two weeks to arrive",
                            "rating": 3,
                            "status": 1
                          },
                          {
                            "id": 192,
                            "product_id": 5310,
                            "author": "Jimmy Doe",
                            "date_created": "Fri, 14 Dec 2012 06:00:00 +0000",
                            "title": "Worked for me!",
                            "review": "I thought this product was pretty good",
                            "rating": 5,
                            "status": 1
                          }
                        ]

                        ```
                      header:
                        anchor: v2-list-product-reviews
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Product Review 


                        Gets a product review.



                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/reviews/{id}`


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 190,
                          "product_id": 5310,
                          "author": "John Doe",
                          "date_created": "Wed, 12 Dec 2012 06:00:00 +0000",
                          "title": "My experience with the widget",
                          "review": "This widget worked for me, but might not work for everyone.",
                          "rating": 4,
                          "status": 1
                        }

                        ```
                      header:
                        anchor: v2-get-a-product-review
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create a Product Review 


                        Creates a new product review. 


                        ### Notes 


                        The `review` property is the review's text. The `rating`
                        property must be a whole number between 1–5. If the
                        optional `date_created` property is not specified, it
                        defaults to the current date/time. If the optional
                        "status" property is not specified, it defaults to 0
                        [`Pending`]. Other allowable values are 1 [`Approved`]
                        or 2 [`Disapproved`].)



                        >`POST
                        /stores/{store_hash}/v2/products/{product_id}/reviews`



                        ### Read-only Properties 


                        The following properties of the product review are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   id

                        *   product_id


                        ### Requirements 


                        The following properties of the product review are
                        required. The request won’t be fulfilled unless these
                        properties are valid.


                        *   author

                        *   title

                        *   review

                        *   rating


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 8,
                          "product_id": 32,
                          "author": "Jimmy Doe",
                          "date_created": "Tue, 05 Mar 2013 06:00:00 +0000",
                          "title": "Worked for me!",
                          "review": "I thought this product was pretty good",
                          "rating": 5,
                          "status": 0
                        }

                        ```
                      header:
                        anchor: v2-create-a-product-review
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Update a Product Review 


                        Updates an existing product review. Your request may
                        update any of the properties that are writeable for the
                        Create (POST) operation.



                        >`PUT
                        /stores/{store_hash}/v2/products/{product_id}/reviews/{id}`



                        ### Read-only Properties 


                        The following properties of the product review are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   id

                        *   product_id


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 8,
                          "product_id": 32,
                          "author": "Jimmy Doe",
                          "date_created": "Tue, 05 Mar 2013 06:00:00 +0000",
                          "title": "Worked for me!",
                          "review": "I thought this product was pretty good",
                          "rating": 5,
                          "status": 1
                        }

                        ```
                      header:
                        anchor: v2-update-a-product-review
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete a Product Review 


                        Deletes a specified product review. (If successful, this
                        will typically return a `204 No Content`.)


                        >`DELETE
                        /stores/{store_hash}/v2/products/{product_id}/reviews/{id}`
                      header:
                        anchor: v2-delete-a-product-review
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete All Product Reviews 


                        Deletes all reviews for the specified product. (If
                        successful, this will typically return a `204 No
                        Content`.)



                        >`DELETE
                        /stores/{store_hash}/v2/products/{product_id}/reviews`
                      header:
                        anchor: v2-delete-all-product-reviews
              - title: Product Rules
                route:
                  path: /v2-product-rules
                data:
                  blocks:
                    - type: html
                      data: "<h1>Product Reviews</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#v2-product-rule-object-properties\">Product Rule Object – Properties </a></li>\n        <li><a href=\"#v2-list-product-rules\">List Product Rules</a></li>\n        <li><a href=\"#v2-get-a-product-rule\">Get a Product Rule </a></li>\n        <li><a href=\"#v2-get-a-count-of-product-rules\">Get a Count of Product Rules </a></li>\n        <li><a href=\"#v2-create-a-product-rule\">Create a Product Rule</a></li>\n        <li><a href=\"#v2-update-a-product-rule\"> Update a Product Rule</a></li>\n        <li><a href=\"#v2-delete-a-product-rule\">Delete a Product Rule</a></li>\n        <li><a href=\"#v2-delete-multiple-product-rules\">Delete Multiple Product Rules</a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: >-
                        ## Product Rule Object – Properties 


                        | Name | Type | Description |

                        | --- | --- | --- |

                        | id | int | The ID of the rule. |

                        | product_id | int | The ID of the product to which the
                        rule belongs. |

                        | sort_order | int | The order in which the rule will be
                        displayed on the product page. Lower integers will give
                        the rule a higher priority. If the rule is given a lower
                        priority, then when updating, all rules with a
                        `sort_order` the same or greater than the rule's new
                        `sort_order` value will have their `sort_order`
                        reordered. |

                        | is_enabled | boolean | If set to `true`, the rule will
                        be evaluated when a customer configures a product's
                        options. |

                        | is_stop | boolean | If set to `true` and the rule
                        evaluates to `true`, no more rules with a higher
                        `sort_order` will be processed. |

                        | price_adjuster | object | If a product option rule
                        specifies a change to the price based on an option, the
                        `price_adjuster` object will consist of two name/value
                        pairs. The first pair is named `adjuster` and contains
                        one of the following values: `relative`, `percentage`,
                        or `absolute`. The `percentage` value causes the price
                        to vary based on either a positive or negative
                        percentage. The `relative` value causes the price to
                        vary by either a positive or negative monetary amount.
                        The `absolute` value resets the price, so it should
                        always be a positive number. The second pair is named
                        `adjuster_value` and contains a decimal value
                        representing one of the following: the amount to add or
                        subtract from the price, the percentage by which the
                        price should change, or the new price (as per the
                        `adjuster` setting). If the product option rule does not
                        specify a change to the price based on size or color,
                        `price_adjuster` will be null. |

                        | weight_adjuster | object | If a product option rule
                        specifies a change to the weight based on an option, the
                        `weight_adjuster` object will consist of two name/value
                        pairs. The first pair is named `adjuster` and contains
                        one of the following values: `relative` or `absolute`.
                        The `relative` value causes the weight to vary by either
                        a positive or negative amount. The `absolute` value
                        resets the weight, so it should always be a positive
                        number. The second pair is named `adjuster_value` and
                        contains a decimal value representing one of the
                        following: the amount to add or subtract from the weight
                        or the new weight (as per the `adjuster` setting). If
                        the product option rule does not specify a change to the
                        price based on size or color, `weight_adjuster` will be
                        null. |

                        | is_purchasing_disabled | boolean | If true this rule
                        prohibits purchasing the product with the configured
                        option values. |

                        | purchasing_disabled_message | string | The message to
                        display if the rule disabled purchasing the product. |

                        | is_purchasing_hidden | boolean | If true the rule
                        hides the options on the product. Setting this to true
                        has no effect if the rule is based on an SKU or has
                        conditions from multiple product options. |

                        | image_file | string | When specifying a product rule,
                        the image_file should be specified as either: A path to
                        an rule already uploaded via FTP in the import directory
                        and the path should be relative from the import
                        directory. It can be a URL to an rule accessible on the
                        internet. |

                        | conditions | array | The conditions array can contain
                        one or more objects. Each object inside the array
                        contains three name/value pairs, but at least one value
                        will be missing at any given time. If a
                        `product_option_id` value is present, then a
                        `option_value_id` must also be present. If
                        `product_option_id` and `option_value_id` values are
                        present, then a `sku_id` value must not be present. This
                        also holds true in the reverse, where if a `sku_id`
                        value exists, values for the `product_option_id` and
                        `option_value_id` cannot exist. NOTE: if you can use a
                        SKU value, this is preferred for simplicity. Empty
                        values are represented as `null`. If multiple objects
                        are included in the array, the software runs through
                        them using an AND/OR logic. Objects with identical
                        `product_option_id` values will be linked with an OR.
                        Objects with different `product_option_id` values will
                        be linked with an AND. When one object contains a
                        `sku_id` value and the other contains
                        `product_option_id` and `option_value_id` values, they
                        will be linked with an AND. Two objects which both
                        contain `sku_id` values will be linked with an OR. |
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## List Product Rules 


                        Gets the collection of rules associated with a product.
                        (Default sorting is by rule id, from lowest to highest.)



                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/rules`


                        ### Filters 


                        There are no filter parameters specific to product
                        rules.


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 product_rules are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | page | int |
                        /api/v2/products/{product_id}/rules?page={number} |

                        | limit | int |
                        /api/v2/products/{product_id}/rules?limit={count} |


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": 1,
                            "product_id": 3,
                            "sort_order": 0,
                            "is_enabled": true,
                            "is_stop": false,
                            "price_adjuster": null,
                            "weight_adjuster": null,
                            "is_purchasing_disabled": false,
                            "purchasing_disabled_message": "",
                            "is_purchasing_hidden": false,
                            "image_file": "attribute_rule_images/1_source.jpg",
                            "conditions": [
                              {
                                "product_option_id": 4,
                                "option_value_id": 7,
                                "sku_id": null
                              }
                            ]
                          },
                          {
                            "id": 2,
                            "product_id": 3,
                            "sort_order": 1,
                            "is_enabled": true,
                            "is_stop": false,
                            "price_adjuster": null,
                            "weight_adjuster": null,
                            "is_purchasing_disabled": false,
                            "purchasing_disabled_message": "",
                            "is_purchasing_hidden": false,
                            "image_file": "attribute_rule_images/2_source.jpg",
                            "conditions": [
                              {
                                "product_option_id": 4,
                                "option_value_id": 8,
                                "sku_id": null
                              }
                            ]
                          }
                        ]

                        ```
                      header:
                        anchor: v2-list-product-rules
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Product Rule 


                        Gets a single product rule.


                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/rules/{id}`


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 2,
                          "product_id": 3,
                          "sort_order": 1,
                          "is_enabled": true,
                          "is_stop": false,
                          "price_adjuster": null,
                          "weight_adjuster": null,
                          "is_purchasing_disabled": false,
                          "purchasing_disabled_message": "",
                          "is_purchasing_hidden": false,
                          "image_file": "attribute_rule_images/2_source.jpg",
                          "conditions": [
                            {
                              "product_option_id": 4,
                              "option_value_id": 8,
                              "sku_id": null
                            }
                          ]
                        }

                        ```
                      header:
                        anchor: v2-get-a-product-rule
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Count of Product Rules 


                        Gets a count of the number of product rules in the
                        store.


                        >`GET /stores/{store_hash}/v2/products/rules/count`


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "count": 3
                        }

                        ```
                      header:
                        anchor: v2-get-a-count-of-product-rules
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create a Product Rule 


                        Creates a new product rule.



                        >`POST
                        /stores/{store_hash}/v2/products/{product_id}/rules`



                        ### Read-only Properties 


                        The following properties of the product rule are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   id

                        *   product_id


                        ### Requirements 


                        The following properties of the product rule are
                        required. The request won’t be fulfilled unless these
                        properties are valid.


                        *   conditions


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 10,
                          "product_id": 3,
                          "sort_order": 1,
                          "is_enabled": true,
                          "is_stop": false,
                          "price_adjuster": null,
                          "weight_adjuster": null,
                          "is_purchasing_disabled": false,
                          "purchasing_disabled_message": "",
                          "is_purchasing_hidden": false,
                          "image_file": "attribute_rule_images/2_source.jpg",
                          "conditions": [
                            {
                              "product_option_id": 4,
                              "option_value_id": 8,
                              "sku_id": null
                            }
                          ]
                        }

                        ```
                      header:
                        anchor: v2-create-a-product-rule
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Update a Product Rule 


                        Updates an existing product rule. 


                        ### Notes 


                        If you include a conditions object array, its contents
                        will be appended to any existing conditions. This
                        operation does not overwrite existing conditions.


                        >`PUT
                        /stores/{store_hash}/v2/products/{product_id}/rules/{id}`


                        ### Read-only Properties 


                        The following properties of the product rule are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   id

                        *   product_id


                        ### Requirements 


                        There are no property requirements for updating a
                        product rule.


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "id": 2,
                          "product_id": 3,
                          "sort_order": 2,
                          "is_enabled": true,
                          "is_stop": false,
                          "price_adjuster": null,
                          "weight_adjuster": null,
                          "is_purchasing_disabled": false,
                          "purchasing_disabled_message": "",
                          "is_purchasing_hidden": false,
                          "image_file": "attribute_rule_images/2_source.jpg",
                          "conditions": [
                            {
                              "product_option_id": 4,
                              "option_value_id": 8,
                              "sku_id": null
                            }
                          ]
                        }

                        ```
                      header:
                        anchor: v2-update-a-product-rule
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete a Product Rule 


                        Deletes a product rule.


                        >`DELETE
                        /stores/{store_hash}/v2/products/{product_id}/rules/{id}`
                      header:
                        anchor: v2-delete-a-product-rule
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete Multiple Product Rules 


                        Deletes multiple product rules.


                        >`DELETE
                        /stores/{store_hash}/v2/products/{product_id}/rules`


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 `product_rules` are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | page | int |
                        /api/v2/products/{product_id}/rules?page={number} |

                        | limit | int |
                        /api/v2/products/{product_id}/rules?limit={count} |
                      header:
                        anchor: v2-delete-multiple-product-rules
                  children: []
              - title: Product Videos
                route:
                  path: /v2-product-videos
                data:
                  blocks:
                    - type: html
                      data: "<h1>Product Videos</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n        <li><a href=\"#v2-product-video-object-properties\">Videos Object – Properties </a></li>\n        <li><a href=\"#v2-list-product-videos\">List Product Videos</a></li>\n        <li><a href=\"#v2-get-a-product-video\">Get a Product Video </a></li>\n        <li><a href=\"#v2-get-a-count-of-product-videos\">Get a Count of Product Videos </a></li>\n        <li><a href=\"#v2-create-a-product-video\">Create a Product Video</a></li>\n        <li><a href=\"#v2-update-a-product-video\">Update Product Video Metadata</a></li>\n        <li><a href=\"#v2-delete-a-product-video\">Delete a Product Video </a></li>\n        <li><a href=\"#v2-delete-all-product-videos\">Delete All Product Videos </a></li>\n\t</ul>\n</div>"
                    - type: text
                      data: |-
                        ## Videos Object – Properties 

                        | Name | Type | Description |
                        | --- | --- | --- |
                        | id | string | ID of this video. |
                        | product_id | int | ID of the associated product. |
                        | sort_order | int | Sort order for this video. |
                        | name | string | Name for this video. |
                      header:
                        anchor: v2-product-video-object-properties
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## List Product Videos 


                        Gets the videos associated with a product.


                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/videos`


                        ### Pagination 


                        Parameters can be added to the URL query string to
                        paginate the collection. The maximum limit is 250. If a
                        limit isn’t provided, up to 50 `product_videos` are
                        returned by default.


                        | Parameter | Type | Example |

                        | --- | --- | --- |

                        | page | int |
                        /api/v2/products/{product_id}/videos?page={number} |

                        | limit | int |
                        /api/v2/products/{product_id}/videos?limit={count} |


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        [
                          {
                            "id": "UmhvxsOwhqk",
                            "product_id": 30,
                            "sort_order": 0,
                            "name": "X-Men Evolution: Season 1, Episode 1"
                          }
                        ]

                        ```
                      header:
                        anchor: v2-list-product-videos
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Get a Product Video 


                        Gets a product video.


                        >`GET
                        /stores/{store_hash}/v2/products/{product_id}/videos/{id}`
                      header:
                        anchor: v2-get-a-product-video
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Get a Count of Product Videos 


                        Gets a count of the number of product videos in the
                        store.


                        >`GET /stores/{store_hash}/v2/products/videos/count`


                        ### Response 


                        Example JSON returned in the response:


                        ```

                        {
                          "count": 0
                        }

                        ```
                      header:
                        anchor: v2-get-a-count-of-product-videos
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Create a Product Video 


                        Adds a link to a YouTube video to a product.



                        >`POST
                        /stores/{store_hash}/v2/products/{product_id}/videos`


                        ### Read-only Properties 


                        The following properties of the product video are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   id

                        *   product_id


                        ### Requirements 


                        The following properties of the product video are
                        required. The request won’t be fulfilled unless these
                        properties are valid.


                        *   url


                        ### Notes 


                        Only YouTube videos are supported. To create a new
                        video, pass the full `url` in the request body.


                        ### Request 


                        Example request object:


                        ```

                        {
                          "url": "https://www.youtube.com/watch?v=4wZ3ZG_Wams"
                        }

                        ```
                      header:
                        anchor: v2-create-a-product-video
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Update Product Video Metadata 


                        Edit the metadata of a product video.


                        >`PUT
                        /stores/{store_hash}/v2/products/{product_id}/videos/{id}`


                        ### Read-only Properties 


                        The following properties of the product video are
                        read-only. If one or more of these properties are
                        included in the request, it will be rejected.


                        *   id

                        *   product_id


                        ### Requirements 


                        There are no required properties when updating a product
                        video. 


                        ### Notes 


                        The `name`, `sort_order` and `url` properties of the
                        product video are editable.


                        Posting a new `url` will update the `id` of the video to
                        reference the new video.


                        ### Request 


                        Example request object:


                        ```

                        {
                          "name": "New video title",
                          "sort_order": 2
                        }

                        ```
                      header:
                        anchor: v2-update-a-product-video
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete a Product Video 


                        Delete a product video.


                        >`DELETE
                        /stores/{store_hash}/v2/products/{product_id}/videos/{id}`
                      header:
                        anchor: v2-delete-a-product-video
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Delete All Product Videos 


                        Deletes all videos belonging to a product.


                        >`DELETE
                        /stores/{store_hash}/v2/products/{product_id}/videos`
                      header:
                        anchor: v2-delete-all-product-videos
          config:
            sidebar:
              token: v2
theme:
  background: '#3550b6'
logo: >-
  https://cdn6.bigcommerce.com/s-qtmbtj/product_images/uploaded_images/bigcommerce-logomark-darkbg.png
meta:
  title: ''
