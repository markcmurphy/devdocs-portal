{
  "title": "Dev Center",
  "header": {
    "nav": {
      "left": [
        {
          "title": "API Docs"
        },
        {
          "title": "Theme Docs",
          "path": ""
        },
        {
          "title": "Tools & Resources",
          "path": ""
        },
        {
          "title": "Changelog",
          "path": ""
        }
      ],
      "center": [],
      "right": [
        {
          "title": "My Apps",
          "path": ""
        },
        {
          "title": "Create Account",
          "path": ""
        }
      ]
    }
  },
  "pages": {
    "/api-docs": {
      "title": "API Docs",
      "data": {
        "blocks": [
          {
            "type": "text",
            "data": "API Docs Home Page"
          }
        ],
        "children": [
          {
            "title": "Getting Started",
            "route": {
              "path": "/getting-started"
            },
            "data": {
              "children": [
                {
                  "title": "About the API",
                  "route": {
                    "path": "/about-api"
                  },
                  "data": {
                    "children": [
                      {
                        "title": "V2 versus V3",
                        "route": {
                          "path": "/v2-v3"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>V2 or V3</h1>"
                            },
                            {
                              "type": "text",
                              "data": "<div id=\"no-index\">\n\n### On this page\n* Advantages of V3 over V2\n* Products on V3\n\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Advantages of V3 over V2\n\nThere are fewer API calls for most tasks. Subresources can be included in a resources response. Such as creating a product with variants and custom fields in one API call. \n\nThere are `meta` objects on all resources, so pagination is easier. \n\nMetafields have been added so data can be stored against each object. This can be specific for your application or visible to other applications. \n\nThe V3 API has been optimized for performance. This allows for data to be synched quickly. \n"
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Products on V3\n\n### Variants\n\nEvery purchasable entity in the catalog is now a variant. Including the product itself. This enables enhanced flows around inventory management, such as the ability to solely use the variants endpoint to manage inventory levels. For more on variants see [Variants](/api-docs/catalog/products/product-variant-options).\n\nIn V3 a variant needs to be created for every combination. In V2 you could create an SKU with a subset of product options.\n\nIt is recommened to create products using V3 as BigCommerce starts to move operations to the V3 API. \n\n### Interoperability between V2 and V3\n\nWhen a product option is created on V2 and assigned to a product. Trying to edit the option using the V3 API returns a 422 error. \n\n```\n{\n    \"status\": 422,\n    \"title\": \"The product is currently associated with an option set, please remove it before editing an option or modifier.\",\n    \"type\": \"https://developer.bigcommerce.com/api#api-status-codes\",\n    \"errors\": {\n        \"product_id\": \"The product is currently associated with an option set, please remove it before editing an option or modifier.\"\n    }\n}\n```\n\nThis happens since options on V2 are created globally then assigned to the products. The V3 API has variant options which are assigned at the product level. The way to fix is to remove the option in the Control Panel or Delete using the API, the re-create the options using variants. \n\n### Options and Modifiers\n\nThere is now a clear separation of [options that define variants](/api-docs/catalog/products/product-variant-options), versus [options that are modifiers of a variant](/api-docs/catalog/products/modifier-options). This enables us to simplify the creation and management of variant prices and modifier adjusters. It removes the need to use complex rules, in all but the most extreme cases.\n\nOptions and modifiers can also be attached directly to the product, without the requirement to create an option set beforehand.\n\nCreating Options on V2 has several steps:\n1. Create the product\n2. Create the options\n3. Create an option set\n4. Assign the option set to the product\n5. Create any modifiers such as price adjustment based on sku.\n\nCreating Products and Variants on V3:\n1. Create the product with variant in one call\n2. Add modifiers such as price adjustment based on sku\n\nVariants can be included with the GET request to lower the number of API calls being made.  ?include=variants\n\nThere is an endpoint just for creating a [Catalog Tree](/api-docs/api-reference/v3-api/catalog/getcatalogsummary)."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## What's not in V3\n\nIn v3, you attach options directly to products. So option sets are not required, and v3 includes no endpoint to manage options sets. However, v3 will respect option sets that have been attached via v2 or the control panel.\n\nMost resources that are available in V3 are not in V2. \n\n### Complex Rules\n\nMost of the use cases for complex rules can be solved by variants and modifier options. We recommend using variants as best practice.\n\n### Product Rules \nAny variant created in v3 with non-null core properties (price, weight, image, purchasability) will create a rule under the hood. The same goes for modifier adjusters. These will show in v2 as product rules, and any edits to them will be shared across API versions.\n\n### Option Sets\nIn our control panel’s Add/Edit Product section, any products created by v3 will not have an option set applied, but merchants can still edit the options. If the merchant edits/chooses an option set, any variants will be removed from the product. "
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Recommendations\nWhen the resource is available in V3, it is best to use the V3 endpoint. \n\nWe created a handy [cheat sheet]() that lists all the differences between V2 and V3 of the API. "
                            }
                          ]
                        }
                      },
                      {
                        "title": "Cheat Sprint",
                        "route": {
                          "path": "/cheat-sheet-v2-v3"
                        },
                        "data": {
                          "blocks": []
                        }
                      },
                      {
                        "title": "Authentication",
                        "route": {
                          "path": "/authentication"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Authentication</h1>"
                            },
                            {
                              "type": "text",
                              "data": "<div id=\"no-index\">\n\n### On this page\n* Getting OAuth Credentials\n* Revoking an OAuth Token\n* Getting a Client ID and Secret\n* OAuth Scopes\n\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Getting OAuth Credentials\nYou can create and manage OAuth tokens in the BigCommerce control panel by creating an API account, as described below. (Only the store owner can create API accounts; accounts are limited to 50 per store.)\n\nTo create your API account and its corresponding token, use the following steps:\n1. Log into the store, using the store owner’s username/password.\n2. Select Advanced Settings.\n3. Select API Accounts. This will display the Store API Accounts page.\n4. Select Create API Account. This will display the Create API Account page shown above.\n5. In the Name field, summarize the purpose for which you will use these credentials. (This name is for internal use only, so assign any name that you will recognize.)\n6. In the OAuth Scopes section, select at least the minimal scopes your app will require.\n7. Select Save at the page’s lower right-hand corner.\n\nA successful save will display a pop-up, containing the API credentials that your app will need to run authenticated requests – your Client ID and Access Token. A .txt file containing the same credentials will (on most browsers) automatically download to your computer. This file also contains the base API Path for your store, preconfigured for the v3 API.\n\nFrom a security perspective, these credentials are sensitive – please treat them with the same caution that you would treat a private key or root password."
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1536087816482",
                              "header": {
                                "title": "Create an API Account"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "type": "warning",
                                "body": "There is no way to re-display this pop-up after you select Done to dismiss it. \nSo make sure you store your credentials – either by copying/pasting the contents of each field out of the pop-up or by keeping the downloaded .txt file. Otherwise, you will need to repeat all the above steps to generate new credentials. "
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Revoking an OAuth Token\n\nTo revoke an OAuth token, use the following steps to delete the associated API account:\n1. Log into the store, using the store owner’s username/password.\n2. Select Advanced Settings.\n3. Select API Accounts. This will display the Store API Accounts page, shown below.\n4. In the Actions column at right, select the trash-can button next to the account you want to delete."
                            },
                            {
                              "type": "callout",
                              "data": {
                                "type": "error",
                                "title": "Delete Carefully",
                                "body": "There is no undo, so be sure before you delete an account. You can also use the checkboxes on the left side to delete multiple accounts at once – but be especially careful when using this option."
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Client ID and Client Secret\n\n* The Client ID value uniquely identifies your app and you will need to pass it in the header of all your requests to the Stores API.\n* The Client Secret value is a secret that your app and BigCommerce share. You do need to pass the Client Secret value more than once during the app installation sequence. Thereafter, BigCommerce uses it to sign payloads in load, uninstall, and remove user requests, and your app uses it to verify the signature to ensure that the request is coming from BigCommerce.\n\nTo get a Client ID and Client Secret you will need to log in to the developer portal. \n\n1. Click on Create an app\n2. Give your app a name. This will only be visible to you.\n3. A pop up box will display showing Your Profile, App Summary and Category. \n4. Click on Step 3 - Technical. Fill out the App Features sections with App Tyle, Multiples Users Callback URLs and OAuth Scopes. You read more about this page in the dev portal article. \n5. Then in the lower right-hand corner of the popup box click Update & Close.\n6. A new pop up will show asking if you want to change the OAuth Scopes. Click Confirm Update.\n7. It will take you back to the home page and your app will be listed. Click View Client ID. \n8. Here you can get your Client ID and Client Secret. \n9. The Client ID and Client Secret here can be accessed again by clicking on View Client ID at any time. If you delete the app, there is no way to recover them."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Oauth Scopes\n\nAll OAuth scopes except `default` have `read_only` scopes that allow only `GET` and `HEAD` requests.\n\n| Scope GUI Name | Resources  | Description |\n|---|---|---|\n| Content | store_v2_content | View and modify store content |\n||| [/v2/pages](/api/v2/#pages) |\n||| [/v2/blog](/api/v2/#blog-posts) |\n||| [/v2/redirects](/api/v2/#redirects) |\n||| [/v3/widgets](/api/v3/widgets.html) |\n||store_v2_content_read_only| View Site Content |\n||| [/v2/pages](/api/v2/#pages) |\n||| [/v2/blog](/api/v2/#blog-posts) |\n||| [/v2/redirects](/api/v2/#redirects) |\n||| [/v3/widgets](/api/v3/widgets.html) |\n| Checkout Content | store_content_checkout | View and modify content on checkout pages |\n||| [/v3/scripts](/api/v3/scripts.html) |\n| Customers | store_v2_customers | View and modify customer information |\n||| [/v2/customers](/api/v2/#customers) |\n||| [/v2/customer_groups](api/v2/#customer-groups) |\n||| [/v3/customers/subscribers](/api/v3/customers.html#customers-api) |\n||store_v2_customers_read_only|View customer information |\n||| [/v2/customers](/api/v2/#customers) |\n||| [/v2/customer_groups](api/v2/#customer-groups) |\n||| [/v3/customers/subscribers](/api/v3/customers.html#customers-api) |\n| Customers Login | store_v2_customers_login | Log in any of your customers to your storefront |\n||| [Access to the Customer Login API](/api/v2/#customer-login-api)\n| Information & Settings| store_v2_information | View and modify general store information and settings |\n||| [/v2/shipping/methods](/api/v2/#list-shipping-methods) |\n||| [/v2/shipping/zones](/api/v2/#list-shipping-methods) |\n||| [/v2/shipping/carrier](/api/v2/#shipping-carrier-connections) |\n|| store_v2_information_read_only | View general store information and settings |\n||| [/v2/shipping/methods](/api/v2/#list-shipping-methods) |\n||| [/v2/shipping/zones](/api/v2/#list-shipping-methods) |\n||| [/v2/shipping/carrier](/api/v2/#shipping-carrier-connections) |\n||| [/v2/payments/methods](/api/v2/#payment-methods) |\n||| [/v2/tax_classes](/api/v2/#tax-class-object-properties) |\n||| [/v2/store](/api/v2/#get-a-store-39-s-information) |\n| Marketing | store_v2_marketing | View and modify marketing information |\n||| [/v2/coupons](/api/v2/#coupons) |\n||| [/v2/gift_certificates](/api/v2/#gift-certificates) |\n||| [/v2/banners](/api/v2/#banners) |\n|| store_v2_marketing_read_only | View marketing information |\n||| [/v2/coupons](/api/v2/#coupons) |\n||| [/v2/gift_certificates](/api/v2/#gift-certificates) |\n||| [/v2/banners](/api/v2/#banners) |\n| Orders | store_v2_orders | View and modify orders |\n||| [/v2/orders](/api/v2/#get-an-order) |\n||| [/v2/order_statuses](/api/v2/#order-statuses) |\n|| store_v2_orders_read_only | View orders |\n||| [/v2/orders](/api/v2/#get-an-order) |\n||| [/v2/order_statuses](/api/v2/#order-statuses) |\n| Order Transactions | store_v2_transactions_read_only | View order transactions |\n||| [/v3/orders/{id}/transactions](/api/v3/orders.html#orders-api) |\n| Products | store_v2_products | View and modify products |\n||| [/v3/catalog](/api/v3/catalog.html) |\n||| [/v3/pricelists](/api/v3/pricelists.html) |\n||| [/v2/option_sets](/api/v2/#product-options) |\n||| [/v2/categories](/api/v3/catalog.html#getcategories) |\n||| [/v2/options](/api/v3/catalog.html#getoptions) |\n||| [/v2/brands](/api/v3/catalog.html#getbrands) |\n||| [/v2/products](/api/v3/catalog.html#getproducts) |\n|| store_v2_products_read_only | View products |\n||| [/v3/catalog](/api/v3/catalog.html) |\n||| [/v3/pricelists](/api/v3/pricelists.html) |\n||| [/v2/option_sets](/api/v2/#product-options) |\n||| [/v2/categories](/api/v3/catalog.html#getcategories) |\n||| [/v2/options](/api/v3/catalog.html#getoptions) |\n||| [/v2/brands](/api/v3/catalog.html#getbrands) |\n||| [/v2/products](/api/v3/catalog.html#getproducts) |\n| Themes | store_themes_manage | View and modify themes |\n||| [/v3/themes](/api/v3/themes.html) |\n|| store_themes_read_only | View themes |\n||| [/v3/themes](/api/v3/themes.html) |\n| Carts | store_cart | View and Modify carts |\n||| [/v3/carts](/api/v3/cart.html) |\n|| store_cart_read_only | View Carts |\n||| [/v3/carts](/api/v3/cart.html) |"
                            }
                          ]
                        }
                      },
                      {
                        "title": "API Requests",
                        "route": {
                          "path": "/api-requests"
                        },
                        "data": {}
                      },
                      {
                        "title": "Best Practices",
                        "route": {
                          "path": "/best-practices"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Best Practices</h1>"
                            },
                            {
                              "type": "text",
                              "data": "<div id=\"no-index\">\n\n### On this page\n* Ensure that your integration is up-to-date\n* Use webhooks effectively within your application\n* Thread your requests to the BigCommerce API\n* Marketplace\n* Rate Limits\n* Making Requests in Parallel\n* Platform Limits\n\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Ensure that your integration is up-to-date\n\nBigCommerce frequently enhances its core product and is actively developing v3 API endpoints. By using the newest API version, you will ensure that your app has access to the latest resources. You will also be better positioned to provide a user experience consistent with what merchants will see in their BigCommerce store’s control panel. To stay up to date bookmark our [changelog](http://). "
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Use webhooks effectively within your application\n\nTo keep data in your application up-to-date, webhooks provide a great alternative to doing periodic checks. In order to register a webhook event that your application can listen for, you will need to use OAuth (not legacy “Basic Authentication”).\n\nBigCommerce will send a partial payload when a subscribed event is triggered, with minimal identifying details (such as the order ID when an order is created). Your application could use the order ID returned in the payload to make a subsequent API request for the full order details.."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Thread your requests to the BigCommerce API\n\nIn order to quickly update information in the API, you can use threaded requests. Threaded requests allow you to send multiple requests at one time. They can come from a different open connection or multiple requests to the same resource. \n\nThe [BigCommerce Ruby API](http://) client is thread-safe: It satisfies the need for multiple threads to access the same shared data, and the need for a shared piece of data to be accessed by only one thread at any given time. These attributes can reduce the total time that your app will require to complete a series of requests."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Marketplace Apps\n\nMerchants often have more than one person working on their store. BigCommerce allows additional users to access your app when the store owner has granted them appropriate permissions. The requirements for supporting multi-user access are:\n* Tokens must be stored against the store_hash and not against user info.\n* Within Developer Portal > My Apps, you must enable the app’s Technical > Multiple Users option.\n\nIn the payload returned when a user launches an app, users are distinguished by `owner_email` versus `user_email`. If these two emails match, the user is the store owner.\n\nIf you wish to enable user removal, you can do by filling in the app’s Technical > Remove User Callback URL field. (Enabling user removal is optional.)\nFor more advanced implementations, you can enable the store owner to grant specific permissions to different non-admin users. For example, person1@email.com could be restricted to editing product inventory but not seeing orders. If you decide to include this feature in your app, it’s a great feature to advertise."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Rate Limits\nApps that authenticate with OAuth are rate-limited, based on a quota that is refreshed every few seconds. The maximum quota for a store will vary depending on the store’s plan.\n\nEach request to the API consumes one available request from the quota. When an app hits the quota limit, subsequent requests are rejected until the quota is refreshed.\n\nThe store’s overall quota is distributed across all apps that are accessing the store at a given time. This provides fairness for multiple apps that are accessing the API simultaneously, preventing a single greedy app from consuming the store’s entire quota by itself. The quota might adjust as additional clients connect or disconnect while you’re running requests. "
                            },
                            {
                              "type": "text",
                              "data": "### API Rate Limits\n\nEnterprise plans and Enterprise Sandboxes (Enterprise-Test): Unlimited (7mil / 30sec)\n\nPro plans: 80k per hour (450 / 30sec)\n\nAll other sandboxes (Dev/Partner/Employee): 20k per hour (150 / 30sec)\n\nPlus & Standard plans: 20k per hour (150 / 30sec)\n\nEach request to the API consumes one available request from the quota. When an app hits the quota limit, subsequent requests are rejected until the quota is refreshed.\n\nThe store’s overall quota is distributed across all apps that are accessing the store at a given time. This provides fairness for multiple apps that are accessing the API simultaneously."
                            },
                            {
                              "type": "text",
                              "data": "### Playing Nicely with the Platform\n\nEvery API response’s HTTP headers give you full visibility into your position in the rate-limiting algorithm:\n```\n{\nContent-Encoding →gzip\nContent-Type →application/json\nDate →Thu, 29 Mar 2018 15:59:24 GMT\nLast-Modified →Tue, 13 Mar 2018 18:00:26 +0000\nTransfer-Encoding →chunked\nVary →Accept-Encoding\nX-Bc-Store-Version →7.6.0\nX-Rate-Limit-Requests-Left →16101494\nX-Rate-Limit-Requests-Quota →16101495\nX-Rate-Limit-Time-Reset-Ms →30000\nX-Rate-Limit-Time-Window-Ms →30000\n}\n```\n\n| Name | Description |\n| -- | -- |\n| X-Rate-Limit-Time-Window-Ms| Shows the size of your current rate-limiting window. In this case, it’s 5000 milliseconds.|\n| X-Rate-Limit-Time-Reset-Ms | Shows how many milliseconds are remaining in the window. In this case, 3000 milliseconds – so, 3000 milliseconds after this request, the API quota will be refreshed. |\n| X-Rate-Limit-Requests-Quota | Shows how many API requests are allowed in the current window for your client. In this case, the number is 25 requests. |\n| X-Rate-Limit-Requests-Left | Details how many remaining requests your client can make in the current window before being rate-limited. In this case, you would expect to be able to make 6 more requests in the next 3000 milliseconds; on the 7th request within 3000 milliseconds, you would be rate-limited and would receive an HTTP 429 response.|\n\nIf your request to the API triggers a [429 Too Many Requests](http://) response, then you know you’ve been limited.\n\nThe rate-limited response will contain the `X-Rate-Limit-Time-Reset-Ms` header, specifying a time (in milliseconds) that your client must wait before its quota has refreshed. Retry the request after this time has elapsed, and your API service will resume as normal.\n"
                            },
                            {
                              "type": "text",
                              "data": "### Example of 429 Status Code\n\nWhen you see a response with a HTTP 429 status code, your client shouldn’t make any further requests until your quota has refreshed:\n\n```\nHTTP/1.1 429 Too Many Requests\n    \tDate: Mon, 03 Feb 2017 20:36:00 GMT\n    \tContent-Type: application/json\n    \tX-Rate-Limit-Time-Reset-Ms: 15000\n```\n\n\nParse the `X-Rate-Limit-Time-Reset-Ms` header to determine how long you have to wait. In this case, it would be 15000 milliseconds.\nYour client can sleep on the specified interval:\n\n```\n   $milliseconds = $response->getHeader(\"X-Rate-Limit-Time-Reset-Ms\");\n    usleep($milliseconds * 1000);\n```\n\n\nAfter waiting for the given number of milliseconds, you can go back to making API requests."
                            },
                            {
                              "type": "text",
                              "data": "### Making Requests in Parallel\nYou might wish to increase the amount of work your application can do in a given unit of time, by sending multiple HTTP requests to the BigCommerce API in parallel. This is perfectly acceptable.\nHowever, your application should monitor the rate-limiting headers to avoid an HTTP 429 response. Methods for doing this might include:\n* Slowing your rate of API requests when X-Rate-Limit-Requests-Left is nearing zero.\n* Determining an acceptable average rate of requests, by dividing X-Rate-Limit-Requests-Quota by X-Rate-Limit-Time-Window-Seconds, and then self-throttling to that rate."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Platform Limits\n\nBigCommerce does have a limit on the number of products, category, brands etc that can be in a store. See [Platform Limits](https://forum.bigcommerce.com/s/article/Platform-Limits#product-catalog-limits) for more details"
                            }
                          ]
                        }
                      },
                      {
                        "title": "Filtering",
                        "route": {
                          "path": "/filtering"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Filtering</h1>"
                            },
                            {
                              "type": "text",
                              "data": "## Filters\n\nTo filter collections down to a particular set of items, you can add filters as URL query parameters.\n\nThese are the most common filter options available for the V3 API. \n\n| Operator | Expression  | Example | \n|--|--|--|\n| Equals/equivalency | attribute=value  | `/v3/catalog/products?price=10` `/v3/catalog/products?name=My Product` |\n| Greater than or equal to (for numbers or dates) | attribute:min=value  | `/v3/catalog/products?price:min=10` |\n| Less than or equal to (for numbers or dates) | attribute:max=value | `/v3/catalog/products?price:max=10` |\n| Greater than (for numbers or dates)| attribute:greater=value | `/v3/catalog/products?price:greater=10` |\n| Less than (for numbers or dates) | attribute:less=value | `/v3/catalog/products?price:less=10` |\n| SQL LIKE operator (for strings) | attribute:like=pattern | `/v3/catalog/categories?name:like=Shirts` |\n| SQL IN operator (for arrays) | attribute:in=csv,list,of,values | `/v3/catalog/products?categories:in=123,456` |\n| SQL NOT IN operator (for arrays) | attribute:not_in=csv,list,of,values | `/v3/catalog/products?categories:not_in=123,456` |\n\n<p>Available filters vary by endpoint. Refer to the GET method for an endpoint to see a list of available filters.</p>\n<p> When using DELETE filter parameters can be passed in. This is not required for all. Refer to the endpoint to see the requirements for each. </p>\n\n### Includes\n\nSome endpoints allow an `?include` parameter to include subresources and other information in the primary GET response for a parent object.\n\nThis allows you to save API calls by getting more information in a response, however it may slow down your response.\n\nAs an example, you can include a product's variants and images with the product response: `/v3/catalog/products?include=variants,images`\n\nAvailable includes vary by endpoint. Refer to the GET method for an endpoint to see a list of available includes.\n\n### Including and Excluding fields\n\nSome endpoints use `?include_fields` and `?exclude_fields`. \n\n`include_fields` will return ONLY the specified fields in the response. `exclude_fields` will omit the specified fields from the response.\n\nYou can specify any field that is available as apart of the object. Excluding fields you don't care about (especially large fields like descriptions) can speed up your API request response time.\n\n\n#### Example\n\n`https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products?include_fields=name,price`\n\nHere product name and price have been included.\n\n```\n{\n    \"data\": [\n        {\n            \"id\": 77,\n            \"name\": \"Red printed scarf\",\n            \"price\": 12\n        }    \n    ]\n}    \n```"
                            }
                          ]
                        }
                      },
                      {
                        "title": "Client Libraries",
                        "route": {
                          "path": "/client-libraries"
                        },
                        "data": {}
                      }
                    ]
                  }
                },
                {
                  "title": "API Status Codes",
                  "route": {
                    "path": "/api-status-codes"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>API Status Codes</h1>"
                      },
                      {
                        "type": "text",
                        "data": "The API responds to requests with different HTTP status codes depending on the result from the request. Error responses might also include an error message in the body to assist the client in resolving the problem."
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## 2xx Success \n\nThese codes are returned for requests that were understood and processed successfully.\n\n| Code | Definition | Purpose |\n| --- | --- | --- |\n| **200** | **OK** | For successful `GET` and `PUT` requests. |\n| **201** | **Created** | For a successful `POST` request. |\n| **202** | **Accepted** | For a request that resulted in a scheduled task being created to perform the actual request. |\n| **204** | **No Content** | For a successful request that produced no response (such as `DELETE` requests). |\n"
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "### 3xx Redirection \n\nThese codes are returned for requests that require the client to take further action.\n\n| Code | Definition | Purpose |\n| --- | --- | --- |\n| **301** | **Moved Permanently** | When the API routes have changed (unlikely), or if the incoming request is not secure (`http`), the request will be redirected to the secure (`https`) version. |\n| **304** | **Not Modified** | This response will be sent if the request included an `If-Modified-Since` header, but the resource has *not* been modified since the specified date. Please refer to individual resources' documentation regarding support for the `If-Modified-Since` header. |"
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "### 4xx Client Error \n\nThese codes are returned for requests that could not be processed due to problems with the request or the data.\n\n| Code | Definition | Purpose |\n| --- | --- | --- |\n| **400** | **Bad Request** | Issued when a malformed request was sent. Examples are: |\n|||*   Invalid syntax\n|||*   Missing required data\n|||*   Webhook requests missing `Content-Type` in the HTTP header.\n|\n| **401** | **Unauthorized** | This response is sent when your client failed to provide credentials or its credentials were invalid. |\n| **403** | **Forbidden** | Returned when permissions do not allow the operation. To correct:\n|||*   Check your app in `My Apps` to review the OAuth scopes you requested, and check whether they support the request that you made.\n|||*   Changes to the store owner's account (including a change to the email address) can also cause this error. Roll back those changes to correct it.\n|||*   This error can also occur when your request exceeds a limit imposed on the resource in question. For example, a store cannot exceed 16,000 categories. For more information, see the corresponding resource's documentation.\n|\n| **404** | **Not Found** | When a particular resource doesn’t exist or couldn’t be found. |\n| **405** | **Method Not Allowed** | The resource was found, but doesn’t support the request method. Issued when either a specific method isn’t yet implemented on a resource, or the resource doesn’t support the method at all. For example, a `PUT` on `/orders` is invalid, but a `PUT` on `/orders/{_id_}` is valid. |\n| **406** | **Not Acceptable** | When the client specifies a response content type in the `Accept` header that is not supported. |\n| **409** | **Conflict** | A change requested by the client is being rejected, due to a condition imposed by the server. The exact reasons for this response will vary from one resource to the next. An example might be attempting to delete a category whose deletion would cause products to be orphaned. Additional information about the conflict, and about how to resolve it, might be available in the response's `details` section. |\n| **413** | **Request Entity Too Large** | When the client requests too many objects. For example, the `limit` parameter exceeded the maximum. |\n| **415** | **Unsupported Media Type** | Returned due to issues with the `Content-Type` header. Examples of such issues are:\n|||*   The header specifies an unsupported content type.\n|||*   The header is missing (except with the webhooks resource, which returns a 400 in this case).\n |\n| **422** | **Missing or Invalid Data** | The request cannot be processed either because it omitted required fields, or because it contained invalid data. See the response for more details. |\n| **429** | **Too Many Requests** | When an OAuth client exceeds the [rate limit](/api/#rate-limits-oauth) for API requests to a store. |"
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "### 5xx Server Error \n\nThese codes are returned for requests that could not be processed due to an internal error with the API or server.\n\n| Code | Definition | Purpose |\n| --- | --- | --- |\n| **500** | **Internal Server Error** | When an error has occurred within the API. |\n| **501** | **Not Implemented** | When a request method is sent that is not supported by the API (e.g., `TRACE`, `PATCH`). |\n| **503** | **Service Unavailable** | When the store is marked as “Down for Maintenance,” or the store is being upgraded to a new version. |\n| **507** | **Insufficient Storage** | When the store has reached a limitation for the resource, according to their BigCommerce plan (e.g., 500-product limit). |\n| **509** (Deprecated) | **Bandwidth Limit Exceeded** | Returned to apps using Basic Authentication that have exceeded their [rate limits](). |"
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Troubleshooting\n\n### Why am I getting 4XX/5XX errors from the API?\n* A 401 error indicates that your API call is being received but isn’t properly authenticating with our API. Either credentials are absent from the request, or we are receiving invalid credentials. Steps to resolve this:\n\t* Double-check your Access Token and Client ID.\n\t* If your credentials are valid, try sending a cURL request with the same credentials. This will test whether the problem is something within your application, rather than a credentials issue.\n* For 403 errors , there are 4 common causes:\n\t* Your app lacks the appropriate scopes to make the request that it sent. Resolution: Check the OAuth scopes that you requested, either in control panel > API Accounts or in Developer Portal’s My Apps section.\n\t* The store-owner account has changed on a store that installed your app. Resolution: This might require a reinstall by the new store owner, or a rollback of the store-owner changes.\n\t* Your API request exceeded an enforced platform limit. Among other limits, each store is limited to a maximum of 30,000 brands and 16,000 categories. For more information about these limits, see either the API resource you are using or our support documentation on platform limits.\n* Check your URL paths. An incorrect path can sometimes trigger a 403 error.\n* 500 errors almost always indicate an internal server error on BigCommerce’s side. Steps to resolve these:\n\t* Re-attempt the request three to five times, with increasing delays of at least a minute between attempts.\n\t* Check our status page.\n\t* 500 errors can also be caused by particularly expensive API calls. To avoid these errors on stores with very complex data, try reducing how many objects you are requesting. In the v2 API, you can request fewer objects by using ?limit={count}. In either the v2 or v3 API, you can request fewer objects by excluding certain fields or only requesting certain fields.\n\t* \n### Why am I getting an HTTP 204 or 301/302 response to an API request?\n* Double-check the URL to which you are making an API request. If the response code is 301/302, try the WWW or non-WWW version of the URL."
                      }
                    ]
                  }
                },
                {
                  "title": "Partner Information",
                  "route": {
                    "path": "/partner"
                  },
                  "data": {
                    "children": [
                      {
                        "title": "Becoming A Partner",
                        "route": {
                          "path": "/becoming-a-partner"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Becoming a Partner</h1>"
                            },
                            {
                              "type": "text",
                              "data": "<div id=\"no-index\">\n\n### On this page\n\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "The following sections outline the steps required to become a vendor of Single-Click Apps on the BigCommerce platform. Doing so requires a partnership application, but acceptance will authorize you to provide best-of-breed solutions to the fast-growing online businesses we host.\n\n## Apply to the Technology Partner Program\n\nBefore you can submit an app to the BigCommerce App Marketplace (which merchants also know as our “app store”), you must become an official Partner. BigCommerce offers app developers free sandbox stores through its Technology Partner Program. To be approved as a partner, you will need:\n\n* A website.\n* Intent to offer your app publicly.\n* Ability to support users of your app.\n* Evidence of expertise in app development.\n\nOnce approved, you will receive one or more emails listing your partner credentials and next steps. Your Partner ID will be required to submit your app for App Marketplace consideration. If you do not receive these credentials by email, please contact <a href=\"mailto:partnersupport@bigcommerce.com\">partnersupport@bigcommerce.com</a>."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Types of Apps We Are looking for\n\nWe are looking for all kinds of apps. We want technology that provides an outstanding user experience for BigCommerce Merchants."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Getting a Sandbox Store\n\nTo build a Marketplace app or hidden app, you will need to have a sandbox store, a developer account at devtools.bigcommerce.com and be accepted as a BigCommerce partner. This account is separate from the account created when signing up for the store. A sandbox store cannot process transactions and is for developing and testing apps without the 15-day time time limit of a trial store. "
                            },
                            {
                              "type": "callout",
                              "data": {
                                "type": "warning",
                                "body": "A sandbox store is not required for app development, but after the 15-day trial period, the store is erased along with the data and a new store will need to be created. Applying to be a partner and getting a sandbox store is best practice. "
                              }
                            },
                            {
                              "type": "text",
                              "data": "### Create a Sandbox Store\n\n1. Navigate to the [BigCommerce Pricing page](https://www.bigcommerce.com/pricing/).\n2. Select START YOUR FREE TRIAL.\n3. Where prompted for an email address, enter the same email that you used when applying to become a Technology Partner. \n4. Select START YOUR TRIAL.\n5. In the trial store setup form, enter a store name, password, and other details. Then select CREATE YOUR STORE.\n6. Navigate to your Partner Portal > Support > Create a Case > Issue Type = Portal and Membership. In the case description, enter your new sandbox store’s friendly URL (for example: http://your-store-name.mybigcommerce.com) and request conversion to a Sandbox. We will flag this as a sandbox store. This will ensure your continued access to the store, as opposed to the normal 15-day trial. This can take around two days.\n7. When you log into your new store, use the same email that you used at step 3 above."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## App Store Approval Requirements"
                            },
                            {
                              "type": "text",
                              "data": "### Prerequisites\n\nMake sure you’ve applied and been approved for our [Technology Partner Program](https://partners.bigcommerce.com/English/register_email.aspx) before you’re ready to submit your app - you’ll need a valid Partner ID to do so. You’ll also need to accept the Terms & Conditions in the [Partner Portal](https://partners.bigcommerce.com/English/) before we can publish your app.\n\n### General Requirements\n\n-   Support resources should be available throughout the app experience, including in your onboarding flow and the app’s dashboard.\n    \n-   Make sure to reference BigCommerce using the proper formatting. You can visit our [Media Kit](https://www.bigcommerce.com/press/media-kit/) for any BigCommerce branding assets need.\n    \n-   The app and app listing should make no references to competitor platforms.\n\n-   Use the brand name you’ve given your app for your app title throughout your app content. This listing name should be a concise title for easy identification and should not include additional taglines or descriptors. The name will always appear alongside your summary, so there’s no need to muddy your app’s branding with duplicate content when that tagline is already displayed with it!  \n      \n    - If your solution is a connector to a specific third-party service, or you’re offering only a specific feature, make sure to include both the name of the third party service or feature and your company name​ (Ex: “Marketplace by BigCommerce”, “Search by BigCommerce”), with your company name following the feature.\n    \n-   Your app, including any storefront components, should be compatible with all [browsers](https://developer.bigcommerce.com/api/#supported-browsers) that the BigCommerce platform supports.\n\n### Listing Requirements\n\n#### Name\n- The brand name for your app integration. \n    \n#### App Images\n- Your primary app logo should be 350x130px (or larger at this ratio) with a white background and dark branding in the foreground. The logo should only include branding, no taglines necessary.\n- Your app icon will be included on the main app detail page and the sidebar in the BigCommerce control panel once the app is installed. This should be a square 200x200px image.\n- Your alternate logo will be used if your app is featured on the homepage carousel of the Marketplace. This image should be 259x158px (or larger at this ratio) with a dark background and white or light branding in the foreground. The logo should only include branding, no taglines necessary.\n    \n#### Pricing & Categorization\n- Select one of our pre-formatted pricing options to call out your app’s starting price. If you offer a forever-free plan, choose the “Free” option. If your app does not fit one of our formatted options, specify your details in a few words in the “Other” selection.\n- Choose the most appropriate category for your app."
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "If you need to specify more detail on your pricing options, save it for your app description.  "
                              }
                            },
                            {
                              "type": "text",
                              "data": "#### App Details\n    \n-   Summary - A short tagline description of your app that will be used on your app card in category and search results within the Marketplace. 128 characters max.\n    \n-   Description - A more in-depth value proposition for your listing, including how your solution works, why your solution stands out in its category, and why a merchant should choose you over other competitors. Avoid using fluff or buzzwords, as this field will not be indexed for search. 200 words max recommended.\n    \n-   Features - Up to 5 separate feature headings and short descriptions to highlight stand-out details about your app.\n    \n-   Guides - Links to your User and Installation Guides as a reference for existing users and prospects.\n    \n\n#### Partner Information\n    \n\n-   A Support email and website for users to reach out as needed. These will be publicly visible on the Marketplace, so make sure to stay away from personal emails or non-support URLs.\n    \n-   Links to your privacy policy and terms of service.\n    \n### Installation\n\n-   Apps should be Single-Click and use our OAuth token exchange flow to authenticate the user\n    \n-   Single-Click does not mean everything  completed in one click, but that authentication is handled in that click - other tasks can be handled post-auth with the user\n    \n-   When the app is installed, a styled HTML page must be returned in the iframe of the BigCommerce control panel - this content cannot be blank and must follow our [user-interface constraints](https://).\n    \n-   During the OAuth handshake, be sure to store the user’s token against their store hash - rather than their email address - to avoid any problems with ownership changes or multi-user support."
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "If your app cannot meet these requirements, please reach out to <a href=\"mailto:partnersupport@bigcommerce.com\">partnersupport@bigcommerce.com</a> in order to discuss the potential for a Connector app listing. In the majority of cases, a Single-Click app will be the more appropriate solution and put your integration on par with other Marketplace partners, but exceptions may be made under certain circumstances"
                              }
                            },
                            {
                              "type": "text",
                              "data": "### Functionality\n\n-   Your app must work as intended, be free of defects, and not conflict with or break any default BigCommerce functionality, including the BigCommerce storefront and checkout.\n    \n-   Utilize [any V3 API resources](https://developer.bigcommerce.com/api/v3/) that are currently available for the content you need from a BigCommerce store.\n    \n-   The dashboard and callback URLs for your app should operate strictly over HTTPS using a valid SSL certificate.\n    \n-   Apps should offer [multi-user support](https://developer.bigcommerce.com/api/#multi-user-support) so that permissions for the app can be distributed by the store owner to additional users, from the BigCommerce control panel.\n    \n-   Any apps that process transactions or handle credit card data will need to pass a PCI Compliance review with our Security team, and also be compatible with our Optimized One-Page Checkout.\n    \n-   Avoid copy/paste for storefront code - use the [V3 Scripts API](https://developer.bigcommerce.com/api/v3/#/reference/scripts) to programmatically inject code snippets into a store’s Script Manager and storefront theme.\n    \n-   If your app requires payment, you’ll need to collect payment from the user within your app. More info on [monetizing your app here](https://developer.bigcommerce.com/api/#monetizing-your-app).  \n\n### Recommendations\n\n-   Have a form to fill out for new users? We recommend auto-filling user input fields with data from the [Store Information API resource](https://developer.bigcommerce.com/api/v2/#store-information-reference), which already contains much of the info you might need from a new user.\n    \n-   No account approval process needed for your app? Consider automatically generating accounts for stores that install your app and don’t match an existing store in your database.\n    \n-   Require login on launch? Use the information in the BigCommerce payload to your callback URL to authenticate the user without asking for a username and password each time.\n    \n-   Want to share user testimonials? Add a link to your full case study in the Case Studies field, with a title and short description.\n\n\n### Technical\n\nYou will have already provided much of the information during the initial [app registration](/api/#app-quick-start). Before submitting your app, please review the information that you initially provided, to make sure that all of the URIs are publicly available, fully qualified, and served over TLS/SSL. Also, ensure that your app is requesting all of the scopes that it needs now, as well as the scopes that you anticipate needing in the future.\n\nBefore submission, you must also provide detailed testing instructions, as well as test accounts."
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "Changing scopes once your app is launched will require all of your current users to re-authorize the app before they can launch it again."
                              }
                            },
                            {
                              "type": "text",
                              "data": "###  Submitting your App\n\nOur submission guidelines aim to protect the merchant experience and to provide enough structure for you to develop apps efficiently and effectively. Before submitting your app, please be sure to carefully review the App Requirements, to avoid having your app rejected and going through resubmission. A fee of $99 is required for each submission. If the app is rejected you will be charged for a new submission. You can [submit an app](/api/#payment-amp-submission) through the Dev Portal.\n\n  \n###  Monetizing Your App\n\nIf you want to charge merchants for your app, please note that BigCommerce expects you to handle the billing aspects of the transaction. Your app needs to take care of collecting the fee from the merchant.\n\nUnder BigCommerce’s Technology Partner Program, within 30 days of collecting this revenue, you must send BigCommerce 20% and retain the remaining 80% for yourself. Once your app is published, a mandatory revenue-share reporting form will be sent to the primary contact on your partner account, at the beginning of each month."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "##  Troubleshooting\n\n### Are all fields required?\n\nWhile not all fields are required to publish edits for your listing, they are all highly recommended. Without filling in all fields, your listing will be missing information that merchants have seen on other listings and expect to see throughout the Marketplace.\n\n###  I’ve logged in to the Developer Portal, but I don’t see my published listing. Where is it?\n\nYou may be logged in with the wrong account. Each listing can only be owned by one user, so it is likely assigned to another email address. If you’re unable to track down the correct owner account for your solution, please reach out to <a href=\"mailto:appstore@bigcommerce.com\">appstore@bigcommerce.com</a>.\n\n### I saved my changes, but my listing detail page on BigCommerce.com/Apps has not updated yet. What’s the problem?\n\nThe changes will be effective immediately in your control panel app card, but the updates can take up to 24 hours to appear on the public BigCommerce Marketplace. Feel free to use this as a grace period to make additional edits as needed."
                            },
                            {
                              "type": "callout",
                              "data": {
                                "type": "success",
                                "body": "Questions? Please contact <a href=\"mailto:partnersupport@bigcommerce.com\">partnersupport@bigcommerce.com</a>"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Using Dev Tools",
                        "route": {
                          "path": "/using-dev-tools"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Using Dev Tools</h1>"
                            },
                            {
                              "type": "text",
                              "data": "<div id=\"no-index\">\n\n### On this page\n\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "The Developer Portal can be found by clicking [My Apps](https://devtools.bigcommerce.com/) in the upper right corner of the page. "
                            },
                            {
                              "type": "text",
                              "data": "## App Summary"
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1536090932265",
                              "header": {
                                "title": "App Summary"
                              }
                            },
                            {
                              "type": "text",
                              "data": "### Contact Name\nUse the email address that was created when applying for your Partner Id. \n\n### Partner Name\nList the name of your company​, as you want it to be attributed on the detail page.\n\n### Partner Website\nProvide the URL for your homepage so users can learn more about your company.\n\n### Support email\nEmail where users can get help with the app. This should be a formal group email at your company domain (Ex: support@app-partner.com) rather than a personal email. If not provided, this option will not be displayed.\n\n### Support website\nA Support email and website for users to reach out as needed.\nThese will be publicly visible on the Marketplace, so make sure to stay away from personal emails or non-support URLs. Your public detail page will include a button for users to “Get Support,” which will take them to this URL in a new tab. If not provided, the button will not be displayed on your detail page.\n\n### Partner ID\nWhen you’re ready to submit your listing for review, you will need to enter your [Partner ID](#apply-to-the-technology-partner-program) for your Technology Partner account. This field is not required to create, save, or edit a Draft prior to submission. "
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1536090982027",
                              "header": {
                                "title": "App Summary Remaining Fields"
                              }
                            },
                            {
                              "type": "text",
                              "data": "### App Name\nUse the brand name you’ve given your app for your app title throughout your app content. This listing name should be a concise title for easy identification and should not include additional taglines or descriptors. The name will always appear alongside your summary, so there’s no need to muddy your app’s branding with duplicate content when that tagline is already displayed with it."
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "If your solution is a connector to a specific third-party service, or you’re offering only a particular feature, make sure to include both the name of the third party service or feature and your company name​ (Ex: “Marketplace by BigCommerce,” “Search by BigCommerce”). The company name needs to follow the feature."
                              }
                            },
                            {
                              "type": "text",
                              "data": "### App Logo\nYour primary app logo should be 350 x 130px (or larger at this ratio) with a white background and dark branding in the foreground. The logo should only include branding, no taglines necessary.\n\n### Price\nSelect one of our pre-formatted pricing options to call out your app’s starting price. If you offer a forever-free plan, choose the “Free” option. If your app does not fit one of our options, specify your details in a few words in the “Other” selection."
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "If you need to specify more detail on your pricing options, save it for your app description."
                              }
                            },
                            {
                              "type": "text",
                              "data": "### App Summary\nA short tagline description of your app that will be used on your app card in category and search results within the Marketplace. 128 characters max.\n\n### App Icon\nYour app icon will be included on the main app detail page and the sidebar in the BigCommerce control panel once the app is installed. This should be a square 200 x 200px image.\n\n### Category\nChoose the most appropriate category for your app. Take a look at the live [Marketplace](https://www.bigcommerce.com/apps/) for an idea of where solutions are currently assigned to help decide the right category. The category selection will also be a search attribute for your listing. BigCommerce will review your category assignment and may re-categorize your listing prior to launch. One category maximum."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Details"
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1536094285210",
                              "header": {
                                "title": "App Details"
                              }
                            },
                            {
                              "type": "text",
                              "data": "### App Details\nA more in-depth value proposition for your listing, including how your solution works, why your solution stands out in its category, and why a merchant should choose you over other competitors. Avoid using fluff or buzzwords, as this field will not be indexed for search. 200 words max recommended.\n\n### Videos\nInclude videos that highlight the purpose and value of your solution. Select the video hosting platform (YouTube or Vimeo) and enter the video ID.\n\n#### Video Best Practices\n\n**YouTube**\n\nTurn off ads for any videos you've already uploaded. \n\n1. Sign in to YouTube.\n\n2. In the top right, click your account icon > Creator Studio.\n\n3. On the left, select Video Manager.\n\n4. Select the video(s) where you want to turn ads off.\n\n5. Click Actions > More actions > Monetization.\n\n6. Select Off.\n\n7. Click Submit.\n\n**Vimeo**\n\nPer Vimeo’s guidelines, businesses may not use Basic or Plus accounts to host videos. If you want to upload commercial videos, you must use Vimeo PRO or Business. Commercial content includes:\n\nVideos promoting or representing a for-profit business or brand \nVideos containing any form of advertising \nVideos hosted on behalf of a business (i.e., uploaded to Vimeo and embedded on your company’s website) \nProduct demos and tutorials\n\n*Note:* Ads appear to viewers based on their level of Vimeo membership - not yours. Basic and non-logged in viewers may see ad banners below the video player.\n\n### Case Studies\nThese can either be “Thought Leadership” case studies and/or traditional case studies that demonstrate how BigCommerce merchants have benefited from using your solution with their business. Use the + ​icon to add a case study, and the x ​icon to remove. Four case studies maximum."
                            },
                            {
                              "type": "callout",
                              "data": {
                                "type": "warning",
                                "body": "Case studies that include competitor platforms are not allowed and will be removed. Partners will be required to repurpose general case studies, remove competitor platform mentions, and republish the asset accordingly"
                              }
                            },
                            {
                              "type": "text",
                              "data": "### Features\nUse these fields to enumerate the major features your platform or solution has to offer. Include a brief title for each feature, and a description of the feature to accompany it. The feature title will be search indexed in the Marketplace, so be specific with your feature names and include major functions potential users will search for. Use the + icon to add a feature, and the x icon to remove. Utilize the rich text editing of these fields to bold, underline, or italicize copy as needed. \nUp to five features can be added."
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1536094394489",
                              "header": {
                                "title": "Legal Terms"
                              }
                            },
                            {
                              "type": "text",
                              "data": "### Legal Terms & Privacy \nLinks to your privacy policy and terms of service. This requirement is in place due to legal liability and is non-optional. \n\n### International Optimization\nPlease add the countries for which your solution is optimized and those which your solution does not currently support. "
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "This feature will not currently be utilized in the Marketplace, but will be a part of planned internationalization updates."
                              }
                            },
                            {
                              "type": "text",
                              "data": "### Help Guides\nLinks to your User and Installation Guides as a reference for existing users and prospects.\nWe now ask that you include links to your solution’s user installation guide (PDF, support articles, etc.) and standard user guide for prospective users to review before installation. If you do not submit links, this field will not be displayed on your listing detail page, however we highly recommend including these with your submission."
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1536094465257",
                              "header": {
                                "title": "App Screenshots"
                              }
                            },
                            {
                              "type": "text",
                              "data": "### App Screenshot\nAdd screenshots of your solution’s functionality or user interface as it appears when integrated with BigCommerce so users know what to expect.\n\n### Alternate Logo\nYour alternate logo will be used if your app is featured on the homepage carousel of the Marketplace. This image should be 259 x 158px (or larger at this ratio) with a dark background and white or light branding in the foreground. The logo should only include branding, no taglines necessary."
                            },
                            {
                              "type": "text",
                              "data": "## Technical"
                            },
                            {
                              "type": "tabs",
                              "data": {
                                "children": [
                                  {
                                    "title": "App Features",
                                    "blocks": [
                                      {
                                        "type": "image",
                                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1536094548947"
                                      },
                                      {
                                        "type": "text",
                                        "data": "### Multiple Users\n\nBy default, your app will only be accessible to the store owner (i.e., the user who created the store). Optionally, you can allow your app to be accessible to other store users. Consider the following before enabling [multi-user support](https://developer.bigcommerce.com/api/#multi-user-support):\n\n-   Once you enable multi-user support, a store admin will still need to grant access to other users from within the store control panel. For each user account, there are settings that grant access to specific apps.\n    \n-   Your app should be aware that when it receives the [Load Callback](https://developer.bigcommerce.com/api/#load-request-and-response), the user information passed in [might not be the store owner’s](https://developer.bigcommerce.com/api/#about-the-load-request). You’ll need to determine how to respond if you see a different user. For example, you may want to provision a new user account in order to personalize the experience.\n    \n-   You can optionally specify a [Remove User Callback URI](https://developer.bigcommerce.com/api/#about-the-remove-user-request) to receive a callback when a store admin revokes a user’s access.\n    \n### App Type\n\nSelect the type of app. We recommend [Single Click Apps](/api#single-click-apps) although some qualify to [Connector Apps.](/api#connector-and-other-oauth-apps)\n\n### Callback URLS\n\nYou must have an [Auth Callback URI](https://developer.bigcommerce.com/api/#app-installation-and-update-sequence) and a [Load Callback URI](https://developer.bigcommerce.com/api/#load-request-and-response) to register your app.\n\n##### Public URIs Required before Submission\n\nBecause the Auth Callback URI and Load Callback URI requests originate from the browser and not from BigCommerce, you can use non–publicly-available URIs and a self-signed certificate for a quick start. However, you must switch to – and test your app with – a publicly available Auth Callback URI and Load Callback URI before submitting your app for consideration in the App Marketplace.\n\nIf you want to receive a callback when the store owner uninstalls your app, you can provide an [Uninstall Callback URI](https://developer.bigcommerce.com/api/#uninstall-request-optional)."
                                      }
                                    ]
                                  },
                                  {
                                    "title": "OAuth Scopes",
                                    "blocks": [
                                      {
                                        "type": "image",
                                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1536094603483"
                                      },
                                      {
                                        "type": "text",
                                        "data": "![Scope](/images/dev_portal/oauth_scopes.png)\n\n### OAuth Scopes\nIf you know the [OAuth scopes](/api#oauth-scopes) that your app requires, you should select these. If you do not yet know the scopes that you need, you can just request minimal permissions (such as Information: Read-Only) to get started. However, once you determine the scopes you need, you must:\n- Modify the scopes of your app in My Apps and save the changes.\n- Obtain the new OAuth token during the [App Installation or Update flow](https://developer.bigcommerce.com/api/#app-installation-and-update-sequence).\n- Retest your app to make sure it still functions properly with the new token."
                                      }
                                    ]
                                  },
                                  {
                                    "title": "Test Instructions",
                                    "blocks": [
                                      {
                                        "type": "image",
                                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1536094645735"
                                      },
                                      {
                                        "type": "text",
                                        "data": "Add in any instructions needed to test the app thoroughly. "
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Building Apps With BigCommerce",
                  "route": {
                    "path": "/building-apps-bigcommerce"
                  },
                  "data": {
                    "children": [
                      {
                        "title": "Apps Quickstart",
                        "route": {
                          "path": "/apps-quickstart"
                        },
                        "data": {}
                      },
                      {
                        "title": "Types of Apps",
                        "route": {
                          "path": "/new-subpage"
                        },
                        "data": {}
                      },
                      {
                        "title": "Building Apps",
                        "route": {
                          "path": "/building-apps"
                        },
                        "data": {}
                      }
                    ]
                  }
                },
                {
                  "title": "Webhooks",
                  "route": {
                    "path": "/webhooks"
                  },
                  "data": {
                    "children": [
                      {
                        "title": "About Webhooks",
                        "route": {
                          "path": "/about-webhooks"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>About Webhooks</h1>"
                            },
                            {
                              "type": "text",
                              "data": "<div id=\"no-index\">\n\n### On this page\n\n* [Events Available](http://)\n* [Authentication](#authentication)\n* [Lightweight Callback Payload](#lightweight-callback-payload)\n* [Request and Response](#request-and-response)\n* [Recieving the Callback](#receiving-the-callback)\n* [Responding to the Callback](#respond-to-webhook-callbacks)\n* [Callback Retry Mechanism](#callback-retry-mechanism)\n* [Webhook Security](#webhook-security)\n* [Tools for Debugging](#tools-for-debugging-and-testing-webhooks)\n* [All Available Webhooks]()\n\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "Webhooks allow app developers to be notified, in near real-time, when specific events occur on a BigCommerce store. For example, your app may need to perform an action when a new order is created, a product’s inventory decreases, or an item is added to a shopper’s cart. When a subscribed event occurs on a store, BigCommerce will POST a payload to your app’s callback URI so your app can take some action based on that event."
                            },
                            {
                              "type": "callout",
                              "data": {
                                "type": "warning",
                                "title": "Multiple Events Are Triggered during Bulk Data Imports",
                                "body": "Bulk data imports will trigger the relevant events for every record affected. For example, if you have a hook on `store/product/created`, when the merchant imports 2,000 products, we will send 2,000 individual callback events."
                              },
                              "header": {}
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Authentication\n\nWebhooks are authenticated using Oauth and support the JSON media type. Basic auth and XML are not supported.\n\nBefore you  can begin to send and receive requests, you must have the following:\n\n* A store: You can get a sandbox store by joining the Partner Program.\n* OAuth Client ID: Obtained by creating an API Account.\n* OAuth token: Obtained by creating an API Account.\n* Valid TLS/SSL configuration: Verify your app server’s setup at the following site: [https://sslcheck.globalsign.com](https://sslcheck.globalsign.com)",
                              "header": {
                                "anchor": "authentication"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "type": "error",
                                "title": "Connection Breakers",
                                "body": "Any one of the following conditions on your app server will cause a connection failure:\n* Hostname/DNS mismatch.\n* Self-signed certificate.\n* Intermediate certificates not loaded."
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Lightweight Callback Payload\n\nWhen a subscribed event occurs, we send a light payload with only minimum details regarding the event that’s been triggered. This gives you maximum flexibility as to how you want to handle the notification in your application. For instance, if you subscribe to the `store/order/statusUpdated` event, we’ll send you the order ID when the status is updated. You might want to handle the notification by fetching the full order details via a request to the Orders resource.\n\nAn example payload follows:\n\n```\n{\n \"store_id\":11111,\n \"producer\":\"stores/abcde\",\n \"scope\":\"store/order/statusUpdated\",\n \"data\":{\n         \"type\":\"order\",\n         \"id\":173331\n        },\n \"hash\":\"3f9ea420af83450d7ef9f78b08c8af25b2213637\"\n }\n```",
                              "header": {
                                "anchor": "lightweight-callback-payload"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Request and Response\n\n*Never worked with webhooks before? Check out the tutorial on creating webhooks.*\n\nAll webhooks requests must include the following in their HTTP headers:\n\n```\n     Accept: application/json\n     Content-Type: application/json\n     X-Auth-Client: <the OAuth client id>\n     X-Auth-Token: <the OAuth token>\n```",
                              "header": {
                                "anchor": "request-and-response"
                              }
                            },
                            {
                              "type": "code",
                              "data": "curl -X POST \\\n  https://api.bigcommerce.com/stores/store_hash/v2/hooks \\\n  -H 'Accept: application/json' \\\n  -H 'X-Auth-Client: your-client-id \\\n  -H 'X-Auth-Token: your-auth-token \\\n  -d '{\n  \"scope\": \"store/cart/lineItem/*\",\n  \"destination\": \"https://myapp.herokuapp.com/\",\n  \"is_active\": true",
                              "header": {
                                "title": "/POST Webhook ",
                                "subtitle": "Request: https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks",
                                "anchor": "post-webhooks"
                              },
                              "config": {
                                "mode": "shell"
                              }
                            },
                            {
                              "type": "code",
                              "data": "    {\n        \"id\": 14270456,\n        \"client_id\": \"your-client-id\",\n        \"store_hash\": \"your_store_hash\",\n        \"scope\": \"store/cart/lineItem/*\",\n        \"destination\": \"https://779aca97.ngrok.io/webhooks\",\n        \"headers\": null,\n        \"is_active\": true,\n        \"created_at\": 1531326542,\n        \"updated_at\": 1531337178\n    }",
                              "header": {
                                "title": "Response 201 Created",
                                "subtitle": "/POST Webhook",
                                "anchor": "response-post-webhooks"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "text",
                              "data": "| Name |Description | Type\n|--|--|--|\n| id | A read-only value that uniquely identifies a webhook object. Do not attempt to set this value in a PUT or POST. | integer|\n| client_id | The OAuth client ID that uniquely identifies your application. BigCommerce returns this name-value pair in the JSON body of its responses. | string |\n| store_hash | \tThe hash value that uniquely identifies the store. Your application does not need to set this value via the JSON object; instead, you pass it in the path of your API requests. | string |\n|scope| Value is the event you would like to listen for. See List of Webhook Events for the full list of possibilities. Wild Cards are supported for scope. **(Required)** | string |\n| destination | value is the callback’s fully qualified URI. This should be an endpoint configured on your app server to receive webhook payloads. **(Required)** | string |\n| headers |The headers object contains one or more name-value pairs, both string values. If you choose to include a headers object, BigCommerce will include the name-value pair(s) in the HTTP header of its POST requests to your callback URI at runtime. While this feature could be used for any purpose, one is to use it to set a secret authorization key and check it at runtime. This provides an additional level of assurance that the POST request came from BigCommerce instead of some other party, such as a malicious actor. (Optional) | string |\n|is_active | Value specifies whether a webhook is active or inactive. By default, new webhooks will be set to be inactive and will have a blank value. If you want to create a webhook that should be active initially, you can pass the following name-value pair: \"is_active\": true. (Optional) | boolean |\n| created_at | The time at which the webhook was created.| date-time Unix Epoch|\n| updated_at | The time at which the webhook was last updated. | date-time Unix Epock|"
                            },
                            {
                              "type": "text",
                              "data": "An HTTP 201 response indicates that the webhook was set successfully."
                            },
                            {
                              "type": "callout",
                              "data": {
                                "type": "warning",
                                "body": "Following the creation of a webhook, it can take up to one minute for BigCommerce to start sending POST requests to your callback URI.",
                                "title": "One-Minute Timeout"
                              }
                            },
                            {
                              "type": "code",
                              "data": "//Response 200 OK\n\n[\n    {\n        \"id\": 14270466,\n        \"client_id\": \"your-client-id\",\n        \"store_hash\": \"your_store_hash\",\n        \"scope\": \"store/product/created\",\n        \"destination\": \"https://779aca97.ngrok.io/webhooks\",\n        \"headers\": null,\n        \"is_active\": true,\n        \"created_at\": 1531326542,\n        \"updated_at\": 1531337178\n    },\n    {\n        \"id\": 14270713,\n        \"client_id\": \"your-client-id\",\n        \"store_hash\": \"your_store_hash\",\n        \"scope\": \"store/product/updated\",\n        \"destination\": \"https://779aca97.ngrok.io/webhooks\",\n        \"headers\": null,\n        \"is_active\": false,\n        \"created_at\": 1531338589,\n        \"updated_at\": 1531338589\n    }\n]\n",
                              "header": {
                                "title": "/GET All Webhooks",
                                "subtitle": "Request: https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks",
                                "anchor": "get-all-webhooks"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "code",
                              "data": "{\n    \"id\": 14270466,\n    \"client_id\": \"your-client-id\",\n    \"store_hash\": \"your_store_hash\",\n    \"scope\": \"store/product/created\",\n    \"destination\": \"https://779aca97.ngrok.io/webhooks\",\n    \"headers\": null,\n    \"is_active\": false,\n    \"created_at\": 1531326542,\n    \"updated_at\": 1531337178\n}\n\n",
                              "header": {
                                "subtitle": "To get a single webhook use the `id`.  Request: https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks/id",
                                "title": "/GET a Single Webhook",
                                "anchor": "get-a-single-webhook"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "code",
                              "data": "{\n \"scope\": \"store/product/updated\",\n \"destination\": \"https://779aca97.ngrok.io/webhooks\",\n \"is_active\": false\n}\n\n\n//Response 200 OK\n\n{\n    \"id\": 14270466,\n    \"client_id\": \"ejoftto9hv8xlip01cckcg53v7g3lrl\",\n    \"store_hash\": \"jrah6gmn\",\n    \"scope\": \"store/product/created\",\n    \"destination\": \"https://779aca97.ngrok.io/webhooks\",\n    \"headers\": null,\n    \"is_active\": false,\n    \"created_at\": 1531326542,\n    \"updated_at\": 1531337178\n}\n",
                              "header": {
                                "title": "/PUT Webhook",
                                "subtitle": "Update a webhook using the id. Once the webhook is created all the fields below can be changed via an update request. Request: https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks/id",
                                "anchor": "update-a-webhook"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "code",
                              "data": "//Response 200 OK\n{\n    \"id\": 14270466,\n    \"client_id\": \"ejoftto9hv8xlip01cckcg53v7g3lrl\",\n    \"store_hash\": \"jrah6gmn\",\n    \"scope\": \"store/product/created\",\n    \"destination\": \"https://779aca97.ngrok.io/webhooks\",\n    \"headers\": null,\n    \"is_active\": false,\n    \"created_at\": 1531326542,\n    \"updated_at\": 1531337178\n}\n",
                              "header": {
                                "title": "/DELETE a Wehbook",
                                "subtitle": "Request: https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks/id"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "text",
                              "data": "There is not a way to delete all webhooks on a store. Run a GET request for the webhook id, then send a request to the delete URI to remove each one. It returns a 200 OK for the response with the deleted hook. When requesting a list of hook, the hook id is not available.\n\nIf webhooks are no longer being used, either delete them or set `is_active:false`."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Receiving the Callback\n\nYou’ll need to build an application and configure your server to receive the callback we send when events are triggered. \n\nNeed to set up a quick destination URL for testing? See Tools for Debugging and Testing Webhooks."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Respond to Webhook Callbacks\n\nYou’ll need to build an application and configure your server to receive the callback we send when events are triggered.\n\nTo acknowledge that you received the webhook without issue, your server should return a 200 HTTP status code. Any other information you return in the request headers or request body will be ignored. Any response code outside the 200 range, including 3_xx_ codes, will indicate to us that you did not receive the webhook. When a webhook is not received (for whatever reason), we will retry the callback as described below.\n\nNeed to set up a quick destination URL for testing? See [Tools for testing webhooks.](http://)"
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Callback Retry Mechanism\n\nThe webhooks service will do its best to deliver events to your callback URI. If your server indicates that the webhook payload has not been received, the dispatch service will take the following actions:\nIf an app server responds to a webhook payload with anything other than a 2_xx_ response, or times out, the app will be blocked for 60 seconds.\nWebhooks created during that 60-second block will be queued up to send on the next scheduled retry attempt after the block expires, so that webhooks are not lost.\n\nThe webhook dispatcher will then attempt several retries (at increasing intervals) until the maximum retry limit is reached.\n\n### Retry Intervals\n\n* 60 seconds after the most recent failure  \n* 180 seconds after the most recent failure  \n* 180 seconds after the most recent failure  \n* 300 seconds after the most recent failure  \n* 600 seconds after the most recent failure  \n* 900 seconds after the most recent failure  \n* 1800 seconds after the most recent failure  \n* 3600 seconds after the most recent failure  \n* 7200 seconds after the most recent failure  \n* 21600 seconds after the most recent failure  \n* 50400 seconds after the most recent failure  \n* 86400 seconds (24 hours) after the most recent failure\n\nAfter the final retry attempt (cumulatively, 48 hours after the first delivery attempt), the webhook will automatically be deactivated, and we will send an email to the developer’s email address registered on the subscribing app. You can reactivate the webhook by setting the `is_active` flag back to true via a `/PUT` request to the hooks resource."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Webhook Security\nTo ensure that webhook payloads are secure against activity by a malicious actor, we take a three-pronged approach:\n\n* Webhook payloads contain minimal information about the store and event, for example the ID identifying the order or cart. To access potentially sensitive information on a store, a malicious actor would need to be fully authenticated against that store’s API in order to request full details.\n* Webhook payloads are sent over a TLS-encrypted connection.\n* For added security, you can include custom headers in your webhook creation request, and these headers will be sent in the payload when an event you subscribe to occurs. If your app endpoint is secured by basic authentication, you could set your own basic auth headers to authenticate the payload at runtime."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Troubleshooting\n\n### Why am I not receiving event payloads to my callback URI?\nIf your app does not return an HTTP 2_xx_ to BigCommerce after receiving the webhook event payload, BigCommerce considers it a failure. BigCommerce will keep trying for a little over 48 hours. At the end of that time, BigCommerce sends an email to the email address set during app registration and disables the webhook by setting the is_active flag to false.\n\nYou can proactively check to make sure that everything is OK by periodically making a GET request and checking the is_active flag.\n\nIf you receive an email or discover that the is_active flag has been flipped to false, try the following:\n\nCheck to see if your app is responding to the event payload with something other than HTTP 200.\nCheck to make sure that your server has a valid TLS/SSL setup. One way to do this is by visiting the following website: https://sslcheck.globalsign.com. Any of the following will cause the TLS/SSL handshake to fail:\nSelf-signed certificate.\nHost name of the certificate does not match the server’s DNS.\nYour server’s key or trust store has not been loaded up with the intermediate certificates necessary to establish the chain of trust.\nOnce you have resolved the issue preventing the connection, send a PUT request to flip the is_active flag back to true. This will cause BigCommerce to start sending the event payloads to your callback URI again.\n\n### Why am I not receiving a 201 response after creating a webhook?\nAfter sending a POST request to create a webhook, you should get an HTTP 201 back. If you do not, check your TLS/SSL setup and be sure that your request contains the following headers:\n\n```\n     Accept: application/json\n     Content-Type: application/json\n     X-Auth-Client: <the OAuth client id>\n     X-Auth-Token: <the OAuth token>\n```"
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Tools for Debugging and Testing Webhooks\n\n**[ngrok](https://ngrok.com/)**  \nAs you are building your integration, you might want to test webhooks on your local dev machines.\n\nWe suggest using ngrok, which you can use to easily set up tunnels between a server running on localhost and a public URL. This will enable you to send our webhooks to your localhost environments via a public URL. No production push is required.  \nNeed help on ngrok and webhooks see our tutorial.\n\n**[Webhook Tester](https://webhook.site/#/)**  \nThis allows for webhooks to be quickly tested or checked. "
                            }
                          ]
                        }
                      },
                      {
                        "title": "Setting up Webhooks",
                        "route": {
                          "path": "/setting-up-webhooks"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Setting Up Webhooks</h1>"
                            },
                            {
                              "type": "text",
                              "data": "<div id=\"no-index\">\n\n### On this page\n\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## Prerequisites\n\n- NPM is installed (installed automatically with Node)\n- Familiar with Command Line\n- Familiar with Postman\n- [API Access Token & Client ID](/api/#authenticating-with-oauth) with [scope] set to Information & Settings Read-Only and Products Read-Only.\n- [Webhooks Overview](/api/#webhooks-overview)",
                              "header": {
                                "anchor": "prerequisites"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Create Project Folder\n\n1. Open the terminal and create a folder that will hold ngrok and the Node app, then move into that directory.\n\n```\n    mkdir webhooks-test\n    cd webhooks-test\n```",
                              "header": {
                                "anchor": "create-project-folder"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Install ngrok\n\nThere are three ways to install ngrok: \n- Install manually and then set the $PATH so ngrok can be used globally. \n- Download as an [npm](https://www.npmjs.com/package/ngrok) module. \n- Download manually and place in the project folder. (Method we are using)\n\n### Mac/Linux\n\n1. Visit https://ngrok.com/ and click on download.\n2. Choose the version for your operating system.\n3. Unzip ngrok and place the application in the project folder that you created.\n\nThis can be accomplished in one command:\nunzip \"file_to_unzip\" -d  destination\n\n`unzip /Users/your-computer/Downloads/ngrok-stable-darwin-amd64.zip -d /Users/your-computer/Documents/webhooks-test`\n\n### Windows\n1. Visit https://ngrok.com/ and click on download.\n2. Choose the version for your operating system.\n3. Unzip ngrok and place the application in the project folder that you created.\n4. Make sure the folder is in your PATH environment variable\n    - [What are PATH and other environment variables, and how can I set or use them?](https://superuser.com/questions/284342/what-are-path-and-other-environment-variables-and-how-can-i-set-or-use-them)",
                              "header": {
                                "anchor": "install-ngrok"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "type": "success",
                                "body": "At this point you should have a project folder with ngrok unzipped inside of it. \n",
                                "title": "Checkpoint"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Create Express App\n\n1. In the terminal run `npm init`. You will be prompted with several questions about the app setup. Feel free to hit return to accept the default value.  The final screen will look something like this: \n\n```\n{\n  \"name\": \"webhooks-test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"webhooks-test\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n2. Take note of the value in main, `index.js`. \n3. Create a file in your project folder called index.js. `touch index.js`\n4. Install [Express](https://expressjs.com/en/starter/installing.html) using the terminal in the same project folder. `npm install express --save`\t\t\t "
                            },
                            {
                              "type": "callout",
                              "data": {
                                "type": "success",
                                "body": "At this point your project folder should have similar contents:\nindex.js\nnode_modules\npackage.json\nngrok\npackage-lock.json",
                                "title": "Checkpoint"
                              }
                            },
                            {
                              "type": "text",
                              "data": "4. Open index.js in a text editor and add this code snippet: \n\n\n```\n    const express = require('express')\n    const app = express()\n        app.post('/webhooks', function (req, res) {\n        res.send('OK')\n    })\n    app.listen(3000, function () {\n        console.log('Listening for webhooks on port 3000')\n    })\n```\n\n\nThe app is starting a server and listening on port 3000, then returning a response of ok once it receives a POST to the /webhooks url.\n\n```\napp.post('/webhooks', function (req, res) {\n res.send('OK')\n})\n```\n\n\nFrom Express [Website](https://expressjs.com/en/starter/basic-routing.html):\n`app.METHOD(PATH, HANDLER)`\n- app is an instance of express.\n- METHOD is an [HTTP request method](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods), in lowercase.\n- PATH is a path on the server.\n- HANDLER is the function executed when the route is matched.\n- Res.send is the body parameter that sends the HTTP response."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Start the app and ngrok\n\nWe are going to start the app and visit the ngrok url to see the status of our webhooks. \n\n1. Open two terminal tabs. They both should be in your project folder. \n2. In one tab run the app. `node index.js`\n3. In the other start ngrok. `./ngrok http 3000`",
                              "header": {
                                "anchor": "start-the-app-ngrok"
                              }
                            },
                            {
                              "type": "tabs",
                              "data": {
                                "children": [
                                  {
                                    "title": "node index.js",
                                    "blocks": [
                                      {
                                        "type": "text",
                                        "data": "```\nBIGCOMMERCE:webhooks your.computer$ node index.js\nListening for webhooks on port 3000\n```"
                                      }
                                    ]
                                  },
                                  {
                                    "title": "ngrok http 3000",
                                    "blocks": [
                                      {
                                        "type": "image",
                                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1531500085650",
                                        "config": {
                                          "centered": true
                                        },
                                        "header": {
                                          "title": "nrgok terminal"
                                        }
                                      }
                                    ]
                                  }
                                ]
                              }
                            },
                            {
                              "type": "text",
                              "data": "ngrok returns two values we need for webhooks. \n- Web Interface: Where you can monitor the hook from a browser. `https://127.0.0.1:4040`\n- Forwarding: The webhook destination. Make note of the https version. In this example its https://6a35e97b.ngrok.io.\n\n4. Open a web browser and copy in your Web Interface URL. `http://127.0.0.1:4040` -  This is where the webhooks will appear when they fire."
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1531500191661",
                              "header": {
                                "title": "ngrok Web Interface"
                              },
                              "config": {
                                "centered": true,
                                "maxWidth": "800",
                                "maxHeight": "800"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "The webhook we are going to subscribe to is `store/product/updated`. \n\n1. Create a POST request using the try it now box below or your api enviroment of choice.`https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks`. Replace store_hash with your store.\n2. Create a body request with the webhook we are subscribing to and your forwarding url:\n\n```\n{\n \"scope\": \"store/product/updated\",\n \"destination\": \"https://6a35e97b.ngrok.io/webhooks\",\n \"is_active\": true\n}\n```\n\nThe destination url is the forwarding url from ngrok and /webhooks, matching the URL path set in the app POST.  \n\n3. Update the headers to have:\n```\n    Accept: application/json\n    Content-Type: application/json\n    X-Auth-Client: {{the OAuth client id}}\n    X-Auth-Token: {{the OAuth token}}\n```\n4. Check all the values and then hit POST. The response will be 201 Created if headers and scope are correct."
                            },
                            {
                              "type": "http",
                              "data": {
                                "method": "post",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v2/hooks",
                                "headers": {
                                  "Accept": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{the OAuth client id}",
                                  "X-Auth-Token": "{the OAuth token}"
                                },
                                "body": "{\n\"scope\": \"store/product/updated\",\n \"destination\": \"https://{your-url}.ngrok.io/webhooks\",\n \"is_active\": true\n}\n"
                              },
                              "header": {
                                "title": "Create a Webhook",
                                "anchor": "create-a-webhook"
                              }
                            },
                            {
                              "type": "code",
                              "data": "{\n    \"id\": 14263419,\n    \"client_id\": \"your-client-id\",\n    \"store_hash\": \"your-store-hasha\",\n    \"scope\": \"store/product/updated\",\n    \"destination\": \"https://6a35e97b.ngrok.io/webhooks\",\n    \"headers\": null,\n    \"is_active\": true,\n    \"created_at\": 1531256030,\n    \"updated_at\": 1531256030\n}",
                              "header": {
                                "title": "201 Created Response",
                                "anchor": "201-response"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Fire Webhooks\nYou can fire the webhook in two ways. Either the API or the store’s control panel. We are going to cover both.\n\n### Update via the Control Panel\n\n1. From your store’s control panel, navigate to Products > View. Choose a product and change some of the information. In this case, the word Hoodie was added to the product name. Then click save.",
                              "header": {
                                "anchor": "fire-webhooks"
                              }
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1531500906129",
                              "config": {
                                "centered": true,
                                "maxWidth": "800",
                                "maxHeight": "800"
                              },
                              "header": {
                                "title": "BigCommerce Control Panel",
                                "subtitle": "Products > View"
                              }
                            },
                            {
                              "type": "text",
                              "data": "2. Visit the Ngrok web interface address (in the sample app it’s http://127.0.0.1:4040), and check for a 200 response. "
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1531500945565",
                              "config": {
                                "centered": true,
                                "maxWidth": "800",
                                "maxHeight": "800"
                              },
                              "header": {
                                "title": "ngrok Web Interface"
                              }
                            },
                            {
                              "type": "text",
                              "data": "Under Summary you can see the webhook has fired. It returned the text OK. This can be changed. In the original app, res.send(‘OK’). This can be changed to say something different or even post the response to another app.  \n\nThe response will also show in the terminal. "
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1531500989467",
                              "header": {
                                "title": "ngrok Terminal Response"
                              },
                              "config": {
                                "centered": true,
                                "maxWidth": "800",
                                "maxHeight": "800"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Update via the API\nCreate a PUT request to the product that needs to be updated. \n\n`https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/124`\n\nIn this example, the price of product_id 124 is being changed to 12.99.\n\nAfter hitting send, check the ngrok web interface. You may have more or less events based on how many times the product has been updated in the previous step. "
                            },
                            {
                              "type": "http",
                              "data": {
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}",
                                "headers": {
                                  "X-Auth-Client": "{Your-X-Auth-Client}",
                                  "X-Auth-Token": "{Your-X-Auth-Token}",
                                  "Accept": "application/json",
                                  "Content-Type": "application/json"
                                },
                                "method": "put",
                                "body": "{\n  \"price\": 12.99\n}"
                              },
                              "header": {
                                "title": "Update a Product",
                                "anchor": "update-a-product-webhooks"
                              }
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1531501115256",
                              "header": {
                                "title": "ngrok Web Interface"
                              },
                              "config": {
                                "centered": true,
                                "maxWidth": "800",
                                "maxHeight": "800"
                              }
                            },
                            {
                              "type": "text",
                              "data": "That’s it. In this walkthrough you created a webhook, setup a server to accept the response and used Express. Some extra things are to change the text in res.send() to have a custom response, print the response to a webpage or setup a different webhook. "
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "Unless you have paid for Ngrok, the URL is only valid for a few hours. After that, the webhook will stop working. Send a [DELETE]() request to the specific webhook id. ",
                                "type": "warning",
                                "title": "URL Timeout"
                              }
                            },
                            {
                              "type": "http",
                              "data": {
                                "method": "delete",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v2/hooks/{hook_id}",
                                "headers": {
                                  "X-Auth-Client": "{your-client-id}",
                                  "X-Auth-Token": "{your-auth-token}",
                                  "Content-Type": "application/json",
                                  "Accept": "application/json"
                                }
                              },
                              "header": {
                                "title": "Delete the webhook",
                                "subtitle": "Get the hook_id by either getting it from the original /POST response or by sending a /GET request to the hooks resource",
                                "anchor": "delete-webhook"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Next Steps\n\nAdditionally, you can change the text in res.send() to have a custom response, print the response to a webpage or set up a different webhook. You can also send in custom headers as a way to verify the hook or get custom hook information back. Setup the destination using a permanent url such as creating an [Heroku](https://www.heroku.com/) app, then having the response print to the screen. \n\nTo send in custom headers, during the /POST or /PUT request add in:\n\n```\n{\n  \"scope\": \"store/order/*\",\n  \"headers\": {\n    \"X-Custom-Auth-Header\": \"{secret_auth_password}\"\n  },\n  \"destination\": \"https://app.example.com/orders\",\n  \"is_active\": true\n}\n```\nThe custom header can be anything you choose. It can be used to check the security of an incoming webhook. Anything without the custom header should be rejected.\n\n\nResponse:\n\n```\n{\n    \"id\": 14422996,\n    \"client_id\": \"{{client_id}}\",\n    \"store_hash\": \"{{store-hash}}\",\n    \"scope\": \"store/product/updated\",\n    \"destination\": \"https://6a35e97b.ngrok.io/webhooks\",\n    \"headers\": {\n        \"A-Custom-Header\": \"some-secret-password\"\n    },\n    \"is_active\": true,\n    \"created_at\": 1533142869,\n    \"updated_at\": 1533142869\n}",
                              "header": {
                                "anchor": "next-steps"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Troubleshooting\n1. Getting a 404 error using the root (/) url?\n\nAdd this snippet to your code to respond to incoming get requests with 'hello'.\n\n```\napp.get('/',(req, res)=>{\n    res.send('Hello!');\n}); \n```\n\n2. Getting error ngrok not found?\nThere are two ways to fix this. Your local setup will determine which command will work.\nUse the command `mv ngrok /usr/local/bin `to move ngrok to your local bin folder. This way it becomes available globally. \nUse the command `./ngrok http 300`0 to run ngrok as a sudo user. ",
                              "header": {
                                "anchor": "troubleshooting"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Webhook Events",
                        "route": {
                          "path": "/webhook-events"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>List of Webhook Events</h1>"
                            },
                            {
                              "type": "text",
                              "data": "<div id=\"no-index\">\n\t\n### On this page\n\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## Orders\n\n| Name | Description |\n| ---| --- |\n| store/order/* | Subscribe to all store/order events  |\n| store/order/created | A new order is created. It can be manual or created on the storefront | \n| store/order/update| Order is updated |\n| store/order/archived | Order is archived |\n| store/order/deleted | Order is deleted |\n| store/order/statusUpdated | Order status is changed |\n| store/order/message/created | Order message is created by customer or in control panel |",
                              "header": {
                                "anchor": "orders"
                              }
                            },
                            {
                              "type": "code",
                              "data": "{\n  \"scope\": \"store/order/statusUpdated\",\n  \"store_id\": \"123456\",\n  \"data\": {\n    \"type\": \"order\",\n    \"id\": 169,\n    \"status\": {\n      \"previous_status_id\": 5,\n      \"new_status_id\": 9\n    }\n  },\n  \"hash\": \"6923dda2313a5709b13f9b217a3acd6f8308a0c2\",\n  \"created_at\": 1535486277,\n  \"producer\": \"stores/abcdefg\"\n}",
                              "header": {
                                "title": " store/order/statusUpdated",
                                "anchor": "order-status-updated"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Products\n\n| Name | Description |\n| --- | --- |\n| store/product/*| Subscribe to all store/product events |\n|store/product/deleted| Product is deleted|\n| store/product/created | A new product is created |\n| store/product/updated |Events that fire this webhook are below: |\n| _Brand Changed_ | _Product Type_ |\n| _Category_ | _Inventory_ |\n| _Number Sold_ | _Availibility_ |\n| _Thumbnail Changed_ | _Visibility_ |\n| _Featured_ | _Name_ |\n| _Description_ | _Sort Order_ |\n| _Price_ | _Dimensions_ |\n| _Condition_ | _Tax Price_ |\n| store/product/inventory/updated| Product inventory is updated. |\n| store/product/inventory/order/updated| When an order is placed and product inventory is changed. If subscribed the webhook will fire for products where inventory is being tracked by sku or not. |\nIncluded in the response for `store/product/inventory/order/updated` is an inventory object:\n\n**value**: the number of items that the inventory changed by. This can be negative if the inventory is decreased `-3` or positive if an item is returned to the inventory from an order, `+2`\n\n**method** : Will always return relative.\n\n**id**: The product id\n\n**product_id**: The product id",
                              "header": {
                                "anchor": "products"
                              }
                            },
                            {
                              "type": "code",
                              "data": "{\n  \"scope\": \"store/product/inventory/order/updated\",\n  \"store_id\": \"123456\",\n  \"data\": {\n    \"type\": \"product\",\n    \"id\": 185,\n    \"inventory\": {\n      \"product_id\": 185,\n      \"method\": \"relative\",\n      \"value\": -1\n    }\n  },\n  \"hash\": \"dc475e1059f2a67a55818bea29bf6b23ebbda707\",\n  \"created_at\": 1535480603,\n  \"producer\": \"stores/abcdefg\"\n}",
                              "header": {
                                "title": "store/product/inventory/order/updated",
                                "anchor": "product-inventory-order-updated"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Category\n\n| Name | Description |\n|---|---|\n| store/category/*| Subscribe to all store/category events |\n| store/category/created | Category is created |\n| store/category/updated | Category is updated |\n| store/category/deleted | Category is deleted |",
                              "header": {
                                "anchor": "category"
                              }
                            },
                            {
                              "type": "code",
                              "data": "{\n  \"scope\": \"store/category/updated\",\n  \"store_id\": \"123456\",\n  \"data\": {\n    \"type\": \"category\",\n    \"id\": \"19\"\n  },\n  \"hash\": \"9bb5584b3c28e3bb07164405626bd913c14d2209\",\n  \"created_at\": 1535487935,\n  \"producer\": \"stores/abcdefg\"\n}",
                              "header": {
                                "title": "store/category/updated",
                                "anchor": "category-updated"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## SKU\n\n| Name | Description |\n| --- | --- |\n| store/sku/* |Subscribe to all store/sku events |\n| store/sku/created | A new sku is created |\n| store/sku/updated | Sku is updated |\n| store/sku/deleted| Sku is deleted |\n| store/sku/inventory/updated| |\n| store/sku/inventory/order/updated| This webhook will fire if inventory is being tracked by sku on a product. It will also fire the store/product/inventory/order/updated webhook. |\n\nIncluded in the response is a data object:\n\n**value**: the number of items that the inventory changed by. This can be negative if the inventory is decreased `-3` or positive if an item is returned to the inventory from an order, `+2`\n\n**method** : Will always return relative.\n\n**type**: Will always be sku\n\n**variant_id**: Id of the variant",
                              "header": {
                                "anchor": "sku"
                              }
                            },
                            {
                              "type": "code",
                              "data": "{\n  \"scope\": \"store/sku/inventory/order/updated\",\n  \"store_id\": \"123456\",\n  \"data\": {\n    \"type\": \"sku\",\n    \"id\": 330,\n    \"inventory\": {\n      \"product_id\": 184,\n      \"method\": \"relative\",\n      \"value\": +2,\n      \"variant_id\": 364\n    }\n  },\n  \"hash\": \"dc475e1059f2a67a55818bea29bf6b23ebbda707\",\n  \"created_at\": 1535480603,\n  \"producer\": \"stores/abcdefg\"\n}",
                              "header": {
                                "title": "store/sku/inventory/order/updated",
                                "anchor": "sku-inventory-order-updated"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Customer\n| Name | Description |\n|---|---|\n| store/customer/* | Subscribe to all store/customer events |\n| store/customer/created | A new customer is created|\n| store/customer/updated | Customer is updated |\n| store/customer/deleted | Customer is deleted |",
                              "header": {
                                "anchor": "customer"
                              }
                            },
                            {
                              "type": "code",
                              "data": "{\n  \"scope\": \"store/customer/deleted\",\n  \"store_id\": \"123456\",\n  \"data\": {\n    \"type\": \"customer\",\n    \"id\": 10\n  },\n  \"hash\": \"4bf08f1ad81eeb460eb12f99f7fd2226b6ea0911\",\n  \"created_at\": 1535488840,\n  \"producer\": \"stores/abcdefg\"\n}",
                              "header": {
                                "title": "tore/customer/deleted",
                                "anchor": "customer-deleted"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Store\n|Name|Description|\n|---|---|\n| store/app/uninstalled | Occurs when a client store is cancelled and uninstalled from the platform |\n|store/information/updated | Events that fire this webhook: |\n| *Store Name* | *Store Address* |\n| *Store Phone Number* | *Admin Email* |\n| *Order Email* | *Display Date Format* |\n| *Export Date Format* | *Store DTS Correction* |\n| *Store Time Zone* | *Language* |\n| *Default Currency* | *Currency Token* |\n| *Decimal Token* | *Thousands Place* |\n| *Currency Location* | *Weight Measurement* |\n| *Length Measurement* | *Length Measurement* |\n| *Dimensions Decimal Places* | *Dimensions Decimal Token* |\n| *Plan Name* | *Plan Level* |\n| *Store Logo* | *Mobile Template Logo* |\n| *Tax Entered With Prices* | *Stencil Template Enabled* |\n",
                              "header": {
                                "anchor": "store"
                              }
                            },
                            {
                              "type": "code",
                              "data": "{\n  \"scope\": \"store/information/updated\",\n  \"store_id\": \"123446\",\n  \"data\": {\n    \"type\": \"store\"\n  },\n  \"hash\": \"c553845e0a5e28dc8b0ea494458692a25586a294\",\n  \"created_at\": 1535489273,\n  \"producer\": \"stores/abcdefg\"\n}",
                              "header": {
                                "title": "store/information/updated",
                                "anchor": "store-information-updated"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Cart\n\n| Name | Description |\n| --- | --- |\n| store/cart/lineItem/* | This webhook will fire when a change occurs to line items in the cart. This can be items added to a cart, removed or updated.(Ex. change to quantity, product options or price). |\n| store/cart/lineItem/created | When a new item is added to the cart  |\n| store/cart/lineItem/updated | When an item’s quantity has changed or the product options change. |\n| store/cart/lineItem/deleted | When an item is deleted from the cart|\n| store/cart/created | This webhook will fire whenever a new cart is created either via a storefront shopper adding their first item to the cart or when a new cart being created via an API consumer. If it is from the storefront, then it fires when the first product is added to a new session.(The cart did not exist before) For the API it means a  `POST`  to /carts, (V3 and Storefront API). The  `store/cart/updated`  will also fire.|\n| store/cart/updated | This webhook is fired whenever a cart is modified through the changes in its line items. Eg. when a new item is added to a cart, an existing item’s quantity is updated, when the email changes during guest checkout or an existing item is deleted, the cart is modified triggering this webhook. The payload will include the ID of the cart being updated. <br> This webhook is also fired along with cart created because the first product being added to an empty cart triggers an update. <br> - Logging into customer account after creating a cart (email is inherited from customer account email) <br>- Entering email address via guest checkout <br> -Changing the email in guest checkout |\n| store/cart/deleted| This webhook will fire whenever a cart is deleted. This is can be either when all items have been removed from a cart and it was auto-deleted or it was explicitly removed via a DELETE request by an API consumer. This ends the lifecycle of the cart. The  `store/cart/updated`  webhook will also fire when the last item is removed.|\n| store/cart/couponApplied | This webhook will fire whenever a new coupon code is applied to a cart. It will include the ID of the coupon code |\n| store/cart/abandoned | This webhook will fire whenever a cart is considered abandoned. In the BigCommerce store settings if enabled this is usually set to one hour. [See Abandoned Cart](https://support.bigcommerce.com/articles/Public/Using-the-Abandoned-Cart-Saver/). |\n| store/cart/converted | If a cart has been converted. This will fire after a cart has been considered abandoned. |\n",
                              "header": {
                                "anchor": "cart"
                              }
                            },
                            {
                              "type": "code",
                              "data": "{\n    \"scope\": \"store/cart/lineItem/created\",\n    \"store_id\": \"12074048\",\n    \"data\": {\n        \"type\": \"cart_line_item\",\n        \"id\": \"c676e997-10fc-4049-bf18-1077a062e16d\",\n        \"cartId\": \"351a367f-4198-4108-996a-753ffc1bce21\"\n    },\n    \"hash\": \"23d6ae55d612514cbc3f79619535a184bbf10fc0\",\n    \"created_at\": 1518405112,\n    \"producer\": \"stores/ojgwnqqd0g\"\n}",
                              "header": {
                                "title": "store/cart/lineItem/created",
                                "anchor": "cart-lineitem-created"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "code",
                              "data": "{\n    \"scope\": \"store/cart/created\",\n    \"store_id\": \"12074048\",\n    \"data\": {\n        \"type\": \"cart\",\n        \"id\": \"6121f45e-e3d9-4fcf-828e-b507594a1f96\"\n    },\n    \"hash\": \"54eef7f35f37d770aefcb61c5d3f1df6ed0d5a31\",\n    \"created_at\": 1518403916,\n  ",
                              "header": {
                                "title": "store/cart/created",
                                "anchor": "cart-created"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Shipment\n\n| Name | Description |\n| --- | --- |\n| store/shipment/* | Subscribe to all store/shipment events |\n| store/shipment/created | Shipment is created |\n| store/shipment/updated | Shipment is updated |\n| store/shipment/deleted | Shipment is deleted |",
                              "header": {
                                "anchor": "shipment"
                              }
                            },
                            {
                              "type": "code",
                              "data": "{\n    \"scope\": \"store/shipment/created\",\n    \"store_id\": \"123456\",\n    \"data\": {\n        \"type\": \"shipment\",\n        \"id\": 12,\n        \"orderId\": \"319\"\n    },\n    \"hash\": \"a6bc11ea25e8f389a16ee919f0c0db6d4099d7de\",\n    \"created_at\": 1534951410,\n    \"producer\": \"stores/abcdefg\"\n}",
                              "header": {
                                "title": "store/shipment/created",
                                "anchor": "shipment-created"
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Catalog",
            "route": {
              "path": "/catalog"
            },
            "data": {
              "children": [
                {
                  "title": "Products",
                  "route": {
                    "path": "/products"
                  },
                  "data": {
                    "children": [
                      {
                        "title": "Products Overview",
                        "route": {
                          "path": "/products-overview"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Products Overview</h1>"
                            },
                            {
                              "type": "text",
                              "data": "<div id=\"no-index\">\n\t\n### On this page\n\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "The Catalog refers to a store’s collection of physical and digital products. The Catalog includes all the information about a product such as MPN, warranty, price, and images. "
                            },
                            {
                              "type": "text",
                              "data": "## [/catalog/products](/api-docs/api-reference/v3-api/catalog/getproducts)\n\nProducts are the primary catalog entity, and the primary function of the e-commerce platform is to sell products on the storefront and other selling channels.\n\nProducts can either be [Simple](#create-simple-product) or [Complex](#create-complex-product). \n\nProducts can also be Physical or Digital. \n\n* Physical products are typically products that exist in a physical form, have a weight, and are being sold by retailers with the intent of shipping them to customers. \n\n* Digital products, on the other hand, may not have a physical representation in the real world; this includes downloadable products such as computer software, ebooks, music, images, and other digital media. Alternatively, a digital product may be used to sell services such as spa treatments, consulting, and so forth - which also do not require shipping.",
                              "header": {
                                "anchor": "catalog-products"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "title": "Product Creation",
                                "body": "Only one Product can be created at a time."
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Create a Simple Product\n\nSimple products do not have any options, modifiers, or variants, and therefore cannot be configured or modified before they are added to cart. A simple product is its own variant. ",
                              "header": {
                                "anchor": "simple-product"
                              }
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{{CLIENT ID}}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "post",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products",
                                "body": "{\n  \"name\": \"BigCommerce Coffee Mug\",\n  \"price\": \"10.00\",\n  \"categories\": [\n    23,\n    21\n  ],\n  \"weight\": 4,\n  \"type\": \"physical\"\n}"
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to create your own Simple Product. Replace the test data with your own.",
                                "anchor": "code-create-simple-product"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "When options are created, it defaults to radio button as the display_type.",
                                "title": "Creating Options"
                              },
                              "header": {}
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Create a Complex Product\n\nComplex products have at least one option and may have modifiers or variants.",
                              "header": {
                                "anchor": "create-complex-product"
                              }
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{{CLIENT ID}}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "post",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products",
                                "body": "{\n  \"name\": \"BigCommerce Coffee Mug\",\n  \"price\": \"10.00\",\n  \"categories\": [\n    23,\n    21\n  ],\n  \"weight\": 4,\n  \"type\": \"physical\",\n  \"variants\": [\n    {\n      \"sku\": \"SKU-BLU\",\n      \"option_values\": [\n        {\n          \"option_display_name\": \"Mug Color\",\n          \"label\": \"Blue\"\n        }\n      ]\n    },\n    {\n      \"sku\": \"SKU-GRAY\",\n      \"option_values\": [\n        {\n          \"option_display_name\": \"Mug Color\",\n          \"label\": \"Gray\"\n        }\n      ]\n    }\n  ]\n}"
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to create your own test product. Replace the test data with your own.",
                                "anchor": "code-create-complex-product"
                              }
                            },
                            {
                              "type": "text",
                              "data": "Using this endpoint multiple variants can be added to the product when being created."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Digital Products\n\nDigital products are not physical items that are shipped out. Such as manuals, ebooks or music. Attached to a digital product is a Downloadable product file.\n\nDownloadable product files are intended for products of the “digital” type, typically for selling some kind of media file or software. They don’t have dimensions since an item is never shipped out.\n\nFiles must be added to digital products using the [Control Panel or using WebDav.](https://support.bigcommerce.com/articles/Public/Creating-Downloadable-Products/#adding-downloadable-product) Additional settings such as description of the file and maximum downloads can be set in the Control Panel.",
                              "header": {
                                "anchor": "digital-products"
                              }
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{{CLIENT ID}}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "post",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products",
                                "body": "{\n  \"name\": \"ebook: A Guide to Coffee\",\n  \"price\": \"10.00\",\n  \"categories\": [\n    23,\n    21\n  ],\n  \"type\": \"digital\",\n  \"images\": [\n    {\n      \"is_thumbnail\": true,\n      \"image_url\": \"https://your-custom-image/image_name.png\"\n    }\n  ]\n}"
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to create your own Digital Product. Replace the test data with your own.",
                                "anchor": "code-create-digital-product"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Webhooks Available\n\n| Name | Description |\n| --- | --- |\n| store/product/*| Subscribe to all store/product events |\n|store/product/deleted| Product is deleted|\n| store/product/created | A new product is created |\n| store/product/updated |Events that fire this webhook are below: |\n| _Brand Changed_ | _Product Type_ |\n| _Category_ | _Inventory_ |\n| _Number Sold_ | _Availibility_ |\n| _Thumbnail Changed_ | _Visibility_ |\n| _Featured_ | _Name_ |\n| _Description_ | _Sort Order_ |\n| _Price_ | _Dimensions_ |\n| _Condition_ | _Tax Price_ |\n| store/product/inventory/updated| Product inventory is updated. |\n| store/product/inventory/order/updated| When an order is placed and product inventory is changed. If subscribed the webhook will fire for products where inventory is being tracked by sku or not. |\n\n* See [About Webhooks](/api-docs/getting-started/webhooks/about-webhooks) for more on working with events.",
                              "header": {
                                "anchor": "available-webhooks"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "$ref": "./BigCommerce V3 API.oas2.yml#/definitions/ProductBase"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Images",
                        "route": {
                          "path": "/products-images"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Product Images</h1>"
                            },
                            {
                              "type": "text",
                              "data": "<div id=\"no-index\">\n\t\n### On this page\n\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## [/catalog/products/{product_id}/images](/api-docs/api-reference/v3-api/catalog/getproductimages)\n\nProduct images are used to show shoppers what they’re buying and merchandise products. When creating an image, `image_url` or an `image_file` can be passed in. \n\nIf using `image_file` Content-Type needs to be set to \nContent-Type: multipart/form-data. Any other updates using the /POST or /PUT will be rejected with the form-data.",
                              "header": {}
                            },
                            {
                              "type": "http",
                              "data": {
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/images",
                                "headers": {
                                  "Accepts": "application/json",
                                  "X-Auth-Client": "{CLIENT ID}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}",
                                  "Content-Type": "application/json"
                                },
                                "method": "put",
                                "body": "{\n \"is_thumbnail\": true,\n  \"sort_order\": 1,\n  \"description\": \"Yellow Large Bath Towel\",\n  \"image_url\": \"https://your-custom-image/image_name.png\"\n}"
                              },
                              "header": {
                                "title": "Try it Now",
                                "subtitle": "Use this to add a Image to your Product. Replace the test data with your own.",
                                "anchor": "code-add-product-image"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Create Multiple Images\n\nA product can support multiple images. When adding images, more than one can be added by expanding the images array.",
                              "header": {
                                "anchor": "create-multiple-images"
                              }
                            },
                            {
                              "type": "http",
                              "data": {
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/images",
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{CLIENT ID}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "put",
                                "body": "{\n\"images\":[\n\t\t\t{\n\t\t\t\t\"is_thumbnail\": true,\n\t\t\t\t\"image_url\": \"https://your-custom-image/image_name.png\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"is_thumbnail\": false,\n\t\t\t\t\"image_url\": \"https://your-custom-image/image_name.png\"\n\t\t\t}\n\t\t]\n}"
                              },
                              "header": {
                                "title": "Try it Now",
                                "subtitle": "Use this to add a Multiple Images to your Product. Replace the test data with your own.",
                                "anchor": "code-add-multiple-images"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Product Thumbnails\n\nOnly one image can be the product thumbnail. The product thumbnail is the image that shows on the product listing page, in search results and any other location that features the product. If only one image is on the product it becomes both the thumbnail and the main product image. Images can also be added to [variants](/api-docs/catalog/products/product-variants). "
                            },
                            {
                              "type": "code",
                              "data": "{\n    \"data\": {\n        \"id\": 382,\n        \"product_id\": 158,\n        \"is_thumbnail\": true,\n        \"sort_order\": 0,\n        \"description\": \"\",\n        \"image_file\": \"a/521/foglinenbeigestripetowel1b_1024x1024__83011__60806.jpg\",\n        \"url_zoom\": \"https://cdn8.bigcommerce.com/s-{{store_hash}}/products/158/images/382/foglinenbeigestripetowel1b_1024x1024__83011__60806.1534344511.1280.1280.jpg?c=2\",\n        \"url_standard\": \"https://cdn8.bigcommerce.com/s-{{store_hash}}/products/158/images/382/foglinenbeigestripetowel1b_1024x1024__83011__60806.1534344511.560.850.jpg?c=2\",\n        \"url_thumbnail\": \"https://cdn8.bigcommerce.com/s-{{store_hash}}/products/158/images/382/foglinenbeigestripetowel1b_1024x1024__83011__60806.1534344511.330.500.jpg?c=2\",\n        \"url_tiny\": \"https://cdn8.bigcommerce.com/s-{{store_hash}}/products/158/images/382/foglinenbeigestripetowel1b_1024x1024__83011__60806.1534344511.66.100.jpg?c=2\",\n        \"date_modified\": \"2018-08-15T14:48:31+00:00\"\n    },\n    \"meta\": {}\n}",
                              "header": {
                                "title": "Thumbnails",
                                "subtitle": "/GET https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/{{product_id}}/images/{{images_id}}",
                                "anchor": "code-get-product-images"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "$ref": "./BigCommerce V3 API.oas2.yml#/definitions/ProductImageBase"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Videos",
                        "route": {
                          "path": "/product-videos"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Product Videos</h1>"
                            },
                            {
                              "type": "text",
                              "data": "<div id=\"no-index\">\n\t\n### On this page\n\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## [/catalog/products/{product_id}/videos](/api-docs/api-reference/v3-api/catalog/getproductvideos)\n\nProduct Videos, in addition to images, can help shoppers understand what they’re buying and help sell the product. A product can have more than one video.\n\n* Product videos must be hosted on YouTube. The video_id corresponds to the “v” parameter in a video url. \n\nExample: https://www.youtube.com/watch?v=***R12345677***\n",
                              "header": {
                                "anchor": "product-video-introduction"
                              }
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accept": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{CLIENT ID}",
                                  "X-Auth-Token": "{ACCESS TOKEN}"
                                },
                                "method": "put",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/videos",
                                "body": "{\n  \"title\": \"BigCommerce Mug Video\",\n  \"description\": \"Video Describing the Mug\",\n  \"sort_order\": 1,\n  \"type\": \"youtube\",\n  \"video_id\": \"123345AA\"\n}"
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to add a Video to your Product. Replace the test data with your own.",
                                "anchor": "code-add-product-video"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "$ref": "./BigCommerce V3 API.oas2.yml#/definitions/ProductVideoBase"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Custom Fields",
                        "route": {
                          "path": "/product-custom-fields"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Custom Fields</h1>"
                            },
                            {
                              "type": "text",
                              "data": "<div id=\"no-index\">\n\t\n### On this page\n\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## [/catalog/products/{product_id}/custom-fields](/api-docs/api-reference/v3-api/catalog/getcustomfields)\n\nCustom fields are a feature intended for product specifications, in a key: value arrangement. As an example, there might be fields indicating technical specifications about an LED TV  such as screen size, maximum resolution, HDR support, etc. Alternatively, if selling wine, I might use Custom Fields for specifications such as vintage, region, grape, etc. Custom fields can not be used to add rules such as changing the weight or price of a product. ",
                              "header": {
                                "anchor": "custom-fields-overview"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "There is a limit of 250 characters for custom field values."
                              }
                            },
                            {
                              "type": "text",
                              "data": "Custom Fields are intended to be used in a couple of contexts:\n\n* Displaying specifications on the product detail page and on the product listing pages such as category and brand pages.\n* Powering faceted search (searching/filtering by custom field values)"
                            },
                            {
                              "type": "http",
                              "data": {
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/custom-fields",
                                "method": "put",
                                "body": "{\n  \"name\": \"Release Year\",\n  \"value\": \"2018\"\n}",
                                "headers": {
                                  "Accept": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{CLIENT ID}",
                                  "X-Auth-Token": "{ACCESS TOKEN}"
                                }
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to add a Custom Field to your Product. Replace the test data with your own.",
                                "anchor": "code-add-custom-field"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "$ref": "./BigCommerce V3 API.oas2.yml#/definitions/CustomFieldBase"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Bulk Pricing Rules",
                        "route": {
                          "path": "/product-bulk-pricing"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Bulk Pricing Rules</h1>"
                            },
                            {
                              "type": "text",
                              "data": "<div id=\"no-index\">\n\t\n### On this page\n\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## [catalog/products/product_id/bulk-pricing-rules](/api-docs/api-reference/v3-api/catalog/getbulkpricingrules)\n\nBulk Pricing Rules are intended for merchants who want to offer wholesale discounts for buying in bulk. They apply once products are added to cart, but they are displayed as a callout on the storefront to let shoppers know how they can save.\n\nBulk Pricing rules in the catalog are on the product, meaning that they’ll trigger even if several different variants of the product are in the cart, as long as the total quantity of those variants meets one of the quantity breaks. [Price List bulk pricing](http://) works differently."
                            },
                            {
                              "type": "http",
                              "data": {
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/bulk-pricing-rules",
                                "method": "put",
                                "body": "{\n  \"bulk_pricing_rules\": [\n    {\n      \"quantity_min\": 10,\n      \"quantity_max\": 15,\n      \"type\": \"price\",\n      \"amount\": 3\n    },\n    {\n      \"quantity_min\": 16,\n      \"quantity_max\": 25,\n      \"type\": \"price\",\n      \"amount\": 5\n    }\n  ]\n}",
                                "headers": {
                                  "Accept": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{CLIENT ID}",
                                  "X-Auth-Token": "{ACCESS TOKEN}"
                                }
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to add Bulk Pricing Rules to your Product. Replace the test data with your own.",
                                "anchor": "code-add-bulk-pricing-rules"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "$ref": "./BigCommerce V3 API.oas2.yml#/definitions/BulkPricingRuleBase"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Variant Options",
                        "route": {
                          "path": "/product-variant-options"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Variant Options</h1>"
                            },
                            {
                              "type": "text",
                              "data": "<div id=\"no-index\">\n\t\n### On this page\n\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## [/catalog/products/product_id/options](/api-docs/api-reference/v3-api/catalog/getoptions)\n\nVariant options are any choices that the shopper needs to make that will result in the selection of a variant. Color and Size are typical examples of Variant Options.  A t-shirt can have different combinations of sizes and colors.  \n\nExample:\n* Color is a Variant Option while Red, Orange, and Green are Variant Option Values\n* Size is a Variant Option while Small, Medium, and Large are Variant Option Values\n\nThe combination of Small & Red is what is selected on the storefront and correlates to a product variation also called a SKU. \n \n**Variant options:**\n\n* Require the shopper to select a value\n* Only support “multiple choice” option types\n* Rectangle\n* Radio button\n* Color swatch\n* Product pick list\n* Product pick list w/ images\n* Will automatically generate variants when created in the CP\n* Are auto-generated from variants when a product is created with variants via V3 API Product /POST"
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Options created on V2 and V3\n\n* Variant options created on V3 cannot be cannot be accessed from the Control Panel. They can only be accessed via the API.\n* If a product has options that were created using the V2 API, additional options cannot be added using the V3 API.\n* SKU's in V@ map to variants in V3.\n* Base variants are not SKU's in V2.",
                              "header": {
                                "anchor": "option-v2-v3"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "Creating a variant option does not automatically create SKUs or build out variants. SKUs can be built out later using the [variants end-point]()."
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Create Variant Options\nThe following request will create options, but the SKU’s are not updated and they are not a variant on the product. Variant SKUs must be created with a separate request. Variant options will show on the storefront as an option that can be selected by the customer. A request like this could be used to add new choices to a variant that has already been created."
                            },
                            {
                              "type": "code",
                              "data": "{\n   \"product_id\": 134,\n   \"name\": \"Size Rectangle\",\n   \"display_name\": \"Size\",\n   \"type\": \"rectangles\",\n         \"option_values\": [\n             {\n                 \"label\": \"S\",\n                 \"sort_order\": 0,\n                 \"is_default\": false\n             },\n             {\n                 \"label\": \"M\",\n                 \"sort_order\": 1,\n                 \"is_default\": true\n             },\n             {\n                 \"label\": \"L\",\n                 \"sort_order\": 2,\n                 \"is_default\": false\n             }\n         ]\n }",
                              "header": {
                                "title": "Create Size Variant Option",
                                "subtitle": "/POST https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/options",
                                "anchor": "create-size-variant"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "Variants can only be created one at a time using this endpoint. Use the /catalog/products to add more than one variant when creating a product."
                              }
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{{CLIENT ID}}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "post",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/options",
                                "body": "{\n  \"product_id\": 134,\n  \"name\": \"Colors\",\n  \"display_name\": \"Color\",\n  \"type\": \"swatch\",\n  \"sort_order\": 1,\n  \"option_values\": [\n    {\n      \"label\": \"Blue\",\n      \"sort_order\": 1,\n      \"value_data\": {\n        \"colors\": [\n          \"#123c91\"\n        ]\n      },\n      \"is_default\": false\n    },\n    {\n      \"label\": \"Green\",\n      \"sort_order\": 2,\n      \"value_data\": {\n        \"colors\": [\n          \"#0f961e\"\n        ]\n      },\n      \"is_default\": false\n    },\n    {\n      \"label\": \"Red\",\n      \"sort_order\": 3,\n      \"value_data\": {\n        \"colors\": [\n          \"#e60c0c\"\n        ]\n      },\n      \"is_default\": false\n    }\n  ]\n}"
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to add Varaint Options to your Product. Replace the test data with your own.",
                                "anchor": "code-create-color-variant"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "$ref": "./BigCommerce V3 API.oas2.yml#/definitions/OptionBase"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Variants",
                        "route": {
                          "path": "/product-variants"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Product Variants</h1>"
                            },
                            {
                              "type": "text",
                              "data": "<div id=\"no-index\">\n\t\n### On this page\n\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## [/catalog/products/product_id/variants](/api-docs/api-reference/v3-api/catalog/getvariantsbyproductid)\n\nVariants represent an item as it sits on the shelf in the warehouse or a particular saleable product. A product might be a t-shirt, while the variant would be “a small, red t-shirt”. Variants are selected by shoppers on the storefront via Product Options. In the case where a product is simple, meaning it does not have any options, the product is its own variant - called a base variant. Everything you can buy should be a variant.\n\n* Options build out variants. \n* Variants are usually what inventory is tracked against \n* Can have their own price, weight, dimensions, image, etc - or they can inherit these values from the product if they have not been specified\n* Must have a SKU code (unless they’re a base variant)\n* In the case of non-base variants, variants will relate to a particular combination of variant option values - such as “small” and “red”",
                              "header": {
                                "anchor": "variants"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "type": "warning",
                                "body": "When a variant option is created, they can not be accessed from the Control Panel. They can only be changed or updated via the API. "
                              }
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1535652849070",
                              "header": {
                                "subtitle": "Variant Creation Workflow"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Create a Variant\nVariants can be created in two ways:\n* From existing variant options using the variant options endpoint. [v3/catalog/products/{product_id}/options ](http://)\n* By adding the variants with variant options and skus when creating the product. See [Create a Complex Product](http://).\n\nThis will go over using existing variant options to create the variants.\n\nUse the `https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/131/options` endpoint to get the option information."
                            },
                            {
                              "type": "code",
                              "data": "{\n    \"data\": [\n        {\n            \"id\": 193,\n            \"product_id\": 134,\n            \"name\": \"Size1533313432-134\",\n            \"display_name\": \"Size\",\n            \"type\": \"rectangles\",\n            \"sort_order\": 0,\n            \"option_values\": [\n                {\n                    \"id\": 163,\n                    \"label\": \"S\",\n                    \"sort_order\": 0,\n                    \"value_data\": null,\n                    \"is_default\": false\n                },\n                {\n                    \"id\": 164,\n                    \"label\": \"M\",\n                    \"sort_order\": 1,\n                    \"value_data\": null,\n                    \"is_default\": true\n                },\n                {\n                    \"id\": 165,\n                    \"label\": \"L\",\n                    \"sort_order\": 2,\n                    \"value_data\": null,\n                    \"is_default\": false\n                }\n            ],\n            \"config\": []\n        },\n        {\n            \"id\": 194,\n            \"product_id\": 134,\n            \"name\": \"Color1533313946-134\",\n            \"display_name\": \"Color\",\n            \"type\": \"swatch\",\n            \"sort_order\": 1,\n            \"option_values\": [\n                {\n                    \"id\": 166,\n                    \"label\": \"Blue\",\n                    \"sort_order\": 1,\n                    \"value_data\": {\n                        \"colors\": [\n                            \"#123C91\"\n                        ]\n                    },\n                    \"is_default\": false\n                },\n                {\n                    \"id\": 167,\n                    \"label\": \"Green\",\n                    \"sort_order\": 2,\n                    \"value_data\": {\n                        \"colors\": [\n                            \"#0F961E\"\n                        ]\n                    },\n                    \"is_default\": false\n                },\n                {\n                    \"id\": 168,\n                    \"label\": \"Red\",\n                    \"sort_order\": 3,\n                    \"value_data\": {\n                        \"colors\": [\n                            \"#E60C0C\"\n                        ]\n                    },\n                    \"is_default\": false\n                }\n            ],\n            \"config\": []\n        }\n    ],\n    \"meta\": {\n        \"pagination\": {\n            \"total\": 2,\n            \"count\": 2,\n            \"per_page\": 50,\n            \"current_page\": 1,\n            \"total_pages\": 1,\n            \"links\": {\n                \"current\": \"?page=1&limit=50\"\n            }\n        }\n    }\n}",
                              "header": {
                                "title": "Example Response",
                                "subtitle": "/GET https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/options",
                                "anchor": "product-option-response"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "http",
                              "data": {
                                "method": "get",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/options",
                                "headers": {
                                  "X-Auth-Client": "{CLIENT ID}",
                                  "X-Auth-Token": "{ACCESS TOKEN}",
                                  "Content-Type": "application/json",
                                  "Accept": "application/json"
                                }
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Get Variant Options",
                                "anchor": "code-get-variant-options"
                              }
                            },
                            {
                              "type": "text",
                              "data": "In the above response, there are two variant options of size and color with three values each. \n\nTo combine the variant option values into variants and build out SKU’s use the following endpoint:\n\n`https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/131/variants`"
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "Variants need to be created one at a time using this endpoint. Only one variant option at a time can be created; individual variant options will contain an array of multiple values. To use a variant array and create them at the same time use the [/catalog/product]() endpoint during product creation."
                              }
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{{CLIENT ID}}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "put",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/variants",
                                "body": "{\n  \"cost_price\": 3,\n  \"price\": 12.99,\n  \"retail_price\": 15.99,\n  \"weight\": 1,\n  \"width\": 4,\n  \"height\": 14.6,\n  \"depth\": 22,\n  \"is_free_shipping\": true,\n  \"purchasing_disabled\": true,\n  \"purchasing_disabled_message\": \"This item not available at this time.\",\n  \"product_id\": 134,\n  \"sku\": \"SMALL-BLUE\",\n  \"option_values\": [\n    {\n      \"id\": 163,\n      \"option_id\": 193\n    },\n    {\n      \"id\": 166,\n      \"option_id\": 194\n    }\n  ]\n}"
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to add Variants to your Product . Replace the test data with your own.",
                                "anchor": "code-create-variants"
                              }
                            },
                            {
                              "type": "text",
                              "data": "The option_values array is a combination of Small and Blue. Together they create the SKU SMALL-BLUE. The id in the option_values array is the id from the variant option response option_values > id. The option_id is the id of the option. \n\n```\n {\n            \"id\": 193, //option_id\n            \"product_id\": 134,\n            \"name\": \"Size1533313432-134\",\n            \"display_name\": \"Size\",\n            \"type\": \"rectangles\",\n            \"sort_order\": 0,\n            \"option_values\": [\n                {\n                    \"id\": 163, //id\n                    \"label\": \"S\",\n                    \"sort_order\": 0,\n                    \"value_data\": null,\n                    \"is_default\": false\n                }\n\t\t\t\t\t\t\t\t...\n```"
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Create a Variant using the Products endpoint. \n\nThe following example creates a base product, variant options, and variants in a single call to the /products endpoint. You can use this method to create a product and its variants in a single call without creating variant options first, but not all option types are supported by this method."
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "Swatch, Radio Buttons, Rectangle, dropdown, Product List and Product List with Images. ",
                                "title": "Supported Types"
                              }
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{{CLIENT ID}}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "post",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products",
                                "body": "{\n  \"name\": \"BigCommerce Coffee Mug\",\n  \"price\": \"10.00\",\n  \"categories\": [\n    23,\n    21\n  ],\n  \"weight\": 4,\n  \"type\": \"physical\",\n  \"variants\": [\n    {\n      \"sku\": \"SKU-BLU\",\n      \"option_values\": [\n        {\n          \"option_display_name\": \"Mug Color\",\n          \"label\": \"Blue\"\n        }\n      ]\n    },\n    {\n      \"sku\": \"SKU-GRAY\",\n      \"option_values\": [\n        {\n          \"option_display_name\": \"Mug Color\",\n          \"label\": \"Gray\"\n        }\n      ]\n    }\n  ]\n}"
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to create your own Product using the products endpoint . Replace the test data with your own.",
                                "anchor": "create-variants-using-products-endpoint"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "$ref": "./BigCommerce V3 API.oas2.yml#/definitions/VariantBase"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Modifier Options",
                        "route": {
                          "path": "/modifier-options"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Modifier Options</h1>"
                            },
                            {
                              "type": "text",
                              "data": "<div id=\"no-index\">\n\t\n### On this page\n\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## [/catalog/products/{{product_id}}/modifiers](/api-docs/api-reference/v3-api/catalog/getmodifiers)\n\nModifier options are any choices that the shopper can make that will change the way the merchant fulfills the product. Examples include:\n* A checkbox to add shipping insurance\n* Text to be engraved on the product\n* A color that an unfinished product is to be painted before it’s shipped\n \nCritically, the modifier will not change the SKU/variant being fulfilled, and you cannot track inventory against combinations of modifier values. Modifiers typically would not change which product is “picked off the shelf” in the warehouse, but they change what happens to that product before it’s sent to the shopper, or how it’s sent.\n \nModifier options:\n* May be required or non-required\n* Support all option types\n* Cannot be used as part of a variant\n* \nAn adjuster can be added to a modifier option to change things such as adding to the price, changing the weight or shipping rules.  Adjusters cannot be applied to all modifiers."
                            },
                            {
                              "type": "callout",
                              "data": {
                                "title": "Modifiers that use Adjusters",
                                "body": "Swatch, radio buttons, rectangle list, drop-down, product list, product list with images"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Add a modifier to an existing product with price adjuster\n\nThe following example shows how to add a modifier - checkbox with a price adjuster - increase price by five dollars. Checkboxes have to made in two steps.  The reason is that it creates more than one modifier. A checkbox is a yes or no which is listed as two different `option_values`. ",
                              "header": {}
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "swatch, radio buttons, drop-down, rectangle list, product list, product list with images, and checkbox.",
                                "title": "Modifiers that have to be created in two steps"
                              }
                            },
                            {
                              "type": "text",
                              "data": "First, a POST to create the modifier. "
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{{CLIENT ID}}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "put",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/modifiers",
                                "body": "{\n  \"type\": \"checkbox\",\n  \"required\": false,\n  \"config\": {\n    \"default_value\": \"Yes\",\n    \"checked_by_default\": false,\n    \"checkbox_label\": \"Check for Donation\"\n  },\n  \"display_name\": \"Add a $5 Donation\"\n}"
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to add a Modifier to your Product. Replace the test data with your own.",
                                "anchor": "code-create-modifier"
                              }
                            },
                            {
                              "type": "text",
                              "data": "Since this is a checkbox which has two states, checked/unchecked or yes/no two option values are created. The adjuster values are null. "
                            },
                            {
                              "type": "code",
                              "data": "{\n    \"data\": [\n        {\n            \"id\": 160,\n            \"product_id\": 131,\n            \"name\": \"Add-a-$5-Donation1535039590-191\",\n            \"display_name\": \"Add a $5 Donation\",\n            \"type\": \"checkbox\",\n            \"required\": false,\n            \"config\": {\n                \"checkbox_label\": \"Check for Donation\",\n                \"checked_by_default\": false\n            },\n            \"option_values\": [\n                {\n                    \"id\": 149,\n                    \"option_id\": 160,\n                    \"label\": \"Yes\",\n                    \"sort_order\": 0,\n                    \"value_data\": {\n                        \"checked_value\": true\n                    },\n                    \"is_default\": false,\n                    \"adjusters\": {\n                        \"price\": {\n                            \"adjuster\": null,\n                            \"adjuster_value\": null\n                        },\n                        \"weight\": null,\n                        \"image_url\": \"\",\n                        \"purchasing_disabled\": {\n                            \"status\": false,\n                            \"message\": \"\"\n                        }\n                    }\n                },\n                {\n                    \"id\": 150,\n                    \"option_id\": 160,\n                    \"label\": \"No\",\n                    \"sort_order\": 1,\n                    \"value_data\": {\n                        \"checked_value\": false\n                    },\n                    \"is_default\": true,\n                    \"adjusters\": {\n                        \"price\": null,\n                        \"weight\": null,\n                        \"image_url\": \"\",\n                        \"purchasing_disabled\": {\n                            \"status\": false,\n                            \"message\": \"\"\n                        }\n                    }\n                }\n            ]\n        }\n    ],\n    \"meta\": {\n        \"pagination\": {\n            \"total\": 1,\n            \"count\": 1,\n            \"per_page\": 50,\n            \"current_page\": 1,\n            \"total_pages\": 1,\n            \"links\": {\n                \"current\": \"?page=1&limit=50\"\n            }\n        }\n    }\n}\n",
                              "header": {
                                "title": "Response",
                                "anchor": "code-response-create-modifier",
                                "subtitle": "Create Modifier Option"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "text",
                              "data": "Then a PUT to update the modifier value created. This increases the price by $5 when the yes modifier is selected."
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{{CLIENT ID}}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "put",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/modifiers/{modifier_id}/values",
                                "body": "{\n  \"is_default\": false,\n  \"adjusters\": {\n    \"price\": {\n      \"adjuster\": \"relative\",\n      \"adjuster_value\": 5\n    }\n  }\n}"
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to add Modifer Values to your Product. Replace the test data with your own.",
                                "anchor": "code-create-modifer-values"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## 422 Error\n\n```\n{\n    \"status\": 422,\n    \"title\": \"The product is currently associated with an option set, please remove it before editing an option or modifier.\",\n    \"type\": \"https://developer.bigcommerce.com/api#api-status-codes\",\n    \"errors\": {\n        \"product_id\": \"The product is currently associated with an option set, please remove it before editing an option or modifier.\"\n    }\n}\n```\n\nTo fix this error:\n* Modify the products using the V2 API\n* Remove the option set using the V2 API or the Control Panel, then remake the variants and modifiers using V3"
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "$ref": "./BigCommerce V3 API.oas2.yml#/definitions/ModifierBase"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Complex Rules",
                        "route": {
                          "path": "/product-complex-rules"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Complex Rules</h1>"
                            },
                            {
                              "type": "text",
                              "data": "<div id=\"no-index\">\n\t\n### On this page\n\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## [/catalog/products/product_id/complex-rules](/api-docs/api-reference/v3-api/catalog/getcomplexrules)\n\nComplex rules allow merchants to set up conditions and actions based on shopper option selections on the storefront. You can use them to vary the following based on option selections made by the shopper:\n* Price\n* Weight\n* Image\n* Purchasability\n\nAdjustments made by complex rules are displayed to shoppers in real-time on the storefront.\n\nFor the majority of merchant use cases, **best practice** will be to either assign values (such as a price) directly to a variant or use adjusters on the modifier option itself. However complex rules exist for rare cases where a rule condition is too complex to express in those forms easily. \n\nUse complex rules when an adjustment should be triggered by:\n* The selection of values across multiple modifier options\n* The combination of a particular variant/SKU and a modifier option value."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Adding a complex rule to a modifier\n\nComplex rules must be based on a combination of two or more modifiers, such as two checkboxes. The following example will add $10 to the product price when both boxes are checked. \n"
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{{CLIENT ID}}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "put",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/complex-rules",
                                "body": "{\n  \"product_id\": 1200,\n  \"enabled\": true,\n  \"price_adjuster\": {\n    \"adjuster_value\": 10\n  },\n  \"conditions\": [\n    {\n      \"modifier_id\": 506,\n      \"modifier_value_id\": 852\n    },\n    {\n      \"modifier_id\": 507,\n      \"modifier_value_id\": 854\n    }\n  ]\n}"
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to add a Complex Rules to a Modifier. Replace the test data with your own.",
                                "anchor": "code-add-complex-rule-modifier"
                              }
                            },
                            {
                              "type": "text",
                              "data": "Complex rules must consist of multiple conditions that trigger the rule adjustment. If multiple conditions are not specified, the request will return a 422 Unprocessable Entity.\n\n```\n{\n    \"status\": 422,\n    \"title\": \"The rule must contain multiple modifier conditions with unique modifier ids or a variant condition and modifier condition\",\n    \"type\": \"https://developer.bigcommerce.com/api#api-status-codes\"\n}\n```\n"
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "$ref": "./BigCommerce V3 API.oas2.yml#/definitions/ComplexRuleBase"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Metafields",
                        "route": {
                          "path": "/product-metafields"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Product Metafields</h1>"
                            },
                            {
                              "type": "text",
                              "data": "<div id=\"no-index\">\n\t\n### On this page\n\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## [/catalog/products/131/metafields](/api-docs/api-reference/v3-api/catalog/getproductmetafieldsbyproductid)\n\nMetafields allow a developer to setup key and namespace pairs. The data does not appear in the storefront or the control panel. This is useful for when information needs to be passed back and forth between an app and the store. \n\nMetafields can be added to variants, products, categories, and brands."
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{{CLIENT ID}}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "put",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/metafields",
                                "body": "{\n  \"permission_set\": \"read\",\n  \"namespace\": \"Location\",\n  \"key\": \"bin_number\",\n  \"value\": \"#4456\",\n  \"description\": \"location of the product\",\n  \"resource_type\": \"product\",\n  \"resource_id\": 131\n}"
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to add a Metafield to your Product. Replace the test data with your own.",
                                "anchor": "code-add-metafield"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "$ref": "./BigCommerce V3 API.oas2.yml#/definitions/MetafieldBase"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Reviews",
                        "route": {
                          "path": "/product-reviews"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Product Reviews</h1>"
                            },
                            {
                              "type": "text",
                              "data": "<div id=\"no-index\">\n\t\n### On this page\n\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## [/catalog/products/product_id/reviews](/api-docs/api-reference/v3-api/catalog/getproductreviews)\n\nA product review is used to give shoppers the option to rate the products they have purchased. The reviews are located on the same page as the product. \n\nReviews are not able to be created in the control panel, but they can be created via API. Creating them via API is useful if you are migrating to BigCommerce and do not want to lose existing reviews. Product Reviews are native to the platform but can be turned off in favor of a custom setup."
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{{CLIENT ID}}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "post",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products",
                                "body": "{\n  \"title\": \"Great Coffee Mug\",\n  \"text\": \"This coffee mug kept my liquids hot for several hours.\",\n  \"status\": \"pending\",\n  \"rating\": 5,\n  \"email\": \"testing@bigcommerce.com\",\n  \"name\": \"BigCommerce\",\n  \"date_reviewed\": \"2018-07-20T17:45:13+00:00\"\n}\n"
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to create a Product Review. Replace the test data with your own.",
                                "anchor": "code-create-product-review"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "$ref": "./BigCommerce V3 API.oas2.yml#/definitions/ProductReviewBase"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Brands",
                        "route": {
                          "path": "/brands"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Brands</h1>"
                            },
                            {
                              "type": "text",
                              "data": "<div id=\"no-index\">\n\t\n### On this page\n\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## [/catalog/brands](/api-docs/api-reference/v3-api/brands/getbrands)\n\nBrands are another form of catalog taxonomy, similar to Categories. However, there are a few differences.\n\n* Exist as a single “list” on the store, with no tree structure\n* Can only have a single assignment to a product; a product may have at most one brand, but a brand can have many products.\n \nThey’re primarily used to tag products so that consumers can find Brands they’re interested in (such as Nike shoes). Brands have their own page on the storefront which shows all the products in that Brand. They’re also used as part of faceted search navigation."
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{{CLIENT ID}}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "post",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/brands",
                                "body": "{\n  \"name\": \"BigCommerce\",\n  \"page_title\": \"BigCommerce\",\n  \"meta_keywords\": [\n    \"ecommerce\",\n    \"best in class\",\n    \"grow your business\"\n  ],\n  \"image_url\": \"https://your-custom-image.png\"\n}"
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to create your own Brand. Replace the test data with your own.",
                                "anchor": "code-create-brand"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "$ref": "./BigCommerce V3 API.oas2.yml#/definitions/BrandBase"
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Categories",
                  "route": {
                    "path": "/categories"
                  },
                  "data": {
                    "blocks": [],
                    "children": [
                      {
                        "title": "Categories Overview",
                        "route": {
                          "path": "/categories-overview"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Categories Overview</h1>"
                            },
                            {
                              "type": "text",
                              "data": "<div id=\"no-index\">\n\t\n### On this page\n\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## [/catalog/categories](http://)\n\nCategories are a hierarchy of products available on the store, presented in a tree structure. Currently, a store’s category structure determines the primary menu structure of most storefront themes, which are directly tied to it.\n\nAll products must be associated with at least one Category, although a Category does not need to have any products. Unlike some e-commerce platforms, products on BigCommerce can be associated with more than one Category. \n\nA product associated with categories does not currently have any priority or weighted order (there’s no “primary category”), which can make it difficult to integrate with some external systems which might wish to use a product’s categories to map to a category structure in that external system."
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{{CLIENT ID}}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "post",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products",
                                "body": "{\n  \"parent_id\": 18,\n  \"name\": \"Shoes\",\n  \"description\": \"Shoes Available for purchase\",\n  \"sort_order\": 1,\n  \"page_title\": \"Shoes\",\n  \"is_visible\": true\n}\n"
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Create a Category. Replace the test data with your own."
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "$ref": "./BigCommerce V3 API.oas2.yml#/definitions/CategoryBase"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Category Tree",
                        "route": {
                          "path": "/category-tree"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Category Tree</h1>"
                            },
                            {
                              "type": "text",
                              "data": "<div id=\"no-index\">\n\t\n### On this page\n\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## /catalog/categories/tree\n\nThe Category Tree returns a simple view of the parent > child relationship of all categories in the store. This endpoint can be used to fetch the categories if building out a custom navigation for a store."
                            },
                            {
                              "type": "code",
                              "data": "{\n    \"data\": [\n        {\n            \"id\": 33,\n            \"parent_id\": 0,\n            \"name\": \"Clothing\",\n            \"is_visible\": true,\n            \"url\": \"/clothing/\",\n            \"children\": []\n        },\n        {\n            \"id\": 23,\n            \"parent_id\": 0,\n            \"name\": \"Shop All\",\n            \"is_visible\": true,\n            \"url\": \"/shop-all/\",\n            \"children\": []\n        },\n        {\n            \"id\": 25,\n            \"parent_id\": 0,\n            \"name\": \"Towels\",\n            \"is_visible\": true,\n            \"url\": \"/towels/\",\n            \"children\": [\n                {\n                    \"id\": 26,\n                    \"parent_id\": 25,\n                    \"name\": \"Bath Towels\",\n                    \"is_visible\": true,\n                    \"url\": \"/towels/bath-towels/\",\n                    \"children\": [\n                        {\n                            \"id\": 30,\n                            \"parent_id\": 26,\n                            \"name\": \"Bath Towels\",\n                            \"is_visible\": true,\n                            \"url\": \"/towels/bath-towels/bath-towels/\",\n                            \"children\": []\n                        },\n                        {\n                            \"id\": 29,\n                            \"parent_id\": 26,\n                            \"name\": \"Hand Towels\",\n                            \"is_visible\": true,\n                            \"url\": \"/towels/bath-towels/hand-towels/\",\n                            \"children\": [\n                                {\n                                    \"id\": 31,\n                                    \"parent_id\": 29,\n                                    \"name\": \"Washcloths\",\n                                    \"is_visible\": true,\n                                    \"url\": \"/towels/bath-towels/hand-towels/wash-cloths/\",\n                                    \"children\": []\n                                }\n                            ]\n                        }\n                    ]\n                },\n                {\n                    \"id\": 28,\n                    \"parent_id\": 25,\n                    \"name\": \"Beach Towels\",\n                    \"is_visible\": true,\n                    \"url\": \"/towels/beach-towels/\",\n                    \"children\": []\n                },\n                {\n                    \"id\": 27,\n                    \"parent_id\": 25,\n                    \"name\": \"Kitchen Towels\",\n                    \"is_visible\": true,\n                    \"url\": \"/towels/kitchen-towels/\",\n                    \"children\": []\n                }\n            ]\n        },\n        {\n            \"id\": 18,\n            \"parent_id\": 0,\n            \"name\": \"Bath\",\n            \"is_visible\": true,\n            \"url\": \"/bath/\",\n            \"children\": [\n                {\n                    \"id\": 34,\n                    \"parent_id\": 18,\n                    \"name\": \"Shoes\",\n                    \"is_visible\": true,\n                    \"url\": null,\n                    \"children\": []\n                }\n            ]\n        },\n        {\n            \"id\": 32,\n            \"parent_id\": 0,\n            \"name\": \"Hoodies\",\n            \"is_visible\": true,\n            \"url\": \"/hoodies/\",\n            \"children\": []\n        },\n        {\n            \"id\": 19,\n            \"parent_id\": 0,\n            \"name\": \"Garden\",\n            \"is_visible\": true,\n            \"url\": \"/garden/\",\n            \"children\": []\n        },\n        {\n            \"id\": 21,\n            \"parent_id\": 0,\n            \"name\": \"Kitchen\",\n            \"is_visible\": true,\n            \"url\": \"/kitchen/\",\n            \"children\": []\n        },\n        {\n            \"id\": 20,\n            \"parent_id\": 0,\n            \"name\": \"Publications\",\n            \"is_visible\": true,\n            \"url\": \"/publications/\",\n            \"children\": []\n        },\n        {\n            \"id\": 22,\n            \"parent_id\": 0,\n            \"name\": \"Utility\",\n            \"is_visible\": true,\n            \"url\": \"/utility/\",\n            \"children\": []\n        }\n    ],\n    \"meta\": {}\n}\n",
                              "header": {
                                "title": "Category Tree Response Example",
                                "anchor": "code-example-get-category-tree"
                              }
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{{CLIENT ID}}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "get",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/summary",
                                "body": "{\n  \"name\": \"BigCommerce Coffee Mug\",\n  \"price\": \"10.00\",\n  \"categories\": [\n    23,\n    21\n  ],\n  \"weight\": 4,\n  \"type\": \"physical\"\n}"
                              },
                              "header": {
                                "title": "Try It Now ",
                                "subtitle": "Get your store's Category Tree",
                                "anchor": "code-get-cateory-tree"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "type": "object",
                                "properties": {}
                              }
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "$ref": "./BigCommerce V3 API.oas2.yml#/definitions/CategoryTreeCollectionResponse"
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Scripts",
            "route": {
              "path": "/scripts"
            },
            "data": {
              "blocks": [
                {
                  "type": "text",
                  "data": "# Scripts"
                }
              ],
              "children": [
                {
                  "title": "New Subpage",
                  "route": {
                    "path": "/new-subpage"
                  }
                }
              ]
            }
          },
          {
            "title": "Price Lists",
            "route": {
              "path": "/price-lists"
            },
            "data": {
              "blocks": [
                {
                  "type": "text",
                  "data": "# Price Lists"
                }
              ],
              "children": [
                {
                  "title": "New Subpage",
                  "route": {
                    "path": "/new-subpage"
                  }
                }
              ]
            }
          },
          {
            "title": "Subscribers & Customers",
            "route": {
              "path": "/subscribers-customers"
            },
            "data": {
              "blocks": [],
              "children": [
                {
                  "title": "Customer Login API",
                  "route": {
                    "path": "/customer-login-api"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Customer Login</h1>"
                      },
                      {
                        "type": "text",
                        "data": "<div id=\"no-index\">\n\n### On this page\n* [JWT](#jwt)\n* [OAuth Scope](#oauth-scope)\n* [Sample Code](#sample-code)\n* [Access URL](#access-url)\n* [Logging In a Customer](#logging-in-a-customer)\n* [Troubleshooting](#troubleshooting)\n\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "The Customer Login API enables single sign-on (SSO). It allows your apps to programmatically log in a storefront customer by using the login entry point URL: `/login/token/{token}`. Here, {token} must be a JSON Web Token (JWT) containing the parameters for the customer login request, signed by your application’s Oauth client secret.\n\nExample use cases for the Customer Login API include:\n\n* Merchants with a footprint across multiple sites and platforms\n* Social login applications\n* Apps that need to bypass the built-in customer login page in order to log customers in from a third-party system",
                        "header": {
                          "anchor": "customer-login-introduction"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## JWT\n\nJWT is a standard for verifying a login signature between two parties. For a full overview of the JWT standard, please see [JWT.IO](https://jwt.io/), where you can find links to client libraries (in many languages) that facilitate the generation and verification of JWT tokens. BigCommerce also supplies helper methods for generating login tokens in our [API Client Libraries](/api-docs/getting-started/about-api/new-subpage).\n\n### JWT Standard\n\nA valid JWT token is a string composed of three parts, separated by periods (“.”), which correspond to the encoded header, the encoded payload, and the signature.",
                        "header": {
                          "anchor": "jwt"
                        }
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1535390918772",
                        "header": {
                          "anchor": "example-jwt-token",
                          "title": "Example JWT Token"
                        },
                        "config": {
                          "centered": true,
                          "maxWidth": "800",
                          "maxHeight": "800"
                        }
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1535391044482",
                        "header": {
                          "title": "Key",
                          "anchor": "token-key"
                        },
                        "config": {
                          "centered": true,
                          "maxWidth": "400",
                          "maxHeight": "400"
                        }
                      },
                      {
                        "type": "text",
                        "data": "### Header\n\nThe header specifies the type of token (JWT) and the hashing algorithm.\n\n```\n{\n\t\"typ\": \"JWT\",\n\t\"alg\": \"HS256\" \n}\n```\n\nThe type and algorithm are always JWT and HS256. Those are the only values BigCommerce supports.",
                        "header": {
                          "anchor": "header"
                        }
                      },
                      {
                        "type": "text",
                        "data": "### Payload\nThe payload contains a series of claims that identify the application requesting the login, the store, and the customer to be logged in. Optionally, you can specify a redirect URL to direct the customer to a page other than the My Account page after login. \n\nOnce a request has is made with a given jti, it cannot be made again. This parameter is used to prevent replay attacks by malicious actors intercepting the request or obtaining it after the fact.\n\nThe request_ip field can be used as an additional security precaution, to prevent a malicious actor from intercepting the request and making it from another browser or system before you do. If you supply this value, BigCommerce checks the incoming request to ensure that it is being made from the stated IP address otherwise the request fails. We strongly encourage setting this IP address value, but doing so is optional, to support those cases where this information is not available.",
                        "header": {
                          "anchor": "payload"
                        }
                      },
                      {
                        "type": "code",
                        "data": "{\n\"iss\": \"Your app’s Oauth client ID\",\n\"iat\": \"timestamp for when the token was issued\",\n\"jti\": \"randomly generated string\",\n\"operation\": \"customer_login\",\n\"store_hash\": \"abc123\",\n\"customer_id\": 1234,\n\"redirect_to\": \"/account.php\",\n\"request_ip\": \"111.222.333.444\"\n}\n",
                        "header": {
                          "anchor": "example-payload",
                          "title": "Example Payload"
                        },
                        "config": {
                          "mode": "json"
                        }
                      },
                      {
                        "type": "text",
                        "data": "| Field Name | Type | Description |\n| --- | --- | --- |\n| iss | string | Indicates the token's issuer. This is your application's client ID, which is obtained during application registration in Developer Portal. |\n| iat | integer| Time when the token was generated. This is a numeric value indicating the number of seconds since the [Unix epoch](http://en.wikipedia.org/wiki/Unix_time).|\n| jti | string | Request ID string that must be unique across all requests made by your app. A UUID or other random string would be an appropriate value. Most libraries contain a method for generating a uuid. For testing a [UUID generator](https://www.uuidgenerator.net/) can be used, but it recommended to use built in libraries.|\n| operation | string | Must contain the string \"customer_login\". |\n| store_hash | string | Store hash identifying the store you are logging into. |\n| customer_id | integer | ID of the customer you are logging in, as obtained through the Customer API. |\n| redirect_to | string | Optional field containing a relative path for the shopper's destination after login. Will default to `/account.php`. |\n| request_ip | string | Optional field containing the expected IP address for the request. If provided, BigCommerce will check that it matches the browser trying to log in. If there is not a match, it will be rejected |",
                        "header": {
                          "anchor": "payload-fields"
                        }
                      },
                      {
                        "type": "text",
                        "data": "### Signature\n\nThe signature is created by signing the header and payload with the hashing algorithm specified in the header (HS256) and your application’s Client Secret. \n",
                        "header": {
                          "anchor": "signature"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## OAuth Scope\nYour OAuth API credentials must include the [customers_login](http://) scope.",
                        "header": {
                          "anchor": "oauth-scope"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Access URL\nAfter generating the JWT token, your app should immediately redirect the shopper’s browser to the following access point URL to log the customer into their account: `/login/token/{token}`\n\nExample:\n`https://storedomain.com/login/token/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9 .eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ`",
                        "header": {
                          "anchor": "access-url"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Logging in a Customer\nThe following tutorial will walk through creating a login token. We recommend scripting this process since the iat is invalid after 30 seconds. For the purpose of illustration, this tutorial will walk through creating a token manually using the debugger tool at JWT.io, although doing so can be tricky due to time constraints.  \n\n**Prerequisites**:\nClient ID and Client Secret generated from the store with the scope set to [Customers Login]().",
                        "header": {
                          "anchor": "logging-in-a-customer"
                        }
                      },
                      {
                        "type": "text",
                        "data": "### Create a JWT Token\n\n1. Run a /GET request against the [Customers](http://) resource (V2). Choose a customer and make note of the customer_id. ",
                        "header": {
                          "anchor": "create-jwt-token"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "type": "success",
                          "body": "If you are unsure how to make a /GET request see our tutorial on [making your first request]().",
                          "title": "Making a /GET request"
                        },
                        "header": {
                          "anchor": "making-a-get-request"
                        }
                      },
                      {
                        "type": "text",
                        "data": "2. Create the payload by filling in the PAYLOAD:DATA on jwt.io"
                      },
                      {
                        "type": "code",
                        "data": "{\n    \"iss\": \"1234r5t6y7u8i9o0p\",\n    \"iat\": 1535393113,\n    \"jti\": \"20b7c03e-00da-4d29-91bf-2aa06a57575b\",\n    \"operation\": \"customer_login\",\n    \"store_hash\": \"{store_hash}\",\n    \"customer_id\": 2,\n    \"redirect_to\": \"/account.php\"\n}",
                        "header": {
                          "title": "Create the Payload",
                          "anchor": "create-the-paylpad"
                        }
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1535469059335",
                        "header": {
                          "anchor": "jwt-image",
                          "subtitle": "JTW.io fields"
                        },
                        "config": {
                          "centered": true,
                          "maxWidth": "800",
                          "maxHeight": "800"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "type": "error",
                          "title": "IAT Claim",
                          "body": "The iat claim is only good for 30 seconds. "
                        },
                        "header": {
                          "anchor": "iat-claim"
                        }
                      },
                      {
                        "type": "text",
                        "data": "3.  Add your Client Secret in the Verify Signature Section. Replace the text `your-256-bit-secret` with the Client Secret.\n4. Copy the token from the encoded box and paste at the end of the login/token url.  \n\n*https://store-url/login/token/generated-jwt-token*\n\n**Example**: \nhttps://storedomain.com/login/token/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9 .eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9 .TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n\n5. Paste the URL into the address bar.\n\nIf the request was successful then you will be logged in as the customer and directed to /account.php. If it was unsuccessful there will be a login attempt message and you will be directed to /login.php\n"
                      },
                      {
                        "type": "text",
                        "data": "## Sample Code\n\nCode to generate a valid JWT token for a storefront login request is provided in our API Client Libraries. The list items below link to the repositories maintained by BigCommerce:\n\n* [PHP Sample](https://github.com/bigcommerce/bigcommerce-api-php/blob/master/src/Bigcommerce/Api/Client.php#L421)\n* [Python Sample](https://github.com/bigcommerce/bigcommerce-api-python/blob/master/bigcommerce/customer_login_token.py)\n* [Ruby Sample](https://github.com/bigcommerce/bigcommerce-api-ruby/blob/master/examples/customers/customer_login.rb)\n\nClient libraries in many other languages are at JWT.io.",
                        "header": {
                          "anchor": "sample-code"
                        }
                      },
                      {
                        "type": "tabs",
                        "data": {
                          "children": [
                            {
                              "title": "PHP Sample",
                              "blocks": [
                                {
                                  "type": "code",
                                  "data": "    public static function getCustomerLoginToken($id, $redirectUrl = '', $requestIp = '')\n    {\n        if (empty(self::$client_secret)) {\n            throw new Exception('Cannot sign customer login tokens without a client secret');\n        }\n\n        $payload = array(\n            'iss' => self::$client_id,\n            'iat' => time(),\n            'jti' => bin2hex(random_bytes(32)),\n            'operation' => 'customer_login',\n            'store_hash' => self::$store_hash,\n            'customer_id' => $id\n        );\n\n        if (!empty($redirectUrl)) {\n            $payload['redirect_to'] = $redirectUrl;\n        }\n\n        if (!empty($requestIp)) {\n            $payload['request_ip'] = $requestIp;\n        }\n\n        return JWT::encode($payload, self::$client_secret, 'HS256');\n    }",
                                  "header": {
                                    "subtitle": "https://github.com/bigcommerce/bigcommerce-api-php/blob/master/src/Bigcommerce/Api/Client.php#L421",
                                    "title": "Client.php",
                                    "anchor": "php-sample"
                                  },
                                  "config": {
                                    "mode": "php"
                                  }
                                }
                              ]
                            },
                            {
                              "title": "Python Sample",
                              "blocks": [
                                {
                                  "type": "code",
                                  "data": "import os\nimport time\nimport uuid\nimport jwt\n\n\nclass CustomerLoginTokens(object):\n    @classmethod\n    def create(cls, client, id, redirect_url=None, request_ip=None):\n\n        # Get the client_secret needed to sign tokens from the environment\n        # Intended to play nice with the Python Hello World sample app\n        # https://github.com/bigcommerce/hello-world-app-python-flask\n        client_secret = os.getenv('APP_CLIENT_SECRET')\n\n        if not client_secret:\n            raise AttributeError('No OAuth client secret specified in the environment, '\n                                 'please specify an APP_CLIENT_SECRET')\n\n        try:\n            client_id = client.connection.client_id\n            store_hash = client.connection.store_hash\n        except AttributeError:\n            raise AttributeError('Store hash or client ID not found in the connection - '\n                                 'make sure an OAuth API connection is configured. Basic auth is not supported.')\n\n        payload = dict(iss=client_id,\n                       iat=int(time.time()),\n                       jti=uuid.uuid4().hex,\n                       operation='customer_login',\n                       store_hash=store_hash,\n                       customer_id=id\n                       )\n\n        if redirect_url:\n            payload['redirect_url'] = redirect_url\n\n        if request_ip:\n            payload['request_ip'] = request_ip\n\n        token = jwt.encode(payload, client_secret, algorithm='HS256')\n\n        return token.decode('utf-8')\n\n    @classmethod\n    def create_url(cls, client, id, redirect_url=None, request_ip=None):\n        secure_url = client.Store.all()['secure_url']\n        login_token = cls.create(client, id, redirect_url, request_ip)\n        return '%s/login/token/%s' % (secure_url, login_token)\n\n",
                                  "header": {
                                    "title": "customer_login_token.py",
                                    "subtitle": "https://github.com/bigcommerce/bigcommerce-api-python/blob/master/bigcommerce/customer_login_token.py",
                                    "anchor": "python-sample"
                                  },
                                  "config": {
                                    "mode": "python"
                                  }
                                }
                              ]
                            },
                            {
                              "title": "Ruby Sample",
                              "blocks": [
                                {
                                  "type": "code",
                                  "data": "require 'bigcommerce'\n\nBigcommerce.configure do |config|\n  config.store_hash = ENV['BC_STORE_HASH']\n  config.client_id = ENV['BC_CLIENT_ID']\n  config.client_secret = ENV['BC_CLIENT_SECRET']\n  config.access_token = ENV['BC_ACCESS_TOKEN']\nend\n\n# Get a customer\ncustomer = Bigcommerce::Customer.all(page: 1).first\n\n# Generate token login url\nputs customer.login_token",
                                  "header": {
                                    "subtitle": "https://github.com/bigcommerce/bigcommerce-api-ruby/blob/master/examples/customers/customer_login.rb",
                                    "title": "customer_login.rb",
                                    "anchor": "ruby-sample"
                                  },
                                  "config": {
                                    "mode": "ruby"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        "header": {
                          "title": "JWT Token Sample Code",
                          "anchor": "token-samples"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Troubleshooting\n\nTokens are valid for a very short time frame after being generated, so tokens should not be generated in advance. Instead, the application should generate the token and then immediately redirect the user’s browser to /login/token/{token}. \n\nIf the server generating the iat is out of sync, the login token will fail if the timestamp indicates a time in the future or an expired token.\n\nThe login URL can be visited only once. Once a GET request is run against the link, the token is invalidated. \n\nTokens can be validated or generated for testing purposes using the debugger at https://jwt.io/.",
                        "header": {
                          "anchor": "troubleshooting"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Current Customer API",
                  "route": {
                    "path": "/current-customer-api"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Current Customer</h1>"
                      },
                      {
                        "type": "text",
                        "data": "<div id=\"no-index\">\n\t\n### On this page\n\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Identifying Logged-In Customers Securely\n\nIf your application interacts dynamically with the BigCommerce storefront, and conveys information that is specific to a particular logged-in customer, you must confirm that customer’s identity within the insecure environment of the user’s browser.\n\nTo address this need, BigCommerce provides a Current Customer endpoint, which your app can access via JavaScript on the storefront. This endpoint returns a JWT with identifying details about the customer. The information is signed with your [OAuth client secret](http://)."
                      },
                      {
                        "type": "text",
                        "data": "### Example JavaScript\n\nBelow is example JavaScript that will access this JWT. To test the JWT functionality, you can install this JavaScript on your sandbox BigCommerce store. Your application’s Client ID must be included in the request (to identify the requesting application):"
                      },
                      {
                        "type": "code",
                        "data": "<script type=\"text/javascript\">\nfunction customerJWT() {  \n    var appClientId = \"**BC_CLIENT_ID**\"; // TODO: Fill this in with your app's client ID\n    var xmlhttp = new XMLHttpRequest();\n    xmlhttp.onreadystatechange = function() {\n        if (xmlhttp.readyState == 4 ) {\n           if (xmlhttp.status == 200) {\n               alert('Customer JWT:\\n' + xmlhttp.responseText);\n           }\n           else if (xmlhttp.status == 404) {\n              alert('Not logged in!');\n           }\n           else {\n               alert('Something went wrong');\n           }\n        }\n    };\n    xmlhttp.open(\"GET\", \"/customer/current.jwt?app_client_id=\"+appClientId, true);\n    xmlhttp.send();\n}\ncustomerJWT();\n</script>\n",
                        "header": {
                          "title": "Identify Logged In Customers",
                          "anchor": "identify-customers-script"
                        },
                        "config": {
                          "mode": "html"
                        }
                      },
                      {
                        "type": "text",
                        "data": "If you are logged into the storefront with a customer account, the above JavaScript should alert to the browser with a JWT token. If no customer is logged in, BigCommerce will return a 404 response, and you will see an error message. The JWT returned from this endpoint (example below) can be decoded on JWT.IO"
                      },
                      {
                        "type": "code",
                        "data": "{\n  \"customer\": {\n    \"id\": 4927,\n    \"email\": \"john.doe@gmail.com\",\n    \"group_id\": \"6\"\n  },\n  \"iss\": \"bc/apps\",\n  \"sub\": \"abc123\",\n  \"iat\": 1480831863,\n  \"exp\": 1480832763,\n  \"version\": 1,\n  \"aud\": \"6sv16tfx3j5gsopm42ss5dd67g2srvq\",\n  \"application_id\": \"6sv16tasdgr2b5hs5dd67g2srvq\",\n  \"store_hash\": \"abc123\",\n  \"operation\": \"current_customer\"\n}",
                        "header": {
                          "title": "Logged in Customers Response",
                          "anchor": "logged-in-customer-response"
                        },
                        "config": {
                          "mode": "json"
                        }
                      },
                      {
                        "type": "text",
                        "data": "By design, your application should send this token to the application’s server, validate it against your client secret, and then use it as a trusted indication of the logged-in customer’s identity, before displaying confidential information to them. \n\nAn end-to-end example, which displays a customer’s recently purchased products, is available in our [Ruby](https://github.com/bigcommerce/hello-world-app-ruby-sinatra/) and [PHP](https://github.com/bigcommerce/hello-world-app-php-silex/) sample apps."
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Widgets",
            "route": {
              "path": "/widgets"
            },
            "data": {
              "blocks": [
                {
                  "type": "text",
                  "data": "# Widgets"
                }
              ],
              "children": [
                {
                  "title": "New Subpage",
                  "route": {
                    "path": "/new-subpage"
                  }
                }
              ]
            }
          },
          {
            "title": "Cart",
            "route": {
              "path": "/cart"
            },
            "data": {
              "children": [
                {
                  "title": "Storefront Cart",
                  "route": {
                    "path": "/storefront-cart"
                  },
                  "data": {}
                },
                {
                  "title": "Server To Server Cart",
                  "route": {
                    "path": "/server-server-cart"
                  },
                  "data": {}
                }
              ]
            }
          },
          {
            "title": "Checkout",
            "route": {
              "path": "/checkout"
            },
            "data": {
              "children": [
                {
                  "title": "Storefront Checkout",
                  "route": {
                    "path": "/storefront-checkout"
                  },
                  "data": {}
                },
                {
                  "title": "Server To Server Checkout",
                  "route": {
                    "path": "/server-server-checkout"
                  },
                  "data": {}
                },
                {
                  "title": "Checkout SDK",
                  "route": {
                    "path": "/checkout-sdk"
                  },
                  "data": {}
                }
              ]
            }
          },
          {
            "title": "Orders",
            "route": {
              "path": "/orders"
            },
            "data": {
              "children": [
                {
                  "title": "New Subpage",
                  "route": {
                    "path": "/new-subpage"
                  }
                }
              ]
            }
          },
          {
            "title": "Shipping",
            "route": {
              "path": "/shipping"
            },
            "data": {
              "children": [
                {
                  "title": "New Subpage",
                  "route": {
                    "path": "/new-subpage"
                  }
                }
              ]
            }
          },
          {
            "title": "Taxes",
            "route": {
              "path": "/taxes"
            },
            "data": {
              "children": [
                {
                  "title": "New Subpage",
                  "route": {
                    "path": "/new-subpage"
                  }
                }
              ]
            }
          },
          {
            "title": "Payments",
            "route": {
              "path": "/payments"
            },
            "data": {
              "children": [
                {
                  "title": "New Subpage",
                  "route": {
                    "path": "/new-subpage"
                  }
                }
              ]
            }
          },
          {
            "title": "Store Information",
            "route": {
              "path": "/store-information"
            },
            "data": {
              "children": [
                {
                  "title": "New Subpage",
                  "route": {
                    "path": "/new-subpage"
                  }
                }
              ]
            }
          },
          {
            "title": "API Reference",
            "route": {
              "path": "/api-reference"
            },
            "data": {
              "children": [
                {
                  "title": "V3 API",
                  "route": {
                    "path": "/v3-api"
                  },
                  "data": {
                    "$ref": "./BigCommerce V3 API.oas2.yml"
                  }
                }
              ]
            }
          },
          {
            "title": "Legacy",
            "route": {
              "path": "/legacy"
            },
            "data": {}
          }
        ]
      }
    }
  },
  "logo": "https://cdn6.bigcommerce.com/s-qtmbtj/product_images/uploaded_images/bigcommerce-logomark-darkbg.png",
  "theme": {
    "background": "#3550b6"
  }
}