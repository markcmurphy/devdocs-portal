{
  "swagger": "2.0",
  "info": {
    "title": "BigCommerce API",
    "version": "3.0.0b",
    "description": "A Swagger Document for the BigCommmerce v3 API.",
    "termsOfService": "http://www.bigcommerce.com/terms",
    "license": {
      "name": ""
    }
  },
  "host": "api.bigcommerce.com",
  "basePath": "/stores/{store_hash}/v3",
  "tags": [
    {
      "name": "Catalog"
    },
    {
      "name": "Brands"
    },
    {
      "name": "Category"
    },
    {
      "name": "Products"
    },
    {
      "name": "Product Metafields"
    },
    {
      "name": "Product Bulk Pricing Rules"
    },
    {
      "name": "Product Complex Rules"
    },
    {
      "name": "Product Custom Fields"
    },
    {
      "name": "Product Modifiers"
    },
    {
      "name": "Product Variants"
    },
    {
      "name": "Product Variants Metafields"
    },
    {
      "name": "Product Variant Options"
    },
    {
      "name": "Product Reviews"
    },
    {
      "name": "Product Videos"
    },
    {
      "name": "Product Images"
    },
    {
      "name": "Customers",
      "description": "BigCommerce Customers API Definition."
    },
    {
      "name": "Orders",
      "description": "BigCommerce Orders API Definition."
    },
    {
      "name": "Price Lists",
      "description": "BigCommerce Price Lists API Definition."
    },
    {
      "name": "Scripts"
    },
    {
      "name": "Themes",
      "description": "BigCommerce Themes API Definition."
    },
    {
      "name": "Legacy"
    },
    {
      "name": "Widget Template",
      "description": "BigCommerce Widget Templates API Definition."
    },
    {
      "name": "Widget",
      "description": "BigCommerce Widgets API Definition."
    },
    {
      "name": "Placement",
      "description": "BigCommerce Placements API Definition."
    }
  ],
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "paths": {
    "/customers/subscribers": {
      "get": {
        "tags": [
          "Customers"
        ],
        "description": "Returns a paginated Subscribers collection.\n",
        "operationId": "getSubscribers",
        "parameters": [
          {
            "$ref": "#/parameters/FilterEmailParam"
          },
          {
            "$ref": "#/parameters/FilterFirstNameParam"
          },
          {
            "$ref": "#/parameters/FilterLastNameParam"
          },
          {
            "$ref": "#/parameters/FilterSourceParam"
          },
          {
            "$ref": "#/parameters/FilterOrderIdParam"
          },
          {
            "$ref": "#/parameters/FilterDateCreatedParam"
          },
          {
            "$ref": "#/parameters/FilterDateModifiedParam"
          },
          {
            "$ref": "#/parameters/PageParam"
          },
          {
            "$ref": "#/parameters/LimitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of subscriber objects and metadata.\n",
            "schema": {
              "$ref": "#/definitions/SubscriberCollectionResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Customers"
        ],
        "description": "Creates a `Subscriber` object.\n",
        "operationId": "createSubscriber",
        "parameters": [
          {
            "name": "subscriber",
            "in": "body",
            "required": true,
            "description": "`Subscriber` object.\n",
            "schema": {
              "$ref": "#/definitions/SubscriberPost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A `Subscriber` object.\n",
            "schema": {
              "$ref": "#/definitions/SubscriberResponse"
            }
          },
          "409": {
            "description": "The `Subscriber` was in conflict with another subscriber. This is the result of duplicate unique values, such as email.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "The `Subscriber` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Customers"
        ],
        "description": "Deletes a Subscriber or Subscribers from BigCommerce Customers.\n",
        "operationId": "deleteSubscribers",
        "parameters": [
          {
            "$ref": "#/parameters/FilterEmailParam"
          },
          {
            "$ref": "#/parameters/FilterFirstNameParam"
          },
          {
            "$ref": "#/parameters/FilterLastNameParam"
          },
          {
            "$ref": "#/parameters/FilterSourceParam"
          },
          {
            "$ref": "#/parameters/FilterOrderIdParam"
          },
          {
            "$ref": "#/parameters/FilterDateCreatedParam"
          },
          {
            "$ref": "#/parameters/FilterDateModifiedParam"
          }
        ],
        "responses": {
          "204": {
            "description": "An empty response.\n"
          }
        }
      }
    },
    "/customers/subscribers/{subscriber_id}": {
      "parameters": [
        {
          "$ref": "#/parameters/SubscriberIdParam"
        }
      ],
      "get": {
        "tags": [
          "Customers"
        ],
        "description": "Gets `Subscriber` object.",
        "operationId": "getSubscriberById",
        "responses": {
          "200": {
            "description": "A `Subscriber` object.\n",
            "schema": {
              "$ref": "#/definitions/SubscriberResponse"
            }
          },
          "404": {
            "description": "The resource was not found.\n",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Customers"
        ],
        "description": "Updates a `Subscriber` object.\n",
        "operationId": "updateSubscriber",
        "parameters": [
          {
            "name": "subscriber",
            "in": "body",
            "required": true,
            "description": "Returns a `Subscriber` object.\n",
            "schema": {
              "$ref": "#/definitions/SubscriberPut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A `Subscriber` object.\n",
            "schema": {
              "$ref": "#/definitions/SubscriberResponse"
            }
          },
          "404": {
            "description": "The resource was not found.\n",
            "schema": {
              "$ref": "#/definitions/NotFound"
            }
          },
          "409": {
            "description": "The `Subscriber` was in conflict with another subscriber. This is the result of duplicate unique values, such as `email`.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "422": {
            "description": "The `Subscriber` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Customers"
        ],
        "description": "Deletes a `Subscriber` object.\n",
        "operationId": "deleteSubscriberById",
        "responses": {
          "204": {
            "description": "An empty response.\n"
          }
        }
      }
    }
  },
  "parameters": {
    "TemplateUUID": {
      "name": "uuid",
      "description": "The identifier for a specific template.",
      "required": true,
      "in": "path",
      "type": "string",
      "format": "uuid"
    },
    "FilterWidgetTemplateUUIDParam": {
      "in": "query",
      "name": "widget_template_uuid",
      "description": "The identifier for a specific widget template.",
      "type": "string",
      "format": "uuid",
      "required": false
    },
    "FilterWidgetTemplateKindParam": {
      "in": "query",
      "name": "widget_template_kind",
      "description": "The kind of widget template.",
      "type": "string",
      "required": false
    },
    "FilterTemplateFileParam": {
      "in": "query",
      "name": "template_file",
      "description": "The template file, for example: `pages/home`.",
      "type": "string",
      "required": false
    },
    "RequiredTemplateFile": {
      "in": "query",
      "name": "templateFile",
      "description": "The template file, for example: `pages/home`.",
      "type": "string",
      "required": true
    },
    "PlacementUUID": {
      "name": "uuid",
      "description": "The identifier for a specific placement.",
      "required": true,
      "in": "path",
      "type": "string",
      "format": "uuid"
    },
    "WidgetUUID": {
      "name": "uuid",
      "description": "The identifier for a specific widget.",
      "required": true,
      "in": "path",
      "type": "string",
      "format": "uuid"
    },
    "ScriptUUID": {
      "name": "uuid",
      "description": "The identifier for a specific script.",
      "required": true,
      "in": "path",
      "type": "string",
      "format": "uuid"
    },
    "FilterWidgetUUIDParam": {
      "name": "widget_uuid",
      "description": "The identifier for a specific widget.",
      "in": "query",
      "type": "string",
      "format": "uuid",
      "required": false
    },
    "FilterIdParam": {
      "name": "id",
      "description": "Filter items by id.\n",
      "required": false,
      "in": "query",
      "type": "integer"
    },
    "FilterSkuParam": {
      "name": "sku",
      "description": "Filter items by sku.\n",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "FilterNameParam": {
      "name": "name",
      "description": "Filter items by name.\n",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "FilterEmailParam": {
      "name": "email",
      "description": "Filter items by email.\n",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "FilterFirstNameParam": {
      "name": "first_name",
      "description": "Filter items by first_name.\n",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "FilterLastNameParam": {
      "name": "last_name",
      "description": "Filter items by last_name.\n",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "FilterSourceParam": {
      "name": "source",
      "description": "Filter items by source.\n",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "FilterOrderIdParam": {
      "name": "order_id",
      "description": "Filter items by order_id.\n",
      "required": false,
      "in": "query",
      "type": "integer"
    },
    "FilterUpcParam": {
      "name": "upc",
      "description": "Filter items by upc.\n",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "FilterPriceParam": {
      "name": "price",
      "description": "Filter items by price.\n",
      "required": false,
      "in": "query",
      "type": "number"
    },
    "FilterSalePriceParam": {
      "name": "sale_price",
      "description": "Filter items by sale_price.\n",
      "required": false,
      "in": "query",
      "type": "number"
    },
    "FilterRetailPriceParam": {
      "name": "retail_price",
      "description": "Filter items by retail_price.\n",
      "required": false,
      "in": "query",
      "type": "number"
    },
    "FilterMapPriceParam": {
      "name": "map_price",
      "description": "Filter items by map_price.\n",
      "required": false,
      "in": "query",
      "type": "number"
    },
    "FilterCalculatedPriceParam": {
      "name": "calculated_price",
      "description": "Filter items by calculated_price.\n",
      "required": false,
      "in": "query",
      "type": "number"
    },
    "FilterWeightParam": {
      "name": "weight",
      "description": "Filter items by weight.\n",
      "required": false,
      "in": "query",
      "type": "number"
    },
    "FilterConditionParam": {
      "name": "condition",
      "description": "Filter items by condition.\n",
      "required": false,
      "in": "query",
      "type": "integer",
      "enum": [
        "new",
        "used",
        "refurbished"
      ]
    },
    "FilterBrandIdParam": {
      "name": "brand_id",
      "description": "Filter items by brand_id.\n",
      "required": false,
      "in": "query",
      "type": "integer"
    },
    "FilterDateModifiedParam": {
      "name": "date_modified",
      "description": "Filter items by date_modified. For example `v3/catalog/products?date_last_imported:min=2018-06-15`",
      "required": false,
      "in": "query",
      "type": "string",
      "format": "date-time"
    },
    "FilterDateCreatedParam": {
      "name": "date_created",
      "description": "Filter items by date_created.\n",
      "required": false,
      "in": "query",
      "type": "string",
      "format": "date-time"
    },
    "FilterDateLastImportedParam": {
      "name": "date_last_imported",
      "description": "Filter items by date_last_imported. For example `v3/catalog/products?date_modified:min=2018-06-15`",
      "required": false,
      "in": "query",
      "type": "string",
      "format": "date-time"
    },
    "FilterIsVisibleParam": {
      "name": "is_visible",
      "description": "Filter items by is_visible. This filter uses numbers instead. 0 = false and 1 = true.\n",
      "required": false,
      "in": "query",
      "type": "integer",
      "enum": [
        1,
        0
      ]
    },
    "FilterIsFeaturedParam": {
      "name": "is_featured",
      "description": "Filter items by is_featured.\n",
      "required": false,
      "in": "query",
      "type": "integer"
    },
    "FilterIsFreeShippingParam": {
      "name": "is_free_shipping",
      "description": "Filter items by is_free_shipping.\n",
      "required": false,
      "in": "query",
      "type": "integer"
    },
    "FilterInventoryLevelParam": {
      "name": "inventory_level",
      "description": "Filter items by inventory_level.\n",
      "required": false,
      "in": "query",
      "type": "integer"
    },
    "FilterInventoryLowParam": {
      "name": "inventory_low",
      "description": "Filter items by inventory_low. Values: 1, 0.\n",
      "required": false,
      "in": "query",
      "type": "integer"
    },
    "FilterOutOfStockParam": {
      "name": "out_of_stock",
      "description": "Filter items by out_of_stock. To enable the filter, pass `out_of_stock`=`1`.\n",
      "required": false,
      "in": "query",
      "type": "integer"
    },
    "FilterTotalSoldParam": {
      "name": "total_sold",
      "description": "Filter items by total_sold.\n",
      "required": false,
      "in": "query",
      "type": "integer"
    },
    "ProductFilterTypeParam": {
      "name": "type",
      "description": "Filter items by type: `physical` or `digital`.",
      "required": false,
      "in": "query",
      "type": "string",
      "enum": [
        "digital",
        "physical"
      ]
    },
    "FilterCategoriesParam": {
      "name": "categories",
      "description": "Filter items by categories.\n",
      "required": false,
      "in": "query",
      "type": "integer"
    },
    "FilterKeywordParam": {
      "name": "keyword",
      "description": "Filter items by keywords. eg. new, towel, bath",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "ProductFilterKeywordParam": {
      "name": "keyword",
      "description": "Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name.\n",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "ProductFilterKeywordContextParam": {
      "name": "keyword_context",
      "description": "Set context for a product search.",
      "required": false,
      "in": "query",
      "type": "string",
      "enum": [
        "shopper",
        "merchant"
      ]
    },
    "FilterStatusParam": {
      "name": "status",
      "description": "Filter items by status.\n",
      "required": false,
      "in": "query",
      "type": "integer"
    },
    "FilterIncludeParam": {
      "name": "include",
      "description": "Sub-resources to include on a product, in a comma-separated list. Valid expansions currently include `variants`, `images`, 'primary_image`, `custom_fields`, and `bulk_pricing_rules`.",
      "required": false,
      "in": "query",
      "type": "string",
      "enum": [
        "variants",
        "images",
        "custom_fields",
        "bulk_pricing_rules",
        "primary_image"
      ]
    },
    "FilterIncludePriceRecordParam": {
      "name": "include",
      "description": "Sub-resources to include on a price record, in a comma-separated list. Valid expansions currently include `bulk_pricing_tiers` and `sku`.  Other valies will be ignored.\n",
      "required": false,
      "in": "query",
      "type": "string",
      "enum": [
        "bulk_pricing_tiers",
        "sku"
      ]
    },
    "FilterIncludeFieldsParam": {
      "name": "include_fields",
      "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned.",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "FilterExcludeFieldsParam": {
      "name": "exclude_fields",
      "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded.",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "FilterParentIdParam": {
      "name": "parent_id",
      "description": "Filter items by parent_id. If the category is a child or sub category it can be filtered with the parent_id. ",
      "required": false,
      "in": "query",
      "type": "integer"
    },
    "FilterPageTitleParam": {
      "name": "page_title",
      "description": "Filter items by page_title.\n",
      "required": false,
      "in": "query",
      "type": "string"
    },
    "FilterAvailabilityParam": {
      "name": "availability",
      "description": "Filter items by availability. Values are: available, disabled, preorder.\n",
      "required": false,
      "in": "query",
      "type": "string",
      "enum": [
        "available",
        "disabled",
        "preorder"
      ]
    },
    "FilterPriceListIdParam": {
      "name": "price_list_id",
      "description": "The ID of the `Price List`.\n",
      "required": false,
      "in": "query",
      "type": "integer"
    },
    "FilterProductIdParam": {
      "type": "string",
      "name": "product_id",
      "in": "query",
      "required": false,
      "description": "A comma-separated list of ids of `Product`s whose prices were requested.\n"
    },
    "FilterVariantIdParam": {
      "type": "integer",
      "name": "variant_id",
      "in": "query",
      "required": false,
      "description": "The ID of the `Variant` whose prices were requested.\n"
    },
    "FilterCurrencyParam": {
      "name": "currency",
      "description": "Filter items by currency.\n",
      "required": false,
      "in": "query",
      "type": "string",
      "format": "ISO-4217"
    },
    "PageParam": {
      "name": "page",
      "description": "Specifies the page number in a limited (paginated) list of products.",
      "required": false,
      "in": "query",
      "type": "integer"
    },
    "LimitParam": {
      "name": "limit",
      "description": "Controls the number of items per page in a limited (paginated) list of products.",
      "required": false,
      "in": "query",
      "type": "integer"
    },
    "ScriptsSortKeyParam": {
      "name": "sort",
      "description": "Scripts field name to sort by.\n",
      "required": false,
      "in": "query",
      "type": "string",
      "enum": [
        "name",
        "description",
        "date_created",
        "date_modified"
      ]
    },
    "DirectionParam": {
      "name": "direction",
      "description": "Sort direction. Acceptable values are: `asc`, `desc`.\n",
      "required": false,
      "in": "query",
      "type": "string",
      "enum": [
        "asc",
        "desc"
      ]
    },
    "ProductSortParam": {
      "name": "sort",
      "description": "Field name to sort by.\n",
      "required": false,
      "in": "query",
      "type": "string",
      "enum": [
        "id",
        "name",
        "sku",
        "price",
        "date_modified",
        "date_last_imported",
        "inventory_level",
        "is_visible",
        "total_sold"
      ]
    },
    "ProductIdParam": {
      "name": "product_id",
      "in": "path",
      "description": "The ID of the `Product` to which the resource belongs.\n",
      "required": true,
      "type": "integer"
    },
    "ReviewIdParam": {
      "name": "review_id",
      "description": "The ID of the `review` that is being operated on.\n",
      "required": true,
      "in": "path",
      "type": "integer"
    },
    "ImageIdParam": {
      "name": "image_id",
      "description": "The ID of the `Image` that is being operated on.\n",
      "required": true,
      "in": "path",
      "type": "integer"
    },
    "VideoIdParam": {
      "name": "video_id",
      "description": "The ID of the `Video` that is being operated on.\n",
      "required": true,
      "in": "path",
      "type": "string"
    },
    "ComplexRuleIdParam": {
      "name": "complex_rule_id",
      "description": "The ID of the `ComplexRule`.\n",
      "required": true,
      "in": "path",
      "type": "integer"
    },
    "ConfigurableFieldIdParam": {
      "name": "configurable_field_id",
      "description": "The ID of the `ConfigurableField`.\n",
      "required": true,
      "in": "path",
      "type": "integer"
    },
    "CustomFieldIdParam": {
      "name": "custom_field_id",
      "description": "The ID of the `CustomField`.\n",
      "required": true,
      "in": "path",
      "type": "integer"
    },
    "BulkPricingRuleIdParam": {
      "name": "bulk_pricing_rule_id",
      "description": "The ID of the `BulkPricingRule`.\n",
      "required": true,
      "in": "path",
      "type": "integer"
    },
    "ModifierIdParam": {
      "name": "modifier_id",
      "description": "The ID of the `Modifier`.\n",
      "required": true,
      "in": "path",
      "type": "integer"
    },
    "ValueIdParam": {
      "name": "value_id",
      "description": "The ID of the `Modifier/Option Value`.\n",
      "required": true,
      "in": "path",
      "type": "integer"
    },
    "OptionIdParam": {
      "name": "option_id",
      "description": "The ID of the `Option`.\n",
      "required": true,
      "in": "path",
      "type": "integer"
    },
    "SubscriberIdParam": {
      "name": "subscriber_id",
      "in": "path",
      "description": "The ID of the `Subscriber` requested.\n",
      "required": true,
      "type": "integer"
    },
    "VariantIdParam": {
      "name": "variant_id",
      "in": "path",
      "description": "ID of the variant on a product, or on an associated Price List Record.\n",
      "required": true,
      "type": "integer"
    },
    "CategoryIdParam": {
      "name": "category_id",
      "in": "path",
      "description": "The ID of the `Category` to which the resource belongs.\n",
      "required": true,
      "type": "integer"
    },
    "BrandIdParam": {
      "name": "brand_id",
      "in": "path",
      "description": "The ID of the `Brand` to which the resource belongs.\n",
      "required": true,
      "type": "integer"
    },
    "MetafieldIdParam": {
      "name": "metafield_id",
      "in": "path",
      "description": "The ID of the `Metafield`.\n",
      "required": true,
      "type": "integer"
    },
    "MetafieldKeyParam": {
      "name": "key",
      "in": "query",
      "description": "Filter based on a metafield's key.\n",
      "required": false,
      "type": "string"
    },
    "MetafieldNamespaceParam": {
      "name": "namespace",
      "in": "query",
      "description": "Filter based on a metafield's namespace.",
      "required": false,
      "type": "string"
    },
    "ImageFileParam": {
      "name": "image_file",
      "description": "An image file. Supported MIME types include GIF, JPEG, and PNG.\n",
      "required": true,
      "in": "formData",
      "type": "file"
    },
    "OrderIdParam": {
      "name": "order_id",
      "in": "path",
      "description": "The ID of the `Order` to which the transactions belong.\n",
      "required": true,
      "type": "integer"
    },
    "JobIdParam": {
      "name": "job_id",
      "description": "The job identifier.",
      "in": "path",
      "type": "string",
      "required": true
    },
    "ThemeIdParam": {
      "name": "theme_id",
      "description": "The theme identifier.",
      "in": "path",
      "type": "string",
      "required": true
    },
    "PriceListIdParam": {
      "type": "integer",
      "name": "price_list_id",
      "in": "path",
      "description": "The ID of the `Price List` requested.\n",
      "required": true
    },
    "PriceRecordCurrencyParam": {
      "name": "currency_code",
      "type": "string",
      "in": "path",
      "description": "The currency code associated with the price record being acted upon.\n",
      "required": true,
      "format": "ISO-4217"
    },
    "QueryWidgetsParam": {
      "type": "string",
      "name": "query",
      "in": "query",
      "description": "The query string associated with a widget's name and description.\n"
    },
    "Accept": {
      "in": "header",
      "type": "string",
      "name": "Accept",
      "default": "application/json"
    },
    "Content-Type": {
      "name": "Content-Type",
      "in": "header",
      "type": "string",
      "default": "application/json"
    }
  },
  "definitions": {
    "WidgetTemplatePreview": {
      "properties": {
        "widget_configuration": {
          "type": "object",
          "description": "The JSON data that populates the template.",
          "format": "json"
        }
      }
    },
    "WidgetTemplatePut": {
      "properties": {
        "name": {
          "type": "string",
          "description": "User-friendly name."
        },
        "schema": {
          "type": "object",
          "description": "The schema for this template. Describes how to build dynamic forms for widget configurations.",
          "format": "json"
        },
        "template": {
          "type": "string",
          "description": "Handlebars HTML content. Also has access to Stencil Paper helpers.",
          "format": "html"
        }
      }
    },
    "WidgetTemplatePost": {
      "required": [
        "name",
        "template"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "User friendly name."
        },
        "schema": {
          "type": "object",
          "description": "The JSON schema of data for this template. Used to validate a configuration.",
          "format": "json"
        },
        "template": {
          "type": "string",
          "description": "Handlebars HTML content. Also has access to Stencil Paper helpers.",
          "format": "html"
        }
      }
    },
    "WidgetTemplateResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/WidgetTemplate"
        }
      }
    },
    "WidgetTemplatePreviewResponse": {
      "type": "object",
      "properties": {
        "data": {
          "properties": {
            "html": {
              "type": "string",
              "description": "The HTML render of the widget template.",
              "format": "html"
            }
          }
        }
      }
    },
    "WidgetTemplatesResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WidgetTemplate"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "WidgetTemplate": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "format": "uuid",
          "description": "The primary identifier."
        },
        "name": {
          "type": "string",
          "description": "The user-friendly name."
        },
        "kind": {
          "type": "string",
          "description": "The kind of widget template."
        },
        "schema": {
          "type": "object",
          "format": "json",
          "description": "The JSON schema of data for this template. Used to validate a configuration."
        },
        "template": {
          "type": "string",
          "format": "html",
          "description": "The widget template HTML. Supports Handlebars and Paper helpers."
        },
        "date_created": {
          "type": "string",
          "format": "datetime",
          "description": "The date on which this object was initially created."
        },
        "date_modified": {
          "type": "string",
          "format": "datetime",
          "description": "The date on which this object was last updated."
        }
      }
    },
    "Widget": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "format": "uuid",
          "description": "The primary identifier."
        },
        "name": {
          "type": "string",
          "description": "The user-friendly name."
        },
        "description": {
          "type": "string",
          "description": "The user-friendly description."
        },
        "widget_configuration": {
          "type": "object",
          "description": "The JSON data that populates the template.",
          "format": "json"
        },
        "widget_template": {
          "$ref": "#/definitions/WidgetTemplate"
        },
        "date_created": {
          "type": "string",
          "format": "datetime",
          "description": "The date on which this object was initially created."
        },
        "date_modified": {
          "type": "string",
          "format": "datetime",
          "description": "The date on which this object was last updated."
        }
      }
    },
    "WidgetPost": {
      "required": [
        "name",
        "widget_template_uuid"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "User friendly name."
        },
        "description": {
          "type": "string",
          "description": "The user-friendly description."
        },
        "widget_configuration": {
          "type": "object",
          "description": "The JSON data that populates the template.",
          "format": "json"
        },
        "widget_template_uuid": {
          "type": "string",
          "description": "The widget template UUID."
        }
      }
    },
    "WidgetPut": {
      "properties": {
        "name": {
          "type": "string",
          "description": "User-friendly name."
        },
        "description": {
          "type": "string",
          "description": "The user-friendly description."
        },
        "widget_configuration": {
          "type": "object",
          "description": "The JSON data that populates the template.",
          "format": "json"
        },
        "widget_template_uuid": {
          "type": "string",
          "description": "The widget template UUID."
        }
      }
    },
    "WidgetResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Widget"
        }
      }
    },
    "WidgetsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Widget"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "PlacementPost": {
      "required": [
        "widget_uuid",
        "region",
        "template_file"
      ],
      "properties": {
        "widget_uuid": {
          "type": "string",
          "description": "A widget identifier."
        },
        "entity_id": {
          "type": "string",
          "description": "The specific instance of a page that you would like to target."
        },
        "sort_order": {
          "type": "integer",
          "description": "The sort order to control the position of a content widget in a region."
        },
        "region": {
          "type": "string",
          "description": "The name of the region in which to insert content widgets."
        },
        "template_file": {
          "type": "string",
          "description": "The template file that you would like to target."
        },
        "status": {
          "type": "string",
          "description": "Sets the placement as either inactive or active.",
          "default": "inactive",
          "enum": [
            "inactive",
            "active"
          ]
        }
      },
      "title": "Placement Post"
    },
    "PlacementPut": {
      "properties": {
        "entity_id": {
          "type": "string",
          "description": "Optional. The specific instance of a page that you would like to target."
        },
        "template_file": {
          "type": "string",
          "description": "The template file that you would like to target."
        },
        "region": {
          "type": "string",
          "description": "The name of the region in which to insert content widgets."
        },
        "sort_order": {
          "type": "integer",
          "description": "The sort order to control the position of a content widget in a region."
        },
        "widget_uuid": {
          "type": "string",
          "description": "A widget identifier."
        },
        "status": {
          "type": "string",
          "description": "Sets the placement as either inactive or active.",
          "enum": [
            "inactive",
            "active"
          ]
        }
      },
      "title": "Placement Put"
    },
    "PlacementResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Placement"
        }
      },
      "title": "Placement Response"
    },
    "PlacementsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Placement"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      },
      "title": "Placements Response"
    },
    "Placement": {
      "properties": {
        "uuid": {
          "type": "string",
          "format": "uuid",
          "description": "The primary identifier."
        },
        "entity_id": {
          "type": "string",
          "description": "The specific instance of a page"
        },
        "status": {
          "type": "string",
          "description": "Determines whether this placement is `active` or `inactive`.",
          "enum": [
            "inactive",
            "active"
          ]
        },
        "template_file": {
          "type": "string",
          "description": "The page template name."
        },
        "region": {
          "type": "string",
          "description": "The user-friendly name."
        },
        "sort_order": {
          "type": "integer",
          "description": "The sort order to control position of a content widget in a region."
        },
        "widget": {
          "$ref": "#/definitions/Widget"
        },
        "date_created": {
          "type": "string",
          "format": "datetime",
          "description": "The date on which this object was initially created."
        },
        "date_modified": {
          "type": "string",
          "format": "datetime",
          "description": "The date on which this object was last updated."
        }
      },
      "title": "Placement"
    },
    "Script": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "format": "uuid",
          "description": "The primary identifier."
        },
        "name": {
          "type": "string",
          "description": "The user-friendly name."
        },
        "description": {
          "type": "string",
          "description": "The user-friendly description."
        },
        "html": {
          "type": "string",
          "description": "An html string containing exactly one `script` tag. Only present if `kind` is `script_tag`"
        },
        "src": {
          "type": "string",
          "description": "The `src` attribute of the script to load. Only present if `kind` is `src`."
        },
        "auto_uninstall": {
          "type": "boolean",
          "description": "Whether to uninstall this script when the app associated with it is removed."
        },
        "load_method": {
          "type": "string",
          "description": "The load method to use for the script. Values are `default`, `async`, or `defer`.",
          "enum": [
            "default",
            "async",
            "defer"
          ]
        },
        "location": {
          "type": "string",
          "description": "Where on the page to place the script. Values are `head` or `footer`.",
          "enum": [
            "head",
            "footer"
          ]
        },
        "visibility": {
          "type": "string",
          "description": "Which set of pages the script should load on. The values allowed for this parameter are `storefront`, `all_pages`, `checkout` and `order_confirmation`. Please note that you need to have `Checkout content` scope to use `all_pages` and `checkout`.",
          "enum": [
            "storefront",
            "all_pages",
            "checkout",
            "order_confirmation"
          ]
        },
        "kind": {
          "type": "string",
          "description": "What type of script this is. Values are `src` - a `script` tag will be generated with its `src` attribute set to the value of `src`; `script_tag` - The value of `html` will be injected directly onto the page.",
          "enum": [
            "src",
            "script_tag"
          ]
        },
        "api_client_id": {
          "type": "string",
          "description": "The client id of the API user that created this script, or blank if created by other means."
        },
        "date_created": {
          "type": "string",
          "format": "date-time",
          "description": "The date on which this object was initially created."
        },
        "date_modified": {
          "type": "string",
          "format": "date-time",
          "description": "The date on which this object was last updated."
        }
      },
      "example": {
        "uuid": "2bf40be2-e57a-4bc8-860a-5bf45edd3795",
        "name": "jQuery",
        "description": "The Write Less, Do More, JavaScript Library.",
        "src": "https://code.jquery.com/jquery-3.2.1.min.js",
        "auto_uninstall": true,
        "load_method": "defer",
        "location": "head",
        "visibility": "storefront",
        "kind": "src",
        "api_client_id": "d1j42k5q76xsm15fa3g8sp2egytoixo",
        "date_created": "2017-12-05T23:37:45.506Z",
        "date_modified": "2017-12-05T23:37:45.506Z"
      }
    },
    "ScriptPost": {
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The user-friendly name.",
          "minLength": 1,
          "maxLength": 255
        },
        "description": {
          "type": "string",
          "description": "The user-friendly description.",
          "maxLength": 255
        },
        "html": {
          "type": "string",
          "description": "An html string containing exactly one `script` tag. Required if `kind` is `script_tag`.",
          "maxLength": 65535
        },
        "src": {
          "type": "string",
          "description": "The `src` attribute of the script to load. Required if `kind` is `src`. Must be in `https` format.",
          "maxLength": 255
        },
        "auto_uninstall": {
          "type": "boolean",
          "description": "Whether to uninstall this script when the app associated with it is removed.",
          "default": true
        },
        "load_method": {
          "type": "string",
          "description": "The load method to use for the script. Acceptable values are `default`, `async`, or `defer`.",
          "default": "defer",
          "enum": [
            "default",
            "async",
            "defer"
          ]
        },
        "location": {
          "type": "string",
          "description": "Where on the page to place the script. Acceptable values are `head` or `footer`.",
          "default": "footer",
          "enum": [
            "head",
            "footer"
          ]
        },
        "visibility": {
          "type": "string",
          "description": "Which set of pages the script should load on. The values allowed for this parameter are `storefront`, `all_pages`, `checkout` and `order_confirmation`. Please note that you need to have `Checkout content` scope to use `all_pages` and `checkout`.",
          "default": "storefront",
          "enum": [
            "storefront",
            "all_pages",
            "checkout",
            "order_confirmation"
          ]
        },
        "kind": {
          "type": "string",
          "description": "What type of script this is. Acceptable values are `src` - a `script` tag will be generated with its `src` attribute set to the value of `src`; `script_tag` - The value of `html` (which must contain a single `script` tag) will be injected directly onto the page.",
          "default": "src",
          "enum": [
            "src",
            "html"
          ]
        }
      },
      "example": {
        "name": "jQuery",
        "description": "The Write Less, Do More, JavaScript Library.",
        "src": "https://code.jquery.com/jquery-3.2.1.min.js",
        "auto_uninstall": true,
        "load_method": "defer",
        "location": "head",
        "visibility": "storefront",
        "kind": "src"
      }
    },
    "ScriptPut": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The user-friendly name.",
          "minLength": 1,
          "maxLength": 255
        },
        "description": {
          "type": "string",
          "description": "The user-friendly description.",
          "maxLength": 255
        },
        "html": {
          "type": "string",
          "description": "An html string containing exactly one `script` tag. Required if `kind` is included and equal to `script_tag`.",
          "maxLength": 65535
        },
        "src": {
          "type": "string",
          "description": "The `src` attribute of the script to load. Required if `kind` is included and equal to `src`. Must be in `https` format.",
          "maxLength": 255
        },
        "auto_uninstall": {
          "type": "boolean",
          "description": "Whether to uninstall this script when the app associated with it is removed.",
          "default": true
        },
        "load_method": {
          "type": "string",
          "description": "The load method to use for the script. Acceptable values are `default`, `async`, or `defer`.",
          "default": "defer",
          "enum": [
            "default",
            "async",
            "defer"
          ]
        },
        "location": {
          "type": "string",
          "description": "Where on the page to place the script. Acceptable values are `head` or `footer`.",
          "default": "footer",
          "enum": [
            "head",
            "footer"
          ]
        },
        "visibility": {
          "type": "string",
          "description": "Which set of pages the script should load on. The values allowed for this parameter are `storefront`, `all_pages`, `checkout` and `order_confirmation`. Please note that you need to have `Checkout content` scope to use `all_pages` and `checkout`.",
          "default": "storefront",
          "enum": [
            "storefront",
            "all_pages",
            "checkout",
            "order_confirmation"
          ]
        },
        "kind": {
          "type": "string",
          "description": "What type of script this is. Acceptable values are `src` - a `script` tag will be generated with its `src` attribute set to the value of `src`; `script_tag` - The value of `html` (which must contain a single `script` tag) will be injected directly onto the page.",
          "default": "src",
          "enum": [
            "src",
            "html"
          ]
        }
      },
      "example": {
        "name": "jQuery",
        "description": "The Write Less, Do More, JavaScript Library.",
        "src": "https://code.jquery.com/jquery-3.2.1.min.js",
        "auto_uninstall": true,
        "load_method": "defer",
        "location": "head",
        "visibility": "storefront",
        "kind": "src"
      }
    },
    "ScriptResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Script"
        }
      }
    },
    "ScriptsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Script"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "ThemeRegion": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The region name."
        }
      }
    },
    "ThemeRegionsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ThemeRegion"
          }
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      }
    },
    "ModifierCollectionResponse": {
      "description": "Modifier Collection Response return for /GET All Modifiers.",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Modifier"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      },
      "title": "Modifier Collection Response"
    },
    "ModifierResponse": {
      "description": "Modifier Response returns for:\n* Get Modifier by Id\n* Update Modifier\n* Create Modifier",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Modifier"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      },
      "title": "Modifier Response"
    },
    "ModifierBase": {
      "type": "object",
      "description": "Common Modifier properties.",
      "title": "Modifier Base",
      "properties": {
        "type": {
          "type": "string",
          "description": "BigCommerce API, which determines how it will display on the storefront. Acceptable values: `date`, `checkbox`, `file`, `text`, `multi_line_text`, `numbers_only_text`, `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. Required in a /POST.\n",
          "enum": [
            "date",
            "checkbox",
            "file",
            "text",
            "multi_line_text",
            "numbers_only_text",
            "radio_buttons",
            "rectangles",
            "dropdown",
            "product_list",
            "product_list_with_images",
            "swatch"
          ],
          "x-required": [
            "post"
          ]
        },
        "required": {
          "type": "boolean",
          "description": "Whether or not this modifer is required or not at checkout. Required in a /POST.\n",
          "x-required": [
            "post"
          ]
        },
        "config": {
          "$ref": "#/definitions/OptionConfig"
        },
        "option_values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModifierValue"
          }
        }
      },
      "required": [
        "type",
        "required"
      ]
    },
    "Modifier": {
      "allOf": [
        {
          "$ref": "#/definitions/ModifierBase"
        },
        {
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique numeric ID of the modifier; increments sequentially.\n",
              "example": 12
            },
            "product_id": {
              "type": "integer",
              "description": "The unique numeric ID of the product to which the option belongs.\n",
              "example": 77
            },
            "name": {
              "type": "string",
              "description": "The unique option name. Auto-generated from the display name, a timestamp, and the product ID.\n",
              "example": "Add-a-$5-Donation1535039590-191"
            },
            "display_name": {
              "type": "string",
              "description": "The name of the option shown on the storefront.\n",
              "example": "Donation"
            }
          }
        }
      ],
      "title": "Modifer",
      "description": "Product Modifier",
      "type": "object"
    },
    "ModifierPost": {
      "description": "The model for a POST to create a modifier on a product.",
      "allOf": [
        {
          "$ref": "#/definitions/ModifierBase"
        },
        {
          "properties": {
            "display_name": {
              "type": "string",
              "description": "The name of the option shown on the storefront.\n",
              "x-required": [
                "post"
              ],
              "example": "Donation"
            }
          },
          "required": [
            "display_name"
          ]
        }
      ],
      "title": "Modifier Post",
      "type": "object"
    },
    "ModifierPut": {
      "type": "object",
      "description": "The model for a PUT to update a modifier on a product.",
      "allOf": [
        {
          "$ref": "#/definitions/ModifierBase"
        }
      ],
      "title": "Modifier Put"
    },
    "ModifierValueCollectionResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModifierValue"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      },
      "title": "Modifier Value Collection Response",
      "description": "Returns for GET All Modifier Values on a Product"
    },
    "ModifierValueResponse": {
      "description": "Modifier Value Response returns for:\n* Create Modifier Value\n* Get Modifier Value by Id\n* Update Modifier Value",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ModifierValue"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      },
      "title": "Modifier Value Response"
    },
    "ModifierValueBase": {
      "allOf": [
        {
          "$ref": "#/definitions/OptionValueBase"
        },
        {
          "properties": {
            "adjusters": {
              "type": "object",
              "properties": {
                "price": {
                  "$ref": "#/definitions/Adjuster"
                },
                "weight": {
                  "$ref": "#/definitions/Adjuster"
                },
                "image_url": {
                  "type": "string",
                  "description": "The URL for an image displayed on the storefront when the modifier value is selected.\n",
                  "example": "https://cdn8.bigcommerce.com/s-{{store_hash}}/products/184/images/445/naturalcanvascart2_1024x1024__92347__29648.1534344533.1280.1280.jpg?c=2"
                },
                "purchasing_disabled": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "boolean",
                      "description": "Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value.\n"
                    },
                    "message": {
                      "type": "string",
                      "description": "The message displayed on the storefront when the purchasing disabled status is `true`.\n"
                    }
                  }
                }
              }
            }
          }
        }
      ],
      "title": "Modifier Value Base",
      "type": "object"
    },
    "ModifierValue": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/ModifierValueBase"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique numeric ID of the value; increments sequentially.\n"
            }
          }
        }
      ],
      "title": "Modifier Value",
      "description": "Part of Modifier Value Response "
    },
    "ModifierValuePost": {
      "type": "object",
      "description": "The model for a POST to create a modifier value on a product.",
      "allOf": [
        {
          "$ref": "#/definitions/ModifierValueBase"
        }
      ],
      "title": "Modifier Value Post"
    },
    "ModifierValuePut": {
      "type": "object",
      "description": "The model for a PUT to update a modifier value on a product.",
      "allOf": [
        {
          "$ref": "#/definitions/ModifierValueBase"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique numeric ID of the value; increments sequentially.\n",
              "x-required": [
                "put"
              ]
            }
          }
        }
      ],
      "title": "Modifier Value Put"
    },
    "OptionCollectionResponse": {
      "description": "Get all product options",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Option"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      },
      "title": "Option Collection Response"
    },
    "OptionResponse": {
      "description": "Option Response returns for:\n* Create Option\n* Get Option by Id\n* Update Option",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Option"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      },
      "title": "Option Response"
    },
    "OptionBase": {
      "type": "object",
      "description": "Common Option properties.",
      "title": "Option Base",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The unique numerical ID of the option, increments sequentially.\n",
          "x-nullable": true,
          "example": 55
        },
        "product_id": {
          "type": "integer",
          "description": "The unique numerical ID of the product to which the option belongs.\n",
          "x-required": [
            "post",
            "put"
          ],
          "example": 4
        },
        "display_name": {
          "type": "string",
          "description": "The name of the option shown on the storefront.\n",
          "x-required": [
            "post",
            "put"
          ],
          "minLength": 1,
          "maxLength": 255,
          "example": "Add-a-$5-Donation1535042499-187"
        },
        "type": {
          "type": "string",
          "description": "The type of option, which determines how it will display on the storefront. Acceptable values: `radio_buttons`, `rectangles`, `dropdown`, `product_list`, `product_list_with_images`, `swatch`. For reference, the former v2 API values are: RB = radio_buttons, RT = rectangles, S = dropdown, P = product_list, PI = product_list_with_images, CS = swatch.\n",
          "enum": [
            "radio_buttons",
            "rectangles",
            "dropdown",
            "product_list",
            "product_list_with_images",
            "swatch"
          ],
          "x-required": [
            "post",
            "put"
          ]
        },
        "config": {
          "$ref": "#/definitions/OptionConfig"
        },
        "option_values": {
          "type": "array",
          "x-required": [
            "post",
            "put"
          ],
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/OptionValue"
          }
        }
      }
    },
    "Option": {
      "allOf": [
        {
          "$ref": "#/definitions/OptionBase"
        },
        {
          "properties": {
            "name": {
              "type": "string",
              "description": "The unique option name, auto-generated from the display name, a timestamp, and the product ID.\n",
              "example": "Add-a-$5-Donation1535042499-187"
            }
          }
        }
      ],
      "title": "Option",
      "type": "object"
    },
    "OptionPost": {
      "type": "object",
      "description": "The model for a POST to create options on a product.",
      "allOf": [
        {
          "$ref": "#/definitions/OptionBase"
        }
      ],
      "title": "Option Post"
    },
    "OptionPut": {
      "type": "object",
      "description": "The model for a PUT to update options on a product.",
      "allOf": [
        {
          "$ref": "#/definitions/OptionBase"
        }
      ],
      "title": "Option Put"
    },
    "CategoryTreeCollectionResponse": {
      "description": "Returns the categories tree, a nested lineage of the categories with parent->child relationship. The Category objects returned are simplified versions of the category objects returned in the rest of this API.\n",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryNode"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      },
      "title": "Category Tree Collection Response"
    },
    "CategoryNode": {
      "type": "object",
      "description": "Used to reflect parent <> child category relationships. Used by Category Tree.",
      "title": "Category Node",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The unique numeric ID of the category; increments sequentially.\n",
          "example": 26
        },
        "parent_id": {
          "type": "integer",
          "description": "The unique numeric ID of the category's parent. This field controls where the category sits in the tree of categories that organize the catalog.\n",
          "example": 25
        },
        "name": {
          "type": "string",
          "description": "The name displayed for the category. Name is unique with respect to the category's siblings.\n",
          "example": "Bath"
        },
        "is_visible": {
          "type": "boolean",
          "description": "Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view.\n",
          "example": true
        },
        "url": {
          "type": "string",
          "description": "The custom URL for the category on the storefront.\n",
          "example": "/towels/bath-towels/"
        },
        "children": {
          "type": "array",
          "description": "The list of children of the category.\n",
          "items": {
            "$ref": "#/definitions/CategoryNode"
          }
        }
      }
    },
    "CategoryCollectionResponse": {
      "description": "Response for Get All Categories",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Category"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      },
      "title": "Category Collection Response"
    },
    "CategoryResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Category"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      },
      "title": "Category Response",
      "description": "Category Response returns for:\n* Create Category\n* Get Category by Id\n* Update Category by Id"
    },
    "CategoryBase": {
      "type": "object",
      "description": "Common Category object properties.",
      "title": "Category Base",
      "properties": {
        "parent_id": {
          "type": "integer",
          "description": "The unique numeric ID of the category's parent. This field controls where the category sits in the tree of categories that organize the catalog.\nRequired in /POST if creating a child category.",
          "x-required": [
            "post"
          ],
          "example": 2
        },
        "name": {
          "type": "string",
          "description": "The name displayed for the category. Name is unique with respect to the category's siblings.\nRequired in /POST.",
          "x-required": [
            "post"
          ],
          "minLength": 1,
          "maxLength": 50,
          "example": "Bath"
        },
        "description": {
          "type": "string",
          "description": "The product description, which can include HTML formatting.\n",
          "example": "<p>We offer a wide variety of products perfect for relaxing</p>"
        },
        "views": {
          "type": "integer",
          "description": "Number of views the category has on the storefront.\n",
          "example": 1050
        },
        "sort_order": {
          "type": "integer",
          "description": "Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be.\n",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "example": 3
        },
        "page_title": {
          "type": "string",
          "description": "Custom title for the category page. If not defined, the category name will be used as the meta title.\n",
          "minLength": 0,
          "maxLength": 255,
          "example": "Bath"
        },
        "search_keywords": {
          "type": "string",
          "description": "A comma-separated list of keywords that can be used to locate the category when searching the store.\n",
          "minLength": 0,
          "maxLength": 65535
        },
        "meta_keywords": {
          "type": "array",
          "description": "Custom meta keywords for the category page. If not defined, the store's default keywords will be used. Must post as an array like: [\"awesome\",\"sauce\"].\n",
          "items": {
            "type": "string"
          }
        },
        "meta_description": {
          "type": "string",
          "description": "Custom meta description for the category page. If not defined, the store's default meta description will be used.\n",
          "minLength": 0,
          "maxLength": 65535
        },
        "layout_file": {
          "type": "string",
          "description": "The layout template file used to render this category.\n",
          "minLength": 0,
          "maxLength": 500,
          "example": "category.html"
        },
        "is_visible": {
          "type": "boolean",
          "description": "Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view.\n"
        },
        "default_product_sort": {
          "type": "string",
          "description": "Determines how the products are sorted on category page load.\n",
          "enum": [
            "use_store_settings",
            "featured",
            "newest",
            "best_selling",
            "alpha_asc",
            "alpha_desc",
            "avg_customer_review",
            "price_asc",
            "price_desc"
          ]
        },
        "image_url": {
          "type": "string",
          "description": "Image URL used for this category on the storefront. Images can be uploaded via form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field.\n",
          "x-url": true,
          "example": "https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png"
        },
        "custom_url": {
          "$ref": "#/definitions/CustomUrlCategory"
        }
      },
      "required": [
        "parent_id",
        "name"
      ]
    },
    "Category": {
      "type": "object",
      "description": "A Category object.",
      "allOf": [
        {
          "$ref": "#/definitions/CategoryBase"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique numeric ID of the category; increments sequentially.\n",
              "example": 15
            }
          }
        }
      ],
      "title": "Category"
    },
    "CategoryPost": {
      "type": "object",
      "description": "The model to create a Category",
      "allOf": [
        {
          "$ref": "#/definitions/CategoryBase"
        }
      ],
      "title": "Category Post"
    },
    "CategoryPut": {
      "type": "object",
      "description": "The model to update a Category",
      "allOf": [
        {
          "$ref": "#/definitions/CategoryBase"
        }
      ],
      "title": "Category Put"
    },
    "BrandCollectionResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Brand"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      },
      "title": "Brand Collection Response",
      "description": "Get All Brands Response."
    },
    "BrandResponse": {
      "description": "Brand Response returns for:\n* Create Brand\n* Get Brand by Id\n* Update Brand by Id",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Brand"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      },
      "title": "Brand Response"
    },
    "BrandBase": {
      "type": "object",
      "description": "Common Brand properties.\n",
      "title": "Brand Base",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the brand. Must be unique.\nRequired in /POST.",
          "x-required": [
            "post",
            "put"
          ],
          "minLength": 1,
          "maxLength": 255,
          "example": "Common Good"
        },
        "page_title": {
          "type": "string",
          "description": "The title shown in the browser while viewing the brand.\n",
          "minLength": 0,
          "maxLength": 255,
          "example": "Common Good"
        },
        "meta_keywords": {
          "type": "array",
          "description": "Comma-separated list of meta keywords to include in the HTML.\n",
          "example": "modern, clean, contemporary",
          "items": {
            "type": "string"
          }
        },
        "meta_description": {
          "type": "string",
          "description": "A meta description to include.\n",
          "minLength": 0,
          "maxLength": 65535,
          "example": "Common Good is a modern brand."
        },
        "search_keywords": {
          "type": "string",
          "description": "A comma-separated list of keywords that can be used to locate this brand.\n",
          "minLength": 0,
          "maxLength": 65535,
          "example": "kitchen, laundry, cart, storage"
        },
        "image_url": {
          "type": "string",
          "description": "Image URL used for this category on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.\n",
          "x-url": true,
          "example": "https://cdn8.bigcommerce.com/s-12345/product_images/k/your-image-name.png"
        },
        "custom_url": {
          "$ref": "#/definitions/CustomUrlBrand"
        }
      },
      "required": [
        "name"
      ]
    },
    "Brand": {
      "allOf": [
        {
          "$ref": "#/definitions/BrandBase"
        },
        {
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique numeric ID of the brand; increments sequentially.\n",
              "example": 37,
              "x-nullable": true
            }
          }
        }
      ],
      "type": "object",
      "title": "Brand"
    },
    "BrandPost": {
      "description": "Model for creating a new Brand.",
      "allOf": [
        {
          "$ref": "#/definitions/BrandBase"
        }
      ],
      "type": "object",
      "title": "Brand Post"
    },
    "BrandPut": {
      "type": "object",
      "description": "Model for updating an existing Brand.",
      "allOf": [
        {
          "$ref": "#/definitions/BrandBase"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique numeric ID of the brand; increments sequentially.\n",
              "example": 6,
              "x-nullable": true
            }
          }
        }
      ],
      "title": "Brand Put"
    },
    "SubscriberCollectionResponse": {
      "description": "Response payload for the BigCommerce API.\n",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Subscriber"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "SubscriberResponse": {
      "description": "Response payload for the BigCommerce API.\n",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Subscriber"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      }
    },
    "SubscriberBase": {
      "type": "object",
      "description": "Common Subscriber properties.",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The unique numeric ID of the subscriber; increments sequentially.\n",
          "x-required": [
            "put"
          ]
        },
        "email": {
          "type": "string",
          "description": "The email of the subscriber. Must be unique.\n",
          "x-required": [
            "post"
          ]
        },
        "first_name": {
          "type": "string",
          "description": "The first name of the subscriber.\n",
          "minLength": 0,
          "maxLength": 255
        },
        "last_name": {
          "type": "string",
          "description": "The last name of the subscriber.\n",
          "minLength": 0,
          "maxLength": 255
        },
        "source": {
          "type": "string",
          "description": "The source of the subscriber. Values are: `storefront`, `order`, or `custom`.\n",
          "minLength": 0,
          "maxLength": 255
        },
        "order_id": {
          "type": "integer",
          "description": "The ID of the source order, if source was an order.\n",
          "x-nullable": true,
          "minimum": 1,
          "maximum": 2147483647
        }
      }
    },
    "Subscriber": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/SubscriberBase"
        },
        {
          "type": "object",
          "properties": {
            "date_modified": {
              "type": "string",
              "format": "date-time",
              "description": "The date on which the subscriber was modified.\n"
            },
            "date_created": {
              "type": "string",
              "format": "date-time",
              "description": "The date of which the subscriber was created.\n"
            }
          }
        }
      ]
    },
    "SubscriberPost": {
      "type": "object",
      "description": "The model for a POST to create a subscriber.\n",
      "allOf": [
        {
          "$ref": "#/definitions/SubscriberBase"
        }
      ]
    },
    "SubscriberPut": {
      "type": "object",
      "description": "The model for a PUT to update a subscriber.\n",
      "allOf": [
        {
          "$ref": "#/definitions/SubscriberBase"
        }
      ]
    },
    "VariantCollectionResponse": {
      "description": "Response payload for the BigCommerce API.\n",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variant"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "VariantResponse": {
      "description": "Successful response.\n",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Variant"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      }
    },
    "VariantBase": {
      "type": "object",
      "description": "Common Variant properties.",
      "properties": {
        "cost_price": {
          "type": "number",
          "format": "double",
          "description": "The cost price of the variant. Not affected by Price List prices.",
          "x-nullable": true,
          "minimum": 0
        },
        "price": {
          "type": "number",
          "format": "double",
          "description": "This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price.",
          "x-nullable": true,
          "minimum": 0
        },
        "sale_price": {
          "type": "number",
          "format": "double",
          "description": "This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price.",
          "x-nullable": true,
          "minimum": 0
        },
        "retail_price": {
          "type": "number",
          "format": "double",
          "description": "This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price.",
          "x-nullable": true,
          "minimum": 0
        },
        "weight": {
          "type": "number",
          "format": "double",
          "description": "This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight.",
          "x-nullable": true,
          "minimum": 0
        },
        "width": {
          "type": "number",
          "format": "double",
          "description": "Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width.\n",
          "x-nullable": true,
          "minimum": 0
        },
        "height": {
          "type": "number",
          "format": "double",
          "description": "Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height.\n",
          "x-nullable": true,
          "minimum": 0
        },
        "depth": {
          "type": "number",
          "format": "double",
          "description": "Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth.\n",
          "x-nullable": true,
          "minimum": 0
        },
        "is_free_shipping": {
          "type": "boolean",
          "description": "Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero.\n"
        },
        "fixed_cost_shipping_price": {
          "type": "number",
          "format": "double",
          "description": "A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.\n",
          "x-nullable": true,
          "minimum": 0
        },
        "purchasing_disabled": {
          "type": "boolean",
          "description": "If `true`, this variant will not be purchasable on the storefront."
        },
        "purchasing_disabled_message": {
          "type": "string",
          "description": "If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected.",
          "minLength": 0,
          "maxLength": 255
        },
        "image_url": {
          "type": "string",
          "description": "The image that will be displayed when this variant is selected on the storefront. When updating a SKU image, send the publicly accessible URL. Supported image formats are JPEG, PNG, and GIF. Generic product images not specific to the variant should be stored on the product.",
          "x-url": true
        },
        "upc": {
          "type": "string",
          "description": "The UPC code used in feeds for shopping comparison sites and external channel integrations.",
          "x-nullable": true
        },
        "inventory_level": {
          "type": "integer",
          "description": "Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`.",
          "x-nullable": true
        },
        "inventory_warning_level": {
          "type": "integer",
          "description": "When the variant hits this inventory level, it is considered low stock.",
          "x-nullable": true
        },
        "bin_picking_number": {
          "type": "string",
          "description": "Identifies where in a warehouse the variant is located.",
          "x-nullable": true,
          "minLength": 0,
          "maxLength": 255
        }
      }
    },
    "Variant": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/VariantBase"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer"
            },
            "product_id": {
              "type": "integer"
            },
            "sku": {
              "type": "string"
            },
            "sku_id": {
              "type": "integer",
              "description": "Read-only reference to v2 API's SKU ID. Null if it is a base variant.",
              "x-nullable": true
            },
            "option_values": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OptionValueVariant"
              },
              "description": "Array of option and option values IDs that make up this variant. Will be empty if the variant is the product's base variant."
            },
            "calculated_price": {
              "type": "number",
              "format": "double",
              "description": "The price of the variant as seen on the storefront. This price takes into account `sale_price` and any price adjustment rules that are applicable to this variant.\n"
            }
          }
        }
      ]
    },
    "VariantPost": {
      "type": "object",
      "description": "The model for a POST to create variants on a product.\n",
      "allOf": [
        {
          "$ref": "#/definitions/VariantBase"
        },
        {
          "type": "object",
          "properties": {
            "product_id": {
              "type": "integer",
              "x-required": [
                "post"
              ]
            },
            "sku": {
              "type": "string",
              "x-required": [
                "post"
              ],
              "minLength": 1,
              "maxLength": 255
            },
            "option_values": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OptionValueVariantPost"
              },
              "description": "Array of option and option values IDs that make up this variant. Will be empty if the variant is the product's base variant.",
              "x-required": [
                "post"
              ]
            }
          }
        }
      ]
    },
    "VariantPut": {
      "type": "object",
      "description": "The model for a PUT to update variants on a product.\n",
      "allOf": [
        {
          "$ref": "#/definitions/VariantBase"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "x-required": [
                "put"
              ]
            }
          }
        }
      ]
    },
    "VariantProductPost": {
      "type": "object",
      "description": "The model for a POST to create variants on a product.\n",
      "allOf": [
        {
          "$ref": "#/definitions/VariantBase"
        },
        {
          "type": "object",
          "properties": {
            "product_id": {
              "type": "integer"
            },
            "sku": {
              "type": "string",
              "x-required": [
                "post"
              ],
              "minLength": 1,
              "maxLength": 255
            },
            "option_values": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OptionValueProductPost"
              },
              "x-required": [
                "post"
              ]
            }
          }
        }
      ]
    },
    "VariantProductPut": {
      "type": "object",
      "description": "The model for a PUT to update variants on a product.\n",
      "allOf": [
        {
          "$ref": "#/definitions/VariantBase"
        },
        {
          "type": "object",
          "properties": {
            "product_id": {
              "type": "integer"
            },
            "sku": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255
            }
          }
        }
      ]
    },
    "OptionValueProductBase": {
      "type": "object",
      "description": "Common Option Value Product properties.",
      "title": "Option Value Product Base",
      "properties": {
        "option_display_name": {
          "type": "string",
          "description": "The name of the option.\n",
          "x-required": [
            "post"
          ],
          "minLength": 1,
          "maxLength": 255,
          "example": "Color"
        },
        "label": {
          "type": "string",
          "description": "The label of the option value.\n",
          "x-required": [
            "post"
          ],
          "minLength": 1,
          "maxLength": 255,
          "example": "Beige"
        }
      }
    },
    "OptionValueProductPost": {
      "type": "object",
      "description": "The model for a POST to create option values on a product.",
      "allOf": [
        {
          "$ref": "#/definitions/OptionValueProductBase"
        }
      ],
      "title": "Option Value Product Post"
    },
    "OptionValueVariant": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/OptionValueProductBase"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer"
            },
            "option_id": {
              "type": "integer"
            }
          }
        }
      ],
      "title": "Option Value Variant"
    },
    "OptionValueVariantPost": {
      "type": "object",
      "description": "The model for a POST to create option values on a variant.",
      "properties": {
        "id": {
          "type": "integer",
          "x-required": [
            "post"
          ]
        },
        "option_id": {
          "type": "integer",
          "x-required": [
            "post"
          ]
        }
      },
      "title": "Option Value Variant Post"
    },
    "OptionValueCollectionResponse": {
      "description": "Get Option Values response.",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OptionValue"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      },
      "title": "Option Value Collection Response"
    },
    "OptionValueResponse": {
      "description": "Option Value Response returns:\n* Create Option Value\n* Get Option Value by Id\n* Update Option Value",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/OptionValue"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      },
      "title": "Option Value Response"
    },
    "OptionValueBase": {
      "type": "object",
      "description": "Common Option Value properties.",
      "title": "Option Value Base",
      "properties": {
        "is_default": {
          "type": "boolean",
          "description": "The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.\n",
          "example": false
        },
        "label": {
          "type": "string",
          "description": "The text display identifying the value on the storefront. Required in a /POST.\n",
          "x-required": [
            "post"
          ],
          "example": "Green"
        },
        "sort_order": {
          "type": "integer",
          "description": "The order in which the value will be displayed on the product page. Required in a /POST.\n",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "x-required": [
            "post"
          ],
          "example": 0
        },
        "value_data": {
          "type": "object",
          "description": "Extra data describing the value, based on the type of option or modifier with which the value is associated. The `swatch` type option can accept an array of `colors`, with up to three hexidecimal color keys; or an `image_url`, which is a full image URL path including protocol. The `product list` type option requires a `product_id`. The `checkbox` type option requires a boolean flag, called `checked_value`, to determine which value is considered to be the checked state.\n"
        }
      },
      "required": [
        "label",
        "sort_order"
      ]
    },
    "OptionValue": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/OptionValueBase"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique numeric ID of the value; increments sequentially.\n"
            }
          }
        }
      ],
      "title": "Option Value"
    },
    "OptionValuePost": {
      "type": "object",
      "description": "The model for a POST to create option values on a product.",
      "allOf": [
        {
          "$ref": "#/definitions/OptionValueBase"
        }
      ],
      "title": "Option Value Post"
    },
    "OptionValuePut": {
      "type": "object",
      "description": "The model for a PUT to update option values on a product.",
      "allOf": [
        {
          "$ref": "#/definitions/OptionValueBase"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique numeric ID of the value; increments sequentially.\n",
              "x-required": [
                "put"
              ]
            }
          }
        }
      ],
      "title": "Option Value Put"
    },
    "ProductImageCollectionResponse": {
      "description": "Response payload for the BigCommerce API.\n",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductImage"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "ProductImageResponse": {
      "description": "Response payload for the BigCommerce API.\n",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ProductImage"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      }
    },
    "ProductImageBase": {
      "type": "object",
      "description": "Common ProductImage properties.\n",
      "properties": {
        "is_thumbnail": {
          "description": "Flag for identifying whether the image is used as the product's thumbnail.\n",
          "type": "boolean"
        },
        "sort_order": {
          "type": "integer",
          "description": "The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered.\n",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "description": {
          "description": "The description for the image.\n",
          "type": "string"
        }
      }
    },
    "ProductImage": {
      "type": "object",
      "description": "The full ProductImage model.\n",
      "allOf": [
        {
          "$ref": "#/definitions/ProductImageBase"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique numeric ID of the image; increments sequentially.\n",
              "type": "integer"
            },
            "product_id": {
              "description": "The unique numeric identifier for the product with which the image is associated.\n",
              "type": "integer"
            },
            "image_file": {
              "description": "The local path to the original image file uploaded to BigCommerce.\n",
              "type": "string"
            },
            "url_zoom": {
              "description": "The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled.\n",
              "type": "string"
            },
            "url_standard": {
              "description": "The standard URL for this image. By default, this is used for product-page images.\n",
              "type": "string"
            },
            "url_thumbnail": {
              "description": "The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels.\n",
              "type": "string"
            },
            "url_tiny": {
              "description": "The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page.\n",
              "type": "string"
            },
            "date_modified": {
              "format": "date-time",
              "description": "The date on which the product image was modified.\n",
              "type": "string"
            }
          }
        }
      ]
    },
    "ProductImagePost": {
      "type": "object",
      "description": "The model for a POST to create an image on a product.\n",
      "allOf": [
        {
          "$ref": "#/definitions/ProductImageBase"
        },
        {
          "type": "object",
          "properties": {
            "image_url": {
              "description": "Must be a fully qualified URL path, including protocol.\n",
              "type": "string"
            },
            "image_file": {
              "description": "Must be sent as a multipart/form-data field in the request body.\n",
              "type": "string"
            }
          }
        }
      ]
    },
    "ProductImagePut": {
      "type": "object",
      "description": "The model for a PUT to update applicable ProductImage fields.\n",
      "allOf": [
        {
          "$ref": "#/definitions/ProductImageBase"
        }
      ]
    },
    "ProductVideoCollectionResponse": {
      "description": "Response payload for the BigCommerce API.\n",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductVideo"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "ProductVideoResponse": {
      "description": "Response payload for the BigCommerce API.\n",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ProductVideo"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      }
    },
    "ProductVideoBase": {
      "type": "object",
      "description": "Common ProductVideo properties.",
      "properties": {
        "title": {
          "type": "string",
          "description": "The title for the video. If left blank, this will be filled in according to data on a host site.\n",
          "minLength": 0,
          "maxLength": 255
        },
        "description": {
          "type": "string",
          "description": "The description for the video. If left blank, this will be filled in according to data on a host site.\n"
        },
        "sort_order": {
          "type": "integer",
          "description": "The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered.\n",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "type": {
          "type": "string",
          "description": "The video type (a short name of a host site).\n",
          "enum": [
            "youtube"
          ]
        }
      }
    },
    "ProductVideo": {
      "type": "object",
      "description": "A product video model.\n",
      "allOf": [
        {
          "$ref": "#/definitions/ProductVideoBase"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique numeric ID of the product video; increments sequentially.\n"
            },
            "video_id": {
              "description": "The ID of the video on a host site.\n",
              "type": "string"
            },
            "product_id": {
              "description": "The unique numeric identifier for the product with which the image is associated.\n",
              "type": "integer"
            },
            "length": {
              "description": "Length of the video. This will be filled in according to data on a host site.\n",
              "type": "string"
            }
          }
        }
      ]
    },
    "ProductVideoPost": {
      "type": "object",
      "description": "The model for a POST to create a video on a product.\n",
      "allOf": [
        {
          "$ref": "#/definitions/ProductVideoBase"
        },
        {
          "type": "object",
          "properties": {
            "video_id": {
              "type": "string",
              "description": "The ID of the video on a host site.\n",
              "x-required": [
                "post"
              ],
              "minLength": 0,
              "maxLength": 25
            }
          }
        }
      ]
    },
    "ProductVideoPut": {
      "type": "object",
      "description": "The model for a PUT to update a video on a product.\n",
      "allOf": [
        {
          "$ref": "#/definitions/ProductVideoBase"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique numeric ID of the product video; increments sequentially.\n",
              "x-required": [
                "put"
              ]
            }
          }
        }
      ]
    },
    "ProductReviewCollectionResponse": {
      "description": "Response payload for the BigCommerce API.\n",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductReview"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "ProductReviewResponse": {
      "description": "Response payload for the BigCommerce API.\n",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ProductReview"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      }
    },
    "ProductReviewBase": {
      "type": "object",
      "description": "Common ProductReview properties.",
      "properties": {
        "title": {
          "type": "string",
          "description": "The title for the product review.\nRequired in ",
          "minLength": 0,
          "maxLength": 255
        },
        "text": {
          "type": "string",
          "description": "The text for the product review.\n"
        },
        "status": {
          "type": "string",
          "description": "The status of the product review. Must be one of `approved`, `disapproved` or `pending`.\n"
        },
        "rating": {
          "type": "integer",
          "description": "The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5."
        },
        "email": {
          "type": "string",
          "description": "The email of the reviewer. Must be a valid email, or an empty string."
        },
        "name": {
          "type": "string",
          "description": "The name of the reviewer.",
          "minLength": 0,
          "maxLength": 255
        },
        "date_reviewed": {
          "type": "string",
          "format": "date-time",
          "description": "Date the product was reviewed.\n"
        }
      }
    },
    "ProductReview": {
      "type": "object",
      "description": "A product review model.\n",
      "allOf": [
        {
          "$ref": "#/definitions/ProductReviewBase"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "description": "The unique numeric ID of the product review; increments sequentially.\n",
              "type": "integer"
            },
            "product_id": {
              "description": "The unique numeric identifier for the product with which the review is associated.\n",
              "type": "integer"
            },
            "date_created": {
              "type": "string",
              "format": "date-time",
              "description": "Date the product review was created.\n"
            },
            "date_modified": {
              "type": "string",
              "format": "date-time",
              "description": "Date the product review was modified.\n"
            }
          }
        }
      ]
    },
    "ProductReviewPost": {
      "description": "The model for a POST to create a product review.\n",
      "allOf": [
        {
          "$ref": "#/definitions/ProductReviewBase"
        }
      ],
      "type": "object"
    },
    "ProductReviewPut": {
      "type": "object",
      "description": "The model for a PUT to update a product review.\n",
      "allOf": [
        {
          "$ref": "#/definitions/ProductReviewBase"
        }
      ]
    },
    "ImageResponse": {
      "description": "Image Response returns for:\n* Create Variant Image\n* Create Modifier Image\n* Create Category Image\n* Create Brand Image",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ResourceImage"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      },
      "title": "Image Response"
    },
    "ResourceImage": {
      "type": "object",
      "description": "An object containing a publicly accessible image URL, or a form post that contains an image file.\n",
      "properties": {
        "image_url": {
          "type": "string",
          "description": "A public URL for a GIF, JPEG, or PNG image.\n"
        }
      }
    },
    "ProductCollectionResponse": {
      "type": "object",
      "description": "Response payload for the BigCommerce API.\n",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Product"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "ProductResponse": {
      "description": "Response payload for the BigCommerce API.\n",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Product"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      }
    },
    "ProductBase": {
      "type": "object",
      "description": "Common Product properties.",
      "title": "Product Base",
      "properties": {
        "name": {
          "type": "string",
          "description": "The product name.\n",
          "x-required": [
            "post"
          ],
          "minLength": 1,
          "maxLength": 255,
          "example": "Smith Journal 13"
        },
        "type": {
          "type": "string",
          "description": "The product type. One of: `physical` - a physical stock unit, `digital` - a digital download.\n",
          "x-required": [
            "post"
          ],
          "enum": [
            "physical",
            "digital"
          ],
          "example": "physical"
        },
        "sku": {
          "type": "string",
          "description": "User defined product code/stock keeping unit (SKU).\n",
          "minLength": 0,
          "maxLength": 255,
          "example": "SM-13"
        },
        "description": {
          "type": "string",
          "description": "The product description, which can include HTML formatting.\n",
          "example": "<p><span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vel metus ac est egestas porta sed quis erat. Integer id nulla massa. Proin vitae enim nisi. Praesent non dignissim nulla. Nulla mattis id massa ac pharetra. Mauris et nisi in dolor aliquam sodales. Aliquam dui nisl, dictum quis leo sit amet, rutrum volutpat metus. Curabitur libero nunc, interdum ac libero non, tristique porttitor metus. Ut non dignissim lorem, in vestibulum leo. Vivamus sodales quis turpis eget.</span></p>"
        },
        "weight": {
          "type": "number",
          "format": "double",
          "description": "Weight of the product, which can be used when calculating shipping costs. This is based on the unit set on the store\n",
          "x-required": [
            "post"
          ],
          "minimum": 0,
          "maximum": 9999999999,
          "example": 1
        },
        "width": {
          "type": "number",
          "format": "double",
          "description": "Width of the product, which can be used when calculating shipping costs.\n",
          "minimum": 0,
          "maximum": 9999999999,
          "example": 4.5
        },
        "depth": {
          "type": "number",
          "format": "double",
          "description": "Depth of the product, which can be used when calculating shipping costs.\n",
          "minimum": 0,
          "maximum": 9999999999,
          "example": 2.6
        },
        "height": {
          "type": "number",
          "format": "double",
          "description": "Height of the product, which can be used when calculating shipping costs.\n",
          "minimum": 0,
          "maximum": 9999999999,
          "example": 2
        },
        "price": {
          "type": "number",
          "format": "double",
          "description": "The price of the product. The price should include or exclude tax, based on the store settings.\n",
          "x-required": [
            "post"
          ],
          "minimum": 0,
          "example": 25
        },
        "cost_price": {
          "type": "number",
          "format": "double",
          "description": "The cost price of the product. Stored for reference only; it is not used or displayed anywhere on the store.\n",
          "minimum": 0
        },
        "retail_price": {
          "type": "number",
          "format": "double",
          "description": "The retail cost of the product. If entered, the retail cost price will be shown on the product page.\n",
          "minimum": 0
        },
        "sale_price": {
          "type": "number",
          "format": "double",
          "description": "If entered, the sale price will be used instead of value in the price field when calculating the product's cost.\n",
          "minimum": 0
        },
        "tax_class_id": {
          "type": "integer",
          "description": "The ID of the tax class applied to the product. (NOTE: Value ignored if automatic tax is enabled.)\n",
          "minimum": 0,
          "maximum": 1000000000
        },
        "product_tax_code": {
          "type": "string",
          "description": "Accepts AvaTax System Tax Codes, which identify products and services that fall into special sales-tax categories. By using these codes, merchants who subscribe to BigCommerce's Avalara Premium integration can calculate sales taxes more accurately. Stores without Avalara Premium will ignore the code when calculating sales tax. Do not pass more than one code. The codes are case-sensitive. For details, please see Avalara's documentation.\n",
          "minLength": 0,
          "maxLength": 255
        },
        "categories": {
          "type": "array",
          "description": "An array of IDs for the categories to which this product belongs. When updating a product, if an array of categories is supplied, all product categories will be overwritten. Does not accept more than 1,000 ID values.\n",
          "x-required": [
            "post"
          ],
          "items": {
            "type": "integer"
          }
        },
        "brand_id": {
          "type": "integer",
          "description": "A product can be added to an existing brand during a product /PUT or /POST.\n",
          "minimum": 0,
          "maximum": 1000000000
        },
        "inventory_level": {
          "type": "integer",
          "description": "Current inventory level of the product. Simple inventory tracking must be enabled (See the `inventory_tracking` field) for this to take any effect.\n",
          "minimum": 0,
          "maximum": 1000000000
        },
        "inventory_warning_level": {
          "type": "integer",
          "description": "Inventory warning level for the product. When the product's inventory level drops below the warning level, the store owner will be informed. Simple inventory tracking must be enabled (see the `inventory_tracking` field) for this to take any effect.\n",
          "minimum": 0,
          "maximum": 1000000000
        },
        "inventory_tracking": {
          "type": "string",
          "description": "The type of inventory tracking for the product. Values are: `none` - inventory levels will not be tracked; `product` - inventory levels will be tracked using the `inventory_level` and `inventory_warning_level` fields; `variant` - inventory levels will be tracked based on variants, which maintain their own warning levels and inventory levels.\n",
          "enum": [
            "none",
            "product",
            "variant"
          ]
        },
        "fixed_cost_shipping_price": {
          "type": "number",
          "format": "double",
          "description": "A fixed shipping cost for the product. If defined, this value will be used during checkout instead of normal shipping-cost calculation.\n",
          "minimum": 0
        },
        "is_free_shipping": {
          "type": "boolean",
          "description": "Flag used to indicate whether the product has free shipping. If `true`, the shipping cost for the product will be zero.\n"
        },
        "is_visible": {
          "type": "boolean",
          "description": "Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the product will be displayed. If `false`, the product will be hidden from view.\n"
        },
        "is_featured": {
          "type": "boolean",
          "description": "Flag to determine whether the product should be included in the `featured products` panel when viewing the store.\n"
        },
        "related_products": {
          "type": "array",
          "description": "An array of IDs for the related products.\n",
          "items": {
            "type": "integer"
          }
        },
        "warranty": {
          "type": "string",
          "description": "Warranty information displayed on the product page. Can include HTML formatting.\n",
          "minLength": 0,
          "maxLength": 65535
        },
        "bin_picking_number": {
          "type": "string",
          "description": "The BIN picking number for the product.\n",
          "minLength": 0,
          "maxLength": 255
        },
        "layout_file": {
          "type": "string",
          "description": "The layout template file used to render this product.\n",
          "minLength": 0,
          "maxLength": 500
        },
        "upc": {
          "type": "string",
          "description": "The product UPC code, which is used in feeds for shopping comparison sites and external channel integrations.\n",
          "minLength": 0,
          "maxLength": 255
        },
        "search_keywords": {
          "type": "string",
          "description": "A comma-separated list of keywords that can be used to locate the product when searching the store.\n",
          "minLength": 0,
          "maxLength": 65535
        },
        "availability": {
          "type": "string",
          "enum": [
            "available",
            "disabled",
            "preorder"
          ],
          "description": "Availability of the product. Availability options are: `available` - the product can be purchased on the storefront; `disabled` - the product is listed in the storefront, but cannot be purchased; `preorder` - the product is listed for pre-orders.\n"
        },
        "availability_description": {
          "type": "string",
          "description": "Availability text displayed on the checkout page, under the product title. Tells the customer how long it will normally take to ship this product, such as: 'Usually ships in 24 hours.'\n",
          "minLength": 0,
          "maxLength": 255
        },
        "gift_wrapping_options_type": {
          "type": "string",
          "enum": [
            "any",
            "none",
            "list"
          ],
          "description": "Type of gift-wrapping options. Values: `any` - allow any gift-wrapping options in the store; `none` - disallow gift-wrapping on the product; `list` – provide a list of IDs in the `gift_wrapping_options_list` field.\n"
        },
        "gift_wrapping_options_list": {
          "type": "array",
          "description": "A list of gift-wrapping option IDs.\n",
          "items": {
            "type": "integer"
          }
        },
        "sort_order": {
          "type": "integer",
          "description": "Priority to give this product when included in product lists on category pages and in search results. Lower integers will place the product closer to the top of the results.\n",
          "minimum": -2147483648,
          "maximum": 2147483647
        },
        "condition": {
          "type": "string",
          "description": "The product condition. Will be shown on the product page if the `is_condition_shown` field's value is `true`. Possible values: `New`, `Used`, `Refurbished`.\n",
          "enum": [
            "New",
            "Used",
            "Refurbished"
          ]
        },
        "is_condition_shown": {
          "type": "boolean",
          "description": "Flag used to determine whether the product condition is shown to the customer on the product page.\n"
        },
        "order_quantity_minimum": {
          "type": "integer",
          "description": "The minimum quantity an order must contain, to be eligible to purchase this product.\n",
          "minimum": 0,
          "maximum": 1000000000
        },
        "order_quantity_maximum": {
          "type": "integer",
          "description": "The maximum quantity an order can contain when purchasing the product.\n",
          "minimum": 0,
          "maximum": 1000000000
        },
        "page_title": {
          "type": "string",
          "description": "Custom title for the product page. If not defined, the product name will be used as the meta title.\n",
          "minLength": 0,
          "maxLength": 255
        },
        "meta_keywords": {
          "type": "array",
          "description": "Custom meta keywords for the product page. If not defined, the store's default keywords will be used.\n",
          "items": {
            "type": "string"
          }
        },
        "meta_description": {
          "type": "string",
          "description": "Custom meta description for the product page. If not defined, the store's default meta description will be used.\n",
          "minLength": 0,
          "maxLength": 65535
        },
        "view_count": {
          "type": "integer",
          "description": "The number of times the product has been viewed.\n",
          "minimum": 0,
          "maximum": 1000000000
        },
        "preorder_release_date": {
          "type": "string",
          "format": "date-time",
          "description": "Pre-order release date. See the `availability` field for details on setting a product's availability to accept pre-orders.\n",
          "x-nullable": true
        },
        "preorder_message": {
          "type": "string",
          "description": "Custom expected-date message to display on the product page. If undefined, the message defaults to the storewide setting. Can contain the `%%DATE%%` placeholder, which will be substituted for the release date.\n",
          "minLength": 0,
          "maxLength": 255
        },
        "is_preorder_only": {
          "type": "boolean",
          "description": "If set to `false`, the product will not change its availability from `preorder` to `available` on the release date. Otherwise, on the release date the product's availability/status will change to `available`.\n"
        },
        "is_price_hidden": {
          "type": "boolean",
          "description": "False by default, indicating that this product's price should be shown on the product page. If set to `true`, the price is hidden. (NOTE: To successfully set `is_price_hidden` to `true`, the `availability` value must be `disabled`.)\n"
        },
        "price_hidden_label": {
          "type": "string",
          "description": "By default, an empty string. If `is_price_hidden` is `true`, the value of `price_hidden_label` is displayed instead of the price. (NOTE: To successfully set a non-empty string value with `is_price_hidden` set to `true`, the `availability` value must be `disabled`.)\n",
          "minLength": 0,
          "maxLength": 200
        },
        "custom_url": {
          "$ref": "#/definitions/CustomUrlProduct"
        },
        "open_graph_type": {
          "type": "string",
          "description": "Type of product, defaults to `product`.\n",
          "enum": [
            "product",
            "album",
            "book",
            "drink",
            "food",
            "game",
            "movie",
            "song",
            "tv_show"
          ]
        },
        "open_graph_title": {
          "type": "string",
          "description": "Title of the product, if not specified the product name will be used instead.\n"
        },
        "open_graph_description": {
          "type": "string",
          "description": "Description to use for the product, if not specified then the meta_description will be used instead.\n"
        },
        "open_graph_use_meta_description": {
          "type": "boolean",
          "description": "Flag to determine if product description or open graph description is used.\n"
        },
        "open_graph_use_product_name": {
          "type": "boolean",
          "description": "Flag to determine if product name or open graph name is used.\n"
        },
        "open_graph_use_image": {
          "type": "boolean",
          "description": "Flag to determine if product image or open graph image is used.\n"
        },
        "brand_name": {
          "type": "string",
          "example": "Common Good",
          "description": "The brand can be created during a product /PUT or /POST request. If the brand already exists then the product will be added. If not the brand will be created and the product added. If using `brand_name` it performs a fuzzy match and adds the brand. eg. Common Good and Common good are the same. Brand name does not return as part of a product response. Only the `brand_id`."
        }
      }
    },
    "Product": {
      "description": "A BigCommerce Product object describes a single purchasable unit or a collection of purchasable units.",
      "allOf": [
        {
          "$ref": "#/definitions/ProductBase"
        },
        {
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique numeric ID of the product; increments sequentially.\n"
            },
            "calculated_price": {
              "type": "number",
              "format": "double",
              "description": "The price of the product as seen on the storefront. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`.\n",
              "example": 12.43
            },
            "reviews_rating_sum": {
              "type": "integer",
              "description": "The total rating for the product.\n",
              "example": 3.2
            },
            "reviews_count": {
              "type": "integer",
              "description": "The number of times the product has been rated.\n",
              "example": 4
            },
            "total_sold": {
              "type": "integer",
              "description": "The total quantity of this product sold.\n",
              "example": 80
            },
            "custom_fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomField"
              }
            },
            "bulk_pricing_rules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkPricingRule"
              }
            },
            "date_created": {
              "type": "string",
              "format": "date-time",
              "description": "The date on which the product was created.\n",
              "example": "2018-08-15T14:49:05+00:00"
            },
            "date_modified": {
              "type": "string",
              "format": "date-time",
              "description": "The date on which the product was modified.\n",
              "example": "2018-08-24T14:41:00+00:00"
            },
            "images": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductImage"
              }
            },
            "videos": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductVideo"
              }
            },
            "variants": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Variant"
              }
            },
            "base_variant_id": {
              "type": "integer",
              "description": "The unique identifier of the base variant associated with a simple product. This value is null for complex products.\n",
              "example": 363
            }
          }
        }
      ],
      "title": "Product",
      "type": "object"
    },
    "ProductPost": {
      "type": "object",
      "description": "The model for a POST to create a product.\n",
      "allOf": [
        {
          "$ref": "#/definitions/ProductBase"
        },
        {
          "type": "object",
          "properties": {
            "custom_fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomFieldPost"
              }
            },
            "bulk_pricing_rules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkPricingRulePost"
              }
            },
            "variants": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariantProductPost"
              }
            }
          }
        }
      ]
    },
    "ProductPut": {
      "description": "The model for a PUT to update a product.",
      "allOf": [
        {
          "$ref": "#/definitions/ProductBase"
        },
        {
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique numerical ID of the product; increments sequentially.\n",
              "x-required": [
                "put"
              ]
            },
            "custom_fields": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomField"
              }
            },
            "bulk_pricing_rules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BulkPricingRule"
              }
            },
            "variants": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariantProductPut"
              }
            }
          }
        }
      ],
      "title": "Product Put",
      "type": "object"
    },
    "CatalogSummaryResponse": {
      "description": "Catalog Summary Response ",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/CatalogSummary"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      },
      "title": "Catalog Summary Response"
    },
    "CatalogSummary": {
      "type": "object",
      "description": "Catalog Summary object describes a lightweight summary of the catalog.",
      "title": "Catalog Summary",
      "properties": {
        "inventory_count": {
          "type": "integer",
          "description": "A count of all inventory items in the catalog.\n",
          "example": 2000
        },
        "inventory_value": {
          "type": "number",
          "format": "double",
          "description": "Total value of store's inventory.\n",
          "example": 267000
        },
        "primary_category_id": {
          "type": "integer",
          "description": "ID of the category containing the most products.\n",
          "example": 23
        },
        "primary_category_name": {
          "type": "string",
          "description": "Name of the category containing the most products.\n",
          "example": "Shop All"
        },
        "variant_count": {
          "type": "integer",
          "description": "Total number of variants",
          "example": 46
        },
        "highest_variant_price": {
          "type": "number",
          "format": "double",
          "description": "Highest priced variant",
          "example": 249
        },
        "average_variant_price": {
          "type": "number",
          "format": "double",
          "example": 83.07978261,
          "description": "Average price of all variants"
        },
        "lowest_variant_price": {
          "type": "string",
          "example": "7",
          "description": "Lowest priced variant in the store"
        },
        "oldest_variant_date": {
          "type": "string",
          "example": "2018-08-15"
        },
        "newest_variant_date": {
          "type": "string",
          "example": "2018-08-16"
        }
      }
    },
    "MetaFieldCollectionResponse": {
      "type": "object",
      "description": "MetaFieldCollectionResponse returns for: \n* Get Variant Metafields by Product Id and Variant Id\n* Get Product Metafields by Product Id\n* Get Category Metafields by Category Id\n* Get Brand Metafields by Brand Id",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Metafield"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      },
      "title": "Meta Field Collection Response"
    },
    "MetafieldResponse": {
      "description": "| Metafield Response returns for: |  |\n|--|--|\n| Create Variant Metafield</br>Get Variant Metafield by Product Id and Variant Id</br>Update Variant Metafield  | Create Product Metafield</br>Get Product Metafield by Product Id </br>Update Product Metafield |\n| Create Category Metafield</br>Get Category Metafield by Category Id</br>Update Category Metafield | Create Brand Metafield</br>Get Brand Metafield by Brand Id</br>Update Brand Metafield |\n\n",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Metafield"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      },
      "title": "Metafield Response"
    },
    "MetafieldBase": {
      "type": "object",
      "description": "Common Metafield properties.",
      "title": "Metafield Base",
      "properties": {
        "permission_set": {
          "type": "string",
          "description": "Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Required for /POST.\n",
          "enum": [
            "app_only",
            "read",
            "write"
          ],
          "x-required": [
            "post"
          ]
        },
        "namespace": {
          "type": "string",
          "description": "Namespace for the metafield, for organizational purposes. This is set set by the developer. Required for /POST.\n",
          "x-required": [
            "post"
          ],
          "minLength": 1,
          "maxLength": 64,
          "example": "Warehouse Locations"
        },
        "key": {
          "type": "string",
          "description": "The name of the field, for example: `location_id`, `color`. Required for /POST.\n",
          "x-required": [
            "post"
          ],
          "minLength": 1,
          "maxLength": 64,
          "example": "Location"
        },
        "value": {
          "type": "string",
          "description": "The value of the field, for example: `1`, `blue`. Required for /POST.\n",
          "x-required": [
            "post"
          ],
          "minLength": 1,
          "maxLength": 65535,
          "example": "4HG"
        },
        "description": {
          "type": "string",
          "description": "Description for the metafields.\n",
          "minLength": 0,
          "maxLength": 255,
          "example": "Location in the warehouse"
        },
        "resource_type": {
          "type": "string",
          "description": "The type of resource with which the metafield is associated.\n",
          "enum": [
            "category",
            "brand",
            "product",
            "variant"
          ],
          "x-required": [
            "post"
          ],
          "example": "product"
        },
        "resource_id": {
          "type": "integer",
          "description": "The unique identifier for the resource with which the metafield is associated.\n",
          "x-required": [
            "post"
          ],
          "minimum": 0,
          "maximum": 10000000000,
          "example": 111
        }
      },
      "required": [
        "permission_set",
        "namespace",
        "key",
        "value"
      ]
    },
    "Metafield": {
      "description": "Allows app partners to write custom data to various resources in the API.",
      "allOf": [
        {
          "$ref": "#/definitions/MetafieldBase"
        },
        {
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique identifier for the metafields.\n",
              "example": 6
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time of the metafield's creation.\n",
              "example": "2018-05-07T20:14:17+00:00"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time when the metafield was last updated.\n",
              "example": "2018-05-07T20:14:17+00:00"
            }
          }
        }
      ],
      "title": "Metafield",
      "type": "object"
    },
    "MetafieldPost": {
      "type": "object",
      "description": "The model for a POST to create metafield.",
      "allOf": [
        {
          "$ref": "#/definitions/MetafieldBase"
        }
      ],
      "title": "Metafield Post"
    },
    "MetafieldPut": {
      "type": "object",
      "description": "The model for a PUT to update metafield.",
      "allOf": [
        {
          "$ref": "#/definitions/MetafieldBase"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique identifier for the metafields.\n",
              "x-required": [
                "put"
              ],
              "minimum": 0,
              "maximum": 10000000000
            }
          }
        }
      ],
      "title": "Metafield Put"
    },
    "ComplexRuleCollectionResponse": {
      "type": "object",
      "description": "Complex Rule Response",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComplexRule"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      },
      "title": "Complex Rule Collection Response"
    },
    "ComplexRuleResponse": {
      "description": "Complex Rule response.",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ComplexRule"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      },
      "title": "Complex Rule Response"
    },
    "ComplexRuleBase": {
      "type": "object",
      "description": "Common ComplexRule properties.",
      "title": "Complex Rule Base",
      "properties": {
        "product_id": {
          "type": "integer",
          "description": "The unique numeric ID of the product with which the rule is associated; increments sequentially.\n",
          "x-nullable": true,
          "x-required": [
            "post",
            "put"
          ],
          "example": 67
        },
        "sort_order": {
          "type": "integer",
          "description": "The priority to give this rule when making adjustments to the product properties.\n",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "example": 0
        },
        "enabled": {
          "type": "boolean",
          "description": "Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty.\n",
          "example": true
        },
        "stop": {
          "type": "boolean",
          "description": "Flag for determining whether other rules should not be applied after this rule has been applied.\n"
        },
        "purchasing_disabled": {
          "type": "boolean",
          "description": "Flag for determining whether the rule should disable purchasing of a product when the conditions are applied.\n"
        },
        "purchasing_disabled_message": {
          "type": "string",
          "description": "Message displayed on the storefront when a rule disables the purchasing of a product.\n",
          "minLength": 0,
          "maxLength": 255,
          "example": "This product is not available at this time."
        },
        "purchasing_hidden": {
          "type": "boolean",
          "description": "Flag for determining whether the rule should hide purchasing of a product when the conditions are applied.\n"
        },
        "price_adjuster": {
          "$ref": "#/definitions/Adjuster"
        },
        "weight_adjuster": {
          "$ref": "#/definitions/Adjuster"
        }
      }
    },
    "ComplexRule": {
      "type": "object",
      "description": "Apply price, weight, image, or availabilty adjustments to product, based on a set of conditions. A complex rule's condition must either contain more than one modifier value, or else contain a modifier value and a variant ID.\n",
      "allOf": [
        {
          "$ref": "#/definitions/ComplexRuleBase"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique numeric ID of the rule; increments sequentially.\n",
              "example": 5
            },
            "image_url": {
              "type": "string",
              "description": "The URL for an image displayed on the storefront when the conditions are applied.\n",
              "example": "https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png"
            },
            "conditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ComplexRuleCondition"
              }
            }
          }
        }
      ],
      "title": "Complex Rule"
    },
    "ComplexRulePost": {
      "type": "object",
      "description": "Create a Complex Rule on a product.",
      "allOf": [
        {
          "$ref": "#/definitions/ComplexRuleBase"
        },
        {
          "type": "object",
          "properties": {
            "conditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ComplexRuleConditionPost"
              },
              "x-required": [
                "post"
              ]
            }
          }
        }
      ],
      "title": "Complex Rule Post"
    },
    "ComplexRulePut": {
      "type": "object",
      "description": "Update a Complex Rule on a product.",
      "allOf": [
        {
          "$ref": "#/definitions/ComplexRuleBase"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique numeric ID of the rule; increments sequentially.\n",
              "x-required": [
                "put"
              ]
            },
            "conditions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ComplexRuleConditionPut"
              }
            }
          }
        }
      ],
      "title": "Complex Rule Put"
    },
    "ConfigurableFieldCollectionResponse": {
      "type": "object",
      "description": "# DEPRECATED\nResponse payload for the BigCommerce configurable fields API.",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConfigurableField"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      },
      "title": "Configurable Field Collection Response - DEPRECATED"
    },
    "ConfigurableFieldResponse": {
      "description": "# DEPRECATED\nResponse payload for the BigCommerce single configurable field API.",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ConfigurableField"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      },
      "title": "Configurable Field Response - DEPRECATED"
    },
    "CustomFieldCollectionResponse": {
      "type": "object",
      "description": "Custom Field Collection Response.\n* Get All Custom Fields",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomField"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      },
      "title": "Custom Field Collection Response"
    },
    "CustomFieldResponse": {
      "description": "Custom Field Response\n* Get Custom Field by ID\n* Update Custom Field\n* Create Custom Field",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/CustomField"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      },
      "title": "Custom Field Response"
    },
    "ConfigurableFieldBase": {
      "type": "object",
      "description": "# DEPRECATED\n\nCommon Configurable Field properties.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name for the configurable field. Will display on the storefront and can be used as a reference point in the Orders API.\n",
          "x-required": [
            "post"
          ],
          "minLength": 1,
          "maxLength": 255
        },
        "type": {
          "type": "string",
          "description": "The type of the configurable field, which determines what sort of information the field is intended to collect on the storefront. Supported types in include a text input, a multi-line textarea, a checkbox, a file upload, and a dropdown selection.\n",
          "enum": [
            "text",
            "textarea",
            "checkbox",
            "file",
            "select"
          ],
          "x-required": [
            "post"
          ]
        },
        "file_allowed_types": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "For fields of \"file\" type, this controls the allowed file types for upload.\n",
          "x-nullable": true
        },
        "file_max_size": {
          "type": "array",
          "items": {
            "type": "integer"
          },
          "description": "For fields of \"file\" type, this controls the maximum file size. The platform has a maximum file size of 512MB for all uploads regardless of this setting.\n",
          "minimum": 0,
          "x-nullable": true
        },
        "select_options": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "For fields of \"select\" type, this is an array of the options which should be presented in the dropdown.\n",
          "x-nullable": true
        },
        "required": {
          "type": "boolean",
          "description": "Controls whether the field is required to have some input before a product may be added to cart.\n",
          "x-required": [
            "post"
          ]
        },
        "sort_order": {
          "type": "integer",
          "description": "Controls the sort order of this field relative to other configurable fields on the product, for purposes of ordering them on the storefront.\n",
          "minimum": -2147483648,
          "maximum": 2147483647,
          "x-required": [
            "post"
          ]
        }
      },
      "title": "Configurable Field Base - DEPRECATED"
    },
    "ConfigurableField": {
      "type": "object",
      "description": "# DEPRECATED\n\nA configurable field, which is a means of collecting information from a shopper about how they'd like their product configured. This information is then stored alongside the product when added to cart and is reference-able on the order for fulfillment purposes. ",
      "allOf": [
        {
          "$ref": "#/definitions/ConfigurableFieldBase"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique numeric ID of the configurable field; increments sequentially.\n",
              "minimum": 1,
              "x-required": [
                "put"
              ]
            }
          }
        }
      ],
      "title": "Configurable Field - DEPRECATED"
    },
    "ConfigurableFieldPost": {
      "type": "object",
      "description": "# DEPRECATED\nThe model for a POST to create a configurable field on a product.",
      "allOf": [
        {
          "$ref": "#/definitions/ConfigurableFieldBase"
        }
      ],
      "title": "Configurable Field Post - DEPRECATED"
    },
    "ConfigurableFieldPut": {
      "type": "object",
      "description": "# DEPRECATED\n\nThe model for a PUT to update a configurable field on a product.\n",
      "allOf": [
        {
          "$ref": "#/definitions/ConfigurableField"
        }
      ],
      "title": "Configurable Field Put - DEPRECATED"
    },
    "CustomFieldBase": {
      "type": "object",
      "description": "Common CustomField properties.",
      "title": "Custom Field Base",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the field, shown on the storefront, orders, etc. Required for /POST\n",
          "x-required": [
            "post"
          ],
          "minLength": 1,
          "maxLength": 250,
          "example": "ISBN"
        },
        "value": {
          "type": "string",
          "description": "The name of the field, shown on the storefront, orders, etc. Required for /POST\n",
          "x-required": [
            "post"
          ],
          "minLength": 1,
          "maxLength": 250,
          "example": "1234567890123"
        }
      },
      "required": [
        "name",
        "value"
      ]
    },
    "CustomField": {
      "type": "object",
      "description": "Gets custom fields associated with a product. These allow you to specify additional information that will appear on the product's page, such as a book's ISBN or a DVD's release date.",
      "allOf": [
        {
          "$ref": "#/definitions/CustomFieldBase"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique numeric ID of the custom field; increments sequentially.\n",
              "minimum": 1,
              "example": 6,
              "x-required": [
                "put"
              ]
            }
          }
        },
        {
          "type": "object"
        }
      ],
      "title": "Custom Field"
    },
    "CustomFieldPost": {
      "type": "object",
      "description": "The model for a POST to create a custom field on a product.",
      "allOf": [
        {
          "$ref": "#/definitions/CustomFieldBase"
        }
      ],
      "title": "Custom Field Post"
    },
    "CustomFieldPut": {
      "type": "object",
      "description": "The model for a PUT to update a custom field on a product.",
      "allOf": [
        {
          "$ref": "#/definitions/CustomField"
        }
      ],
      "title": "Custom Field Put"
    },
    "ComplexRuleConditionBase": {
      "type": "object",
      "description": "Complex Rule Condition properties.",
      "title": "Complex Rule Condition Base",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The unique numeric ID of the rule condition; increments sequentially.\n",
          "x-nullable": true,
          "example": 3
        },
        "rule_id": {
          "type": "integer",
          "description": "The unique numeric ID of the rule with which the condition is associated.\nRequired in /POST.",
          "x-nullable": true,
          "example": 4
        },
        "modifier_id": {
          "type": "integer",
          "description": "The unique numeric ID of the modifier with which the rule condition is associated.\nRequired in /POST.",
          "x-nullable": true,
          "example": 55
        },
        "modifier_value_id": {
          "type": "integer",
          "description": "The unique numeric ID of the modifier value with which the rule condition is associated.\nRequired in /POST.",
          "x-nullable": true,
          "example": 256
        },
        "variant_id": {
          "type": "integer",
          "description": "The unique numeric ID of the variant with which the rule condition is associated.\nRequired in /POST.",
          "x-nullable": true,
          "example": 1
        }
      },
      "required": [
        "id",
        "rule_id",
        "modifier_id",
        "modifier_value_id",
        "variant_id"
      ]
    },
    "ComplexRuleCondition": {
      "type": "object",
      "description": "Complex rules may return with conditions that apply to one or more variants, or with a single modifier value (if the rules were created using the v2 API or the control panel). Complex rules created or updated in the v3 API must have conditions that either reference multiple `modifier_value_id`'s, or else reference a `modifier_value_id` and a `variant_id`.",
      "allOf": [
        {
          "$ref": "#/definitions/ComplexRuleConditionBase"
        },
        {
          "type": "object",
          "properties": {
            "combination_id": {
              "type": "integer",
              "description": "(READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3.\n"
            }
          }
        }
      ],
      "title": "Complex Rule Condition"
    },
    "ComplexRuleConditionPost": {
      "type": "object",
      "description": "Create conditions on a Complex Rule.",
      "allOf": [
        {
          "$ref": "#/definitions/ComplexRuleConditionBase"
        }
      ],
      "title": "Complex Rule Condition Post"
    },
    "ComplexRuleConditionPut": {
      "type": "object",
      "description": "Update conditions on a Complex Rule.",
      "allOf": [
        {
          "$ref": "#/definitions/ComplexRuleConditionBase"
        }
      ],
      "title": "Complex Rule Condition Put"
    },
    "CustomUrlProduct": {
      "type": "object",
      "description": "The custom URL for the product on the storefront.",
      "title": "Custom Url Product",
      "properties": {
        "url": {
          "type": "string",
          "description": "Product URL on the storefront.\n",
          "x-url": true,
          "example": "/red-large-shirt"
        },
        "is_customized": {
          "type": "boolean",
          "description": "Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).\n"
        }
      }
    },
    "CustomUrlBrand": {
      "type": "object",
      "description": "The custom URL for the brand on the storefront.",
      "title": "Custom Url Brand",
      "properties": {
        "url": {
          "type": "string",
          "description": "Brand URL on the storefront.\n",
          "x-url": true,
          "example": "/shoes"
        },
        "is_customized": {
          "type": "boolean",
          "description": "Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).\n",
          "example": true
        }
      }
    },
    "CustomUrlCategory": {
      "type": "object",
      "description": "The custom URL for the category on the storefront.",
      "title": "Custom Url Category",
      "properties": {
        "url": {
          "type": "string",
          "description": "Category URL on the storefront.\n",
          "x-required": [
            "post",
            "put"
          ],
          "x-url": true,
          "minLength": 0,
          "maxLength": 255,
          "example": "/shoes"
        },
        "is_customized": {
          "type": "boolean",
          "description": "Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).\n",
          "x-required": [
            "post",
            "put"
          ]
        }
      }
    },
    "BulkPricingRuleCollectionResponse": {
      "type": "object",
      "description": "Response for Get All Bulk Pricing Rules.",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BulkPricingRule"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      },
      "title": "Bulk Pricing Rule Collection Response"
    },
    "BulkPricingRuleResponse": {
      "description": "Bulk Pricing Rule Response returns for:\n* Create Bulk Pricing Rule\n* Get Bulk Pricing Rule by Id\n* Update Bulk Pricing Rule by Id",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/BulkPricingRule"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      },
      "title": "Bulk Pricing Rule Response"
    },
    "BulkPricingRuleBase": {
      "type": "object",
      "description": "Common BulkPricingRule properties",
      "title": "Bulk Pricing Rule Base",
      "properties": {
        "quantity_min": {
          "type": "integer",
          "description": "The minimum inclusive quantity of a product to satisfy this rule. Must be greater than or equal to zero.\nRequired in /POST.\n",
          "x-required": [
            "post"
          ],
          "minimum": 0,
          "example": 10
        },
        "quantity_max": {
          "type": "integer",
          "description": "The maximum inclusive quantity of a product to satisfy this rule. Must be greater than the `quantity_min` value – unless this field has a value of 0 (zero), in which case there will be no maximum bound for this rule.\nRequired in /POST.",
          "x-required": [
            "post"
          ],
          "minimum": 0,
          "example": 50
        },
        "type": {
          "type": "string",
          "description": "The type of adjustment that is made. Values: `price` - the adjustment amount per product; `percent` - the adjustment as a percentage of the original price; `fixed` - the adjusted absolute price of the product.\nRequired in /POST.",
          "x-required": [
            "post"
          ],
          "enum": [
            "price",
            "percent",
            "fixed"
          ],
          "example": "price"
        },
        "amount": {
          "type": "number",
          "format": "double",
          "description": "The value of the adjustment by the bulk pricing rule.\nRequired in /POST.",
          "x-required": [
            "post"
          ],
          "minimum": 0,
          "example": 10
        }
      },
      "required": [
        "quantity_min",
        "quantity_max",
        "type",
        "amount"
      ]
    },
    "BulkPricingRule": {
      "description": "Rules that offer price discounts based on quantity breaks.",
      "allOf": [
        {
          "$ref": "#/definitions/BulkPricingRuleBase"
        },
        {
          "properties": {
            "id": {
              "type": "integer",
              "description": "The ID of the bulk pricing rule.\n",
              "minimum": 1,
              "x-required": [
                "put"
              ],
              "example": 6
            }
          }
        }
      ],
      "title": "Bulk Pricing Rule",
      "type": "object"
    },
    "BulkPricingRulePost": {
      "description": "Create Bulk Pricing Rules on a Product",
      "allOf": [
        {
          "$ref": "#/definitions/BulkPricingRuleBase"
        }
      ],
      "title": "Bulk Pricing Rule Post",
      "type": "object"
    },
    "BulkPricingRulePut": {
      "type": "object",
      "description": "The model to update Bulk Pricing Rules.",
      "allOf": [
        {
          "$ref": "#/definitions/BulkPricingRule"
        }
      ],
      "title": "Bulk Pricing Rule Put"
    },
    "OptionConfig": {
      "type": "object",
      "title": "Option Config",
      "description": "The values for option config can vary based on the Modifier created.",
      "properties": {
        "default_value": {
          "type": "string",
          "description": "(date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string.\n"
        },
        "checked_by_default": {
          "type": "boolean",
          "description": "(checkbox) Flag for setting the checkbox to be checked by default.\n"
        },
        "checkbox_label": {
          "type": "string",
          "description": "(checkbox) Label displayed for the checkbox option.\n"
        },
        "date_limited": {
          "type": "boolean",
          "description": "(date) Flag to limit the dates allowed to be entered on a date option.\n"
        },
        "date_limit_mode": {
          "type": "string",
          "description": "(date) The type of limit that is allowed to be entered on a date option.\n",
          "enum": [
            "earliest",
            "range",
            "latest"
          ],
          "example": "range"
        },
        "date_earliest_value": {
          "type": "string",
          "format": "date",
          "description": "(date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.\n",
          "example": "2018-08-31T05:00:00+00:00"
        },
        "date_latest_value": {
          "type": "string",
          "format": "date",
          "description": "(date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.\n",
          "example": "2019-01-01T05:00:00+00:00"
        },
        "file_types_mode": {
          "type": "string",
          "description": "(file) The kind of restriction on the file types that can be uploaded with a file upload option. Values: `specific` - restricts uploads to particular file types; `all` - allows all file types.\n",
          "enum": [
            "specific",
            "all"
          ],
          "example": "specific"
        },
        "file_types_supported": {
          "type": "array",
          "description": "(file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:\n  `images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).\n  `other` - Allows file types defined in the `file_types_other` array.\n",
          "example": "images, documents, other",
          "items": {
            "type": "string"
          }
        },
        "file_types_other": {
          "type": "array",
          "description": "(file) A list of other file types allowed with the file upload option.\n",
          "example": "pdf",
          "items": {
            "type": "string"
          }
        },
        "file_max_size": {
          "type": "integer",
          "description": "(file) The maximum size for a file that can be used with the file upload option. This will still be limited by the server.\n",
          "example": 5
        },
        "text_characters_limited": {
          "type": "boolean",
          "description": "(text, multi_line_text) Flag to validate the length of a text or multi-line text input.\n"
        },
        "text_min_length": {
          "type": "integer",
          "description": "(text, multi_line_text) The minimum length allowed for a text or multi-line text option.\n",
          "example": 1
        },
        "text_max_length": {
          "type": "integer",
          "description": "(text, multi_line_text) The maximum length allowed for a text or multi line text option.\n",
          "example": 55
        },
        "text_lines_limited": {
          "type": "boolean",
          "description": "(multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.\n",
          "example": true
        },
        "text_max_lines": {
          "type": "integer",
          "description": "(multi_line_text) The maximum number of lines allowed on a multi-line text input.\n",
          "example": 4
        },
        "number_limited": {
          "type": "boolean",
          "description": "(numbers_only_text) Flag to limit the value of a number option.\n",
          "example": true
        },
        "number_limit_mode": {
          "type": "string",
          "description": "(numbers_only_text) The type of limit on values entered for a number option.\n",
          "enum": [
            "lowest",
            "highest",
            "range"
          ],
          "example": "lowest"
        },
        "number_lowest_value": {
          "type": "number",
          "description": "(numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.\n",
          "example": 100
        },
        "number_highest_value": {
          "type": "number",
          "description": "(numbers_only_text) The highest allowed value for a number option if `number_limited` is true.\n"
        },
        "number_integers_only": {
          "type": "boolean",
          "description": "(numbers_only_text) Flag to limit the input on a number option to whole numbers only.\n",
          "example": false
        },
        "product_list_adjusts_inventory": {
          "type": "boolean",
          "description": "(product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list.\n"
        },
        "product_list_adjusts_pricing": {
          "type": "boolean",
          "description": "(product_list, product_list_with_images) Flag to add the optional product's price to the main product's price.\n"
        },
        "product_list_shipping_calc": {
          "type": "string",
          "description": "(product_list, product_list_with_images) How to factor the optional product's weight and package dimensions into the shipping quote. Values: `none` - don't adjust; `weight` - use shipping weight only; `package` - use weight and dimensions.\n",
          "enum": [
            "none",
            "weight",
            "package"
          ],
          "example": "weight"
        }
      }
    },
    "Adjuster": {
      "type": "object",
      "title": "Adjuster",
      "properties": {
        "adjuster": {
          "type": "string",
          "description": "The type of adjuster for either the price or the weight of the variant, when the modifier value is selected on the storefront.\n",
          "enum": [
            "relative",
            "percentage"
          ],
          "x-nullable": true
        },
        "adjuster_value": {
          "type": "number",
          "description": "The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.\n",
          "example": 5
        }
      },
      "description": "Adjuster for Complex Rules."
    },
    "PriceListCollectionResponse": {
      "description": "Get All PriceLists.",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceList"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      },
      "title": "PriceList Collection Response"
    },
    "PriceListResponse": {
      "description": "PriceList Reponse returns for:\n\n* Create a PriceList\n* Get a PriceList\n* Update a PriceList",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/PriceList"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      },
      "title": "Price List Response"
    },
    "PriceListBase": {
      "type": "object",
      "description": "Common Price List properties.",
      "title": "PriceList Base",
      "properties": {
        "name": {
          "type": "string",
          "description": "The unique name of the Price List. Required in /POST. \n",
          "x-required": [
            "post"
          ],
          "example": "Wholesale"
        },
        "active": {
          "type": "boolean",
          "description": "Whether or not this `Price List` and its prices are active.  Defaults to `true`.\n",
          "example": true
        }
      },
      "required": [
        "name"
      ]
    },
    "PriceList": {
      "allOf": [
        {
          "properties": {
            "id": {
              "type": "integer",
              "description": "The unique numeric ID of the `Price List`; increments sequentially.\n",
              "example": 3
            },
            "date_created": {
              "type": "string",
              "format": "date-time",
              "description": "The date on which the `Price List` was created.\n",
              "example": "2018-04-05T16:05:12Z"
            },
            "date_modified": {
              "type": "string",
              "format": "date-time",
              "description": "The date on which the `Price List` was created.\n",
              "example": "2018-04-05T16:05:12Z"
            }
          }
        },
        {
          "$ref": "#/definitions/PriceListBase"
        }
      ],
      "title": "PriceList",
      "type": "object"
    },
    "PriceListPost": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/PriceListBase"
        }
      ],
      "required": [
        "name"
      ],
      "title": "PriceList Post",
      "description": "Creates a Price List. "
    },
    "PriceListPut": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/PriceListBase"
        }
      ],
      "title": "PriceList Put",
      "description": "Update a PriceList"
    },
    "PriceRecordCollectionResponse": {
      "description": "PriceRecord Collection Response returns for:\n* Get All PriceList Records\n* Get PriceList Records by Variant Id",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceRecord"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      },
      "title": "PriceRecord Collection Response"
    },
    "PriceRecordResponse": {
      "description": "Response payload for the BigCommerce API.",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/PriceRecord"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      },
      "title": "Price Record Response"
    },
    "PriceRecordBase": {
      "type": "object",
      "description": "Common Price Record properties.",
      "title": "PriceRecord Base",
      "properties": {
        "price": {
          "type": "number",
          "format": "double",
          "description": "The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.\n",
          "x-required": [
            "put"
          ],
          "example": 3.99
        },
        "sale_price": {
          "type": "number",
          "format": "double",
          "description": "The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.\n"
        },
        "retail_price": {
          "type": "number",
          "format": "double",
          "description": "The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant.\n"
        },
        "map_price": {
          "type": "number",
          "format": "double",
          "description": "The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.\n"
        },
        "bulk_pricing_tiers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BulkPricingTier"
          }
        },
        "sku": {
          "type": "string",
          "description": "The SKU code associated with this `Price Record` if requested and it exists.\n",
          "example": "SMB-123"
        }
      }
    },
    "PriceRecord": {
      "description": "The Price Record object.",
      "allOf": [
        {
          "properties": {
            "calculated_price": {
              "type": "number",
              "format": "double",
              "description": "The price of the variant as seen on the storefront if a price record is in effect. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`.  Read only.\n",
              "example": 24.64
            },
            "date_created": {
              "type": "string",
              "format": "date-time",
              "description": "The date on which the Price entry was created.\n",
              "example": "2018-08-23T19:59:23Z"
            },
            "date_modified": {
              "type": "string",
              "format": "date-time",
              "description": "The date on which the Price entry was created.\n",
              "example": "2018-08-23T19:59:23Z"
            },
            "product_id": {
              "type": "integer",
              "description": "The id of the `Product` this `Price Record`'s variant_id is associated with.  Read only.\n",
              "example": 158
            }
          }
        },
        {
          "$ref": "#/definitions/PriceRecordIdentifiers"
        },
        {
          "$ref": "#/definitions/PriceRecordBase"
        }
      ],
      "title": "Price Record",
      "type": "object"
    },
    "BulkPricingTier": {
      "type": "object",
      "title": "Bulk Pricing Tier",
      "properties": {
        "quantity_min": {
          "type": "integer",
          "description": "The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing.\n",
          "example": 1
        },
        "quantity_max": {
          "type": "integer",
          "description": "The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing.\n",
          "example": 10
        },
        "type": {
          "type": "string",
          "enum": [
            "fixed",
            "price",
            "percent"
          ],
          "description": "The type of adjustment that is made. Acceptable values: price – the adjustment amount per product; percent – the adjustment as a percentage of the original price; fixed – the adjusted absolute price of the product.\n",
          "example": "price"
        },
        "amount": {
          "type": "number",
          "format": "double",
          "description": "The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier.\n",
          "example": 3
        }
      }
    },
    "PriceRecordPut": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/PriceRecordBase"
        }
      ],
      "title": "Price Record Put"
    },
    "PriceRecordCollectionPut": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/PriceRecordBatchItem"
      },
      "title": "Price Record Collection Put"
    },
    "PriceRecordBatchItem": {
      "description": "Price Record object used in batch create or update.",
      "allOf": [
        {
          "properties": {
            "variant_id": {
              "type": "integer",
              "description": "The variant with which this price set is associated. Either variant_id or sku is required.\n",
              "example": 331
            },
            "sku": {
              "type": "string",
              "description": "The sku for the variant with which this price set is associated.  Either sku or variant_id is required.\n",
              "example": "SMB-123"
            },
            "currency": {
              "type": "string",
              "format": "ISO-4217",
              "description": "The 3-letter currency code with which this price set is associated.\n",
              "example": "usd"
            }
          }
        },
        {
          "$ref": "#/definitions/PriceRecordBase"
        }
      ],
      "title": "PriceRecord Batch Item",
      "type": "object"
    },
    "PriceRecordIdentifiers": {
      "description": "Price Record object used in batch create or update.",
      "allOf": [
        {
          "properties": {
            "price_list_id": {
              "type": "integer",
              "description": "The Price List with which this price set is associated.\n",
              "example": 2
            },
            "variant_id": {
              "type": "integer",
              "description": "The variant with which this price set is associated. Either variant_id or sku is required.\n",
              "example": 325
            },
            "sku": {
              "type": "string",
              "description": "The variant with which this price set is associated. Either sku or variant_id is required.\n"
            },
            "currency": {
              "type": "string",
              "format": "ISO-4217",
              "description": "The 3-letter currency code with which this price set is associated.\n",
              "example": "usd"
            }
          }
        }
      ],
      "title": "Price Record Identifiers",
      "type": "object"
    },
    "SuccessBatchResponse": {
      "type": "object",
      "description": "Empty object for Success case for Batch API."
    },
    "PriceRecordBatchErrorResponse": {
      "description": "Errors during batch usage for the BigCommerce API.",
      "type": "object",
      "properties": {
        "batch_errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceRecordBatchErrorSet"
          }
        }
      },
      "title": "PriceRecord Batch Error Response"
    },
    "PriceRecordBatchErrorSet": {
      "description": "Error during Price Record batch PUT.  Includes data sent in the request and errors.",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/PriceRecordIdentifiers"
        },
        "field_errors": {
          "$ref": "#/definitions/DetailedErrors"
        }
      },
      "title": "PriceRecord Batch Error Set"
    },
    "CollectionMeta": {
      "type": "object",
      "description": "Data about the response, including pagination and collection totals.",
      "properties": {
        "pagination": {
          "$ref": "#/definitions/Pagination"
        }
      },
      "title": "Collection Meta"
    },
    "Pagination": {
      "type": "object",
      "description": "Data about the response, including pagination and collection totals.",
      "title": "Pagination",
      "properties": {
        "total": {
          "type": "integer",
          "description": "Total number of items in the result set.\n",
          "example": 36
        },
        "count": {
          "type": "integer",
          "description": "Total number of items in the collection response.\n",
          "example": 36
        },
        "per_page": {
          "type": "integer",
          "description": "The amount of items returned in the collection per page, controlled by the limit parameter.\n",
          "example": 50
        },
        "current_page": {
          "type": "integer",
          "description": "The page you are currently on within the collection.\n",
          "example": 1
        },
        "total_pages": {
          "type": "integer",
          "description": "The total number of pages in the collection.\n",
          "example": 1
        },
        "links": {
          "type": "object",
          "description": "Pagination links for the previous and next parts of the whole collection.\n",
          "properties": {
            "previous": {
              "type": "string",
              "description": "Link to the previous page returned in the response.\n"
            },
            "current": {
              "type": "string",
              "description": "Link to the current page returned in the response.\n",
              "example": "?page=1&limit=50"
            },
            "next": {
              "type": "string",
              "description": "Link to the next page returned in the response.\n"
            }
          }
        }
      }
    },
    "Meta": {
      "type": "object",
      "description": "Empty meta object; may be used later.",
      "title": "Meta"
    },
    "ErrorResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseError"
        },
        {
          "type": "object",
          "properties": {
            "errors": {
              "$ref": "#/definitions/DetailedErrors"
            }
          }
        }
      ],
      "title": "Error Response"
    },
    "BaseError": {
      "type": "object",
      "description": "Error payload for the BigCommerce API.\n",
      "properties": {
        "status": {
          "description": "The HTTP status code.\n",
          "type": "integer"
        },
        "title": {
          "description": "The error title describing the particular error.\n",
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "instance": {
          "type": "string"
        }
      },
      "title": "Base Error"
    },
    "DetailedErrors": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "title": "DetailedErrors - Remove"
    },
    "NotFound": {
      "description": "Error payload for the BigCommerce API.",
      "type": "object",
      "properties": {
        "status": {
          "description": "404 HTTP status code.\n",
          "type": "integer"
        },
        "title": {
          "description": "The error title describing the particular error.",
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "instance": {
          "type": "string"
        }
      },
      "title": "Not Found"
    },
    "TransactionPost": {
      "type": "object",
      "description": "Payload to create a transaction in BigCommerce.\n",
      "required": [
        "event",
        "amount",
        "currency",
        "gateway",
        "method"
      ],
      "properties": {
        "event": {
          "type": "string",
          "description": "Store event that created the transaction.\n",
          "enum": [
            "purchase",
            "authorization",
            "capture",
            "refund",
            "void",
            "pending",
            "settled"
          ]
        },
        "method": {
          "type": "string",
          "description": "The payment method: `credit_card` - a credit-card transaction; `electronic_wallet` - an online wallet; `store_credit` - a transaction using store credit; `gift_certificate` - a transaction using a gift certificate; `custom` - manual payment methods; `token` - payment token; `nonce` - temporary payment token; `offsite` - online payment off the site (e.g., PayPal); `offline` - payment method that takes place offline.\n",
          "enum": [
            "credit_card",
            "electronic_wallet",
            "gift_certificate",
            "store_credit",
            "apple_pay_card",
            "apple_pay_token",
            "token",
            "custom",
            "offsite",
            "offline",
            "nonce"
          ]
        },
        "amount": {
          "type": "number",
          "format": "float",
          "description": "Amount of money in the transaction.\n"
        },
        "currency": {
          "type": "string",
          "format": "ISO-4217",
          "description": "Currency used for the transaction.\n"
        },
        "gateway": {
          "type": "string",
          "description": "The payment gateway, where applicable.\n",
          "enum": [
            "2checkout",
            "adyen",
            "amazon",
            "authorizenet",
            "bankdeposit",
            "braintree",
            "cheque",
            "cod",
            "custom",
            "firstdatagge4",
            "giftcertificate",
            "hps",
            "instore",
            "klarna",
            "migs",
            "moneyorder",
            "nmi",
            "paypalexpress",
            "paypalpaymentsprous",
            "paypalpaymentsprouk",
            "plugnpay",
            "qbmsv2",
            "securenet",
            "square",
            "storecredit",
            "stripe",
            "testgateway",
            "usaepay"
          ]
        },
        "gateway_transaction_id": {
          "description": "The transaction ID returned by the payment gateway for this transaction item.\n",
          "type": "string"
        },
        "date_created": {
          "description": "The datetime of the transaction.\n",
          "type": "string",
          "format": "date-time"
        },
        "test": {
          "type": "boolean",
          "description": "True if the transaction performed was a test, or if the gateway is in test mode.\n"
        },
        "status": {
          "type": "string",
          "description": "Status of the transaction.\n",
          "enum": [
            "ok",
            "error"
          ]
        },
        "fraud_review": {
          "type": "boolean",
          "description": "Result of gateway fraud review, if any. Default is `false`.\n"
        },
        "reference_transaction_id": {
          "type": "integer",
          "description": "Identifier for an existing transaction upon which this transaction acts.\n"
        },
        "offline": {
          "$ref": "#/definitions/Offline"
        },
        "custom": {
          "$ref": "#/definitions/Custom"
        }
      }
    },
    "TransactionResponse": {
      "type": "object",
      "description": "Response payload for the BigCommerce Order Transactions API single transaction.\n",
      "properties": {
        "data": {
          "$ref": "#/definitions/Transaction"
        },
        "meta": {
          "type": "object",
          "description": "May be used in the future"
        }
      }
    },
    "TransactionCollectionResponse": {
      "type": "object",
      "description": "Response payload for the BigCommerce Order Transactions API.\n",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Transaction"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "Transaction": {
      "type": "object",
      "description": "A BigCommerce Transaction object describes a single transaction.\n",
      "allOf": [
        {
          "$ref": "#/definitions/TransactionPost"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Unique identifier for the transaction.\n"
            },
            "order_id": {
              "type": "string",
              "description": "Identifier for the BigCommerce Order with which this transaction is associated.\n"
            },
            "date_created": {
              "description": "The datetime of the transaction.\n",
              "type": "string",
              "format": "date-time"
            },
            "payment_instrument_token": {
              "type": "string",
              "description": "Token for an existing stored Credit Card used for this transaction, if any.\n"
            },
            "avs_result": {
              "$ref": "#/definitions/AVSResult"
            },
            "cvv_result": {
              "$ref": "#/definitions/CVVResult"
            },
            "credit_card": {
              "$ref": "#/definitions/CreditCard"
            },
            "gift_certificate": {
              "$ref": "#/definitions/GiftCertificate"
            },
            "store_credit": {
              "$ref": "#/definitions/StoreCredit"
            }
          }
        }
      ]
    },
    "CreditCard": {
      "type": "object",
      "description": "A credit-card model.",
      "properties": {
        "card_type": {
          "description": "The credit-card type: Visa, MasterCard, etc.\n",
          "type": "string"
        },
        "card_iin": {
          "description": "The IIN of a credit-card number.\n",
          "type": "string"
        },
        "card_last4": {
          "description": "The last 4 digits of a credit-card number.\n",
          "type": "string"
        }
      },
      "title": "Credit Card"
    },
    "StoreCredit": {
      "type": "object",
      "description": "A store credit model.\n",
      "properties": {
        "remaining_balance": {
          "description": "Remaining balance of shopper's store credit.\n",
          "type": "string"
        }
      }
    },
    "Custom": {
      "type": "object",
      "description": "Custom payment from manual order.",
      "properties": {
        "payment_method": {
          "description": "Text entered for the payment method in the control panel.\n",
          "type": "string"
        }
      },
      "title": "Custom"
    },
    "Offline": {
      "type": "object",
      "description": "Offline payment (e.g., check or purchase order).",
      "properties": {
        "display_name": {
          "description": "Display name for the offline payment.\n",
          "type": "string"
        }
      },
      "title": "Offline - Transaction Post Remove"
    },
    "GiftCertificate": {
      "type": "object",
      "description": "A gift-certificate model.",
      "title": "Gift Certificate",
      "properties": {
        "code": {
          "description": "The gift-certificate code.\n",
          "type": "string",
          "example": "MB345"
        },
        "original_balance": {
          "description": "The balance on a gift certificate when it was purchased.\n",
          "type": "number",
          "format": "float",
          "example": 100
        },
        "starting_balance": {
          "description": "The balance on a gift certificate at the time of this purchase.\n",
          "type": "number",
          "format": "float",
          "example": 100
        },
        "remaining_balance": {
          "description": "The remaining balance on a gift certificate.\n",
          "type": "number",
          "format": "float",
          "example": 35.42
        },
        "status": {
          "description": "The status of a gift certificate: `active` - gift certificate is active; `pending` - gift certificate purchase is pending; `disabled` - gift certificate is disabled; `expired` - gift certificate is expired.\n",
          "type": "string",
          "enum": [
            "active",
            "pending",
            "disabled",
            "expired"
          ]
        }
      }
    },
    "AVSResult": {
      "description": "Address Verification Service (AVS) result from the payment gateway.",
      "type": "object",
      "properties": {
        "code": {
          "description": "AVS code.",
          "type": "string"
        },
        "message": {
          "description": "AVS message.",
          "type": "string"
        },
        "street_match": {
          "description": "AVS Code for street matching result.",
          "type": "string"
        },
        "postal_match": {
          "description": "AVS Code for postal matching result.",
          "type": "string"
        }
      },
      "title": "AVS Results"
    },
    "CVVResult": {
      "description": "Card Verification Value result from the payment gateway.",
      "type": "object",
      "properties": {
        "code": {
          "description": "CVV code.",
          "type": "string"
        },
        "message": {
          "description": "CVV message.",
          "type": "string"
        }
      },
      "title": "CVV Result"
    },
    "NoContent": {
      "description": "No-content response for the BigCommerce API.",
      "type": "object",
      "properties": {
        "status": {
          "description": "204 HTTP status code.\n",
          "type": "integer"
        },
        "title": {
          "description": "The error title describing the situation.",
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "instance": {
          "type": "string"
        }
      },
      "title": "No Content"
    },
    "Job": {
      "description": "The job for theme upload or download",
      "type": "object",
      "properties": {
        "errors": {
          "description": "The errors.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "error": {
                "description": "The error.",
                "type": "string"
              },
              "message": {
                "description": "The message.",
                "type": "string"
              }
            }
          }
        },
        "id": {
          "description": "The identifier.",
          "type": "string"
        },
        "percent_complete": {
          "description": "The percent complete.",
          "type": "number"
        },
        "result": {
          "description": "The result.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "status": {
          "description": "The status.",
          "type": "string"
        },
        "time": {
          "description": "The time.",
          "type": "string"
        },
        "warnings": {
          "description": "The warnings.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "message": {
                "description": "The message.",
                "type": "string"
              },
              "warning": {
                "description": "The warning.",
                "type": "string"
              }
            }
          }
        }
      },
      "title": "Job"
    },
    "Theme": {
      "description": "A theme.",
      "type": "object",
      "properties": {
        "variations": {
          "description": "The variations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variation"
          }
        },
        "uuid": {
          "description": "The identifier.",
          "type": "string"
        },
        "name": {
          "description": "The theme name identifier.",
          "type": "string"
        },
        "is_private": {
          "description": "Flag to identify private themes.",
          "type": "boolean"
        }
      }
    },
    "Variation": {
      "description": "A variation.",
      "type": "object",
      "properties": {
        "description": {
          "description": "The description.",
          "type": "string"
        },
        "external_id": {
          "description": "The external identifier.",
          "type": "string"
        },
        "name": {
          "description": "The name.",
          "type": "string"
        },
        "uuid": {
          "description": "The identifier.",
          "type": "string"
        }
      }
    },
    "JobId": {
      "description": "The job identifier for theme upload or download.",
      "type": "object",
      "properties": {
        "job_id": {
          "description": "The job identifier.",
          "type": "string"
        }
      },
      "title": "Job Id"
    },
    "Activate": {
      "description": "Request definition for activation endpoint.",
      "required": [
        "variation_id",
        "which"
      ],
      "properties": {
        "variation_id": {
          "description": "The identifier for the variation to activate.",
          "type": "string"
        },
        "which": {
          "description": "Which configuration to use.",
          "type": "string",
          "enum": [
            "original",
            "last_activated",
            "last_created"
          ]
        }
      },
      "title": "Activate"
    },
    "ThemesCollectionResponse": {
      "description": "Response payload for the BigCommerce API.\n",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Theme"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "ThemeResponse": {
      "description": "Response payload for the BigCommerce API.\n",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Theme"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      }
    },
    "JobResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Job"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        }
      },
      "title": "Job Response",
      "description": "Response for /GET Jobs by Id."
    },
    "WhichThemeToDownload": {
      "type": "object",
      "description": "An object specifying which theme to download. One of: `original`: the original Marketplace or uploaded custom theme; `last_activated`: the theme version most recently applied to the store; `last_created`: the theme version most recently created.\n",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "which": {
              "description": "Which revision to use.",
              "type": "string",
              "enum": [
                "original",
                "last_activated",
                "last_created"
              ]
            }
          }
        }
      ]
    },
    "RequestHeaders": {
      "type": "object",
      "description": "These are the minium request headers needed for BigCommerce. ",
      "title": "Request Headers",
      "properties": {
        "X-Auth-Client": {
          "type": "string",
          "example": "{X-Auth-Client}"
        },
        "Accepts": {
          "type": "string",
          "default": "application/json"
        }
      }
    }
  },
  "securityDefinitions": {
    "X-Auth-Client": {
      "type": "apiKey",
      "name": "X-Auth-Client",
      "in": "header"
    },
    "X-Auth-Token": {
      "type": "apiKey",
      "name": "X-Auth-Token",
      "in": "header"
    }
  },
  "security": [
    {
      "X-Auth-Client": []
    },
    {
      "X-Auth-Token": []
    }
  ]
}