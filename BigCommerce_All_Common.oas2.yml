swagger: '2.0'
info:
  title: BigCommerce Common Models
  version: ''
  description: ''
  contact:
    url: 'https://developer.bigcommerce.com'
    name: BigCommerce Developer Documentation
  license:
    name: ''
  termsOfService: ''
host: api.bigcommerce.com
paths:
  /example:
    get:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties: {}
      description: |-
        ## Usage Notes

        **Topic**
        * thing
        * thing
        * thing

        **Topic**
        * thing
        * thing
        * thing
      summary: Get a Thing
      tags:
        - Example
      operationId: getExample
definitions:
  _metaEmpty:
    type: object
    title: _metaEmpty
  _pagination:
    type: object
    title: _pagination
    properties:
      total:
        description: Total number of items in the result set.
        type: integer
        format: int32
      count:
        description: Total number of items in the collection response.
        type: integer
        format: int32
      per_page:
        description: >-
          The amount of items returned in the collection per page, controlled by
          the limit parameter.
        type: integer
        format: int32
      current_page:
        description: The page you are currently on within the collection.
        type: integer
        format: int32
      total_pages:
        description: The total number of pages in the collection.
        type: integer
        format: int32
      links:
        $ref: '#/definitions/_links'
  _metaCollection:
    type: object
    title: _metaCollection
    properties:
      pagination:
        $ref: '#/definitions/_pagination'
  _links:
    type: object
    properties:
      previous:
        type: string
        description: |
          Link to the previous page returned in the response.
      current:
        type: string
        description: |
          Link to the current page returned in the response.
        example: '?page=1&limit=50'
      next:
        type: string
        description: |
          Link to the next page returned in the response.
    title: _links
  response_defaultError:
    allOf:
      - $ref: '#/definitions/_errorBase'
      - $ref: '#/definitions/_errorDetailed'
    title: response_defaultError
  _errorBase:
    type: object
    properties:
      status:
        description: |
          The HTTP status code.
        type: integer
      title:
        description: |
          The error title describing the particular error.
        type: string
      type:
        type: string
      instance:
        type: string
    title: _errorBase
  response_404:
    type: object
    properties:
      status:
        description: |
          404 HTTP status code.
        type: integer
      title:
        description: The error title describing the particular error.
        type: string
      type:
        type: string
      instance:
        type: string
    title: response_404
  _errorDetailed:
    type: object
    properties:
      errors:
        type: object
        additionalProperties:
          type: string
        title: DetailedErrors
  _responseHeaders:
    type: object
    properties:
      Date:
        type: string
        description: The date the response was sent.
        example: 'Tue, 15 Nov 2011 12:45:26 GMT'
      last-modified:
        type: string
        description: >-
          The date the resource was last modified. Please refer to the
          individual resource pages for support for this header.
        example: 'Tue, 15 Nov 2011 12:45:26 GMT'
      Content-Type:
        type: string
        description: >-
          The MIME type of the response, dependent on the extension of the
          endpoint that was requested.
        example: application/json
      Content-Location:
        type: string
        description: Sent if the request was redirected.
        example: /api/v2/orders/5.json
      Location:
        type: string
        description: The URI of a newly created resource. Sent with a 201 Created response.
        example: /api/v2/products/7
      X-Retry-After:
        type: integer
        description: >-
          Rate limited response, indicating the number of seconds before the
          quota refreshes. See Rate Limits for more information.
        example: '15'
      X-BC-ApiLimit-Remaining:
        type: integer
        description: >-
          The number of API requests remaining for the current period (rolling
          one hour). See Rate Limits for more information.
        example: '987'
      X-BC-Store-Version:
        type: string
        description: >-
          The version of BigCommerce the store is running on. This header is
          available on versions 7.3.6+.
        example: 7.3.6
      Content-Encoding:
        type: string
        description: >-
          Allows API clients to request content to be compressed before being
          sent back in the response to an API request.
        example: gzip
      Transfer-Encoding:
        type: string
        description: Specifies the form of encoding used to transfer the resource.
        example: chunked
      X-Rate-Limit-Requests-Left:
        type: integer
        description: >-
          Details how many remaining requests your client can make in the
          current window before being rate-limited. In this case, you would
          expect to be able to make 6 more requests in the next 3000
          milliseconds; on the 7th request within 3000 milliseconds, you would
          be rate-limited and would receive an HTTP 429 response.
        example: '16101491'
      X-Rate-Limit-Requests-Quota:
        type: integer
        description: >-
          Shows how many API requests are allowed in the current window for your
          client.
        example: '16101495'
      X-Rate-Limit-Time-Reset-Ms:
        type: integer
        description: >-
          Shows how many milliseconds are remaining in the window. In this case,
          3000 milliseconds â€“ so, 3000 milliseconds after this request, the API
          quota will be refreshed.
        example: '30000'
      X-Rate-Limit-Time-Window-Ms:
        type: integer
        description: Shows the size of your current rate-limiting window.
        example: '9762'
    title: _responseHeaders
  _requestHeaders:
    type: object
    properties:
      Accept:
        type: >-
          application/json (for .json requests) application/xml (for .xml
          requests)
        description: The MIME type for the format you want to receive a response in.
        example: application/xml
      Content-Type:
        type: >-
          application/json (for JSON requests) application/xml (for XML
          requests)
        description: >-
          The MIME type of the request body. Used to validate and parse the
          request to the API.
        example: application/json
      User-Agent:
        type: String
        description: >-
          While it is not required, we ask that you specify a user agent which
          identifies your integration/client with your requests.
        example: ''
      X-Auth-Client:
        type: String
        description: Client ID of the requesting app
        example: ''
      X-Auth-Token:
        type: String
        description: >-
          Access token authorizing the app to access resources on behalf of a
          user
        example: ''
    title: _requestHeaders
  _availableAPIs:
    type: object
    title: _availableAPIs
    properties:
      Banners:
        description: >-
          Create and manage store banners| **Path**: `/banners` | **Scopes:**
          `store_v2_marketing`
      Blog Posts:
        description: >-
          Create and manage store blog posts| **Path**: `/blog/posts` |
          **Scopes:** `store_v2_content`
      Blog Tags:
        description: >-
          Create and manage store blog tags| **Path**: `/blog/tags` |
          **Scopes:** `store_v2_content`
      Brand Images:
        description: >-
          Create and manage brand images| **Path**:
          `/catalog/brands/{id}/images` | **Scopes:** `store_v2_products`
      Brand Metafields:
        description: >-
          Create and manage brand metafields| **Path**:
          `/catalog/brands/{id}/metafields` | **Scopes:** `store_v2_products`
      Brands:
        description: >-
          Create and manage brands| **Path**: `/catalog/brands` | **Scopes:**
          `store_v2_products`
      Carts:
        description: >-
          Create an manage store carts| **Path**: `/carts` | **Scopes:**
          `store_cart`
      Catalog:
        description: >-
          Create and manage store categories, products, and brands| **Path**:
          `/catalog` | **Scopes:** `store_v2_products`
      Categories:
        description: >-
          Create and manage categorties| **Path**: `/catalog/categories` |
          **Scopes:** `store_v2_products`
      Category Images:
        description: >-
          Create and manage category images| **Path**:
          `/catalog/categories/{id}/images` | **Scopes:** `store_v2_products`
      Category Metafields:
        description: >-
          Create and manage category metafields| **Path**:
          `/catalog/categories/{id}/metafields` | **Scopes:**
          `store_v2_products`
      Channels:
        description: >-
          Create and manage catalog listings and channels| **Path**: `/channels`
          | **Scopes:** `store_channel_listings`
      Checkouts:
        description: >-
          Create checkouts for a store| **Path**: `/checkouts` | **Scopes:**
          `store_checkout`
      Coupons:
        description: >-
          Create and manage store coupons| **Path**: `/coupons` | **Scopes:**
          `store_v2_marketing`
      Currenies:
        description: >-
          Create and manage store currencies and their display| **Path**:
          `/currencies` | **Scopes:** `store_v2_information`
      Current Customer:
        description: >-
          Identify customer's on the front-end securely| **Path**:
          `/current/customer.jwt` | **Scopes:** `store_v2_customers_login`
      Customer Login:
        description: >-
          Use JWT & SSO to login a customer| **Path**: `/login/token/{token}` |
          **Scopes:** `store_v2_customers_login`
      Customers Attribute Values:
        description: >-
          Create and manage customer attribute values| **Path**:
          `/customers/attribute-values` | **Scopes:** `store_v3_customers`
      Customers Attributes:
        description: >-
          Create and manage customer attributes| **Path**:
          `/customers/attributes` | **Scopes:** `store_v2_customers`
      Customers Form Field Values:
        description: >-
          Create an manage customer form field values| **Path**:
          `/customers/form-field-values

          ` | **Scopes:** `store_v2_customers`
      Customers Groups:
        description: >-
          Create and manage customer groups| **Path**: `/customer_groups` |
          **Scopes:** `store_v2_customers`
      Customers v2:
        description: >-
          Create and manage  customers and their addresses| **Path**:
          `/customers` | **Scopes:** `store_v2_customers`
      Customers v3:
        description: >-
          Create and manage customers and their addresses| **Path**:
          `/customers` | **Scopes:** `store_v3_customers`
      Customers Validate Password:
        description: >-
          Validate customer passwords| **Path**: `/customers/{id}/validate` |
          **Scopes:** `store_v2_customers`
      Geography:
        description: >-
          Get a list of states, provincies, and countries| **Path**:
          `/countries` | **Scopes:** `store_v2_information`
      Gift Certificates:
        description: >-
          Manage gift certificates| **Path**: `/gift_certificates` | **Scopes:**
          `store_v2_marketing`
      Order Transactions:
        description: >-
          View order payment information| **Path**: `/orders{id}/transactions` |
          **Scopes:** `store_v2_transactions`
      Orders:
        description: >-
          Create and manage orders| **Path**: `/orders` | **Scopes:**
          `store_v2_orders`
      Pages:
        description: >-
          Create and manage store content pages| **Path**: `/pages` |
          **Scopes:** `store_v2_content`
      Payment Methods:
        description: >-
          Get a store's enabled payment methods| **Path**: `/payments/methods` |
          **Scopes:** `store_v2_information`
      Payment Processing:
        description: >-
          Process payments on orders and checkouts| **Path**: `/payments` |
          **Scopes:** `store_payments_access_token_create`
      Payment Processing Methods:
        description: >-
          Get order payment methods for processing| **Path**:
          `/payments/methods` | **Scopes:** `store_payments_methods_read`
      Payment Processing Token:
        description: >-
          Get an access token for payment processing| **Path**:
          `/payments/accsess_tokens` | **Scopes:**
          `store_payments_access_token_create`
      Price List Records:
        description: >-
          Create and manage price list records| **Path**: `/pricelists/records`
          | **Scopes:** `store_v2_products`
      Price Lists:
        description: >-
          Create and manage catalog pricing variations| **Path**: `/pricelists`
          | **Scopes:** `store_v2_products`
      Product Bulk Pricing Rules:
        description: >-
          Create and manage product bulk pricing rules| **Path**:
          `/catalog/products/{id}/buld-pricing-rules` | **Scopes:**
          `store_v2_products`
      Product Complex Rules:
        description: >-
          Create and manage product complex rules| **Path**:
          `/catalog/products/{id}/complex-rules` | **Scopes:**
          `store_v2_products`
      Product Custom Fields:
        description: >-
          Create and manage product custom fields| **Path**:
          `/catalog/products/{id}/custom-fields` | **Scopes:**
          `store_v2_products`
      Product Images:
        description: >-
          Create and manage product images| **Path**:
          `/catalog/products/{id}/images` | **Scopes:** `store_v2_products`
      Product Metafields:
        description: >-
          Create and manage product meta fields| **Path**:
          `/catalog/products/{id}/metafields` | **Scopes:** `store_v2_products`
      Product Modifier Images:
        description: >-
          Create and manage product modifer images| **Path**:
          `/catalog/products/{id}/modifiers/{id}/images` | **Scopes:**
          `store_v2_products`
      Product Modifier Values:
        description: >-
          Create and manage product modifier values| **Path**:
          `/catalog/products/{id}/modifers/{id}/values` | **Scopes:**
          `store_v2_products`
      Product Modifiers:
        description: >-
          Create and manage product midifiers| **Path**:
          `/catalog/products/{id}/modifiers` | **Scopes:** `store_v2_products`
      Product Reviews:
        description: >-
          Create and manage product reviews| **Path**:
          `/catalog/products/{id}/reviews` | **Scopes:** `store_v2_products`
      Product Variant Option Values:
        description: >-
          Create and manage product variant option values| **Path**:
          `/catalog/products/{id}/options/{id}/values` | **Scopes:**
          `store_v2_products`
      Product Variant Options:
        description: >-
          Create and manage product variant options| **Path**:
          `/catalog/products/{id}/options` | **Scopes:** `store_v2_products`
      Product Variants:
        description: >-
          Create and manage product variants| **Path**:
          `/catalog/products/{id}/variants` | **Scopes:** `store_v2_products`
      Product Videos:
        description: >-
          Create and manage product videos| **Path**:
          `/catalog/products/{id}/videos` | **Scopes:** `store_v2_products`
      Products:
        description: >-
          Create and manage products| **Path**: `/catalog/products` |
          **Scopes:** `store_v2_products`
      ProductVariant Metafields:
        description: >-
          Create and manage product meta flields| **Path**:
          `/catalog/products/{id}/variants/{id}/metafields` | **Scopes:**
          `store_v2_products`
      Redirects:
        description: >-
          Manage a store's URL redirects| **Path**: `/redirects` | **Scopes:**
          `store_v2_content`
      Scripts:
        description: >-
          Add client-side code to a store| **Path**: `/content/scripts` |
          **Scopes:** `store_v2_content`
      Shipping:
        description: >-
          Create and manage a store's shipping methods and zones.| **Path**:
          `/shipping` | **Scopes:** `store_v2_information`
      Shipping Carriers:
        description: >-
          Create and manage shipping carriers| **Path**: `/shipping` |
          **Scopes:** `store_v2_information`
      Shipping Methods:
        description: >-
          Create and manage shipping methods| **Path**: `/shipping` |
          **Scopes:** `store_v2_information`
      Shipping Poviders Connection Options:
        description: >-
          Specification for creating an external shipping carrier service|
          **Path**: `/check_connection_options` | **Scopes:** `n/a`
      Shipping Provider Rate Request:
        description: >-
          Specification for creating an external shipping carrier service|
          **Path**: `/rate` | **Scopes:** `n/a`
      Shipping Zones:
        description: >-
          Create and manage shipping zones| **Path**: `/shipping` | **Scopes:**
          `store_v2_information`
      Sites:
        description: >-
          Manage sites and routing for headless storefronts| **Path**: `/Sites`
          | **Scopes:** `store_sites`
      Store Infomation:
        description: >-
          Get store metadata| **Path**: `/store` | **Scopes:**
          `store_v2_information`
      Storefront API Token:
        description: >-
          Create Auth Tokens for use with Storefront APIs| **Path**:
          `/api-token` | **Scopes:** `store_storefront_api`
      Storefront Carts:
        description: >-
          Create and get carts on the front-end| **Path**: `/carts` |
          **Scopes:** `store_storefront_api`
      Storefront Checkouts:
        description: >-
          Create and get checkouts on the front-end| **Path**: `/checkouts` |
          **Scopes:** `store_storefront_api`
      Storefront Customer Impersonation Token:
        description: >-
          Create a storefront API token for customer impersonation| **Path**:
          `/api-token-customer-impersonation` | **Scopes:**
          `store_storefront_api_customer_impersonation`
      Storefront Orders:
        description: >-
          Get order data on the front-end after order is palced| **Path**:
          `/orders` | **Scopes:** `store_storefront_api`
      Subscribers:
        description: >-
          Create and manage store newsletter subscribers| **Path**:
          `/customers/subscribers` | **Scopes:** `store_v2_customers`
      Tax Class:
        description: >-
          Get a store's available tax classes| **Path**: `/tax_classes` |
          **Scopes:** `store_v2_information`
      Themes:
        description: >-
          Create and manage store theme's| **Path**: `/themes` | **Scopes:**
          `store_themes_manage`
      Time Zone:
        description: >-
          Get store system timestamp| **Path**: `/time` | **Scopes:**
          `store_v2_information`
      Variants:
        description: >-
          Get and update all variants| **Path**: `/catalog/variants` |
          **Scopes:** `store_v2_products`
      Webhooks:
        description: 'Manage store Webhooks| **Path**: `/hooks` | **Scopes:** `default`'
      Widgets:
        description: >-
          Create and manage store widgets| **Path**: `/content/widgets` |
          **Scopes:** `store_v2_content`
      Widgets Placements:
        description: >-
          Place, move, and remove store widgets| **Path**: `/content/placements`
          | **Scopes:** `store_v2_content`
      Widgets Regions:
        description: >-
          Get list of regions widgets can be placed for a specified template
          file| **Path**: `/content/regions` | **Scopes:** `store_v2_content`
      Widgets Templates:
        description: >-
          Create and manage widget templates| **Path**:
          `/content/widget-templates` | **Scopes:** `store_v2_content`
      Wishlist:
        description: >-
          Create and manage customer wishlists| **Path**: `/wishlists` |
          **Scopes:** `store_v2_customers`
schemes:
  - https
parameters:
  Accept:
    in: header
    type: string
    name: Accept
    default: application/json
    required: true
    description: Accept
  Content-Type:
    name: Content-Type
    in: header
    type: string
    default: application/json
    required: true
    description: Content-Type
securityDefinitions:
  X-Auth-Client:
    type: apiKey
    name: X-Auth-Client
    in: header
    description: >-
      ## OAuth Scopes

      |  **UI Name** | **Permission** | **Parameter** |

      | --- | --- | --- |

      |  Carts | modify | `store_cart` |

      |  Carts | read-only | `store_cart_read_only` |


      For more information on OAuth Scopes, see:
      [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication). 


      ## Authentication


      |Header|Parameter|Description|

      |-|-|-|

      |`X-Auth-Client`|`client_id`|Obtained by creating an API account or
      installing an app in a BigCommerce control panel.|

      |`X-Auth-Token`|`access_token `|Obtained by creating an API account or
      installing an app in a BigCommerce control panel.|


      ```http

      GET /stores/{$$.env.store_hash}/v3/catalog/summary

      host: api.bigcommerce.com

      Accept: application/json

      X-Auth-Client: {client_id}

      X-Auth-Token: {access_token}

      ```


      For more information on Authenticating BigCommerce APIs, see:
      [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).
  X-Auth-Token:
    type: apiKey
    in: header
    name: X-Auth-Token
    description: >-
      ## OAuth Scopes

      |  **UI Name** | **Permission** | **Parameter** |

      | --- | --- | --- |

      |  Carts | modify | `store_cart` |

      |  Carts | read-only | `store_cart_read_only` |


      For more information on OAuth Scopes, see:
      [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication). 


      |Header|Parameter|Description|

      |-|-|-|

      |`X-Auth-Client`|`client_id`|Obtained by creating an API account or
      installing an app in a BigCommerce control panel.|

      |`X-Auth-Token`|`access_token `|Obtained by creating an API account or
      installing an app in a BigCommerce control panel.|


      ```http

      GET /stores/{$$.env.store_hash}/v3/catalog/summary

      host: api.bigcommerce.com

      Accept: application/json

      X-Auth-Client: {client_id}

      X-Auth-Token: {access_token}

      ```


      For more information on Authenticating BigCommerce APIs, see:
      [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).
  OAuth:
    type: oauth2
    flow: accessCode
    authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
    tokenUrl: 'https://accounts.google.com/o/oauth2/token'
    scopes:
      scope1: scope1
      scope2: scope2
      scope3: scope3
  OAuthScopes:
    type: oauth2
    flow: accessCode
    authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
    tokenUrl: 'https://accounts.google.com/o/oauth2/token'
    description: >-
      ## OAuth Scopes

      |  **UI Name** | **Permission** | **Parameter** |

      | --- | --- | --- |

      |  Carts | modify | `store_cart` |

      |  Carts | read-only | `store_cart_read_only` |


      For more information on OAuth Scopes, see:
      [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication). 
security:
  - X-Auth-Client: []
  - X-Auth-Token: []
  - OAuthScopes: []
consumes: []
produces: []
basePath: '/stores/{$$.env.store_hash}/v3'
tags:
  - name: Example
