title: Stencil Developer Documentation new
pages:
  /:
    title: Stencil Developer Documentation
    data:
      children:
        - title: Welcome To Stencil
          route:
            path: /welcome-to-stencil
          data:
            children:
              - title: Why Stencil (Markdown)
                route:
                  path: /why-stencil-md
                data:
                  blocks:
                    - type: text
                      data: >-
                        This entry includes:


                        * Design Philosophy

                        * New Options

                        * Getting Started

                        * About Storefront Features

                        * Legacy Framework Documentation

                        * Video Demonstrations


                        <h2>Design Philosophy</h2>

                        <img style="float: right; margin: 0px 0px 0px 30px;"
                        src="https://files.readme.io/76514b0-ThumbnailCornerstone-3294x370.png"
                        alt="A Stencil Theme" height="248" width="197">


                        The Stencil framework consists of several pillars that
                        provide a foundation for all storefront development:<br>

                        <ul>
                          <li>Logic-based templates, using the lightweight <a href="http://handlebarsjs.com/">Handlebars</a> templating language.</li>
                          <li>Page-specific resource definition, using <a href="http://yaml.org/">YAML</a>-formatted front matter.</li>
                          <li>Rich front-end development options, driven by JavaScript event hooks.</li>
                          <li>Rapid local development and redesign with minimal coding.</li>
                          <li>Real-time Browsersync preview and testing across desktop, mobile, and tablet devices/viewports.</li>
                        </ul>Using this foundation, you will be able to create
                        beautiful, dynamic, and powerful storefronts that offer
                        customers a first-class experience on BigCommerce-hosted
                        online stores.

                        <h2><a name="New"></a> New Options</h2>The Stencil
                        framework offers these key features that are new to
                        BigCommerce themes:<br>

                        <ul>
                          <li>Flexible local development: Design against your live storefront’s assets, with no disruption of the live store.</li>
                          <li>Graphical (WYSIWYG) editor that enables merchants to customize, manage, and preview storefront attributes – colors, fonts, number of items displayed, etc. – with no coding. Self-service means lighter support requirements.</li>
                          <li>Responsive, mobile-friendly themes – elegantly showcasing brands and merchants' offerings on any device.</li>
                          <li>Support for adding multiple variations per theme – separately optimized for different audiences and market/product segments.</li>
                          <li>Flexible and powerful Sass/SCSS support, allowing you to nest properties, variables, and mixins. 
                            <nobr>Use the familiar</nobr> Foundation framework (provided), or substitute your choice of framework.</li>
                        </ul>

                        <h2><a name="GetStart"></a> Getting Started</h2>To try
                        out Stencil's features for yourself, please proceed to
                        our:

                        <ul>
                          <li><a href="/docs/getting-started-guide">Getting Started/Transition Guide</a> for developers/designers migrating from Blueprint and other platforms.</li>
                          <li><a href="/docs/installing-and-launching-stencil-1">Installation and Launch</a> instructions.</li>
                          <li><a href="/docs/developing-on-the-stencil-framework-quick-start/">Development Quick Start</a> tutorial.</li>
                        </ul>

                        <h2><a name="StoreFeatures"></a> About Storefront
                        Features</h2>To see the storefront features that
                        BigCommerce themes can support, please explore our:

                        <ul>
                          <li><a href="https://www.bigcommerce.com/features/all/">Overview</a> of available storefront features.</li>
                          <li><a href="https://support.bigcommerce.com/articles/Public/Themes-Design-Overview">Themes &#x26; Design Overview</a> – and related “Store Design &#x26; Content” support<!--<a href="https://support.bigcommerce.com">https://support.bigcommerce.com</a>-->topics linked from that page – to see how your feature selections will map to merchants' options in the BigCommerce control panel.</li>
                        </ul>

                        <h2><a name="Blueprint"></a> Legacy Framework
                        Documentation</h2>Looking for information on
                        BigCommerce's existing (Blueprint) framework? You can
                        access our:

                        <ul>
                          <li><a href="https://developer.bigcommerce.com/themes">Themes (Blueprint)</a> reference.</li>
                          <li><a href="https://developer.bigcommerce.com/api">Stores API</a> reference.</li>
                        </ul>

                        <h2><a name="Videos"></a> Video Demonstrations</h2>Watch
                        Stencil senior developer Mick Ryan's brief demonstration
                        of Stencil installation and launch:<br>

                        <p></p><iframe width="560" height="315"
                        src="https://www.youtube.com/embed/iWBrJalyM0A"
                        frameborder="0" allowfullscreen></iframe><!--  <iframe
                        width="560" height="315"
                        src="https://www.youtube.com/embed/qQ6Nm9zPE7s"
                        frameborder="0" allowfullscreen></iframe>  --><br>

                        <p></p>Watch Stencil senior developer Mick Ryan's brief
                        demonstration of editing a Stencil theme:<br>

                        <p></p><iframe width="560" height="315"
                        src="https://www.youtube.com/embed/9Rk4qWgia5Y"
                        frameborder="0" allowfullscreen></iframe><!--  <iframe
                        width="560" height="315"
                        src="https://www.youtube.com/embed/xe50jaDmd8k"
                        frameborder="0" allowfullscreen></iframe>  --><br>

                        <p></p>Watch Stencil senior developer Mick Ryan's tour
                        of Stencil's key components:<br>

                        <p></p><iframe width="560" height="315"
                        src="https://www.youtube.com/embed/p5SR8N0SeCg"
                        frameborder="0" allowfullscreen></iframe>
              - title: Why Stencil (HTML)
                route:
                  path: /why-stencil
                data:
                  blocks:
                    - type: html
                      data: >-
                        This entry includes:

                        <ul>
                          <li><a href="#Design">Design Philosophy</a></li>
                          <li><a href="#New">New Options</a></li>
                          <li><a href="#GetStart">Getting Started</a></li>
                          <li><a href="#StoreFeatures">About Storefront Features</a></li>
                          <li><a href="#Blueprint">Legacy Framework Documentation</a></li>
                          <li><a href="#Videos">Video Demonstrations</a></li>
                        </ul>

                        <h2><a name="Design"></a> Design Philosophy</h2>

                        <img style="float: right; margin: 0px 0px 0px 30px;"
                        src="https://files.readme.io/76514b0-ThumbnailCornerstone-3294x370.png"
                        alt="A Stencil Theme" height="248" width="197">


                        The Stencil framework consists of several pillars that
                        provide a foundation for all storefront development:<br>

                        <ul>
                          <li>Logic-based templates, using the lightweight <a href="http://handlebarsjs.com/">Handlebars</a> templating language.</li>
                          <li>Page-specific resource definition, using <a href="http://yaml.org/">YAML</a>-formatted front matter.</li>
                          <li>Rich front-end development options, driven by JavaScript event hooks.</li>
                          <li>Rapid local development and redesign with minimal coding.</li>
                          <li>Real-time Browsersync preview and testing across desktop, mobile, and tablet devices/viewports.</li>
                        </ul>Using this foundation, you will be able to create
                        beautiful, dynamic, and powerful storefronts that offer
                        customers a first-class experience on BigCommerce-hosted
                        online stores.

                        <h2><a name="New"></a> New Options</h2>The Stencil
                        framework offers these key features that are new to
                        BigCommerce themes:<br>

                        <ul>
                          <li>Flexible local development: Design against your live storefront’s assets, with no disruption of the live store.</li>
                          <li>Graphical (WYSIWYG) editor that enables merchants to customize, manage, and preview storefront attributes – colors, fonts, number of items displayed, etc. – with no coding. Self-service means lighter support requirements.</li>
                          <li>Responsive, mobile-friendly themes – elegantly showcasing brands and merchants' offerings on any device.</li>
                          <li>Support for adding multiple variations per theme – separately optimized for different audiences and market/product segments.</li>
                          <li>Flexible and powerful Sass/SCSS support, allowing you to nest properties, variables, and mixins. 
                            <nobr>Use the familiar</nobr> Foundation framework (provided), or substitute your choice of framework.</li>
                        </ul>

                        <h2><a name="GetStart"></a> Getting Started</h2>To try
                        out Stencil's features for yourself, please proceed to
                        our:

                        <ul>
                          <li><a href="/docs/getting-started-guide">Getting Started/Transition Guide</a> for developers/designers migrating from Blueprint and other platforms.</li>
                          <li><a href="/docs/installing-and-launching-stencil-1">Installation and Launch</a> instructions.</li>
                          <li><a href="/docs/developing-on-the-stencil-framework-quick-start/">Development Quick Start</a> tutorial.</li>
                        </ul>

                        <h2><a name="StoreFeatures"></a> About Storefront
                        Features</h2>To see the storefront features that
                        BigCommerce themes can support, please explore our:

                        <ul>
                          <li><a href="https://www.bigcommerce.com/features/all/">Overview</a> of available storefront features.</li>
                          <li><a href="https://support.bigcommerce.com/articles/Public/Themes-Design-Overview">Themes &#x26; Design Overview</a> – and related “Store Design &#x26; Content” support<!--<a href="https://support.bigcommerce.com">https://support.bigcommerce.com</a>-->topics linked from that page – to see how your feature selections will map to merchants' options in the BigCommerce control panel.</li>
                        </ul>

                        <h2><a name="Blueprint"></a> Legacy Framework
                        Documentation</h2>Looking for information on
                        BigCommerce's existing (Blueprint) framework? You can
                        access our:

                        <ul>
                          <li><a href="https://developer.bigcommerce.com/themes">Themes (Blueprint)</a> reference.</li>
                          <li><a href="https://developer.bigcommerce.com/api">Stores API</a> reference.</li>
                        </ul>

                        <h2><a name="Videos"></a> Video Demonstrations</h2>Watch
                        Stencil senior developer Mick Ryan's brief demonstration
                        of Stencil installation and launch:<br>

                        <p></p><iframe width="560" height="315"
                        src="https://www.youtube.com/embed/iWBrJalyM0A"
                        frameborder="0" allowfullscreen></iframe><!--  <iframe
                        width="560" height="315"
                        src="https://www.youtube.com/embed/qQ6Nm9zPE7s"
                        frameborder="0" allowfullscreen></iframe>  --><br>

                        <p></p>Watch Stencil senior developer Mick Ryan's brief
                        demonstration of editing a Stencil theme:<br>

                        <p></p><iframe width="560" height="315"
                        src="https://www.youtube.com/embed/9Rk4qWgia5Y"
                        frameborder="0" allowfullscreen></iframe><!--  <iframe
                        width="560" height="315"
                        src="https://www.youtube.com/embed/xe50jaDmd8k"
                        frameborder="0" allowfullscreen></iframe>  --><br>

                        <p></p>Watch Stencil senior developer Mick Ryan's tour
                        of Stencil's key components:<br>

                        <p></p><iframe width="560" height="315"
                        src="https://www.youtube.com/embed/p5SR8N0SeCg"
                        frameborder="0" allowfullscreen></iframe>
              - title: Getting Started
                route:
                  path: /getting-started
                data:
                  blocks:
                    - type: text
                      data: '# Title'
                    - type: html
                      data: <span class="section"></span>
                    - type: text
                      data: '## Section Title'
                    - type: content
                      data: Here is some content
                    - type: text
                      data: '## Related Articles'
                    - type: text
                      data: Content for related articles
                    - type: text
                      data: >-
                        Are you approaching Stencil from a different theming
                        framework, like BigCommerce's earlier Blueprint
                        framework? Or moving to this templating environment from
                        pure HTML and CSS-based design?


                        Use this article to identify your ideal method for
                        Stencil theme development and quickly ramp up on the
                        conventions that Stencil uses. It will cover the
                        following information:


                        * [Choosing a Development Path](#choose)

                        * [Front-Matter Quick Start](#frontmatter)

                        * [Handlebars Quick Start](#hb)

                        * [SEO Tips/Best Practices](#seo)

                        * [Blueprint-to-Stencil Features Map](#map)

                        * [Interacting with the BigCommerce API](#api)

                        * [Partnering with BigCommerce](#partner)

                        * [Next Steps](#Next)


                        <hr style="background-color:#4E75F8;
                        border-width:0;color:#000000; height:2px; line-height:0;
                        text-align:left; width:100%;"/>


                        ## <a name="choose"></a> Choosing a Development Path


                        You have four increasingly hands-on options for
                        developing Stencil themes:

                        * [Find a Design & Solutions Partner](#dsp)

                        * [Light Customization – Graphical Theme Editor](#ted)

                        * [Light Customization – HTML/CSS](#edt)

                        * [Adapt a Stencil Theme, or Develop from Scratch](#cli)

                        <br>


                        ###  <a name="dsp"></a> Find a Design & Solutions
                        Partner


                        If you prefer to have an expert collaborator customize
                        your theme, we recommend working with one of our
                        certified BigCommerce Design & Solutions Partners.
                        Please see these resources:


                        * [Partner
                        Directory](https://partners.bigcommerce.com/directory/search?i=75)

                        * [Working with a Design
                        Partner](https://support.bigcommerce.com/articles/Learning/Working-with-a-Design-Partner)
                        (Support Guide)

                        <br>



                        ### <a name="ted"></a> Light Customization – Graphical
                        Theme Editor


                        A designer or store owner can customize many aspects of
                        an existing Stencil theme _without_ using specialized
                        development tools or techniques. Stencil's graphical
                        Theme Editor requires no coding at all. 


                        Yet Theme Editor still enables customization of a
                        theme's colors, typography, banners, headings, carousel,
                        and footer. It also enables customization of broader
                        layout characteristics, such as the number of products
                        displayed in various panels, category pages, and brand
                        pages.


                        <img style="float: right; margin: 0px 0px 0px 30px;"
                        src="https://files.readme.io/698f15f-Theme-Editor-50.png"
                        alt="Stencil Theme Editor" height="60%" width="60%"
                        style="border:1px solid #D1D7E0">


                        For details, please see:


                        * [Theme
                        Editor](https://support.bigcommerce.com/articles/Public/Using-the-Stencil-Theme-Editor/)
                        (Support article)

                        * [Stencil and the BigCommerce Control
                        Panel](https://www.youtube.com/watch?v=d2F6F8LJXzs&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0&index=2)
                        (Video introduction to Theme Editor)

                        * [Changing Your Store's
                        Theme](https://support.bigcommerce.com/articles/Learning/What-to-Consider-When-Changing-Your-Theme)
                        (Support guide)

                        * [Personalizing Your
                        Theme](https://support.bigcommerce.com/articles/Learning/Personalizing-your-New-Theme)
                        (Support guide)

                        <br><br>


                        ### <a name="edt"></a> Light Customization – HTML/CSS


                        If you are most comfortable working in HTML and CSS,
                        Stencil's Edit Theme Files feature allows you to
                        directly edit most of your theme's files. For details,
                        please see:


                        <img style="float: right; margin: 0px 0px 0px 30px;"
                        src="https://files.readme.io/a3c7126-Edit-Theme-Files-50.png"
                        alt="Edit Theme Files" height="55%" width="55%"
                        style="border:1px solid #D1D7E0">


                        * [Edit Theme
                        Files](https://support.bigcommerce.com/articles/Public/Editing-Stencil-Theme-Files)
                        (Support article)

                        * [Edit Theme
                        Files](https://www.youtube.com/watch?v=waJ1dg_dAh8&index=11&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0)
                        (Video overview of copying and editing a theme's files)


                        Follow these links if you'd like to recharge or refresh
                        your basic working knowledge of HTML and CSS:


                        * http://www.w3schools.com/html/    

                        * https://www.tutorialspoint.com/html/

                        * http://www.w3schools.com/css/   

                        * https://www.tutorialspoint.com/css/

                        <br>


                        ### <a name="cli"></a> Adapt a Stencil Theme, or Develop
                        from Scratch


                        For complete control over a theme's appearance and logic
                        – including the ability to edit _all_ theme
                        configuration files – you will want to use the Stencil
                        CLI (command-line interface) framework. Stencil CLI is
                        described in detail in the remainder of this
                        documentation. 


                        To get up to speed on Stencil&#160;CLI's templating
                        conventions, please see the Quick Start sections just
                        below. Also see:


                        * [Getting Started with the Stencil
                        Framework](https://www.youtube.com/playlist?list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0)
                        (Videos)



                        <hr style="background-color:#4E75F8;
                        border-width:0;color:#000000; height:2px; line-height:0;
                        text-align:left; width:100%;"/>


                        ## <a name="frontmatter"></a> Front-Matter Quick Start


                        Stencil templates start with a section of "front matter"
                        where you can flexibly, and concisely, customize each
                        page's design and layout details. For example, a couple
                        of keystrokes will allow you to change the number of
                        products that shoppers will see on a given page and
                        panel.


                        This front-matter section uses conventions from YAML, a
                        simple, widely used markup language. Even if you haven't
                        used these conventions before, our internal
                        documentation will help you rapidly master them:


                        * [Front-Matter
                        Overview](https://stencil.bigcommerce.com/docs/using-yaml-front-matter)
                        of YAML syntax.



                        <hr style="background-color:#4E75F8;
                        border-width:0;color:#000000; height:2px; line-height:0;
                        text-align:left; width:100%;"/>


                        ## <a name="hb"></a> Handlebars Quick Start


                        Stencil uses the Handlebars templating language to
                        assemble dynamically changing content – drawn from the
                        BigCommerce store's catalog, and from other sources –
                        into the HTML pages displayed to shoppers. 


                        Handlebars' syntax is quite simple. It allows you to
                        accomplish powerful JavaScript operations with minimal
                        JavaScript code. To get up to speed on Handlebars
                        conventions, please see these third-party tutorials: 


                        * [Learn Handlebars in 10 Minutes or
                        Less](http://tutorialzine.com/2015/01/learn-handlebars-in-10-minutes/)

                        * [A Beginner’s Guide to
                        Handlebars](https://www.sitepoint.com/a-beginners-guide-to-handlebars/)

                        * [Getting Started with
                        Handlebars.js](http://blog.teamtreehouse.com/getting-started-with-handlebars-js)

                        * [Handlebars interactive
                        tutorial](http://tryhandlebarsjs.com/)


                        <img
                        src="https://files.readme.io/3ed9b1d-YAMLHandlebars-codedividers.png"
                        alt="Front matter above the red line, Handlebars below"
                        height="50%" width="50%" style="border:1px solid
                        #D1D7E0">

                        <span style="color: #888"> Front matter above the red
                        line, Handlebars below </span><br>


                        <hr style="background-color:#4E75F8;
                        border-width:0;color:#000000; height:2px; line-height:0;
                        text-align:left; width:100%;"/>


                        ## <a name="seo"></a> SEO Tips/Best Practices


                        Search-engine optimization (SEO) helps translate an
                        elegant theme into a successful, high-conversion
                        storefront. Because so many shoppers reach online stores
                        through a search engine, a search-optimized site will be
                        more visible – attracting more traffic. 


                        The Stencil framework is [designed for high SEO
                        performance](https://www.bigcommerce.com/improve-organic-traffic/).
                        However, you will want to keep SEO in mind as you build
                        out each theme and storefront. For guidelines, please
                        see these BigCommerce support articles (which are a
                        series of intermediate to advanced chapters in our
                        <i>Guide to SEO):</i> 


                        * [SEO Do's and
                        Don'ts](https://support.bigcommerce.com/articles/Learning/Things-to-Know/)

                        * [Developing a Keyword
                        Strategy](https://support.bigcommerce.com/articles/Learning/Developing-a-Keyword-Strategy/)

                        * [SEO Success
                        Essentials](https://support.bigcommerce.com/articles/Learning/Bigcommerce-SEO-Success-Essentials/)

                        * [Advanced SEO on
                        BigCommerce](https://support.bigcommerce.com/articles/Learning/Advanced-SEO-on-Bigcommerce/)


                        Please also see our:

                        * [Guide to Keyword
                        Research](https://support.bigcommerce.com/articles/Learning/Value-of-Keywords/)


                        <hr style="background-color:#4E75F8;
                        border-width:0;color:#000000; height:2px; line-height:0;
                        text-align:left; width:100%;"/>


                        ## <a name="map"></a> Blueprint-to-Stencil Features Map 


                        If you've been developing themes on BigCommerce's
                        longstanding Blueprint framework, you might be
                        wondering: Where did my stuff go? This section is
                        designed to help you identify the Stencil counterparts
                        to familiar Blueprint components.


                        As a starting point, we suggest these resources:


                        * [What to Consider When Changing Your
                        Theme](https://forum.bigcommerce.com/s/article/What-to-Consider-When-Changing-Your-Theme)
                        (Support article)

                        * [Stencil and the BigCommerce Control
                        Panel](https://www.youtube.com/watch?v=d2F6F8LJXzs&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0&index=2)
                        (Video tour of Blueprint-to-Stencil  changes in the
                        BigCommerce control panel)


                        For a more detailed map of Blueprint-to-Stencil options,
                        please use the table below to explore a Stencil theme's
                        pertinent subdirectories, along with links to related
                        documentation. 
              - title: Stencil Technology Base
                route:
                  path: /stencil-technology-base
                data:
                  blocks:
                    - type: text
                      data: >-
                        For complete control over theme development, here is a
                        brief summary of how you would interact with the
                        <NOBR>Stencil CLI</nobr> (command-line interface)
                        framework, while also enabling further theme
                        customization by merchants:<br>


                        <ul>
                         <li><a href="#LocalDev">Local Development</a></li>
                         <li><a href="#Attrib">Attributes</a></li>
                         <li><a href="#Obj">Objects</a></li>
                         <li><a href="#Syntax">Syntax</a></li>
                         <li><a href="#Hooks">Event Hooks</a></li>
                         <li><a href="#Design">Design</a></li>
                         <li><a href="#Customize">Customization</a></li>
                         <li><a href="#Next">Next Steps</a></li>
                        </ul>


                        <H2> <A NAME="LocalDev"></a> Local Development </h2>


                        Stencil is designed to support local development.
                        Stencil CLI runs on the <a
                        href="https://nodejs.org/">Node.js</a> runtime
                        environment. Installing Node.js also provides the
                        required <a href="https://www.npmjs.com/">npm</a>
                        package manager.


                        <H5> More Info: </h5>

                        <ul>
                          <li> <a href="/docs/prerequisites">Node.js and npm prequisites</a>
                          </li>
                          <li> <a href="/docs/installing-stencil-cli-1">Installing Stencil CLI</a>
                          </li>
                          <li> <a href="/docs/stencil-cli-options">Stencil CLI options</a>
                          </li>
                        </ul>


                        <H2> <A NAME="Attrib"></a> Attributes </h2>


                        Stencil's storefront template pages support <a
                        href="http://yaml.org/">YAML</a>-formatted "front
                        matter" to invoke the attributes you need, per page.
                        <NOBR>Here is</nobr> an example of a pagetop invocation
                        to display a "new products" section, while limiting its
                        contents to four products:<br>


                        <p></p><pre>

                        ---

                        products:
                            new:
                                limit: 4
                        ---</pre>


                        <H5> More Info: </h5>

                        <ul>
                          <li> <a href="/docs/using-yaml-front-matter">Attributes invocation overview</a>
                          </li>
                          <li> <a href="/docs/front-matter-variables">Attributes reference</a> </li>
                        </ul>


                        <H2> <A NAME="Obj"></a> Objects </h2>


                        Stencil exposes data objects that allow your themes to
                        access various assets across a storefront. Here is an
                        example of a Stencil object &ndash; a very simple one,
                        which nevertheless references a second object:



                        <p></p><pre>

                        <b>Brand List [Object]

                            Attribute:        Description:</b>
                            url               URL to this brand’s products listing
                            name              Name of the brand
                            image             <a href="/docs/stencil-image-common-object">Stencil image object</a> (if any) for the brand
                        </pre>


                        <!-- <br><p></p>

                        <table>
                          <tr>
                            <td><b>Brand List</b><br>
                              Attribute</td>
                            <td><br>
                              Description</td>
                          </tr>
                          <tr>
                            <td class="">url</td>
                            <td class="">URL to this brand’s products listing</td>
                          </tr>
                          <tr>
                            <td class="">name</td>
                            <td class="">Name of the brand</td>
                          </tr>
                          <tr>
                            <td class="">image</td>
                            <td class="">Stencil image object (if any) for the brand</td>
                          </tr>
                        </table> -->


                        <H5> More Info: </h5>

                        <ul>
                          <li> <a href="/docs/stencil-object-model">Objects reference</a> </li>
                        </ul>


                        <H2> <A NAME="Syntax"></a> Syntax </h2>


                        Theme pages access Stencil objects using <a
                        href="http://handlebarsjs.com/">Handlebars</a>, a
                        lightweight, open-source templating language. Handlebars
                        allows you to efficiently embed dynamic and conditional
                        logic onto your storefront pages. A Handlebars
                        expression begins with: <span
                        class="inline-code">{{</span> and ends with: <span
                        class="inline-code">}}</span>.<br>


                        <p></p>Below is a Handlebars <span
                        class="inline-code">if</span> structure that tests for a
                        boolean variable named <span
                        class="inline-code">product.similar_by_views</span>. If
                        its value is <span class="inline-code">true</span>, this
                        snippet inserts a corresponding component &ndash; a
                        carousel display of "similar products." It also
                        specifies a six-column display:<br><br>


                        <pre>{{#if product.similar_by_views}}
                           {{> components/products/carousel products=product.similar_by_views columns=6}}
                        {{/if}}

                        </pre>


                        <H5> More Info: </h5>

                        <ul>
                          <li> <a href="/docs/developing-with-handlebars">Handlebars</a> overview
                          </li>
                        <li> <a
                        href="/docs/basic-designlayout-changes">Handlebars
                        tutorial</a> (requires Stencil <a
                        href="/docs/installing-and-launching-stencil-1">installation</a>)
                          </li>
                        </ul>
                          
                        <H2> <A NAME="Hooks"></a> Event Hooks </h2>


                        Your Stencil themes can access remote objects through
                        data tags and event hooks, using the hooks to trigger
                        defined events based on shopper behavior. To facilitate
                        theme-building, BigCommerce provides the <span
                        class="inline-code">stencil-utils</span> client-side
                        JavaScript library for managing event hooks.<br><br>


                        <A NAME="remote-ex-2"></a>In the following code example
                        from a Stencil theme, note the <span
                        class="inline-code">cart‑item‑add</span> event. A theme
                        could listen for this  event, to override the default
                        form-submit behavior when a shopper adds product to
                        their cart:<br>


                        <p></p><pre>/*  
                         * Import all product-specific js 
                         */
                        [...]

                        import utils from 'bigcommerce/stencil-utils';

                        [...]

                        addProductToCart() {
                            utils.hooks.on(<b>'cart-item-add'</b>, (event) =&gt; {
                                event.preventDefault();
                            });
                        }</pre>


                        <H5> More Info: </h5>

                        <ul>
                         <li>Event hooks<a href="/docs/data-tagsevent-hooks-reference"> reference</a></li>
                         <li><span class="inline-code">stencil-utils</span> package <a href="/docs/the-stencil-utils-package">introduction</a></li>
                         <li><span class="inline-code">stencil-utils</span> <a href="/docs/stencil-utils-api-reference">API Reference</a></li>
                        </ul>


                        <H2> <A NAME="Design"></a> Design </h2>


                        Stencil supports <a
                        href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html">Sass</a>/SCSS
                        upon installation, with your choice of framework.


                        <H5> More Info: </h5>

                        <ul>
                         <li><a href="/docs/componentsdesign-patterns">Components/Design Patterns</a></li>
                        </ul>
                    - type: callout
                      data:
                        type: warning
                        title: Before You Customize
                        body: >-
                          The Stencil framework is designed to support your
                          incorporation of custom Sass/SCSS frameworks and
                          JavaScript libraries. However, BigCommerce does not
                          offer technical assistance on substitutions for, or
                          customized versions of, Stencil's default
                          dependencies.
                    - type: text
                      data: >-
                        <H2> <A NAME="Customize"></a> Customization </h2>


                        Merchants can further customize your themes using
                        Stencil's Theme Editor, a browser-based graphical
                        interface. You configure which theme features are
                        available for self-service here, through what GUI
                        controls, and what options to display for each
                        feature.<br>


                        <p></p>You can grant access to colors, fonts,
                        display/hiding of page features, and number of
                        products/entries to display per feature.


                        <H5> More Info: </h5>

                        <ul>
                         <li>Theme Editor <a href="/docs/what-is-theme-editor">overview</a></li>
                         <li>Theme Editor <a href="/docs/schemajson-metadata-for-theme-editor">configuration reference</a></li>
                        </ul>



                        <H2> <A NAME="Next"></a> Next Steps </h2>

                        We invite you to proceed to our:


                        <ul>
                          <li> <a href="/docs/technology-overview">Technology Overview</a> &ndash; a richer introduction. </li>

                        <li> <a
                        href="/docs/installing-and-launching-stencil-1">Installation
                        and Launch</a> instructions. </li>


                        <li> <a
                        href="/docs/developing-on-the-stencil-framework-quick-start/">Development
                        Quick Start</a> tutorial. </li>
                          
                        <li> <a href="/using-yaml-front-matter">Front-matter</a>
                        overview of YAML conventions. </li>


                        <li> Front-matter <a
                        href="/docs/front-matter-variables">attributes</a>
                        reference. </li>


                        <li> <a
                        href="/docs/developing-with-handlebars">Handlebars</a>
                        overview. </li>
                          
                        </ul>
              - title: Supported Browsers
                route:
                  path: /supported-browsers
                data:
                  blocks:
                    - type: html
                      data: >-
                        <A NAME="SupportedBrowsers"></a>The following browsers
                        are supported for BigCommerce storefronts that use
                        Stencil-based themes. The browsers are sorted by
                        popularity, with the most popular browsers at the top.
                        Please ensure that your theme functions properly with
                        all supported browsers.


                        <h3>Desktop Browsers</h3>


                        <ul>
                          <li>Google Chrome (latest edition)</li>  
                          <li>Firefox (latest edition)</li>  
                          <li>Internet Explorer 10 and 11</li>  
                          <li>Safari (latest edition)</li>  
                          <li>Microsoft Edge (latest edition)</li>
                        </ul>
                          
                        <h3>Mobile Browsers</h3>


                        <ul>
                          <li>Android Chrome browser (latest edition)</li> 
                          <li>iOS Safari browser (latest edition)</li>  
                        </ul>
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          Browser support will cease to be offered if browser
                          usage falls below 2%.
                        title: Usage Support
                    - type: html
                      data: >-
                        <H2> <A NAME="Next"></a> Next Steps </h2>

                        We invite you to proceed to:


                        <ul>

                        <li> <a
                        href="/docs/webpack-and-build-options">Webpack</a> and
                        build-system options.
                          </li>
                        <li> <a
                        href="/docs/configjson-reference">Configuration</a>
                        reference.
                          </li>
                        <li> <a
                        href="/docs/using-yaml-front-matter">Front-matter</a>
                        overview of YAML conventions.
                          </li>
                        <li> Front-matter <a
                        href="/docs/front-matter-variables">attributes</a>
                        reference.
                          </li>
                        <li> <a
                        href="/docs/developing-with-handlebars">Handlebars</a>
                        development overview.
                          </li>
                        <li> <a href="/docs/stencil-object-model">Objects</a>
                        reference.
                          </li>
                        </ul>
            blocks:
              - type: text
                data: |
                  This section will cover:
                  * Why Stencil
                  * Getting Started
                  * Stencil Technology Base
                  * Supported Browsers
        - title: Advanced Installation Options
          route:
            path: /advanced-installation-options
          data:
            children:
              - title: 'Stencil Setup, Illustrated'
                route:
                  path: /stencil-setup-illustrated
                data:
                  blocks:
                    - type: text
                      data: >+
                        The diagram below looks complex because it shows _all_
                        currently supported workflows for setting up Stencil.
                        However, for a typical initial setup – incorporating the
                        default Cornerstone reference theme – you would just
                        follow the black arrows straight down from top to
                        bottom.


                        Here are the color codes for each setup scenario, with
                        links to details about individual steps:


                        * Black: Basic initial setup, relying on default
                        Cornerstone theme. 

                        * Purple: Customize a theme downloaded from Theme
                        Marketplace (_other than_ Cornerstone). 

                        * Orange: Refresh Cornerstone from Theme Marketplace. 

                        * Green: Configure a custom JavaScript build system, to
                        avoid dependence on Webpack and jspm.

                        * Blue: Adds onto any of the preceding four scenarios.
                        If developing for a BigCommerce Blueprint production
                        store launched before Jan. 26, 2016, you must add one
                        extra step to enable Stencil in the store's control
                        panel.

                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1532113466661
              - title: Navigating Your Setup Scenario
                route:
                  path: /navigating-your-setup-scenario
                data:
                  blocks:
                    - type: text
                      data: >-
                        # Navigating Your Setup Scenario

                        Below, each heading identifies one theme-development
                        scenario and lists the minimum installation steps you
                        will need to support that scenario:


                        * Initial Cornerstone-Based Setup

                        * Cornerstone (or Diamond/Queen) Refresh

                        * Downloaded Marketplace Theme

                        * Custom Build System

                        * Blueprint Store Launched before 1/26/2016
                    - type: callout
                      data:
                        type: warning
                        title: Notes
                        body: >-
                          * Some steps are optional for some theme-development
                          workflows. See <a href="#workflows">below</a> to
                          identify the recommended installation pathway for your
                          own scenario. 


                          * After successful framework installation (or
                          reinstallation), all scenarios will link you to the <a
                          href="/docs/preparing-your-store-tokens">Preparing&#160;Your
                          Store/Tokens</a> and <a
                          href="/docs/launching-stencil">Launching&#160;Stencil</a>
                          subsections, to launch your theme locally against a
                          BigCommerce storefront.


                          * Our installation instructions have been tested on
                          Mac OS X Yosemite, Linux/Ubuntu v.14.04.4, and
                          Windows&#160;8. Dependencies for other
                          platforms/releases will be added upon further testing.


                          * If you encounter any problems, please see the
                          Troubleshooting entry.
                    - type: text
                      data: >-
                        ### Initial Cornerstone-Based Setup 


                        Start developing based on BigCommerce's default
                        Cornerstone theme. This is a streamlined workflow, using
                        Webpack as its JavaScript build system. Steps required:


                        * Install all prerequisites

                        * Install Stencil CLI

                        * Clone default Cornerstone theme

                        * Install JavaScript utilities with npm

                        * Prepare Store and Tokens

                        * Proceed to Launching Stencil
                    - type: text
                      data: >-
                        ### Initial Cornerstone-Based Setup


                        Start developing based on BigCommerce's default
                        Cornerstone theme. This is a streamlined workflow, using
                        Webpack as its JavaScript build system. Steps required:


                        * Install all prerequisites

                        * Install Stencil CLI

                        * Clone default Cornerstone theme

                        * Install JavaScript utilities with npm

                        * Prepare Store and Tokens

                        * Proceed to Launching Stencil


                        ### Cornerstone Refresh 


                        Download and install a new version of Cornerstone (or
                        Diamond, or Queen) from BigCommerce's Theme Marketplace.
                        Steps required:


                        * Assume all prerequisites installed and Stencil CLI
                        installed

                        * Download fresh Cornerstone .zip

                        * Reinstall JavaScript utilities with npm

                        * Repeat Launching Stencil

                        <br>


                        ### Downloaded Marketplace Theme 


                        Customize a theme (_other than_ Cornerstone, Diamond, or
                        Queen) downloaded from BigCommerce's Theme Marketplace.
                        This workflow requires BitBucket, and some earlier theme
                        versions require additional steps for the jspm
                        JavaScript build system. Steps required:


                        * Install all prerequisites

                        * Install Stencil CLI

                        * Set up BitBucket, download .zip, and install
                        JavaScript dependencies

                        * Install JavaScript utilities with npm

                        * Prepare Store and Tokens

                        * Proceed to Launching Stencil

                        <br>


                        ### Custom JavaScript Build System 


                        Bypass Webpack (and jspm) by substituting a custom
                        JavaScript build system. Steps recommended:


                        * Install all prerequisites

                        * Install Stencil CLI

                        * Clone default Cornerstone theme

                        * Install JavaScript utilities with npm

                        * Configure your custom build system

                        * Prepare Store and Tokensstore-tokens)

                        * Proceed to Launching Stencil

                        <br>


                        ### Blueprint Store Launched before 1/26/2016 


                        Enable Stencil development on a BigCommerce production
                        store that was launched with a Blueprint theme before
                        Jan. 26, 2016. Steps required:

                          * Follow the installation path above that corresponds to your development scenario.
                          * As a separate (and simple) procedure, enable&#160;Stencil in the store's control panel.
              - title: Downloading a Refreshed Copy of Cornerstone
                route:
                  path: /new-subpage-1
                data:
                  blocks:
                    - type: callout
                      data:
                        body: >-
                          The steps below are required only if you are
                          downloading a refreshed copy of Stencil's default
                          Cornerstone theme, or of the Diamond or Queen theme,
                          from the BigCommerce Theme Marketplace.


                          If you are downloading a _different_ Marketplace theme
                          for customization, you must instead use the workflow
                          outlined at <a
                          href="/docs/downloading-and-customizing-marketplace-themes">Downloading
                          and Customizing Marketplace Themes</a>.


                          (Cornerstone, Diamond, and Queen use a simplified
                          workflow that bypasses BitBucket requirements, and
                          that replaces jspm with the <a
                          href="https://webpack.github.io/docs/">Webpack</a>
                          build system. You can configure Webpack's watched
                          folders, or substitute your own build system. For
                          details, please see <a
                          href="/docs/webpack-and-build-options">Webpack and
                          Build-System Options</a>.)


                          To keep any _custom or customized theme_ updated with
                          the new features that BigCommerce adds to Cornerstone,
                          please see our guidelines on [Theme Updates and
                          Version Control](/docs/theme-updates-sync).
                        title: Optional Workflow
                    - type: callout
                      data:
                        type: error
                        title: Back Up Before Reinstalling
                        body: >-
                          If you are reinstalling over a base theme on which you
                          have already begun development, first back up at least
                          your theme's <span
                          class="inline-code">&lt;theme-name&gt;/.stencil</span>
                          file. This file contains your store URL, your
                          BigCommerce username and access tokens, and other
                          basic settings. Preserving those settings will speed
                          up initializing and launching the new version.


                          To allow complete rollback, back up your whole <span
                          class="inline-code">&lt;theme-name&gt;</span>
                          directory. (In a current default installation, this
                          directory is named <span
                          class="inline-code">.../cornerstone/</span>. Prior to
                          March 2017, this directory's name defaulted to <span
                          class="inline-code">.../stencil/</span>.)
                    - type: text
                      data: >-
                        ## Downloading the Cornerstone (or Diamond/Queen) .zip 


                        Use these steps to download a refreshed version of the
                        Cornerstone, Diamond, or Queen theme from the store
                        control panel's Storefront area: 


                        * If you have not yet added Cornerstone (or
                        Diamond/Queen) to your store, start at Themes
                        Marketplace and add the theme.
                            
                        Go to Storefront -> My Themes.


                        Unpack the zipped theme to a working directory.


                        (This can be the directory where you have been
                        developing your theme, or a new directory.)


                        Reinstalling Dependencies and Relaunching 


                        Ensure that your theme includes all current
                        dependencies, by repeating JavaScript
                        Utilitiesinstallation.
                          
                        Repeat the steps listed in the Launching Stencil
                        subsection


                        Next, ensure that your theme includes all current
                        dependencies by re-running npm, as follows:<p></p>


                        Navigate to your theme directory. This example assumes
                        that this target directory has the default name stencil




                        `cd stencil`



                        `npm install`



                        You are now ready to resume development of your theme.
                        Please proceed to Launching Stencil



                        Later, when you are ready to upload your customized
                        theme to a store, you should follow the zipping and
                        uploading instructions in Bundling and Submitting a
                        Theme and Troubleshooting Theme Uploads.
              - title: Theme Updates and Version Control
                route:
                  path: /theme-updates-and-version-control
                data:
                  children: []
              - title: Configuring Webpack or a Custom Build System
                route:
                  path: /configuring-webpack
        - title: Handlebars Syntax and Helpers
          route:
            path: /handlebars-syntax-and-helpers
          data:
            children:
              - title: Handlebars Helpers Reference
                route:
                  path: /handlebars-helpers-reference
                data:
                  blocks:
                    - type: text
                      data: '# Handlebars Helpers Reference'
                    - type: text
                      data: >
                        ### {{itemAt}}


                        _Block helper that returns the item at the specified
                        index._


                        #### Parameters


                        * `array` {Array}

                        * `idx` {Number}

                        * `returns` {any} `value`


                        #### Example


                        Given the array `['a', 'b', 'c']`:


                        ```

                        {{itemAt array 1}}

                        //=> 'b'


                        ```


                        ### {{join}}


                        The `join` helper is custom to Stencil. It joins an
                        array of string items, with separators. It returns a
                        string. 


                        #### Parameters


                        - `values`: {Array}

                        - `separator`: {String}

                        - `limit=<number>`: An optional limit.


                        ### {{limit}}


                        The `limit` helper is custom to Stencil. It limits the
                        number of items returned from an array variable, and
                        returns a new array.


                        #### Parameters


                        - `data`: {Array}

                        - `limit`: {Number}


                        #### {{limit}} Example 


                        Assume that `{{cart.items}}` would return 10 items. You
                        could use this helper to limit that behavior to only the
                        first four items, by specifying: 


                        ```

                        {{limit cart.items 4}}

                        ```


                        ### {{pluck}}


                        The `pluck` helper is custom to Stencil. For one or more
                        specified search key(s), it retrieves corresponding
                        values from some or all elements in a specified
                        collection. 


                        The `pluck` helper returns the retrieved values in a
                        comma-separated string. This helper's general form is:


                        ```

                        {{pluck ([limit] <collection> [<limit-value>])
                        '<search-key>'}}

                        ```


                        #### Parameters


                        - `limit`, `limit-value`: Optional parameters to limit
                        the number of results returned.

                        - `collection`: The collection to search.

                        - `search-key`: The string to search for.



                        #### {{pluck}} Example 1


                        Assume that the `categories` collection contains:


                        ```

                        categories: [
                          { "id": 1, "name": "Bakeware" },
                          { "id": 2, "name": "Cookware" },
                          { "id": 3, "name": "Cutlery" }
                        ]

                        ```


                        In this case, this Handlebars statement:


                        ```

                        {{pluck (limit categories 2) 'name'}}

                        ```


                        ...would return:


                        ```

                        "Bakeware,Cookware"

                        ```


                        #### {{pluck}} Example 2


                        If the `categories` themselves each contained an image
                        object, then you could use dot notation to access that
                        image object's children:


                        ```

                        categories: [
                          { "id": 1, "name": "Bakeware", "image": { "data": "http://...", "alt": "Bakeware image"} },
                          { "id": 2, "name": "Cookware" "image": { "data": "http://...", "alt": "Cookware image"} },
                          { "id": 3, "name": "Cutlery" "image": { "data": "http://...", "alt": "Cutlery image"} }
                        ]

                        ```


                        In this case, this Handlebars statement:


                        ```

                        {{pluck (limit categories 2) 'image.data'}}

                        ```


                        ...would return a comma-separated list of image URLs.



                        ## <a name="array_std"></a> Standard Array Helpers


                        The following standard array helpers are supported on
                        the Stencil framework.


                        ### <a name="after"></a> {{after}}


                        Returns all of the items in an array after the specified
                        index. Opposite of [before](#before).


                        Given the array `['a', 'b', 'c']`:


                        #### Parameters


                        * `array` {Array}: Collection.

                        * `n` {Number}: Starting index (number of items to
                        exclude).

                        * `returns` {Array}: Array exluding `n` items.


                        #### Example


                        ```handlebars

                        {{after array 1}}

                        //=> '["c"]'

                        ```


                        ### {{arrayify}}


                        Casts the given `value` to an array.


                        #### Parameters


                        * `value` {any}

                        * `returns` {Array}


                        #### Example


                        ```handlebars

                        {{arrayify "foo"}}

                        //=> '["foo"]'

                        ```


                        ### <a name="before"></a> {{before}}


                        Returns all of the items in the collection before the
                        specified count. Opposite of [after](#after).


                        Given the array `['a', 'b', 'c']`:


                        #### Parameters


                        * `array` {Array}

                        * `n` {Number}

                        * `returns` {Array}: Array excluding items after the
                        given number.


                        #### Example


                        ```handlebars

                        {{before array 2}}

                        //=> '["a", "b"]'

                        ```


                        ### {{eachIndex}}


                        #### Parameters


                        * `array` {Array}

                        * `options` {Object}

                        * `returns` {String}


                        #### Example


                        ```handlebars

                        {{#eachIndex collection}}
                          {{item}} is {{index}}
                        {{/eachIndex}}

                        ```


                        ### {{filter}}


                        Block helper that filters the given array. Renders the
                        block for values that evaluate to `true`; otherwise,
                        returns the inverse block.


                        #### Parameters


                        * `array` {Array}

                        * `value` {any}

                        * `options` {Object}

                        * `returns` {String}


                        #### Example


                        ```handlebars

                        {{#filter array "foo"}}AAA{{else}}BBB{{/filter}}

                        //=> 'BBB

                        ```


                        ### <a name="first"></a> {{first}}


                        Returns the first item, or first `n` items, of an array.


                        #### Parameters


                        * `array` {Array}

                        * `n` {Number}: Number of items to return, starting at
                        `0`.

                        * `returns` {Array}


                        #### Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{first array 2}}

                        //=> '["a", "b"]'

                        ```


                        ### {{forEach}}


                        Iterates over each item in an array, and exposes the
                        current item in the array as context to the inner block.
                        In addition to the current array item, the helper
                        exposes the following variables to the inner block:


                        * `index`

                        * `total`

                        * `isFirst`

                        * `isLast`


                        Also, `@index` is exposed as a private variable, and
                        additional private variables may be defined as hash
                        arguments.


                        #### Parameters


                        * `array` {Array}

                        * `returns` {String}


                        #### Example


                        ```js

                        var accounts = [

                        {'name': 'John', 'email': 'john@example.com'},

                        {'name': 'Malcolm', 'email': 'malcolm@example.com'},

                        {'name': 'David', 'email': 'david@example.com'}

                        ];


                        // example usage

                        // {{#forEach accounts}}

                        //   <a href="mailto:{{ email }}" title="Send an email
                        to {{ name }}">

                        //     {{ name }}

                        //   </a>{{#unless isLast}}, {{/unless}}

                        // {{/forEach}}

                        ```


                        ### {{inArray}}


                        Block helper that renders the block if an array has the
                        given `value`. Optionally, you can specify an inverse
                        block to render when the array does not have the given
                        value.


                        #### Parameters


                        * `array` {Array}

                        * `value` {any}

                        * `options` {Object}

                        * `returns` {String}


                        #### Example


                        Given the array `['a', 'b', 'c']`:


                        ```handlebars

                        {{#inArray array "d"}}
                          foo
                        {{else}}
                          bar
                        {{/inArray}}

                        //=> 'bar'

                        ```


                        ### {{isArray}}


                        Returns true if `value` is an es5 array.


                        #### Parameters


                        * `value` {any}: The value to test.

                        * `returns` {Boolean}


                        #### Example


                        ```handlebars

                        {{isArray "abc"}}

                        //=> 'false'

                        ```


                        ### <a name="last"></a> {{last}}


                        Returns the last item, or last `n` items, of an array.
                        Opposite of [first](#first).


                        #### Parameters


                        * `array` {Array}

                        * `n` {Number}: Number of items to return, starting with
                        the last item.

                        * `returns` {Array}


                        #### Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{last array 2}}

                        //=> '["d", "e"]'

                        ```


                        ### {{lengthEqual}}


                        Block helper that compares the length of the given array
                        to the number passed as the second argument. If the
                        array length is equal to the given `length`, the block
                        is returned. Otherwise, you have the option of returning
                        an inverse block.


                        #### Parameters


                        * `array` {Array}

                        * `length` {Number}

                        * `options` {Object}

                        * `returns` {String}


                        #### Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{#lengthEqual array 10}}AAA{{else}}BBB{{/lengthEqual}}

                        //=> 'BBB'

                        ```


                        ### {{map}}


                        Returns a new array, created by calling `function` on
                        each element of the given `array`.


                        #### Parameters


                        * `array` {Array}

                        * `fn` {Function}

                        * `returns` {String}


                        #### Example


                        Given an array `['a', 'b', 'c']`:


                        ```js

                        // register `double` as a helper

                        function double(str) {
                          return str + str;
                        }

                        // then used like this:

                        // {{map array double}}

                        //=> '["aa", "bb", "cc"]'

                        ```


                        ### {{some}}


                        Block helper that returns the block *if* the callback
                        returns true for some value in the given array.


                        #### Parameters


                        * `array` {Array}

                        * `cb` {Function}: Callback function.

                        * {Options}: Handlebars-provided options object.

                        * `returns` {Array}


                        #### Example


                        Given the array `[1, 'b', 3]`:


                        ```handlebars

                        {{#some array isString}}
                          Render me if the array has a string.
                        {{else}}
                          Render me if it doesn't.
                        {{/some}}

                        //=> 'Render me if the array has a string.'

                        ```


                        ### {{sort}}


                        Sorts the given `array`. If an array of objects is
                        passed, you may optionally pass (as the second argument)
                        a `key` to sort on. Alternatively, you may pass a
                        sorting function as the second argument.


                        #### Parameters


                        * `array` {Array}: The array to sort.

                        * `key` {String|Function}: The object key to sort by, or
                        a sorting function.


                        #### Example


                        Given an array `['b', 'a', 'c']`:



                        ```handlebars

                        {{sort array}}

                        //=> '["a", "b", "c"]'

                        ```


                        ### {{sortBy}}


                        Sorts an `array`. If an array of objects is passed, you
                        may optionally pass a `key` to sort on as the second
                        argument. You may alternatively pass a sorting function
                        as the second argument.


                        #### Parameters


                        * `array` {Array}: The array to sort.

                        * `props` {String|Function}: One or more properties to
                        sort by, or sorting functions to use.


                        #### Example


                        Given an array `[{a: 'zzz'}, {a: 'aaa'}]`:


                        ```handlebars

                        {{sortBy array "a"}}

                        //=> '[{"a":"aaa"}, {"a":"zzz"}]'

                        ```


                        ### <a name="withAfter"></a> {{withAfter}}


                        Use the items in the array, _after_ the specified index,
                        as context inside a block. Opposite of
                        [withBefore](#withBefore).


                        #### Parameters


                        * `array` {Array}

                        * `idx` {Number}

                        * `options` {Object}

                        * `returns` {Array}


                        #### Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{#withAfter array 3}}
                          {{this}}
                        {{/withAfter}}

                        //=> "de"

                        ```


                        ### <a name="withBefore"></a> {{withBefore}}


                        Use the items in the array, _before_ the specified
                        index, as context inside a block. Opposite of
                        [withAfter](#withAfter).


                        #### Parameters


                        * `array` {Array}

                        * `idx` {Number}

                        * `options` {Object}

                        * `returns` {Array}


                        #### Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{#withBefore array 3}}
                          {{this}}
                        {{/withBefore}}

                        //=> 'ab'

                        ```


                        ### <a name="withFirst"></a> {{withFirst}}


                        Uses a collection's first item inside a Handlebars block
                        expression. Opposite of [withLast](#withLast).


                        #### Parameters


                        * `array` {Array}

                        * `idx` {Number}

                        * `options` {Object}

                        * `returns` {String}


                        #### Example


                        Given the array `['a', 'b', 'c']`:


                        ```handlebars

                        {{#withFirst array}}
                          {{this}}
                        {{/withFirst}}

                        //=> 'a'

                        ```
        - title: Stencil Object Model Reference
          route:
            path: /stencil-object-model-reference
          data:
            children:
              - title: Stencil Objects
                route:
                  path: /stencil-objects
                data:
                  children:
                    - title: Global Objects & Properties
                      route:
                        path: /global-objects
                      data:
                        children:
                          - title: Banners
                            route:
                              path: /banners
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description: </b>Elements of marketing
                                    banners at page’s top and/or bottom<br>


                                    <b>Handlebars Expressions:</b> <span
                                    class="inline-code">{{banner}}</span>, <span
                                    class="inline-code">{{{banner}}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">banners</td>
                                        <td class="">Blocks of static HTML content to define banners</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">top</span></td>
                                        <td class="">Array of HTML content/strings, for custom top-banner content; banners are populated from the BigCommerce control panel</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">bottom</span></td>
                                        <td class="">Array of HTML content/strings, for custom bottom-banner content; banners are populated from the BigCommerce control panel</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: Banner
                                  config: {}
                                - type: callout
                                  data:
                                    type: warning
                                    body: >-
                                      Where a banner contains HTML, the <span
                                      class="inline-code">banner</span> helper
                                      must be placed in triple braces, as in
                                      this 

                                      example: <span
                                      class="inline-code">{{{banner}}}</span>.
                                      (Double braces would escape the HTML.)
                                    title: Handlebars Formatting Exception
                          - title: Breadcrumbs
                            route:
                              path: /breadcrumbs
                            data:
                              children: []
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description:</b> Defines a page's
                                    breadcrumbs – available on virtually all
                                    pages that have a breadcrumb trail<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{breadcrumbs}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">name</td>
                                        <td class="">Displayed name of this breadcrumb element</td>
                                      </tr>
                                      <tr>
                                        <td class="">url</td>
                                        <td class="">URL of this breadcrumb element</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: Stencil-Bread-ref
                          - title: Categories
                            route:
                              path: /categories
                            data:
                              blocks:
                                - type: text
                                  data: >-
                                    <A NAME="Categories"></a>

                                    <b>Description:</b> A list of all product
                                    categories shown in the current page
                                    context; default sorting is by category id,
                                    from lowest to highest<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{categories}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">id</td>
                                        <td class="">ID of the top-level category listed</td>
                                      </tr>
                                      <tr>
                                        <td class="">name</td>
                                        <td class="">Name of the top-level category</td>
                                      </tr>
                                      <tr>
                                        <td class="">description</td>
                                        <td class="">Description of the top-level category (optional &ndash; when requested in front matter)</td>
                                      </tr>
                                      <tr>
                                        <td class="">url</td>
                                        <td class="">URL to the category page</td>
                                      </tr>
                                      <tr>
                                        <td class="">count</td>
                                        <td class="">Number of products in this category</td>
                                      </tr>
                                      <tr>
                                        <td class="">children</td>
                                        <td class="">List of child categories for this top-level category</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> id</span></td>
                                        <td class="">ID of the child category</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> name</span></td>
                                        <td class="">Name of the child category</td>
                                      </tr>
                                        <tr>
                                        <td class=""><span class="indent1"> description</span></td>
                                        <td class="">Description of the child category (optional &ndash; when requested in front matter)</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> url</span></td>
                                        <td class="">URL of the child category</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> count</span></td>
                                        <td class="">Number of products in this child category</td>
                                      </tr>
                                    </table>
                          - title: Currency Selector
                            route:
                              path: /new-subpage
                            data:
                              children: []
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description:</b> A list of all supported
                                    currencies, and the currency that is
                                    actively in use in the storefront<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{currency_selector}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">active_currency_id</td>
                                        <td class="">ID of the currency actively in use in the storefront</td>
                                      </tr>
                                      <tr>
                                        <td class="">active_currency_flag</td>
                                        <td class="">Country flag used to represent the active currency</td>
                                      </tr>
                                      <tr>
                                        <td class="">active_currency_name</td>
                                        <td class="">Name of the active currency</td>
                                      </tr>
                                      <tr>
                                        <td class="">active_currency_code</td>
                                        <td class="">Code for the active currency</td>
                                      </tr>
                                      <tr>
                                        <td class="">currencies</td>
                                        <td class="">List of all the currencies supported for this storefront</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> is_active</span></td>
                                        <td class="">Boolean that indicates whether this currency is active for use in the storefront</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> switch_url</span></td>
                                        <td class="">The URL to invoke a switch to this currency</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> id</span></td>
                                        <td class="">ID of the currency</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> name</span></td>
                                        <td class="">Name of the currency</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> flag</span></td>
                                        <td class="">Country flag used to visually represent the currency</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: CurrencySel
                          - title: Faceted Search
                            route:
                              path: /new-subpage-6
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <A NAME="FacSearch"></a>

                                    <b>Description: </b>Faceted-search object
                                    for searching globally, by category, or by
                                    brand<br>


                                    <b>Handlebars Expression</b><b>:</b> <span
                                    class="inline-code">{{faceted_search}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">facets</td>
                                        <td class="">List of all search facets available</td>
                                      </tr>
                                      <tr>
                                        <td class="">selected</td>
                                        <td class="">Container for the selected search facets</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">remove_all_url</span></td>
                                        <td class="">URL to remove all selected search restrictions</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">items</span></td>
                                        <td class="">Currently enabled search facets</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: FacetedSearch
                          - title: Featured Products
                            route:
                              path: /new-subpage-2
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description:</b> A list of all the
                                    featured products for the BigCommerce
                                    storefront<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{products.featured}}</span><br>


                                    <b>Object Properties:</b> References the <a
                                    href="/docs/common-product-card-model">product
                                    card model</a>.
                                  header:
                                    anchor: FeatProducts
                                - type: text
                                  data: >-
                                    <b> Usage Example: </b>


                                    From Stencil's base Cornerstone theme, the
                                    example below displays the global
                                    `{{products.featured}}` object on the
                                    `<theme-name>/templates/pages/home.html`
                                    page template.


                                    First, to declare the object, the following
                                    [front
                                    matter](/docs/using-yaml-front-matter) must
                                    be placed at the top of this template. This
                                    particular declaration also limits the
                                    number of featured products to be displayed:


                                    ```

                                    ---

                                    products:
                                        [...]
                                        featured:
                                            limit: {{theme_settings.homepage_featured_products_count}}
                                    ---

                                    ```

                                    The `homepage_featured_products_count` limit
                                    is one of two relevant variables defined in
                                    Cornerstone's
                                    [`config.json`&#160;file](/docs/configjson-reference),
                                    here:


                                    ```
                                      "settings": {
                                        [...]
                                        "homepage_featured_products_count": 8,
                                        [...]
                                        "homepage_featured_products_column_count": 4,
                                        [...]    
                                    ```


                                    In the body of the `home.html` template, the
                                    following Handlebars conditional statement
                                    displays the featured-products object
                                    declared above:


                                    ```
                                        {{#if products.featured}}
                                            {{> components/products/featured products=products.featured columns=theme_settings.homepage_featured_products_column_count}}
                                        {{/if}}
                                    ```


                                    This statement formats the featured-products
                                    display according to the
                                    `homepage_featured_products_column_count`
                                    variable, also defined in the `config.json`
                                    excerpt above.
                          - title: Footer
                            route:
                              path: /footer
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description: </b>The footer content for
                                    each storefront page<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{footer}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">sitemap_url</td>
                                        <td class="">The URL to the sitemap, based on store’s SEO setting</td>
                                      </tr>
                                      <tr>
                                        <td class="">scripts</td>
                                        <td class="">Scripts to be loaded after the HTML has loaded; includes performance metrics</td>
                                      </tr>
                                    </table>
                          - title: Home Slide Show
                            route:
                              path: /home-slide-show
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description:</b> A list of images, text,
                                    and style assets for a storefront’s image
                                    slide show<br>


                                    <b>Handlebars Expression: </b><span
                                    class="inline-code">{{carousel}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      
                                      <tr>
                                        <td class="">swap_frequency</td>
                                        <td class="">Indicates how often (in seconds) the slides will change; the value must be between 1 and 90,000 seconds</td>
                                      </tr>
                                      
                                      <tr>
                                        <td class="">slides</td>
                                        <td class="">Object containing properties for each slide in the slideshow</td>
                                      </tr>
                                      
                                      <tr>
                                        <td class=""><span class="indent1">image</span></td>
                                        <td class="">Path to the image file used on this slide</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">alt_text</span></td>
                                        <td class="">Alt text for the image</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">url</span></td>
                                        <td class="">URL to which the image will link</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">heading</span></td>
                                        <td class="">Heading message defined by the merchant</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">heading_color</span></td>
                                        <td class="">Color of the heading text</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">text</span></td>
                                        <td class="">Subheading defined by the merchant</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">text_color</span></td>
                                        <td class="">Color of the subheading text</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">button_text</span></td>
                                        <td class="">Text displayed on a call-to-action button defined by the merchant</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">button_text_color</span></td>
                                        <td class="">Color of the button</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: SlideShow
                          - title: HTML Head
                            route:
                              path: /html-head
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description: </b>Data to be included in
                                    the HTML &lt;head&gt; element<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{head}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">character_set</td>
                                        <td class="">The character set to specify</td>
                                      </tr>
                                      <tr>
                                        <td class="">meta_tags</td>
                                        <td class="">Meta tags to improve store SEO</td>
                                      </tr>
                                      <tr>
                                        <td class="">title</td>
                                        <td class="">Current page’s title</td>
                                      </tr>
                                      <tr>
                                        <td class="">stylesheets</td>
                                        <td class="">CSS files to be included</td>
                                      </tr>
                                      <tr>
                                        <td class="">scripts</td>
                                        <td class="">Scripts to be loaded in the &lt;head&gt; tag</td>
                                      </tr>
                                      <tr>
                                        <td class="">favicon</td>
                                        <td class="">The store’s favicon (Favorite icon)</td>
                                      </tr>
                                      <tr>
                                        <td class="">rsslinks</td>
                                        <td class="">RSS feeds to improve SEO</td>
                                      </tr>
                                      </tr>
                                    </table>
                          - title: Is_ajax
                            route:
                              path: /is-ajax
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description: </b>Boolean; returns true if
                                    the current executing request is an Ajax
                                    request<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{is_ajax}}</span><br>
                                  header:
                                    anchor: IsAjax
                          - title: Login
                            route:
                              path: /login
            blocks:
              - type: html
                data: >-
                  <a name="Stencil-Obj-ref"></a>The entries in this section list
                  and describe the objects<!--, custom operators, and data
                  resources--> and properties that you can access
                  programmatically via Handlebars expressions:


                  <ul>
                    <!-- <li><a href="/docs/custom-handlebars-helpers">Stencil Custom Handlebars Helpers</a></li> -->
                   <li><a href="/stencil-object-model-reference/global-objects">Global Objects (subsection)</a></li>
                   <li><a href="/stencil-object-model-reference/common-object-formats">Common Objects</a></li>
                   <li><a href="/stencil-object-model-reference/product-resources">Product Objects</a></li>
                   <li><a href="/stencil-object-model-reference/category-resources">Category Objects</a></li>
                   <li><a href="/stencil-object-model-reference/brand-resources">Brand Objects</a></li>
                   <li><a href="/stencil-object-model-reference/cart-resources">Cart Objects</a></li>
                   <li><a href="/stencil-object-model-reference/customer-resources">Customer Objects</a></li>
                   <li><a href="/stencil-object-model-reference/blog-resources">Blog Objects</a></li>
                   <li><a href="/stencil-object-model-reference/forms-resources">Forms Objects</a></li>
                  </ul>
      blocks:
        - type: html
          data: >-
            <h1>Welcome to the BigCommerce Stencil Developer Documentation.</h1>


            <p>Stencil is a new approach to theme and front-end development on
            the BigCommerce platform. This theming engine allows you to create
            beautiful, dynamic, and powerful storefronts.</p>


            <table style="border:none">
              <tbody>
                <tr></tr>
                <tr>
                  <td class="" style="border: none"><img src="https://files.readme.io/1f2a9bb-Thumbnails-composed-3-vars-298w-x-184h1-26-16.png" alt="A Stencil Theme" height="195" width="375">
                    
                  <td class="" style="border: 0"><br><br>You can offer merchants multiple variations on each theme. You can also provide options for merchants to customize their storefront's look and feel, with no coding.</td>
                </tr>
              </tbody>
            </table>



            <h2>Stencil Framework and Components</h2>


            <p>Stencil provides certain key components for both theme developers
            and merchants. These are summarized in this diagram, and are fully
            described in the remainder of this documentation.</p>


            <img class="center-photo"
            src="https://files.readme.io/azmVqA3SnGgoYhit3udw_Stencil-Func-Diag3~912x600.png"
            height="450" width="684">


            <br><br>

            <p>

            These key components are:

            <ul>
              <li><b>Stencil Framework (Stencil CLI)<!--and Developer Toolkit-->:</b> The Stencil CLI framework enables developers to design and iterate themes locally, with full access to all assets – but with no impact on the merchant's live storefront.</li><br>
              <li><b>Theme Marketplaces:</b> Third-party marketplaces like ThemeForest enable developers to distribute themes to multiple merchants.</li><br>
              <li><b>Theme Editor:</b> This graphical, browser-based tool enables merchants to rapidly customize their themes' look and feel – and their storefront's function – with no coding. Theme developers' configuration choices determine which theme aspects merchants can customize, with what range of choices.)</li><br>
              <li><b>Storefront:</b> Merchants acquire themes, apply them to their storefronts, and customize them – creating an elegant user experience that resonates with their brand, and makes it easy for customers to find and purchase the products they want.</li>
            </ul>

            </p>
          config: {}
