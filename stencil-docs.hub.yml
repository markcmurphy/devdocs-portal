{
  "title": "Dev Center",
  "header": {
    "nav": {
      "left": [
        {
          "title": "API Docs",
          "path": "/api-docs"
        },
        {
          "title": "Stencil Docs",
          "path": "/stencil-docs"
        },
        {
          "title": "Tools & Resources",
          "path": ""
        },
        {
          "title": "Changelog",
          "path": "/changelog"
        }
      ],
      "right": [
        {
          "title": "My Apps",
          "path": "https://devtools.bigcommerce.com"
        },
        {
          "title": "Create Account",
          "path": "https://login.bigcommerce.com/signup"
        }
      ]
    }
  },
  "pages": {
    "/": {
      "title": "Developer Documentation",
      "data": {
        "$ref": "./Home.html"
      }
    },
    "/stencil-docs": {
      "title": "Stencil Docs",
      "data": {
        "children": [
          {
            "title": "Getting Started",
            "route": {
              "path": "/getting-started"
            },
            "data": {
              "children": [
                {
                  "title": "Transitioning to Stencil",
                  "route": {
                    "path": "/transitionining-to-stencil"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "text",
                        "data": "# Transitioning to Stencil"
                      },
                      {
                        "type": "text",
                        "data": "Are you approaching Stencil from a different theming framework, like BigCommerce's legacy Blueprint framework? Are you moving to the Stencil templating environment from pure HTML and CSS-based design?\n\nUse this article to identify your ideal method for Stencil theme development and learn Stencil's conventions. It will cover the following information:\n\n* Choosing a Development Path\n* Front-Matter Quick Start\n* Handlebars Quick Start\n* SEO Tips/Best Practices\n* Blueprint-to-Stencil Features Map\n* Interacting with the BigCommerce API\n* Partnering with BigCommerce\n* Next Steps"
                      },
                      {
                        "type": "text",
                        "data": "## Choosing a Development Path\n\nYou have four options for developing Stencil themes (options are *not* mutually exclusive):\n\n* Find a Design & Solutions Partner\n* Light Customization using the Theme Editor\n* Light Customization using HTML and CSS\n* Adapting a Stencil Theme or Developing from Scratch"
                      },
                      {
                        "type": "text",
                        "data": "###  Find a Design & Solutions Partner\n\nIf you prefer to have an expert collaborator customize your theme, we recommend working with one of our certified BigCommerce Design & Solutions Partners. Reference the following resources to do so:\n\n* [Partner Directory](https://partners.bigcommerce.com/directory/search?i=75)\n* [Working with a Design Partner](https://support.bigcommerce.com/articles/Learning/Working-with-a-Design-Partner) (Support Guide)"
                      },
                      {
                        "type": "text",
                        "data": "### Light Customization – Graphical Theme Editor\n\nStencil can be customized without the use of any specialized development tools or techniques by using of the Stencil Theme Editor. The Stencil Theme Editor still enables customization of a theme's colors, typography, banners, headings, carousel, and footer. It also enables customization of broader layout characteristics, such as the number of products displayed in various panels, category pages, and brand pages.\n\nFor details, please see:\n\n* [Theme Editor](https://support.bigcommerce.com/articles/Public/Using-the-Stencil-Theme-Editor/) (Support article)\n* [Stencil and the BigCommerce Control Panel](https://www.youtube.com/watch?v=d2F6F8LJXzs&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0&index=2) (Video introduction to Theme Editor)\n* [Changing Your Store's Theme](https://support.bigcommerce.com/articles/Learning/What-to-Consider-When-Changing-Your-Theme) (Support guide)\n* [Personalizing Your Theme](https://support.bigcommerce.com/articles/Learning/Personalizing-your-New-Theme) (Support guide)"
                      },
                      {
                        "type": "text",
                        "data": "### Light Customization – HTML/CSS\n\nIf you are most comfortable working in HTML and CSS, Stencil's *Edit Theme Files* feature allows you to directly edit most of your theme's files. For details, please see:\n\n* [Edit Theme Files](https://support.bigcommerce.com/articles/Public/Editing-Stencil-Theme-Files) (Support article)\n* [Edit Theme Files](https://www.youtube.com/watch?v=waJ1dg_dAh8&index=11&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0) (Video overview of copying and editing a theme's files)"
                      },
                      {
                        "type": "text",
                        "data": "### Adapt a Stencil Theme, or Develop from Scratch\n\nFor complete control over a theme's appearance and logic – including the ability to edit _all_ theme configuration files – you will want to use the Stencil CLI (command-line interface) framework. Stencil CLI is described in detail in the remainder of this documentation. \n\nTo get up to speed on Stencil&#160;CLI's templating conventions, please see the Quick Start sections just below. Also see:\n\n* [Getting Started with the Stencil Framework](https://www.youtube.com/playlist?list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0) (Videos)"
                      },
                      {
                        "type": "text",
                        "data": "## Front-Matter Quick Start\n\nStencil templates start with a section of \"front matter\" where you can and concisely customize each page's design and layout details. \n\nThis front-matter section uses conventions from YAML, a simple, widely used markup language. If you haven't used these conventions before, refer to our [Front-Matter Overview](https://stencil.bigcommerce.com/docs/using-yaml-front-matter).\n\n\n"
                      },
                      {
                        "type": "text",
                        "data": "## Handlebars Quick Start\n\nStencil uses Handlebars.js to assemble dynamic content into the storefront pages that are displayed to shoppers. The dynamic content can be drawn from a few sources, like the store's catalog.\n\nHandlebars' syntax is quite simple, and it allows you to accomplish powerful JavaScript operations with minimal JavaScript code. To learn more about Handlebars.js, see these third-party tutorials: \n\n* [Learn Handlebars in 10 Minutes or Less](http://tutorialzine.com/2015/01/learn-handlebars-in-10-minutes/)\n* [A Beginner’s Guide to Handlebars](https://www.sitepoint.com/a-beginners-guide-to-handlebars/)\n* [Getting Started with Handlebars.js](http://blog.teamtreehouse.com/getting-started-with-handlebars-js)\n* [Handlebars interactive tutorial](http://tryhandlebarsjs.com/)\n"
                      },
                      {
                        "type": "text",
                        "data": "## SEO Tips/Best Practices\n\nSearch-engine optimization (SEO) helps translate an elegant theme into a successful, high-conversion storefront. Because so many shoppers reach online stores through a search engine, a search-optimized site will be more visible – attracting more traffic. \n\nThe Stencil framework is [designed for high SEO performance](https://www.bigcommerce.com/improve-organic-traffic/). However, you will want to keep SEO in mind as you build out each theme and storefront. For guidelines, please see these BigCommerce support articles (which are a series of intermediate to advanced chapters in our Guide to SEO):\n\n* [SEO Do's and Don'ts](https://support.bigcommerce.com/articles/Learning/Things-to-Know/)\n* [Developing a Keyword Strategy](https://support.bigcommerce.com/articles/Learning/Developing-a-Keyword-Strategy/)\n* [SEO Success Essentials](https://support.bigcommerce.com/articles/Learning/Bigcommerce-SEO-Success-Essentials/)\n* [Advanced SEO on BigCommerce](https://support.bigcommerce.com/articles/Learning/Advanced-SEO-on-Bigcommerce/)\n\nAlso checkout our [Guide to Keyword Research](https://support.bigcommerce.com/articles/Learning/Value-of-Keywords/).\n\n\n"
                      },
                      {
                        "type": "text",
                        "data": "## Blueprint-to-Stencil Features Map \n\nThis following resources are designed to help you identify the Stencil counterparts to familiar Blueprint components.\n\n* What to Consider When Changing Your Theme (Support article)\n* Stencil and the BigCommerce Control Panel (Video tour of Blueprint-to-Stencil  changes in the BigCommerce control panel)"
                      }
                    ]
                  }
                },
                {
                  "title": "Supported Browsers",
                  "route": {
                    "path": "/supported-browsers"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "text",
                        "data": "# Supported Browsers"
                      },
                      {
                        "type": "text",
                        "data": "The following browsers are supported for BigCommerce storefronts that use Stencil-based themes. The browsers are sorted by popularity, beginning with the most popular browsers. Please ensure that your theme functions properly with all supported browsers.\n\n### Desktop Browsers\n\n* Google Chrome (latest edition)\n* Firefox (latest edition)\n* Internet Explorer 10 and 11\n* Safari (latest edition)\n* Microsoft Edge (latest edition)\n\n## Mobile Browsers \n\n* Android Chrome browser (latest edition)\n* iOS Safari browser (latest edition)"
                      },
                      {
                        "type": "callout",
                        "data": {
                          "type": "warning",
                          "body": "Browser support will cease to be offered if browser usage falls below 2%.",
                          "title": "Usage Support"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Installation and Launch",
                  "route": {
                    "path": "/installation-and-launch"
                  },
                  "data": {
                    "children": [
                      {
                        "title": "Mac OS Prerequisites",
                        "route": {
                          "path": "/mac-os-prerequisites"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "text",
                              "data": "# Mac OS Prerequisites"
                            },
                            {
                              "type": "callout",
                              "data": {
                                "title": "Platform Support",
                                "body": "These instructions have been tested on Mac OS X Yosemite. Dependencies for other platforms will be added upon further testing."
                              }
                            },
                            {
                              "type": "text",
                              "data": "<span id=\"Prerequisites\">To smoothly set up Stencil on Mac OS, please first verify the requirements listed here: </span>\n\n* [Xcode](#xcode)\n* [Node.js](#Node+npm_Mac)\n* [Next Steps](#next)"
                            },
                            {
                              "type": "text",
                              "data": "## <span id=\"xcode\"> Xcode </span>\n\nYou must install the <a href=\"https://developer.apple.com/xcode/download/\">Xcode</a> development tools (latest stable version)."
                            },
                            {
                              "type": "text",
                              "data": "## <span id=\"Node+npm_Mac\"> Node.js </span>\n\nStencil requires the <a href=\"https://nodejs.org/\">Node.js</a> runtime environment, version <a href=\"https://nodejs.org/en/blog/release/\">6.x or later</a>. We have tested Stencil on selected Node.js versions, from <a href=\"https://nodejs.org/en/blog/release/v6.10.3/\">6.10.3</a> to <a href=\"https://nodejs.org/en/blog/release/v7.9.0/\">7.9.0</a>. \n\nWe recommend that you install or update Node.js using <a href=\"https://github.com/creationix/nvm#installation\">nvm</a>. First install nvm, version <a href=\"https://github.com/creationix/nvm/tree/v0.31.0\">0.31.0</a>, as follows:\n\n```\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash\n```\n\nNext, explicitly install a supported Node.js version, using this convention:<br>\n\n```\nnvm install 6.4.0\n```"
                            },
                            {
                              "type": "callout",
                              "data": {
                                "title": "Notes on Dependencies",
                                "body": "You can choose to instead download the latest x.x version of Node.js from the Node.js Foundation's archives, using URLs of the form: https://nodejs.org/dist/latest-v6.x/, https://nodejs.org/dist/latest-v7.x/, etc. In all cases, we recommend installing only LTS (\"Long-Term Support\"/\"Mature and Dependable\") versions.\n\nWhile alternate versions might also support Stencil, BigCommerce does not offer technical assistance on substitutions for, or customized versions of, the tested dependencies listed here."
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Troubleshooting\n\nIf you run into any problems with Stencil installation or launch, first consult Troubleshooting Your Setup. \n\nIf that does not resolve your issue, consult our Support resources, which include community/peer support via BigCommerce and Stack Overflow forums.\n\n"
                            },
                            {
                              "type": "text",
                              "data": "## <span id=\"next\" > Next Steps </span>\n\nNavigate to Installing Stencil CLI tothe Stencil framework."
                            }
                          ]
                        }
                      },
                      {
                        "title": "Linux Prerequisities",
                        "route": {
                          "path": "/linux-prerequisites"
                        },
                        "data": {}
                      },
                      {
                        "title": "Windows Prerequisites ",
                        "route": {
                          "path": "/windows-prerequisites"
                        },
                        "data": {}
                      },
                      {
                        "title": "Installing Stencil CLI/Framework",
                        "route": {
                          "path": "/new-page-sjfek"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "text",
                              "data": "## Video Demonstrations\nWatch Stencil senior developer Mick Ryan's brief demonstration of Stencil installation and launch:\n"
                            }
                          ]
                        }
                      },
                      {
                        "title": "Adding a Base Theme",
                        "route": {
                          "path": "/adding-a-base-theme"
                        },
                        "data": {}
                      },
                      {
                        "title": "Installing Javascript",
                        "route": {
                          "path": "/new-subpage"
                        },
                        "data": {}
                      }
                    ]
                  }
                },
                {
                  "title": "Authentication",
                  "route": {
                    "path": "/authentication"
                  },
                  "data": {
                    "children": [
                      {
                        "title": "Creating an API Account",
                        "route": {
                          "path": "/creating-an-api-account"
                        },
                        "data": {}
                      },
                      {
                        "title": "Issuing Additional Tokens",
                        "route": {
                          "path": "/issuing-additional-tokens"
                        },
                        "data": {}
                      },
                      {
                        "title": "Revoking Tokens",
                        "route": {
                          "path": "/revoking-tokens"
                        },
                        "data": {}
                      },
                      {
                        "title": "Copying a Token to Initialize Stencil",
                        "route": {
                          "path": "/copying-a-token-to-initializ"
                        },
                        "data": {}
                      },
                      {
                        "title": "Launching Stencil",
                        "route": {
                          "path": "/launching-stencil"
                        },
                        "data": {}
                      }
                    ]
                  }
                },
                {
                  "title": "Authorizing and Initializing Stencil",
                  "route": {
                    "path": "/authorizing-and-initializing-stencil"
                  },
                  "data": {
                    "children": [
                      {
                        "title": "Running Stencil Locally",
                        "route": {
                          "path": "/new-subpage-4"
                        },
                        "data": {}
                      },
                      {
                        "title": "Troubleshooting Your Setup",
                        "route": {
                          "path": "/troubleshooting-your-setup"
                        },
                        "data": {}
                      },
                      {
                        "title": "Uninstalling/Reinstalling Stencil and Its Node Prerequisites",
                        "route": {
                          "path": "/new-subpage-2"
                        },
                        "data": {}
                      },
                      {
                        "title": "Stencil CLI Options and Commands",
                        "route": {
                          "path": "/stencil-cli-options-and-commands"
                        },
                        "data": {}
                      },
                      {
                        "title": "Stencil Theme's Path Anatomy",
                        "route": {
                          "path": "/stencil-themes-path-anatomy"
                        },
                        "data": {}
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Advanced Installation Options",
            "route": {
              "path": "/advanced-installation-options"
            },
            "data": {
              "blocks": [
                {
                  "type": "text",
                  "data": ""
                }
              ],
              "children": [
                {
                  "title": "Stencil Setup, Illustrated",
                  "route": {
                    "path": "/stencil-setup"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "text",
                        "data": "The diagram below looks complex because it shows _all_ currently supported workflows for setting up Stencil. However, for a typical initial setup – incorporating the default Cornerstone reference theme – you would just follow the black arrows straight down from top to bottom.\n\nHere are the color codes for each setup scenario, with links to details about individual steps:\n\n* Black: Basic initial setup, relying on default Cornerstone theme. \n* Purple: Customize a theme downloaded from Theme Marketplace (_other than_ Cornerstone). \n* Orange: Refresh Cornerstone from Theme Marketplace. \n* Green: Configure a custom JavaScript build system, to avoid dependence on Webpack and jspm.\n* Blue: Adds onto any of the preceding four scenarios. If developing for a BigCommerce Blueprint production store launched before Jan. 26, 2016, you must add one extra step to enable Stencil in the store's control panel."
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1532113466661"
                      }
                    ]
                  }
                },
                {
                  "title": "Navigating Your Setup Scenario",
                  "route": {
                    "path": "/navigating-your-setup-scenario"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "text",
                        "data": "# Navigating Your Setup Scenario\n\n//information that doesn't need to be indexed\n\nBelow, each heading identifies one theme-development scenario and lists the minimum installation steps you will need to support that scenario:\n\n* Initial Cornerstone-Based Setup\n* Cornerstone (or Diamond/Queen) Refresh\n* Downloaded Marketplace Theme\n* Custom Build System\n* Blueprint Store Launched before 1/26/2016"
                      },
                      {
                        "type": "callout",
                        "data": {
                          "type": "warning",
                          "title": "Notes",
                          "body": "* Some steps are optional for some theme-development workflows. See below to identify the recommended installation pathway for your own scenario. \n\n* After successful framework installation (or reinstallation), all scenarios will link you to the Preparing Your Store/Tokens Launching Stencil subsections, to launch your theme locally against a BigCommerce storefront.\n\n* Our installation instructions have been tested on Mac OS X Yosemite, Linux/Ubuntu v.14.04.4, and Windows. Dependencies for other platforms/releases will be added upon further testing.\n\n* If you encounter any problems, please see the Troubleshooting entry."
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Initial Cornerstone-Based Setup \n\nStart developing based on BigCommerce's default Cornerstone theme. This is a streamlined workflow, using Webpack as its JavaScript build system. Steps required:\n\n* Install all prerequisites\n* Install Stencil CLI\n* Clone default Cornerstone theme\n* Install JavaScript utilities with npm\n* Prepare Store and Tokens\n* Proceed to Launching Stencil"
                      },
                      {
                        "type": "text",
                        "data": "## Cornerstone Refresh \n\nDownload and install a new version of Cornerstone from BigCommerce's Theme Marketplace. Steps required:\n\n* Assume all prerequisites installed and Stencil CLI installed\n* Download fresh Cornerstone .zip\n* Reinstall JavaScript utilities with npm\n* Repeat Launching Stencil"
                      },
                      {
                        "type": "text",
                        "data": "## Downloaded Marketplace Theme \n\nCustomize a theme (_other than_ Cornerstone, Diamond, or Queen) downloaded from BigCommerce's Theme Marketplace. This workflow requires BitBucket, and some earlier theme versions require additional steps for the jspm JavaScript build system. Steps required:\n\n* Install all prerequisites\n* Install Stencil CLI\n* Set up BitBucket, download .zip, and install JavaScript dependencies\n* Install JavaScript utilities with npm\n* Prepare Store and Tokens\n* Proceed to Launching Stencil"
                      },
                      {
                        "type": "text",
                        "data": "## Custom JavaScript Build System \n\nBypass Webpack (and jspm) by substituting a custom JavaScript build system. Steps recommended:\n\n* Install all prerequisites\n* Install Stencil CLI\n* Clone default Cornerstone theme\n* Install JavaScript utilities with npm\n* Configure your custom build system\n* Prepare Store and Tokensstore-tokens)\n* Proceed to Launching Stencil"
                      },
                      {
                        "type": "text",
                        "data": "## Blueprint Store Launched before 1/26/2016 \n\nEnable Stencil development on a BigCommerce production store that was launched with a Blueprint theme before Jan. 26, 2016. Steps required:\n\n  * Follow the installation path above that corresponds to your development scenario.\n  * As a separate (and simple) procedure, enable Stencil in the store's control panel."
                      }
                    ]
                  }
                },
                {
                  "title": "Downloading a Refreshed Copy of Cornerstone",
                  "route": {
                    "path": "/downloading-a-refreshed-copy-of-cornerstone"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "callout",
                        "data": {
                          "body": "The steps below are required only if you are downloading a refreshed copy of Stencil's default Cornerstone theme, from the BigCommerce Theme Marketplace.\n\nIf you are downloading a different Marketplace theme for customization, you must instead use the workflow outlined at Downloading and Customizing Marketplace Themes.\n\n(Cornerstone, Diamond, and Queen use a simplified workflow that bypasses BitBucket requirements, and that replaces jspm with the Webpack build system. You can configure Webpack's watched folders, or substitute your own build system. For details, please see Webpack and Build-System Options)\n\nTo keep any _custom or customized theme updated with the new features that BigCommerce adds to Cornerstone, please see our guidelines on Theme Updates and Version Control.",
                          "title": "Optional Workflow"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "type": "error",
                          "title": "Back Up Before Reinstalling",
                          "body": "If you are reinstalling over a base theme on which you have already begun development, first back up at least your theme's .stencil file. This file contains your store URL, your BigCommerce username and access tokens, and other basic settings. Preserving those settings will speed up initializing and launching the new version.\n\nTo allow complete rollback, back up your whole theme-name directory. (In a current default installation, this directory is named.../cornerstone/. Prior to March 2017, this directory's name defaulted to .../stencil/."
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Downloading the Cornerstone .zip \n\nUse these steps to download a refreshed version of the Cornerstone, Diamond, or Queen theme from the store control panel's Storefront area: \n\n* If you have not yet added Cornerstone (or Diamond/Queen) to your store, start at Themes Marketplace and add the theme.\n    \nGo to Storefront -> My Themes.\n\nUnpack the zipped theme to a working directory.\n\n(This can be the directory where you have been developing your theme, or a new directory.)\n\nReinstalling Dependencies and Relaunching \n\nEnsure that your theme includes all current dependencies, by repeating JavaScript Utilitiesinstallation.\n  \nRepeat the steps listed in the Launching Stencil subsection\n\nNext, ensure that your theme includes all current dependencies by re-running npm, as follows:\n\nNavigate to your theme directory. This example assumes that this target directory has the default name stencil\n\n`cd stencil`\n\n`npm install`\n\nYou are now ready to resume development of your theme. Please proceed to Launching Stencil\n\nLater, when you are ready to upload your customized theme to a store, you should follow the zipping and uploading instructions in Bundling and Submitting a Theme and Troubleshooting Theme Uploads."
                      }
                    ]
                  }
                },
                {
                  "title": "Theme Updates and Version Control",
                  "route": {
                    "path": "/theme-updates-and-version-control"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "text",
                        "data": "# Theme Updates and Version Control"
                      },
                      {
                        "type": "text",
                        "data": "This page offers version-control best practices for:\n* Isolating Customizations for Easier Updates\n* Synchronizing with Cornerstone Theme Updates\n* Synchronizing Updates for Multiple Themes\n\nEach section progresses from simpler to more-complex scenarios."
                      },
                      {
                        "type": "callout",
                        "data": {
                          "title": "Distributed Version Control via Git",
                          "body": "Many techniques discussed below rely on GitHub's _distributed version control_ model and features. For the underlying principles, please see [Git's own documentation](https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control)."
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Isolating Customizations for Easier Updates\n\nHow best to set up your customized Stencil theme to smoothly incorporate future updates in its base theme? We're gratefully sharing these guidelines from Ken Utting, Web Developer for BigCommerce client [goruck.com](https://www.goruck.com/). His scenario (slightly edited here) addresses maintaining a single custom theme that is based on a third-party Marketplace theme. But&#160;these guidelines also apply to maintaining one, or multiple, themes based on Stencil's default Cornerstone theme."
                      },
                      {
                        "type": "text",
                        "data": "## Best Practices for Handling Theme Updates\n\nWe've made significant changes to our theme, and one principle that I've found successful is isolating my changes as much as possible. I try to put my changes into their own files, whether they're changes to templates, JavaScript, or SCSS. \n\nI also name all my files, CSS classes and identifiers, and JavaScript methods and classes with a `gr-` prefix (as an abbreviation for our company, GORUCK LLC). Also, any changes I make to standard theme files are identified with a comment, such as: \n\n`Go Ruck Customization`\n\t\t\nFor example, I have a file in `assets/scss/` named `gr-theme.scss`. All of the styles I've added to the theme are either in this file, or imported by this file. So for styling, my only changes to the theme itself are in a handful of places where I had to change an existing theme style (identified with a comment), plus this one line in `templates/layout/base.html`:\n\n`{{{stylesheet '/assets/css/gr-theme.css'}}}`\n\nI've found that this approach provides several advantages: \n\n* It makes it easier to distinguish my custom code from code supplied by the default theme.\n* It makes it less likely that my code will get intermingled with the standard theme code. This, in turn, prevents my code from unexpectedly being affected by theme updates.\n* It makes it easier to merge base-theme updates into my theme code.\n\n##### Comparing and Merging Apples to Apples\n\nHaving isolated my changes as much as I can, I identify theme changes by comparing stock (base) themes, rather than by comparing base themes to my customized theme. When a new version of the theme is released, I download the .zip file from the BigCommerce control panel. \n\nI then use a desktop diff tool (Beyond Compare) to \ncompare the new version to the .zip file of the theme's previous release. I ignore changes in the .zip file's\n `meta/` and `parsed/` folders, and to its `manifest.json`, and do a `Compare Contents` on the rest of the files.\n\nUltimately, I need to examine the changes carefully, to identify any changes that might affect, or be affected by, my customizations. And I need to test thoroughly. But comparing the stock themes to each other reduces the number of changes I have to examine. \n\nAlso, because I isolate my changes, most of the theme changes can be copied directly into the corresponding file in my customized theme. In practice, this means that I can limit my testing to the areas affected by changes in the standard theme, rather than having to re-test all my own changes.\n\nI personally find that it is also helpful to migrate *every* theme update into my customized version, as the update is released. If I were to wait, and to allow changes to accumulate and become more substantial, I think it would be more difficult to adequately test – and correctly integrate – the changes. Similarly, I'm grateful to the developer of our base theme (Pixel Union) for updates that have always made small, incremental changes.\n\n##### Dynamic Content Injection\n\nFinally, we've also come up with a variety of techniques for dynamically placing content on a page. For example, we can dynamically add tabs to a product page, using content stored on our WebDAV. Similarly, we can inject content from an external file into the body of a page. This allows us to put something that appears in many places, like a sizing chart, in a single place where it can be easily updated. \n\nOr, we can use the BigCommerce control panel's various HTML editors – for Products, Categories, and Content > Web Pages – to inject content into predefined \"dropzones\" (custom div's). This allows us to generate a wide variety of content pages using a single custom template.\n\nAll of these techniques move content out of the theme, minimizing the complexity of merging base-theme updates into our customized theme. For details on how we use them, please see Dynamic Content Rendering on Stencil Storefronts."
                      }
                    ]
                  }
                },
                {
                  "title": "Configuring Webpack or a Custom Build System",
                  "route": {
                    "path": "/configuring-webpack"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "text",
                        "data": "# Configuring Webpack or a Custom Build System"
                      },
                      {
                        "type": "text",
                        "data": "## Webpack, jspm, or Other JavaScript Managers\n\nStencil themes are Node.js applications, and therefore contain dependencies on other JavaScript libraries. For Stencil's default Cornerstone theme, we provide the [Webpack](https://webpack.github.io/docs/) build manager to handle these dependencies. \n\nAs you develop a theme based on Cornerstone, you have options to reconfigure Webpack's watched folders, and to even substitute a different build system. These options are explained below.\n\nAll themes currently in the BigCommerce Theme Marketplace use Webpack. However, older versions of certain themes used the jspm JavaScript dependency manager instead of Webpack. Please see this page to determine (by version number) whether you are developing based on one of these earlier versions, and to find the required jspm setup procedures."
                      },
                      {
                        "type": "callout",
                        "data": {
                          "type": "warning",
                          "body": "BigCommerce does not offer technical assistance on substitutions for the default dependencies listed in this documentation.",
                          "title": "Limited Support"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Webpack-Specific Configuration\n\nThe following Webpack configuration options can aid in troubleshooting.\n\n### More-Verbose JavaScript Diagnostics\n\nIf JavaScript errors in your browser's developer tools are not reporting filenames and line numbers, try changing your `webpack.conf.js` file's [sourcemap](https://webpack.js.org/guides/build-performance/#devtool) entry from:\n\n```\ndevtool: 'source-map'\n```\nto:\n\n```\ndevtool: 'eval-source-map'\n```\n\nThe `eval-source-map` option is slower, but more verbose. This [Webpack Devtool Configuration](https://webpack.js.org/configuration/devtool/) article provides an overview of all devtool options and details regarding each.\n\n\n## Build-System Configuration File\n\nTo take advantage of automatic JavaScript bundling and browser refresh, Stencil themes require the [`stencil.conf.js`](https://github.com/bigcommerce/cornerstone/blob/master/stencil.conf.js) file. To enable a custom build system, you would need to edit this file.\n\nWithin `stencil.conf.js`, Stencil CLI looks for the exported `watchOptions` object, and `development` and `production` callbacks, shown below. \n\nLet's take a closer look at each of these three references.\n\n## Watched Folders: watchOptions Object\n\nThe `watchOptions` object defines directories for the [Browsersync](https://browsersync.io/docs) preview engine to watch or ignore, in two respective lists. You are free to edit these lists:\n\n```\n/**\n * Watch options for the core watcher\n * @type {{files: string[], ignored: string[]}}\n */\nvar watchOptions = {\n    // If files in these directories change, reload the page.\n    files: [\n        '/templates',\n        '/lang'\n    ],\n\n    //Do not watch files in these directories\n     ignored: [\n        '/assets/scss',\n        '/assets/less',\n        '/assets/css',\n        '/assets/dist',\n    ]\n};\n```\n\n## JavaScript Rebundling: development Function\n\nUpon the command-line instruction `stencil start`, Stencil CLI will look for and call the `development` function. \n\nIn the base Cornerstone theme, we have created a Webpack watcher to trigger a browser reload whenever theme edits cause JavaScript to be rebundled to the theme's `bundle.js` file. This watcher uses options configured in the webpack.conf.js file passed by `webpackConfig`. So a JavaScript rebuild will refresh the browser:\n\n```\nfunction development() {\n    webpack(webpackConfig).watch({}, err => {\n        if (err) {\n            console.error(err.message, err.details);\n        }\n\n        process.send('reload');\n    });\n}\n```\n\n## Theme Packaging: production Function \n\nWhen you issue the command-line instruction `stencil bundle`, to process and package a completed theme for upload to a store, Stencil CLI will look for and call the `production` function. This function passes a callback as its first argument, to support asynchronous builds. \n\nThe callback must be invoked somewhere inside the `production` function, to notify Stencil CLI that the theme-specific build has completed and is ready to package:\n\n```\nfunction production() {\n    webpackConfig.watch = false;\n    webpackConfig.devtool = false;\n    webpackConfig.plugins.push(new webpack.LoaderOptionsPlugin({\n        minimize: true,\n    }));\n    webpackConfig.plugins.push(new webpack.optimize.UglifyJsPlugin({\n        comments: false,\n        compress: {\n            warnings: true,\n        },\n        sourceMap: false, // Toggle to turn on source maps.\n    }));\n\n    webpack(webpackConfig).run(err => {\n        if (err) {\n            console.error(err.message, err.details);\n            throw err;\n        }\n\n        process.send('done');\n    });\n}\n\nif (process.send) {\n    // running as a forked worker\n    process.on('message', message => {\n        if (message === 'development') {\n            development();\n        }\n\n        if (message === 'production') {\n            production();\n        }\n    });\n\n    process.send('ready');\n}\n```"
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Development Quickstart",
            "route": {
              "path": "/new-page-hyafc"
            },
            "data": {
              "children": [
                {
                  "title": "Creating a New Theme",
                  "route": {
                    "path": "/new-subpage-4"
                  },
                  "data": {}
                },
                {
                  "title": "Making Basic Design and Layout Changes",
                  "route": {
                    "path": "/new-subpage-3"
                  },
                  "data": {}
                },
                {
                  "title": "config.json-resource Interactions",
                  "route": {
                    "path": "/new-subpage-2"
                  },
                  "data": {}
                },
                {
                  "title": "Customizing Javascript",
                  "route": {
                    "path": "/new-subpage-1"
                  },
                  "data": {}
                },
                {
                  "title": "Remdering HTML with Ajax",
                  "route": {
                    "path": "/new-subpage"
                  },
                  "data": {}
                },
                {
                  "title": "Testing and Debugging Your Theme",
                  "route": {
                    "path": "/new-subpage"
                  },
                  "data": {}
                },
                {
                  "title": "Managing Theme Variations",
                  "route": {
                    "path": "/new-subpage"
                  },
                  "data": {}
                }
              ]
            }
          },
          {
            "title": "Theme Editor Configuration",
            "route": {
              "path": "/theme-editor-configuration"
            },
            "data": {
              "children": [
                {
                  "title": "What is the Stencil Theme Editor?",
                  "route": {
                    "path": "/new-subpage-3"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "text",
                        "data": "Two JSON files in your Stencil theme's home directory, config.json and schema.json, govern which settings the theme will expose.\n\nThe config.json file's key/value pairs define:\n* Global, theme-wide variables\n* Theme variations\n* Variation-specific variables\n\nThe schema.json file specifies which theme settings will be accessible through the Theme Editor GUI. Your entries here also define the graphical controls presented to merchants for each setting."
                      }
                    ]
                  }
                },
                {
                  "title": "Configuration Overview",
                  "route": {
                    "path": "/new-subpage-2"
                  },
                  "data": {}
                },
                {
                  "title": "config.json Metedata",
                  "route": {
                    "path": "/new-subpage-1"
                  },
                  "data": {}
                },
                {
                  "title": "Preparing Thumbnail Images",
                  "route": {
                    "path": "/new-subpage"
                  },
                  "data": {}
                },
                {
                  "title": "scheme.json/Theme Editor Metadata",
                  "route": {
                    "path": "/new-subpage"
                  },
                  "data": {}
                },
                {
                  "title": "Preparing Thumbnail Images",
                  "route": {
                    "path": "/new-subpage"
                  },
                  "data": {}
                },
                {
                  "title": "Theme Editor Troubleshooting",
                  "route": {
                    "path": "/new-subpage"
                  },
                  "data": {}
                }
              ]
            }
          },
          {
            "title": "Technology Stack",
            "route": {
              "path": "/new-page-sj3dr"
            },
            "data": {
              "children": [
                {
                  "title": "Technology Overview",
                  "route": {
                    "path": "/new-subpage"
                  },
                  "data": {}
                },
                {
                  "title": "Templates, Partials, and Compilation",
                  "route": {
                    "path": "/new-subpage-1"
                  },
                  "data": {}
                }
              ]
            }
          },
          {
            "title": "Shipping A Theme",
            "route": {
              "path": "/shipping-a-theme"
            },
            "data": {
              "children": [
                {
                  "title": "Shrinking Your Theme by Excluding Static Assets",
                  "route": {
                    "path": "/new-subpage"
                  },
                  "data": {}
                },
                {
                  "title": "Staging a theme for CDN Delivery",
                  "route": {
                    "path": "/new-subpage-1"
                  },
                  "data": {}
                },
                {
                  "title": "Bundling and Submitting a Theme",
                  "route": {
                    "path": "/new-subpage-2"
                  },
                  "data": {}
                },
                {
                  "title": "Adding Recaptcha V2",
                  "route": {
                    "path": "/new-subpage-3"
                  },
                  "data": {}
                },
                {
                  "title": "Troubleshooting Theme Uploads",
                  "route": {
                    "path": "/new-subpage-4"
                  },
                  "data": {}
                }
              ]
            }
          },
          {
            "title": "Front-Matter Attributes",
            "route": {
              "path": "/front-matter-attributes"
            },
            "data": {
              "children": [
                {
                  "title": "Front Matter Reference",
                  "route": {
                    "path": "/new-subpage"
                  },
                  "data": {}
                }
              ]
            }
          },
          {
            "title": "Handlebars Syntax and Helpers",
            "route": {
              "path": "/handlebars-syntax-and-helpers"
            },
            "data": {
              "children": [
                {
                  "title": "Handlebars Helpers Reference",
                  "route": {
                    "path": "/handlebars-helpers-reference"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "text",
                        "data": "# Handlebars Helpers Reference"
                      },
                      {
                        "type": "text",
                        "data": "## {{itemAt}}\n\n_Block helper that returns the item at the specified index._\n\n#### Parameters\n\n* `array` {Array}\n* `idx` {Number}\n* `returns` {any} `value`\n\n#### {{itemAt}} Example\n\nGiven the array `['a', 'b', 'c']`:\n\n```\n{{itemAt array 1}}\n//=> 'b'\n\n```\n---\n\n## {{join}}\n\nThe `join` helper is custom to Stencil. It joins an array of string items, with separators. It returns a string. \n\n#### Parameters\n\n- `values`: {Array}\n- `separator`: {String}\n- `limit=<number>`: An optional limit.\n\n#### {{join}} Example\n\ninsert join example\n\n---\n\n### {{limit}}\n\nThe `limit` helper is custom to Stencil. It limits the number of items returned from an array variable, and returns a new array.\n\n#### Parameters\n\n- `data`: {Array}\n- `limit`: {Number}\n\n#### {{limit}} Example \n\nAssume that `{{cart.items}}` would return 10 items. You could use this helper to limit that behavior to only the first four items, by specifying: \n\n```\n{{limit cart.items 4}}\n```\n\n---\n\n### {{pluck}}\n\nThe `pluck` helper is custom to Stencil. For one or more specified search key(s), it retrieves corresponding values from some or all elements in a specified collection. \n\nThe `pluck` helper returns the retrieved values in a comma-separated string. This helper's general form is:\n\n```\n{{pluck ([limit] <collection> [<limit-value>]) '<search-key>'}}\n```\n\n#### Parameters\n\n- `limit`, `limit-value`: Optional parameters to limit the number of results returned.\n- `collection`: The collection to search.\n- `search-key`: The string to search for.\n\n\n#### {{pluck}} Example 1\n\nAssume that the `categories` collection contains:\n\n```\ncategories: [\n  { \"id\": 1, \"name\": \"Bakeware\" },\n  { \"id\": 2, \"name\": \"Cookware\" },\n  { \"id\": 3, \"name\": \"Cutlery\" }\n]\n```\n\nIn this case, this Handlebars statement:\n\n```\n{{pluck (limit categories 2) 'name'}}\n```\n\n...would return:\n\n```\n\"Bakeware,Cookware\"\n```\n\n#### {{pluck}} Example 2\n\nIf the `categories` themselves each contained an image object, then you could use dot notation to access that image object's children:\n\n```\ncategories: [\n  { \"id\": 1, \"name\": \"Bakeware\", \"image\": { \"data\": \"http://...\", \"alt\": \"Bakeware image\"} },\n  { \"id\": 2, \"name\": \"Cookware\" \"image\": { \"data\": \"http://...\", \"alt\": \"Cookware image\"} },\n  { \"id\": 3, \"name\": \"Cutlery\" \"image\": { \"data\": \"http://...\", \"alt\": \"Cutlery image\"} }\n]\n```\n\nIn this case, this Handlebars statement:\n\n```\n{{pluck (limit categories 2) 'image.data'}}\n```\n\n...would return a comma-separated list of image URLs.\n\n---\n\n\n## <a name=\"array_std\"></a> Standard Array Helpers\n\nThe following standard array helpers are supported on the Stencil framework.\n\n### <a name=\"after\"></a> {{after}}\n\nReturns all of the items in an array after the specified index. Opposite of [before](#before).\n\nGiven the array `['a', 'b', 'c']`:\n\n#### Parameters\n\n* `array` {Array}: Collection.\n* `n` {Number}: Starting index (number of items to exclude).\n* `returns` {Array}: Array exluding `n` items.\n\n#### Example\n\n```handlebars\n{{after array 1}}\n//=> '[\"c\"]'\n```\n\n---\n\n## {{arrayify}}\n\nCasts the given `value` to an array.\n\n#### Parameters\n\n* `value` {any}\n* `returns` {Array}\n\n#### {{arrayify}} Example\n\n```handlebars\n{{arrayify \"foo\"}}\n//=> '[\"foo\"]'\n```\n---\n\n## <a name=\"before\"></a> {{before}}\n\nReturns all of the items in the collection before the specified count. Opposite of [after](#after).\n\nGiven the array `['a', 'b', 'c']`:\n\n#### Parameters\n\n* `array` {Array}\n* `n` {Number}\n* `returns` {Array}: Array excluding items after the given number.\n\n#### {{before}} Example\n\n```handlebars\n{{before array 2}}\n//=> '[\"a\", \"b\"]'\n```\n\n---\n\n## {{eachIndex}}\n\n#### Parameters\n\n* `array` {Array}\n* `options` {Object}\n* `returns` {String}\n\n#### {{eachIndex}} Example\n\n```handlebars\n{{#eachIndex collection}}\n  {{item}} is {{index}}\n{{/eachIndex}}\n```\n\n---\n\n### {{filter}}\n\nBlock helper that filters the given array. Renders the block for values that evaluate to `true`; otherwise, returns the inverse block.\n\n#### Parameters\n\n* `array` {Array}\n* `value` {any}\n* `options` {Object}\n* `returns` {String}\n\n#### {{filter}} Example\n\n```handlebars\n{{#filter array \"foo\"}}AAA{{else}}BBB{{/filter}}\n//=> 'BBB\n```\n\n---\n\n## <a name=\"first\"></a> {{first}}\n\nReturns the first item, or first `n` items, of an array.\n\n#### Parameters\n\n* `array` {Array}\n* `n` {Number}: Number of items to return, starting at `0`.\n* `returns` {Array}\n\n#### {{first}} Example\n\nGiven the array `['a', 'b', 'c', 'd', 'e']`:\n\n```handlebars\n{{first array 2}}\n//=> '[\"a\", \"b\"]'\n```\n\n---\n\n\n### {{forEach}}\n\nIterates over each item in an array, and exposes the current item in the array as context to the inner block. In addition to the current array item, the helper exposes the following variables to the inner block:\n\n* `index`\n* `total`\n* `isFirst`\n* `isLast`\n\nAlso, `@index` is exposed as a private variable, and additional private variables may be defined as hash arguments.\n\n#### Parameters\n\n* `array` {Array}\n* `returns` {String}\n\n#### {{forEach}} Example\n\n```js\nvar accounts = [\n{'name': 'John', 'email': 'john@example.com'},\n{'name': 'Malcolm', 'email': 'malcolm@example.com'},\n{'name': 'David', 'email': 'david@example.com'}\n];\n\n// example usage\n// {{#forEach accounts}}\n//   <a href=\"mailto:{{ email }}\" title=\"Send an email to {{ name }}\">\n//     {{ name }}\n//   </a>{{#unless isLast}}, {{/unless}}\n// {{/forEach}}\n```\n\n---\n\n### {{inArray}}\n\nBlock helper that renders the block if an array has the given `value`. Optionally, you can specify an inverse block to render when the array does not have the given value.\n\n#### Parameters\n\n* `array` {Array}\n* `value` {any}\n* `options` {Object}\n* `returns` {String}\n\n#### {{inArray}} Example\n\nGiven the array `['a', 'b', 'c']`:\n\n```handlebars\n{{#inArray array \"d\"}}\n  foo\n{{else}}\n  bar\n{{/inArray}}\n//=> 'bar'\n```\n\n---\n\n### {{isArray}}\n\nReturns true if `value` is an es5 array.\n\n#### Parameters\n\n* `value` {any}: The value to test.\n* `returns` {Boolean}\n\n#### Example\n\n```handlebars\n{{isArray \"abc\"}}\n//=> 'false'\n```\n\n### <a name=\"last\"></a> {{last}}\n\nReturns the last item, or last `n` items, of an array. Opposite of [first](#first).\n\n#### Parameters\n\n* `array` {Array}\n* `n` {Number}: Number of items to return, starting with the last item.\n* `returns` {Array}\n\n#### Example\n\nGiven the array `['a', 'b', 'c', 'd', 'e']`:\n\n```handlebars\n{{last array 2}}\n//=> '[\"d\", \"e\"]'\n```\n\n### {{lengthEqual}}\n\nBlock helper that compares the length of the given array to the number passed as the second argument. If the array length is equal to the given `length`, the block is returned. Otherwise, you have the option of returning an inverse block.\n\n#### Parameters\n\n* `array` {Array}\n* `length` {Number}\n* `options` {Object}\n* `returns` {String}\n\n#### Example\n\nGiven the array `['a', 'b', 'c', 'd', 'e']`:\n\n```handlebars\n{{#lengthEqual array 10}}AAA{{else}}BBB{{/lengthEqual}}\n//=> 'BBB'\n```\n\n### {{map}}\n\nReturns a new array, created by calling `function` on each element of the given `array`.\n\n#### Parameters\n\n* `array` {Array}\n* `fn` {Function}\n* `returns` {String}\n\n#### Example\n\nGiven an array `['a', 'b', 'c']`:\n\n```js\n// register `double` as a helper\nfunction double(str) {\n  return str + str;\n}\n// then used like this:\n// {{map array double}}\n//=> '[\"aa\", \"bb\", \"cc\"]'\n```\n\n### {{some}}\n\nBlock helper that returns the block *if* the callback returns true for some value in the given array.\n\n#### Parameters\n\n* `array` {Array}\n* `cb` {Function}: Callback function.\n* {Options}: Handlebars-provided options object.\n* `returns` {Array}\n\n#### Example\n\nGiven the array `[1, 'b', 3]`:\n\n```handlebars\n{{#some array isString}}\n  Render me if the array has a string.\n{{else}}\n  Render me if it doesn't.\n{{/some}}\n//=> 'Render me if the array has a string.'\n```\n\n### {{sort}}\n\nSorts the given `array`. If an array of objects is passed, you may optionally pass (as the second argument) a `key` to sort on. Alternatively, you may pass a sorting function as the second argument.\n\n#### Parameters\n\n* `array` {Array}: The array to sort.\n* `key` {String|Function}: The object key to sort by, or a sorting function.\n\n#### Example\n\nGiven an array `['b', 'a', 'c']`:\n\n\n```handlebars\n{{sort array}}\n//=> '[\"a\", \"b\", \"c\"]'\n```\n\n### {{sortBy}}\n\nSorts an `array`. If an array of objects is passed, you may optionally pass a `key` to sort on as the second argument. You may alternatively pass a sorting function as the second argument.\n\n#### Parameters\n\n* `array` {Array}: The array to sort.\n* `props` {String|Function}: One or more properties to sort by, or sorting functions to use.\n\n#### {{sortBy}} Example\n\nGiven an array `[{a: 'zzz'}, {a: 'aaa'}]`:\n\n```handlebars\n{{sortBy array \"a\"}}\n//=> '[{\"a\":\"aaa\"}, {\"a\":\"zzz\"}]'\n```\n---\n\n### <a name=\"withAfter\"></a> {{withAfter}}\n\nUse the items in the array, _after_ the specified index, as context inside a block. Opposite of [withBefore](#withBefore).\n\n#### Parameters\n\n* `array` {Array}\n* `idx` {Number}\n* `options` {Object}\n* `returns` {Array}\n\n#### {{withAfter}} Example\n\nGiven the array `['a', 'b', 'c', 'd', 'e']`:\n\n```handlebars\n{{#withAfter array 3}}\n  {{this}}\n{{/withAfter}}\n//=> \"de\"\n```\n\n### <a name=\"withBefore\"></a> {{withBefore}}\n\nUse the items in the array, _before_ the specified index, as context inside a block. Opposite of [withAfter](#withAfter).\n\n#### Parameters\n\n* `array` {Array}\n* `idx` {Number}\n* `options` {Object}\n* `returns` {Array}\n\n#### {{withBefore}} Example\n\nGiven the array `['a', 'b', 'c', 'd', 'e']`:\n\n```handlebars\n{{#withBefore array 3}}\n  {{this}}\n{{/withBefore}}\n//=> 'ab'\n```\n\n### <a name=\"withFirst\"></a> {{withFirst}}\n\nUses a collection's first item inside a Handlebars block expression. Opposite of [withLast](#withLast).\n\n#### Parameters\n\n* `array` {Array}\n* `idx` {Number}\n* `options` {Object}\n* `returns` {String}\n\n#### {{withFirst}} Example\n\nGiven the array `['a', 'b', 'c']`:\n\n```handlebars\n{{#withFirst array}}\n  {{this}}\n{{/withFirst}}\n//=> 'a'\n```\n"
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Stencil Object Model Reference",
            "route": {
              "path": "/stencil-object-model-reference"
            },
            "data": {
              "children": [
                {
                  "title": "Stencil Objects",
                  "route": {
                    "path": "/stencil-objects"
                  },
                  "data": {
                    "children": [
                      {
                        "title": "Global Objects & Properties",
                        "route": {
                          "path": "/global-objects"
                        },
                        "data": {
                          "children": [
                            {
                              "title": "Banners",
                              "route": {
                                "path": "/banners"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<b>Description: </b>Elements of marketing banners at page’s top and/or bottom<br>\n\n<b>Handlebars Expressions:</b> <span class=\"inline-code\">{{banner}}</span>, <span class=\"inline-code\">{{{banner}}}</span><br>\n\n<b>Object Properties:</b><br><br>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td class=\"\">banners</td>\n    <td class=\"\">Blocks of static HTML content to define banners</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">top</span></td>\n    <td class=\"\">Array of HTML content/strings, for custom top-banner content; banners are populated from the BigCommerce control panel</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">bottom</span></td>\n    <td class=\"\">Array of HTML content/strings, for custom bottom-banner content; banners are populated from the BigCommerce control panel</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "Banner"
                                    },
                                    "config": {}
                                  },
                                  {
                                    "type": "callout",
                                    "data": {
                                      "type": "warning",
                                      "body": "Where a banner contains HTML, the <span class=\"inline-code\">banner</span> helper must be placed in triple braces, as in this \nexample: <span class=\"inline-code\">{{{banner}}}</span>. (Double braces would escape the HTML.)",
                                      "title": "Handlebars Formatting Exception"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "title": "Breadcrumbs",
                              "route": {
                                "path": "/breadcrumbs"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<b>Description:</b> Defines a page's breadcrumbs – available on virtually all pages that have a breadcrumb trail<br>\n\n<b>Handlebars Expression:</b> <span class=\"inline-code\">{{breadcrumbs}}</span><br>\n\n<b>Object Properties:</b><br><br>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td class=\"\">name</td>\n    <td class=\"\">Displayed name of this breadcrumb element</td>\n  </tr>\n  <tr>\n    <td class=\"\">url</td>\n    <td class=\"\">URL of this breadcrumb element</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "Stencil-Bread-ref"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "title": "Categories",
                              "route": {
                                "path": "/categories"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "text",
                                    "data": "<A NAME=\"Categories\"></a>\n<b>Description:</b> A list of all product categories shown in the current page context; default sorting is by category id, from lowest to highest<br>\n\n<b>Handlebars Expression:</b> <span class=\"inline-code\">{{categories}}</span><br>\n\n<b>Object Properties:</b><br><br>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td class=\"\">id</td>\n    <td class=\"\">ID of the top-level category listed</td>\n  </tr>\n  <tr>\n    <td class=\"\">name</td>\n    <td class=\"\">Name of the top-level category</td>\n  </tr>\n  <tr>\n    <td class=\"\">description</td>\n    <td class=\"\">Description of the top-level category (optional &ndash; when requested in front matter)</td>\n  </tr>\n  <tr>\n    <td class=\"\">url</td>\n    <td class=\"\">URL to the category page</td>\n  </tr>\n  <tr>\n    <td class=\"\">count</td>\n    <td class=\"\">Number of products in this category</td>\n  </tr>\n  <tr>\n    <td class=\"\">children</td>\n    <td class=\"\">List of child categories for this top-level category</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> id</span></td>\n    <td class=\"\">ID of the child category</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> name</span></td>\n    <td class=\"\">Name of the child category</td>\n  </tr>\n    <tr>\n    <td class=\"\"><span class=\"indent1\"> description</span></td>\n    <td class=\"\">Description of the child category (optional &ndash; when requested in front matter)</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> url</span></td>\n    <td class=\"\">URL of the child category</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> count</span></td>\n    <td class=\"\">Number of products in this child category</td>\n  </tr>\n</table>"
                                  }
                                ]
                              }
                            },
                            {
                              "title": "Currency Selector",
                              "route": {
                                "path": "/currency-selector"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<b>Description:</b> A list of all supported currencies, and the currency that is actively in use in the storefront<br>\n\n<b>Handlebars Expression:</b> <span class=\"inline-code\">{{currency_selector}}</span><br>\n\n<b>Object Properties:</b><br><br>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td class=\"\">active_currency_id</td>\n    <td class=\"\">ID of the currency actively in use in the storefront</td>\n  </tr>\n  <tr>\n    <td class=\"\">active_currency_flag</td>\n    <td class=\"\">Country flag used to represent the active currency</td>\n  </tr>\n  <tr>\n    <td class=\"\">active_currency_name</td>\n    <td class=\"\">Name of the active currency</td>\n  </tr>\n  <tr>\n    <td class=\"\">active_currency_code</td>\n    <td class=\"\">Code for the active currency</td>\n  </tr>\n  <tr>\n    <td class=\"\">currencies</td>\n    <td class=\"\">List of all the currencies supported for this storefront</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> is_active</span></td>\n    <td class=\"\">Boolean that indicates whether this currency is active for use in the storefront</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> switch_url</span></td>\n    <td class=\"\">The URL to invoke a switch to this currency</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> id</span></td>\n    <td class=\"\">ID of the currency</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> name</span></td>\n    <td class=\"\">Name of the currency</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> flag</span></td>\n    <td class=\"\">Country flag used to visually represent the currency</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "CurrencySel"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "title": "Faceted Search",
                              "route": {
                                "path": "/new-subpage-6"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<A NAME=\"FacSearch\"></a>\n<b>Description: </b>Faceted-search object for searching globally, by category, or by brand<br>\n\n<b>Handlebars Expression</b><b>:</b> <span class=\"inline-code\">{{faceted_search}}</span><br>\n\n<b>Object Properties:</b><br><br>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td class=\"\">facets</td>\n    <td class=\"\">List of all search facets available</td>\n  </tr>\n  <tr>\n    <td class=\"\">selected</td>\n    <td class=\"\">Container for the selected search facets</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">remove_all_url</span></td>\n    <td class=\"\">URL to remove all selected search restrictions</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">items</span></td>\n    <td class=\"\">Currently enabled search facets</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "FacetedSearch"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "title": "Featured Products",
                              "route": {
                                "path": "/new-subpage-2"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<b>Description:</b> A list of all the featured products for the BigCommerce storefront<br>\n\n<b>Handlebars Expression:</b> <span class=\"inline-code\">{{products.featured}}</span><br>\n\n<b>Object Properties:</b> References the <a href=\"/docs/common-product-card-model\">product card model</a>.",
                                    "header": {
                                      "anchor": "FeatProducts"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "<b> Usage Example: </b>\n\nFrom Stencil's base Cornerstone theme, the example below displays the global `{{products.featured}}` object on the `<theme-name>/templates/pages/home.html` page template.\n\nFirst, to declare the object, the following [front matter](/docs/using-yaml-front-matter) must be placed at the top of this template. This particular declaration also limits the number of featured products to be displayed:\n\n```\n---\nproducts:\n    [...]\n    featured:\n        limit: {{theme_settings.homepage_featured_products_count}}\n---\n```\nThe `homepage_featured_products_count` limit is one of two relevant variables defined in Cornerstone's [`config.json`&#160;file](/docs/configjson-reference), here:\n\n```\n  \"settings\": {\n    [...]\n    \"homepage_featured_products_count\": 8,\n    [...]\n    \"homepage_featured_products_column_count\": 4,\n    [...]    \n```\n\nIn the body of the `home.html` template, the following Handlebars conditional statement displays the featured-products object declared above:\n\n```\n    {{#if products.featured}}\n        {{> components/products/featured products=products.featured columns=theme_settings.homepage_featured_products_column_count}}\n    {{/if}}\n```\n\nThis statement formats the featured-products display according to the `homepage_featured_products_column_count` variable, also defined in the `config.json` excerpt above."
                                  }
                                ]
                              }
                            },
                            {
                              "title": "Footer",
                              "route": {
                                "path": "/footer"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<b>Description: </b>The footer content for each storefront page<br>\n\n<b>Handlebars Expression:</b> <span class=\"inline-code\">{{footer}}</span><br>\n\n<b>Object Properties:</b><br><br>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td class=\"\">sitemap_url</td>\n    <td class=\"\">The URL to the sitemap, based on store’s SEO setting</td>\n  </tr>\n  <tr>\n    <td class=\"\">scripts</td>\n    <td class=\"\">Scripts to be loaded after the HTML has loaded; includes performance metrics</td>\n  </tr>\n</table>"
                                  }
                                ]
                              }
                            },
                            {
                              "title": "Home Slide Show",
                              "route": {
                                "path": "/home-slide-show"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<b>Description:</b> A list of images, text, and style assets for a storefront’s image slide show<br>\n\n<b>Handlebars Expression: </b><span class=\"inline-code\">{{carousel}}</span><br>\n\n<b>Object Properties:</b><br><br>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">swap_frequency</td>\n    <td class=\"\">Indicates how often (in seconds) the slides will change; the value must be between 1 and 90,000 seconds</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">slides</td>\n    <td class=\"\">Object containing properties for each slide in the slideshow</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"><span class=\"indent1\">image</span></td>\n    <td class=\"\">Path to the image file used on this slide</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">alt_text</span></td>\n    <td class=\"\">Alt text for the image</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">url</span></td>\n    <td class=\"\">URL to which the image will link</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">heading</span></td>\n    <td class=\"\">Heading message defined by the merchant</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">heading_color</span></td>\n    <td class=\"\">Color of the heading text</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">text</span></td>\n    <td class=\"\">Subheading defined by the merchant</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">text_color</span></td>\n    <td class=\"\">Color of the subheading text</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">button_text</span></td>\n    <td class=\"\">Text displayed on a call-to-action button defined by the merchant</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">button_text_color</span></td>\n    <td class=\"\">Color of the button</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "SlideShow"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "title": "HTML Head",
                              "route": {
                                "path": "/html-head"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<b>Description: </b>Data to be included in the HTML &lt;head&gt; element<br>\n\n<b>Handlebars Expression:</b> <span class=\"inline-code\">{{head}}</span><br>\n\n<b>Object Properties:</b><br><br>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td class=\"\">character_set</td>\n    <td class=\"\">The character set to specify</td>\n  </tr>\n  <tr>\n    <td class=\"\">meta_tags</td>\n    <td class=\"\">Meta tags to improve store SEO</td>\n  </tr>\n  <tr>\n    <td class=\"\">title</td>\n    <td class=\"\">Current page’s title</td>\n  </tr>\n  <tr>\n    <td class=\"\">stylesheets</td>\n    <td class=\"\">CSS files to be included</td>\n  </tr>\n  <tr>\n    <td class=\"\">scripts</td>\n    <td class=\"\">Scripts to be loaded in the &lt;head&gt; tag</td>\n  </tr>\n  <tr>\n    <td class=\"\">favicon</td>\n    <td class=\"\">The store’s favicon (Favorite icon)</td>\n  </tr>\n  <tr>\n    <td class=\"\">rsslinks</td>\n    <td class=\"\">RSS feeds to improve SEO</td>\n  </tr>\n  </tr>\n</table>"
                                  }
                                ]
                              }
                            },
                            {
                              "title": "Is_ajax",
                              "route": {
                                "path": "/is-ajax"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<b>Description: </b>Boolean; returns true if the current executing request is an Ajax request<br>\n\n<b>Handlebars Expression:</b> <span class=\"inline-code\">{{is_ajax}}</span><br>",
                                    "header": {
                                      "anchor": "IsAjax"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "title": "Login",
                              "route": {
                                "path": "/login"
                              },
                              "data": {}
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ],
              "blocks": [
                {
                  "type": "html",
                  "data": "<a name=\"Stencil-Obj-ref\"></a>The entries in this section list and describe the objects<!--, custom operators, and data resources--> and properties that you can access programmatically via Handlebars expressions:\n\n<ul>\n  <!-- <li><a href=\"/docs/custom-handlebars-helpers\">Stencil Custom Handlebars Helpers</a></li> -->\n <li><a href=\"/stencil-object-model-reference/global-objects\">Global Objects (subsection)</a></li>\n <li><a href=\"/stencil-object-model-reference/common-object-formats\">Common Objects</a></li>\n <li><a href=\"/stencil-object-model-reference/product-resources\">Product Objects</a></li>\n <li><a href=\"/stencil-object-model-reference/category-resources\">Category Objects</a></li>\n <li><a href=\"/stencil-object-model-reference/brand-resources\">Brand Objects</a></li>\n <li><a href=\"/stencil-object-model-reference/cart-resources\">Cart Objects</a></li>\n <li><a href=\"/stencil-object-model-reference/customer-resources\">Customer Objects</a></li>\n <li><a href=\"/stencil-object-model-reference/blog-resources\">Blog Objects</a></li>\n <li><a href=\"/stencil-object-model-reference/forms-resources\">Forms Objects</a></li>\n</ul>"
                }
              ]
            }
          },
          {
            "title": "Event Hooks",
            "route": {
              "path": "/event-hooks"
            },
            "data": {
              "children": [
                {
                  "title": "Hook Examples",
                  "route": {
                    "path": "/hook-examples"
                  },
                  "data": {}
                },
                {
                  "title": "Remote API Example",
                  "route": {
                    "path": "/remote-api-example"
                  },
                  "data": {}
                },
                {
                  "title": "Data Tags/Event Hook Reference",
                  "route": {
                    "path": "/new-subpage-1"
                  },
                  "data": {}
                },
                {
                  "title": "stencil-utils API Reference",
                  "route": {
                    "path": "/new-subpage-2"
                  },
                  "data": {}
                }
              ]
            }
          },
          {
            "title": "Conditional-Logic Examples",
            "route": {
              "path": "/conditional-logic-examples"
            },
            "data": {
              "children": [
                {
                  "title": "Catalog Price Object: How Properties interact",
                  "route": {
                    "path": "/catalog-price-object"
                  },
                  "data": {}
                },
                {
                  "title": "Cart Price Properties: Relationships",
                  "route": {
                    "path": "/cart-price-relationships"
                  },
                  "data": {}
                },
                {
                  "title": "Calling Theme-Wide Variables via Handlebars",
                  "route": {
                    "path": "/calling-theme-wide-variables"
                  },
                  "data": {}
                },
                {
                  "title": "Dynamic Content Rendering on Stencil Storefronts",
                  "route": {
                    "path": "/dynamic-content-rendering"
                  },
                  "data": {}
                }
              ]
            }
          },
          {
            "title": "CSS And Design Assets",
            "route": {
              "path": "/css-and-design-assets"
            },
            "data": {
              "children": [
                {
                  "title": "Navigating Stencil Design Assets",
                  "route": {
                    "path": "/navigating-stencil-design-assets"
                  },
                  "data": {}
                },
                {
                  "title": "Components/Design Patters",
                  "route": {
                    "path": "/components-design-patterns"
                  },
                  "data": {}
                },
                {
                  "title": "Layouts Directory",
                  "route": {
                    "path": "/layouts-directory"
                  },
                  "data": {}
                },
                {
                  "title": "Settings Directory",
                  "route": {
                    "path": "/settings-directory"
                  },
                  "data": {}
                },
                {
                  "title": "Utilities Directory",
                  "route": {
                    "path": "/new-subpage-1"
                  },
                  "data": {}
                },
                {
                  "title": "New Subpage",
                  "route": {
                    "path": "/new-subpage"
                  },
                  "data": {}
                }
              ]
            }
          },
          {
            "title": "Templates Reference",
            "route": {
              "path": "/templates-reference"
            },
            "data": {
              "children": [
                {
                  "title": "Navigating the Templates Directory",
                  "route": {
                    "path": "/new-subpage-2"
                  },
                  "data": {
                    "children": [
                      {
                        "title": "Components Subdirectory",
                        "route": {
                          "path": "/new-subpage-3"
                        },
                        "data": {}
                      },
                      {
                        "title": "Layout Subdirectory",
                        "route": {
                          "path": "/new-subpage-2"
                        },
                        "data": {}
                      },
                      {
                        "title": "Pages Subdirectory",
                        "route": {
                          "path": "/new-subpage-1"
                        },
                        "data": {}
                      },
                      {
                        "title": "Stencil with Disqus",
                        "route": {
                          "path": "/new-subpage"
                        },
                        "data": {}
                      }
                    ]
                  }
                },
                {
                  "title": "Custom Templates",
                  "route": {
                    "path": "/components-and-compilation"
                  },
                  "data": {
                    "children": [
                      {
                        "title": "Authoring, Testing, and Uploading Custom Templates",
                        "route": {
                          "path": "/new-subpage-2"
                        },
                        "data": {}
                      },
                      {
                        "title": "Assigning Templates to Pages",
                        "route": {
                          "path": "/new-subpage-1"
                        },
                        "data": {}
                      },
                      {
                        "title": "Switching Themes with Custom Templates",
                        "route": {
                          "path": "/new-subpage"
                        },
                        "data": {}
                      },
                      {
                        "title": "Theme Updates with  Custom Templates",
                        "route": {
                          "path": "/new-subpage"
                        },
                        "data": {}
                      },
                      {
                        "title": "Limitations on Custom Templates",
                        "route": {
                          "path": "/new-subpage-3"
                        },
                        "data": {}
                      }
                    ]
                  }
                },
                {
                  "title": "Stencil Checkout",
                  "route": {
                    "path": "/new-subpage"
                  },
                  "data": {
                    "children": [
                      {
                        "title": "Preparing Stencil for Optimized One-Page Checkout",
                        "route": {
                          "path": "/new-subpage"
                        },
                        "data": {}
                      },
                      {
                        "title": "Optimized One Page Checkout",
                        "route": {
                          "path": "/new-subpage"
                        },
                        "data": {}
                      },
                      {
                        "title": "Currency Conversion",
                        "route": {
                          "path": "/new-subpage"
                        },
                        "data": {}
                      },
                      {
                        "title": "Multi Language Checkout",
                        "route": {
                          "path": "/new-subpage"
                        },
                        "data": {}
                      },
                      {
                        "title": "Checkout/Confirmation Injection Options",
                        "route": {
                          "path": "/new-subpage-1"
                        },
                        "data": {}
                      },
                      {
                        "title": "Implementing a custom checkout",
                        "route": {
                          "path": "/new-subpage-2"
                        },
                        "data": {}
                      },
                      {
                        "title": "Styling the Apple Pay Button",
                        "route": {
                          "path": "/new-subpage-3"
                        },
                        "data": {}
                      },
                      {
                        "title": "Customizing Invoices and Packing Slips",
                        "route": {
                          "path": "/new-subpage-4"
                        },
                        "data": {}
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Internationalization/Localization",
            "route": {
              "path": "/internationalization-and-localization"
            },
            "data": {
              "children": [
                {
                  "title": "Localizing Stores",
                  "route": {
                    "path": "/new-subpage-3"
                  },
                  "data": {}
                },
                {
                  "title": "Basis for Internationalization",
                  "route": {
                    "path": "/new-subpage-2"
                  },
                  "data": {}
                },
                {
                  "title": "Required Subdirectories",
                  "route": {
                    "path": "/new-subpage-1"
                  },
                  "data": {}
                },
                {
                  "title": "Localization File Structure",
                  "route": {
                    "path": "/new-subpage"
                  },
                  "data": {}
                },
                {
                  "title": "Invoking Translation Keys",
                  "route": {
                    "path": "/new-subpage-4"
                  },
                  "data": {}
                }
              ]
            }
          },
          {
            "title": "Javascript Customization",
            "route": {
              "path": "/javascript-customization"
            },
            "data": {
              "children": [
                {
                  "title": "Adding Javascript to Stencil Theme",
                  "route": {
                    "path": "/new-subpage-4"
                  },
                  "data": {}
                },
                {
                  "title": "Basic Non NPM Example",
                  "route": {
                    "path": "/new-subpage-3"
                  },
                  "data": {}
                },
                {
                  "title": "Basic NPM example",
                  "route": {
                    "path": "/new-subpage-2"
                  },
                  "data": {}
                },
                {
                  "title": "Advanced NPM Example",
                  "route": {
                    "path": "/new-subpage-1"
                  },
                  "data": {}
                },
                {
                  "title": "Page Types and Life Cycle",
                  "route": {
                    "path": "/new-subpage"
                  },
                  "data": {}
                }
              ]
            }
          }
        ],
        "blocks": [
          {
            "type": "text",
            "data": "# Welcome to the BigCommerce Stencil Developer Documentation"
          },
          {
            "type": "text",
            "data": "## Objective of this documentation\n\nThis documentation is intended to inform developers about the Stencil theming engine and how it can allow you as a developer to create beautiful, dynamic, and powerful storefronts.\n\n*Reference the [BigCommerce Developer Documentation Glossary](www.google.com) for any terminology that may sound foreign to you when reading the Stencil Developer Documentation.*"
          },
          {
            "type": "text",
            "data": "## What is Stencil?\n\nStencil is the theming engine for the BigCommerce platform. Stencil is the engine for the BigCommerce Cornerstone theme, which is the foundation a theme developer needs to quickly start developing premium, custom themes with Stencil. \n\nStencil also provides features that allow merchants to customize their storefront's look and feel with no coding, making Stencil a powerful and useful engine for all audiences."
          },
          {
            "type": "text",
            "data": "<h3></a> Video Demo</h2>\n\nWatch Stencil senior developer's tour of Stencil's key components:<br><p></p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/p5SR8N0SeCg\" frameborder=\"0\" allowfullscreen></iframe>\n\n\n\n\n\n\n\n\n\n\n\n\n"
          },
          {
            "type": "text",
            "data": "## Stencil Development Features and Technology Stack\n\nStencil's provides the following features, allowing BigCommerce theme developers to create beautiful, dynamic, and powerful storefronts.\n\n---\n\n**Stencil Command Line Interface (Stencil CLI)**\n\nThe Stencil CLI enables developers to locally develop and customize on any Stencil theme with no impact on a merchant's live storefront during the development process. When locally developing, you will have access to real-time Browsersync preview and testing across desktop, mobile, and tablet devices/viewports.\n\nStencil CLI runs on the Node.js runtime environment. Installing Node.js also provides the required npm package manager.\n\n---\n**Logic-Based Templates** \n\nStencil's logic based templates allow BigCommerce developers to customize storefront pages efficiently with the lightweight templating languge, Handlebars.js.  Handlebars allows you to efficiently embed dynamic and conditional logic onto your storefront pages.\n\n---\n\n**Sass/SCSS Support**\n\nStencils Sass and SCSS support allows developers to nest properties, variables, and mixins. Use the familiar Foundation framework (provided) or substitute your choice of framework.\n\nStencil's Cornerstone base theme uses a BigCommerce pattern library called Citadel, which is built on top of the ZURB Foundation framework, version 5.5.3. Stencil does not support Foundation 6.x, due to breaking changes introduced between versions 5.x and 6.x.\n\nFoundation offers the framework for creating a responsive theme. You have the option of swapping out Foundation for another framework, although doing so would require significant work.\n\nFoundation assets bundled with Cornerstone are located in these subdirectories: \n\n* `Cornerstone/assets/scss/settings/foundation/ `\n* `Cornerstone/assets/scss/components/foundation/`\n\nCitadel extends Foundation’s mixins and components to provide Stencil’s own mixins, extensible components, and utilities. These include drop-down lists, forms, and similar resources. Citadel resources are named according to BEM and SUIT CSS conventions. Classes are named functionally, rather than based on visual presentation or content. Our style guide is published here.\nCitadel assets bundled with Cornerstone are located in these Cornerstone subdirectories: \n\n* `Cornerstone/assets/scss/settings/citadel/`\n* `Cornerstone/assets/scss/components/citadel/`\n\nMore detailed information about the Citadel and Foundation SCSS components, and their naming conventions will be covered in *Components and Design Patterns*.\n\n---\n\n**Page-specific Resource Definition**\n\nSpecify the dynamic content you want to be displayed on your storefront pages with YAML formatted front matter.\n\n---\n\n**Javascript Event Hooks**\n\nYour Stencil themes can access remote objects through event hooks, using the hooks to trigger defined events based on shopper behavior. This will allow you to collect product data and optimize a shopper's experience.\n\nTo facilitate theme-building, BigCommerce provides the stencil-utils client-side JavaScript library for managing event hooks.\n\n---\n\n**Stencil Theme Editor**\n\nThe Stencil Theme Editor is a browser-based tool that enables merchants to rapidly customize a theme's look and feel with no coding. \n\nBigCommerce theme developers' configuration choices determine which theme aspects merchants can customize, and the range of choices for each aspect.\n\nStencil's Theme Editor graphical interface enables merchants and store administrators to make styling changes to the theme currently applied to their storefront. \n\nAs a theme developer, you have the capability to define which style settings appear in the Stencil Theme Editor. You can grant access to colors, fonts, display/hiding of page features, and number of products/entries to display per feature.\n\n---\n\n**Stencil Theme Variations**\n\nEach Stencil theme can contain one to four variations. You can optimize individual variations for specific markets, audiences and styles – while still managing and distributing all of these variations as one theme.\nCornerstone comes with 3 variations: Cornerstone Light, Cornerstone Warm, and Cornerstone Bold.\n\n---\n\n**Responsive, Mobile-Friendly Themes**\n\nBigCommerce stores powered by Stencil allow shoppers to have a first class experience across any device.\n\n---\n\nThis is simply a summary Stencil's core features. Continue reading through the Stencil Developer Documentation to learn about Stencil's full capabilities."
          },
          {
            "type": "text",
            "data": "## Legacy Framework Documentation\n\nIf you are looking for information on Blueprint, BigCommerce's legacy theme framework, you can access that below:\n\n* [Themes (Blueprint)](https://developer.bigcommerce.com/themes)\n* [Stores API reference](https://developer.bigcommerce.com/api)"
          }
        ]
      }
    },
    "/api-docs": {
      "title": "API Docs",
      "data": {
        "blocks": [
          {
            "type": "text",
            "data": "API Docs Home Page"
          }
        ],
        "children": [
          {
            "title": "Getting Started",
            "route": {
              "path": "/getting-started"
            },
            "data": {
              "children": [
                {
                  "title": "About the API",
                  "route": {
                    "path": "/about-api"
                  },
                  "data": {
                    "children": [
                      {
                        "title": "Cheat Sprint",
                        "route": {
                          "path": "/cheat-sheet-v2-v3"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "text",
                              "data": "Add Cheat Sheet here"
                            }
                          ]
                        }
                      },
                      {
                        "title": "V2 versus V3",
                        "route": {
                          "path": "/v2-v3"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "text",
                              "data": "# V2 or V3"
                            },
                            {
                              "type": "text",
                              "data": "## Advantages of V3 over V2\n\nThere are fewer API calls for most tasks. Subresources can be included in a resources response. Such as creating a product with variants and custom fields in one API call. \n\nThere are `meta` objects on all resources, so pagination is easier. \n\nMetafields have been added so data can be stored against each object. This can be specific for your application or visible to other applications. \n\nThe V3 API has been optimized for performance. This allows for data to be synched quickly. \n"
                            },
                            {
                              "type": "text",
                              "data": "## Products on V3\n\n### Variants\n\nEvery purchasable entity in the catalog is now a variant. Including the product itself. This enables enhanced flows around inventory management, such as the ability to solely use the variants endpoint to manage inventory levels. For more on variants see [Variants](/api-docs/catalog/products/product-variant-options).\n\nIn V3 a variant needs to be created for every combination. In V2 you could create an SKU with a subset of product options.\n\nIt is recommened to create products using V3 as BigCommerce starts to move operations to the V3 API. \n\n### Interoperability between V2 and V3\n\nWhen a product option is created on V2 and assigned to a product. Trying to edit the option using the V3 API returns a 422 error. \n\n```\n{\n    \"status\": 422,\n    \"title\": \"The product is currently associated with an option set, please remove it before editing an option or modifier.\",\n    \"type\": \"https://developer.bigcommerce.com/api#api-status-codes\",\n    \"errors\": {\n        \"product_id\": \"The product is currently associated with an option set, please remove it before editing an option or modifier.\"\n    }\n}\n```\n\nThis happens since options on V2 are created globally then assigned to the products. The V3 API has variant options which are assigned at the product level. The way to fix is to remove the option in the Control Panel or Delete using the API, the re-create the options using variants. \n\n### Options and Modifiers\n\nThere is now a clear separation of [options that define variants](/api-docs/catalog/products/product-variant-options), versus [options that are modifiers of a variant](/api-docs/catalog/products/modifier-options). This enables us to simplify the creation and management of variant prices and modifier adjusters. It removes the need to use complex rules, in all but the most extreme cases.\n\nOptions and modifiers can also be attached directly to the product, without the requirement to create an option set beforehand.\n\nCreating Options on V2 has several steps:\n1. Create the product\n2. Create the options\n3. Create an option set\n4. Assign the option set to the product\n5. Create any modifiers such as price adjustment based on sku.\n\nCreating Products and Variants on V3:\n1. Create the product with variant in one call\n2. Add modifiers such as price adjustment based on sku\n\nVariants can be included with the GET request to lower the number of API calls being made.  ?include=variants\n\nThere is an endpoint just for creating a [Catalog Tree](/api-docs/api-reference/v3-api/catalog/getcatalogsummary)."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## What's not in V3\n\nIn v3, you attach options directly to products. So option sets are not required, and v3 includes no endpoint to manage options sets. However, v3 will respect option sets that have been attached via v2 or the control panel.\n\nMost resources that are available in V3 are not in V2. \n\n### Complex Rules\n\nMost of the use cases for complex rules can be solved by variants and modifier options. We recommend using variants as best practice.\n\n### Product Rules \nAny variant created in v3 with non-null core properties (price, weight, image, purchasability) will create a rule under the hood. The same goes for modifier adjusters. These will show in v2 as product rules, and any edits to them will be shared across API versions.\n\n### Option Sets\nIn our control panel’s Add/Edit Product section, any products created by v3 will not have an option set applied, but merchants can still edit the options. If the merchant edits/chooses an option set, any variants will be removed from the product. "
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Recommendations\nWhen the resource is available in V3, it is best to use the V3 endpoint. \n\nWe created a handy [cheat sheet]() that lists all the differences between V2 and V3 of the API. "
                            }
                          ]
                        }
                      },
                      {
                        "title": "Authentication",
                        "route": {
                          "path": "/authentication"
                        },
                        "data": {}
                      },
                      {
                        "title": "API Requests",
                        "route": {
                          "path": "/new-subpage"
                        },
                        "data": {}
                      },
                      {
                        "title": "Best Practices",
                        "route": {
                          "path": "/api-status-codes"
                        },
                        "data": {}
                      },
                      {
                        "title": "Filtering",
                        "route": {
                          "path": "/filtering"
                        },
                        "data": {}
                      },
                      {
                        "title": "Client Libraries",
                        "route": {
                          "path": "/new-subpage"
                        },
                        "data": {}
                      }
                    ]
                  }
                },
                {
                  "title": "Partner Information",
                  "route": {
                    "path": "/partner"
                  },
                  "data": {
                    "children": [
                      {
                        "title": "Becoming A Partner",
                        "route": {
                          "path": "/new-subpage"
                        },
                        "data": {}
                      },
                      {
                        "title": "Using Dev Tools",
                        "route": {
                          "path": "/using-dev-tools"
                        },
                        "data": {}
                      }
                    ]
                  }
                },
                {
                  "title": "Building Apps With BigCommerce",
                  "route": {
                    "path": "/building-apps-bigcommerce"
                  },
                  "data": {
                    "children": [
                      {
                        "title": "Apps Quickstart",
                        "route": {
                          "path": "/apps-quickstart"
                        },
                        "data": {}
                      },
                      {
                        "title": "Types of Apps",
                        "route": {
                          "path": "/new-subpage"
                        },
                        "data": {}
                      },
                      {
                        "title": "Building Apps",
                        "route": {
                          "path": "/building-apps"
                        },
                        "data": {}
                      }
                    ]
                  }
                },
                {
                  "title": "Webhooks",
                  "route": {
                    "path": "/webhooks"
                  },
                  "data": {
                    "children": [
                      {
                        "title": "About Webhooks",
                        "route": {
                          "path": "/about-webhooks"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "text",
                              "data": "# About Webhooks"
                            },
                            {
                              "type": "text",
                              "data": "## What We'll Cover\n\n* [Events Available](http://)\n* [Authentication](#authentication)\n* [Lightweight Callback Payload](#lightweight-callback-payload)\n* [Request and Response](#request-and-response)\n* [Recieving the Callback](#receiving-the-callback)\n* [Responding to the Callback](#respond-to-webhook-callbacks)\n* [Callback Retry Mechanism](#callback-retry-mechanism)\n* [Webhook Security](#webhook-security)\n* [Tools for Debugging](#tools-for-debugging-and-testing-webhooks)\n* [All Available Webhooks]()"
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "Webhooks allow app developers to be notified, in near real-time, when specific events occur on a BigCommerce store. For example, your app may need to perform an action when a new order is created, a product’s inventory decreases, or an item is added to a shopper’s cart. When a subscribed event occurs on a store, BigCommerce will POST a payload to your app’s callback URI so your app can take some action based on that event."
                            },
                            {
                              "type": "callout",
                              "data": {
                                "type": "warning",
                                "title": "Multiple Events Are Triggered during Bulk Data Imports",
                                "body": "Bulk data imports will trigger the relevant events for every record affected. For example, if you have a hook on `store/product/created`, when the merchant imports 2,000 products, we will send 2,000 individual callback events."
                              },
                              "header": {}
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Authentication\n\nWebhooks are authenticated using Oauth and support the JSON media type. Basic auth and XML are not supported.\n\nBefore you  can begin to send and receive requests, you must have the following:\n\n* A store: You can get a sandbox store by joining the Partner Program.\n* OAuth Client ID: Obtained by creating an API Account.\n* OAuth token: Obtained by creating an API Account.\n* Valid TLS/SSL configuration: Verify your app server’s setup at the following site: [https://sslcheck.globalsign.com](https://sslcheck.globalsign.com)",
                              "header": {
                                "anchor": "authentication"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "type": "error",
                                "title": "Connection Breakers",
                                "body": "Any one of the following conditions on your app server will cause a connection failure:\n* Hostname/DNS mismatch.\n* Self-signed certificate.\n* Intermediate certificates not loaded."
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Lightweight Callback Payload\n\nWhen a subscribed event occurs, we send a light payload with only minimum details regarding the event that’s been triggered. This gives you maximum flexibility as to how you want to handle the notification in your application. For instance, if you subscribe to the `store/order/statusUpdated` event, we’ll send you the order ID when the status is updated. You might want to handle the notification by fetching the full order details via a request to the Orders resource.\n\nAn example payload follows:\n\n```\n{\n \"store_id\":11111,\n \"producer\":\"stores/abcde\",\n \"scope\":\"store/order/statusUpdated\",\n \"data\":{\n         \"type\":\"order\",\n         \"id\":173331\n        },\n \"hash\":\"3f9ea420af83450d7ef9f78b08c8af25b2213637\"\n }\n```",
                              "header": {
                                "anchor": "lightweight-callback-payload"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Request and Response\n\n*Never worked with webhooks before? Check out the tutorial on creating webhooks.*\n\nAll webhooks requests must include the following in their HTTP headers:\n\n```\n     Accept: application/json\n     Content-Type: application/json\n     X-Auth-Client: <the OAuth client id>\n     X-Auth-Token: <the OAuth token>\n```",
                              "header": {
                                "anchor": "request-and-response"
                              }
                            },
                            {
                              "type": "code",
                              "data": "curl -X POST \\\n  https://api.bigcommerce.com/stores/store_hash/v2/hooks \\\n  -H 'Accept: application/json' \\\n  -H 'X-Auth-Client: your-client-id \\\n  -H 'X-Auth-Token: your-auth-token \\\n  -d '{\n  \"scope\": \"store/cart/lineItem/*\",\n  \"destination\": \"https://myapp.herokuapp.com/\",\n  \"is_active\": true",
                              "header": {
                                "title": "/POST Webhook ",
                                "subtitle": "Request: https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks",
                                "anchor": "post-webhooks"
                              },
                              "config": {
                                "mode": "shell"
                              }
                            },
                            {
                              "type": "code",
                              "data": "    {\n        \"id\": 14270456,\n        \"client_id\": \"your-client-id\",\n        \"store_hash\": \"your_store_hash\",\n        \"scope\": \"store/cart/lineItem/*\",\n        \"destination\": \"https://779aca97.ngrok.io/webhooks\",\n        \"headers\": null,\n        \"is_active\": true,\n        \"created_at\": 1531326542,\n        \"updated_at\": 1531337178\n    }",
                              "header": {
                                "title": "Response 201 Created",
                                "subtitle": "/POST Webhook",
                                "anchor": "response-post-webhooks"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "text",
                              "data": "| Name |Description | Type\n|--|--|--|\n| id | A read-only value that uniquely identifies a webhook object. Do not attempt to set this value in a PUT or POST. | integer|\n| client_id | The OAuth client ID that uniquely identifies your application. BigCommerce returns this name-value pair in the JSON body of its responses. | string |\n| store_hash | \tThe hash value that uniquely identifies the store. Your application does not need to set this value via the JSON object; instead, you pass it in the path of your API requests. | string |\n|scope| Value is the event you would like to listen for. See List of Webhook Events for the full list of possibilities. Wild Cards are supported for scope. **(Required)** | string |\n| destination | value is the callback’s fully qualified URI. This should be an endpoint configured on your app server to receive webhook payloads. **(Required)** | string |\n| headers |The headers object contains one or more name-value pairs, both string values. If you choose to include a headers object, BigCommerce will include the name-value pair(s) in the HTTP header of its POST requests to your callback URI at runtime. While this feature could be used for any purpose, one is to use it to set a secret authorization key and check it at runtime. This provides an additional level of assurance that the POST request came from BigCommerce instead of some other party, such as a malicious actor. (Optional) | string |\n|is_active | Value specifies whether a webhook is active or inactive. By default, new webhooks will be set to be inactive and will have a blank value. If you want to create a webhook that should be active initially, you can pass the following name-value pair: \"is_active\": true. (Optional) | boolean |\n| created_at | The time at which the webhook was created.| date-time Unix Epoch|\n| updated_at | The time at which the webhook was last updated. | date-time Unix Epock|"
                            },
                            {
                              "type": "text",
                              "data": "An HTTP 201 response indicates that the webhook was set successfully."
                            },
                            {
                              "type": "callout",
                              "data": {
                                "type": "warning",
                                "body": "Following the creation of a webhook, it can take up to one minute for BigCommerce to start sending POST requests to your callback URI.",
                                "title": "One-Minute Timeout"
                              }
                            },
                            {
                              "type": "code",
                              "data": "//Response 200 OK\n\n[\n    {\n        \"id\": 14270466,\n        \"client_id\": \"your-client-id\",\n        \"store_hash\": \"your_store_hash\",\n        \"scope\": \"store/product/created\",\n        \"destination\": \"https://779aca97.ngrok.io/webhooks\",\n        \"headers\": null,\n        \"is_active\": true,\n        \"created_at\": 1531326542,\n        \"updated_at\": 1531337178\n    },\n    {\n        \"id\": 14270713,\n        \"client_id\": \"your-client-id\",\n        \"store_hash\": \"your_store_hash\",\n        \"scope\": \"store/product/updated\",\n        \"destination\": \"https://779aca97.ngrok.io/webhooks\",\n        \"headers\": null,\n        \"is_active\": false,\n        \"created_at\": 1531338589,\n        \"updated_at\": 1531338589\n    }\n]\n",
                              "header": {
                                "title": "/GET All Webhooks",
                                "subtitle": "Request: https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks",
                                "anchor": "get-all-webhooks"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "code",
                              "data": "{\n    \"id\": 14270466,\n    \"client_id\": \"your-client-id\",\n    \"store_hash\": \"your_store_hash\",\n    \"scope\": \"store/product/created\",\n    \"destination\": \"https://779aca97.ngrok.io/webhooks\",\n    \"headers\": null,\n    \"is_active\": false,\n    \"created_at\": 1531326542,\n    \"updated_at\": 1531337178\n}\n\n",
                              "header": {
                                "subtitle": "To get a single webhook use the `id`.  Request: https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks/id",
                                "title": "/GET a Single Webhook",
                                "anchor": "get-a-single-webhook"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "code",
                              "data": "{\n \"scope\": \"store/product/updated\",\n \"destination\": \"https://779aca97.ngrok.io/webhooks\",\n \"is_active\": false\n}\n\n\n//Response 200 OK\n\n{\n    \"id\": 14270466,\n    \"client_id\": \"ejoftto9hv8xlip01cckcg53v7g3lrl\",\n    \"store_hash\": \"jrah6gmn\",\n    \"scope\": \"store/product/created\",\n    \"destination\": \"https://779aca97.ngrok.io/webhooks\",\n    \"headers\": null,\n    \"is_active\": false,\n    \"created_at\": 1531326542,\n    \"updated_at\": 1531337178\n}\n",
                              "header": {
                                "title": "/PUT Webhook",
                                "subtitle": "Update a webhook using the id. Once the webhook is created all the fields below can be changed via an update request. Request: https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks/id",
                                "anchor": "update-a-webhook"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "code",
                              "data": "//Response 200 OK\n{\n    \"id\": 14270466,\n    \"client_id\": \"ejoftto9hv8xlip01cckcg53v7g3lrl\",\n    \"store_hash\": \"jrah6gmn\",\n    \"scope\": \"store/product/created\",\n    \"destination\": \"https://779aca97.ngrok.io/webhooks\",\n    \"headers\": null,\n    \"is_active\": false,\n    \"created_at\": 1531326542,\n    \"updated_at\": 1531337178\n}\n",
                              "header": {
                                "title": "/DELETE a Wehbook",
                                "subtitle": "Request: https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks/id"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "text",
                              "data": "There is not a way to delete all webhooks on a store. Run a GET request for the webhook id, then send a request to the delete URI to remove each one. It returns a 200 OK for the response with the deleted hook. When requesting a list of hook, the hook id is not available.\n\nIf webhooks are no longer being used, either delete them or set `is_active:false`."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Receiving the Callback\n\nYou’ll need to build an application and configure your server to receive the callback we send when events are triggered. \n\nNeed to set up a quick destination URL for testing? See Tools for Debugging and Testing Webhooks."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Respond to Webhook Callbacks\n\nYou’ll need to build an application and configure your server to receive the callback we send when events are triggered.\n\nTo acknowledge that you received the webhook without issue, your server should return a 200 HTTP status code. Any other information you return in the request headers or request body will be ignored. Any response code outside the 200 range, including 3_xx_ codes, will indicate to us that you did not receive the webhook. When a webhook is not received (for whatever reason), we will retry the callback as described below.\n\nNeed to set up a quick destination URL for testing? See [Tools for testing webhooks.](http://)"
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Callback Retry Mechanism\n\nThe webhooks service will do its best to deliver events to your callback URI. If your server indicates that the webhook payload has not been received, the dispatch service will take the following actions:\nIf an app server responds to a webhook payload with anything other than a 2_xx_ response, or times out, the app will be blocked for 60 seconds.\nWebhooks created during that 60-second block will be queued up to send on the next scheduled retry attempt after the block expires, so that webhooks are not lost.\n\nThe webhook dispatcher will then attempt several retries (at increasing intervals) until the maximum retry limit is reached.\n\n### Retry Intervals\n\n* 60 seconds after the most recent failure  \n* 180 seconds after the most recent failure  \n* 180 seconds after the most recent failure  \n* 300 seconds after the most recent failure  \n* 600 seconds after the most recent failure  \n* 900 seconds after the most recent failure  \n* 1800 seconds after the most recent failure  \n* 3600 seconds after the most recent failure  \n* 7200 seconds after the most recent failure  \n* 21600 seconds after the most recent failure  \n* 50400 seconds after the most recent failure  \n* 86400 seconds (24 hours) after the most recent failure\n\nAfter the final retry attempt (cumulatively, 48 hours after the first delivery attempt), the webhook will automatically be deactivated, and we will send an email to the developer’s email address registered on the subscribing app. You can reactivate the webhook by setting the `is_active` flag back to true via a `/PUT` request to the hooks resource."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Webhook Security\nTo ensure that webhook payloads are secure against activity by a malicious actor, we take a three-pronged approach:\n\n* Webhook payloads contain minimal information about the store and event, for example the ID identifying the order or cart. To access potentially sensitive information on a store, a malicious actor would need to be fully authenticated against that store’s API in order to request full details.\n* Webhook payloads are sent over a TLS-encrypted connection.\n* For added security, you can include custom headers in your webhook creation request, and these headers will be sent in the payload when an event you subscribe to occurs. If your app endpoint is secured by basic authentication, you could set your own basic auth headers to authenticate the payload at runtime."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Troubleshooting\n\n### Why am I not receiving event payloads to my callback URI?\nIf your app does not return an HTTP 2_xx_ to BigCommerce after receiving the webhook event payload, BigCommerce considers it a failure. BigCommerce will keep trying for a little over 48 hours. At the end of that time, BigCommerce sends an email to the email address set during app registration and disables the webhook by setting the is_active flag to false.\n\nYou can proactively check to make sure that everything is OK by periodically making a GET request and checking the is_active flag.\n\nIf you receive an email or discover that the is_active flag has been flipped to false, try the following:\n\nCheck to see if your app is responding to the event payload with something other than HTTP 200.\nCheck to make sure that your server has a valid TLS/SSL setup. One way to do this is by visiting the following website: https://sslcheck.globalsign.com. Any of the following will cause the TLS/SSL handshake to fail:\nSelf-signed certificate.\nHost name of the certificate does not match the server’s DNS.\nYour server’s key or trust store has not been loaded up with the intermediate certificates necessary to establish the chain of trust.\nOnce you have resolved the issue preventing the connection, send a PUT request to flip the is_active flag back to true. This will cause BigCommerce to start sending the event payloads to your callback URI again.\n\n### Why am I not receiving a 201 response after creating a webhook?\nAfter sending a POST request to create a webhook, you should get an HTTP 201 back. If you do not, check your TLS/SSL setup and be sure that your request contains the following headers:\n\n```\n     Accept: application/json\n     Content-Type: application/json\n     X-Auth-Client: <the OAuth client id>\n     X-Auth-Token: <the OAuth token>\n```"
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Tools for Debugging and Testing Webhooks\n\n**[ngrok](https://ngrok.com/)**  \nAs you are building your integration, you might want to test webhooks on your local dev machines.\n\nWe suggest using ngrok, which you can use to easily set up tunnels between a server running on localhost and a public URL. This will enable you to send our webhooks to your localhost environments via a public URL. No production push is required.  \nNeed help on ngrok and webhooks see our tutorial.\n\n**[Webhook Tester](https://webhook.site/#/)**  \nThis allows for webhooks to be quickly tested or checked. "
                            }
                          ]
                        }
                      },
                      {
                        "title": "Setting up Webhooks",
                        "route": {
                          "path": "/setting-up-webhooks"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "text",
                              "data": "# Setting Up Webhooks"
                            },
                            {
                              "type": "text",
                              "data": "## Prerequisites\n\n- NPM is installed (installed automatically with Node)\n- Familiar with Command Line\n- Familiar with Postman\n- [API Access Token & Client ID](/api/#authenticating-with-oauth) with [scope] set to Information & Settings Read-Only and Products Read-Only.\n- [Webhooks Overview](/api/#webhooks-overview)",
                              "header": {
                                "anchor": "prerequisites"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Create Project Folder\n\n1. Open the terminal and create a folder that will hold ngrok and the Node app, then move into that directory.\n\n```\n    mkdir webhooks-test\n    cd webhooks-test\n```",
                              "header": {
                                "anchor": "create-project-folder"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Install ngrok\n\nThere are three ways to install ngrok: \n- Install manually and then set the $PATH so ngrok can be used globally. \n- Download as an [npm](https://www.npmjs.com/package/ngrok) module. \n- Download manually and place in the project folder. (Method we are using)\n\n### Mac/Linux\n\n1. Visit https://ngrok.com/ and click on download.\n2. Choose the version for your operating system.\n3. Unzip ngrok and place the application in the project folder that you created.\n\nThis can be accomplished in one command:\nunzip \"file_to_unzip\" -d  destination\n\n`unzip /Users/your-computer/Downloads/ngrok-stable-darwin-amd64.zip -d /Users/your-computer/Documents/webhooks-test`\n\n### Windows\n1. Visit https://ngrok.com/ and click on download.\n2. Choose the version for your operating system.\n3. Unzip ngrok and place the application in the project folder that you created.\n4. Make sure the folder is in your PATH environment variable\n    - [What are PATH and other environment variables, and how can I set or use them?](https://superuser.com/questions/284342/what-are-path-and-other-environment-variables-and-how-can-i-set-or-use-them)",
                              "header": {
                                "anchor": "install-ngrok"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "type": "success",
                                "body": "At this point you should have a project folder with ngrok unzipped inside of it. \n",
                                "title": "Checkpoint"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Create Express App\n\n1. In the terminal run `npm init`. You will be prompted with several questions about the app setup. Feel free to hit return to accept the default value.  The final screen will look something like this: \n\n```\n{\n  \"name\": \"webhooks-test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"webhooks-test\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n2. Take note of the value in main, `index.js`. \n3. Create a file in your project folder called index.js. `touch index.js`\n4. Install [Express](https://expressjs.com/en/starter/installing.html) using the terminal in the same project folder. `npm install express --save`\t\t\t "
                            },
                            {
                              "type": "callout",
                              "data": {
                                "type": "success",
                                "body": "At this point your project folder should have similar contents:\nindex.js\nnode_modules\npackage.json\nngrok\npackage-lock.json",
                                "title": "Checkpoint"
                              }
                            },
                            {
                              "type": "text",
                              "data": "4. Open index.js in a text editor and add this code snippet: \n\n\n```\n    const express = require('express')\n    const app = express()\n        app.post('/webhooks', function (req, res) {\n        res.send('OK')\n    })\n    app.listen(3000, function () {\n        console.log('Listening for webhooks on port 3000')\n    })\n```\n\n\nThe app is starting a server and listening on port 3000, then returning a response of ok once it receives a POST to the /webhooks url.\n\n```\napp.post('/webhooks', function (req, res) {\n res.send('OK')\n})\n```\n\n\nFrom Express [Website](https://expressjs.com/en/starter/basic-routing.html):\n`app.METHOD(PATH, HANDLER)`\n- app is an instance of express.\n- METHOD is an [HTTP request method](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods), in lowercase.\n- PATH is a path on the server.\n- HANDLER is the function executed when the route is matched.\n- Res.send is the body parameter that sends the HTTP response."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Start the app and ngrok\n\nWe are going to start the app and visit the ngrok url to see the status of our webhooks. \n\n1. Open two terminal tabs. They both should be in your project folder. \n2. In one tab run the app. `node index.js`\n3. In the other start ngrok. `./ngrok http 3000`",
                              "header": {
                                "anchor": "start-the-app-ngrok"
                              }
                            },
                            {
                              "type": "tabs",
                              "data": {
                                "children": [
                                  {
                                    "title": "node index.js",
                                    "blocks": [
                                      {
                                        "type": "text",
                                        "data": "```\nBIGCOMMERCE:webhooks your.computer$ node index.js\nListening for webhooks on port 3000\n```"
                                      }
                                    ]
                                  },
                                  {
                                    "title": "ngrok http 3000",
                                    "blocks": [
                                      {
                                        "type": "image",
                                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1531500085650",
                                        "config": {
                                          "centered": true
                                        },
                                        "header": {
                                          "title": "nrgok terminal"
                                        }
                                      }
                                    ]
                                  }
                                ]
                              }
                            },
                            {
                              "type": "text",
                              "data": "ngrok returns two values we need for webhooks. \n- Web Interface: Where you can monitor the hook from a browser. `https://127.0.0.1:4040`\n- Forwarding: The webhook destination. Make note of the https version. In this example its https://6a35e97b.ngrok.io.\n\n4. Open a web browser and copy in your Web Interface URL. `http://127.0.0.1:4040` -  This is where the webhooks will appear when they fire."
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1531500191661",
                              "header": {
                                "title": "ngrok Web Interface"
                              },
                              "config": {
                                "centered": true,
                                "maxWidth": "800",
                                "maxHeight": "800"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "The webhook we are going to subscribe to is `store/product/updated`. \n\n1. Create a POST request using the try it now box below or your api enviroment of choice.`https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks`. Replace store_hash with your store.\n2. Create a body request with the webhook we are subscribing to and your forwarding url:\n\n```\n{\n \"scope\": \"store/product/updated\",\n \"destination\": \"https://6a35e97b.ngrok.io/webhooks\",\n \"is_active\": true\n}\n```\n\nThe destination url is the forwarding url from ngrok and /webhooks, matching the URL path set in the app POST.  \n\n3. Update the headers to have:\n```\n    Accept: application/json\n    Content-Type: application/json\n    X-Auth-Client: {{the OAuth client id}}\n    X-Auth-Token: {{the OAuth token}}\n```\n4. Check all the values and then hit POST. The response will be 201 Created if headers and scope are correct."
                            },
                            {
                              "type": "http",
                              "data": {
                                "method": "post",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v2/hooks",
                                "headers": {
                                  "Accept": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{the OAuth client id}",
                                  "X-Auth-Token": "{the OAuth token}"
                                },
                                "body": "{\n\"scope\": \"store/product/updated\",\n \"destination\": \"https://{your-url}.ngrok.io/webhooks\",\n \"is_active\": true\n}\n"
                              },
                              "header": {
                                "title": "Create a Webhook",
                                "anchor": "create-a-webhook"
                              }
                            },
                            {
                              "type": "code",
                              "data": "{\n    \"id\": 14263419,\n    \"client_id\": \"your-client-id\",\n    \"store_hash\": \"your-store-hasha\",\n    \"scope\": \"store/product/updated\",\n    \"destination\": \"https://6a35e97b.ngrok.io/webhooks\",\n    \"headers\": null,\n    \"is_active\": true,\n    \"created_at\": 1531256030,\n    \"updated_at\": 1531256030\n}",
                              "header": {
                                "title": "201 Created Response",
                                "anchor": "201-response"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Fire Webhooks\nYou can fire the webhook in two ways. Either the API or the store’s control panel. We are going to cover both.\n\n### Update via the Control Panel\n\n1. From your store’s control panel, navigate to Products > View. Choose a product and change some of the information. In this case, the word Hoodie was added to the product name. Then click save.",
                              "header": {
                                "anchor": "fire-webhooks"
                              }
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1531500906129",
                              "config": {
                                "centered": true,
                                "maxWidth": "800",
                                "maxHeight": "800"
                              },
                              "header": {
                                "title": "BigCommerce Control Panel",
                                "subtitle": "Products > View"
                              }
                            },
                            {
                              "type": "text",
                              "data": "2. Visit the Ngrok web interface address (in the sample app it’s http://127.0.0.1:4040), and check for a 200 response. "
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1531500945565",
                              "config": {
                                "centered": true,
                                "maxWidth": "800",
                                "maxHeight": "800"
                              },
                              "header": {
                                "title": "ngrok Web Interface"
                              }
                            },
                            {
                              "type": "text",
                              "data": "Under Summary you can see the webhook has fired. It returned the text OK. This can be changed. In the original app, res.send(‘OK’). This can be changed to say something different or even post the response to another app.  \n\nThe response will also show in the terminal. "
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1531500989467",
                              "header": {
                                "title": "ngrok Terminal Response"
                              },
                              "config": {
                                "centered": true,
                                "maxWidth": "800",
                                "maxHeight": "800"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Update via the API\nCreate a PUT request to the product that needs to be updated. \n\n`https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/124`\n\nIn this example, the price of product_id 124 is being changed to 12.99.\n\nAfter hitting send, check the ngrok web interface. You may have more or less events based on how many times the product has been updated in the previous step. "
                            },
                            {
                              "type": "http",
                              "data": {
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}",
                                "headers": {
                                  "X-Auth-Client": "{Your-X-Auth-Client}",
                                  "X-Auth-Token": "{Your-X-Auth-Token}",
                                  "Accept": "application/json",
                                  "Content-Type": "application/json"
                                },
                                "method": "put",
                                "body": "{\n  \"price\": 12.99\n}"
                              },
                              "header": {
                                "title": "Update a Product",
                                "anchor": "update-a-product-webhooks"
                              }
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1531501115256",
                              "header": {
                                "title": "ngrok Web Interface"
                              },
                              "config": {
                                "centered": true,
                                "maxWidth": "800",
                                "maxHeight": "800"
                              }
                            },
                            {
                              "type": "text",
                              "data": "That’s it. In this walkthrough you created a webhook, setup a server to accept the response and used Express. Some extra things are to change the text in res.send() to have a custom response, print the response to a webpage or setup a different webhook. "
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "Unless you have paid for Ngrok, the URL is only valid for a few hours. After that, the webhook will stop working. Send a [DELETE]() request to the specific webhook id. ",
                                "type": "warning",
                                "title": "URL Timeout"
                              }
                            },
                            {
                              "type": "http",
                              "data": {
                                "method": "delete",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v2/hooks/{hook_id}",
                                "headers": {
                                  "X-Auth-Client": "{your-client-id}",
                                  "X-Auth-Token": "{your-auth-token}",
                                  "Content-Type": "application/json",
                                  "Accept": "application/json"
                                }
                              },
                              "header": {
                                "title": "Delete the webhook",
                                "subtitle": "Get the hook_id by either getting it from the original /POST response or by sending a /GET request to the hooks resource",
                                "anchor": "delete-webhook"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Next Steps\n\nAdditionally, you can change the text in res.send() to have a custom response, print the response to a webpage or set up a different webhook. You can also send in custom headers as a way to verify the hook or get custom hook information back. Setup the destination using a permanent url such as creating an [Heroku](https://www.heroku.com/) app, then having the response print to the screen. \n\nTo send in custom headers, during the /POST or /PUT request add in:\n\n```\n{\n  \"scope\": \"store/order/*\",\n  \"headers\": {\n    \"X-Custom-Auth-Header\": \"{secret_auth_password}\"\n  },\n  \"destination\": \"https://app.example.com/orders\",\n  \"is_active\": true\n}\n```\nThe custom header can be anything you choose. It can be used to check the security of an incoming webhook. Anything without the custom header should be rejected.\n\n\nResponse:\n\n```\n{\n    \"id\": 14422996,\n    \"client_id\": \"{{client_id}}\",\n    \"store_hash\": \"{{store-hash}}\",\n    \"scope\": \"store/product/updated\",\n    \"destination\": \"https://6a35e97b.ngrok.io/webhooks\",\n    \"headers\": {\n        \"A-Custom-Header\": \"some-secret-password\"\n    },\n    \"is_active\": true,\n    \"created_at\": 1533142869,\n    \"updated_at\": 1533142869\n}",
                              "header": {
                                "anchor": "next-steps"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Troubleshooting\n1. Getting a 404 error using the root (/) url?\n\nAdd this snippet to your code to respond to incoming get requests with 'hello'.\n\n```\napp.get('/',(req, res)=>{\n    res.send('Hello!');\n}); \n```\n\n2. Getting error ngrok not found?\nThere are two ways to fix this. Your local setup will determine which command will work.\nUse the command `mv ngrok /usr/local/bin `to move ngrok to your local bin folder. This way it becomes available globally. \nUse the command `./ngrok http 300`0 to run ngrok as a sudo user. ",
                              "header": {
                                "anchor": "troubleshooting"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Webhook Events",
                        "route": {
                          "path": "/webhook-events"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "text",
                              "data": "# List of Webhook Events"
                            },
                            {
                              "type": "text",
                              "data": "## Orders\n\n| Name | Description |\n| ---| --- |\n| store/order/* | Subscribe to all store/order events  |\n| store/order/created | A new order is created. It can be manual or created on the storefront | \n| store/order/update| Order is updated |\n| store/order/archived | Order is archived |\n| store/order/deleted | Order is deleted |\n| store/order/statusUpdated | Order status is changed |\n| store/order/message/created | Order message is created by customer or in control panel |",
                              "header": {
                                "anchor": "orders"
                              }
                            },
                            {
                              "type": "code",
                              "data": "{\n  \"scope\": \"store/order/statusUpdated\",\n  \"store_id\": \"123456\",\n  \"data\": {\n    \"type\": \"order\",\n    \"id\": 169,\n    \"status\": {\n      \"previous_status_id\": 5,\n      \"new_status_id\": 9\n    }\n  },\n  \"hash\": \"6923dda2313a5709b13f9b217a3acd6f8308a0c2\",\n  \"created_at\": 1535486277,\n  \"producer\": \"stores/abcdefg\"\n}",
                              "header": {
                                "title": " store/order/statusUpdated",
                                "anchor": "order-status-updated"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Products\n\n| Name | Description |\n| --- | --- |\n| store/product/*| Subscribe to all store/product events |\n|store/product/deleted| Product is deleted|\n| store/product/created | A new product is created |\n| store/product/updated |Events that fire this webhook are below: |\n| _Brand Changed_ | _Product Type_ |\n| _Category_ | _Inventory_ |\n| _Number Sold_ | _Availibility_ |\n| _Thumbnail Changed_ | _Visibility_ |\n| _Featured_ | _Name_ |\n| _Description_ | _Sort Order_ |\n| _Price_ | _Dimensions_ |\n| _Condition_ | _Tax Price_ |\n| store/product/inventory/updated| Product inventory is updated. |\n| store/product/inventory/order/updated| When an order is placed and product inventory is changed. If subscribed the webhook will fire for products where inventory is being tracked by sku or not. |\nIncluded in the response for `store/product/inventory/order/updated` is an inventory object:\n\n**value**: the number of items that the inventory changed by. This can be negative if the inventory is decreased `-3` or positive if an item is returned to the inventory from an order, `+2`\n\n**method** : Will always return relative.\n\n**id**: The product id\n\n**product_id**: The product id",
                              "header": {
                                "anchor": "products"
                              }
                            },
                            {
                              "type": "code",
                              "data": "{\n  \"scope\": \"store/product/inventory/order/updated\",\n  \"store_id\": \"123456\",\n  \"data\": {\n    \"type\": \"product\",\n    \"id\": 185,\n    \"inventory\": {\n      \"product_id\": 185,\n      \"method\": \"relative\",\n      \"value\": -1\n    }\n  },\n  \"hash\": \"dc475e1059f2a67a55818bea29bf6b23ebbda707\",\n  \"created_at\": 1535480603,\n  \"producer\": \"stores/abcdefg\"\n}",
                              "header": {
                                "title": "store/product/inventory/order/updated",
                                "anchor": "product-inventory-order-updated"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Category\n\n| Name | Description |\n|---|---|\n| store/category/*| Subscribe to all store/category events |\n| store/category/created | Category is created |\n| store/category/updated | Category is updated |\n| store/category/deleted | Category is deleted |",
                              "header": {
                                "anchor": "category"
                              }
                            },
                            {
                              "type": "code",
                              "data": "{\n  \"scope\": \"store/category/updated\",\n  \"store_id\": \"123456\",\n  \"data\": {\n    \"type\": \"category\",\n    \"id\": \"19\"\n  },\n  \"hash\": \"9bb5584b3c28e3bb07164405626bd913c14d2209\",\n  \"created_at\": 1535487935,\n  \"producer\": \"stores/abcdefg\"\n}",
                              "header": {
                                "title": "store/category/updated",
                                "anchor": "category-updated"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## SKU\n\n| Name | Description |\n| --- | --- |\n| store/sku/* |Subscribe to all store/sku events |\n| store/sku/created | A new sku is created |\n| store/sku/updated | Sku is updated |\n| store/sku/deleted| Sku is deleted |\n| store/sku/inventory/updated| |\n| store/sku/inventory/order/updated| This webhook will fire if inventory is being tracked by sku on a product. It will also fire the store/product/inventory/order/updated webhook. |\n\nIncluded in the response is a data object:\n\n**value**: the number of items that the inventory changed by. This can be negative if the inventory is decreased `-3` or positive if an item is returned to the inventory from an order, `+2`\n\n**method** : Will always return relative.\n\n**type**: Will always be sku\n\n**variant_id**: Id of the variant",
                              "header": {
                                "anchor": "sku"
                              }
                            },
                            {
                              "type": "code",
                              "data": "{\n  \"scope\": \"store/sku/inventory/order/updated\",\n  \"store_id\": \"123456\",\n  \"data\": {\n    \"type\": \"sku\",\n    \"id\": 330,\n    \"inventory\": {\n      \"product_id\": 184,\n      \"method\": \"relative\",\n      \"value\": +2,\n      \"variant_id\": 364\n    }\n  },\n  \"hash\": \"dc475e1059f2a67a55818bea29bf6b23ebbda707\",\n  \"created_at\": 1535480603,\n  \"producer\": \"stores/abcdefg\"\n}",
                              "header": {
                                "title": "store/sku/inventory/order/updated",
                                "anchor": "sku-inventory-order-updated"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Customer\n| Name | Description |\n|---|---|\n| store/customer/* | Subscribe to all store/customer events |\n| store/customer/created | A new customer is created|\n| store/customer/updated | Customer is updated |\n| store/customer/deleted | Customer is deleted |",
                              "header": {
                                "anchor": "customer"
                              }
                            },
                            {
                              "type": "code",
                              "data": "{\n  \"scope\": \"store/customer/deleted\",\n  \"store_id\": \"123456\",\n  \"data\": {\n    \"type\": \"customer\",\n    \"id\": 10\n  },\n  \"hash\": \"4bf08f1ad81eeb460eb12f99f7fd2226b6ea0911\",\n  \"created_at\": 1535488840,\n  \"producer\": \"stores/abcdefg\"\n}",
                              "header": {
                                "title": "tore/customer/deleted",
                                "anchor": "customer-deleted"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Store\n|Name|Description|\n|---|---|\n| store/app/uninstalled | Occurs when a client store is cancelled and uninstalled from the platform |\n|store/information/updated | Events that fire this webhook: |\n| *Store Name* | *Store Address* |\n| *Store Phone Number* | *Admin Email* |\n| *Order Email* | *Display Date Format* |\n| *Export Date Format* | *Store DTS Correction* |\n| *Store Time Zone* | *Language* |\n| *Default Currency* | *Currency Token* |\n| *Decimal Token* | *Thousands Place* |\n| *Currency Location* | *Weight Measurement* |\n| *Length Measurement* | *Length Measurement* |\n| *Dimensions Decimal Places* | *Dimensions Decimal Token* |\n| *Plan Name* | *Plan Level* |\n| *Store Logo* | *Mobile Template Logo* |\n| *Tax Entered With Prices* | *Stencil Template Enabled* |\n",
                              "header": {
                                "anchor": "store"
                              }
                            },
                            {
                              "type": "code",
                              "data": "{\n  \"scope\": \"store/information/updated\",\n  \"store_id\": \"123446\",\n  \"data\": {\n    \"type\": \"store\"\n  },\n  \"hash\": \"c553845e0a5e28dc8b0ea494458692a25586a294\",\n  \"created_at\": 1535489273,\n  \"producer\": \"stores/abcdefg\"\n}",
                              "header": {
                                "title": "store/information/updated",
                                "anchor": "store-information-updated"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Cart\n\n| Name | Description |\n| --- | --- |\n| store/cart/lineItem/* | This webhook will fire when a change occurs to line items in the cart. This can be items added to a cart, removed or updated.(Ex. change to quantity, product options or price). |\n| store/cart/lineItem/created | When a new item is added to the cart  |\n| store/cart/lineItem/updated | When an item’s quantity has changed or the product options change. |\n| store/cart/lineItem/deleted | When an item is deleted from the cart|\n| store/cart/created | This webhook will fire whenever a new cart is created either via a storefront shopper adding their first item to the cart or when a new cart being created via an API consumer. If it is from the storefront, then it fires when the first product is added to a new session.(The cart did not exist before) For the API it means a  `POST`  to /carts, (V3 and Storefront API). The  `store/cart/updated`  will also fire.|\n| store/cart/updated | This webhook is fired whenever a cart is modified through the changes in its line items. Eg. when a new item is added to a cart, an existing item’s quantity is updated, when the email changes during guest checkout or an existing item is deleted, the cart is modified triggering this webhook. The payload will include the ID of the cart being updated. <br> This webhook is also fired along with cart created because the first product being added to an empty cart triggers an update. <br> - Logging into customer account after creating a cart (email is inherited from customer account email) <br>- Entering email address via guest checkout <br> -Changing the email in guest checkout |\n| store/cart/deleted| This webhook will fire whenever a cart is deleted. This is can be either when all items have been removed from a cart and it was auto-deleted or it was explicitly removed via a DELETE request by an API consumer. This ends the lifecycle of the cart. The  `store/cart/updated`  webhook will also fire when the last item is removed.|\n| store/cart/couponApplied | This webhook will fire whenever a new coupon code is applied to a cart. It will include the ID of the coupon code |\n| store/cart/abandoned | This webhook will fire whenever a cart is considered abandoned. In the BigCommerce store settings if enabled this is usually set to one hour. [See Abandoned Cart](https://support.bigcommerce.com/articles/Public/Using-the-Abandoned-Cart-Saver/). |\n| store/cart/converted | If a cart has been converted. This will fire after a cart has been considered abandoned. |\n",
                              "header": {
                                "anchor": "cart"
                              }
                            },
                            {
                              "type": "code",
                              "data": "{\n    \"scope\": \"store/cart/lineItem/created\",\n    \"store_id\": \"12074048\",\n    \"data\": {\n        \"type\": \"cart_line_item\",\n        \"id\": \"c676e997-10fc-4049-bf18-1077a062e16d\",\n        \"cartId\": \"351a367f-4198-4108-996a-753ffc1bce21\"\n    },\n    \"hash\": \"23d6ae55d612514cbc3f79619535a184bbf10fc0\",\n    \"created_at\": 1518405112,\n    \"producer\": \"stores/ojgwnqqd0g\"\n}",
                              "header": {
                                "title": "store/cart/lineItem/created",
                                "anchor": "cart-lineitem-created"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "code",
                              "data": "{\n    \"scope\": \"store/cart/created\",\n    \"store_id\": \"12074048\",\n    \"data\": {\n        \"type\": \"cart\",\n        \"id\": \"6121f45e-e3d9-4fcf-828e-b507594a1f96\"\n    },\n    \"hash\": \"54eef7f35f37d770aefcb61c5d3f1df6ed0d5a31\",\n    \"created_at\": 1518403916,\n  ",
                              "header": {
                                "title": "store/cart/created",
                                "anchor": "cart-created"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Shipment\n\n| Name | Description |\n| --- | --- |\n| store/shipment/* | Subscribe to all store/shipment events |\n| store/shipment/created | Shipment is created |\n| store/shipment/updated | Shipment is updated |\n| store/shipment/deleted | Shipment is deleted |",
                              "header": {
                                "anchor": "shipment"
                              }
                            },
                            {
                              "type": "code",
                              "data": "{\n    \"scope\": \"store/shipment/created\",\n    \"store_id\": \"123456\",\n    \"data\": {\n        \"type\": \"shipment\",\n        \"id\": 12,\n        \"orderId\": \"319\"\n    },\n    \"hash\": \"a6bc11ea25e8f389a16ee919f0c0db6d4099d7de\",\n    \"created_at\": 1534951410,\n    \"producer\": \"stores/abcdefg\"\n}",
                              "header": {
                                "title": "store/shipment/created",
                                "anchor": "shipment-created"
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Catalog",
            "route": {
              "path": "/catalog"
            },
            "data": {
              "children": [
                {
                  "title": "Products",
                  "route": {
                    "path": "/products"
                  },
                  "data": {
                    "children": [
                      {
                        "title": "Products Overview",
                        "route": {
                          "path": "/products-overview"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "text",
                              "data": "# Products Overview"
                            },
                            {
                              "type": "text",
                              "data": "The Catalog refers to a store’s collection of physical and digital products. The Catalog includes all the information about a product such as MPN, warranty, price, and images. "
                            },
                            {
                              "type": "text",
                              "data": "## [/catalog/products](/api-docs/api-reference/v3-api/catalog/getproducts)\n\nProducts are the primary catalog entity, and the primary function of the e-commerce platform is to sell products on the storefront and other selling channels.\n\nProducts can either be [Simple](#create-simple-product) or [Complex](#create-complex-product). \n\nProducts can also be Physical or Digital. \n\n* Physical products are typically products that exist in a physical form, have a weight, and are being sold by retailers with the intent of shipping them to customers. \n\n* Digital products, on the other hand, may not have a physical representation in the real world; this includes downloadable products such as computer software, ebooks, music, images, and other digital media. Alternatively, a digital product may be used to sell services such as spa treatments, consulting, and so forth - which also do not require shipping.",
                              "header": {
                                "anchor": "catalog-products"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "title": "Product Creation",
                                "body": "Only one Product can be created at a time."
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Create a Simple Product\n\nSimple products do not have any options, modifiers, or variants, and therefore cannot be configured or modified before they are added to cart. A simple product is its own variant. ",
                              "header": {
                                "anchor": "simple-product"
                              }
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{{CLIENT ID}}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "post",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products",
                                "body": "{\n  \"name\": \"BigCommerce Coffee Mug\",\n  \"price\": \"10.00\",\n  \"categories\": [\n    23,\n    21\n  ],\n  \"weight\": 4,\n  \"type\": \"physical\"\n}"
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to create your own Simple Product. Replace the test data with your own.",
                                "anchor": "code-create-simple-product"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "When options are created, it defaults to radio button as the display_type.",
                                "title": "Creating Options"
                              },
                              "header": {}
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Create a Complex Product\n\nComplex products have at least one option and may have modifiers or variants.",
                              "header": {
                                "anchor": "create-complex-product"
                              }
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{{CLIENT ID}}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "post",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products",
                                "body": "{\n  \"name\": \"BigCommerce Coffee Mug\",\n  \"price\": \"10.00\",\n  \"categories\": [\n    23,\n    21\n  ],\n  \"weight\": 4,\n  \"type\": \"physical\",\n  \"variants\": [\n    {\n      \"sku\": \"SKU-BLU\",\n      \"option_values\": [\n        {\n          \"option_display_name\": \"Mug Color\",\n          \"label\": \"Blue\"\n        }\n      ]\n    },\n    {\n      \"sku\": \"SKU-GRAY\",\n      \"option_values\": [\n        {\n          \"option_display_name\": \"Mug Color\",\n          \"label\": \"Gray\"\n        }\n      ]\n    }\n  ]\n}"
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to create your own test product. Replace the test data with your own.",
                                "anchor": "code-create-complex-product"
                              }
                            },
                            {
                              "type": "text",
                              "data": "Using this endpoint multiple variants can be added to the product when being created."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Digital Products\n\nDigital products are not physical items that are shipped out. Such as manuals, ebooks or music. Attached to a digital product is a Downloadable product file.\n\nDownloadable product files are intended for products of the “digital” type, typically for selling some kind of media file or software. They don’t have dimensions since an item is never shipped out.\n\nFiles must be added to digital products using the [Control Panel or using WebDav.](https://support.bigcommerce.com/articles/Public/Creating-Downloadable-Products/#adding-downloadable-product) Additional settings such as description of the file and maximum downloads can be set in the Control Panel.",
                              "header": {
                                "anchor": "digital-products"
                              }
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{{CLIENT ID}}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "post",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products",
                                "body": "{\n  \"name\": \"ebook: A Guide to Coffee\",\n  \"price\": \"10.00\",\n  \"categories\": [\n    23,\n    21\n  ],\n  \"type\": \"digital\",\n  \"images\": [\n    {\n      \"is_thumbnail\": true,\n      \"image_url\": \"https://your-custom-image/image_name.png\"\n    }\n  ]\n}"
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to create your own Digital Product. Replace the test data with your own.",
                                "anchor": "code-create-digital-product"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Webhooks Available\n\n| Name | Description |\n| --- | --- |\n| store/product/*| Subscribe to all store/product events |\n|store/product/deleted| Product is deleted|\n| store/product/created | A new product is created |\n| store/product/updated |Events that fire this webhook are below: |\n| _Brand Changed_ | _Product Type_ |\n| _Category_ | _Inventory_ |\n| _Number Sold_ | _Availibility_ |\n| _Thumbnail Changed_ | _Visibility_ |\n| _Featured_ | _Name_ |\n| _Description_ | _Sort Order_ |\n| _Price_ | _Dimensions_ |\n| _Condition_ | _Tax Price_ |\n| store/product/inventory/updated| Product inventory is updated. |\n| store/product/inventory/order/updated| When an order is placed and product inventory is changed. If subscribed the webhook will fire for products where inventory is being tracked by sku or not. |\n\n* See [About Webhooks](/api-docs/getting-started/webhooks/about-webhooks) for more on working with events.",
                              "header": {
                                "anchor": "available-webhooks"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "$ref": "./BigCommerce V3 API.oas2.yml#/definitions/ProductBase"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Images",
                        "route": {
                          "path": "/products-images"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "text",
                              "data": "# Product Images"
                            },
                            {
                              "type": "text",
                              "data": "## [/catalog/products/{product_id}/images](/api-docs/api-reference/v3-api/catalog/getproductimages)\n\nProduct images are used to show shoppers what they’re buying and merchandise products. When creating an image, `image_url` or an `image_file` can be passed in. \n\nIf using `image_file` Content-Type needs to be set to \nContent-Type: multipart/form-data. Any other updates using the /POST or /PUT will be rejected with the form-data.",
                              "header": {}
                            },
                            {
                              "type": "http",
                              "data": {
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/images",
                                "headers": {
                                  "Accepts": "application/json",
                                  "X-Auth-Client": "{CLIENT ID}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}",
                                  "Content-Type": "application/json"
                                },
                                "method": "put",
                                "body": "{\n \"is_thumbnail\": true,\n  \"sort_order\": 1,\n  \"description\": \"Yellow Large Bath Towel\",\n  \"image_url\": \"https://your-custom-image/image_name.png\"\n}"
                              },
                              "header": {
                                "title": "Try it Now",
                                "subtitle": "Use this to add a Image to your Product. Replace the test data with your own.",
                                "anchor": "code-add-product-image"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Create Multiple Images\n\nA product can support multiple images. When adding images, more than one can be added by expanding the images array.",
                              "header": {
                                "anchor": "create-multiple-images"
                              }
                            },
                            {
                              "type": "http",
                              "data": {
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/images",
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{CLIENT ID}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "put",
                                "body": "{\n\"images\":[\n\t\t\t{\n\t\t\t\t\"is_thumbnail\": true,\n\t\t\t\t\"image_url\": \"https://your-custom-image/image_name.png\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"is_thumbnail\": false,\n\t\t\t\t\"image_url\": \"https://your-custom-image/image_name.png\"\n\t\t\t}\n\t\t]\n}"
                              },
                              "header": {
                                "title": "Try it Now",
                                "subtitle": "Use this to add a Multiple Images to your Product. Replace the test data with your own.",
                                "anchor": "code-add-multiple-images"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Product Thumbnails\n\nOnly one image can be the product thumbnail. The product thumbnail is the image that shows on the product listing page, in search results and any other location that features the product. If only one image is on the product it becomes both the thumbnail and the main product image. Images can also be added to [variants](/api-docs/catalog/products/product-variants). "
                            },
                            {
                              "type": "code",
                              "data": "{\n    \"data\": {\n        \"id\": 382,\n        \"product_id\": 158,\n        \"is_thumbnail\": true,\n        \"sort_order\": 0,\n        \"description\": \"\",\n        \"image_file\": \"a/521/foglinenbeigestripetowel1b_1024x1024__83011__60806.jpg\",\n        \"url_zoom\": \"https://cdn8.bigcommerce.com/s-{{store_hash}}/products/158/images/382/foglinenbeigestripetowel1b_1024x1024__83011__60806.1534344511.1280.1280.jpg?c=2\",\n        \"url_standard\": \"https://cdn8.bigcommerce.com/s-{{store_hash}}/products/158/images/382/foglinenbeigestripetowel1b_1024x1024__83011__60806.1534344511.560.850.jpg?c=2\",\n        \"url_thumbnail\": \"https://cdn8.bigcommerce.com/s-{{store_hash}}/products/158/images/382/foglinenbeigestripetowel1b_1024x1024__83011__60806.1534344511.330.500.jpg?c=2\",\n        \"url_tiny\": \"https://cdn8.bigcommerce.com/s-{{store_hash}}/products/158/images/382/foglinenbeigestripetowel1b_1024x1024__83011__60806.1534344511.66.100.jpg?c=2\",\n        \"date_modified\": \"2018-08-15T14:48:31+00:00\"\n    },\n    \"meta\": {}\n}",
                              "header": {
                                "title": "Thumbnails",
                                "subtitle": "/GET https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/{{product_id}}/images/{{images_id}}",
                                "anchor": "code-get-product-images"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "$ref": "./BigCommerce V3 API.oas2.yml#/definitions/ProductImageBase"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Videos",
                        "route": {
                          "path": "/product-videos"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "text",
                              "data": "# Product Videos"
                            },
                            {
                              "type": "text",
                              "data": "## [/catalog/products/{product_id}/videos](/api-docs/api-reference/v3-api/catalog/getproductvideos)\n\nProduct Videos, in addition to images, can help shoppers understand what they’re buying and help sell the product. A product can have more than one video.\n\n* Product videos must be hosted on YouTube. The video_id corresponds to the “v” parameter in a video url. \n\nExample: https://www.youtube.com/watch?v=***R12345677***\n",
                              "header": {
                                "anchor": "product-video-introduction"
                              }
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accept": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{CLIENT ID}",
                                  "X-Auth-Token": "{ACCESS TOKEN}"
                                },
                                "method": "put",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/videos",
                                "body": "{\n  \"title\": \"BigCommerce Mug Video\",\n  \"description\": \"Video Describing the Mug\",\n  \"sort_order\": 1,\n  \"type\": \"youtube\",\n  \"video_id\": \"123345AA\"\n}"
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to add a Video to your Product. Replace the test data with your own.",
                                "anchor": "code-add-product-video"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "$ref": "./BigCommerce V3 API.oas2.yml#/definitions/ProductVideoBase"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Custom Fields",
                        "route": {
                          "path": "/product-custom-fields"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "text",
                              "data": "# Custom Fields"
                            },
                            {
                              "type": "text",
                              "data": "## [/catalog/products/{product_id}/custom-fields](/api-docs/api-reference/v3-api/catalog/getcustomfields)\n\nCustom fields are a feature intended for product specifications, in a key: value arrangement. As an example, there might be fields indicating technical specifications about an LED TV  such as screen size, maximum resolution, HDR support, etc. Alternatively, if selling wine, I might use Custom Fields for specifications such as vintage, region, grape, etc. Custom fields can not be used to add rules such as changing the weight or price of a product. ",
                              "header": {
                                "anchor": "custom-fields-overview"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "There is a limit of 250 characters for custom field values."
                              }
                            },
                            {
                              "type": "text",
                              "data": "Custom Fields are intended to be used in a couple of contexts:\n\n* Displaying specifications on the product detail page and on the product listing pages such as category and brand pages.\n* Powering faceted search (searching/filtering by custom field values)"
                            },
                            {
                              "type": "http",
                              "data": {
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/custom-fields",
                                "method": "put",
                                "body": "{\n  \"name\": \"Release Year\",\n  \"value\": \"2018\"\n}",
                                "headers": {
                                  "Accept": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{CLIENT ID}",
                                  "X-Auth-Token": "{ACCESS TOKEN}"
                                }
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to add a Custom Field to your Product. Replace the test data with your own.",
                                "anchor": "code-add-custom-field"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "$ref": "./BigCommerce V3 API.oas2.yml#/definitions/CustomFieldBase"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Bulk Pricing Rules",
                        "route": {
                          "path": "/product-bulk-pricing"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "text",
                              "data": "# Bulk Pricing Rules"
                            },
                            {
                              "type": "text",
                              "data": "## [catalog/products/product_id/bulk-pricing-rules](/api-docs/api-reference/v3-api/catalog/getbulkpricingrules)\n\nBulk Pricing Rules are intended for merchants who want to offer wholesale discounts for buying in bulk. They apply once products are added to cart, but they are displayed as a callout on the storefront to let shoppers know how they can save.\n\nBulk Pricing rules in the catalog are on the product, meaning that they’ll trigger even if several different variants of the product are in the cart, as long as the total quantity of those variants meets one of the quantity breaks. [Price List bulk pricing](http://) works differently."
                            },
                            {
                              "type": "http",
                              "data": {
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/bulk-pricing-rules",
                                "method": "put",
                                "body": "{\n  \"bulk_pricing_rules\": [\n    {\n      \"quantity_min\": 10,\n      \"quantity_max\": 15,\n      \"type\": \"price\",\n      \"amount\": 3\n    },\n    {\n      \"quantity_min\": 16,\n      \"quantity_max\": 25,\n      \"type\": \"price\",\n      \"amount\": 5\n    }\n  ]\n}",
                                "headers": {
                                  "Accept": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{CLIENT ID}",
                                  "X-Auth-Token": "{ACCESS TOKEN}"
                                }
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to add Bulk Pricing Rules to your Product. Replace the test data with your own.",
                                "anchor": "code-add-bulk-pricing-rules"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "$ref": "./BigCommerce V3 API.oas2.yml#/definitions/BulkPricingRuleBase"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Variant Options",
                        "route": {
                          "path": "/product-variant-options"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "text",
                              "data": "# Variant Options"
                            },
                            {
                              "type": "text",
                              "data": "### [/catalog/products/product_id/options](/api-docs/api-reference/v3-api/catalog/getoptions)\n\nVariant options are any choices that the shopper needs to make that will result in the selection of a variant. Color and Size are typical examples of Variant Options.  A t-shirt can have different combinations of sizes and colors.  \n\nExample:\n* Color is a Variant Option while Red, Orange, and Green are Variant Option Values\n* Size is a Variant Option while Small, Medium, and Large are Variant Option Values\n\nThe combination of Small & Red is what is selected on the storefront and correlates to a product variation also called a SKU. \n \n**Variant options:**\n\n* Require the shopper to select a value\n* Only support “multiple choice” option types\n* Rectangle\n* Radio button\n* Color swatch\n* Product pick list\n* Product pick list w/ images\n* Will automatically generate variants when created in the CP\n* Are auto-generated from variants when a product is created with variants via V3 API Product /POST"
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Options created on V2 and V3\n\n* Variant options created on V3 cannot be cannot be accessed from the Control Panel. They can only be accessed via the API.\n* If a product has options that were created using the V2 API, additional options cannot be added using the V3 API.\n* SKU's in V@ map to variants in V3.\n* Base variants are not SKU's in V2.",
                              "header": {
                                "anchor": "option-v2-v3"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "Creating a variant option does not automatically create SKUs or build out variants. SKUs can be built out later using the [variants end-point]()."
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Create Variant Options\nThe following request will create options, but the SKU’s are not updated and they are not a variant on the product. Variant SKUs must be created with a separate request. Variant options will show on the storefront as an option that can be selected by the customer. A request like this could be used to add new choices to a variant that has already been created."
                            },
                            {
                              "type": "code",
                              "data": "{\n   \"product_id\": 134,\n   \"name\": \"Size Rectangle\",\n   \"display_name\": \"Size\",\n   \"type\": \"rectangles\",\n         \"option_values\": [\n             {\n                 \"label\": \"S\",\n                 \"sort_order\": 0,\n                 \"is_default\": false\n             },\n             {\n                 \"label\": \"M\",\n                 \"sort_order\": 1,\n                 \"is_default\": true\n             },\n             {\n                 \"label\": \"L\",\n                 \"sort_order\": 2,\n                 \"is_default\": false\n             }\n         ]\n }",
                              "header": {
                                "title": "Create Size Variant Option",
                                "subtitle": "/POST https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/options",
                                "anchor": "create-size-variant"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "Variants can only be created one at a time using this endpoint. Use the /catalog/products to add more than one variant when creating a product."
                              }
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{{CLIENT ID}}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "post",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/options",
                                "body": "{\n  \"product_id\": 134,\n  \"name\": \"Colors\",\n  \"display_name\": \"Color\",\n  \"type\": \"swatch\",\n  \"sort_order\": 1,\n  \"option_values\": [\n    {\n      \"label\": \"Blue\",\n      \"sort_order\": 1,\n      \"value_data\": {\n        \"colors\": [\n          \"#123c91\"\n        ]\n      },\n      \"is_default\": false\n    },\n    {\n      \"label\": \"Green\",\n      \"sort_order\": 2,\n      \"value_data\": {\n        \"colors\": [\n          \"#0f961e\"\n        ]\n      },\n      \"is_default\": false\n    },\n    {\n      \"label\": \"Red\",\n      \"sort_order\": 3,\n      \"value_data\": {\n        \"colors\": [\n          \"#e60c0c\"\n        ]\n      },\n      \"is_default\": false\n    }\n  ]\n}"
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to add Varaint Options to your Product. Replace the test data with your own.",
                                "anchor": "code-create-color-variant"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "$ref": "./BigCommerce V3 API.oas2.yml#/definitions/OptionBase"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Variants",
                        "route": {
                          "path": "/product-variants"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "text",
                              "data": "# Variants"
                            },
                            {
                              "type": "text",
                              "data": "### [/catalog/products/product_id/variants](/api-docs/api-reference/v3-api/catalog/getvariantsbyproductid)\n\nVariants represent an item as it sits on the shelf in the warehouse or a particular saleable product. A product might be a t-shirt, while the variant would be “a small, red t-shirt”. Variants are selected by shoppers on the storefront via Product Options. In the case where a product is simple, meaning it does not have any options, the product is its own variant - called a base variant. Everything you can buy should be a variant.\n\n* Options build out variants. \n* Variants are usually what inventory is tracked against \n* Can have their own price, weight, dimensions, image, etc - or they can inherit these values from the product if they have not been specified\n* Must have a SKU code (unless they’re a base variant)\n* In the case of non-base variants, variants will relate to a particular combination of variant option values - such as “small” and “red”",
                              "header": {
                                "anchor": "variants"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "type": "warning",
                                "body": "When a variant option is created, they can not be accessed from the Control Panel. They can only be changed or updated via the API. "
                              }
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1535652849070",
                              "header": {
                                "subtitle": "Variant Creation Workflow"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Create a Variant\nVariants can be created in two ways:\n* From existing variant options using the variant options endpoint. [v3/catalog/products/{product_id}/options ](http://)\n* By adding the variants with variant options and skus when creating the product. See [Create a Complex Product](http://).\n\nThis will go over using existing variant options to create the variants.\n\nUse the `https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/131/options` endpoint to get the option information."
                            },
                            {
                              "type": "code",
                              "data": "{\n    \"data\": [\n        {\n            \"id\": 193,\n            \"product_id\": 134,\n            \"name\": \"Size1533313432-134\",\n            \"display_name\": \"Size\",\n            \"type\": \"rectangles\",\n            \"sort_order\": 0,\n            \"option_values\": [\n                {\n                    \"id\": 163,\n                    \"label\": \"S\",\n                    \"sort_order\": 0,\n                    \"value_data\": null,\n                    \"is_default\": false\n                },\n                {\n                    \"id\": 164,\n                    \"label\": \"M\",\n                    \"sort_order\": 1,\n                    \"value_data\": null,\n                    \"is_default\": true\n                },\n                {\n                    \"id\": 165,\n                    \"label\": \"L\",\n                    \"sort_order\": 2,\n                    \"value_data\": null,\n                    \"is_default\": false\n                }\n            ],\n            \"config\": []\n        },\n        {\n            \"id\": 194,\n            \"product_id\": 134,\n            \"name\": \"Color1533313946-134\",\n            \"display_name\": \"Color\",\n            \"type\": \"swatch\",\n            \"sort_order\": 1,\n            \"option_values\": [\n                {\n                    \"id\": 166,\n                    \"label\": \"Blue\",\n                    \"sort_order\": 1,\n                    \"value_data\": {\n                        \"colors\": [\n                            \"#123C91\"\n                        ]\n                    },\n                    \"is_default\": false\n                },\n                {\n                    \"id\": 167,\n                    \"label\": \"Green\",\n                    \"sort_order\": 2,\n                    \"value_data\": {\n                        \"colors\": [\n                            \"#0F961E\"\n                        ]\n                    },\n                    \"is_default\": false\n                },\n                {\n                    \"id\": 168,\n                    \"label\": \"Red\",\n                    \"sort_order\": 3,\n                    \"value_data\": {\n                        \"colors\": [\n                            \"#E60C0C\"\n                        ]\n                    },\n                    \"is_default\": false\n                }\n            ],\n            \"config\": []\n        }\n    ],\n    \"meta\": {\n        \"pagination\": {\n            \"total\": 2,\n            \"count\": 2,\n            \"per_page\": 50,\n            \"current_page\": 1,\n            \"total_pages\": 1,\n            \"links\": {\n                \"current\": \"?page=1&limit=50\"\n            }\n        }\n    }\n}",
                              "header": {
                                "title": "Example Response",
                                "subtitle": "/GET https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/options",
                                "anchor": "product-option-response"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "http",
                              "data": {
                                "method": "get",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/options",
                                "headers": {
                                  "X-Auth-Client": "{CLIENT ID}",
                                  "X-Auth-Token": "{ACCESS TOKEN}",
                                  "Content-Type": "application/json",
                                  "Accept": "application/json"
                                }
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Get Variant Options",
                                "anchor": "code-get-variant-options"
                              }
                            },
                            {
                              "type": "text",
                              "data": "In the above response, there are two variant options of size and color with three values each. \n\nTo combine the variant option values into variants and build out SKU’s use the following endpoint:\n\n`https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/131/variants`"
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "Variants need to be created one at a time using this endpoint. Only one variant option at a time can be created; individual variant options will contain an array of multiple values. To use a variant array and create them at the same time use the [/catalog/product]() endpoint during product creation."
                              }
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{{CLIENT ID}}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "put",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/variants",
                                "body": "{\n  \"cost_price\": 3,\n  \"price\": 12.99,\n  \"retail_price\": 15.99,\n  \"weight\": 1,\n  \"width\": 4,\n  \"height\": 14.6,\n  \"depth\": 22,\n  \"is_free_shipping\": true,\n  \"purchasing_disabled\": true,\n  \"purchasing_disabled_message\": \"This item not available at this time.\",\n  \"product_id\": 134,\n  \"sku\": \"SMALL-BLUE\",\n  \"option_values\": [\n    {\n      \"id\": 163,\n      \"option_id\": 193\n    },\n    {\n      \"id\": 166,\n      \"option_id\": 194\n    }\n  ]\n}"
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to add Variants to your Product . Replace the test data with your own.",
                                "anchor": "code-create-variants"
                              }
                            },
                            {
                              "type": "text",
                              "data": "The option_values array is a combination of Small and Blue. Together they create the SKU SMALL-BLUE. The id in the option_values array is the id from the variant option response option_values > id. The option_id is the id of the option. \n\n```\n {\n            \"id\": 193, //option_id\n            \"product_id\": 134,\n            \"name\": \"Size1533313432-134\",\n            \"display_name\": \"Size\",\n            \"type\": \"rectangles\",\n            \"sort_order\": 0,\n            \"option_values\": [\n                {\n                    \"id\": 163, //id\n                    \"label\": \"S\",\n                    \"sort_order\": 0,\n                    \"value_data\": null,\n                    \"is_default\": false\n                }\n\t\t\t\t\t\t\t\t...\n```"
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Create a Variant using the Products endpoint. \n\nThe following example creates a base product, variant options, and variants in a single call to the /products endpoint. You can use this method to create a product and its variants in a single call without creating variant options first, but not all option types are supported by this method."
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "Swatch, Radio Buttons, Rectangle, dropdown, Product List and Product List with Images. ",
                                "title": "Supported Types"
                              }
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{{CLIENT ID}}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "post",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products",
                                "body": "{\n  \"name\": \"BigCommerce Coffee Mug\",\n  \"price\": \"10.00\",\n  \"categories\": [\n    23,\n    21\n  ],\n  \"weight\": 4,\n  \"type\": \"physical\",\n  \"variants\": [\n    {\n      \"sku\": \"SKU-BLU\",\n      \"option_values\": [\n        {\n          \"option_display_name\": \"Mug Color\",\n          \"label\": \"Blue\"\n        }\n      ]\n    },\n    {\n      \"sku\": \"SKU-GRAY\",\n      \"option_values\": [\n        {\n          \"option_display_name\": \"Mug Color\",\n          \"label\": \"Gray\"\n        }\n      ]\n    }\n  ]\n}"
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to create your own Product using the products endpoint . Replace the test data with your own.",
                                "anchor": "create-variants-using-products-endpoint"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "$ref": "./BigCommerce V3 API.oas2.yml#/definitions/VariantBase"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Modifier Options",
                        "route": {
                          "path": "/modifier-options"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "text",
                              "data": "# Modifier Options"
                            },
                            {
                              "type": "text",
                              "data": "## [/catalog/products/{{product_id}}/modifiers](/api-docs/api-reference/v3-api/catalog/getmodifiers)\n\nModifier options are any choices that the shopper can make that will change the way the merchant fulfills the product. Examples include:\n* A checkbox to add shipping insurance\n* Text to be engraved on the product\n* A color that an unfinished product is to be painted before it’s shipped\n \nCritically, the modifier will not change the SKU/variant being fulfilled, and you cannot track inventory against combinations of modifier values. Modifiers typically would not change which product is “picked off the shelf” in the warehouse, but they change what happens to that product before it’s sent to the shopper, or how it’s sent.\n \nModifier options:\n* May be required or non-required\n* Support all option types\n* Cannot be used as part of a variant\n* \nAn adjuster can be added to a modifier option to change things such as adding to the price, changing the weight or shipping rules.  Adjusters cannot be applied to all modifiers."
                            },
                            {
                              "type": "callout",
                              "data": {
                                "title": "Modifiers that use Adjusters",
                                "body": "Swatch, radio buttons, rectangle list, drop-down, product list, product list with images"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Add a modifier to an existing product with price adjuster\n\nThe following example shows how to add a modifier - checkbox with a price adjuster - increase price by five dollars. Checkboxes have to made in two steps.  The reason is that it creates more than one modifier. A checkbox is a yes or no which is listed as two different `option_values`. ",
                              "header": {}
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "swatch, radio buttons, drop-down, rectangle list, product list, product list with images, and checkbox.",
                                "title": "Modifiers that have to be created in two steps"
                              }
                            },
                            {
                              "type": "text",
                              "data": "First, a POST to create the modifier. "
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{{CLIENT ID}}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "put",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/modifiers",
                                "body": "{\n  \"type\": \"checkbox\",\n  \"required\": false,\n  \"config\": {\n    \"default_value\": \"Yes\",\n    \"checked_by_default\": false,\n    \"checkbox_label\": \"Check for Donation\"\n  },\n  \"display_name\": \"Add a $5 Donation\"\n}"
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to add a Modifier to your Product. Replace the test data with your own.",
                                "anchor": "code-create-modifier"
                              }
                            },
                            {
                              "type": "text",
                              "data": "Since this is a checkbox which has two states, checked/unchecked or yes/no two option values are created. The adjuster values are null. "
                            },
                            {
                              "type": "code",
                              "data": "{\n    \"data\": [\n        {\n            \"id\": 160,\n            \"product_id\": 131,\n            \"name\": \"Add-a-$5-Donation1535039590-191\",\n            \"display_name\": \"Add a $5 Donation\",\n            \"type\": \"checkbox\",\n            \"required\": false,\n            \"config\": {\n                \"checkbox_label\": \"Check for Donation\",\n                \"checked_by_default\": false\n            },\n            \"option_values\": [\n                {\n                    \"id\": 149,\n                    \"option_id\": 160,\n                    \"label\": \"Yes\",\n                    \"sort_order\": 0,\n                    \"value_data\": {\n                        \"checked_value\": true\n                    },\n                    \"is_default\": false,\n                    \"adjusters\": {\n                        \"price\": {\n                            \"adjuster\": null,\n                            \"adjuster_value\": null\n                        },\n                        \"weight\": null,\n                        \"image_url\": \"\",\n                        \"purchasing_disabled\": {\n                            \"status\": false,\n                            \"message\": \"\"\n                        }\n                    }\n                },\n                {\n                    \"id\": 150,\n                    \"option_id\": 160,\n                    \"label\": \"No\",\n                    \"sort_order\": 1,\n                    \"value_data\": {\n                        \"checked_value\": false\n                    },\n                    \"is_default\": true,\n                    \"adjusters\": {\n                        \"price\": null,\n                        \"weight\": null,\n                        \"image_url\": \"\",\n                        \"purchasing_disabled\": {\n                            \"status\": false,\n                            \"message\": \"\"\n                        }\n                    }\n                }\n            ]\n        }\n    ],\n    \"meta\": {\n        \"pagination\": {\n            \"total\": 1,\n            \"count\": 1,\n            \"per_page\": 50,\n            \"current_page\": 1,\n            \"total_pages\": 1,\n            \"links\": {\n                \"current\": \"?page=1&limit=50\"\n            }\n        }\n    }\n}\n",
                              "header": {
                                "title": "Response",
                                "anchor": "code-response-create-modifier",
                                "subtitle": "Create Modifier Option"
                              },
                              "config": {
                                "mode": "json"
                              }
                            },
                            {
                              "type": "text",
                              "data": "Then a PUT to update the modifier value created. This increases the price by $5 when the yes modifier is selected."
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{{CLIENT ID}}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "put",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/modifiers/{modifier_id}/values",
                                "body": "{\n  \"is_default\": false,\n  \"adjusters\": {\n    \"price\": {\n      \"adjuster\": \"relative\",\n      \"adjuster_value\": 5\n    }\n  }\n}"
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to add Modifer Values to your Product. Replace the test data with your own.",
                                "anchor": "code-create-modifer-values"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## 422 Error\n\n```\n{\n    \"status\": 422,\n    \"title\": \"The product is currently associated with an option set, please remove it before editing an option or modifier.\",\n    \"type\": \"https://developer.bigcommerce.com/api#api-status-codes\",\n    \"errors\": {\n        \"product_id\": \"The product is currently associated with an option set, please remove it before editing an option or modifier.\"\n    }\n}\n```\n\nTo fix this error:\n* Modify the products using the V2 API\n* Remove the option set using the V2 API or the Control Panel, then remake the variants and modifiers using V3"
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "$ref": "./BigCommerce V3 API.oas2.yml#/definitions/ModifierBase"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Complex Rules",
                        "route": {
                          "path": "/product-complex-rules"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "text",
                              "data": "# Complex Rules"
                            },
                            {
                              "type": "text",
                              "data": "## [/catalog/products/product_id/complex-rules](/api-docs/api-reference/v3-api/catalog/getcomplexrules)\n\nComplex rules allow merchants to set up conditions and actions based on shopper option selections on the storefront. You can use them to vary the following based on option selections made by the shopper:\n* Price\n* Weight\n* Image\n* Purchasability\n\nAdjustments made by complex rules are displayed to shoppers in real-time on the storefront.\n\nFor the majority of merchant use cases, **best practice** will be to either assign values (such as a price) directly to a variant or use adjusters on the modifier option itself. However complex rules exist for rare cases where a rule condition is too complex to express in those forms easily. \n\nUse complex rules when an adjustment should be triggered by:\n* The selection of values across multiple modifier options\n* The combination of a particular variant/SKU and a modifier option value."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Adding a complex rule to a modifier\n\nComplex rules must be based on a combination of two or more modifiers, such as two checkboxes. The following example will add $10 to the product price when both boxes are checked. \n"
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{{CLIENT ID}}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "put",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/complex-rules",
                                "body": "{\n  \"product_id\": 1200,\n  \"enabled\": true,\n  \"price_adjuster\": {\n    \"adjuster_value\": 10\n  },\n  \"conditions\": [\n    {\n      \"modifier_id\": 506,\n      \"modifier_value_id\": 852\n    },\n    {\n      \"modifier_id\": 507,\n      \"modifier_value_id\": 854\n    }\n  ]\n}"
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to add a Complex Rules to a Modifier. Replace the test data with your own.",
                                "anchor": "code-add-complex-rule-modifier"
                              }
                            },
                            {
                              "type": "text",
                              "data": "Complex rules must consist of multiple conditions that trigger the rule adjustment. If multiple conditions are not specified, the request will return a 422 Unprocessable Entity.\n\n```\n{\n    \"status\": 422,\n    \"title\": \"The rule must contain multiple modifier conditions with unique modifier ids or a variant condition and modifier condition\",\n    \"type\": \"https://developer.bigcommerce.com/api#api-status-codes\"\n}\n```\n"
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "$ref": "./BigCommerce V3 API.oas2.yml#/definitions/ComplexRuleBase"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Metafields",
                        "route": {
                          "path": "/product-metafields"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "text",
                              "data": "## Product Metafields"
                            },
                            {
                              "type": "text",
                              "data": "## [/catalog/products/131/metafields](/api-docs/api-reference/v3-api/catalog/getproductmetafieldsbyproductid)\n\nMetafields allow a developer to setup key and namespace pairs. The data does not appear in the storefront or the control panel. This is useful for when information needs to be passed back and forth between an app and the store. \n\nMetafields can be added to variants, products, categories, and brands."
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{{CLIENT ID}}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "put",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/metafields",
                                "body": "{\n  \"permission_set\": \"read\",\n  \"namespace\": \"Location\",\n  \"key\": \"bin_number\",\n  \"value\": \"#4456\",\n  \"description\": \"location of the product\",\n  \"resource_type\": \"product\",\n  \"resource_id\": 131\n}"
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to add a Metafield to your Product. Replace the test data with your own.",
                                "anchor": "code-add-metafield"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "$ref": "./BigCommerce V3 API.oas2.yml#/definitions/MetafieldBase"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Reviews",
                        "route": {
                          "path": "/product-reviews"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "text",
                              "data": "# Reviews"
                            },
                            {
                              "type": "text",
                              "data": "## [/catalog/products/product_id/reviews](/api-docs/api-reference/v3-api/catalog/getproductreviews)\n\nA product review is used to give shoppers the option to rate the products they have purchased. The reviews are located on the same page as the product. \n\nReviews are not able to be created in the control panel, but they can be created via API. Creating them via API is useful if you are migrating to BigCommerce and do not want to lose existing reviews. Product Reviews are native to the platform but can be turned off in favor of a custom setup."
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{{CLIENT ID}}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "post",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products",
                                "body": "{\n  \"title\": \"Great Coffee Mug\",\n  \"text\": \"This coffee mug kept my liquids hot for several hours.\",\n  \"status\": \"pending\",\n  \"rating\": 5,\n  \"email\": \"testing@bigcommerce.com\",\n  \"name\": \"BigCommerce\",\n  \"date_reviewed\": \"2018-07-20T17:45:13+00:00\"\n}\n"
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to create a Product Review. Replace the test data with your own.",
                                "anchor": "code-create-product-review"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "$ref": "./BigCommerce V3 API.oas2.yml#/definitions/ProductReviewBase"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Brands",
                        "route": {
                          "path": "/brands"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "text",
                              "data": "# Brands"
                            },
                            {
                              "type": "text",
                              "data": "## [/catalog/brands](/api-docs/api-reference/v3-api/brands/getbrands)\n\nBrands are another form of catalog taxonomy, similar to Categories. However, there are a few differences.\n\n* Exist as a single “list” on the store, with no tree structure\n* Can only have a single assignment to a product; a product may have at most one brand, but a brand can have many products.\n \nThey’re primarily used to tag products so that consumers can find Brands they’re interested in (such as Nike shoes). Brands have their own page on the storefront which shows all the products in that Brand. They’re also used as part of faceted search navigation."
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{{CLIENT ID}}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "post",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/brands",
                                "body": "{\n  \"name\": \"BigCommerce\",\n  \"page_title\": \"BigCommerce\",\n  \"meta_keywords\": [\n    \"ecommerce\",\n    \"best in class\",\n    \"grow your business\"\n  ],\n  \"image_url\": \"https://your-custom-image.png\"\n}"
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Use this to create your own Brand. Replace the test data with your own.",
                                "anchor": "code-create-brand"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "$ref": "./BigCommerce V3 API.oas2.yml#/definitions/BrandBase"
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Categories",
                  "route": {
                    "path": "/categories"
                  },
                  "data": {
                    "blocks": [],
                    "children": [
                      {
                        "title": "Categories Overview",
                        "route": {
                          "path": "/categories-overview"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "text",
                              "data": "# Category"
                            },
                            {
                              "type": "text",
                              "data": "## [/catalog/categories](http://)\n\nCategories are a hierarchy of products available on the store, presented in a tree structure. Currently, a store’s category structure determines the primary menu structure of most storefront themes, which are directly tied to it.\n\nAll products must be associated with at least one Category, although a Category does not need to have any products. Unlike some e-commerce platforms, products on BigCommerce can be associated with more than one Category. \n\nA product associated with categories does not currently have any priority or weighted order (there’s no “primary category”), which can make it difficult to integrate with some external systems which might wish to use a product’s categories to map to a category structure in that external system."
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{{CLIENT ID}}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "post",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products",
                                "body": "{\n  \"parent_id\": 18,\n  \"name\": \"Shoes\",\n  \"description\": \"Shoes Available for purchase\",\n  \"sort_order\": 1,\n  \"page_title\": \"Shoes\",\n  \"is_visible\": true\n}\n"
                              },
                              "header": {
                                "title": "Try It Now",
                                "subtitle": "Create a Category. Replace the test data with your own."
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "$ref": "./BigCommerce V3 API.oas2.yml#/definitions/CategoryBase"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Category Tree",
                        "route": {
                          "path": "/category-tree"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "text",
                              "data": "# Category Tree"
                            },
                            {
                              "type": "text",
                              "data": "## /catalog/categories/tree\n\nThe Category Tree returns a simple view of the parent > child relationship of all categories in the store. This endpoint can be used to fetch the categories if building out a custom navigation for a store."
                            },
                            {
                              "type": "code",
                              "data": "{\n    \"data\": [\n        {\n            \"id\": 33,\n            \"parent_id\": 0,\n            \"name\": \"Clothing\",\n            \"is_visible\": true,\n            \"url\": \"/clothing/\",\n            \"children\": []\n        },\n        {\n            \"id\": 23,\n            \"parent_id\": 0,\n            \"name\": \"Shop All\",\n            \"is_visible\": true,\n            \"url\": \"/shop-all/\",\n            \"children\": []\n        },\n        {\n            \"id\": 25,\n            \"parent_id\": 0,\n            \"name\": \"Towels\",\n            \"is_visible\": true,\n            \"url\": \"/towels/\",\n            \"children\": [\n                {\n                    \"id\": 26,\n                    \"parent_id\": 25,\n                    \"name\": \"Bath Towels\",\n                    \"is_visible\": true,\n                    \"url\": \"/towels/bath-towels/\",\n                    \"children\": [\n                        {\n                            \"id\": 30,\n                            \"parent_id\": 26,\n                            \"name\": \"Bath Towels\",\n                            \"is_visible\": true,\n                            \"url\": \"/towels/bath-towels/bath-towels/\",\n                            \"children\": []\n                        },\n                        {\n                            \"id\": 29,\n                            \"parent_id\": 26,\n                            \"name\": \"Hand Towels\",\n                            \"is_visible\": true,\n                            \"url\": \"/towels/bath-towels/hand-towels/\",\n                            \"children\": [\n                                {\n                                    \"id\": 31,\n                                    \"parent_id\": 29,\n                                    \"name\": \"Washcloths\",\n                                    \"is_visible\": true,\n                                    \"url\": \"/towels/bath-towels/hand-towels/wash-cloths/\",\n                                    \"children\": []\n                                }\n                            ]\n                        }\n                    ]\n                },\n                {\n                    \"id\": 28,\n                    \"parent_id\": 25,\n                    \"name\": \"Beach Towels\",\n                    \"is_visible\": true,\n                    \"url\": \"/towels/beach-towels/\",\n                    \"children\": []\n                },\n                {\n                    \"id\": 27,\n                    \"parent_id\": 25,\n                    \"name\": \"Kitchen Towels\",\n                    \"is_visible\": true,\n                    \"url\": \"/towels/kitchen-towels/\",\n                    \"children\": []\n                }\n            ]\n        },\n        {\n            \"id\": 18,\n            \"parent_id\": 0,\n            \"name\": \"Bath\",\n            \"is_visible\": true,\n            \"url\": \"/bath/\",\n            \"children\": [\n                {\n                    \"id\": 34,\n                    \"parent_id\": 18,\n                    \"name\": \"Shoes\",\n                    \"is_visible\": true,\n                    \"url\": null,\n                    \"children\": []\n                }\n            ]\n        },\n        {\n            \"id\": 32,\n            \"parent_id\": 0,\n            \"name\": \"Hoodies\",\n            \"is_visible\": true,\n            \"url\": \"/hoodies/\",\n            \"children\": []\n        },\n        {\n            \"id\": 19,\n            \"parent_id\": 0,\n            \"name\": \"Garden\",\n            \"is_visible\": true,\n            \"url\": \"/garden/\",\n            \"children\": []\n        },\n        {\n            \"id\": 21,\n            \"parent_id\": 0,\n            \"name\": \"Kitchen\",\n            \"is_visible\": true,\n            \"url\": \"/kitchen/\",\n            \"children\": []\n        },\n        {\n            \"id\": 20,\n            \"parent_id\": 0,\n            \"name\": \"Publications\",\n            \"is_visible\": true,\n            \"url\": \"/publications/\",\n            \"children\": []\n        },\n        {\n            \"id\": 22,\n            \"parent_id\": 0,\n            \"name\": \"Utility\",\n            \"is_visible\": true,\n            \"url\": \"/utility/\",\n            \"children\": []\n        }\n    ],\n    \"meta\": {}\n}\n",
                              "header": {
                                "title": "Category Tree Response Example",
                                "anchor": "code-example-get-category-tree"
                              }
                            },
                            {
                              "type": "http",
                              "data": {
                                "headers": {
                                  "Accepts": "application/json",
                                  "Content-Type": "application/json",
                                  "X-Auth-Client": "{{CLIENT ID}}",
                                  "X-Auth-Token": "{{ACCESS TOKEN}}"
                                },
                                "method": "get",
                                "url": "https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/summary",
                                "body": "{\n  \"name\": \"BigCommerce Coffee Mug\",\n  \"price\": \"10.00\",\n  \"categories\": [\n    23,\n    21\n  ],\n  \"weight\": 4,\n  \"type\": \"physical\"\n}"
                              },
                              "header": {
                                "title": "Try It Now ",
                                "subtitle": "Get your store's Category Tree",
                                "anchor": "code-get-cateory-tree"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "type": "object",
                                "properties": {}
                              }
                            },
                            {
                              "type": "jsonSchema",
                              "data": {
                                "$ref": "./BigCommerce V3 API.oas2.yml#/definitions/CategoryTreeCollectionResponse"
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Scripts",
            "route": {
              "path": "/scripts"
            },
            "data": {
              "blocks": [
                {
                  "type": "text",
                  "data": "# Scripts"
                }
              ],
              "children": [
                {
                  "title": "New Subpage",
                  "route": {
                    "path": "/new-subpage"
                  }
                }
              ]
            }
          },
          {
            "title": "Price Lists",
            "route": {
              "path": "/price-lists"
            },
            "data": {
              "blocks": [
                {
                  "type": "text",
                  "data": "# Price Lists"
                }
              ],
              "children": [
                {
                  "title": "New Subpage",
                  "route": {
                    "path": "/new-subpage"
                  }
                }
              ]
            }
          },
          {
            "title": "Subscribers & Customers",
            "route": {
              "path": "/subscribers-customers"
            },
            "data": {
              "blocks": [],
              "children": [
                {
                  "title": "Customer Login API",
                  "route": {
                    "path": "/customer-login-api"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "text",
                        "data": "## What We'll Cover\n* [JWT](#jwt)\n* [OAuth Scope](#oauth-scope)\n* [Sample Code](#sample-code)\n* [Access URL](#access-url)\n* [Logging In a Customer](#logging-in-a-customer)\n* [Troubleshooting](#troubleshooting)"
                      },
                      {
                        "type": "text",
                        "data": "The Customer Login API enables single sign-on (SSO). It allows your apps to programmatically log in a storefront customer by using the login entry point URL: `/login/token/{token}`. Here, {token} must be a JSON Web Token (JWT) containing the parameters for the customer login request, signed by your application’s Oauth client secret.\n\nExample use cases for the Customer Login API include:\n\n* Merchants with a footprint across multiple sites and platforms\n* Social login applications\n* Apps that need to bypass the built-in customer login page in order to log customers in from a third-party system",
                        "header": {
                          "anchor": "customer-login-introduction"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## JWT\n\nJWT is a standard for verifying a login signature between two parties. For a full overview of the JWT standard, please see [JWT.IO](https://jwt.io/), where you can find links to client libraries (in many languages) that facilitate the generation and verification of JWT tokens. BigCommerce also supplies helper methods for generating login tokens in our [API Client Libraries](/api-docs/getting-started/about-api/new-subpage).\n\n### JWT Standard\n\nA valid JWT token is a string composed of three parts, separated by periods (“.”), which correspond to the encoded header, the encoded payload, and the signature.",
                        "header": {
                          "anchor": "jwt"
                        }
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1535390918772",
                        "header": {
                          "anchor": "example-jwt-token",
                          "title": "Example JWT Token"
                        },
                        "config": {
                          "centered": true,
                          "maxWidth": "800",
                          "maxHeight": "800"
                        }
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1535391044482",
                        "header": {
                          "title": "Key",
                          "anchor": "token-key"
                        },
                        "config": {
                          "centered": true,
                          "maxWidth": "400",
                          "maxHeight": "400"
                        }
                      },
                      {
                        "type": "text",
                        "data": "### Header\n\nThe header specifies the type of token (JWT) and the hashing algorithm.\n\n```\n{\n\t\"typ\": \"JWT\",\n\t\"alg\": \"HS256\" \n}\n```\n\nThe type and algorithm are always JWT and HS256. Those are the only values BigCommerce supports.",
                        "header": {
                          "anchor": "header"
                        }
                      },
                      {
                        "type": "text",
                        "data": "### Payload\nThe payload contains a series of claims that identify the application requesting the login, the store, and the customer to be logged in. Optionally, you can specify a redirect URL to direct the customer to a page other than the My Account page after login. \n\nOnce a request has is made with a given jti, it cannot be made again. This parameter is used to prevent replay attacks by malicious actors intercepting the request or obtaining it after the fact.\n\nThe request_ip field can be used as an additional security precaution, to prevent a malicious actor from intercepting the request and making it from another browser or system before you do. If you supply this value, BigCommerce checks the incoming request to ensure that it is being made from the stated IP address otherwise the request fails. We strongly encourage setting this IP address value, but doing so is optional, to support those cases where this information is not available.",
                        "header": {
                          "anchor": "payload"
                        }
                      },
                      {
                        "type": "code",
                        "data": "{\n\"iss\": \"Your app’s Oauth client ID\",\n\"iat\": \"timestamp for when the token was issued\",\n\"jti\": \"randomly generated string\",\n\"operation\": \"customer_login\",\n\"store_hash\": \"abc123\",\n\"customer_id\": 1234,\n\"redirect_to\": \"/account.php\",\n\"request_ip\": \"111.222.333.444\"\n}\n",
                        "header": {
                          "anchor": "example-payload",
                          "title": "Example Payload"
                        },
                        "config": {
                          "mode": "json"
                        }
                      },
                      {
                        "type": "text",
                        "data": "| Field Name | Type | Description |\n| --- | --- | --- |\n| iss | string | Indicates the token's issuer. This is your application's client ID, which is obtained during application registration in Developer Portal. |\n| iat | integer| Time when the token was generated. This is a numeric value indicating the number of seconds since the [Unix epoch](http://en.wikipedia.org/wiki/Unix_time).|\n| jti | string | Request ID string that must be unique across all requests made by your app. A UUID or other random string would be an appropriate value. Most libraries contain a method for generating a uuid. For testing a [UUID generator](https://www.uuidgenerator.net/) can be used, but it recommended to use built in libraries.|\n| operation | string | Must contain the string \"customer_login\". |\n| store_hash | string | Store hash identifying the store you are logging into. |\n| customer_id | integer | ID of the customer you are logging in, as obtained through the Customer API. |\n| redirect_to | string | Optional field containing a relative path for the shopper's destination after login. Will default to `/account.php`. |\n| request_ip | string | Optional field containing the expected IP address for the request. If provided, BigCommerce will check that it matches the browser trying to log in. If there is not a match, it will be rejected |",
                        "header": {
                          "anchor": "payload-fields"
                        }
                      },
                      {
                        "type": "text",
                        "data": "### Signature\n\nThe signature is created by signing the header and payload with the hashing algorithm specified in the header (HS256) and your application’s Client Secret. \n",
                        "header": {
                          "anchor": "signature"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## OAuth Scope\nYour OAuth API credentials must include the [customers_login](http://) scope.",
                        "header": {
                          "anchor": "oauth-scope"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Access URL\nAfter generating the JWT token, your app should immediately redirect the shopper’s browser to the following access point URL to log the customer into their account: `/login/token/{token}`\n\nExample:\n`https://storedomain.com/login/token/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9 .eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ`",
                        "header": {
                          "anchor": "access-url"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Logging in a Customer\nThe following tutorial will walk through creating a login token. We recommend scripting this process since the iat is invalid after 30 seconds. For the purpose of illustration, this tutorial will walk through creating a token manually using the debugger tool at JWT.io, although doing so can be tricky due to time constraints.  \n\n**Prerequisites**:\nClient ID and Client Secret generated from the store with the scope set to [Customers Login]().",
                        "header": {
                          "anchor": "logging-in-a-customer"
                        }
                      },
                      {
                        "type": "text",
                        "data": "### Create a JWT Token\n\n1. Run a /GET request against the [Customers](http://) resource (V2). Choose a customer and make note of the customer_id. ",
                        "header": {
                          "anchor": "create-jwt-token"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "type": "success",
                          "body": "If you are unsure how to make a /GET request see our tutorial on [making your first request]().",
                          "title": "Making a /GET request"
                        },
                        "header": {
                          "anchor": "making-a-get-request"
                        }
                      },
                      {
                        "type": "text",
                        "data": "2. Create the payload by filling in the PAYLOAD:DATA on jwt.io"
                      },
                      {
                        "type": "code",
                        "data": "{\n    \"iss\": \"1234r5t6y7u8i9o0p\",\n    \"iat\": 1535393113,\n    \"jti\": \"20b7c03e-00da-4d29-91bf-2aa06a57575b\",\n    \"operation\": \"customer_login\",\n    \"store_hash\": \"{store_hash}\",\n    \"customer_id\": 2,\n    \"redirect_to\": \"/account.php\"\n}",
                        "header": {
                          "title": "Create the Payload",
                          "anchor": "create-the-paylpad"
                        }
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6012/1535469059335",
                        "header": {
                          "anchor": "jwt-image",
                          "subtitle": "JTW.io fields"
                        },
                        "config": {
                          "centered": true,
                          "maxWidth": "800",
                          "maxHeight": "800"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "type": "error",
                          "title": "IAT Claim",
                          "body": "The iat claim is only good for 30 seconds. "
                        },
                        "header": {
                          "anchor": "iat-claim"
                        }
                      },
                      {
                        "type": "text",
                        "data": "3.  Add your Client Secret in the Verify Signature Section. Replace the text `your-256-bit-secret` with the Client Secret.\n4. Copy the token from the encoded box and paste at the end of the login/token url.  \n\n*https://store-url/login/token/generated-jwt-token*\n\n**Example**: \nhttps://storedomain.com/login/token/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9 .eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9 .TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n\n5. Paste the URL into the address bar.\n\nIf the request was successful then you will be logged in as the customer and directed to /account.php. If it was unsuccessful there will be a login attempt message and you will be directed to /login.php\n"
                      },
                      {
                        "type": "text",
                        "data": "## Sample Code\n\nCode to generate a valid JWT token for a storefront login request is provided in our API Client Libraries. The list items below link to the repositories maintained by BigCommerce:\n\n* [PHP Sample](https://github.com/bigcommerce/bigcommerce-api-php/blob/master/src/Bigcommerce/Api/Client.php#L421)\n* [Python Sample](https://github.com/bigcommerce/bigcommerce-api-python/blob/master/bigcommerce/customer_login_token.py)\n* [Ruby Sample](https://github.com/bigcommerce/bigcommerce-api-ruby/blob/master/examples/customers/customer_login.rb)\n\nClient libraries in many other languages are at JWT.io.",
                        "header": {
                          "anchor": "sample-code"
                        }
                      },
                      {
                        "type": "tabs",
                        "data": {
                          "children": [
                            {
                              "title": "PHP Sample",
                              "blocks": [
                                {
                                  "type": "code",
                                  "data": "    public static function getCustomerLoginToken($id, $redirectUrl = '', $requestIp = '')\n    {\n        if (empty(self::$client_secret)) {\n            throw new Exception('Cannot sign customer login tokens without a client secret');\n        }\n\n        $payload = array(\n            'iss' => self::$client_id,\n            'iat' => time(),\n            'jti' => bin2hex(random_bytes(32)),\n            'operation' => 'customer_login',\n            'store_hash' => self::$store_hash,\n            'customer_id' => $id\n        );\n\n        if (!empty($redirectUrl)) {\n            $payload['redirect_to'] = $redirectUrl;\n        }\n\n        if (!empty($requestIp)) {\n            $payload['request_ip'] = $requestIp;\n        }\n\n        return JWT::encode($payload, self::$client_secret, 'HS256');\n    }",
                                  "header": {
                                    "subtitle": "https://github.com/bigcommerce/bigcommerce-api-php/blob/master/src/Bigcommerce/Api/Client.php#L421",
                                    "title": "Client.php",
                                    "anchor": "php-sample"
                                  },
                                  "config": {
                                    "mode": "php"
                                  }
                                }
                              ]
                            },
                            {
                              "title": "Python Sample",
                              "blocks": [
                                {
                                  "type": "code",
                                  "data": "import os\nimport time\nimport uuid\nimport jwt\n\n\nclass CustomerLoginTokens(object):\n    @classmethod\n    def create(cls, client, id, redirect_url=None, request_ip=None):\n\n        # Get the client_secret needed to sign tokens from the environment\n        # Intended to play nice with the Python Hello World sample app\n        # https://github.com/bigcommerce/hello-world-app-python-flask\n        client_secret = os.getenv('APP_CLIENT_SECRET')\n\n        if not client_secret:\n            raise AttributeError('No OAuth client secret specified in the environment, '\n                                 'please specify an APP_CLIENT_SECRET')\n\n        try:\n            client_id = client.connection.client_id\n            store_hash = client.connection.store_hash\n        except AttributeError:\n            raise AttributeError('Store hash or client ID not found in the connection - '\n                                 'make sure an OAuth API connection is configured. Basic auth is not supported.')\n\n        payload = dict(iss=client_id,\n                       iat=int(time.time()),\n                       jti=uuid.uuid4().hex,\n                       operation='customer_login',\n                       store_hash=store_hash,\n                       customer_id=id\n                       )\n\n        if redirect_url:\n            payload['redirect_url'] = redirect_url\n\n        if request_ip:\n            payload['request_ip'] = request_ip\n\n        token = jwt.encode(payload, client_secret, algorithm='HS256')\n\n        return token.decode('utf-8')\n\n    @classmethod\n    def create_url(cls, client, id, redirect_url=None, request_ip=None):\n        secure_url = client.Store.all()['secure_url']\n        login_token = cls.create(client, id, redirect_url, request_ip)\n        return '%s/login/token/%s' % (secure_url, login_token)\n\n",
                                  "header": {
                                    "title": "customer_login_token.py",
                                    "subtitle": "https://github.com/bigcommerce/bigcommerce-api-python/blob/master/bigcommerce/customer_login_token.py",
                                    "anchor": "python-sample"
                                  },
                                  "config": {
                                    "mode": "python"
                                  }
                                }
                              ]
                            },
                            {
                              "title": "Ruby Sample",
                              "blocks": [
                                {
                                  "type": "code",
                                  "data": "require 'bigcommerce'\n\nBigcommerce.configure do |config|\n  config.store_hash = ENV['BC_STORE_HASH']\n  config.client_id = ENV['BC_CLIENT_ID']\n  config.client_secret = ENV['BC_CLIENT_SECRET']\n  config.access_token = ENV['BC_ACCESS_TOKEN']\nend\n\n# Get a customer\ncustomer = Bigcommerce::Customer.all(page: 1).first\n\n# Generate token login url\nputs customer.login_token",
                                  "header": {
                                    "subtitle": "https://github.com/bigcommerce/bigcommerce-api-ruby/blob/master/examples/customers/customer_login.rb",
                                    "title": "customer_login.rb",
                                    "anchor": "ruby-sample"
                                  },
                                  "config": {
                                    "mode": "ruby"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        "header": {
                          "title": "JWT Token Sample Code",
                          "anchor": "token-samples"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Troubleshooting\n\nTokens are valid for a very short time frame after being generated, so tokens should not be generated in advance. Instead, the application should generate the token and then immediately redirect the user’s browser to /login/token/{token}. \n\nIf the server generating the iat is out of sync, the login token will fail if the timestamp indicates a time in the future or an expired token.\n\nThe login URL can be visited only once. Once a GET request is run against the link, the token is invalidated. \n\nTokens can be validated or generated for testing purposes using the debugger at https://jwt.io/.",
                        "header": {
                          "anchor": "troubleshooting"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Current Customer API",
                  "route": {
                    "path": "/current-customer-api"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "text",
                        "data": "## Identifying Logged-In Customers Securely\n\nIf your application interacts dynamically with the BigCommerce storefront, and conveys information that is specific to a particular logged-in customer, you must confirm that customer’s identity within the insecure environment of the user’s browser.\n\nTo address this need, BigCommerce provides a Current Customer endpoint, which your app can access via JavaScript on the storefront. This endpoint returns a JWT with identifying details about the customer. The information is signed with your [OAuth client secret](http://)."
                      },
                      {
                        "type": "text",
                        "data": "### Example JavaScript\n\nBelow is example JavaScript that will access this JWT. To test the JWT functionality, you can install this JavaScript on your sandbox BigCommerce store. Your application’s Client ID must be included in the request (to identify the requesting application):"
                      },
                      {
                        "type": "code",
                        "data": "<script type=\"text/javascript\">\nfunction customerJWT() {  \n    var appClientId = \"**BC_CLIENT_ID**\"; // TODO: Fill this in with your app's client ID\n    var xmlhttp = new XMLHttpRequest();\n    xmlhttp.onreadystatechange = function() {\n        if (xmlhttp.readyState == 4 ) {\n           if (xmlhttp.status == 200) {\n               alert('Customer JWT:\\n' + xmlhttp.responseText);\n           }\n           else if (xmlhttp.status == 404) {\n              alert('Not logged in!');\n           }\n           else {\n               alert('Something went wrong');\n           }\n        }\n    };\n    xmlhttp.open(\"GET\", \"/customer/current.jwt?app_client_id=\"+appClientId, true);\n    xmlhttp.send();\n}\ncustomerJWT();\n</script>\n",
                        "header": {
                          "title": "Identify Logged In Customers",
                          "anchor": "identify-customers-script"
                        },
                        "config": {
                          "mode": "html"
                        }
                      },
                      {
                        "type": "text",
                        "data": "If you are logged into the storefront with a customer account, the above JavaScript should alert to the browser with a JWT token. If no customer is logged in, BigCommerce will return a 404 response, and you will see an error message. The JWT returned from this endpoint (example below) can be decoded on JWT.IO"
                      },
                      {
                        "type": "code",
                        "data": "{\n  \"customer\": {\n    \"id\": 4927,\n    \"email\": \"john.doe@gmail.com\",\n    \"group_id\": \"6\"\n  },\n  \"iss\": \"bc/apps\",\n  \"sub\": \"abc123\",\n  \"iat\": 1480831863,\n  \"exp\": 1480832763,\n  \"version\": 1,\n  \"aud\": \"6sv16tfx3j5gsopm42ss5dd67g2srvq\",\n  \"application_id\": \"6sv16tasdgr2b5hs5dd67g2srvq\",\n  \"store_hash\": \"abc123\",\n  \"operation\": \"current_customer\"\n}",
                        "header": {
                          "title": "Logged in Customers Response",
                          "anchor": "logged-in-customer-response"
                        },
                        "config": {
                          "mode": "json"
                        }
                      },
                      {
                        "type": "text",
                        "data": "By design, your application should send this token to the application’s server, validate it against your client secret, and then use it as a trusted indication of the logged-in customer’s identity, before displaying confidential information to them. \n\nAn end-to-end example, which displays a customer’s recently purchased products, is available in our [Ruby](https://github.com/bigcommerce/hello-world-app-ruby-sinatra/) and [PHP](https://github.com/bigcommerce/hello-world-app-php-silex/) sample apps."
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Widgets",
            "route": {
              "path": "/widgets"
            },
            "data": {
              "blocks": [
                {
                  "type": "text",
                  "data": "# Widgets"
                }
              ],
              "children": [
                {
                  "title": "New Subpage",
                  "route": {
                    "path": "/new-subpage"
                  }
                }
              ]
            }
          },
          {
            "title": "Cart",
            "route": {
              "path": "/cart"
            },
            "data": {
              "children": [
                {
                  "title": "Storefront Cart",
                  "route": {
                    "path": "/storefront-cart"
                  },
                  "data": {}
                },
                {
                  "title": "Server To Server Cart",
                  "route": {
                    "path": "/server-server-cart"
                  },
                  "data": {}
                }
              ]
            }
          },
          {
            "title": "Checkout",
            "route": {
              "path": "/checkout"
            },
            "data": {
              "children": [
                {
                  "title": "Storefront Checkout",
                  "route": {
                    "path": "/storefront-checkout"
                  },
                  "data": {}
                },
                {
                  "title": "Server To Server Checkout",
                  "route": {
                    "path": "/server-server-checkout"
                  },
                  "data": {}
                },
                {
                  "title": "Checkout SDK",
                  "route": {
                    "path": "/checkout-sdk"
                  },
                  "data": {}
                }
              ]
            }
          },
          {
            "title": "Orders",
            "route": {
              "path": "/orders"
            },
            "data": {
              "children": [
                {
                  "title": "New Subpage",
                  "route": {
                    "path": "/new-subpage"
                  }
                }
              ]
            }
          },
          {
            "title": "Shipping",
            "route": {
              "path": "/shipping"
            },
            "data": {
              "children": [
                {
                  "title": "New Subpage",
                  "route": {
                    "path": "/new-subpage"
                  }
                }
              ]
            }
          },
          {
            "title": "Taxes",
            "route": {
              "path": "/taxes"
            },
            "data": {
              "children": [
                {
                  "title": "New Subpage",
                  "route": {
                    "path": "/new-subpage"
                  }
                }
              ]
            }
          },
          {
            "title": "Payments",
            "route": {
              "path": "/payments"
            },
            "data": {
              "children": [
                {
                  "title": "New Subpage",
                  "route": {
                    "path": "/new-subpage"
                  }
                }
              ]
            }
          },
          {
            "title": "Store Information",
            "route": {
              "path": "/store-information"
            },
            "data": {
              "children": [
                {
                  "title": "New Subpage",
                  "route": {
                    "path": "/new-subpage"
                  }
                }
              ]
            }
          },
          {
            "title": "API Reference",
            "route": {
              "path": "/api-reference"
            },
            "data": {
              "children": [
                {
                  "title": "V3 API",
                  "route": {
                    "path": "/v3-api"
                  },
                  "data": {
                    "$ref": "./BigCommerce V3 API.oas2.yml"
                  }
                }
              ]
            }
          },
          {
            "title": "Legacy",
            "route": {
              "path": "/legacy"
            },
            "data": {}
          }
        ]
      }
    },
    "/changelog": {
      "title": "Changelog",
      "data": {
        "$ref": "./Changelog.html"
      }
    }
  },
  "theme": {
    "background": "#3550b6"
  },
  "logo": "https://cdn6.bigcommerce.com/s-qtmbtj/product_images/uploaded_images/bigcommerce-logomark-darkbg.png"
}