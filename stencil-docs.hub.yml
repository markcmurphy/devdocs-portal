title: Dev Center
header:
  nav:
    left:
      - title: API Docs
        path: /api-docs/getting-started/webhooks/about-webhooks
      - title: Stencil Docs
        path: /stencil-docs
      - title: Tools & Resources
        path: ''
      - title: Changelog
        path: /changelog
    right:
      - title: My Apps
        path: 'https://devtools.bigcommerce.com'
      - title: Create Account
        path: 'https://login.bigcommerce.com/signup'
pages:
  /:
    title: Developer Documentation
    data:
      $ref: ./Home.html
  /stencil-docs:
    title: Stencil Docs
    data:
      children:
        - title: Getting Started
          route:
            path: /getting-started
          data:
            children:
              - title: Stencil Quickstart Guide
                route:
                  path: /new-subpage
                data:
                  blocks:
                    - type: text
                      data: >-
                        ## Getting Started 

                        To try out Stencil's features for yourself, please
                        proceed to our:

                          * Getting Started/Transition Guide (for developers/designers migrating from Blueprint and other platforms.)
                          * Installation and Launch instructions.
                          * Development Quick Start tutorial
              - title: Transitioning to Stencil
                route:
                  path: /transitionining-to-stencil
                data:
                  blocks:
                    - type: text
                      data: '# Transitioning to Stencil'
                    - type: text
                      data: >-
                        Are you approaching Stencil from a different theming
                        framework, like BigCommerce's earlier Blueprint
                        framework? Or moving to this templating environment from
                        pure HTML and CSS-based design?


                        Use this article to identify your ideal method for
                        Stencil theme development and quickly ramp up on the
                        conventions that Stencil uses. It will cover the
                        following information:


                        * Choosing a Development Path

                        * Front-Matter Quick Start

                        * Handlebars Quick Start

                        * SEO Tips/Best Practices

                        * Blueprint-to-Stencil Features Map

                        * Interacting with the BigCommerce API

                        * Partnering with BigCommerce

                        * Next Steps
                    - type: text
                      data: >-
                        ## Choosing a Development Path


                        You have four increasingly hands-on options for
                        developing Stencil themes:

                        * Find a Design & Solutions Partner

                        * Light Customization – Graphical Theme Editor

                        * Light Customization – HTML/CSS

                        * Adapt a Stencil Theme, or Develop from Scratch
                    - type: text
                      data: >-
                        ##  Find a Design & Solutions Partner


                        If you prefer to have an expert collaborator customize
                        your theme, we recommend working with one of our
                        certified BigCommerce Design & Solutions Partners.
                        Please see these resources:


                        * [Partner
                        Directory](https://partners.bigcommerce.com/directory/search?i=75)

                        * [Working with a Design
                        Partner](https://support.bigcommerce.com/articles/Learning/Working-with-a-Design-Partner)
                        (Support Guide)
                    - type: text
                      data: >-
                        ## Light Customization – Graphical Theme Editor


                        A designer or store owner can customize many aspects of
                        an existing Stencil theme _without_ using specialized
                        development tools or techniques. Stencil's graphical
                        Theme Editor requires no coding at all. 


                        Yet Theme Editor still enables customization of a
                        theme's colors, typography, banners, headings, carousel,
                        and footer. It also enables customization of broader
                        layout characteristics, such as the number of products
                        displayed in various panels, category pages, and brand
                        pages.


                        image here


                        For details, please see:


                        * [Theme
                        Editor](https://support.bigcommerce.com/articles/Public/Using-the-Stencil-Theme-Editor/)
                        (Support article)

                        * [Stencil and the BigCommerce Control
                        Panel](https://www.youtube.com/watch?v=d2F6F8LJXzs&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0&index=2)
                        (Video introduction to Theme Editor)

                        * [Changing Your Store's
                        Theme](https://support.bigcommerce.com/articles/Learning/What-to-Consider-When-Changing-Your-Theme)
                        (Support guide)

                        * [Personalizing Your
                        Theme](https://support.bigcommerce.com/articles/Learning/Personalizing-your-New-Theme)
                        (Support guide)
                    - type: text
                      data: >-
                        ## Light Customization – HTML/CSS


                        If you are most comfortable working in HTML and CSS,
                        Stencil's Edit Theme Files feature allows you to
                        directly edit most of your theme's files. For details,
                        please see:


                        image here


                        * [Edit Theme
                        Files](https://support.bigcommerce.com/articles/Public/Editing-Stencil-Theme-Files)
                        (Support article)

                        * [Edit Theme
                        Files](https://www.youtube.com/watch?v=waJ1dg_dAh8&index=11&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0)
                        (Video overview of copying and editing a theme's files)


                        Follow these links if you'd like to recharge or refresh
                        your basic working knowledge of HTML and CSS:


                        * http://www.w3schools.com/html/    

                        * https://www.tutorialspoint.com/html/

                        * http://www.w3schools.com/css/   

                        * https://www.tutorialspoint.com/css/
                    - type: text
                      data: >-
                        ## Adapt a Stencil Theme, or Develop from Scratch


                        For complete control over a theme's appearance and logic
                        – including the ability to edit _all_ theme
                        configuration files – you will want to use the Stencil
                        CLI (command-line interface) framework. Stencil CLI is
                        described in detail in the remainder of this
                        documentation. 


                        To get up to speed on Stencil&#160;CLI's templating
                        conventions, please see the Quick Start sections just
                        below. Also see:


                        * [Getting Started with the Stencil
                        Framework](https://www.youtube.com/playlist?list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0)
                        (Videos)
                    - type: text
                      data: >
                        ## Front-Matter Quick Start


                        Stencil templates start with a section of "front matter"
                        where you can flexibly, and concisely, customize each
                        page's design and layout details. For example, a couple
                        of keystrokes will allow you to change the number of
                        products that shoppers will see on a given page and
                        panel.


                        This front-matter section uses conventions from YAML, a
                        simple, widely used markup language. Even if you haven't
                        used these conventions before, our internal
                        documentation will help you rapidly master them:


                        * [Front-Matter
                        Overview](https://stencil.bigcommerce.com/docs/using-yaml-front-matter)
                        of YAML syntax.
                    - type: text
                      data: >+
                        ## Handlebars Quick Start


                        Stencil uses the Handlebars templating language to
                        assemble dynamically changing content – drawn from the
                        BigCommerce store's catalog, and from other sources –
                        into the HTML pages displayed to shoppers. 


                        Handlebars' syntax is quite simple. It allows you to
                        accomplish powerful JavaScript operations with minimal
                        JavaScript code. To get up to speed on Handlebars
                        conventions, please see these third-party tutorials: 


                        * [Learn Handlebars in 10 Minutes or
                        Less](http://tutorialzine.com/2015/01/learn-handlebars-in-10-minutes/)

                        * [A Beginner’s Guide to
                        Handlebars](https://www.sitepoint.com/a-beginners-guide-to-handlebars/)

                        * [Getting Started with
                        Handlebars.js](http://blog.teamtreehouse.com/getting-started-with-handlebars-js)

                        * [Handlebars interactive
                        tutorial](http://tryhandlebarsjs.com/)


                        image here

                    - type: text
                      data: >+
                        ## SEO Tips/Best Practices


                        Search-engine optimization (SEO) helps translate an
                        elegant theme into a successful, high-conversion
                        storefront. Because so many shoppers reach online stores
                        through a search engine, a search-optimized site will be
                        more visible – attracting more traffic. 


                        The Stencil framework is [designed for high SEO
                        performance](https://www.bigcommerce.com/improve-organic-traffic/).
                        However, you will want to keep SEO in mind as you build
                        out each theme and storefront. For guidelines, please
                        see these BigCommerce support articles (which are a
                        series of intermediate to advanced chapters in our Guide
                        to SEO):


                        * [SEO Do's and
                        Don'ts](https://support.bigcommerce.com/articles/Learning/Things-to-Know/)

                        * [Developing a Keyword
                        Strategy](https://support.bigcommerce.com/articles/Learning/Developing-a-Keyword-Strategy/)

                        * [SEO Success
                        Essentials](https://support.bigcommerce.com/articles/Learning/Bigcommerce-SEO-Success-Essentials/)

                        * [Advanced SEO on
                        BigCommerce](https://support.bigcommerce.com/articles/Learning/Advanced-SEO-on-Bigcommerce/)


                        Please also see our:

                        * [Guide to Keyword
                        Research](https://support.bigcommerce.com/articles/Learning/Value-of-Keywords/)


                    - type: text
                      data: >-
                        ## Blueprint-to-Stencil Features Map 


                        If you've been developing themes on BigCommerce's
                        longstanding Blueprint framework, you might be
                        wondering: Where did my stuff go? This section is
                        designed to help you identify the Stencil counterparts
                        to familiar Blueprint components.


                        As a starting point, we suggest these resources:


                        * What to Consider When Changing Your Theme (Support
                        article)

                        * Stencil and the BigCommerce Control Panel (Video tour
                        of Blueprint-to-Stencil  changes in the BigCommerce
                        control panel)


                        For a more detailed map of Blueprint-to-Stencil options,
                        please use the table below to explore a Stencil theme's
                        pertinent subdirectories, along with links to related
                        documentation. 
              - title: Supported Browsers
                route:
                  path: /supported-browsers
                data:
                  blocks:
                    - type: text
                      data: '# Supported Browsers'
                    - type: text
                      data: >-
                        The following browsers are supported for BigCommerce
                        storefronts that use Stencil-based themes. The browsers
                        are sorted by popularity, with the most popular browsers
                        at the top. Please ensure that your theme functions
                        properly with all supported browsers.


                        ### Desktop Browsers


                        * Google Chrome (latest edition)

                        * Firefox (latest edition)

                        * Internet Explorer 10 and 11

                        * Safari (latest edition)

                        * Microsoft Edge (latest edition)


                        ## Mobile Browsers 


                        * Android Chrome browser (latest edition)

                        * iOS Safari browser (latest edition)
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          Browser support will cease to be offered if browser
                          usage falls below 2%.
                        title: Usage Support
                    - type: text
                      data: '## Next Steps:'
              - title: Stencil Technology Base
                route:
                  path: /stencil-technology-base
                data:
                  blocks:
                    - type: text
                      data: '# Stencil Technology Base'
                    - type: text
                      data: >
                        For complete control over theme development, here is a
                        brief summary of how you would interact with the Stencil
                        CLI (command-line interface) framework, while also
                        enabling further theme customization by merchants:


                        * Local Development

                        * Attributes

                        * Objects

                        * Syntax

                        * Event Hooks

                        * Design

                        * Customization

                        * Next Steps
                    - type: text
                      data: >-
                        ## Local Development 


                        Stencil is designed to support local development.
                        Stencil CLI runs on the
                        [Node.js](https://nodejs.org/en/) runtime environment.
                        Installing Node.js also provides the required npmpackage
                        manager.


                        ### More Info:

                        * Node.js and npm prequisites

                        * Installing Stencil CLI

                        * Stencil CLI options
                    - type: text
                      data: >-
                        ## Attributes 


                        Stencil's storefront template pages support
                        YAML-formatted "front matter" to invoke the attributes
                        you need, per page. Here is an example of a pagetop
                        invocation to display a "new products" section, while
                        limiting its contents to four products:


                        ```

                        ---

                        products:
                            new:
                                limit: 4
                        ---

                        ```


                        ### More Info:

                        * Attributes invocation overview

                        * Attributes reference 
                    - type: text
                      data: >-
                        ## Objects 


                        Stencil exposes data objects that allow your themes to
                        access various assets across a storefront. Here is an
                        example of a Stencil object &ndash; a very simple one,
                        which nevertheless references a second object:


                        Brand List Object


                        ### More Info: 

                          * Objects reference
                    - type: text
                      data: >-
                        ## Syntax 


                        Theme pages access Stencil objects using Handlebars, a
                        lightweight, open-source templating language. Handlebars
                        allows you to efficiently embed dynamic and conditional
                        logic onto your storefront pages. A Handlebars
                        expression begins with: {{ and ends with: }}


                        Below is a Handlebars if structure that tests for a
                        boolean variable named product.similar_by_views. If its
                        value is true, this snippet inserts a corresponding
                        component &ndash; a carousel display of "similar
                        products." It also specifies a six-column display:


                        ```

                        {{#if product.similar_by_views}}
                           {{> components/products/carousel products=product.similar_by_views columns=6}}
                        {{/if}}

                        ```


                        ###  More Info: 


                        * Handlebars

                        * Handlebars tutorial (requires Stencil installation)
                    - type: text
                      data: "## Event Hooks\n\nYour Stencil themes can access remote objects through data tags and event hooks, using the hooks to trigger defined events based on shopper behavior. To facilitate theme-building, BigCommerce provides the stencil-utils client-side JavaScript library for managing event hooks.\n\nIn the following code example from a Stencil theme, note the cart‑item‑add event. A theme could listen for this  event, to override the default form-submit behavior when a shopper adds product to their cart:\n\n```\n * Import all product-specific js \n */\n[...]\nimport utils from 'bigcommerce/stencil-utils';\n[...]\naddProductToCart() {\n    utils.hooks.on(<b>'cart-item-add'</b>, (event) =&gt; {\n        event.preventDefault();\n    });\n\t}\n```\n### More Info:\n* Event hooks reference\n* stencil-utils package introduction stencil-utils\n* API Reference"
                    - type: text
                      data: >-
                        ## Design 


                        Stencil supports Sass/SCSS upon installation, with your
                        choice of framework.


                        ### More Info: 

                        * Components/Design Patterns
                    - type: callout
                      data:
                        type: warning
                        title: Before You Customize
                        body: >-
                          The Stencil framework is designed to support your
                          incorporation of custom Sass/SCSS frameworks and
                          JavaScript libraries. However, BigCommerce does not
                          offer technical assistance on substitutions for, or
                          customized versions of, Stencil's default
                          dependencies.
              - title: Installation and Launch
                route:
                  path: /installation-and-launch
                data:
                  children:
                    - title: Mac OS Prerequisites
                      route:
                        path: /mac-os-prerequisites
                      data: {}
                    - title: Linux Prerequisities
                      route:
                        path: /linux-prerequisites
                      data: {}
                    - title: 'Windows Prerequisites '
                      route:
                        path: /windows-prerequisites
                      data: {}
                    - title: Installing Stencil CLI/Framework
                      route:
                        path: /new-page-sjfek
                      data:
                        blocks:
                          - type: text
                            data: >
                              ## Video Demonstrations

                              Watch Stencil senior developer Mick Ryan's brief
                              demonstration of Stencil installation and launch:
                    - title: Adding a Base Theme
                      route:
                        path: /adding-a-base-theme
                      data: {}
                    - title: Installing Javascript
                      route:
                        path: /new-subpage
                      data: {}
              - title: Authentication
                route:
                  path: /authentication
                data:
                  children:
                    - title: Creating an API Account
                      route:
                        path: /creating-an-api-account
                      data: {}
                    - title: Issuing Additional Tokens
                      route:
                        path: /issuing-additional-tokens
                      data: {}
                    - title: Revoking Tokens
                      route:
                        path: /revoking-tokens
                      data: {}
                    - title: Copying a Token to Initialize Stencil
                      route:
                        path: /copying-a-token-to-initializ
                      data: {}
                    - title: Launching Stencil
                      route:
                        path: /launching-stencil
                      data: {}
              - title: Authorizing and Initializing Stencil
                route:
                  path: /authorizing-and-initializing-stencil
                data:
                  children:
                    - title: Running Stencil Locally
                      route:
                        path: /new-subpage-4
                      data: {}
                    - title: Troubleshooting Your Setup
                      route:
                        path: /troubleshooting-your-setup
                      data: {}
                    - title: >-
                        Uninstalling/Reinstalling Stencil and Its Node
                        Prerequisites
                      route:
                        path: /new-subpage-2
                      data: {}
                    - title: Stencil CLI Options and Commands
                      route:
                        path: /stencil-cli-options-and-commands
                      data: {}
                    - title: Stencil Theme's Path Anatomy
                      route:
                        path: /stencil-themes-path-anatomy
                      data: {}
        - title: Advanced Installation Options
          route:
            path: /advanced-installation-options
          data:
            blocks:
              - type: text
                data: ''
            children:
              - title: 'Stencil Setup, Illustrated'
                route:
                  path: /stencil-setup
                data:
                  blocks:
                    - type: text
                      data: >-
                        The diagram below looks complex because it shows _all_
                        currently supported workflows for setting up Stencil.
                        However, for a typical initial setup – incorporating the
                        default Cornerstone reference theme – you would just
                        follow the black arrows straight down from top to
                        bottom.


                        Here are the color codes for each setup scenario, with
                        links to details about individual steps:


                        * Black: Basic initial setup, relying on default
                        Cornerstone theme. 

                        * Purple: Customize a theme downloaded from Theme
                        Marketplace (_other than_ Cornerstone). 

                        * Orange: Refresh Cornerstone from Theme Marketplace. 

                        * Green: Configure a custom JavaScript build system, to
                        avoid dependence on Webpack and jspm.

                        * Blue: Adds onto any of the preceding four scenarios.
                        If developing for a BigCommerce Blueprint production
                        store launched before Jan. 26, 2016, you must add one
                        extra step to enable Stencil in the store's control
                        panel.
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1532113466661
              - title: Navigating Your Setup Scenario
                route:
                  path: /navigating-your-setup-scenario
                data:
                  blocks:
                    - type: text
                      data: >-
                        # Navigating Your Setup Scenario


                        //information that doesn't need to be indexed


                        Below, each heading identifies one theme-development
                        scenario and lists the minimum installation steps you
                        will need to support that scenario:


                        * Initial Cornerstone-Based Setup

                        * Cornerstone (or Diamond/Queen) Refresh

                        * Downloaded Marketplace Theme

                        * Custom Build System

                        * Blueprint Store Launched before 1/26/2016
                    - type: callout
                      data:
                        type: warning
                        title: Notes
                        body: >-
                          * Some steps are optional for some theme-development
                          workflows. See below to identify the recommended
                          installation pathway for your own scenario. 


                          * After successful framework installation (or
                          reinstallation), all scenarios will link you to the
                          Preparing Your Store/Tokens Launching Stencil
                          subsections, to launch your theme locally against a
                          BigCommerce storefront.


                          * Our installation instructions have been tested on
                          Mac OS X Yosemite, Linux/Ubuntu v.14.04.4, and
                          Windows. Dependencies for other platforms/releases
                          will be added upon further testing.


                          * If you encounter any problems, please see the
                          Troubleshooting entry.
                    - type: text
                      data: >-
                        ## Initial Cornerstone-Based Setup 


                        Start developing based on BigCommerce's default
                        Cornerstone theme. This is a streamlined workflow, using
                        Webpack as its JavaScript build system. Steps required:


                        * Install all prerequisites

                        * Install Stencil CLI

                        * Clone default Cornerstone theme

                        * Install JavaScript utilities with npm

                        * Prepare Store and Tokens

                        * Proceed to Launching Stencil
                    - type: text
                      data: >-
                        ## Cornerstone Refresh 


                        Download and install a new version of Cornerstone from
                        BigCommerce's Theme Marketplace. Steps required:


                        * Assume all prerequisites installed and Stencil CLI
                        installed

                        * Download fresh Cornerstone .zip

                        * Reinstall JavaScript utilities with npm

                        * Repeat Launching Stencil
                    - type: text
                      data: >-
                        ## Downloaded Marketplace Theme 


                        Customize a theme (_other than_ Cornerstone, Diamond, or
                        Queen) downloaded from BigCommerce's Theme Marketplace.
                        This workflow requires BitBucket, and some earlier theme
                        versions require additional steps for the jspm
                        JavaScript build system. Steps required:


                        * Install all prerequisites

                        * Install Stencil CLI

                        * Set up BitBucket, download .zip, and install
                        JavaScript dependencies

                        * Install JavaScript utilities with npm

                        * Prepare Store and Tokens

                        * Proceed to Launching Stencil
                    - type: text
                      data: >-
                        ## Custom JavaScript Build System 


                        Bypass Webpack (and jspm) by substituting a custom
                        JavaScript build system. Steps recommended:


                        * Install all prerequisites

                        * Install Stencil CLI

                        * Clone default Cornerstone theme

                        * Install JavaScript utilities with npm

                        * Configure your custom build system

                        * Prepare Store and Tokensstore-tokens)

                        * Proceed to Launching Stencil
                    - type: text
                      data: >-
                        ## Blueprint Store Launched before 1/26/2016 


                        Enable Stencil development on a BigCommerce production
                        store that was launched with a Blueprint theme before
                        Jan. 26, 2016. Steps required:

                          * Follow the installation path above that corresponds to your development scenario.
                          * As a separate (and simple) procedure, enable Stencil in the store's control panel.
              - title: Downloading a Refreshed Copy of Cornerstone
                route:
                  path: /downloading-a-refreshed-copy-of-cornerstone
                data:
                  blocks:
                    - type: callout
                      data:
                        body: >-
                          The steps below are required only if you are
                          downloading a refreshed copy of Stencil's default
                          Cornerstone theme, from the BigCommerce Theme
                          Marketplace.


                          If you are downloading a different Marketplace theme
                          for customization, you must instead use the workflow
                          outlined at Downloading and Customizing Marketplace
                          Themes.


                          (Cornerstone, Diamond, and Queen use a simplified
                          workflow that bypasses BitBucket requirements, and
                          that replaces jspm with the Webpack build system. You
                          can configure Webpack's watched folders, or substitute
                          your own build system. For details, please see Webpack
                          and Build-System Options)


                          To keep any _custom or customized theme updated with
                          the new features that BigCommerce adds to Cornerstone,
                          please see our guidelines on Theme Updates and Version
                          Control.
                        title: Optional Workflow
                    - type: callout
                      data:
                        type: error
                        title: Back Up Before Reinstalling
                        body: >-
                          If you are reinstalling over a base theme on which you
                          have already begun development, first back up at least
                          your theme's .stencil file. This file contains your
                          store URL, your BigCommerce username and access
                          tokens, and other basic settings. Preserving those
                          settings will speed up initializing and launching the
                          new version.


                          To allow complete rollback, back up your whole
                          theme-name directory. (In a current default
                          installation, this directory is named.../cornerstone/.
                          Prior to March 2017, this directory's name defaulted
                          to .../stencil/.
                    - type: text
                      data: >-
                        ## Downloading the Cornerstone .zip 


                        Use these steps to download a refreshed version of the
                        Cornerstone, Diamond, or Queen theme from the store
                        control panel's Storefront area: 


                        * If you have not yet added Cornerstone (or
                        Diamond/Queen) to your store, start at Themes
                        Marketplace and add the theme.
                            
                        Go to Storefront -> My Themes.


                        Unpack the zipped theme to a working directory.


                        (This can be the directory where you have been
                        developing your theme, or a new directory.)


                        Reinstalling Dependencies and Relaunching 


                        Ensure that your theme includes all current
                        dependencies, by repeating JavaScript
                        Utilitiesinstallation.
                          
                        Repeat the steps listed in the Launching Stencil
                        subsection


                        Next, ensure that your theme includes all current
                        dependencies by re-running npm, as follows:


                        Navigate to your theme directory. This example assumes
                        that this target directory has the default name stencil


                        `cd stencil`


                        `npm install`


                        You are now ready to resume development of your theme.
                        Please proceed to Launching Stencil


                        Later, when you are ready to upload your customized
                        theme to a store, you should follow the zipping and
                        uploading instructions in Bundling and Submitting a
                        Theme and Troubleshooting Theme Uploads.
              - title: Theme Updates and Version Control
                route:
                  path: /theme-updates-and-version-control
                data:
                  blocks:
                    - type: text
                      data: '# Theme Updates and Version Control'
                    - type: text
                      data: >-
                        This page offers version-control best practices for:

                        * Isolating Customizations for Easier Updates

                        * Synchronizing with Cornerstone Theme Updates

                        * Synchronizing Updates for Multiple Themes


                        Each section progresses from simpler to more-complex
                        scenarios.
                    - type: callout
                      data:
                        title: Distributed Version Control via Git
                        body: >-
                          Many techniques discussed below rely on GitHub's
                          _distributed version control_ model and features. For
                          the underlying principles, please see [Git's own
                          documentation](https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control).
                    - type: text
                      data: >-
                        ## Isolating Customizations for Easier Updates


                        How best to set up your customized Stencil theme to
                        smoothly incorporate future updates in its base theme?
                        We're gratefully sharing these guidelines from Ken
                        Utting, Web Developer for BigCommerce client
                        [goruck.com](https://www.goruck.com/). His scenario
                        (slightly edited here) addresses maintaining a single
                        custom theme that is based on a third-party Marketplace
                        theme. But&#160;these guidelines also apply to
                        maintaining one, or multiple, themes based on Stencil's
                        default Cornerstone theme.
                    - type: text
                      data: "## Best Practices for Handling Theme Updates\n\nWe've made significant changes to our theme, and one principle that I've found successful is isolating my changes as much as possible. I try to put my changes into their own files, whether they're changes to templates, JavaScript, or SCSS. \n\nI also name all my files, CSS classes and identifiers, and JavaScript methods and classes with a `gr-` prefix (as an abbreviation for our company, GORUCK LLC). Also, any changes I make to standard theme files are identified with a comment, such as: \n\n`Go Ruck Customization`\n\t\t\nFor example, I have a file in `assets/scss/` named `gr-theme.scss`. All of the styles I've added to the theme are either in this file, or imported by this file. So for styling, my only changes to the theme itself are in a handful of places where I had to change an existing theme style (identified with a comment), plus this one line in `templates/layout/base.html`:\n\n`{{{stylesheet '/assets/css/gr-theme.css'}}}`\n\nI've found that this approach provides several advantages: \n\n* It makes it easier to distinguish my custom code from code supplied by the default theme.\n* It makes it less likely that my code will get intermingled with the standard theme code. This, in turn, prevents my code from unexpectedly being affected by theme updates.\n* It makes it easier to merge base-theme updates into my theme code.\n\n##### Comparing and Merging Apples to Apples\n\nHaving isolated my changes as much as I can, I identify theme changes by comparing stock (base) themes, rather than by comparing base themes to my customized theme. When a new version of the theme is released, I download the .zip file from the BigCommerce control panel. \n\nI then use a desktop diff tool (Beyond Compare) to \ncompare the new version to the .zip file of the theme's previous release. I ignore changes in the .zip file's\n `meta/` and `parsed/` folders, and to its `manifest.json`, and do a `Compare Contents` on the rest of the files.\n\nUltimately, I need to examine the changes carefully, to identify any changes that might affect, or be affected by, my customizations. And I need to test thoroughly. But comparing the stock themes to each other reduces the number of changes I have to examine. \n\nAlso, because I isolate my changes, most of the theme changes can be copied directly into the corresponding file in my customized theme. In practice, this means that I can limit my testing to the areas affected by changes in the standard theme, rather than having to re-test all my own changes.\n\nI personally find that it is also helpful to migrate *every* theme update into my customized version, as the update is released. If I were to wait, and to allow changes to accumulate and become more substantial, I think it would be more difficult to adequately test – and correctly integrate – the changes. Similarly, I'm grateful to the developer of our base theme (Pixel Union) for updates that have always made small, incremental changes.\n\n##### Dynamic Content Injection\n\nFinally, we've also come up with a variety of techniques for dynamically placing content on a page. For example, we can dynamically add tabs to a product page, using content stored on our WebDAV. Similarly, we can inject content from an external file into the body of a page. This allows us to put something that appears in many places, like a sizing chart, in a single place where it can be easily updated. \n\nOr, we can use the BigCommerce control panel's various HTML editors – for Products, Categories, and Content > Web Pages – to inject content into predefined \"dropzones\" (custom div's). This allows us to generate a wide variety of content pages using a single custom template.\n\nAll of these techniques move content out of the theme, minimizing the complexity of merging base-theme updates into our customized theme. For details on how we use them, please see Dynamic Content Rendering on Stencil Storefronts."
              - title: Configuring Webpack or a Custom Build System
                route:
                  path: /configuring-webpack
                data:
                  blocks:
                    - type: text
                      data: '# Configuring Webpack or a Custom Build System'
                    - type: text
                      data: >-
                        ## Webpack, jspm, or Other JavaScript Managers


                        Stencil themes are Node.js applications, and therefore
                        contain dependencies on other JavaScript libraries. For
                        Stencil's default Cornerstone theme, we provide the
                        [Webpack](https://webpack.github.io/docs/) build manager
                        to handle these dependencies. 


                        As you develop a theme based on Cornerstone, you have
                        options to reconfigure Webpack's watched folders, and to
                        even substitute a different build system. These options
                        are explained below.


                        All themes currently in the BigCommerce Theme
                        Marketplace use Webpack. However, older versions of
                        certain themes used the jspm JavaScript dependency
                        manager instead of Webpack. Please see this page to
                        determine (by version number) whether you are developing
                        based on one of these earlier versions, and to find the
                        required jspm setup procedures.
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          BigCommerce does not offer technical assistance on
                          substitutions for the default dependencies listed in
                          this documentation.
                        title: Limited Support
                    - type: text
                      data: >-
                        ## Webpack-Specific Configuration


                        The following Webpack configuration options can aid in
                        troubleshooting.


                        ### More-Verbose JavaScript Diagnostics


                        If JavaScript errors in your browser's developer tools
                        are not reporting filenames and line numbers, try
                        changing your `webpack.conf.js` file's
                        [sourcemap](https://webpack.js.org/guides/build-performance/#devtool)
                        entry from:


                        ```

                        devtool: 'source-map'

                        ```

                        to:


                        ```

                        devtool: 'eval-source-map'

                        ```


                        The `eval-source-map` option is slower, but more
                        verbose. This [Webpack Devtool
                        Configuration](https://webpack.js.org/configuration/devtool/)
                        article provides an overview of all devtool options and
                        details regarding each.



                        ## Build-System Configuration File


                        To take advantage of automatic JavaScript bundling and
                        browser refresh, Stencil themes require the
                        [`stencil.conf.js`](https://github.com/bigcommerce/cornerstone/blob/master/stencil.conf.js)
                        file. To enable a custom build system, you would need to
                        edit this file.


                        Within `stencil.conf.js`, Stencil CLI looks for the
                        exported `watchOptions` object, and `development` and
                        `production` callbacks, shown below. 


                        Let's take a closer look at each of these three
                        references.


                        ## Watched Folders: watchOptions Object


                        The `watchOptions` object defines directories for the
                        [Browsersync](https://browsersync.io/docs) preview
                        engine to watch or ignore, in two respective lists. You
                        are free to edit these lists:


                        ```

                        /**
                         * Watch options for the core watcher
                         * @type {{files: string[], ignored: string[]}}
                         */
                        var watchOptions = {
                            // If files in these directories change, reload the page.
                            files: [
                                '/templates',
                                '/lang'
                            ],

                            //Do not watch files in these directories
                             ignored: [
                                '/assets/scss',
                                '/assets/less',
                                '/assets/css',
                                '/assets/dist',
                            ]
                        };

                        ```


                        ## JavaScript Rebundling: development Function


                        Upon the command-line instruction `stencil start`,
                        Stencil CLI will look for and call the `development`
                        function. 


                        In the base Cornerstone theme, we have created a Webpack
                        watcher to trigger a browser reload whenever theme edits
                        cause JavaScript to be rebundled to the theme's
                        `bundle.js` file. This watcher uses options configured
                        in the webpack.conf.js file passed by `webpackConfig`.
                        So a JavaScript rebuild will refresh the browser:


                        ```

                        function development() {
                            webpack(webpackConfig).watch({}, err => {
                                if (err) {
                                    console.error(err.message, err.details);
                                }

                                process.send('reload');
                            });
                        }

                        ```


                        ## Theme Packaging: production Function 


                        When you issue the command-line instruction `stencil
                        bundle`, to process and package a completed theme for
                        upload to a store, Stencil CLI will look for and call
                        the `production` function. This function passes a
                        callback as its first argument, to support asynchronous
                        builds. 


                        The callback must be invoked somewhere inside the
                        `production` function, to notify Stencil CLI that the
                        theme-specific build has completed and is ready to
                        package:


                        ```

                        function production() {
                            webpackConfig.watch = false;
                            webpackConfig.devtool = false;
                            webpackConfig.plugins.push(new webpack.LoaderOptionsPlugin({
                                minimize: true,
                            }));
                            webpackConfig.plugins.push(new webpack.optimize.UglifyJsPlugin({
                                comments: false,
                                compress: {
                                    warnings: true,
                                },
                                sourceMap: false, // Toggle to turn on source maps.
                            }));

                            webpack(webpackConfig).run(err => {
                                if (err) {
                                    console.error(err.message, err.details);
                                    throw err;
                                }

                                process.send('done');
                            });
                        }


                        if (process.send) {
                            // running as a forked worker
                            process.on('message', message => {
                                if (message === 'development') {
                                    development();
                                }

                                if (message === 'production') {
                                    production();
                                }
                            });

                            process.send('ready');
                        }

                        ```
        - title: Development Quickstart
          route:
            path: /new-page-hyafc
          data:
            children:
              - title: Creating a New Theme
                route:
                  path: /new-subpage-4
                data: {}
              - title: Making Basic Design and Layout Changes
                route:
                  path: /new-subpage-3
                data: {}
              - title: config.json-resource Interactions
                route:
                  path: /new-subpage-2
                data: {}
              - title: Customizing Javascript
                route:
                  path: /new-subpage-1
                data: {}
              - title: Remdering HTML with Ajax
                route:
                  path: /new-subpage
                data: {}
              - title: Testing and Debugging Your Theme
                route:
                  path: /new-subpage
                data: {}
              - title: Managing Theme Variations
                route:
                  path: /new-subpage
                data: {}
        - title: Theme Editor Configuration
          route:
            path: /theme-editor-configuration
          data:
            children:
              - title: What is the Stencil Theme Editor?
                route:
                  path: /new-subpage-3
                data: {}
              - title: Configuration Overview
                route:
                  path: /new-subpage-2
                data: {}
              - title: config.json Metedata
                route:
                  path: /new-subpage-1
                data: {}
              - title: Preparing Thumbnail Images
                route:
                  path: /new-subpage
                data: {}
              - title: scheme.json/Theme Editor Metadata
                route:
                  path: /new-subpage
                data: {}
              - title: Preparing Thumbnail Images
                route:
                  path: /new-subpage
                data: {}
              - title: Theme Editor Troubleshooting
                route:
                  path: /new-subpage
                data: {}
        - title: Technology Stack
          route:
            path: /new-page-sj3dr
          data:
            children:
              - title: Technology Overview
                route:
                  path: /new-subpage
                data: {}
              - title: 'Templates, Partials, and Compilation'
                route:
                  path: /new-subpage-1
                data: {}
        - title: Shipping A Theme
          route:
            path: /shipping-a-theme
          data:
            children:
              - title: Shrinking Your Theme by Excluding Static Assets
                route:
                  path: /new-subpage
                data: {}
              - title: Staging a theme for CDN Delivery
                route:
                  path: /new-subpage-1
                data: {}
              - title: Bundling and Submitting a Theme
                route:
                  path: /new-subpage-2
                data: {}
              - title: Adding Recaptcha V2
                route:
                  path: /new-subpage-3
                data: {}
              - title: Troubleshooting Theme Uploads
                route:
                  path: /new-subpage-4
                data: {}
        - title: Front-Matter Attributes
          route:
            path: /front-matter-attributes
          data:
            children:
              - title: Front Matter Reference
                route:
                  path: /new-subpage
                data: {}
        - title: Handlebars Syntax and Helpers
          route:
            path: /handlebars-syntax-and-helpers
          data:
            children:
              - title: Handlebars Helpers Reference
                route:
                  path: /handlebars-helpers-reference
                data:
                  blocks:
                    - type: text
                      data: '# Handlebars Helpers Reference'
                    - type: text
                      data: >
                        ## {{itemAt}}


                        _Block helper that returns the item at the specified
                        index._


                        #### Parameters


                        * `array` {Array}

                        * `idx` {Number}

                        * `returns` {any} `value`


                        #### {{itemAt}} Example


                        Given the array `['a', 'b', 'c']`:


                        ```

                        {{itemAt array 1}}

                        //=> 'b'


                        ```

                        ---


                        ## {{join}}


                        The `join` helper is custom to Stencil. It joins an
                        array of string items, with separators. It returns a
                        string. 


                        #### Parameters


                        - `values`: {Array}

                        - `separator`: {String}

                        - `limit=<number>`: An optional limit.


                        #### {{join}} Example


                        insert join example


                        ---


                        ### {{limit}}


                        The `limit` helper is custom to Stencil. It limits the
                        number of items returned from an array variable, and
                        returns a new array.


                        #### Parameters


                        - `data`: {Array}

                        - `limit`: {Number}


                        #### {{limit}} Example 


                        Assume that `{{cart.items}}` would return 10 items. You
                        could use this helper to limit that behavior to only the
                        first four items, by specifying: 


                        ```

                        {{limit cart.items 4}}

                        ```


                        ---


                        ### {{pluck}}


                        The `pluck` helper is custom to Stencil. For one or more
                        specified search key(s), it retrieves corresponding
                        values from some or all elements in a specified
                        collection. 


                        The `pluck` helper returns the retrieved values in a
                        comma-separated string. This helper's general form is:


                        ```

                        {{pluck ([limit] <collection> [<limit-value>])
                        '<search-key>'}}

                        ```


                        #### Parameters


                        - `limit`, `limit-value`: Optional parameters to limit
                        the number of results returned.

                        - `collection`: The collection to search.

                        - `search-key`: The string to search for.



                        #### {{pluck}} Example 1


                        Assume that the `categories` collection contains:


                        ```

                        categories: [
                          { "id": 1, "name": "Bakeware" },
                          { "id": 2, "name": "Cookware" },
                          { "id": 3, "name": "Cutlery" }
                        ]

                        ```


                        In this case, this Handlebars statement:


                        ```

                        {{pluck (limit categories 2) 'name'}}

                        ```


                        ...would return:


                        ```

                        "Bakeware,Cookware"

                        ```


                        #### {{pluck}} Example 2


                        If the `categories` themselves each contained an image
                        object, then you could use dot notation to access that
                        image object's children:


                        ```

                        categories: [
                          { "id": 1, "name": "Bakeware", "image": { "data": "http://...", "alt": "Bakeware image"} },
                          { "id": 2, "name": "Cookware" "image": { "data": "http://...", "alt": "Cookware image"} },
                          { "id": 3, "name": "Cutlery" "image": { "data": "http://...", "alt": "Cutlery image"} }
                        ]

                        ```


                        In this case, this Handlebars statement:


                        ```

                        {{pluck (limit categories 2) 'image.data'}}

                        ```


                        ...would return a comma-separated list of image URLs.


                        ---



                        ## <a name="array_std"></a> Standard Array Helpers


                        The following standard array helpers are supported on
                        the Stencil framework.


                        ### <a name="after"></a> {{after}}


                        Returns all of the items in an array after the specified
                        index. Opposite of [before](#before).


                        Given the array `['a', 'b', 'c']`:


                        #### Parameters


                        * `array` {Array}: Collection.

                        * `n` {Number}: Starting index (number of items to
                        exclude).

                        * `returns` {Array}: Array exluding `n` items.


                        #### Example


                        ```handlebars

                        {{after array 1}}

                        //=> '["c"]'

                        ```


                        ---


                        ## {{arrayify}}


                        Casts the given `value` to an array.


                        #### Parameters


                        * `value` {any}

                        * `returns` {Array}


                        #### {{arrayify}} Example


                        ```handlebars

                        {{arrayify "foo"}}

                        //=> '["foo"]'

                        ```

                        ---


                        ## <a name="before"></a> {{before}}


                        Returns all of the items in the collection before the
                        specified count. Opposite of [after](#after).


                        Given the array `['a', 'b', 'c']`:


                        #### Parameters


                        * `array` {Array}

                        * `n` {Number}

                        * `returns` {Array}: Array excluding items after the
                        given number.


                        #### {{before}} Example


                        ```handlebars

                        {{before array 2}}

                        //=> '["a", "b"]'

                        ```


                        ---


                        ## {{eachIndex}}


                        #### Parameters


                        * `array` {Array}

                        * `options` {Object}

                        * `returns` {String}


                        #### {{eachIndex}} Example


                        ```handlebars

                        {{#eachIndex collection}}
                          {{item}} is {{index}}
                        {{/eachIndex}}

                        ```


                        ---


                        ### {{filter}}


                        Block helper that filters the given array. Renders the
                        block for values that evaluate to `true`; otherwise,
                        returns the inverse block.


                        #### Parameters


                        * `array` {Array}

                        * `value` {any}

                        * `options` {Object}

                        * `returns` {String}


                        #### {{filter}} Example


                        ```handlebars

                        {{#filter array "foo"}}AAA{{else}}BBB{{/filter}}

                        //=> 'BBB

                        ```


                        ---


                        ## <a name="first"></a> {{first}}


                        Returns the first item, or first `n` items, of an array.


                        #### Parameters


                        * `array` {Array}

                        * `n` {Number}: Number of items to return, starting at
                        `0`.

                        * `returns` {Array}


                        #### {{first}} Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{first array 2}}

                        //=> '["a", "b"]'

                        ```


                        ---



                        ### {{forEach}}


                        Iterates over each item in an array, and exposes the
                        current item in the array as context to the inner block.
                        In addition to the current array item, the helper
                        exposes the following variables to the inner block:


                        * `index`

                        * `total`

                        * `isFirst`

                        * `isLast`


                        Also, `@index` is exposed as a private variable, and
                        additional private variables may be defined as hash
                        arguments.


                        #### Parameters


                        * `array` {Array}

                        * `returns` {String}


                        #### {{forEach}} Example


                        ```js

                        var accounts = [

                        {'name': 'John', 'email': 'john@example.com'},

                        {'name': 'Malcolm', 'email': 'malcolm@example.com'},

                        {'name': 'David', 'email': 'david@example.com'}

                        ];


                        // example usage

                        // {{#forEach accounts}}

                        //   <a href="mailto:{{ email }}" title="Send an email
                        to {{ name }}">

                        //     {{ name }}

                        //   </a>{{#unless isLast}}, {{/unless}}

                        // {{/forEach}}

                        ```


                        ---


                        ### {{inArray}}


                        Block helper that renders the block if an array has the
                        given `value`. Optionally, you can specify an inverse
                        block to render when the array does not have the given
                        value.


                        #### Parameters


                        * `array` {Array}

                        * `value` {any}

                        * `options` {Object}

                        * `returns` {String}


                        #### {{inArray}} Example


                        Given the array `['a', 'b', 'c']`:


                        ```handlebars

                        {{#inArray array "d"}}
                          foo
                        {{else}}
                          bar
                        {{/inArray}}

                        //=> 'bar'

                        ```


                        ---


                        ### {{isArray}}


                        Returns true if `value` is an es5 array.


                        #### Parameters


                        * `value` {any}: The value to test.

                        * `returns` {Boolean}


                        #### Example


                        ```handlebars

                        {{isArray "abc"}}

                        //=> 'false'

                        ```


                        ### <a name="last"></a> {{last}}


                        Returns the last item, or last `n` items, of an array.
                        Opposite of [first](#first).


                        #### Parameters


                        * `array` {Array}

                        * `n` {Number}: Number of items to return, starting with
                        the last item.

                        * `returns` {Array}


                        #### Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{last array 2}}

                        //=> '["d", "e"]'

                        ```


                        ### {{lengthEqual}}


                        Block helper that compares the length of the given array
                        to the number passed as the second argument. If the
                        array length is equal to the given `length`, the block
                        is returned. Otherwise, you have the option of returning
                        an inverse block.


                        #### Parameters


                        * `array` {Array}

                        * `length` {Number}

                        * `options` {Object}

                        * `returns` {String}


                        #### Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{#lengthEqual array 10}}AAA{{else}}BBB{{/lengthEqual}}

                        //=> 'BBB'

                        ```


                        ### {{map}}


                        Returns a new array, created by calling `function` on
                        each element of the given `array`.


                        #### Parameters


                        * `array` {Array}

                        * `fn` {Function}

                        * `returns` {String}


                        #### Example


                        Given an array `['a', 'b', 'c']`:


                        ```js

                        // register `double` as a helper

                        function double(str) {
                          return str + str;
                        }

                        // then used like this:

                        // {{map array double}}

                        //=> '["aa", "bb", "cc"]'

                        ```


                        ### {{some}}


                        Block helper that returns the block *if* the callback
                        returns true for some value in the given array.


                        #### Parameters


                        * `array` {Array}

                        * `cb` {Function}: Callback function.

                        * {Options}: Handlebars-provided options object.

                        * `returns` {Array}


                        #### Example


                        Given the array `[1, 'b', 3]`:


                        ```handlebars

                        {{#some array isString}}
                          Render me if the array has a string.
                        {{else}}
                          Render me if it doesn't.
                        {{/some}}

                        //=> 'Render me if the array has a string.'

                        ```


                        ### {{sort}}


                        Sorts the given `array`. If an array of objects is
                        passed, you may optionally pass (as the second argument)
                        a `key` to sort on. Alternatively, you may pass a
                        sorting function as the second argument.


                        #### Parameters


                        * `array` {Array}: The array to sort.

                        * `key` {String|Function}: The object key to sort by, or
                        a sorting function.


                        #### Example


                        Given an array `['b', 'a', 'c']`:



                        ```handlebars

                        {{sort array}}

                        //=> '["a", "b", "c"]'

                        ```


                        ### {{sortBy}}


                        Sorts an `array`. If an array of objects is passed, you
                        may optionally pass a `key` to sort on as the second
                        argument. You may alternatively pass a sorting function
                        as the second argument.


                        #### Parameters


                        * `array` {Array}: The array to sort.

                        * `props` {String|Function}: One or more properties to
                        sort by, or sorting functions to use.


                        #### {{sortBy}} Example


                        Given an array `[{a: 'zzz'}, {a: 'aaa'}]`:


                        ```handlebars

                        {{sortBy array "a"}}

                        //=> '[{"a":"aaa"}, {"a":"zzz"}]'

                        ```

                        ---


                        ### <a name="withAfter"></a> {{withAfter}}


                        Use the items in the array, _after_ the specified index,
                        as context inside a block. Opposite of
                        [withBefore](#withBefore).


                        #### Parameters


                        * `array` {Array}

                        * `idx` {Number}

                        * `options` {Object}

                        * `returns` {Array}


                        #### {{withAfter}} Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{#withAfter array 3}}
                          {{this}}
                        {{/withAfter}}

                        //=> "de"

                        ```


                        ### <a name="withBefore"></a> {{withBefore}}


                        Use the items in the array, _before_ the specified
                        index, as context inside a block. Opposite of
                        [withAfter](#withAfter).


                        #### Parameters


                        * `array` {Array}

                        * `idx` {Number}

                        * `options` {Object}

                        * `returns` {Array}


                        #### {{withBefore}} Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{#withBefore array 3}}
                          {{this}}
                        {{/withBefore}}

                        //=> 'ab'

                        ```


                        ### <a name="withFirst"></a> {{withFirst}}


                        Uses a collection's first item inside a Handlebars block
                        expression. Opposite of [withLast](#withLast).


                        #### Parameters


                        * `array` {Array}

                        * `idx` {Number}

                        * `options` {Object}

                        * `returns` {String}


                        #### {{withFirst}} Example


                        Given the array `['a', 'b', 'c']`:


                        ```handlebars

                        {{#withFirst array}}
                          {{this}}
                        {{/withFirst}}

                        //=> 'a'

                        ```
        - title: Stencil Object Model Reference
          route:
            path: /stencil-object-model-reference
          data:
            children:
              - title: Stencil Objects
                route:
                  path: /stencil-objects
                data:
                  children:
                    - title: Global Objects & Properties
                      route:
                        path: /global-objects
                      data:
                        children:
                          - title: Banners
                            route:
                              path: /banners
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description: </b>Elements of marketing
                                    banners at page’s top and/or bottom<br>


                                    <b>Handlebars Expressions:</b> <span
                                    class="inline-code">{{banner}}</span>, <span
                                    class="inline-code">{{{banner}}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">banners</td>
                                        <td class="">Blocks of static HTML content to define banners</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">top</span></td>
                                        <td class="">Array of HTML content/strings, for custom top-banner content; banners are populated from the BigCommerce control panel</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">bottom</span></td>
                                        <td class="">Array of HTML content/strings, for custom bottom-banner content; banners are populated from the BigCommerce control panel</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: Banner
                                  config: {}
                                - type: callout
                                  data:
                                    type: warning
                                    body: >-
                                      Where a banner contains HTML, the <span
                                      class="inline-code">banner</span> helper
                                      must be placed in triple braces, as in
                                      this 

                                      example: <span
                                      class="inline-code">{{{banner}}}</span>.
                                      (Double braces would escape the HTML.)
                                    title: Handlebars Formatting Exception
                          - title: Breadcrumbs
                            route:
                              path: /breadcrumbs
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description:</b> Defines a page's
                                    breadcrumbs – available on virtually all
                                    pages that have a breadcrumb trail<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{breadcrumbs}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">name</td>
                                        <td class="">Displayed name of this breadcrumb element</td>
                                      </tr>
                                      <tr>
                                        <td class="">url</td>
                                        <td class="">URL of this breadcrumb element</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: Stencil-Bread-ref
                          - title: Categories
                            route:
                              path: /categories
                            data:
                              blocks:
                                - type: text
                                  data: >-
                                    <A NAME="Categories"></a>

                                    <b>Description:</b> A list of all product
                                    categories shown in the current page
                                    context; default sorting is by category id,
                                    from lowest to highest<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{categories}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">id</td>
                                        <td class="">ID of the top-level category listed</td>
                                      </tr>
                                      <tr>
                                        <td class="">name</td>
                                        <td class="">Name of the top-level category</td>
                                      </tr>
                                      <tr>
                                        <td class="">description</td>
                                        <td class="">Description of the top-level category (optional &ndash; when requested in front matter)</td>
                                      </tr>
                                      <tr>
                                        <td class="">url</td>
                                        <td class="">URL to the category page</td>
                                      </tr>
                                      <tr>
                                        <td class="">count</td>
                                        <td class="">Number of products in this category</td>
                                      </tr>
                                      <tr>
                                        <td class="">children</td>
                                        <td class="">List of child categories for this top-level category</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> id</span></td>
                                        <td class="">ID of the child category</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> name</span></td>
                                        <td class="">Name of the child category</td>
                                      </tr>
                                        <tr>
                                        <td class=""><span class="indent1"> description</span></td>
                                        <td class="">Description of the child category (optional &ndash; when requested in front matter)</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> url</span></td>
                                        <td class="">URL of the child category</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> count</span></td>
                                        <td class="">Number of products in this child category</td>
                                      </tr>
                                    </table>
                          - title: Currency Selector
                            route:
                              path: /currency-selector
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description:</b> A list of all supported
                                    currencies, and the currency that is
                                    actively in use in the storefront<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{currency_selector}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">active_currency_id</td>
                                        <td class="">ID of the currency actively in use in the storefront</td>
                                      </tr>
                                      <tr>
                                        <td class="">active_currency_flag</td>
                                        <td class="">Country flag used to represent the active currency</td>
                                      </tr>
                                      <tr>
                                        <td class="">active_currency_name</td>
                                        <td class="">Name of the active currency</td>
                                      </tr>
                                      <tr>
                                        <td class="">active_currency_code</td>
                                        <td class="">Code for the active currency</td>
                                      </tr>
                                      <tr>
                                        <td class="">currencies</td>
                                        <td class="">List of all the currencies supported for this storefront</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> is_active</span></td>
                                        <td class="">Boolean that indicates whether this currency is active for use in the storefront</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> switch_url</span></td>
                                        <td class="">The URL to invoke a switch to this currency</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> id</span></td>
                                        <td class="">ID of the currency</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> name</span></td>
                                        <td class="">Name of the currency</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> flag</span></td>
                                        <td class="">Country flag used to visually represent the currency</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: CurrencySel
                          - title: Faceted Search
                            route:
                              path: /new-subpage-6
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <A NAME="FacSearch"></a>

                                    <b>Description: </b>Faceted-search object
                                    for searching globally, by category, or by
                                    brand<br>


                                    <b>Handlebars Expression</b><b>:</b> <span
                                    class="inline-code">{{faceted_search}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">facets</td>
                                        <td class="">List of all search facets available</td>
                                      </tr>
                                      <tr>
                                        <td class="">selected</td>
                                        <td class="">Container for the selected search facets</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">remove_all_url</span></td>
                                        <td class="">URL to remove all selected search restrictions</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">items</span></td>
                                        <td class="">Currently enabled search facets</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: FacetedSearch
                          - title: Featured Products
                            route:
                              path: /new-subpage-2
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description:</b> A list of all the
                                    featured products for the BigCommerce
                                    storefront<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{products.featured}}</span><br>


                                    <b>Object Properties:</b> References the <a
                                    href="/docs/common-product-card-model">product
                                    card model</a>.
                                  header:
                                    anchor: FeatProducts
                                - type: text
                                  data: >-
                                    <b> Usage Example: </b>


                                    From Stencil's base Cornerstone theme, the
                                    example below displays the global
                                    `{{products.featured}}` object on the
                                    `<theme-name>/templates/pages/home.html`
                                    page template.


                                    First, to declare the object, the following
                                    [front
                                    matter](/docs/using-yaml-front-matter) must
                                    be placed at the top of this template. This
                                    particular declaration also limits the
                                    number of featured products to be displayed:


                                    ```

                                    ---

                                    products:
                                        [...]
                                        featured:
                                            limit: {{theme_settings.homepage_featured_products_count}}
                                    ---

                                    ```

                                    The `homepage_featured_products_count` limit
                                    is one of two relevant variables defined in
                                    Cornerstone's
                                    [`config.json`&#160;file](/docs/configjson-reference),
                                    here:


                                    ```
                                      "settings": {
                                        [...]
                                        "homepage_featured_products_count": 8,
                                        [...]
                                        "homepage_featured_products_column_count": 4,
                                        [...]    
                                    ```


                                    In the body of the `home.html` template, the
                                    following Handlebars conditional statement
                                    displays the featured-products object
                                    declared above:


                                    ```
                                        {{#if products.featured}}
                                            {{> components/products/featured products=products.featured columns=theme_settings.homepage_featured_products_column_count}}
                                        {{/if}}
                                    ```


                                    This statement formats the featured-products
                                    display according to the
                                    `homepage_featured_products_column_count`
                                    variable, also defined in the `config.json`
                                    excerpt above.
                          - title: Footer
                            route:
                              path: /footer
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description: </b>The footer content for
                                    each storefront page<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{footer}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">sitemap_url</td>
                                        <td class="">The URL to the sitemap, based on store’s SEO setting</td>
                                      </tr>
                                      <tr>
                                        <td class="">scripts</td>
                                        <td class="">Scripts to be loaded after the HTML has loaded; includes performance metrics</td>
                                      </tr>
                                    </table>
                          - title: Home Slide Show
                            route:
                              path: /home-slide-show
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description:</b> A list of images, text,
                                    and style assets for a storefront’s image
                                    slide show<br>


                                    <b>Handlebars Expression: </b><span
                                    class="inline-code">{{carousel}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      
                                      <tr>
                                        <td class="">swap_frequency</td>
                                        <td class="">Indicates how often (in seconds) the slides will change; the value must be between 1 and 90,000 seconds</td>
                                      </tr>
                                      
                                      <tr>
                                        <td class="">slides</td>
                                        <td class="">Object containing properties for each slide in the slideshow</td>
                                      </tr>
                                      
                                      <tr>
                                        <td class=""><span class="indent1">image</span></td>
                                        <td class="">Path to the image file used on this slide</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">alt_text</span></td>
                                        <td class="">Alt text for the image</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">url</span></td>
                                        <td class="">URL to which the image will link</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">heading</span></td>
                                        <td class="">Heading message defined by the merchant</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">heading_color</span></td>
                                        <td class="">Color of the heading text</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">text</span></td>
                                        <td class="">Subheading defined by the merchant</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">text_color</span></td>
                                        <td class="">Color of the subheading text</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">button_text</span></td>
                                        <td class="">Text displayed on a call-to-action button defined by the merchant</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">button_text_color</span></td>
                                        <td class="">Color of the button</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: SlideShow
                          - title: HTML Head
                            route:
                              path: /html-head
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description: </b>Data to be included in
                                    the HTML &lt;head&gt; element<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{head}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">character_set</td>
                                        <td class="">The character set to specify</td>
                                      </tr>
                                      <tr>
                                        <td class="">meta_tags</td>
                                        <td class="">Meta tags to improve store SEO</td>
                                      </tr>
                                      <tr>
                                        <td class="">title</td>
                                        <td class="">Current page’s title</td>
                                      </tr>
                                      <tr>
                                        <td class="">stylesheets</td>
                                        <td class="">CSS files to be included</td>
                                      </tr>
                                      <tr>
                                        <td class="">scripts</td>
                                        <td class="">Scripts to be loaded in the &lt;head&gt; tag</td>
                                      </tr>
                                      <tr>
                                        <td class="">favicon</td>
                                        <td class="">The store’s favicon (Favorite icon)</td>
                                      </tr>
                                      <tr>
                                        <td class="">rsslinks</td>
                                        <td class="">RSS feeds to improve SEO</td>
                                      </tr>
                                      </tr>
                                    </table>
                          - title: Is_ajax
                            route:
                              path: /is-ajax
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description: </b>Boolean; returns true if
                                    the current executing request is an Ajax
                                    request<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{is_ajax}}</span><br>
                                  header:
                                    anchor: IsAjax
                          - title: Login
                            route:
                              path: /login
                            data: {}
            blocks:
              - type: html
                data: >-
                  <a name="Stencil-Obj-ref"></a>The entries in this section list
                  and describe the objects<!--, custom operators, and data
                  resources--> and properties that you can access
                  programmatically via Handlebars expressions:


                  <ul>
                    <!-- <li><a href="/docs/custom-handlebars-helpers">Stencil Custom Handlebars Helpers</a></li> -->
                   <li><a href="/stencil-object-model-reference/global-objects">Global Objects (subsection)</a></li>
                   <li><a href="/stencil-object-model-reference/common-object-formats">Common Objects</a></li>
                   <li><a href="/stencil-object-model-reference/product-resources">Product Objects</a></li>
                   <li><a href="/stencil-object-model-reference/category-resources">Category Objects</a></li>
                   <li><a href="/stencil-object-model-reference/brand-resources">Brand Objects</a></li>
                   <li><a href="/stencil-object-model-reference/cart-resources">Cart Objects</a></li>
                   <li><a href="/stencil-object-model-reference/customer-resources">Customer Objects</a></li>
                   <li><a href="/stencil-object-model-reference/blog-resources">Blog Objects</a></li>
                   <li><a href="/stencil-object-model-reference/forms-resources">Forms Objects</a></li>
                  </ul>
        - title: Event Hooks
          route:
            path: /event-hooks
          data:
            children:
              - title: Hook Examples
                route:
                  path: /hook-examples
                data: {}
              - title: Remote API Example
                route:
                  path: /remote-api-example
                data: {}
              - title: Data Tags/Event Hook Reference
                route:
                  path: /new-subpage-1
                data: {}
              - title: stencil-utils API Reference
                route:
                  path: /new-subpage-2
                data: {}
        - title: Conditional-Logic Examples
          route:
            path: /conditional-logic-examples
          data:
            children:
              - title: 'Catalog Price Object: How Properties interact'
                route:
                  path: /catalog-price-object
                data: {}
              - title: 'Cart Price Properties: Relationships'
                route:
                  path: /cart-price-relationships
                data: {}
              - title: Calling Theme-Wide Variables via Handlebars
                route:
                  path: /calling-theme-wide-variables
                data: {}
              - title: Dynamic Content Rendering on Stencil Storefronts
                route:
                  path: /dynamic-content-rendering
                data: {}
        - title: CSS And Design Assets
          route:
            path: /css-and-design-assets
          data:
            children:
              - title: Navigating Stencil Design Assets
                route:
                  path: /navigating-stencil-design-assets
                data: {}
              - title: Components/Design Patters
                route:
                  path: /components-design-patterns
                data: {}
              - title: Layouts Directory
                route:
                  path: /layouts-directory
                data: {}
              - title: Settings Directory
                route:
                  path: /settings-directory
                data: {}
              - title: Utilities Directory
                route:
                  path: /new-subpage-1
                data: {}
              - title: New Subpage
                route:
                  path: /new-subpage
                data: {}
        - title: Templates Reference
          route:
            path: /templates-reference
          data:
            children:
              - title: Navigating the Templates Directory
                route:
                  path: /new-subpage-2
                data:
                  children:
                    - title: Components Subdirectory
                      route:
                        path: /new-subpage-3
                      data: {}
                    - title: Layout Subdirectory
                      route:
                        path: /new-subpage-2
                      data: {}
                    - title: Pages Subdirectory
                      route:
                        path: /new-subpage-1
                      data: {}
                    - title: Stencil with Disqus
                      route:
                        path: /new-subpage
                      data: {}
              - title: Custom Templates
                route:
                  path: /components-and-compilation
                data:
                  children:
                    - title: 'Authoring, Testing, and Uploading Custom Templates'
                      route:
                        path: /new-subpage-2
                      data: {}
                    - title: Assigning Templates to Pages
                      route:
                        path: /new-subpage-1
                      data: {}
                    - title: Switching Themes with Custom Templates
                      route:
                        path: /new-subpage
                      data: {}
                    - title: Theme Updates with  Custom Templates
                      route:
                        path: /new-subpage
                      data: {}
                    - title: Limitations on Custom Templates
                      route:
                        path: /new-subpage-3
                      data: {}
              - title: Stencil Checkout
                route:
                  path: /new-subpage
                data:
                  children:
                    - title: Preparing Stencil for Optimized One-Page Checkout
                      route:
                        path: /new-subpage
                      data: {}
                    - title: Optimized One Page Checkout
                      route:
                        path: /new-subpage
                      data: {}
                    - title: Currency Conversion
                      route:
                        path: /new-subpage
                      data: {}
                    - title: Multi Language Checkout
                      route:
                        path: /new-subpage
                      data: {}
                    - title: Checkout/Confirmation Injection Options
                      route:
                        path: /new-subpage-1
                      data: {}
                    - title: Implementing a custom checkout
                      route:
                        path: /new-subpage-2
                      data: {}
                    - title: Styling the Apple Pay Button
                      route:
                        path: /new-subpage-3
                      data: {}
                    - title: Customizing Invoices and Packing Slips
                      route:
                        path: /new-subpage-4
                      data: {}
        - title: Internationalization/Localization
          route:
            path: /internationalization-and-localization
          data:
            children:
              - title: Localizing Stores
                route:
                  path: /new-subpage-3
                data: {}
              - title: Basis for Internationalization
                route:
                  path: /new-subpage-2
                data: {}
              - title: Required Subdirectories
                route:
                  path: /new-subpage-1
                data: {}
              - title: Localization File Structure
                route:
                  path: /new-subpage
                data: {}
              - title: Invoking Translation Keys
                route:
                  path: /new-subpage-4
                data: {}
        - title: Javascript Customization
          route:
            path: /javascript-customization
          data:
            children:
              - title: Adding Javascript to Stencil Theme
                route:
                  path: /new-subpage-4
                data: {}
              - title: Basic Non NPM Example
                route:
                  path: /new-subpage-3
                data: {}
              - title: Basic NPM example
                route:
                  path: /new-subpage-2
                data: {}
              - title: Advanced NPM Example
                route:
                  path: /new-subpage-1
                data: {}
              - title: Page Types and Life Cycle
                route:
                  path: /new-subpage
                data: {}
      blocks:
        - type: text
          data: '# Welcome to the BigCommerce Stencil Developer Documentation'
        - type: text
          data: >-
            ## Objective of this documentation


            This documentation is intended to inform developers about the
            Stencil theming engine and how it can allow you as a developer to
            create beautiful, dynamic, and powerful storefronts.


            *Reference the [BigCommerce Developer Documentation
            Glossary](www.google.com) for any terminology that may sound foreign
            to you when reading the Stencil Developer Documentation.*
        - type: text
          data: >-
            ## What is Stencil?


            Stencil is the theming engine for the BigCommerce platform. Stencil
            engines the Cornerstone theme, which is the foundation a theme
            developer needs to quickly start developing premium, custom themes
            with Stencil. 


            Stencil makes it possible for themes to have multiple variations.
            Cornerstone comes with 3 variations: Cornerstone Light, Cornerstone
            Warm, and Cornerstone Bold.


            Stencil also provides features that allow merchants to customize
            their storefront's look and feel with no coding, making Stencil a
            powerful and useful engine for all audiences.
        - type: text
          data: >-
            ## Stencil Development Features and Technology Stack


            Stencil's provides the following features which allow BigCommerce
            theme developers to create beautiful, dynamic, and powerful
            storefronts.


            ---


            **Stencil Command Line Interface (Stencil CLI)**


            The Stencil CLI enables developers to locally develop and customize
            on any Stencil theme with no impact on a merchant's live storefront
            during the development process. when locally developing, you will
            have access to real-time Browsersync preview and testing across
            desktop, mobile, and tablet devices/viewports.


            ---

            **Logic-based templates using Handlebars.js** 


            Stencil's logic based templates allow BigCommerce developers to
            customize storefront pages efficiently with the lightweight
            templating languge, Handlebars.js.


            ---


            **Sass/SCSS support**


            Stencils Sass and SCSS support allows developers to nest properties,
            variables, and mixins. Use the familiar Foundation framework
            (provided) or substitute your choice of framework.


            ---


            **Page-specific resource definition using YAML formatted front
            matter**


            Specify the dynamic content you want to be displayed on your
            storefront pages with YAML formatted front matter.


            ---


            **JavaScript event hooks**


            Configure a Stencil theme to send notifications to merchants in
            order to collect product data and optimize a shopper's experience.


            ---


            **Stencil Theme Editor**


            The Stencil Theme Editor is a browser-based tool that enables
            merchants to rapidly customize a theme's look and feel with no
            coding. 


            BigCommerce theme developers' configuration choices determine which
            theme aspects merchants can customize, and the range of choices for
            each aspect.


            ---


            **Responsive, mobile-friendly themes**


            BigCommerce stores powered by Stencil allow shoppers to have a first
            class experience across any device.


            ---


            This list simply summarizes Stencil's core features. Continue
            reading through the Stencil Developer Documentation to learn all
            about Stencil's full capabilities.
        - type: text
          data: >-
            ## Legacy Framework Documentation


            If you are looking for information on Blueprint, BigCommerce's
            legacy theme framework, you can access that below:


            * [Themes (Blueprint)](https://developer.bigcommerce.com/themes)

            * [Stores API reference](https://developer.bigcommerce.com/api)
  /api-docs:
    title: API Docs
    data:
      blocks:
        - type: text
          data: API Docs Home Page
      children:
        - title: Getting Started
          route:
            path: /getting-started
          data:
            children:
              - title: About the API
                route:
                  path: /about-api
                data:
                  children:
                    - title: V2 versus V3
                      route:
                        path: /v2-v3
                      data:
                        blocks:
                          - type: code
                            data: >-
                              <?php

                              namespace Bigcommerce\Unit\Api;

                              use Bigcommerce\Api\ClientError;

                              class ClientErrorTest extends
                              \PHPUnit_Framework_TestCase

                              {
                                  public function testStringifyingReturnsTheMessageAndCodeAppropriately()
                                  {
                                      $error = new ClientError('message here', 100);
                                      $this->assertSame('Client Error (100): message here', (string)$error);
                                  }
                              }
                            config:
                              mode: php
                              highlightRange:
                                - from: '1'
                                  to: '5'
                    - title: Authentication
                      route:
                        path: /authentication
                      data: {}
                    - title: API Requests
                      route:
                        path: /new-subpage
                      data: {}
                    - title: Best Practices
                      route:
                        path: /api-status-codes
                      data: {}
                    - title: Filtering
                      route:
                        path: /filtering
                      data: {}
                    - title: Client Libraries
                      route:
                        path: /new-subpage
                      data: {}
              - title: Partner Information
                route:
                  path: /partner
                data:
                  children:
                    - title: Becoming A Partner
                      route:
                        path: /new-subpage
                      data: {}
                    - title: Using Dev Tools
                      route:
                        path: /using-dev-tools
                      data: {}
              - title: Building Apps With BigCommerce
                route:
                  path: /building-apps-bigcommerce
                data:
                  children:
                    - title: Apps Quickstart
                      route:
                        path: /apps-quickstart
                      data: {}
                    - title: Types of Apps
                      route:
                        path: /new-subpage
                      data: {}
                    - title: Building Apps
                      route:
                        path: /building-apps
                      data: {}
              - title: Webhooks
                route:
                  path: /webhooks
                data:
                  children:
                    - title: About Webhooks
                      route:
                        path: /about-webhooks
                      data:
                        blocks:
                          - type: html
                            data: <h1>About Webhooks</h1>
                          - type: text
                            data: >
                              ## What We'll Cover


                              * [Events Available](http://)

                              * [Authentication](#authentication)

                              * [Lightweight Callback
                              Payload](#lightweight-callback-payload)

                              * [Request and Response](#request-and-response)

                              * [Recieving the
                              Callback](#receiving-the-callback)

                              * [Responding to the
                              Callback](#respond-to-webhook-callbacks)

                              * [Callback Retry
                              Mechanism](#callback-retry-mechanism)

                              * [Webhook Security](#webhook-security)

                              * [Tools for
                              Debugging](#tools-for-debugging-and-testing-webhooks)


                              Webhooks allow app developers to be notified, in
                              near real-time, when specific events occur on a
                              BigCommerce store. For example, your app may need
                              to perform an action when a new order is created,
                              a product’s inventory decreases, or an item is
                              added to a shopper’s cart. When a subscribed event
                              occurs on a store, BigCommerce will POST a payload
                              to your app’s callback URI so your app can take
                              some action based on that event.
                          - type: callout
                            data:
                              type: warning
                              title: >-
                                Multiple Events Are Triggered during Bulk Data
                                Imports
                              body: >-
                                Bulk data imports will trigger the relevant
                                events for every record affected. For example,
                                if you have a hook on `store/product/created`,
                                when the merchant imports 2,000 products, we
                                will send 2,000 individual callback events.
                            header: {}
                          - type: text
                            data: >-
                              ---


                              ## Authentication


                              Webhooks are authenticated using Oauth and support
                              the JSON media type. Basic auth and XML are not
                              supported.


                              Before you can begin to send and receive requests,
                              you must have the following:


                              * A store: You can get a sandbox store by joining
                              the Partner Program.

                              * OAuth Client ID: Obtained by creating an API
                              Account.

                              * OAuth token: Obtained by creating an API
                              Account.

                              * Valid TLS/SSL configuration: Verify your app
                              server’s setup at the following site:
                              [https://sslcheck.globalsign.com](https://sslcheck.globalsign.com)
                          - type: callout
                            data:
                              type: error
                              title: Connection Breakers
                              body: >
                                Any one of the following conditions on your app
                                server will cause a connection failure:

                                * Hostname/DNS mismatch.

                                * Self-signed certificate.

                                * Intermediate certificates not loaded.
                          - type: text
                            data: >-
                              ---


                              ## Lightweight Callback Payload


                              When a subscribed event occurs, we send a light
                              payload with only minimum details regarding the
                              event that’s been triggered. This gives you
                              maximum flexibility as to how you want to handle
                              the notification in your application. For
                              instance, if you subscribe to the
                              `store/order/statusUpdated` event, we’ll send you
                              the order ID when the status is updated. You might
                              want to handle the notification by fetching the
                              full order details via a request to the Orders
                              resource.


                              An example payload follows:


                              ```

                              {
                               "store_id":11111,
                               "producer":"stores/abcde",
                               "scope":"store/order/statusUpdated",
                               "data":{
                                       "type":"order",
                                       "id":173331
                                      },
                               "hash":"3f9ea420af83450d7ef9f78b08c8af25b2213637"
                               }
                              ```
                          - type: text
                            data: >-
                              ---


                              ## Request and Response


                              *Never worked with webhooks before? Check out the
                              tutorial on creating webhooks.*
                          - type: code
                            data: |+
                              curl -X POST \
                                https://api.bigcommerce.com/stores/store_hash/v2/hooks \
                                -H 'Accept: application/json' \
                                -H 'X-Auth-Client: your-client-id \
                                -H 'X-Auth-Token: your-auth-token \
                                -d '{
                                "scope": "store/cart/lineItem/*",
                                "destination": "https://myapp.herokuapp.com/",
                                "is_active": true
                              }

                              // Response 201 Created

                                  {
                                      "id": 14270456,
                                      "client_id": "your-client-id",
                                      "store_hash": "your_store_hash",
                                      "scope": "store/cart/lineItem/*",
                                      "destination": "https://779aca97.ngrok.io/webhooks",
                                      "headers": null,
                                      "is_active": true,
                                      "created_at": 1531326542,
                                      "updated_at": 1531337178
                                  }

                            header:
                              title: '/POST Webhook '
                              subtitle: >-
                                Request:
                                https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks
                            config:
                              mode: json
                          - type: text
                            data: >
                              An HTTP 201 response indicates that the webhook
                              was set successfully.
                          - type: callout
                            data:
                              type: warning
                              body: >-
                                Following the creation of a webhook, it can take
                                up to one minute for BigCommerce to start
                                sending POST requests to your callback URI.
                              title: One-Minute Timeout
                          - type: code
                            data: |
                              //Response 200 OK

                              [
                                  {
                                      "id": 14270466,
                                      "client_id": "your-client-id",
                                      "store_hash": "your_store_hash",
                                      "scope": "store/product/created",
                                      "destination": "https://779aca97.ngrok.io/webhooks",
                                      "headers": null,
                                      "is_active": true,
                                      "created_at": 1531326542,
                                      "updated_at": 1531337178
                                  },
                                  {
                                      "id": 14270713,
                                      "client_id": "your-client-id",
                                      "store_hash": "your_store_hash",
                                      "scope": "store/product/updated",
                                      "destination": "https://779aca97.ngrok.io/webhooks",
                                      "headers": null,
                                      "is_active": false,
                                      "created_at": 1531338589,
                                      "updated_at": 1531338589
                                  }
                              ]
                            header:
                              title: /GET All Webhooks
                              subtitle: >-
                                Request:
                                https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks
                            config:
                              mode: json
                          - type: code
                            data: |+
                              {
                                  "id": 14270466,
                                  "client_id": "your-client-id",
                                  "store_hash": "your_store_hash",
                                  "scope": "store/product/created",
                                  "destination": "https://779aca97.ngrok.io/webhooks",
                                  "headers": null,
                                  "is_active": false,
                                  "created_at": 1531326542,
                                  "updated_at": 1531337178
                              }

                            header:
                              subtitle: >-
                                To get a single webhook use the `id`.  Request:
                                https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks/id
                              title: /GET a Single Webhook
                            config:
                              mode: json
                          - type: code
                            data: |
                              {
                               "scope": "store/product/updated",
                               "destination": "https://779aca97.ngrok.io/webhooks",
                               "is_active": false
                              }


                              //Response 200 OK

                              {
                                  "id": 14270466,
                                  "client_id": "ejoftto9hv8xlip01cckcg53v7g3lrl",
                                  "store_hash": "jrah6gmn",
                                  "scope": "store/product/created",
                                  "destination": "https://779aca97.ngrok.io/webhooks",
                                  "headers": null,
                                  "is_active": false,
                                  "created_at": 1531326542,
                                  "updated_at": 1531337178
                              }
                            header:
                              title: /PUT Webhook
                              subtitle: >-
                                Update a webhook using the id. Once the webhook
                                is created all the fields below can be changed
                                via an update request. Request:
                                https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks/id
                            config:
                              mode: json
                          - type: code
                            data: |
                              //Response 200 OK
                              {
                                  "id": 14270466,
                                  "client_id": "ejoftto9hv8xlip01cckcg53v7g3lrl",
                                  "store_hash": "jrah6gmn",
                                  "scope": "store/product/created",
                                  "destination": "https://779aca97.ngrok.io/webhooks",
                                  "headers": null,
                                  "is_active": false,
                                  "created_at": 1531326542,
                                  "updated_at": 1531337178
                              }
                            header:
                              title: /DELETE a Wehbook
                              subtitle: >-
                                Request:
                                https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks/id
                            config:
                              mode: json
                          - type: text
                            data: >-
                              There is not a way to delete all webhooks on a
                              store. Run a GET request for the webhook id, then
                              send a request to the delete URI to remove each
                              one. It returns a 200 OK for the response with the
                              deleted hook. When requesting a list of hook, the
                              hook id is not available.


                              If webhooks are no longer being used, either
                              delete them or set is_active:false.
                          - type: text
                            data: >-
                              ---


                              ## Receiving the Callback


                              You’ll need to build an application and configure
                              your server to receive the callback we send when
                              events are triggered. 


                              Need to set up a quick destination URL for
                              testing? See Tools for Debugging and Testing
                              Webhooks.
                          - type: text
                            data: >-
                              ---


                              ## Respond to Webhook Callbacks


                              You’ll need to build an application and configure
                              your server to receive the callback we send when
                              events are triggered.


                              To acknowledge that you received the webhook
                              without issue, your server should return a 200
                              HTTP status code. Any other information you return
                              in the request headers or request body will be
                              ignored. Any response code outside the 200 range,
                              including 3_xx_ codes, will indicate to us that
                              you did not receive the webhook. When a webhook is
                              not received (for whatever reason), we will retry
                              the callback as described below.


                              Need to set up a quick destination URL for
                              testing? See Tools for testing webhooks.
                          - type: text
                            data: >-
                              ---


                              ## Callback Retry Mechanism


                              The webhooks service will do its best to deliver
                              events to your callback URI. If your server
                              indicates that the webhook payload has not been
                              received, the dispatch service will take the
                              following actions:

                              If an app server responds to a webhook payload
                              with anything other than a 2_xx_ response, or
                              times out, the app will be blocked for 60 seconds.

                              Webhooks created during that 60-second block will
                              be queued up to send on the next scheduled retry
                              attempt after the block expires, so that webhooks
                              are not lost.


                              The webhook dispatcher will then attempt several
                              retries (at increasing intervals) until the
                              maximum retry limit is reached.


                              ### Retry Intervals


                              60 seconds after the most recent failure  

                              180 seconds after the most recent failure  

                              180 seconds after the most recent failure  

                              300 seconds after the most recent failure  

                              600 seconds after the most recent failure  

                              900 seconds after the most recent failure  

                              1800 seconds after the most recent failure  

                              3600 seconds after the most recent failure  

                              7200 seconds after the most recent failure  

                              21600 seconds after the most recent failure  

                              50400 seconds after the most recent failure  

                              86400 seconds (24 hours) after the most recent
                              failure


                              After the final retry attempt (cumulatively, 48
                              hours after the first delivery attempt), the
                              webhook will automatically be deactivated, and we
                              will send an email to the developer’s email
                              address registered on the subscribing app. You can
                              reactivate the webhook by setting the `is_active`
                              flag back to true via a `/PUT` request to the
                              hooks resource.
                          - type: text
                            data: >-
                              ---


                              ## Webhook Security

                              To ensure that webhook payloads are secure against
                              activity by a malicious actor, we take a
                              three-pronged approach:


                              * Webhook payloads contain minimal information
                              about the store and event, for example the ID
                              identifying the order or cart. To access
                              potentially sensitive information on a store, a
                              malicious actor would need to be fully
                              authenticated against that store’s API in order to
                              request full details.

                              * Webhook payloads are sent over a TLS-encrypted
                              connection.

                              * For added security, you can include custom
                              headers in your webhook creation request, and
                              these headers will be sent in the payload when an
                              event you subscribe to occurs. If your app
                              endpoint is secured by basic authentication, you
                              could set your own basic auth headers to
                              authenticate the payload at runtime.
                          - type: text
                            data: >-
                              ---


                              ## Troubleshooting


                              ### Why am I not receiving event payloads to my
                              callback URI?

                              If your app does not return an HTTP 2_xx_ to
                              BigCommerce after receiving the webhook event
                              payload, BigCommerce considers it a failure.
                              BigCommerce will keep trying for a little over 48
                              hours. At the end of that time, BigCommerce sends
                              an email to the email address set during app
                              registration and disables the webhook by setting
                              the is_active flag to false.


                              You can proactively check to make sure that
                              everything is OK by periodically making a GET
                              request and checking the is_active flag.


                              If you receive an email or discover that the
                              is_active flag has been flipped to false, try the
                              following:


                              Check to see if your app is responding to the
                              event payload with something other than HTTP 200.

                              Check to make sure that your server has a valid
                              TLS/SSL setup. One way to do this is by visiting
                              the following website:
                              https://sslcheck.globalsign.com. Any of the
                              following will cause the TLS/SSL handshake to
                              fail:

                              Self-signed certificate.

                              Host name of the certificate does not match the
                              server’s DNS.

                              Your server’s key or trust store has not been
                              loaded up with the intermediate certificates
                              necessary to establish the chain of trust.

                              Once you have resolved the issue preventing the
                              connection, send a PUT request to flip the
                              is_active flag back to true. This will cause
                              BigCommerce to start sending the event payloads to
                              your callback URI again.


                              ### Why am I not receiving a 201 response after
                              creating a webhook?

                              After sending a POST request to create a webhook,
                              you should get an HTTP 201 back. If you do not,
                              check your TLS/SSL setup and be sure that your
                              request contains the following headers:


                              ```
                                   Accept: application/json
                                   Content-Type: application/json
                                   X-Auth-Client: <the OAuth client id>
                                   X-Auth-Token: <the OAuth token>
                              ```
                          - type: text
                            data: >-
                              ---


                              ## Tools for Debugging and Testing Webhooks


                              **ngrok**  

                              As you are building your integration, you might
                              want to test webhooks on your local dev machines.


                              We suggest using ngrok, which you can use to
                              easily set up tunnels between a server running on
                              localhost and a public URL. This will enable you
                              to send our webhooks to your localhost
                              environments via a public URL. No production push
                              is required.  

                              Need help on ngrok and webhooks see our tutorial.


                              **Webhook Tester**  

                              [https://webhook.site/#/](https://webhook.site/#/)
                    - title: Setting up Webhooks
                      route:
                        path: /setting-up-webhooks
                      data:
                        blocks:
                          - type: html
                            data: <h1>Setting up Webhooks</h1>
                          - type: text
                            data: >-
                              ## Prerequisites


                              * Node.js is installed

                              * NPM is installed

                              * Familiar with Command Line

                              * Familiar with Postman

                              * API Access Token & Client ID with scope set to
                              Information & Settings Read-Only & Products
                              Read-Only.

                              * Webhooks Overview
                          - type: text
                            data: >-
                              ---


                              ## Create project folder

                              Open the terminal and create a folder that will
                              hold Ngrok and the Node app, then move into that
                              directory.

                              ```

                              BIGCOMMERCE:webhooks your.computer$ mkdir
                              webhooks-test

                              BIGCOMMERCE:webhooks your.computer$ cd
                              webhooks-test

                              ```
                          - type: text
                            data: >-
                              ---


                              ## Install Ngrok

                              There are three ways to install Ngrok: 

                              * Install manually and then set the `$PATH` so
                              Ngrok can be used globally. 

                              * Download as an [npm
                              module](https://www.npmjs.com/package/ngrok). 

                              * Download manually and place in the project
                              folder. (Method we are using)


                              1. Visit [https://ngrok.com/](https://ngrok.com/)
                              and click on download.

                              2. Choose the version for your operating system.

                              3. Unzip ngrok and place the application in the
                              project folder that you created.
                          - type: callout
                            data:
                              type: success
                              body: >
                                At this point you should have a project folder
                                with ngrok unzipped inside of it. 
                              title: Checkpoint
                          - type: text
                            data: "---\n\n## Create Express App\n\n1. In the terminal run npm init. You will be prompted with several questions about the app setup. Feel free to hit return to accept the default value.  The final screen will look something like this: \n\n```\n{\n  \"name\": \"webhooks-test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"webhooks-test\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n2. Take note of the value in main, `index.js`. \n3. Create a file in your project folder called index.js.\n4. Install [Express](https://expressjs.com/) using the terminal in the same project folder.\n\n\t\t     npm install express --save\t\t\t\t "
                          - type: callout
                            data:
                              type: success
                              body: >-
                                At this point your project folder should have
                                similar contents:

                                index.js

                                node_modules

                                package.json

                                ngrok

                                package-lock.json
                              title: Checkpoint
                          - type: text
                            data: >-
                              4. Open index.js in a text editor and add this
                              code snippet: 


                              ```

                              const express = require('express')

                              const app = express()

                              app.post('/webhooks', function (req, res) {

                              res.send('OK')

                              })

                              app.listen(3000, function () {

                              console.log('Listening for webhooks on port 3000')

                              })

                              ```


                              The app is starting a server and listening on port
                              3000, then returning a response of ok once it
                              receives a `POST` to the `/webhooks` url.


                              ```

                              app.post('/webhooks', function (req, res) {
                               res.send('OK')
                              })

                              ```



                              From [Express
                              Website](https://expressjs.com/en/starter/basic-routing.html):  


                              `app.METHOD(PATH, HANDLER)`  

                              * app is an instance of express.

                              * METHOD is an HTTP request method, in lowercase.

                              * PATH is a path on the server.

                              * HANDLER is the function executed when the route
                              is matched.

                              * Res.send is the body parameter that sends the
                              HTTP response. 
                          - type: text
                            data: >-
                              ---


                              ## Start the app and Ngrok

                              We are going to start the app and visit the ngrok
                              url to see the status of our webhooks. 



                              1. Open two terminal tabs. They both should be in
                              your project folder. 

                              2. In one tab run the app. `node index.js`

                              3. In the other start ngrok. `ngrok http 3000`
                          - type: tabs
                            data:
                              children:
                                - title: node index.js
                                  blocks:
                                    - type: text
                                      data: >-
                                        ```

                                        BIGCOMMERCE:webhooks your.computer$ node
                                        index.js

                                        Listening for webhooks on port 3000

                                        ```
                                - title: ngrok http 3000
                                  blocks:
                                    - type: image
                                      data: >-
                                        //s3.amazonaws.com/user-content.stoplight.io/6012/1531500085650
                                      config:
                                        centered: true
                          - type: text
                            data: >-
                              Ngrok returns two values we need for webhooks. Web
                              Interface, where you can monitor the hook from a
                              browser. Forwarding is the webhook destination.
                              Make note of the https version. In this example
                              its https://6a35e97b.ngrok.io.


                              Open a web browser and copy in your Web Interface
                              URL. `http://127.0.0.1:4040` -  This is where the
                              webhooks will appear when they fire.
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1531500191661
                          - type: text
                            data: "---\n\n## Create the webhooks\n\nThe webhook we are going to subscribe to is `store/product/updated`. \n\n1. In Postman create a POST request using `https://api.bigcommerce.comstores/{{store_hash}}/v2/hooks`. \n\t2. Replace store_hash with your store.\n3. Create a body request with the webhook we are subscribing to and your forwarding url:\n\n```\n{\n \"scope\": \"store/product/updated\",\n \"destination\": \"https://6a35e97b.ngrok.io/webhooks\",\n \"is_active\": true\n}\n```\n> Don't have Postman. Use the Try it out box below.\n\nThe destination url is the forwarding url from Ngrok and /webhooks,  matching the URL path set in the app POST.  \n\n3. Update the headers to have:\n\n```\n    Accept: application/json\n     Content-Type: application/json\n     X-Auth-Client: {{the OAuth client id}}\n     X-Auth-Token: {{the OAuth token}}\n```"
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1531500381736
                          - type: http
                            data:
                              method: post
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v2/hooks
                              headers:
                                Accept: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{the OAuth client id}'
                                X-Auth-Token: '{the OAuth token}'
                              body: |
                                {
                                "scope": "store/product/updated",
                                 "destination": "https://{your-url}.ngrok.io/webhooks",
                                 "is_active": true
                                }
                            header:
                              title: Create a Webhook
                          - type: text
                            data: |-
                              4. Check all the values and then hit `/POST`.

                              The response is a 201 Created.

                              ```
                              {
                                  "id": 14263419,
                                  "client_id": "your-client-id",
                                  "store_hash": "your-store-hasha",
                                  "scope": "store/product/updated",
                                  "destination": "https://6a35e97b.ngrok.io/webhooks",
                                  "headers": null,
                                  "is_active": true,
                                  "created_at": 1531256030,
                                  "updated_at": 1531256030
                              }
                              ```
                          - type: text
                            data: >-
                              ---


                              ## Fire Webhooks


                              You can fire the webhook in two ways. Either the
                              API or the store’s control panel. We are going to
                              cover both.


                              ### Update via the Control Panel


                              1. From your store’s control panel, navigate to
                              Products > View. Choose a product and change some
                              of the information. In this case, I added the word
                              Hoodie to the product name. Then click save.
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1531500906129
                          - type: text
                            data: >-
                              2. Visit the Ngrok web interface address (in the
                              sample app it’s http://127.0.0.1:4040), and check
                              for a 200 response. 
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1531500945565
                          - type: text
                            data: >-
                              Under Summary you can see the webhook has fired.
                              It returned the text OK. This can be changed. In
                              the original app, res.send(‘OK’). This can be
                              changed to say something different or even post
                              the response to another app.  


                              The response will also show in the terminal. 
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1531500989467
                          - type: text
                            data: >-
                              ---


                              ## Update via the API


                              Create a `/PUT` request to the product that needs
                              to be updated. (link to request article)


                              `https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/124`


                              In this example I am changing the price on
                              `product_id` 124  to 12.99.
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1531501093233
                          - type: http
                            data:
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}
                              headers:
                                X-Auth-Client: '{Your-X-Auth-Client}'
                                X-Auth-Token: '{Your-X-Auth-Token}'
                                Accept: application/json
                                Content-Type: application/json
                              method: put
                              body: |-
                                {
                                  "price": 12.99
                                }
                            header:
                              title: Update a Product
                          - type: text
                            data: >-
                              After hitting send, check the website. You may
                              have more or less events based on how many times
                              the product has been updated. 
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1531501115256
                          - type: text
                            data: >-
                              That’s it. In this walkthrough you created a
                              webhook, setup a server to accept the response and
                              used Express. Some extra things are to change the
                              text in res.send() to have a custom response,
                              print the response to a webpage or setup a
                              different webhook. 
                          - type: callout
                            data:
                              body: >-
                                Unless you have paid for Ngrok, the URL is only
                                valid for a few hours. After that, the webhook
                                will stop working. Send a
                                [DELETE](https://bigcommercecart1.docs.stoplight.io/webhooks#request-and-response)
                                request to the specific webhook id. 
                              type: warning
                              title: URL Timeout
                          - type: http
                            data:
                              method: delete
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v2/hooks/{hook_id}
                              headers:
                                X-Auth-Client: '{your-client-id}'
                                X-Auth-Token: '{your-auth-token}'
                                Content-Type: application/json
                                Accept: application/json
                            header:
                              title: Delete the webhook
                              subtitle: >-
                                Get the hook_id by either getting it from the
                                original /POST response or by sending a /GET
                                request to the hooks resource
        - title: Catalog
          route:
            path: /catalog
          data:
            children:
              - title: Products
                route:
                  path: /products
                data:
                  children:
                    - title: Products Overview
                      route:
                        path: /products-overview
                      data:
                        blocks:
                          - type: text
                            data: >-
                              The Catalog refers to a store’s collection of
                              physical and digital products. The Catalog
                              includes all the information about a product such
                              as MPN, warranty, price, and images. 
                          - type: text
                            data: >-
                              ## /catalog/products


                              Products are the primary catalog entity, and the
                              primary function of the e-commerce platform is to
                              sell products on the storefront and other selling
                              channels.


                              Products can either be
                              [Simple](#create-simple-product) or
                              [Complex](#create-complex-product). 


                              Products can be [Physical](#definitions) or
                              [Digital](#definitions). 


                              * Physical products are typically products that
                              exist in a physical form, have a weight, and are
                              being sold by retailers with the intent of
                              shipping them to customers. 


                              * Digital products, on the other hand, may not
                              have a physical representation in the real world;
                              this includes downloadable products such as
                              computer software, ebooks, music, images, and
                              other digital media. Alternatively, a digital
                              product may be used to sell services such as spa
                              treatments, consulting, and so forth - which also
                              do not require shipping.
                            header:
                              anchor: catalog-products
                          - type: callout
                            data:
                              title: Product Creation
                              body: Only one Product can be created at a time.
                          - type: text
                            data: >-
                              ## Create a Simple Product


                              Simple products do not have any options,
                              modifiers, or variants, and therefore cannot be
                              configured or modified before they are added to
                              cart. A simple product is its own variant. 
                          - type: code
                            data: "{\n\t\"name\": \"BigCommerce Coffee Mug\",\n\t\"price\": \"10.00\",\n\t\"categories\":[\n\t\t\t23,21\n\t\t],\n\t\t\n\t\"weight\": 4,\n\t\"type\": \"physical\"\n}\n"
                            header:
                              title: Simple Product
                              subtitle: >-
                                /POST
                                https://api.bigcommerce.com/stores/store_hash/v3/catalog/products
                              anchor: create-simple-product
                            config:
                              mode: json
                          - type: callout
                            data:
                              body: >-
                                When options are created, it defaults to radio
                                button as the display_type.
                              title: Creating Options
                            header:
                              anchor: info-product-creation
                          - type: text
                            data: >-
                              ## Create a Complex Product


                              Complex products have at least one option and may
                              have modifiers or variants.
                          - type: code
                            data: "{\n\t\"name\": \"BigCommerce Coffee Mug\",\n\t\"price\": \"10.00\",\n\t\"categories\":[\n\t\t\t23,21\n\t\t],\n\t\t\n\t\"weight\": 4,\n\t\"type\": \"physical\",\n\t\"variants\":[\n\t\t{\n\t\t\t\"sku\": \"SKU-BLU\",\n\t\t\t\"option_values\":[\n\t\t\t\t\t{\n\t\t\t\t\t\t\"option_display_name\": \"Mug Color\",\n\t\t\t\t\t\t\"label\": \"Blue\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"sku\": \"SKU-GRAY\",\n\t\t\t\"option_values\":[\n\t\t\t\t\t{\n\t\t\t\t\t\t\"option_display_name\": \"Mug Color\",\n\t\t\t\t\t\t\"label\": \"Gray\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t}\n\t]\n}\n"
                            header:
                              title: Complex Product
                              subtitle: >-
                                /POST
                                https://api.bigcommerce.com/stores/store_hash/v3/catalog/products
                              anchor: create-complex-product
                            config:
                              mode: json
                          - type: text
                            data: >-
                              Using this endpoint multiple variants can be added
                              to the product when being created.
                          - type: text
                            data: >-
                              ## Definitions


                              ### A full list of product image definitions can
                              be found at the [/catalog/products](http://)
                              endpoint.


                              | Term | Definition  |

                              |--|--|

                              | name | The descriptive name of a product that is
                              for sale. |

                              | price | The price a shopper would expect to pay
                              for the product, absent anything that might modify
                              the price. |

                              | weight |The shipping weight of the product,
                              which can be used in shipping calculations,
                              promotions/discounts, and for storefront display.
                              Physical products require a weight, while digital
                              products do not. |

                              | category | A product must belong to at least one
                              category. These are drawn from the store’s
                              configured Categories, and will define the
                              catalog’s navigational hierarchy on the storefront
                              which is a primary means of discovering products.
                              |

                              | type | The product type. One of: physical - a
                              physical stock unit, digital - a digital download.
                              |
                            header:
                              anchor: definitions
                    - title: Images
                      route:
                        path: /products-images
                      data:
                        blocks:
                          - type: text
                            data: >-
                              ## /catalog/products/{product_id}/images


                              Product images are used to show shoppers what
                              they’re buying and merchandise products.
                            header:
                              anchor: product-image-introduction
                          - type: text
                            data: '## Create a Product Image'
                            header:
                              anchor: create-product-image
                          - type: code
                            data: |-
                              }
                               "is_thumbnail": true,
                                "sort_order": 1,
                                "description": "Yellow Large Bath Towel",
                                "image_url": "https://your-custom-image/image_name.png"
                              }
                            header:
                              title: Create a Product Image
                              subtitle: >-
                                /POST
                                https://api.bigcommerce.com/stores/{{store_hash}/v3/catalog/products/id/images
                              anchor: code-create-product-image
                            config:
                              mode: json
                          - type: text
                            data: >-
                              ## Create Multiple Images


                              A product can support multiple images. When adding
                              images, more than one can be added by expanding
                              the images array.
                            header:
                              anchor: create-multiple-images
                          - type: code
                            data: "\"images\":[\n\t\t\t{\n\t\t\t\t\"is_thumbnail\": true,\n\t\t\t\t\"image_url\": \"https://your-custom-image/image_name.png\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"is_thumbnail\": false,\n\t\t\t\t\"image_url\": \"https://your-custom-image/image_name.png\"\n\t\t\t}\n\t\t]"
                            header:
                              title: Multiple Images
                              anchor: code-create-multiple-images
                          - type: text
                            data: >-
                              ## Product Thumbnails


                              Only one image can be the product thumbnail. The
                              product thumbnail is the image that shows on the
                              product listing page, in search results and any
                              other location that features the product. If only
                              one image is on the product it becomes both the
                              thumbnail and the main product image. Images can
                              also be added to [variants](http://). 
                          - type: code
                            data: |-
                              {
                                  "data": {
                                      "id": 382,
                                      "product_id": 158,
                                      "is_thumbnail": true,
                                      "sort_order": 0,
                                      "description": "",
                                      "image_file": "a/521/foglinenbeigestripetowel1b_1024x1024__83011__60806.jpg",
                                      "url_zoom": "https://cdn8.bigcommerce.com/s-{{store_hash}}/products/158/images/382/foglinenbeigestripetowel1b_1024x1024__83011__60806.1534344511.1280.1280.jpg?c=2",
                                      "url_standard": "https://cdn8.bigcommerce.com/s-{{store_hash}}/products/158/images/382/foglinenbeigestripetowel1b_1024x1024__83011__60806.1534344511.560.850.jpg?c=2",
                                      "url_thumbnail": "https://cdn8.bigcommerce.com/s-{{store_hash}}/products/158/images/382/foglinenbeigestripetowel1b_1024x1024__83011__60806.1534344511.330.500.jpg?c=2",
                                      "url_tiny": "https://cdn8.bigcommerce.com/s-{{store_hash}}/products/158/images/382/foglinenbeigestripetowel1b_1024x1024__83011__60806.1534344511.66.100.jpg?c=2",
                                      "date_modified": "2018-08-15T14:48:31+00:00"
                                  },
                                  "meta": {}
                              }
                            header:
                              title: Thumbails
                              subtitle: >-
                                /GET
                                https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/{{product_id}}/images/{{images_id}}
                              anchor: code-get-product-images
                            config:
                              mode: json
                              highlightRange:
                                - from: '5'
                                  to: '5'
                          - type: text
                            data: >-
                              ## Defintions

                              ### A full list of product image definitions can
                              be found at the
                              [/catalog/products/{product_id}/images](http://)
                              endpoint.


                              | Term | Definition  |

                              |--|--|

                              | is_thumbnail | Flag for identifying whether the
                              image is used as the product's thumbnail. If this
                              is set to true, it will be the primary product
                              image |

                              | sort_order | The order in which the image will
                              be displayed on the product page. Higher integers
                              give the image a lower priority. When updating, if
                              the image is given a lower priority, all images
                              with a `sort_order` the same as or greater than
                              the image's new `sort_order` value will have their
                              `sort_order`s reordered. | 

                              | description | On the storefront, these
                              descriptions are embedded in the markup for SEO,
                              screen-reading, and merchandising purposes. |

                              | image_file | The local path to the original
                              image file uploaded to BigCommerce. Product images
                              are served from BigCommerce's storage and the
                              image_file is a local path.
                              `/%%SAMPLE%%/stencil/foglinenbeigestripetowel3b.jpg`
                              |

                              | url_ | url_zoom , url_standard and
                              url_thumbnail. These are URLs (to the BigCommerce
                              CDN) that provide versions of the image at
                              different sizes. |
                            header:
                              anchor: defintion-table
                    - title: Videos
                      route:
                        path: /product-videos
                      data:
                        blocks:
                          - type: text
                            data: >
                              ## /catalog/products/{product_id}/videos


                              Product Videos, in addition to images, can help
                              shoppers understand what they’re buying and help
                              sell the product.


                              Product videos must be hosted on YouTube. The
                              video_id corresponds to the “v” parameter in a
                              video url. 


                              Example:
                              https://www.youtube.com/watch?v=***R12345677***
                            header:
                              anchor: product-video-introduction
                          - type: text
                            data: '## Create a Product Video'
                            header:
                              anchor: create-a-product-video
                          - type: code
                            data: |-
                              {
                                "title": "BigCommerce Mug Video",
                                "description": "Video Describing the Mug",
                                "sort_order": 1,
                                "type": "youtube",
                                "video_id": "123345AA"
                              }
                            header:
                              title: Product Video
                              subtitle: >-
                                /POST
                                https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/videos
                              anchor: code-create-product-video
                            config:
                              mode: json
                    - title: Custom Fields
                      route:
                        path: /product-custom-fields
                      data: {}
                    - title: Downloadable Files
                      route:
                        path: /products-download-files
                      data: {}
                    - title: Bulk Pricing Rules
                      route:
                        path: /product-bulk-pricing
                      data: {}
                    - title: Variants
                      route:
                        path: /product-variants
                      data: {}
                    - title: Complex Rules
                      route:
                        path: /product-complex-rules
                      data: {}
                    - title: Metafields
                      route:
                        path: /product-metafields
                      data: {}
                    - title: Reviews
                      route:
                        path: /product-reviews
                      data: {}
              - title: Categories
                route:
                  path: /categories
                data: {}
              - title: Brands
                route:
                  path: /brands
                data: {}
              - title: Catalog Overview
                route:
                  path: /catalog-overview
                data: {}
        - title: Scripts
          route:
            path: /scripts
          data:
            blocks:
              - type: text
                data: '# Scripts'
            children:
              - title: New Subpage
                route:
                  path: /new-subpage
        - title: Price Lists
          route:
            path: /price-lists
          data:
            blocks:
              - type: text
                data: '# Price Lists'
            children:
              - title: New Subpage
                route:
                  path: /new-subpage
        - title: Subscribers & Customers
          route:
            path: /subscribers-customers
          data:
            blocks:
              - type: text
                data: '# Subscribers & Customers'
            children:
              - title: New Subpage
                route:
                  path: /new-subpage
        - title: Widgets
          route:
            path: /widgets
          data:
            blocks:
              - type: text
                data: '# Widgets'
            children:
              - title: New Subpage
                route:
                  path: /new-subpage
        - title: Cart
          route:
            path: /cart
          data:
            children:
              - title: Storefront Cart
                route:
                  path: /storefront-cart
                data: {}
              - title: Server To Server Cart
                route:
                  path: /server-server-cart
                data: {}
        - title: Checkout
          route:
            path: /checkout
          data:
            children:
              - title: Storefront Checkout
                route:
                  path: /storefront-checkout
                data: {}
              - title: Server To Server Checkout
                route:
                  path: /server-server-checkout
                data: {}
              - title: Checkout SDK
                route:
                  path: /checkout-sdk
                data: {}
        - title: Orders
          route:
            path: /orders
          data:
            children:
              - title: New Subpage
                route:
                  path: /new-subpage
        - title: Shipping
          route:
            path: /shipping
          data:
            children:
              - title: New Subpage
                route:
                  path: /new-subpage
        - title: Taxes
          route:
            path: /taxes
          data:
            children:
              - title: New Subpage
                route:
                  path: /new-subpage
        - title: Payments
          route:
            path: /payments
          data:
            children:
              - title: New Subpage
                route:
                  path: /new-subpage
        - title: Store Information
          route:
            path: /store-information
          data:
            children:
              - title: New Subpage
                route:
                  path: /new-subpage
        - title: API Reference
          route:
            path: /api-reference
          data:
            children:
              - title: V3 API
                route:
                  path: /v3-api
                data:
                  $ref: ./V3 API Reference.oas2.yml
        - title: Legacy
          route:
            path: /legacy
          data: {}
  /changelog:
    title: Changelog
    data:
      $ref: ./Changelog.html
theme:
  background: '#3550b6'
logo: >-
  https://cdn6.bigcommerce.com/s-qtmbtj/product_images/uploaded_images/bigcommerce-logomark-darkbg.png
