title: BigCommerce
logo: 'https://next.stoplight.io/images/mark-light-bg.png'
header:
  nav:
    left:
      - title: Current Docs
        path: 'https://developer.bigcommerce.com'
      - title: Changelog
        path: /changelog
    right: []
pages:
  /:
    title: Welcome
    data:
      blocks: []
      children:
        - title: Catalog
          route:
            path: /catalog
          data:
            blocks:
              - type: text
                data: >-
                  “Catalog” refers to the collection of virtual representations
                  of an e-commerce merchant’s saleable products, stored within
                  the BigCommerce platform. The catalog domain consists of this
                  and several related functions which augment the merchant’s
                  ability to communicate the details of products to their
                  shoppers in order to encourage their sale.


                  The Catalog domain is in turn consumed downstream by other
                  domains, namely Orders, Cart, Storefront/Merchandising,
                  Omnichannel, Shipping, and Tax. There is overlap with other
                  domains such as Discounts/Promotions, Analytics, and others.



                  [Eventually and Image will go here]
              - type: text
                data:
                  $ref: ./Product.md
            children:
              - title: Products
                route:
                  path: /products
                data:
                  blocks:
                    - type: text
                      data: Content
                    - type: text
                      data: '# Products'
                    - type: text
                      data: '## /catalog/products'
                    - type: html
                      data: <span id="hello" class="hello-again"></span>
                    - type: text
                      data: >-
                        ## Overview


                        Products are the primary catalog entity, and the primary
                        function of the e-commerce platform is to sell products
                        on the storefront and other selling channels.


                        Products can either be [Simple](#simple-product) or
                        [Complex](#complex-product). Simple products do not have
                        any options, modifiers, or variants, and therefore
                        cannot be configured or modified before they are added
                        to cart. A simple product is its own variant. Complex
                        products have at least one option and may have modifiers
                        or variants.


                        Products can be Physical or Digital. Physical products
                        are typically products that exist in a physical form,
                        have a weight, and are being sold by retailers with the
                        intent of shipping them to customers. Digital products,
                        on the other hand, may not have a physical
                        representation in the real world; this includes
                        downloadable products such as computer software, ebooks,
                        music, images, and other digital media. Alternatively, a
                        digital product may be used to sell services such as spa
                        treatments, consulting, and so forth - which also do not
                        require shipping.
                      header:
                        anchor: adadfdfasdfdfdsfds
                    - type: code
                      data: "{\n\t\"name\": \"BigCommerce Coffee Mug\",\n\t\"price\": \"10.00\",\n\t\"categories\":[\n\t\t\t23,21\n\t\t],\n\t\t\n\t\"weight\": 4,\n\t\"type\": \"physical\"\n}\n"
                      header:
                        title: Create a Simple Product
                        subtitle: >-
                          /POST
                          https://api.bigcommerce.com/stores/store_hash/v3/catalog/products
                        anchor: simple-product
                      config:
                        mode: json
                    - type: code
                      data: "{\n\t\"name\": \"BigCommerce Coffee Mug\",\n\t\"price\": \"10.00\",\n\t\"categories\":[\n\t\t\t23,21\n\t\t],\n\t\t\n\t\"weight\": 4,\n\t\"type\": \"physical\",\n\t\"variants\":[\n\t\t{\n\t\t\t\"sku\": \"SKU-BLU\",\n\t\t\t\"option_values\":[\n\t\t\t\t\t{\n\t\t\t\t\t\t\"option_display_name\": \"Mug Color\",\n\t\t\t\t\t\t\"label\": \"Blue\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"sku\": \"SKU-GRAY\",\n\t\t\t\"option_values\":[\n\t\t\t\t\t{\n\t\t\t\t\t\t\"option_display_name\": \"Mug Color\",\n\t\t\t\t\t\t\"label\": \"Gray\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t}\n\t]\n}\n"
                      header:
                        title: Create a Complex Product
                        subtitle: >-
                          /POST
                          https://api.bigcommerce.com/stores/store_hash/v3/catalog/products
                        anchor: complex-product
                      config:
                        mode: json
                    - type: callout
                      data:
                        body: >-
                          When options are created, it defaults the
                          `'display_type` to radio buttons unless otherwise
                          specified.
                    - type: text
                      data: >+
                        ## Product Attributes


                        Below is the minimum needed to create a *Product*.


                        |Term|Definition|

                        |--|--|

                        |Name|The descriptive name of the saleable entity, such
                        as “iPad”, “Exotic Meats Crate”, or “Maxim Two Piece
                        Suit”. It’s the primary human-readable descriptor of a
                        product.|

                        |Price|The price a shopper would expect to pay for the
                        product, absent anything that might modify the price.|

                        |Category(s)|A collection of the categories on the
                        product, of which there must be at least one. These are
                        drawn from the store’s configured Categories, and will
                        define the catalog’s navigational hierarchy on the
                        storefront which is a primary means of discovering
                        products.|

                        |Weight|The shipping weight of the product, which can be
                        used in shipping calculations, promotions/discounts, and
                        for storefront display. Physical products require a
                        weight, while Digital products do not.|

                        |Type|Physical or Digital. Defaults to Physical.|

                    - type: text
                      data: >-
                        There are numerous other product fields. To see a full
                        list visit the [Catalog API
                        Reference](https://bigcommercecart1.docs.stoplight.io/new-page-b1g4f/v3-api/catalog/getproducts).  




                        | Term | Definition |

                        | ------ | ----------- |

                        | data   | path to data files to supply the data that
                        will be passed into templates. |

                        | engine | engine to be used for processing templates.
                        Handlebars is the default. |

                        | ext    | extension to be used for dest files. |


                        (not the actual data, I just didn't feel like making it)
                    - type: text
                      data: '## Webhooks'
              - title: Categories
                route:
                  path: /categories
                data: {}
        - title: Webhooks
          route:
            path: /webhooks
          data:
            children:
              - title: About Webhooks
                route:
                  path: /about-webhooks
                data:
                  blocks:
                    - type: text
                      data: >
                        ## What We'll Cover


                        * [Events Available](http://)

                        * [Authentication](#authentication)

                        * [Lightweight Callback
                        Payload](#lightweight-callback-payload)

                        * [Request and Response](#request-and-response)

                        * [Recieving the Callback](#receiving-the-callback)

                        * [Responding to the
                        Callback](#respond-to-webhook-callbacks)

                        * [Callback Retry Mechanism](#callback-retry-mechanism)

                        * [Webhook Security](#webhook-security)

                        * [Tools for
                        Debugging](#tools-for-debugging-and-testing-webhooks)


                        Webhooks allow app developers to be notified, in near
                        real-time, when specific events occur on a BigCommerce
                        store. For example, your app may need to perform an
                        action when a new order is created, a product’s
                        inventory decreases, or an item is added to a shopper’s
                        cart. When a subscribed event occurs on a store,
                        BigCommerce will POST a payload to your app’s callback
                        URI so your app can take some action based on that
                        event.
                    - type: callout
                      data:
                        type: warning
                        title: Multiple Events Are Triggered during Bulk Data Imports
                        body: >-
                          Bulk data imports will trigger the relevant events for
                          every record affected. For example, if you have a hook
                          on `store/product/created`, when the merchant imports
                          2,000 products, we will send 2,000 individual callback
                          events.
                    - type: text
                      data: >-
                        ## Authentication


                        Webhooks are authenticated using Oauth and support the
                        JSON media type. Basic auth and XML are not supported.


                        Before you can begin to send and receive requests, you
                        must have the following:


                        * A store: You can get a sandbox store by joining the
                        Partner Program.

                        * OAuth Client ID: Obtained by creating an API Account.

                        * OAuth token: Obtained by creating an API Account.

                        * Valid TLS/SSL configuration: Verify your app server’s
                        setup at the following site:
                        [https://sslcheck.globalsign.com](https://sslcheck.globalsign.com)
                    - type: callout
                      data:
                        type: error
                        title: Connection Breakers
                        body: >
                          Any one of the following conditions on your app server
                          will cause a connection failure:

                          * Hostname/DNS mismatch.

                          * Self-signed certificate.

                          * Intermediate certificates not loaded.
                    - type: text
                      data: >-
                        ## Lightweight Callback Payload


                        When a subscribed event occurs, we send a light payload
                        with only minimum details regarding the event that’s
                        been triggered. This gives you maximum flexibility as to
                        how you want to handle the notification in your
                        application. For instance, if you subscribe to the
                        `store/order/statusUpdated` event, we’ll send you the
                        order ID when the status is updated. You might want to
                        handle the notification by fetching the full order
                        details via a request to the Orders resource.


                        An example payload follows:


                        ```

                        {
                         "store_id":11111,
                         "producer":"stores/abcde",
                         "scope":"store/order/statusUpdated",
                         "data":{
                                 "type":"order",
                                 "id":173331
                                },
                         "hash":"3f9ea420af83450d7ef9f78b08c8af25b2213637"
                         }
                        ```


                        ## Request and Response


                        *Never worked with webhooks before? Check out the
                        tutorial on creating webhooks.*
                    - type: code
                      data: |+
                        curl -X POST \
                          https://api.bigcommerce.com/stores/store_hash/v2/hooks \
                          -H 'Accept: application/json' \
                          -H 'X-Auth-Client: your-client-id \
                          -H 'X-Auth-Token: your-auth-token \
                          -d '{
                          "scope": "store/cart/lineItem/*",
                          "destination": "https://myapp.herokuapp.com/",
                          "is_active": true
                        }

                        // Response 201 Created

                            {
                                "id": 14270456,
                                "client_id": "your-client-id",
                                "store_hash": "your_store_hash",
                                "scope": "store/cart/lineItem/*",
                                "destination": "https://779aca97.ngrok.io/webhooks",
                                "headers": null,
                                "is_active": true,
                                "created_at": 1531326542,
                                "updated_at": 1531337178
                            }

                      header:
                        title: '/POST Webhook '
                        subtitle: >-
                          Request:
                          https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks
                      config:
                        mode: json
                    - type: text
                      data: >
                        An HTTP 201 response indicates that the webhook was set
                        successfully.
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          Following the creation of a webhook, it can take up to
                          one minute for BigCommerce to start sending POST
                          requests to your callback URI.
                        title: One-Minute Timeout
                    - type: code
                      data: |
                        //Response 200 OK

                        [
                            {
                                "id": 14270466,
                                "client_id": "your-client-id",
                                "store_hash": "your_store_hash",
                                "scope": "store/product/created",
                                "destination": "https://779aca97.ngrok.io/webhooks",
                                "headers": null,
                                "is_active": true,
                                "created_at": 1531326542,
                                "updated_at": 1531337178
                            },
                            {
                                "id": 14270713,
                                "client_id": "your-client-id",
                                "store_hash": "your_store_hash",
                                "scope": "store/product/updated",
                                "destination": "https://779aca97.ngrok.io/webhooks",
                                "headers": null,
                                "is_active": false,
                                "created_at": 1531338589,
                                "updated_at": 1531338589
                            }
                        ]
                      header:
                        title: /GET All Webhooks
                        subtitle: >-
                          Request:
                          https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks
                      config:
                        mode: json
                    - type: code
                      data: |+
                        {
                            "id": 14270466,
                            "client_id": "your-client-id",
                            "store_hash": "your_store_hash",
                            "scope": "store/product/created",
                            "destination": "https://779aca97.ngrok.io/webhooks",
                            "headers": null,
                            "is_active": false,
                            "created_at": 1531326542,
                            "updated_at": 1531337178
                        }

                      header:
                        subtitle: >-
                          To get a single webhook use the `id`.  Request:
                          https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks/id
                        title: /GET a Single Webhook
                      config:
                        mode: json
                    - type: code
                      data: |
                        {
                         "scope": "store/product/updated",
                         "destination": "https://779aca97.ngrok.io/webhooks",
                         "is_active": false
                        }


                        Response 200 OK

                        {
                            "id": 14270466,
                            "client_id": "ejoftto9hv8xlip01cckcg53v7g3lrl",
                            "store_hash": "jrah6gmn",
                            "scope": "store/product/created",
                            "destination": "https://779aca97.ngrok.io/webhooks",
                            "headers": null,
                            "is_active": false,
                            "created_at": 1531326542,
                            "updated_at": 1531337178
                        }
                      header:
                        title: /PUT Webhook
                        subtitle: >-
                          Update a webhook using the id. Once the webhook is
                          created all the fields below can be changed via an
                          update request. Request:
                          https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks/id
                      config:
                        mode: json
                    - type: code
                      data: |
                        Response 200 OK
                        {
                            "id": 14270466,
                            "client_id": "ejoftto9hv8xlip01cckcg53v7g3lrl",
                            "store_hash": "jrah6gmn",
                            "scope": "store/product/created",
                            "destination": "https://779aca97.ngrok.io/webhooks",
                            "headers": null,
                            "is_active": false,
                            "created_at": 1531326542,
                            "updated_at": 1531337178
                        }
                      header:
                        title: /DELETE a Wehbook
                        subtitle: >-
                          Request:
                          https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks/id
                      config:
                        mode: json
                    - type: text
                      data: >
                        There is not a way to delete all webhooks on a store.
                        Run a GET request for the webhook id, then send a
                        request to the delete URI to remove each one. It returns
                        a 200 OK for the response with the deleted hook. When
                        requesting a list of hook, the hook id is not available.


                        If webhooks are no longer being used, either delete them
                        or set is_active:false.


                        ## Receiving the Callback


                        You’ll need to build an application and configure your
                        server to receive the callback we send when events are
                        triggered. 


                        Need to set up a quick destination URL for testing? See
                        Tools for Debugging and Testing Webhooks. 


                        ## Respond to Webhook Callbacks


                        You’ll need to build an application and configure your
                        server to receive the callback we send when events are
                        triggered.


                        To acknowledge that you received the webhook without
                        issue, your server should return a 200 HTTP status code.
                        Any other information you return in the request headers
                        or request body will be ignored. Any response code
                        outside the 200 range, including 3_xx_ codes, will
                        indicate to us that you did not receive the webhook.
                        When a webhook is not received (for whatever reason), we
                        will retry the callback as described below.


                        Need to set up a quick destination URL for testing? See
                        Tools for testing webhooks.


                        ## Callback Retry Mechanism


                        The webhooks service will do its best to deliver events
                        to your callback URI. If your server indicates that the
                        webhook payload has not been received, the dispatch
                        service will take the following actions:

                        If an app server responds to a webhook payload with
                        anything other than a 2_xx_ response, or times out, the
                        app will be blocked for 60 seconds.

                        Webhooks created during that 60-second block will be
                        queued up to send on the next scheduled retry attempt
                        after the block expires, so that webhooks are not lost.


                        The webhook dispatcher will then attempt several retries
                        (at increasing intervals) until the maximum retry limit
                        is reached.


                        ### Retry Intervals


                        60 seconds after the most recent failure  

                        180 seconds after the most recent failure  

                        180 seconds after the most recent failure  

                        300 seconds after the most recent failure  

                        600 seconds after the most recent failure  

                        900 seconds after the most recent failure  

                        1800 seconds after the most recent failure  

                        3600 seconds after the most recent failure  

                        7200 seconds after the most recent failure  

                        21600 seconds after the most recent failure  

                        50400 seconds after the most recent failure  

                        86400 seconds (24 hours) after the most recent failure


                        After the final retry attempt (cumulatively, 48 hours
                        after the first delivery attempt), the webhook will
                        automatically be deactivated, and we will send an email
                        to the developer’s email address registered on the
                        subscribing app. You can reactivate the webhook by
                        setting the `is_active` flag back to true via a `/PUT`
                        request to the hooks resource.



                        ## Webhook Security

                        To ensure that webhook payloads are secure against
                        activity by a malicious actor, we take a three-pronged
                        approach:


                        * Webhook payloads contain minimal information about the
                        store and event, for example the ID identifying the
                        order or cart. To access potentially sensitive
                        information on a store, a malicious actor would need to
                        be fully authenticated against that store’s API in order
                        to request full details.

                        * Webhook payloads are sent over a TLS-encrypted
                        connection.

                        * For added security, you can include custom headers in
                        your webhook creation request, and these headers will be
                        sent in the payload when an event you subscribe to
                        occurs. If your app endpoint is secured by basic
                        authentication, you could set your own basic auth
                        headers to authenticate the payload at runtime. 


                        ## Troubleshooting


                        ### Why am I not receiving event payloads to my callback
                        URI?

                        If your app does not return an HTTP 2_xx_ to BigCommerce
                        after receiving the webhook event payload, BigCommerce
                        considers it a failure. BigCommerce will keep trying for
                        a little over 48 hours. At the end of that time,
                        BigCommerce sends an email to the email address set
                        during app registration and disables the webhook by
                        setting the is_active flag to false.


                        You can proactively check to make sure that everything
                        is OK by periodically making a GET request and checking
                        the is_active flag.


                        If you receive an email or discover that the is_active
                        flag has been flipped to false, try the following:


                        Check to see if your app is responding to the event
                        payload with something other than HTTP 200.

                        Check to make sure that your server has a valid TLS/SSL
                        setup. One way to do this is by visiting the following
                        website: https://sslcheck.globalsign.com. Any of the
                        following will cause the TLS/SSL handshake to fail:

                        Self-signed certificate.

                        Host name of the certificate does not match the server’s
                        DNS.

                        Your server’s key or trust store has not been loaded up
                        with the intermediate certificates necessary to
                        establish the chain of trust.

                        Once you have resolved the issue preventing the
                        connection, send a PUT request to flip the is_active
                        flag back to true. This will cause BigCommerce to start
                        sending the event payloads to your callback URI again.


                        ### Why am I not receiving a 201 response after creating
                        a webhook?

                        After sending a POST request to create a webhook, you
                        should get an HTTP 201 back. If you do not, check your
                        TLS/SSL setup and be sure that your request contains the
                        following headers:


                        ```
                             Accept: application/json
                             Content-Type: application/json
                             X-Auth-Client: <the OAuth client id>
                             X-Auth-Token: <the OAuth token>
                        ```



                        ## Tools for Debugging and Testing Webhooks


                        **ngrok**  

                        As you are building your integration, you might want to
                        test webhooks on your local dev machines.


                        We suggest using ngrok, which you can use to easily set
                        up tunnels between a server running on localhost and a
                        public URL. This will enable you to send our webhooks to
                        your localhost environments via a public URL. No
                        production push is required.  

                        Need help on ngrok and webhooks see our tutorial.


                        **Webhook Tester**  

                        [https://webhook.site/#/](https://webhook.site/#/)
              - title: Testing Webhooks Tutorial
                route:
                  path: /testing-webhooks
                data:
                  blocks:
                    - type: text
                      data: >-
                        ## Prerequisites


                        * Node.js is installed

                        * NPM is installed

                        * Familiar with Command Line

                        * Familiar with Postman

                        * API Access Token & Client ID with scope set to
                        Information & Settings Read-Only & Products Read-Only.

                        * Webhooks Overview


                        ## Create project folder

                        Open the terminal and create a folder that will hold
                        Ngrok and the Node app, then move into that directory.

                        ```

                        BIGCOMMERCE:webhooks your.computer$ mkdir webhooks-test

                        BIGCOMMERCE:webhooks your.computer$ cd webhooks-test

                        ```


                        ## Install Ngrok

                        There are three ways to install Ngrok: 

                        * Install manually and then set the `$PATH` so Ngrok can
                        be used globally. 

                        * Download as an [npm
                        module](https://www.npmjs.com/package/ngrok). 

                        * Download manually and place in the project folder.
                        (Method we are using)


                        1. Visit [https://ngrok.com/](https://ngrok.com/) and
                        click on download.

                        2. Choose the version for your operating system.

                        3. Unzip ngrok and place the application in the project
                        folder that you created.
                    - type: callout
                      data:
                        type: success
                        body: >
                          At this point you should have a project folder with
                          ngrok unzipped inside of it. 
                    - type: text
                      data: "## Create Express App\n\n1. In the terminal run npm init. You will be prompted with several questions about the app setup. Feel free to hit return to accept the default value.  The final screen will look something like this: \n\n```\n{\n  \"name\": \"webhooks-test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"webhooks-test\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n2. Take note of the value in main, `index.js`. \n3. Create a file in your project folder called index.js.\n4. Install [Express](https://expressjs.com/) using the terminal in the same project folder.\n\n\t\t     npm install express --save\t\t\t\t "
                    - type: callout
                      data:
                        type: success
                        body: >-
                          At this point your project folder should have similar
                          contents:

                          index.js

                          node_modules

                          package.json

                          ngrok

                          package-lock.json
                    - type: text
                      data: >-
                        4. Open index.js in a text editor and add this code
                        snippet: 


                        ```

                        const express = require('express')

                        const app = express()

                        app.post('/webhooks', function (req, res) {

                        res.send('OK')

                        })

                        app.listen(3000, function () {

                        console.log('Listening for webhooks on port 3000')

                        })

                        ```


                        The app is starting a server and listening on port 3000,
                        then returning a response of ok once it receives a
                        `POST` to the `/webhooks` url.


                        ```

                        app.post('/webhooks', function (req, res) {
                         res.send('OK')
                        })

                        ```



                        From [Express
                        Website](https://expressjs.com/en/starter/basic-routing.html):  


                        `app.METHOD(PATH, HANDLER)`  

                        * app is an instance of express.

                        * METHOD is an HTTP request method, in lowercase.

                        * PATH is a path on the server.

                        * HANDLER is the function executed when the route is
                        matched.

                        * Res.send is the body parameter that sends the HTTP
                        response. 



                        ## Start the app and Ngrok

                        We are going to start the app and visit the ngrok url to
                        see the status of our webhooks. 



                        1. Open two terminal tabs. They both should be in your
                        project folder. 

                        2. In one tab run the app. `node index.js`

                        3. In the other start ngrok. `ngrok http 3000`
                    - type: tabs
                      data:
                        children:
                          - title: node index.js
                            blocks:
                              - type: text
                                data: >-
                                  ```

                                  BIGCOMMERCE:webhooks your.computer$ node
                                  index.js

                                  Listening for webhooks on port 3000

                                  ```
                          - title: ngrok http 3000
                            blocks:
                              - type: image
                                data: >-
                                  //s3.amazonaws.com/user-content.stoplight.io/6012/1531500085650
                                config:
                                  centered: true
                    - type: text
                      data: >-
                        Ngrok returns two values we need for webhooks. Web
                        Interface, where you can monitor the hook from a
                        browser. Forwarding is the webhook destination. Make
                        note of the https version. In this example its
                        https://6a35e97b.ngrok.io.


                        Open a web browser and copy in your Web Interface URL.
                        `http://127.0.0.1:4040` -  This is where the webhooks
                        will appear when they fire.
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1531500191661
                    - type: text
                      data: "## Create the webhooks\n\nThe webhook we are going to subscribe to is `store/product/updated`. \n\n1. In Postman create a POST request using `https://api.bigcommerce.comstores/{{store_hash}}/v2/hooks`. \n\t2. Replace store_hash with your store.\n3. Create a body request with the webhook we are subscribing to and your forwarding url:\n\n```\n{\n \"scope\": \"store/product/updated\",\n \"destination\": \"https://6a35e97b.ngrok.io/webhooks\",\n \"is_active\": true\n}\n```\n> Don't have Postman. Use the Try it out box below.\n\nThe destination url is the forwarding url from Ngrok and /webhooks,  matching the URL path set in the app POST.  \n\n3. Update the headers to have:\n\n```\n    Accept: application/json\n     Content-Type: application/json\n     X-Auth-Client: {{the OAuth client id}}\n     X-Auth-Token: {{the OAuth token}}\n```"
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1531500381736
                    - type: http
                      data:
                        method: post
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v2/hooks
                        headers:
                          Accept: application/json
                          Content-Type: application/json
                          X-Auth-Client: '{the OAuth client id}'
                          X-Auth-Token: '{the OAuth token}'
                        body: |
                          {
                          "scope": "store/product/updated",
                           "destination": "https://{your-url}.ngrok.io/webhooks",
                           "is_active": true
                          }
                      header:
                        title: Create a Webhook
                    - type: text
                      data: >-
                        4. Check all the values and then hit `/POST`.


                        The response is a 201 Created.


                        ```

                        {
                            "id": 14263419,
                            "client_id": "your-client-id",
                            "store_hash": "your-store-hasha",
                            "scope": "store/product/updated",
                            "destination": "https://6a35e97b.ngrok.io/webhooks",
                            "headers": null,
                            "is_active": true,
                            "created_at": 1531256030,
                            "updated_at": 1531256030
                        }

                        ```



                        ## Fire Webhooks


                        You can fire the webhook in two ways. Either the API or
                        the store’s control panel. We are going to cover both.


                        ### Update via the Control Panel


                        1. From your store’s control panel, navigate to Products
                        > View. Choose a product and change some of the
                        information. In this case, I added the word Hoodie to
                        the product name. Then click save.
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1531500906129
                    - type: text
                      data: >-
                        2. Visit the Ngrok web interface address (in the sample
                        app it’s http://127.0.0.1:4040), and check for a 200
                        response. 
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1531500945565
                    - type: text
                      data: >-
                        Under Summary you can see the webhook has fired. It
                        returned the text OK. This can be changed. In the
                        original app, res.send(‘OK’). This can be changed to say
                        something different or even post the response to another
                        app.  


                        The response will also show in the terminal. 
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1531500989467
                    - type: text
                      data: >-
                        ## Update via the API


                        Create a `/PUT` request to the product that needs to be
                        updated. (link to request article)


                        `https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/124`


                        In this example I am changing the price on `product_id`
                        124  to 12.99.
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1531501093233
                    - type: http
                      data:
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}
                        headers:
                          X-Auth-Client: '{Your-X-Auth-Client}'
                          X-Auth-Token: '{Your-X-Auth-Token}'
                          Accept: application/json
                          Content-Type: application/json
                        method: put
                        body: |-
                          {
                            "price": 12.99
                          }
                      header:
                        title: Update a Product
                    - type: text
                      data: >-
                        After hitting send, check the website. You may have more
                        or less events based on how many times the product has
                        been updated. 
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1531501115256
                    - type: text
                      data: >-
                        That’s it. In this walkthrough you created a webhook,
                        setup a server to accept the response and used Express.
                        Some extra things are to change the text in res.send()
                        to have a custom response, print the response to a
                        webpage or setup a different webhook. 
                    - type: callout
                      data:
                        body: >-
                          Unless you have paid for Ngrok, the URL is only valid
                          for a few hours. After that, the webhook will stop
                          working. Send a
                          [DELETE](https://bigcommercecart1.docs.stoplight.io/webhooks#request-and-response)
                          request to the specific webhook id. 
                        type: warning
                    - type: http
                      data:
                        method: delete
                        url: >-
                          https://api.bigcommerce.com/stores/{store_hash}/v2/hooks/{hook_id}
                        headers:
                          X-Auth-Client: '{your-client-id}'
                          X-Auth-Token: '{your-auth-token}'
                          Content-Type: application/json
                          Accept: application/json
                      header:
                        title: Delete the webhook
                        subtitle: >-
                          Get the hook_id by either getting it from the original
                          /POST response or by sending a /GET request to the
                          hooks resource
        - title: V3 API
          route:
            path: /v3-api
          data:
            $ref: ./V3APIT.oas2.yml
theme:
  secondary: '#6574cd'
  texture: 'https://www.transparenttextures.com/patterns/cubes.png'
