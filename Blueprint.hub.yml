title: Dev Center
header:
  nav:
    left:
      - title: API Docs
        path: /api-docs
      - title: Stencil Docs
        path: /stencil-docs
      - title: Tools & Resources
        path: /tools-resources
      - title: Changelog
        path: /changelog
      - title: Blueprint
        path: /legacy
    right:
      - title: My Apps
        path: 'https://devtools.bigcommerce.com'
      - title: Create Account
        path: 'https://login.bigcommerce.com/signup'
pages:
  /:
    title: Developer Documentation
    data:
      $ref: ./Home.html
  /stencil-docs:
    title: Stencil Docs
    data:
      children:
        - title: Getting Started
          route:
            path: /getting-started
          data:
            children:
              - title: Transitioning to Stencil
                route:
                  path: /transitionining-to-stencil
                data:
                  blocks:
                    - type: text
                      data: '# Transitioning to Stencil'
                    - type: text
                      data: >-
                        Are you approaching Stencil from a different theming
                        framework, like BigCommerce's legacy Blueprint
                        framework? Are you moving to the Stencil templating
                        environment from pure HTML and CSS-based design?


                        Use this article to identify your ideal method for
                        Stencil theme development and learn Stencil's
                        conventions. It will cover the following information:


                        * Choosing a Development Path

                        * Front-Matter Quick Start

                        * Handlebars Quick Start

                        * SEO Tips/Best Practices

                        * Blueprint-to-Stencil Features Map

                        * Interacting with the BigCommerce API

                        * Partnering with BigCommerce

                        * Next Steps
                    - type: text
                      data: >-
                        ## Choosing a Development Path


                        You have four options for developing Stencil themes
                        (options are *not* mutually exclusive):


                        * Find a Design & Solutions Partner

                        * Light Customization using the Theme Editor

                        * Light Customization using HTML and CSS

                        * Adapting a Stencil Theme or Developing from Scratch
                    - type: text
                      data: >-
                        ###  Find a Design & Solutions Partner


                        If you prefer to have an expert collaborator customize
                        your theme, we recommend working with one of our
                        certified BigCommerce Design & Solutions Partners.
                        Reference the following resources to do so:


                        * [Partner
                        Directory](https://partners.bigcommerce.com/directory/search?i=75)

                        * [Working with a Design
                        Partner](https://support.bigcommerce.com/articles/Learning/Working-with-a-Design-Partner)
                        (Support Guide)
                    - type: text
                      data: >-
                        ### Light Customization – Graphical Theme Editor


                        Stencil can be customized without the use of any
                        specialized development tools or techniques by using of
                        the Stencil Theme Editor. The Stencil Theme Editor still
                        enables customization of a theme's colors, typography,
                        banners, headings, carousel, and footer. It also enables
                        customization of broader layout characteristics, such as
                        the number of products displayed in various panels,
                        category pages, and brand pages.


                        For details, please see:


                        * [Theme
                        Editor](https://support.bigcommerce.com/articles/Public/Using-the-Stencil-Theme-Editor/)
                        (Support article)

                        * [Stencil and the BigCommerce Control
                        Panel](https://www.youtube.com/watch?v=d2F6F8LJXzs&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0&index=2)
                        (Video introduction to Theme Editor)

                        * [Changing Your Store's
                        Theme](https://support.bigcommerce.com/articles/Learning/What-to-Consider-When-Changing-Your-Theme)
                        (Support guide)

                        * [Personalizing Your
                        Theme](https://support.bigcommerce.com/articles/Learning/Personalizing-your-New-Theme)
                        (Support guide)
                    - type: text
                      data: >-
                        ### Light Customization – HTML/CSS


                        If you are most comfortable working in HTML and CSS,
                        Stencil's *Edit Theme Files* feature allows you to
                        directly edit most of your theme's files. For details,
                        please see:


                        * [Edit Theme
                        Files](https://support.bigcommerce.com/articles/Public/Editing-Stencil-Theme-Files)
                        (Support article)

                        * [Edit Theme
                        Files](https://www.youtube.com/watch?v=waJ1dg_dAh8&index=11&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0)
                        (Video overview of copying and editing a theme's files)
                    - type: text
                      data: >-
                        ### Adapt a Stencil Theme, or Develop from Scratch


                        For complete control over a theme's appearance and logic
                        – including the ability to edit _all_ theme
                        configuration files – you will want to use the Stencil
                        CLI (command-line interface) framework. Stencil CLI is
                        described in detail in the remainder of this
                        documentation. 


                        To get up to speed on Stencil&#160;CLI's templating
                        conventions, please see the Quick Start sections just
                        below. Also see:


                        * [Getting Started with the Stencil
                        Framework](https://www.youtube.com/playlist?list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0)
                        (Videos)
                    - type: text
                      data: >+
                        ## Front-Matter Quick Start


                        Stencil templates start with a section of "front matter"
                        where you can and concisely customize each page's design
                        and layout details. 


                        This front-matter section uses conventions from YAML, a
                        simple, widely used markup language. If you haven't used
                        these conventions before, refer to our [Front-Matter
                        Overview](https://stencil.bigcommerce.com/docs/using-yaml-front-matter).


                    - type: text
                      data: >
                        ## Handlebars Quick Start


                        Stencil uses Handlebars.js to assemble dynamic content
                        into the storefront pages that are displayed to
                        shoppers. The dynamic content can be drawn from a few
                        sources, like the store's catalog.


                        Handlebars' syntax is quite simple, and it allows you to
                        accomplish powerful JavaScript operations with minimal
                        JavaScript code. To learn more about Handlebars.js, see
                        these third-party tutorials: 


                        * [Learn Handlebars in 10 Minutes or
                        Less](http://tutorialzine.com/2015/01/learn-handlebars-in-10-minutes/)

                        * [A Beginner’s Guide to
                        Handlebars](https://www.sitepoint.com/a-beginners-guide-to-handlebars/)

                        * [Getting Started with
                        Handlebars.js](http://blog.teamtreehouse.com/getting-started-with-handlebars-js)

                        * [Handlebars interactive
                        tutorial](http://tryhandlebarsjs.com/)
                    - type: text
                      data: >+
                        ## SEO Tips/Best Practices


                        Search-engine optimization (SEO) helps translate an
                        elegant theme into a successful, high-conversion
                        storefront. Because so many shoppers reach online stores
                        through a search engine, a search-optimized site will be
                        more visible – attracting more traffic. 


                        The Stencil framework is [designed for high SEO
                        performance](https://www.bigcommerce.com/improve-organic-traffic/).
                        However, you will want to keep SEO in mind as you build
                        out each theme and storefront. For guidelines, please
                        see these BigCommerce support articles (which are a
                        series of intermediate to advanced chapters in our Guide
                        to SEO):


                        * [SEO Do's and
                        Don'ts](https://support.bigcommerce.com/articles/Learning/Things-to-Know/)

                        * [Developing a Keyword
                        Strategy](https://support.bigcommerce.com/articles/Learning/Developing-a-Keyword-Strategy/)

                        * [SEO Success
                        Essentials](https://support.bigcommerce.com/articles/Learning/Bigcommerce-SEO-Success-Essentials/)

                        * [Advanced SEO on
                        BigCommerce](https://support.bigcommerce.com/articles/Learning/Advanced-SEO-on-Bigcommerce/)


                        Also checkout our [Guide to Keyword
                        Research](https://support.bigcommerce.com/articles/Learning/Value-of-Keywords/).


                    - type: text
                      data: >-
                        ## Blueprint-to-Stencil Features Map 


                        This following resources are designed to help you
                        identify the Stencil counterparts to familiar Blueprint
                        components.


                        * What to Consider When Changing Your Theme (Support
                        article)

                        * Stencil and the BigCommerce Control Panel (Video tour
                        of Blueprint-to-Stencil  changes in the BigCommerce
                        control panel)
              - title: Supported Browsers
                route:
                  path: /supported-browsers
                data:
                  blocks:
                    - type: text
                      data: '# Supported Browsers'
                    - type: text
                      data: >-
                        The following browsers are supported for BigCommerce
                        storefronts that use Stencil-based themes. The browsers
                        are sorted by popularity, beginning with the most
                        popular browsers. Please ensure that your theme
                        functions properly with all supported browsers.


                        ### Desktop Browsers


                        * Google Chrome (latest edition)

                        * Firefox (latest edition)

                        * Internet Explorer 10 and 11

                        * Safari (latest edition)

                        * Microsoft Edge (latest edition)


                        ## Mobile Browsers 


                        * Android Chrome browser (latest edition)

                        * iOS Safari browser (latest edition)
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          Browser support will cease to be offered if browser
                          usage falls below 2%.
                        title: Usage Support
              - title: Installation and Launch
                route:
                  path: /installation-and-launch
                data:
                  children:
                    - title: Mac OS Prerequisites
                      route:
                        path: /mac-os-prerequisites
                      data:
                        blocks:
                          - type: text
                            data: '# Mac OS Prerequisites'
                          - type: callout
                            data:
                              title: Platform Support
                              body: >-
                                These instructions have been tested on Mac OS X
                                Yosemite. Dependencies for other platforms will
                                be added upon further testing.
                          - type: text
                            data: >-
                              <span id="Prerequisites">To smoothly set up
                              Stencil on Mac OS, please first verify the
                              requirements listed here: </span>


                              * [Xcode](#xcode)

                              * [Node.js](#Node+npm_Mac)

                              * [Next Steps](#next)
                          - type: text
                            data: >-
                              ## <span id="xcode"> Xcode </span>


                              You must install the <a
                              href="https://developer.apple.com/xcode/download/">Xcode</a>
                              development tools (latest stable version).
                          - type: text
                            data: >-
                              ## <span id="Node+npm_Mac"> Node.js </span>


                              Stencil requires the <a
                              href="https://nodejs.org/">Node.js</a> runtime
                              environment, version <a
                              href="https://nodejs.org/en/blog/release/">6.x or
                              later</a>. We have tested Stencil on selected
                              Node.js versions, from <a
                              href="https://nodejs.org/en/blog/release/v6.10.3/">6.10.3</a>
                              to <a
                              href="https://nodejs.org/en/blog/release/v7.9.0/">7.9.0</a>. 


                              We recommend that you install or update Node.js
                              using <a
                              href="https://github.com/creationix/nvm#installation">nvm</a>.
                              First install nvm, version <a
                              href="https://github.com/creationix/nvm/tree/v0.31.0">0.31.0</a>,
                              as follows:


                              ```

                              curl -o-
                              https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh
                              | bash

                              ```


                              Next, explicitly install a supported Node.js
                              version, using this convention:<br>


                              ```

                              nvm install 6.4.0

                              ```
                          - type: callout
                            data:
                              title: Notes on Dependencies
                              body: >-
                                You can choose to instead download the latest
                                x.x version of Node.js from the Node.js
                                Foundation's archives, using URLs of the form:
                                https://nodejs.org/dist/latest-v6.x/,
                                https://nodejs.org/dist/latest-v7.x/, etc. In
                                all cases, we recommend installing only LTS
                                ("Long-Term Support"/"Mature and Dependable")
                                versions.


                                While alternate versions might also support
                                Stencil, BigCommerce does not offer technical
                                assistance on substitutions for, or customized
                                versions of, the tested dependencies listed
                                here.
                          - type: text
                            data: >+
                              ## Troubleshooting


                              If you run into any problems with Stencil
                              installation or launch, first consult
                              Troubleshooting Your Setup. 


                              If that does not resolve your issue, consult our
                              Support resources, which include community/peer
                              support via BigCommerce and Stack Overflow forums.

                          - type: text
                            data: >-
                              ## <span id="next" > Next Steps </span>


                              Navigate to Installing Stencil CLI tothe Stencil
                              framework.
                    - title: Linux Prerequisities
                      route:
                        path: /linux-prerequisites
                      data: {}
                    - title: 'Windows Prerequisites '
                      route:
                        path: /windows-prerequisites
                      data: {}
                    - title: Installing Stencil CLI/Framework
                      route:
                        path: /new-page-sjfek
                      data:
                        blocks:
                          - type: text
                            data: >
                              ## Video Demonstrations

                              Watch Stencil senior developer Mick Ryan's brief
                              demonstration of Stencil installation and launch:
                    - title: Adding a Base Theme
                      route:
                        path: /adding-a-base-theme
                      data: {}
                    - title: Installing Javascript
                      route:
                        path: /new-subpage
                      data: {}
              - title: Authentication
                route:
                  path: /authentication
                data:
                  children:
                    - title: Creating an API Account
                      route:
                        path: /creating-an-api-account
                      data: {}
                    - title: Issuing Additional Tokens
                      route:
                        path: /issuing-additional-tokens
                      data: {}
                    - title: Revoking Tokens
                      route:
                        path: /revoking-tokens
                      data: {}
                    - title: Copying a Token to Initialize Stencil
                      route:
                        path: /copying-a-token-to-initializ
                      data: {}
                    - title: Launching Stencil
                      route:
                        path: /launching-stencil
                      data: {}
              - title: Authorizing and Initializing Stencil
                route:
                  path: /authorizing-and-initializing-stencil
                data:
                  children:
                    - title: Running Stencil Locally
                      route:
                        path: /running-stencil-locally
                      data: {}
                    - title: Troubleshooting Your Setup
                      route:
                        path: /troubleshooting-your-setup
                      data: {}
                    - title: >-
                        Uninstalling/Reinstalling Stencil and Its Node
                        Prerequisites
                      route:
                        path: /installing-stencil
                      data: {}
                    - title: Stencil CLI Options and Commands
                      route:
                        path: /stencil-cli-options-and-commands
                      data: {}
                    - title: Stencil Theme's Path Anatomy
                      route:
                        path: /stencil-themes-path-anatomy
                      data: {}
        - title: Advanced Installation Options
          route:
            path: /advanced-installation-options
          data:
            blocks:
              - type: text
                data: ''
            children:
              - title: 'Stencil Setup, Illustrated'
                route:
                  path: /stencil-setup
                data:
                  blocks:
                    - type: text
                      data: >-
                        The diagram below looks complex because it shows _all_
                        currently supported workflows for setting up Stencil.
                        However, for a typical initial setup – incorporating the
                        default Cornerstone reference theme – you would just
                        follow the black arrows straight down from top to
                        bottom.


                        Here are the color codes for each setup scenario, with
                        links to details about individual steps:


                        * Black: Basic initial setup, relying on default
                        Cornerstone theme. 

                        * Purple: Customize a theme downloaded from Theme
                        Marketplace (_other than_ Cornerstone). 

                        * Orange: Refresh Cornerstone from Theme Marketplace. 

                        * Green: Configure a custom JavaScript build system, to
                        avoid dependence on Webpack and jspm.

                        * Blue: Adds onto any of the preceding four scenarios.
                        If developing for a BigCommerce Blueprint production
                        store launched before Jan. 26, 2016, you must add one
                        extra step to enable Stencil in the store's control
                        panel.
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6116/1532113466661
              - title: Navigating Your Setup Scenario
                route:
                  path: /navigating-your-setup-scenario
                data:
                  blocks:
                    - type: text
                      data: >-
                        # Navigating Your Setup Scenario


                        //information that doesn't need to be indexed


                        Below, each heading identifies one theme-development
                        scenario and lists the minimum installation steps you
                        will need to support that scenario:


                        * Initial Cornerstone-Based Setup

                        * Cornerstone (or Diamond/Queen) Refresh

                        * Downloaded Marketplace Theme

                        * Custom Build System

                        * Blueprint Store Launched before 1/26/2016
                    - type: callout
                      data:
                        type: warning
                        title: Notes
                        body: >-
                          * Some steps are optional for some theme-development
                          workflows. See below to identify the recommended
                          installation pathway for your own scenario. 


                          * After successful framework installation (or
                          reinstallation), all scenarios will link you to the
                          Preparing Your Store/Tokens Launching Stencil
                          subsections, to launch your theme locally against a
                          BigCommerce storefront.


                          * Our installation instructions have been tested on
                          Mac OS X Yosemite, Linux/Ubuntu v.14.04.4, and
                          Windows. Dependencies for other platforms/releases
                          will be added upon further testing.


                          * If you encounter any problems, please see the
                          Troubleshooting entry.
                    - type: text
                      data: >-
                        ## Initial Cornerstone-Based Setup 


                        Start developing based on BigCommerce's default
                        Cornerstone theme. This is a streamlined workflow, using
                        Webpack as its JavaScript build system. Steps required:


                        * Install all prerequisites

                        * Install Stencil CLI

                        * Clone default Cornerstone theme

                        * Install JavaScript utilities with npm

                        * Prepare Store and Tokens

                        * Proceed to Launching Stencil
                    - type: text
                      data: >-
                        ## Cornerstone Refresh 


                        Download and install a new version of Cornerstone from
                        BigCommerce's Theme Marketplace. Steps required:


                        * Assume all prerequisites installed and Stencil CLI
                        installed

                        * Download fresh Cornerstone .zip

                        * Reinstall JavaScript utilities with npm

                        * Repeat Launching Stencil
                    - type: text
                      data: >-
                        ## Downloaded Marketplace Theme 


                        Customize a theme (_other than_ Cornerstone, Diamond, or
                        Queen) downloaded from BigCommerce's Theme Marketplace.
                        This workflow requires BitBucket, and some earlier theme
                        versions require additional steps for the jspm
                        JavaScript build system. Steps required:


                        * Install all prerequisites

                        * Install Stencil CLI

                        * Set up BitBucket, download .zip, and install
                        JavaScript dependencies

                        * Install JavaScript utilities with npm

                        * Prepare Store and Tokens

                        * Proceed to Launching Stencil
                    - type: text
                      data: >-
                        ## Custom JavaScript Build System 


                        Bypass Webpack (and jspm) by substituting a custom
                        JavaScript build system. Steps recommended:


                        * Install all prerequisites

                        * Install Stencil CLI

                        * Clone default Cornerstone theme

                        * Install JavaScript utilities with npm

                        * Configure your custom build system

                        * Prepare Store and Tokensstore-tokens)

                        * Proceed to Launching Stencil
                    - type: text
                      data: >-
                        ## Blueprint Store Launched before 1/26/2016 


                        Enable Stencil development on a BigCommerce production
                        store that was launched with a Blueprint theme before
                        Jan. 26, 2016. Steps required:

                          * Follow the installation path above that corresponds to your development scenario.
                          * As a separate (and simple) procedure, enable Stencil in the store's control panel.
              - title: Downloading a Refreshed Copy of Cornerstone
                route:
                  path: /downloading-a-refreshed-copy-of-cornerstone
                data:
                  blocks:
                    - type: callout
                      data:
                        body: >-
                          The steps below are required only if you are
                          downloading a refreshed copy of Stencil's default
                          Cornerstone theme, from the BigCommerce Theme
                          Marketplace.


                          If you are downloading a different Marketplace theme
                          for customization, you must instead use the workflow
                          outlined at Downloading and Customizing Marketplace
                          Themes.


                          (Cornerstone, Diamond, and Queen use a simplified
                          workflow that bypasses BitBucket requirements, and
                          that replaces jspm with the Webpack build system. You
                          can configure Webpack's watched folders, or substitute
                          your own build system. For details, please see Webpack
                          and Build-System Options)


                          To keep any _custom or customized theme updated with
                          the new features that BigCommerce adds to Cornerstone,
                          please see our guidelines on Theme Updates and Version
                          Control.
                        title: Optional Workflow
                    - type: callout
                      data:
                        type: error
                        title: Back Up Before Reinstalling
                        body: >-
                          If you are reinstalling over a base theme on which you
                          have already begun development, first back up at least
                          your theme's .stencil file. This file contains your
                          store URL, your BigCommerce username and access
                          tokens, and other basic settings. Preserving those
                          settings will speed up initializing and launching the
                          new version.


                          To allow complete rollback, back up your whole
                          theme-name directory. (In a current default
                          installation, this directory is named.../cornerstone/.
                          Prior to March 2017, this directory's name defaulted
                          to .../stencil/.
                    - type: text
                      data: >-
                        ## Downloading the Cornerstone .zip 


                        Use these steps to download a refreshed version of the
                        Cornerstone, Diamond, or Queen theme from the store
                        control panel's Storefront area: 


                        * If you have not yet added Cornerstone (or
                        Diamond/Queen) to your store, start at Themes
                        Marketplace and add the theme.
                            
                        Go to Storefront -> My Themes.


                        Unpack the zipped theme to a working directory.


                        (This can be the directory where you have been
                        developing your theme, or a new directory.)


                        Reinstalling Dependencies and Relaunching 


                        Ensure that your theme includes all current
                        dependencies, by repeating JavaScript
                        Utilitiesinstallation.
                          
                        Repeat the steps listed in the Launching Stencil
                        subsection


                        Next, ensure that your theme includes all current
                        dependencies by re-running npm, as follows:


                        Navigate to your theme directory. This example assumes
                        that this target directory has the default name stencil


                        `cd stencil`


                        `npm install`


                        You are now ready to resume development of your theme.
                        Please proceed to Launching Stencil


                        Later, when you are ready to upload your customized
                        theme to a store, you should follow the zipping and
                        uploading instructions in Bundling and Submitting a
                        Theme and Troubleshooting Theme Uploads.
              - title: Theme Updates and Version Control
                route:
                  path: /theme-updates-and-version-control
                data:
                  blocks:
                    - type: text
                      data: '# Theme Updates and Version Control'
                    - type: text
                      data: >-
                        This page offers version-control best practices for:

                        * Isolating Customizations for Easier Updates

                        * Synchronizing with Cornerstone Theme Updates

                        * Synchronizing Updates for Multiple Themes


                        Each section progresses from simpler to more-complex
                        scenarios.
                    - type: callout
                      data:
                        title: Distributed Version Control via Git
                        body: >-
                          Many techniques discussed below rely on GitHub's
                          _distributed version control_ model and features. For
                          the underlying principles, please see [Git's own
                          documentation](https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control).
                    - type: text
                      data: >-
                        ## Isolating Customizations for Easier Updates


                        How best to set up your customized Stencil theme to
                        smoothly incorporate future updates in its base theme?
                        We're gratefully sharing these guidelines from Ken
                        Utting, Web Developer for BigCommerce client
                        [goruck.com](https://www.goruck.com/). His scenario
                        (slightly edited here) addresses maintaining a single
                        custom theme that is based on a third-party Marketplace
                        theme. But&#160;these guidelines also apply to
                        maintaining one, or multiple, themes based on Stencil's
                        default Cornerstone theme.
                    - type: text
                      data: "## Best Practices for Handling Theme Updates\n\nWe've made significant changes to our theme, and one principle that I've found successful is isolating my changes as much as possible. I try to put my changes into their own files, whether they're changes to templates, JavaScript, or SCSS. \n\nI also name all my files, CSS classes and identifiers, and JavaScript methods and classes with a `gr-` prefix (as an abbreviation for our company, GORUCK LLC). Also, any changes I make to standard theme files are identified with a comment, such as: \n\n`Go Ruck Customization`\n\t\t\nFor example, I have a file in `assets/scss/` named `gr-theme.scss`. All of the styles I've added to the theme are either in this file, or imported by this file. So for styling, my only changes to the theme itself are in a handful of places where I had to change an existing theme style (identified with a comment), plus this one line in `templates/layout/base.html`:\n\n`{{{stylesheet '/assets/css/gr-theme.css'}}}`\n\nI've found that this approach provides several advantages: \n\n* It makes it easier to distinguish my custom code from code supplied by the default theme.\n* It makes it less likely that my code will get intermingled with the standard theme code. This, in turn, prevents my code from unexpectedly being affected by theme updates.\n* It makes it easier to merge base-theme updates into my theme code.\n\n##### Comparing and Merging Apples to Apples\n\nHaving isolated my changes as much as I can, I identify theme changes by comparing stock (base) themes, rather than by comparing base themes to my customized theme. When a new version of the theme is released, I download the .zip file from the BigCommerce control panel. \n\nI then use a desktop diff tool (Beyond Compare) to \ncompare the new version to the .zip file of the theme's previous release. I ignore changes in the .zip file's\n `meta/` and `parsed/` folders, and to its `manifest.json`, and do a `Compare Contents` on the rest of the files.\n\nUltimately, I need to examine the changes carefully, to identify any changes that might affect, or be affected by, my customizations. And I need to test thoroughly. But comparing the stock themes to each other reduces the number of changes I have to examine. \n\nAlso, because I isolate my changes, most of the theme changes can be copied directly into the corresponding file in my customized theme. In practice, this means that I can limit my testing to the areas affected by changes in the standard theme, rather than having to re-test all my own changes.\n\nI personally find that it is also helpful to migrate *every* theme update into my customized version, as the update is released. If I were to wait, and to allow changes to accumulate and become more substantial, I think it would be more difficult to adequately test – and correctly integrate – the changes. Similarly, I'm grateful to the developer of our base theme (Pixel Union) for updates that have always made small, incremental changes.\n\n##### Dynamic Content Injection\n\nFinally, we've also come up with a variety of techniques for dynamically placing content on a page. For example, we can dynamically add tabs to a product page, using content stored on our WebDAV. Similarly, we can inject content from an external file into the body of a page. This allows us to put something that appears in many places, like a sizing chart, in a single place where it can be easily updated. \n\nOr, we can use the BigCommerce control panel's various HTML editors – for Products, Categories, and Content > Web Pages – to inject content into predefined \"dropzones\" (custom div's). This allows us to generate a wide variety of content pages using a single custom template.\n\nAll of these techniques move content out of the theme, minimizing the complexity of merging base-theme updates into our customized theme. For details on how we use them, please see Dynamic Content Rendering on Stencil Storefronts."
              - title: Configuring Webpack or a Custom Build System
                route:
                  path: /configuring-webpack
                data:
                  blocks:
                    - type: text
                      data: '# Configuring Webpack or a Custom Build System'
                    - type: text
                      data: >-
                        ## Webpack, jspm, or Other JavaScript Managers


                        Stencil themes are Node.js applications, and therefore
                        contain dependencies on other JavaScript libraries. For
                        Stencil's default Cornerstone theme, we provide the
                        [Webpack](https://webpack.github.io/docs/) build manager
                        to handle these dependencies. 


                        As you develop a theme based on Cornerstone, you have
                        options to reconfigure Webpack's watched folders, and to
                        even substitute a different build system. These options
                        are explained below.


                        All themes currently in the BigCommerce Theme
                        Marketplace use Webpack. However, older versions of
                        certain themes used the jspm JavaScript dependency
                        manager instead of Webpack. Please see this page to
                        determine (by version number) whether you are developing
                        based on one of these earlier versions, and to find the
                        required jspm setup procedures.
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          BigCommerce does not offer technical assistance on
                          substitutions for the default dependencies listed in
                          this documentation.
                        title: Limited Support
                    - type: text
                      data: >-
                        ## Webpack-Specific Configuration


                        The following Webpack configuration options can aid in
                        troubleshooting.


                        ### More-Verbose JavaScript Diagnostics


                        If JavaScript errors in your browser's developer tools
                        are not reporting filenames and line numbers, try
                        changing your `webpack.conf.js` file's
                        [sourcemap](https://webpack.js.org/guides/build-performance/#devtool)
                        entry from:


                        ```

                        devtool: 'source-map'

                        ```

                        to:


                        ```

                        devtool: 'eval-source-map'

                        ```


                        The `eval-source-map` option is slower, but more
                        verbose. This [Webpack Devtool
                        Configuration](https://webpack.js.org/configuration/devtool/)
                        article provides an overview of all devtool options and
                        details regarding each.



                        ## Build-System Configuration File


                        To take advantage of automatic JavaScript bundling and
                        browser refresh, Stencil themes require the
                        [`stencil.conf.js`](https://github.com/bigcommerce/cornerstone/blob/master/stencil.conf.js)
                        file. To enable a custom build system, you would need to
                        edit this file.


                        Within `stencil.conf.js`, Stencil CLI looks for the
                        exported `watchOptions` object, and `development` and
                        `production` callbacks, shown below. 


                        Let's take a closer look at each of these three
                        references.


                        ## Watched Folders: watchOptions Object


                        The `watchOptions` object defines directories for the
                        [Browsersync](https://browsersync.io/docs) preview
                        engine to watch or ignore, in two respective lists. You
                        are free to edit these lists:


                        ```

                        /**
                         * Watch options for the core watcher
                         * @type {{files: string[], ignored: string[]}}
                         */
                        var watchOptions = {
                            // If files in these directories change, reload the page.
                            files: [
                                '/templates',
                                '/lang'
                            ],

                            //Do not watch files in these directories
                             ignored: [
                                '/assets/scss',
                                '/assets/less',
                                '/assets/css',
                                '/assets/dist',
                            ]
                        };

                        ```


                        ## JavaScript Rebundling: development Function


                        Upon the command-line instruction `stencil start`,
                        Stencil CLI will look for and call the `development`
                        function. 


                        In the base Cornerstone theme, we have created a Webpack
                        watcher to trigger a browser reload whenever theme edits
                        cause JavaScript to be rebundled to the theme's
                        `bundle.js` file. This watcher uses options configured
                        in the webpack.conf.js file passed by `webpackConfig`.
                        So a JavaScript rebuild will refresh the browser:


                        ```

                        function development() {
                            webpack(webpackConfig).watch({}, err => {
                                if (err) {
                                    console.error(err.message, err.details);
                                }

                                process.send('reload');
                            });
                        }

                        ```


                        ## Theme Packaging: production Function 


                        When you issue the command-line instruction `stencil
                        bundle`, to process and package a completed theme for
                        upload to a store, Stencil CLI will look for and call
                        the `production` function. This function passes a
                        callback as its first argument, to support asynchronous
                        builds. 


                        The callback must be invoked somewhere inside the
                        `production` function, to notify Stencil CLI that the
                        theme-specific build has completed and is ready to
                        package:


                        ```

                        function production() {
                            webpackConfig.watch = false;
                            webpackConfig.devtool = false;
                            webpackConfig.plugins.push(new webpack.LoaderOptionsPlugin({
                                minimize: true,
                            }));
                            webpackConfig.plugins.push(new webpack.optimize.UglifyJsPlugin({
                                comments: false,
                                compress: {
                                    warnings: true,
                                },
                                sourceMap: false, // Toggle to turn on source maps.
                            }));

                            webpack(webpackConfig).run(err => {
                                if (err) {
                                    console.error(err.message, err.details);
                                    throw err;
                                }

                                process.send('done');
                            });
                        }


                        if (process.send) {
                            // running as a forked worker
                            process.on('message', message => {
                                if (message === 'development') {
                                    development();
                                }

                                if (message === 'production') {
                                    production();
                                }
                            });

                            process.send('ready');
                        }

                        ```
        - title: Development Quickstart
          route:
            path: /new-page-hyafc
          data:
            children:
              - title: Creating a New Theme
                route:
                  path: /new-subpage-4
                data: {}
              - title: Making Basic Design and Layout Changes
                route:
                  path: /new-subpage-3
                data: {}
              - title: config.json-resource Interactions
                route:
                  path: /new-subpage-2
                data: {}
              - title: Customizing Javascript
                route:
                  path: /new-subpage-1
                data: {}
              - title: Remdering HTML with Ajax
                route:
                  path: /new-subpage
                data: {}
              - title: Testing and Debugging Your Theme
                route:
                  path: /new-subpage
                data: {}
              - title: Managing Theme Variations
                route:
                  path: /new-subpage
                data: {}
        - title: Theme Editor Configuration
          route:
            path: /theme-editor-configuration
          data:
            children:
              - title: What is the Stencil Theme Editor?
                route:
                  path: /new-subpage-3
                data:
                  blocks:
                    - type: text
                      data: >-
                        Two JSON files in your Stencil theme's home directory,
                        config.json and schema.json, govern which settings the
                        theme will expose.


                        The config.json file's key/value pairs define:

                        * Global, theme-wide variables

                        * Theme variations

                        * Variation-specific variables


                        The schema.json file specifies which theme settings will
                        be accessible through the Theme Editor GUI. Your entries
                        here also define the graphical controls presented to
                        merchants for each setting.
              - title: Configuration Overview
                route:
                  path: /new-subpage-2
                data: {}
              - title: config.json Metedata
                route:
                  path: /new-subpage-1
                data: {}
              - title: Preparing Thumbnail Images
                route:
                  path: /new-subpage
                data: {}
              - title: scheme.json/Theme Editor Metadata
                route:
                  path: /new-subpage
                data: {}
              - title: Preparing Thumbnail Images
                route:
                  path: /new-subpage
                data: {}
              - title: Theme Editor Troubleshooting
                route:
                  path: /new-subpage
                data: {}
        - title: Technology Stack
          route:
            path: /new-page-sj3dr
          data:
            children:
              - title: Technology Overview
                route:
                  path: /new-subpage
                data: {}
              - title: 'Templates, Partials, and Compilation'
                route:
                  path: /new-subpage-1
                data: {}
        - title: Shipping A Theme
          route:
            path: /shipping-a-theme
          data:
            children:
              - title: Shrinking Your Theme by Excluding Static Assets
                route:
                  path: /shrinking-your-theme
                data: {}
              - title: Staging a theme for CDN Delivery
                route:
                  path: /staging-a-theme
                data: {}
              - title: Bundling and Submitting a Theme
                route:
                  path: /bundling-and-submitting
                data: {}
              - title: Adding Recaptcha V2
                route:
                  path: /adding-recaptcha
                data: {}
              - title: Troubleshooting Theme Uploads
                route:
                  path: /new-subpage-4
                data: {}
        - title: Front-Matter Attributes
          route:
            path: /front-matter-attributes
          data:
            children:
              - title: Front Matter Reference
                route:
                  path: /new-subpage
                data: {}
        - title: Handlebars Syntax and Helpers
          route:
            path: /handlebars-syntax-and-helpers
          data:
            children:
              - title: Handlebars Helpers Reference
                route:
                  path: /handlebars-helpers-reference
                data:
                  blocks:
                    - type: text
                      data: '# Handlebars Helpers Reference'
                    - type: text
                      data: >
                        ## {{itemAt}}


                        _Block helper that returns the item at the specified
                        index._


                        #### Parameters


                        * `array` {Array}

                        * `idx` {Number}

                        * `returns` {any} `value`


                        #### {{itemAt}} Example


                        Given the array `['a', 'b', 'c']`:


                        ```

                        {{itemAt array 1}}

                        //=> 'b'


                        ```

                        ---


                        ## {{join}}


                        The `join` helper is custom to Stencil. It joins an
                        array of string items, with separators. It returns a
                        string. 


                        #### Parameters


                        - `values`: {Array}

                        - `separator`: {String}

                        - `limit=<number>`: An optional limit.


                        #### {{join}} Example


                        insert join example


                        ---


                        ### {{limit}}


                        The `limit` helper is custom to Stencil. It limits the
                        number of items returned from an array variable, and
                        returns a new array.


                        #### Parameters


                        - `data`: {Array}

                        - `limit`: {Number}


                        #### {{limit}} Example 


                        Assume that `{{cart.items}}` would return 10 items. You
                        could use this helper to limit that behavior to only the
                        first four items, by specifying: 


                        ```

                        {{limit cart.items 4}}

                        ```


                        ---


                        ### {{pluck}}


                        The `pluck` helper is custom to Stencil. For one or more
                        specified search key(s), it retrieves corresponding
                        values from some or all elements in a specified
                        collection. 


                        The `pluck` helper returns the retrieved values in a
                        comma-separated string. This helper's general form is:


                        ```

                        {{pluck ([limit] <collection> [<limit-value>])
                        '<search-key>'}}

                        ```


                        #### Parameters


                        - `limit`, `limit-value`: Optional parameters to limit
                        the number of results returned.

                        - `collection`: The collection to search.

                        - `search-key`: The string to search for.



                        #### {{pluck}} Example 1


                        Assume that the `categories` collection contains:


                        ```

                        categories: [
                          { "id": 1, "name": "Bakeware" },
                          { "id": 2, "name": "Cookware" },
                          { "id": 3, "name": "Cutlery" }
                        ]

                        ```


                        In this case, this Handlebars statement:


                        ```

                        {{pluck (limit categories 2) 'name'}}

                        ```


                        ...would return:


                        ```

                        "Bakeware,Cookware"

                        ```


                        #### {{pluck}} Example 2


                        If the `categories` themselves each contained an image
                        object, then you could use dot notation to access that
                        image object's children:


                        ```

                        categories: [
                          { "id": 1, "name": "Bakeware", "image": { "data": "http://...", "alt": "Bakeware image"} },
                          { "id": 2, "name": "Cookware" "image": { "data": "http://...", "alt": "Cookware image"} },
                          { "id": 3, "name": "Cutlery" "image": { "data": "http://...", "alt": "Cutlery image"} }
                        ]

                        ```


                        In this case, this Handlebars statement:


                        ```

                        {{pluck (limit categories 2) 'image.data'}}

                        ```


                        ...would return a comma-separated list of image URLs.


                        ---



                        ## <a name="array_std"></a> Standard Array Helpers


                        The following standard array helpers are supported on
                        the Stencil framework.


                        ### <a name="after"></a> {{after}}


                        Returns all of the items in an array after the specified
                        index. Opposite of [before](#before).


                        Given the array `['a', 'b', 'c']`:


                        #### Parameters


                        * `array` {Array}: Collection.

                        * `n` {Number}: Starting index (number of items to
                        exclude).

                        * `returns` {Array}: Array exluding `n` items.


                        #### Example


                        ```handlebars

                        {{after array 1}}

                        //=> '["c"]'

                        ```


                        ---


                        ## {{arrayify}}


                        Casts the given `value` to an array.


                        #### Parameters


                        * `value` {any}

                        * `returns` {Array}


                        #### {{arrayify}} Example


                        ```handlebars

                        {{arrayify "foo"}}

                        //=> '["foo"]'

                        ```

                        ---


                        ## <a name="before"></a> {{before}}


                        Returns all of the items in the collection before the
                        specified count. Opposite of [after](#after).


                        Given the array `['a', 'b', 'c']`:


                        #### Parameters


                        * `array` {Array}

                        * `n` {Number}

                        * `returns` {Array}: Array excluding items after the
                        given number.


                        #### {{before}} Example


                        ```handlebars

                        {{before array 2}}

                        //=> '["a", "b"]'

                        ```


                        ---


                        ## {{eachIndex}}


                        #### Parameters


                        * `array` {Array}

                        * `options` {Object}

                        * `returns` {String}


                        #### {{eachIndex}} Example


                        ```handlebars

                        {{#eachIndex collection}}
                          {{item}} is {{index}}
                        {{/eachIndex}}

                        ```


                        ---


                        ### {{filter}}


                        Block helper that filters the given array. Renders the
                        block for values that evaluate to `true`; otherwise,
                        returns the inverse block.


                        #### Parameters


                        * `array` {Array}

                        * `value` {any}

                        * `options` {Object}

                        * `returns` {String}


                        #### {{filter}} Example


                        ```handlebars

                        {{#filter array "foo"}}AAA{{else}}BBB{{/filter}}

                        //=> 'BBB

                        ```


                        ---


                        ## <a name="first"></a> {{first}}


                        Returns the first item, or first `n` items, of an array.


                        #### Parameters


                        * `array` {Array}

                        * `n` {Number}: Number of items to return, starting at
                        `0`.

                        * `returns` {Array}


                        #### {{first}} Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{first array 2}}

                        //=> '["a", "b"]'

                        ```


                        ---



                        ### {{forEach}}


                        Iterates over each item in an array, and exposes the
                        current item in the array as context to the inner block.
                        In addition to the current array item, the helper
                        exposes the following variables to the inner block:


                        * `index`

                        * `total`

                        * `isFirst`

                        * `isLast`


                        Also, `@index` is exposed as a private variable, and
                        additional private variables may be defined as hash
                        arguments.


                        #### Parameters


                        * `array` {Array}

                        * `returns` {String}


                        #### {{forEach}} Example


                        ```js

                        var accounts = [

                        {'name': 'John', 'email': 'john@example.com'},

                        {'name': 'Malcolm', 'email': 'malcolm@example.com'},

                        {'name': 'David', 'email': 'david@example.com'}

                        ];


                        // example usage

                        // {{#forEach accounts}}

                        //   <a href="mailto:{{ email }}" title="Send an email
                        to {{ name }}">

                        //     {{ name }}

                        //   </a>{{#unless isLast}}, {{/unless}}

                        // {{/forEach}}

                        ```


                        ---


                        ### {{inArray}}


                        Block helper that renders the block if an array has the
                        given `value`. Optionally, you can specify an inverse
                        block to render when the array does not have the given
                        value.


                        #### Parameters


                        * `array` {Array}

                        * `value` {any}

                        * `options` {Object}

                        * `returns` {String}


                        #### {{inArray}} Example


                        Given the array `['a', 'b', 'c']`:


                        ```handlebars

                        {{#inArray array "d"}}
                          foo
                        {{else}}
                          bar
                        {{/inArray}}

                        //=> 'bar'

                        ```


                        ---


                        ### {{isArray}}


                        Returns true if `value` is an es5 array.


                        #### Parameters


                        * `value` {any}: The value to test.

                        * `returns` {Boolean}


                        #### Example


                        ```handlebars

                        {{isArray "abc"}}

                        //=> 'false'

                        ```


                        ### <a name="last"></a> {{last}}


                        Returns the last item, or last `n` items, of an array.
                        Opposite of [first](#first).


                        #### Parameters


                        * `array` {Array}

                        * `n` {Number}: Number of items to return, starting with
                        the last item.

                        * `returns` {Array}


                        #### Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{last array 2}}

                        //=> '["d", "e"]'

                        ```


                        ### {{lengthEqual}}


                        Block helper that compares the length of the given array
                        to the number passed as the second argument. If the
                        array length is equal to the given `length`, the block
                        is returned. Otherwise, you have the option of returning
                        an inverse block.


                        #### Parameters


                        * `array` {Array}

                        * `length` {Number}

                        * `options` {Object}

                        * `returns` {String}


                        #### Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{#lengthEqual array 10}}AAA{{else}}BBB{{/lengthEqual}}

                        //=> 'BBB'

                        ```


                        ### {{map}}


                        Returns a new array, created by calling `function` on
                        each element of the given `array`.


                        #### Parameters


                        * `array` {Array}

                        * `fn` {Function}

                        * `returns` {String}


                        #### Example


                        Given an array `['a', 'b', 'c']`:


                        ```js

                        // register `double` as a helper

                        function double(str) {
                          return str + str;
                        }

                        // then used like this:

                        // {{map array double}}

                        //=> '["aa", "bb", "cc"]'

                        ```


                        ### {{some}}


                        Block helper that returns the block *if* the callback
                        returns true for some value in the given array.


                        #### Parameters


                        * `array` {Array}

                        * `cb` {Function}: Callback function.

                        * {Options}: Handlebars-provided options object.

                        * `returns` {Array}


                        #### Example


                        Given the array `[1, 'b', 3]`:


                        ```handlebars

                        {{#some array isString}}
                          Render me if the array has a string.
                        {{else}}
                          Render me if it doesn't.
                        {{/some}}

                        //=> 'Render me if the array has a string.'

                        ```


                        ### {{sort}}


                        Sorts the given `array`. If an array of objects is
                        passed, you may optionally pass (as the second argument)
                        a `key` to sort on. Alternatively, you may pass a
                        sorting function as the second argument.


                        #### Parameters


                        * `array` {Array}: The array to sort.

                        * `key` {String|Function}: The object key to sort by, or
                        a sorting function.


                        #### Example


                        Given an array `['b', 'a', 'c']`:



                        ```handlebars

                        {{sort array}}

                        //=> '["a", "b", "c"]'

                        ```


                        ### {{sortBy}}


                        Sorts an `array`. If an array of objects is passed, you
                        may optionally pass a `key` to sort on as the second
                        argument. You may alternatively pass a sorting function
                        as the second argument.


                        #### Parameters


                        * `array` {Array}: The array to sort.

                        * `props` {String|Function}: One or more properties to
                        sort by, or sorting functions to use.


                        #### {{sortBy}} Example


                        Given an array `[{a: 'zzz'}, {a: 'aaa'}]`:


                        ```handlebars

                        {{sortBy array "a"}}

                        //=> '[{"a":"aaa"}, {"a":"zzz"}]'

                        ```

                        ---


                        ### <a name="withAfter"></a> {{withAfter}}


                        Use the items in the array, _after_ the specified index,
                        as context inside a block. Opposite of
                        [withBefore](#withBefore).


                        #### Parameters


                        * `array` {Array}

                        * `idx` {Number}

                        * `options` {Object}

                        * `returns` {Array}


                        #### {{withAfter}} Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{#withAfter array 3}}
                          {{this}}
                        {{/withAfter}}

                        //=> "de"

                        ```


                        ### <a name="withBefore"></a> {{withBefore}}


                        Use the items in the array, _before_ the specified
                        index, as context inside a block. Opposite of
                        [withAfter](#withAfter).


                        #### Parameters


                        * `array` {Array}

                        * `idx` {Number}

                        * `options` {Object}

                        * `returns` {Array}


                        #### {{withBefore}} Example


                        Given the array `['a', 'b', 'c', 'd', 'e']`:


                        ```handlebars

                        {{#withBefore array 3}}
                          {{this}}
                        {{/withBefore}}

                        //=> 'ab'

                        ```


                        ### <a name="withFirst"></a> {{withFirst}}


                        Uses a collection's first item inside a Handlebars block
                        expression. Opposite of [withLast](#withLast).


                        #### Parameters


                        * `array` {Array}

                        * `idx` {Number}

                        * `options` {Object}

                        * `returns` {String}


                        #### {{withFirst}} Example


                        Given the array `['a', 'b', 'c']`:


                        ```handlebars

                        {{#withFirst array}}
                          {{this}}
                        {{/withFirst}}

                        //=> 'a'

                        ```
        - title: Stencil Object Model Reference
          route:
            path: /stencil-object-model-reference
          data:
            children:
              - title: Stencil Objects
                route:
                  path: /stencil-objects
                data:
                  children:
                    - title: Global Objects & Properties
                      route:
                        path: /global-objects
                      data:
                        children:
                          - title: Banners
                            route:
                              path: /banners
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description: </b>Elements of marketing
                                    banners at page’s top and/or bottom<br>


                                    <b>Handlebars Expressions:</b> <span
                                    class="inline-code">{{banner}}</span>, <span
                                    class="inline-code">{{{banner}}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">banners</td>
                                        <td class="">Blocks of static HTML content to define banners</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">top</span></td>
                                        <td class="">Array of HTML content/strings, for custom top-banner content; banners are populated from the BigCommerce control panel</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">bottom</span></td>
                                        <td class="">Array of HTML content/strings, for custom bottom-banner content; banners are populated from the BigCommerce control panel</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: Banner
                                  config: {}
                                - type: callout
                                  data:
                                    type: warning
                                    body: >-
                                      Where a banner contains HTML, the <span
                                      class="inline-code">banner</span> helper
                                      must be placed in triple braces, as in
                                      this 

                                      example: <span
                                      class="inline-code">{{{banner}}}</span>.
                                      (Double braces would escape the HTML.)
                                    title: Handlebars Formatting Exception
                          - title: Breadcrumbs
                            route:
                              path: /breadcrumbs
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description:</b> Defines a page's
                                    breadcrumbs – available on virtually all
                                    pages that have a breadcrumb trail<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{breadcrumbs}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">name</td>
                                        <td class="">Displayed name of this breadcrumb element</td>
                                      </tr>
                                      <tr>
                                        <td class="">url</td>
                                        <td class="">URL of this breadcrumb element</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: Stencil-Bread-ref
                          - title: Categories
                            route:
                              path: /categories
                            data:
                              blocks:
                                - type: text
                                  data: >-
                                    <A NAME="Categories"></a>

                                    <b>Description:</b> A list of all product
                                    categories shown in the current page
                                    context; default sorting is by category id,
                                    from lowest to highest<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{categories}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">id</td>
                                        <td class="">ID of the top-level category listed</td>
                                      </tr>
                                      <tr>
                                        <td class="">name</td>
                                        <td class="">Name of the top-level category</td>
                                      </tr>
                                      <tr>
                                        <td class="">description</td>
                                        <td class="">Description of the top-level category (optional &ndash; when requested in front matter)</td>
                                      </tr>
                                      <tr>
                                        <td class="">url</td>
                                        <td class="">URL to the category page</td>
                                      </tr>
                                      <tr>
                                        <td class="">count</td>
                                        <td class="">Number of products in this category</td>
                                      </tr>
                                      <tr>
                                        <td class="">children</td>
                                        <td class="">List of child categories for this top-level category</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> id</span></td>
                                        <td class="">ID of the child category</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> name</span></td>
                                        <td class="">Name of the child category</td>
                                      </tr>
                                        <tr>
                                        <td class=""><span class="indent1"> description</span></td>
                                        <td class="">Description of the child category (optional &ndash; when requested in front matter)</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> url</span></td>
                                        <td class="">URL of the child category</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> count</span></td>
                                        <td class="">Number of products in this child category</td>
                                      </tr>
                                    </table>
                          - title: Currency Selector
                            route:
                              path: /currency-selector
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description:</b> A list of all supported
                                    currencies, and the currency that is
                                    actively in use in the storefront<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{currency_selector}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">active_currency_id</td>
                                        <td class="">ID of the currency actively in use in the storefront</td>
                                      </tr>
                                      <tr>
                                        <td class="">active_currency_flag</td>
                                        <td class="">Country flag used to represent the active currency</td>
                                      </tr>
                                      <tr>
                                        <td class="">active_currency_name</td>
                                        <td class="">Name of the active currency</td>
                                      </tr>
                                      <tr>
                                        <td class="">active_currency_code</td>
                                        <td class="">Code for the active currency</td>
                                      </tr>
                                      <tr>
                                        <td class="">currencies</td>
                                        <td class="">List of all the currencies supported for this storefront</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> is_active</span></td>
                                        <td class="">Boolean that indicates whether this currency is active for use in the storefront</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> switch_url</span></td>
                                        <td class="">The URL to invoke a switch to this currency</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> id</span></td>
                                        <td class="">ID of the currency</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> name</span></td>
                                        <td class="">Name of the currency</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1"> flag</span></td>
                                        <td class="">Country flag used to visually represent the currency</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: CurrencySel
                          - title: Faceted Search
                            route:
                              path: /new-subpage-6
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <A NAME="FacSearch"></a>

                                    <b>Description: </b>Faceted-search object
                                    for searching globally, by category, or by
                                    brand<br>


                                    <b>Handlebars Expression</b><b>:</b> <span
                                    class="inline-code">{{faceted_search}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">facets</td>
                                        <td class="">List of all search facets available</td>
                                      </tr>
                                      <tr>
                                        <td class="">selected</td>
                                        <td class="">Container for the selected search facets</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">remove_all_url</span></td>
                                        <td class="">URL to remove all selected search restrictions</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">items</span></td>
                                        <td class="">Currently enabled search facets</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: FacetedSearch
                          - title: Featured Products
                            route:
                              path: /new-subpage-2
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description:</b> A list of all the
                                    featured products for the BigCommerce
                                    storefront<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{products.featured}}</span><br>


                                    <b>Object Properties:</b> References the <a
                                    href="/docs/common-product-card-model">product
                                    card model</a>.
                                  header:
                                    anchor: FeatProducts
                                - type: text
                                  data: >-
                                    <b> Usage Example: </b>


                                    From Stencil's base Cornerstone theme, the
                                    example below displays the global
                                    `{{products.featured}}` object on the
                                    `<theme-name>/templates/pages/home.html`
                                    page template.


                                    First, to declare the object, the following
                                    [front
                                    matter](/docs/using-yaml-front-matter) must
                                    be placed at the top of this template. This
                                    particular declaration also limits the
                                    number of featured products to be displayed:


                                    ```

                                    ---

                                    products:
                                        [...]
                                        featured:
                                            limit: {{theme_settings.homepage_featured_products_count}}
                                    ---

                                    ```

                                    The `homepage_featured_products_count` limit
                                    is one of two relevant variables defined in
                                    Cornerstone's
                                    [`config.json`&#160;file](/docs/configjson-reference),
                                    here:


                                    ```
                                      "settings": {
                                        [...]
                                        "homepage_featured_products_count": 8,
                                        [...]
                                        "homepage_featured_products_column_count": 4,
                                        [...]    
                                    ```


                                    In the body of the `home.html` template, the
                                    following Handlebars conditional statement
                                    displays the featured-products object
                                    declared above:


                                    ```
                                        {{#if products.featured}}
                                            {{> components/products/featured products=products.featured columns=theme_settings.homepage_featured_products_column_count}}
                                        {{/if}}
                                    ```


                                    This statement formats the featured-products
                                    display according to the
                                    `homepage_featured_products_column_count`
                                    variable, also defined in the `config.json`
                                    excerpt above.
                          - title: Footer
                            route:
                              path: /footer
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description: </b>The footer content for
                                    each storefront page<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{footer}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">sitemap_url</td>
                                        <td class="">The URL to the sitemap, based on store’s SEO setting</td>
                                      </tr>
                                      <tr>
                                        <td class="">scripts</td>
                                        <td class="">Scripts to be loaded after the HTML has loaded; includes performance metrics</td>
                                      </tr>
                                    </table>
                          - title: Home Slide Show
                            route:
                              path: /home-slide-show
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description:</b> A list of images, text,
                                    and style assets for a storefront’s image
                                    slide show<br>


                                    <b>Handlebars Expression: </b><span
                                    class="inline-code">{{carousel}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      
                                      <tr>
                                        <td class="">swap_frequency</td>
                                        <td class="">Indicates how often (in seconds) the slides will change; the value must be between 1 and 90,000 seconds</td>
                                      </tr>
                                      
                                      <tr>
                                        <td class="">slides</td>
                                        <td class="">Object containing properties for each slide in the slideshow</td>
                                      </tr>
                                      
                                      <tr>
                                        <td class=""><span class="indent1">image</span></td>
                                        <td class="">Path to the image file used on this slide</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">alt_text</span></td>
                                        <td class="">Alt text for the image</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">url</span></td>
                                        <td class="">URL to which the image will link</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">heading</span></td>
                                        <td class="">Heading message defined by the merchant</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">heading_color</span></td>
                                        <td class="">Color of the heading text</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">text</span></td>
                                        <td class="">Subheading defined by the merchant</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">text_color</span></td>
                                        <td class="">Color of the subheading text</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">button_text</span></td>
                                        <td class="">Text displayed on a call-to-action button defined by the merchant</td>
                                      </tr>
                                      <tr>
                                        <td class=""><span class="indent1">button_text_color</span></td>
                                        <td class="">Color of the button</td>
                                      </tr>
                                    </table>
                                  header:
                                    anchor: SlideShow
                          - title: HTML Head
                            route:
                              path: /html-head
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description: </b>Data to be included in
                                    the HTML &lt;head&gt; element<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{head}}</span><br>


                                    <b>Object Properties:</b><br><br>


                                    <table>
                                      <tr>
                                        <td>Property</td>
                                        <td>Description</td>
                                      </tr>
                                      <tr>
                                        <td class="">character_set</td>
                                        <td class="">The character set to specify</td>
                                      </tr>
                                      <tr>
                                        <td class="">meta_tags</td>
                                        <td class="">Meta tags to improve store SEO</td>
                                      </tr>
                                      <tr>
                                        <td class="">title</td>
                                        <td class="">Current page’s title</td>
                                      </tr>
                                      <tr>
                                        <td class="">stylesheets</td>
                                        <td class="">CSS files to be included</td>
                                      </tr>
                                      <tr>
                                        <td class="">scripts</td>
                                        <td class="">Scripts to be loaded in the &lt;head&gt; tag</td>
                                      </tr>
                                      <tr>
                                        <td class="">favicon</td>
                                        <td class="">The store’s favicon (Favorite icon)</td>
                                      </tr>
                                      <tr>
                                        <td class="">rsslinks</td>
                                        <td class="">RSS feeds to improve SEO</td>
                                      </tr>
                                      </tr>
                                    </table>
                          - title: Is_ajax
                            route:
                              path: /is-ajax
                            data:
                              blocks:
                                - type: html
                                  data: >-
                                    <b>Description: </b>Boolean; returns true if
                                    the current executing request is an Ajax
                                    request<br>


                                    <b>Handlebars Expression:</b> <span
                                    class="inline-code">{{is_ajax}}</span><br>
                                  header:
                                    anchor: IsAjax
                          - title: Login
                            route:
                              path: /login
                            data: {}
            blocks:
              - type: html
                data: >-
                  <a name="Stencil-Obj-ref"></a>The entries in this section list
                  and describe the objects<!--, custom operators, and data
                  resources--> and properties that you can access
                  programmatically via Handlebars expressions:


                  <ul>
                    <!-- <li><a href="/docs/custom-handlebars-helpers">Stencil Custom Handlebars Helpers</a></li> -->
                   <li><a href="/stencil-object-model-reference/global-objects">Global Objects (subsection)</a></li>
                   <li><a href="/stencil-object-model-reference/common-object-formats">Common Objects</a></li>
                   <li><a href="/stencil-object-model-reference/product-resources">Product Objects</a></li>
                   <li><a href="/stencil-object-model-reference/category-resources">Category Objects</a></li>
                   <li><a href="/stencil-object-model-reference/brand-resources">Brand Objects</a></li>
                   <li><a href="/stencil-object-model-reference/cart-resources">Cart Objects</a></li>
                   <li><a href="/stencil-object-model-reference/customer-resources">Customer Objects</a></li>
                   <li><a href="/stencil-object-model-reference/blog-resources">Blog Objects</a></li>
                   <li><a href="/stencil-object-model-reference/forms-resources">Forms Objects</a></li>
                  </ul>
        - title: Event Hooks
          route:
            path: /event-hooks
          data:
            children:
              - title: Hook Examples
                route:
                  path: /hook-examples
                data: {}
              - title: Remote API Example
                route:
                  path: /remote-api-example
                data: {}
              - title: Data Tags/Event Hook Reference
                route:
                  path: /new-subpage-1
                data: {}
              - title: stencil-utils API Reference
                route:
                  path: /new-subpage-2
                data: {}
        - title: Conditional-Logic Examples
          route:
            path: /conditional-logic-examples
          data:
            children:
              - title: 'Catalog Price Object: How Properties interact'
                route:
                  path: /catalog-price-object
                data: {}
              - title: 'Cart Price Properties: Relationships'
                route:
                  path: /cart-price-relationships
                data: {}
              - title: Calling Theme-Wide Variables via Handlebars
                route:
                  path: /calling-theme-wide-variables
                data: {}
              - title: Dynamic Content Rendering on Stencil Storefronts
                route:
                  path: /dynamic-content-rendering
                data: {}
        - title: CSS And Design Assets
          route:
            path: /css-and-design-assets
          data:
            children:
              - title: Navigating Stencil Design Assets
                route:
                  path: /navigating-stencil-design-assets
                data: {}
              - title: Components/Design Patters
                route:
                  path: /components-design-patterns
                data: {}
              - title: Layouts Directory
                route:
                  path: /layouts-directory
                data: {}
              - title: Settings Directory
                route:
                  path: /settings-directory
                data: {}
              - title: Utilities Directory
                route:
                  path: /new-subpage-1
                data: {}
              - title: New Subpage
                route:
                  path: /new-subpage
                data: {}
        - title: Templates Reference
          route:
            path: /templates-reference
          data:
            children:
              - title: Navigating the Templates Directory
                route:
                  path: /new-subpage-2
                data:
                  children:
                    - title: Components Subdirectory
                      route:
                        path: /new-subpage-3
                      data: {}
                    - title: Layout Subdirectory
                      route:
                        path: /new-subpage-2
                      data: {}
                    - title: Pages Subdirectory
                      route:
                        path: /new-subpage-1
                      data: {}
                    - title: Stencil with Disqus
                      route:
                        path: /new-subpage
                      data: {}
              - title: Custom Templates
                route:
                  path: /components-and-compilation
                data:
                  children:
                    - title: 'Authoring, Testing, and Uploading Custom Templates'
                      route:
                        path: /new-subpage-2
                      data: {}
                    - title: Assigning Templates to Pages
                      route:
                        path: /new-subpage-1
                      data: {}
                    - title: Switching Themes with Custom Templates
                      route:
                        path: /new-subpage
                      data: {}
                    - title: Theme Updates with  Custom Templates
                      route:
                        path: /new-subpage
                      data: {}
                    - title: Limitations on Custom Templates
                      route:
                        path: /new-subpage-3
                      data: {}
              - title: Stencil Checkout
                route:
                  path: /new-subpage
                data:
                  children:
                    - title: Preparing Stencil for Optimized One-Page Checkout
                      route:
                        path: /new-subpage
                      data: {}
                    - title: Optimized One Page Checkout
                      route:
                        path: /new-subpage
                      data: {}
                    - title: Currency Conversion
                      route:
                        path: /new-subpage
                      data: {}
                    - title: Multi Language Checkout
                      route:
                        path: /new-subpage
                      data: {}
                    - title: Checkout/Confirmation Injection Options
                      route:
                        path: /new-subpage-1
                      data: {}
                    - title: Implementing a custom checkout
                      route:
                        path: /new-subpage-2
                      data: {}
                    - title: Styling the Apple Pay Button
                      route:
                        path: /new-subpage-3
                      data: {}
                    - title: Customizing Invoices and Packing Slips
                      route:
                        path: /new-subpage-4
                      data: {}
        - title: Internationalization/Localization
          route:
            path: /internationalization-and-localization
          data:
            children:
              - title: Localizing Stores
                route:
                  path: /new-subpage-3
                data: {}
              - title: Basis for Internationalization
                route:
                  path: /new-subpage-2
                data: {}
              - title: Required Subdirectories
                route:
                  path: /new-subpage-1
                data: {}
              - title: Localization File Structure
                route:
                  path: /new-subpage
                data: {}
              - title: Invoking Translation Keys
                route:
                  path: /new-subpage-4
                data: {}
        - title: Javascript Customization
          route:
            path: /javascript-customization
          data:
            children:
              - title: Adding Javascript to Stencil Theme
                route:
                  path: /new-subpage-4
                data: {}
              - title: Basic Non NPM Example
                route:
                  path: /new-subpage-3
                data: {}
              - title: Basic NPM example
                route:
                  path: /new-subpage-2
                data: {}
              - title: Advanced NPM Example
                route:
                  path: /new-subpage-1
                data: {}
              - title: Page Types and Life Cycle
                route:
                  path: /new-subpage
                data: {}
      blocks:
        - type: text
          data: '# Welcome to the BigCommerce Stencil Developer Documentation'
        - type: text
          data: '---'
        - type: text
          data: >-
            ## Objective of this documentation


            This documentation is intended to inform developers about the
            Stencil theming engine and how it can allow you as a developer to
            create beautiful, dynamic, and powerful storefronts.


            *Reference the [BigCommerce Developer Documentation
            Glossary](www.google.com) for any terminology that may sound foreign
            to you when reading the Stencil Developer Documentation.*
        - type: text
          data: '---'
        - type: text
          data: >-
            ## What is Stencil?


            Stencil is the theming engine for the BigCommerce platform. Stencil
            is the engine for the BigCommerce Cornerstone theme, which is the
            foundation a theme developer needs to quickly start developing
            premium, custom themes with Stencil. 


            Stencil also provides features that allow merchants to customize
            their storefront's look and feel with no coding, making Stencil a
            powerful and useful engine for all audiences.
        - type: text
          data: '---'
        - type: text
          data: >+
            <h3></a> Video Demo</h2>


            Watch Stencil senior developer's tour of Stencil's key
            components:<br><p></p>


            <iframe width="560" height="315"
            src="https://www.youtube.com/embed/p5SR8N0SeCg" frameborder="0"
            allowfullscreen></iframe>












        - type: text
          data: '---'
        - type: text
          data: >-
            ## Stencil Development Features and Technology Stack


            Stencil's provides the following features, allowing BigCommerce
            theme developers to create beautiful, dynamic, and powerful
            storefronts.


            ---


            **Stencil Command Line Interface (Stencil CLI)**


            The Stencil CLI enables developers to locally develop and customize
            on any Stencil theme with no impact on a merchant's live storefront
            during the development process. When locally developing, you will
            have access to real-time Browsersync preview and testing across
            desktop, mobile, and tablet devices/viewports.


            Stencil CLI runs on the Node.js runtime environment. Installing
            Node.js also provides the required npm package manager.


            ---

            **Logic-Based Templates** 


            Stencil's logic based templates allow BigCommerce developers to
            customize storefront pages efficiently with the lightweight
            templating languge, Handlebars.js.  Handlebars allows you to
            efficiently embed dynamic and conditional logic onto your storefront
            pages.


            ---


            **Sass/SCSS Support**


            Stencils Sass and SCSS support allows developers to nest properties,
            variables, and mixins. Use the familiar Foundation framework
            (provided) or substitute your choice of framework.


            Stencil's Cornerstone base theme uses a BigCommerce pattern library
            called Citadel, which is built on top of the ZURB Foundation
            framework, version 5.5.3. Stencil does not support Foundation 6.x,
            due to breaking changes introduced between versions 5.x and 6.x.


            Foundation offers the framework for creating a responsive theme. You
            have the option of swapping out Foundation for another framework,
            although doing so would require significant work.


            Foundation assets bundled with Cornerstone are located in these
            subdirectories: 


            * `Cornerstone/assets/scss/settings/foundation/ `

            * `Cornerstone/assets/scss/components/foundation/`


            Citadel extends Foundation’s mixins and components to provide
            Stencil’s own mixins, extensible components, and utilities. These
            include drop-down lists, forms, and similar resources. Citadel
            resources are named according to BEM and SUIT CSS conventions.
            Classes are named functionally, rather than based on visual
            presentation or content. Our style guide is published here.

            Citadel assets bundled with Cornerstone are located in these
            Cornerstone subdirectories: 


            * `Cornerstone/assets/scss/settings/citadel/`

            * `Cornerstone/assets/scss/components/citadel/`


            More detailed information about the Citadel and Foundation SCSS
            components, and their naming conventions will be covered in
            *Components and Design Patterns*.


            ---


            **Page-specific Resource Definition**


            Specify the dynamic content you want to be displayed on your
            storefront pages with YAML formatted front matter.


            ---


            **Javascript Event Hooks**


            Your Stencil themes can access remote objects through event hooks,
            using the hooks to trigger defined events based on shopper behavior.
            This will allow you to collect product data and optimize a shopper's
            experience.


            To facilitate theme-building, BigCommerce provides the stencil-utils
            client-side JavaScript library for managing event hooks.


            ---


            **Stencil Theme Editor**


            The Stencil Theme Editor is a browser-based tool that enables
            merchants to rapidly customize a theme's look and feel with no
            coding. 


            BigCommerce theme developers' configuration choices determine which
            theme aspects merchants can customize, and the range of choices for
            each aspect.


            Stencil's Theme Editor graphical interface enables merchants and
            store administrators to make styling changes to the theme currently
            applied to their storefront. 


            As a theme developer, you have the capability to define which style
            settings appear in the Stencil Theme Editor. You can grant access to
            colors, fonts, display/hiding of page features, and number of
            products/entries to display per feature.


            ---


            **Stencil Theme Variations**


            Each Stencil theme can contain one to four variations. You can
            optimize individual variations for specific markets, audiences and
            styles – while still managing and distributing all of these
            variations as one theme.

            Cornerstone comes with 3 variations: Cornerstone Light, Cornerstone
            Warm, and Cornerstone Bold.


            ---


            **Responsive, Mobile-Friendly Themes**


            BigCommerce stores powered by Stencil allow shoppers to have a first
            class experience across any device.


            ---


            This is simply a summary Stencil's core features. Continue reading
            through the Stencil Developer Documentation to learn about Stencil's
            full capabilities.
        - type: text
          data: '---'
        - type: text
          data: >-
            ## Legacy Framework Documentation


            If you are looking for information on Blueprint, BigCommerce's
            legacy theme framework, you can access that below:


            * [Themes (Blueprint)](https://developer.bigcommerce.com/themes)

            * [Stores API reference](https://developer.bigcommerce.com/api)
  /api-docs:
    title: API Docs
    data:
      blocks:
        - type: text
          data: API Docs Home Page
      children:
        - title: Getting Started
          route:
            path: /getting-started
          data:
            children:
              - title: About the API
                route:
                  path: /about-api
                data:
                  children:
                    - title: V2 versus V3
                      route:
                        path: /v2-v3
                      data:
                        blocks:
                          - type: text
                            data: |-
                              # V2 or V3

                              ## What We'll Cover
                              Advantages of V3 over V2
                              Products on V3
                          - type: text
                            data: >
                              ## Advantages of V3 over V2


                              There are fewer API calls for most tasks.
                              Subresources can be included in a resources
                              response. Such as creating a product with variants
                              and custom fields in one API call. 


                              There are `meta` objects on all resources, so
                              pagination is easier. 


                              Metafields have been added so data can be stored
                              against each object. This can be specific for your
                              application or visible to other applications. 


                              The V3 API has been optimized for performance.
                              This allows for data to be synched quickly. 
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Products on V3


                              ### Variants


                              Every purchasable entity in the catalog is now a
                              variant. Including the product itself. This
                              enables enhanced flows around inventory
                              management, such as the ability to solely use the
                              variants endpoint to manage inventory levels. For
                              more on variants see
                              [Variants](/api-docs/catalog/products/product-variant-options).


                              In V3 a variant needs to be created for every
                              combination. In V2 you could create an SKU with a
                              subset of product options.


                              It is recommened to create products using V3 as
                              BigCommerce starts to move operations to the V3
                              API. 


                              ### Interoperability between V2 and V3


                              When a product option is created on V2 and
                              assigned to a product. Trying to edit the option
                              using the V3 API returns a 422 error. 


                              ```

                              {
                                  "status": 422,
                                  "title": "The product is currently associated with an option set, please remove it before editing an option or modifier.",
                                  "type": "https://developer.bigcommerce.com/api#api-status-codes",
                                  "errors": {
                                      "product_id": "The product is currently associated with an option set, please remove it before editing an option or modifier."
                                  }
                              }

                              ```


                              This happens since options on V2 are created
                              globally then assigned to the products. The V3 API
                              has variant options which are assigned at the
                              product level. The way to fix is to remove the
                              option in the Control Panel or Delete using the
                              API, the re-create the options using variants. 


                              ### Options and Modifiers


                              There is now a clear separation of [options that
                              define
                              variants](/api-docs/catalog/products/product-variant-options),
                              versus [options that are modifiers of a
                              variant](/api-docs/catalog/products/modifier-options).
                              This enables us to simplify the creation and
                              management of variant prices and modifier
                              adjusters. It removes the need to use complex
                              rules, in all but the most extreme cases.


                              Options and modifiers can also be attached
                              directly to the product, without the requirement
                              to create an option set beforehand.


                              Creating Options on V2 has several steps:

                              1. Create the product

                              2. Create the options

                              3. Create an option set

                              4. Assign the option set to the product

                              5. Create any modifiers such as price adjustment
                              based on sku.


                              Creating Products and Variants on V3:

                              1. Create the product with variant in one call

                              2. Add modifiers such as price adjustment based on
                              sku


                              Variants can be included with the GET request to
                              lower the number of API calls being made. 
                              ?include=variants


                              There is an endpoint just for creating a [Catalog
                              Tree](/api-docs/api-reference/v3-api/catalog/getcatalogsummary).
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## What's not in V3


                              In v3, you attach options directly to products. So
                              option sets are not required, and v3 includes no
                              endpoint to manage options sets. However, v3 will
                              respect option sets that have been attached via v2
                              or the control panel.


                              Most resources that are available in V3 are not in
                              V2. 


                              ### Complex Rules


                              Most of the use cases for complex rules can be
                              solved by variants and modifier options. We
                              recommend using variants as best practice.


                              ### Product Rules 

                              Any variant created in v3 with non-null core
                              properties (price, weight, image, purchasability)
                              will create a rule under the hood. The same goes
                              for modifier adjusters. These will show in v2 as
                              product rules, and any edits to them will be
                              shared across API versions.


                              ### Option Sets

                              In our control panel’s Add/Edit Product section,
                              any products created by v3 will not have an option
                              set applied, but merchants can still edit the
                              options. If the merchant edits/chooses an option
                              set, any variants will be removed from the
                              product. 
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Recommendations

                              When the resource is available in V3, it is best
                              to use the V3 endpoint. 


                              We created a handy [cheat sheet]() that lists all
                              the differences between V2 and V3 of the API. 
                    - title: Cheat Sprint
                      route:
                        path: /cheat-sheet-v2-v3
                      data:
                        blocks: []
                    - title: Authentication
                      route:
                        path: /authentication
                      data:
                        blocks:
                          - type: text
                            data: |-
                              # Authentication

                              ## What We'll Cover
                              * Getting OAuth Credentials
                              * Revoking an OAuth Token
                              * Getting a Client ID and Secret
                              * OAuth Scopes
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Getting OAuth Credentials

                              You can create and manage OAuth tokens in the
                              BigCommerce control panel by creating an API
                              account, as described below. (Only the store owner
                              can create API accounts; accounts are limited to
                              50 per store.)


                              To create your API account and its corresponding
                              token, use the following steps:

                              1. Log into the store, using the store owner’s
                              username/password.

                              2. Select Advanced Settings.

                              3. Select API Accounts. This will display the
                              Store API Accounts page.

                              4. Select Create API Account. This will display
                              the Create API Account page shown above.

                              5. In the Name field, summarize the purpose for
                              which you will use these credentials. (This name
                              is for internal use only, so assign any name that
                              you will recognize.)

                              6. In the OAuth Scopes section, select at least
                              the minimal scopes your app will require.

                              7. Select Save at the page’s lower right-hand
                              corner.


                              A successful save will display a pop-up,
                              containing the API credentials that your app will
                              need to run authenticated requests – your Client
                              ID and Access Token. A .txt file containing the
                              same credentials will (on most browsers)
                              automatically download to your computer. This file
                              also contains the base API Path for your store,
                              preconfigured for the v3 API.


                              From a security perspective, these credentials are
                              sensitive – please treat them with the same
                              caution that you would treat a private key or root
                              password.
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1536087816482
                            header:
                              title: Create an API Account
                          - type: callout
                            data:
                              type: warning
                              body: >-
                                There is no way to re-display this pop-up after
                                you select Done to dismiss it. 

                                So make sure you store your credentials – either
                                by copying/pasting the contents of each field
                                out of the pop-up or by keeping the downloaded
                                .txt file. Otherwise, you will need to repeat
                                all the above steps to generate new
                                credentials. 
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Revoking an OAuth Token


                              To revoke an OAuth token, use the following steps
                              to delete the associated API account:

                              1. Log into the store, using the store owner’s
                              username/password.

                              2. Select Advanced Settings.

                              3. Select API Accounts. This will display the
                              Store API Accounts page, shown below.

                              4. In the Actions column at right, select the
                              trash-can button next to the account you want to
                              delete.
                          - type: callout
                            data:
                              type: error
                              title: Delete Carefully
                              body: >-
                                There is no undo, so be sure before you delete
                                an account. You can also use the checkboxes on
                                the left side to delete multiple accounts at
                                once – but be especially careful when using this
                                option.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Client ID and Client Secret


                              * The Client ID value uniquely identifies your app
                              and you will need to pass it in the header of all
                              your requests to the Stores API.

                              * The Client Secret value is a secret that your
                              app and BigCommerce share. You do need to pass the
                              Client Secret value more than once during the app
                              installation sequence. Thereafter, BigCommerce
                              uses it to sign payloads in load, uninstall, and
                              remove user requests, and your app uses it to
                              verify the signature to ensure that the request is
                              coming from BigCommerce.


                              To get a Client ID and Client Secret you will need
                              to log in to the developer portal. 


                              1. Click on Create an app

                              2. Give your app a name. This will only be visible
                              to you.

                              3. A pop up box will display showing Your Profile,
                              App Summary and Category. 

                              4. Click on Step 3 - Technical. Fill out the App
                              Features sections with App Tyle, Multiples Users
                              Callback URLs and OAuth Scopes. You read more
                              about this page in the dev portal article. 

                              5. Then in the lower right-hand corner of the
                              popup box click Update & Close.

                              6. A new pop up will show asking if you want to
                              change the OAuth Scopes. Click Confirm Update.

                              7. It will take you back to the home page and your
                              app will be listed. Click View Client ID. 

                              8. Here you can get your Client ID and Client
                              Secret. 

                              9. The Client ID and Client Secret here can be
                              accessed again by clicking on View Client ID at
                              any time. If you delete the app, there is no way
                              to recover them.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Oauth Scopes


                              All OAuth scopes except `default` have `read_only`
                              scopes that allow only `GET` and `HEAD` requests.


                              | Scope GUI Name | Resources  | Description |

                              |---|---|---|

                              | Content | store_v2_content | View and modify
                              store content |

                              ||| [/v2/pages](/api/v2/#pages) |

                              ||| [/v2/blog](/api/v2/#blog-posts) |

                              ||| [/v2/redirects](/api/v2/#redirects) |

                              ||| [/v3/widgets](/api/v3/widgets.html) |

                              ||store_v2_content_read_only| View Site Content |

                              ||| [/v2/pages](/api/v2/#pages) |

                              ||| [/v2/blog](/api/v2/#blog-posts) |

                              ||| [/v2/redirects](/api/v2/#redirects) |

                              ||| [/v3/widgets](/api/v3/widgets.html) |

                              | Checkout Content | store_content_checkout | View
                              and modify content on checkout pages |

                              ||| [/v3/scripts](/api/v3/scripts.html) |

                              | Customers | store_v2_customers | View and modify
                              customer information |

                              ||| [/v2/customers](/api/v2/#customers) |

                              ||| [/v2/customer_groups](api/v2/#customer-groups)
                              |

                              |||
                              [/v3/customers/subscribers](/api/v3/customers.html#customers-api)
                              |

                              ||store_v2_customers_read_only|View customer
                              information |

                              ||| [/v2/customers](/api/v2/#customers) |

                              ||| [/v2/customer_groups](api/v2/#customer-groups)
                              |

                              |||
                              [/v3/customers/subscribers](/api/v3/customers.html#customers-api)
                              |

                              | Customers Login | store_v2_customers_login | Log
                              in any of your customers to your storefront |

                              ||| [Access to the Customer Login
                              API](/api/v2/#customer-login-api)

                              | Information & Settings| store_v2_information |
                              View and modify general store information and
                              settings |

                              |||
                              [/v2/shipping/methods](/api/v2/#list-shipping-methods)
                              |

                              |||
                              [/v2/shipping/zones](/api/v2/#list-shipping-methods)
                              |

                              |||
                              [/v2/shipping/carrier](/api/v2/#shipping-carrier-connections)
                              |

                              || store_v2_information_read_only | View general
                              store information and settings |

                              |||
                              [/v2/shipping/methods](/api/v2/#list-shipping-methods)
                              |

                              |||
                              [/v2/shipping/zones](/api/v2/#list-shipping-methods)
                              |

                              |||
                              [/v2/shipping/carrier](/api/v2/#shipping-carrier-connections)
                              |

                              |||
                              [/v2/payments/methods](/api/v2/#payment-methods) |

                              |||
                              [/v2/tax_classes](/api/v2/#tax-class-object-properties)
                              |

                              |||
                              [/v2/store](/api/v2/#get-a-store-39-s-information)
                              |

                              | Marketing | store_v2_marketing | View and modify
                              marketing information |

                              ||| [/v2/coupons](/api/v2/#coupons) |

                              |||
                              [/v2/gift_certificates](/api/v2/#gift-certificates)
                              |

                              ||| [/v2/banners](/api/v2/#banners) |

                              || store_v2_marketing_read_only | View marketing
                              information |

                              ||| [/v2/coupons](/api/v2/#coupons) |

                              |||
                              [/v2/gift_certificates](/api/v2/#gift-certificates)
                              |

                              ||| [/v2/banners](/api/v2/#banners) |

                              | Orders | store_v2_orders | View and modify
                              orders |

                              ||| [/v2/orders](/api/v2/#get-an-order) |

                              ||| [/v2/order_statuses](/api/v2/#order-statuses)
                              |

                              || store_v2_orders_read_only | View orders |

                              ||| [/v2/orders](/api/v2/#get-an-order) |

                              ||| [/v2/order_statuses](/api/v2/#order-statuses)
                              |

                              | Order Transactions |
                              store_v2_transactions_read_only | View order
                              transactions |

                              |||
                              [/v3/orders/{id}/transactions](/api/v3/orders.html#orders-api)
                              |

                              | Products | store_v2_products | View and modify
                              products |

                              ||| [/v3/catalog](/api/v3/catalog.html) |

                              ||| [/v3/pricelists](/api/v3/pricelists.html) |

                              ||| [/v2/option_sets](/api/v2/#product-options) |

                              |||
                              [/v2/categories](/api/v3/catalog.html#getcategories)
                              |

                              ||| [/v2/options](/api/v3/catalog.html#getoptions)
                              |

                              ||| [/v2/brands](/api/v3/catalog.html#getbrands) |

                              |||
                              [/v2/products](/api/v3/catalog.html#getproducts) |

                              || store_v2_products_read_only | View products |

                              ||| [/v3/catalog](/api/v3/catalog.html) |

                              ||| [/v3/pricelists](/api/v3/pricelists.html) |

                              ||| [/v2/option_sets](/api/v2/#product-options) |

                              |||
                              [/v2/categories](/api/v3/catalog.html#getcategories)
                              |

                              ||| [/v2/options](/api/v3/catalog.html#getoptions)
                              |

                              ||| [/v2/brands](/api/v3/catalog.html#getbrands) |

                              |||
                              [/v2/products](/api/v3/catalog.html#getproducts) |

                              | Themes | store_themes_manage | View and modify
                              themes |

                              ||| [/v3/themes](/api/v3/themes.html) |

                              || store_themes_read_only | View themes |

                              ||| [/v3/themes](/api/v3/themes.html) |

                              | Carts | store_cart | View and Modify carts |

                              ||| [/v3/carts](/api/v3/cart.html) |

                              || store_cart_read_only | View Carts |

                              ||| [/v3/carts](/api/v3/cart.html) |
                    - title: API Requests
                      route:
                        path: /api-requests
                      data: {}
                    - title: Best Practices
                      route:
                        path: /best-practices
                      data:
                        blocks:
                          - type: text
                            data: |-
                              # Best Practices

                              ## What We'll Cover
                              * Ensure that your integration is up-to-date
                              * Use webhooks effectively within your application
                              * Thread your requests to the BigCommerce API
                              * Marketplace
                              * Rate Limits
                              * Making Requests in Parallel
                              * Platform Limits
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Ensure that your integration is up-to-date


                              BigCommerce frequently enhances its core product
                              and is actively developing v3 API endpoints. By
                              using the newest API version, you will ensure that
                              your app has access to the latest resources. You
                              will also be better positioned to provide a user
                              experience consistent with what merchants will see
                              in their BigCommerce store’s control panel. To
                              stay up to date bookmark our
                              [changelog](http://). 
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Use webhooks effectively within your
                              application


                              To keep data in your application up-to-date,
                              webhooks provide a great alternative to doing
                              periodic checks. In order to register a webhook
                              event that your application can listen for, you
                              will need to use OAuth (not legacy “Basic
                              Authentication”).


                              BigCommerce will send a partial payload when a
                              subscribed event is triggered, with minimal
                              identifying details (such as the order ID when an
                              order is created). Your application could use the
                              order ID returned in the payload to make a
                              subsequent API request for the full order
                              details..
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Thread your requests to the BigCommerce API


                              In order to quickly update information in the API,
                              you can use threaded requests. Threaded requests
                              allow you to send multiple requests at one time.
                              They can come from a different open connection or
                              multiple requests to the same resource. 


                              The [BigCommerce Ruby API](http://) client is
                              thread-safe: It satisfies the need for multiple
                              threads to access the same shared data, and the
                              need for a shared piece of data to be accessed by
                              only one thread at any given time. These
                              attributes can reduce the total time that your app
                              will require to complete a series of requests.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Marketplace Apps


                              Merchants often have more than one person working
                              on their store. BigCommerce allows additional
                              users to access your app when the store owner has
                              granted them appropriate permissions. The
                              requirements for supporting multi-user access are:

                              * Tokens must be stored against the store_hash and
                              not against user info.

                              * Within Developer Portal > My Apps, you must
                              enable the app’s Technical > Multiple Users
                              option.


                              In the payload returned when a user launches an
                              app, users are distinguished by `owner_email`
                              versus `user_email`. If these two emails match,
                              the user is the store owner.


                              If you wish to enable user removal, you can do by
                              filling in the app’s Technical > Remove User
                              Callback URL field. (Enabling user removal is
                              optional.)

                              For more advanced implementations, you can enable
                              the store owner to grant specific permissions to
                              different non-admin users. For example,
                              person1@email.com could be restricted to editing
                              product inventory but not seeing orders. If you
                              decide to include this feature in your app, it’s a
                              great feature to advertise.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Rate Limits

                              Apps that authenticate with OAuth are
                              rate-limited, based on a quota that is refreshed
                              every few seconds. The maximum quota for a store
                              will vary depending on the store’s plan.


                              Each request to the API consumes one available
                              request from the quota. When an app hits the quota
                              limit, subsequent requests are rejected until the
                              quota is refreshed.


                              The store’s overall quota is distributed across
                              all apps that are accessing the store at a given
                              time. This provides fairness for multiple apps
                              that are accessing the API simultaneously,
                              preventing a single greedy app from consuming the
                              store’s entire quota by itself. The quota might
                              adjust as additional clients connect or disconnect
                              while you’re running requests. 
                          - type: text
                            data: >-
                              ### API Rate Limits


                              Enterprise plans and Enterprise Sandboxes
                              (Enterprise-Test): Unlimited (7mil / 30sec)


                              Pro plans: 80k per hour (450 / 30sec)


                              All other sandboxes (Dev/Partner/Employee): 20k
                              per hour (150 / 30sec)


                              Plus & Standard plans: 20k per hour (150 / 30sec)


                              Each request to the API consumes one available
                              request from the quota. When an app hits the quota
                              limit, subsequent requests are rejected until the
                              quota is refreshed.


                              The store’s overall quota is distributed across
                              all apps that are accessing the store at a given
                              time. This provides fairness for multiple apps
                              that are accessing the API simultaneously.
                          - type: text
                            data: >
                              ### Playing Nicely with the Platform


                              Every API response’s HTTP headers give you full
                              visibility into your position in the rate-limiting
                              algorithm:

                              ```

                              {

                              Content-Encoding →gzip

                              Content-Type →application/json

                              Date →Thu, 29 Mar 2018 15:59:24 GMT

                              Last-Modified →Tue, 13 Mar 2018 18:00:26 +0000

                              Transfer-Encoding →chunked

                              Vary →Accept-Encoding

                              X-Bc-Store-Version →7.6.0

                              X-Rate-Limit-Requests-Left →16101494

                              X-Rate-Limit-Requests-Quota →16101495

                              X-Rate-Limit-Time-Reset-Ms →30000

                              X-Rate-Limit-Time-Window-Ms →30000

                              }

                              ```


                              | Name | Description |

                              | -- | -- |

                              | X-Rate-Limit-Time-Window-Ms| Shows the size of
                              your current rate-limiting window. In this case,
                              it’s 5000 milliseconds.|

                              | X-Rate-Limit-Time-Reset-Ms | Shows how many
                              milliseconds are remaining in the window. In this
                              case, 3000 milliseconds – so, 3000 milliseconds
                              after this request, the API quota will be
                              refreshed. |

                              | X-Rate-Limit-Requests-Quota | Shows how many API
                              requests are allowed in the current window for
                              your client. In this case, the number is 25
                              requests. |

                              | X-Rate-Limit-Requests-Left | Details how many
                              remaining requests your client can make in the
                              current window before being rate-limited. In this
                              case, you would expect to be able to make 6 more
                              requests in the next 3000 milliseconds; on the 7th
                              request within 3000 milliseconds, you would be
                              rate-limited and would receive an HTTP 429
                              response.|


                              If your request to the API triggers a [429 Too
                              Many Requests](http://) response, then you know
                              you’ve been limited.


                              The rate-limited response will contain the
                              `X-Rate-Limit-Time-Reset-Ms` header, specifying a
                              time (in milliseconds) that your client must wait
                              before its quota has refreshed. Retry the request
                              after this time has elapsed, and your API service
                              will resume as normal.
                          - type: text
                            data: "### Example of 429 Status Code\n\nWhen you see a response with a HTTP 429 status code, your client shouldn’t make any further requests until your quota has refreshed:\n\n```\nHTTP/1.1 429 Too Many Requests\n    \tDate: Mon, 03 Feb 2017 20:36:00 GMT\n    \tContent-Type: application/json\n    \tX-Rate-Limit-Time-Reset-Ms: 15000\n```\n\n\nParse the `X-Rate-Limit-Time-Reset-Ms` header to determine how long you have to wait. In this case, it would be 15000 milliseconds.\nYour client can sleep on the specified interval:\n\n```\n   $milliseconds = $response->getHeader(\"X-Rate-Limit-Time-Reset-Ms\");\n    usleep($milliseconds * 1000);\n```\n\n\nAfter waiting for the given number of milliseconds, you can go back to making API requests."
                          - type: text
                            data: >-
                              ### Making Requests in Parallel

                              You might wish to increase the amount of work your
                              application can do in a given unit of time, by
                              sending multiple HTTP requests to the BigCommerce
                              API in parallel. This is perfectly acceptable.

                              However, your application should monitor the
                              rate-limiting headers to avoid an HTTP 429
                              response. Methods for doing this might include:

                              * Slowing your rate of API requests when
                              X-Rate-Limit-Requests-Left is nearing zero.

                              * Determining an acceptable average rate of
                              requests, by dividing X-Rate-Limit-Requests-Quota
                              by X-Rate-Limit-Time-Window-Seconds, and then
                              self-throttling to that rate.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Platform Limits


                              BigCommerce does have a limit on the number of
                              products, category, brands etc that can be in a
                              store. See [Platform
                              Limits](https://forum.bigcommerce.com/s/article/Platform-Limits#product-catalog-limits)
                              for more details
                    - title: Filtering
                      route:
                        path: /filtering
                      data:
                        blocks:
                          - type: text
                            data: '# Filtering'
                          - type: text
                            data: >-
                              To filter collections down to a particular set of
                              items, you can add filters as URL query
                              parameters.


                              These are the most common filter options available
                              for the V3 API. 


                              | Operator | Expression  | Example | 

                              |--|--|--|

                              | Equals/equivalency | attribute=value  |
                              `/v3/catalog/products?price=10`
                              `/v3/catalog/products?name=My Product` |

                              | Greater than or equal to (for numbers or dates)
                              | attribute:min=value  |
                              `/v3/catalog/products?price:min=10` |

                              | Less than or equal to (for numbers or dates) |
                              attribute:max=value |
                              `/v3/catalog/products?price:max=10` |

                              | Greater than (for numbers or dates)|
                              attribute:greater=value |
                              `/v3/catalog/products?price:greater=10` |

                              | Less than (for numbers or dates) |
                              attribute:less=value |
                              `/v3/catalog/products?price:less=10` |

                              | SQL LIKE operator (for strings) |
                              attribute:like=pattern |
                              `/v3/catalog/categories?name:like=Shirts` |

                              | SQL IN operator (for arrays) |
                              attribute:in=csv,list,of,values |
                              `/v3/catalog/products?categories:in=123,456` |

                              | SQL NOT IN operator (for arrays) |
                              attribute:not_in=csv,list,of,values |
                              `/v3/catalog/products?categories:not_in=123,456` |


                              <p>Available filters vary by endpoint. Refer to
                              the GET method for an endpoint to see a list of
                              available filters.</p>

                              <p> When using DELETE filter parameters can be
                              passed in. This is not required for all. Refer to
                              the endpoint to see the requirements for each.
                              </p>


                              ### Includes


                              Some endpoints allow an `?include` parameter to
                              include subresources and other information in the
                              primary GET response for a parent object.


                              This allows you to save API calls by getting more
                              information in a response, however it may slow
                              down your response.


                              As an example, you can include a product's
                              variants and images with the product response:
                              `/v3/catalog/products?include=variants,images`


                              Available includes vary by endpoint. Refer to the
                              GET method for an endpoint to see a list of
                              available includes.


                              ### Including and Excluding fields


                              Some endpoints use `?include_fields` and
                              `?exclude_fields`. 


                              `include_fields` will return ONLY the specified
                              fields in the response. `exclude_fields` will omit
                              the specified fields from the response.


                              You can specify any field that is available as
                              apart of the object. Excluding fields you don't
                              care about (especially large fields like
                              descriptions) can speed up your API request
                              response time.



                              #### Example


                              `https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products?include_fields=name,price`


                              Here product name and price have been included.


                              ```

                              {
                                  "data": [
                                      {
                                          "id": 77,
                                          "name": "Red printed scarf",
                                          "price": 12
                                      }    
                                  ]
                              }    

                              ```
                    - title: Client Libraries
                      route:
                        path: /client-libraries
                      data: {}
                    - title: API Status Codes
                      route:
                        path: /api-status-codes
                      data:
                        blocks:
                          - type: text
                            data: '# API Status Codes '
                          - type: text
                            data: >-
                              The API responds to requests with different HTTP
                              status codes depending on the result from the
                              request. Error responses might also include an
                              error message in the body to assist the client in
                              resolving the problem.
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              ## 2xx Success 


                              These codes are returned for requests that were
                              understood and processed successfully.


                              | Code | Definition | Purpose |

                              | --- | --- | --- |

                              | **200** | **OK** | For successful `GET` and
                              `PUT` requests. |

                              | **201** | **Created** | For a successful `POST`
                              request. |

                              | **202** | **Accepted** | For a request that
                              resulted in a scheduled task being created to
                              perform the actual request. |

                              | **204** | **No Content** | For a successful
                              request that produced no response (such as
                              `DELETE` requests). |
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ### 3xx Redirection 


                              These codes are returned for requests that require
                              the client to take further action.


                              | Code | Definition | Purpose |

                              | --- | --- | --- |

                              | **301** | **Moved Permanently** | When the API
                              routes have changed (unlikely), or if the incoming
                              request is not secure (`http`), the request will
                              be redirected to the secure (`https`) version. |

                              | **304** | **Not Modified** | This response will
                              be sent if the request included an
                              `If-Modified-Since` header, but the resource has
                              *not* been modified since the specified date.
                              Please refer to individual resources'
                              documentation regarding support for the
                              `If-Modified-Since` header. |
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ### 4xx Client Error 


                              These codes are returned for requests that could
                              not be processed due to problems with the request
                              or the data.


                              | Code | Definition | Purpose |

                              | --- | --- | --- |

                              | **400** | **Bad Request** | Issued when a
                              malformed request was sent. Examples are: |

                              |||*   Invalid syntax

                              |||*   Missing required data

                              |||*   Webhook requests missing `Content-Type` in
                              the HTTP header.

                              |

                              | **401** | **Unauthorized** | This response is
                              sent when your client failed to provide
                              credentials or its credentials were invalid. |

                              | **403** | **Forbidden** | Returned when
                              permissions do not allow the operation. To
                              correct:

                              |||*   Check your app in `My Apps` to review the
                              OAuth scopes you requested, and check whether they
                              support the request that you made.

                              |||*   Changes to the store owner's account
                              (including a change to the email address) can also
                              cause this error. Roll back those changes to
                              correct it.

                              |||*   This error can also occur when your request
                              exceeds a limit imposed on the resource in
                              question. For example, a store cannot exceed
                              16,000 categories. For more information, see the
                              corresponding resource's documentation.

                              |

                              | **404** | **Not Found** | When a particular
                              resource doesn’t exist or couldn’t be found. |

                              | **405** | **Method Not Allowed** | The resource
                              was found, but doesn’t support the request method.
                              Issued when either a specific method isn’t yet
                              implemented on a resource, or the resource doesn’t
                              support the method at all. For example, a `PUT` on
                              `/orders` is invalid, but a `PUT` on
                              `/orders/{_id_}` is valid. |

                              | **406** | **Not Acceptable** | When the client
                              specifies a response content type in the `Accept`
                              header that is not supported. |

                              | **409** | **Conflict** | A change requested by
                              the client is being rejected, due to a condition
                              imposed by the server. The exact reasons for this
                              response will vary from one resource to the next.
                              An example might be attempting to delete a
                              category whose deletion would cause products to be
                              orphaned. Additional information about the
                              conflict, and about how to resolve it, might be
                              available in the response's `details` section. |

                              | **413** | **Request Entity Too Large** | When
                              the client requests too many objects. For example,
                              the `limit` parameter exceeded the maximum. |

                              | **415** | **Unsupported Media Type** | Returned
                              due to issues with the `Content-Type` header.
                              Examples of such issues are:

                              |||*   The header specifies an unsupported content
                              type.

                              |||*   The header is missing (except with the
                              webhooks resource, which returns a 400 in this
                              case).
                               |
                              | **422** | **Missing or Invalid Data** | The
                              request cannot be processed either because it
                              omitted required fields, or because it contained
                              invalid data. See the response for more details. |

                              | **429** | **Too Many Requests** | When an OAuth
                              client exceeds the [rate
                              limit](/api/#rate-limits-oauth) for API requests
                              to a store. |
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ### 5xx Server Error 


                              These codes are returned for requests that could
                              not be processed due to an internal error with the
                              API or server.


                              | Code | Definition | Purpose |

                              | --- | --- | --- |

                              | **500** | **Internal Server Error** | When an
                              error has occurred within the API. |

                              | **501** | **Not Implemented** | When a request
                              method is sent that is not supported by the API
                              (e.g., `TRACE`, `PATCH`). |

                              | **503** | **Service Unavailable** | When the
                              store is marked as “Down for Maintenance,” or the
                              store is being upgraded to a new version. |

                              | **507** | **Insufficient Storage** | When the
                              store has reached a limitation for the resource,
                              according to their BigCommerce plan (e.g.,
                              500-product limit). |

                              | **509** (Deprecated) | **Bandwidth Limit
                              Exceeded** | Returned to apps using Basic
                              Authentication that have exceeded their [rate
                              limits](). |
                          - type: text
                            data: '---'
                          - type: text
                            data: "## Troubleshooting\n\n### Why am I getting 4XX/5XX errors from the API?\n* A 401 error indicates that your API call is being received but isn’t properly authenticating with our API. Either credentials are absent from the request, or we are receiving invalid credentials. Steps to resolve this:\n\t* Double-check your Access Token and Client ID.\n\t* If your credentials are valid, try sending a cURL request with the same credentials. This will test whether the problem is something within your application, rather than a credentials issue.\n* For 403 errors , there are 4 common causes:\n\t* Your app lacks the appropriate scopes to make the request that it sent. Resolution: Check the OAuth scopes that you requested, either in control panel > API Accounts or in Developer Portal’s My Apps section.\n\t* The store-owner account has changed on a store that installed your app. Resolution: This might require a reinstall by the new store owner, or a rollback of the store-owner changes.\n\t* Your API request exceeded an enforced platform limit. Among other limits, each store is limited to a maximum of 30,000 brands and 16,000 categories. For more information about these limits, see either the API resource you are using or our support documentation on platform limits.\n* Check your URL paths. An incorrect path can sometimes trigger a 403 error.\n* 500 errors almost always indicate an internal server error on BigCommerce’s side. Steps to resolve these:\n\t* Re-attempt the request three to five times, with increasing delays of at least a minute between attempts.\n\t* Check our status page.\n\t* 500 errors can also be caused by particularly expensive API calls. To avoid these errors on stores with very complex data, try reducing how many objects you are requesting. In the v2 API, you can request fewer objects by using ?limit={count}. In either the v2 or v3 API, you can request fewer objects by excluding certain fields or only requesting certain fields.\n\t* \n### Why am I getting an HTTP 204 or 301/302 response to an API request?\n* Double-check the URL to which you are making an API request. If the response code is 301/302, try the WWW or non-WWW version of the URL."
              - title: Partner Information
                route:
                  path: /partner
                data:
                  children:
                    - title: Becoming A Partner
                      route:
                        path: /becoming-a-partner
                      data:
                        blocks:
                          - type: text
                            data: |-
                              # Becoming a Partner

                              ## What We'll Cover
                          - type: text
                            data: >-
                              The following sections outline the steps required
                              to become a vendor of Single-Click Apps on the
                              BigCommerce platform. Doing so requires a
                              partnership application, but acceptance will
                              authorize you to provide best-of-breed solutions
                              to the fast-growing online businesses we host.


                              ## Apply to the Technology Partner Program


                              Before you can submit an app to the BigCommerce
                              App Marketplace (which merchants also know as our
                              “app store”), you must become an official Partner.
                              BigCommerce offers app developers free sandbox
                              stores through its Technology Partner Program. To
                              be approved as a partner, you will need:


                              * A website.

                              * Intent to offer your app publicly.

                              * Ability to support users of your app.

                              * Evidence of expertise in app development.


                              Once approved, you will receive one or more emails
                              listing your partner credentials and next steps.
                              Your Partner ID will be required to submit your
                              app for App Marketplace consideration. If you do
                              not receive these credentials by email, please
                              contact <a
                              href="mailto:partnersupport@bigcommerce.com">partnersupport@bigcommerce.com</a>.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Types of Apps We Are looking for


                              We are looking for all kinds of apps. We want
                              technology that provides an outstanding user
                              experience for BigCommerce Merchants.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Getting a Sandbox Store


                              To build a Marketplace app or hidden app, you will
                              need to have a sandbox store, a developer account
                              at devtools.bigcommerce.com and be accepted as a
                              BigCommerce partner. This account is separate from
                              the account created when signing up for the store.
                              A sandbox store cannot process transactions and is
                              for developing and testing apps without the 15-day
                              time time limit of a trial store. 
                          - type: callout
                            data:
                              type: warning
                              body: >-
                                A sandbox store is not required for app
                                development, but after the 15-day trial period,
                                the store is erased along with the data and a
                                new store will need to be created. Applying to
                                be a partner and getting a sandbox store is best
                                practice. 
                          - type: text
                            data: >-
                              ### Create a Sandbox Store


                              1. Navigate to the [BigCommerce Pricing
                              page](https://www.bigcommerce.com/pricing/).

                              2. Select START YOUR FREE TRIAL.

                              3. Where prompted for an email address, enter the
                              same email that you used when applying to become a
                              Technology Partner. 

                              4. Select START YOUR TRIAL.

                              5. In the trial store setup form, enter a store
                              name, password, and other details. Then select
                              CREATE YOUR STORE.

                              6. Navigate to your Partner Portal > Support >
                              Create a Case > Issue Type = Portal and
                              Membership. In the case description, enter your
                              new sandbox store’s friendly URL (for example:
                              http://your-store-name.mybigcommerce.com) and
                              request conversion to a Sandbox. We will flag this
                              as a sandbox store. This will ensure your
                              continued access to the store, as opposed to the
                              normal 15-day trial. This can take around two
                              days.

                              7. When you log into your new store, use the same
                              email that you used at step 3 above.
                          - type: text
                            data: '---'
                          - type: text
                            data: '## App Store Approval Requirements'
                          - type: text
                            data: >-
                              ### Prerequisites


                              Make sure you’ve applied and been approved for our
                              [Technology Partner
                              Program](https://partners.bigcommerce.com/English/register_email.aspx)
                              before you’re ready to submit your app - you’ll
                              need a valid Partner ID to do so. You’ll also need
                              to accept the Terms & Conditions in the [Partner
                              Portal](https://partners.bigcommerce.com/English/)
                              before we can publish your app.


                              ### General Requirements


                              -   Support resources should be available
                              throughout the app experience, including in your
                              onboarding flow and the app’s dashboard.
                                  
                              -   Make sure to reference BigCommerce using the
                              proper formatting. You can visit our [Media
                              Kit](https://www.bigcommerce.com/press/media-kit/)
                              for any BigCommerce branding assets need.
                                  
                              -   The app and app listing should make no
                              references to competitor platforms.


                              -   Use the brand name you’ve given your app for
                              your app title throughout your app content. This
                              listing name should be a concise title for easy
                              identification and should not include additional
                              taglines or descriptors. The name will always
                              appear alongside your summary, so there’s no need
                              to muddy your app’s branding with duplicate
                              content when that tagline is already displayed
                              with it!  
                                    
                                  - If your solution is a connector to a specific third-party service, or you’re offering only a specific feature, make sure to include both the name of the third party service or feature and your company name​ (Ex: “Marketplace by BigCommerce”, “Search by BigCommerce”), with your company name following the feature.
                                  
                              -   Your app, including any storefront components,
                              should be compatible with all
                              [browsers](https://developer.bigcommerce.com/api/#supported-browsers)
                              that the BigCommerce platform supports.


                              ### Listing Requirements


                              #### Name

                              - The brand name for your app integration. 
                                  
                              #### App Images

                              - Your primary app logo should be 350x130px (or
                              larger at this ratio) with a white background and
                              dark branding in the foreground. The logo should
                              only include branding, no taglines necessary.

                              - Your app icon will be included on the main app
                              detail page and the sidebar in the BigCommerce
                              control panel once the app is installed. This
                              should be a square 200x200px image.

                              - Your alternate logo will be used if your app is
                              featured on the homepage carousel of the
                              Marketplace. This image should be 259x158px (or
                              larger at this ratio) with a dark background and
                              white or light branding in the foreground. The
                              logo should only include branding, no taglines
                              necessary.
                                  
                              #### Pricing & Categorization

                              - Select one of our pre-formatted pricing options
                              to call out your app’s starting price. If you
                              offer a forever-free plan, choose the “Free”
                              option. If your app does not fit one of our
                              formatted options, specify your details in a few
                              words in the “Other” selection.

                              - Choose the most appropriate category for your
                              app.
                          - type: callout
                            data:
                              body: >-
                                If you need to specify more detail on your
                                pricing options, save it for your app
                                description.  
                          - type: text
                            data: >-
                              #### App Details
                                  
                              -   Summary - A short tagline description of your
                              app that will be used on your app card in category
                              and search results within the Marketplace. 128
                              characters max.
                                  
                              -   Description - A more in-depth value
                              proposition for your listing, including how your
                              solution works, why your solution stands out in
                              its category, and why a merchant should choose you
                              over other competitors. Avoid using fluff or
                              buzzwords, as this field will not be indexed for
                              search. 200 words max recommended.
                                  
                              -   Features - Up to 5 separate feature headings
                              and short descriptions to highlight stand-out
                              details about your app.
                                  
                              -   Guides - Links to your User and Installation
                              Guides as a reference for existing users and
                              prospects.
                                  

                              #### Partner Information
                                  

                              -   A Support email and website for users to reach
                              out as needed. These will be publicly visible on
                              the Marketplace, so make sure to stay away from
                              personal emails or non-support URLs.
                                  
                              -   Links to your privacy policy and terms of
                              service.
                                  
                              ### Installation


                              -   Apps should be Single-Click and use our OAuth
                              token exchange flow to authenticate the user
                                  
                              -   Single-Click does not mean everything 
                              completed in one click, but that authentication is
                              handled in that click - other tasks can be handled
                              post-auth with the user
                                  
                              -   When the app is installed, a styled HTML page
                              must be returned in the iframe of the BigCommerce
                              control panel - this content cannot be blank and
                              must follow our [user-interface
                              constraints](https://).
                                  
                              -   During the OAuth handshake, be sure to store
                              the user’s token against their store hash - rather
                              than their email address - to avoid any problems
                              with ownership changes or multi-user support.
                          - type: callout
                            data:
                              body: >-
                                If your app cannot meet these requirements,
                                please reach out to <a
                                href="mailto:partnersupport@bigcommerce.com">partnersupport@bigcommerce.com</a>
                                in order to discuss the potential for a
                                Connector app listing. In the majority of cases,
                                a Single-Click app will be the more appropriate
                                solution and put your integration on par with
                                other Marketplace partners, but exceptions may
                                be made under certain circumstances
                          - type: text
                            data: >-
                              ### Functionality


                              -   Your app must work as intended, be free of
                              defects, and not conflict with or break any
                              default BigCommerce functionality, including the
                              BigCommerce storefront and checkout.
                                  
                              -   Utilize [any V3 API
                              resources](https://developer.bigcommerce.com/api/v3/)
                              that are currently available for the content you
                              need from a BigCommerce store.
                                  
                              -   The dashboard and callback URLs for your app
                              should operate strictly over HTTPS using a valid
                              SSL certificate.
                                  
                              -   Apps should offer [multi-user
                              support](https://developer.bigcommerce.com/api/#multi-user-support)
                              so that permissions for the app can be distributed
                              by the store owner to additional users, from the
                              BigCommerce control panel.
                                  
                              -   Any apps that process transactions or handle
                              credit card data will need to pass a PCI
                              Compliance review with our Security team, and also
                              be compatible with our Optimized One-Page
                              Checkout.
                                  
                              -   Avoid copy/paste for storefront code - use the
                              [V3 Scripts
                              API](https://developer.bigcommerce.com/api/v3/#/reference/scripts)
                              to programmatically inject code snippets into a
                              store’s Script Manager and storefront theme.
                                  
                              -   If your app requires payment, you’ll need to
                              collect payment from the user within your app.
                              More info on [monetizing your app
                              here](https://developer.bigcommerce.com/api/#monetizing-your-app).  


                              ### Recommendations


                              -   Have a form to fill out for new users? We
                              recommend auto-filling user input fields with data
                              from the [Store Information API
                              resource](https://developer.bigcommerce.com/api/v2/#store-information-reference),
                              which already contains much of the info you might
                              need from a new user.
                                  
                              -   No account approval process needed for your
                              app? Consider automatically generating accounts
                              for stores that install your app and don’t match
                              an existing store in your database.
                                  
                              -   Require login on launch? Use the information
                              in the BigCommerce payload to your callback URL to
                              authenticate the user without asking for a
                              username and password each time.
                                  
                              -   Want to share user testimonials? Add a link to
                              your full case study in the Case Studies field,
                              with a title and short description.



                              ### Technical


                              You will have already provided much of the
                              information during the initial [app
                              registration](/api/#app-quick-start). Before
                              submitting your app, please review the information
                              that you initially provided, to make sure that all
                              of the URIs are publicly available, fully
                              qualified, and served over TLS/SSL. Also, ensure
                              that your app is requesting all of the scopes that
                              it needs now, as well as the scopes that you
                              anticipate needing in the future.


                              Before submission, you must also provide detailed
                              testing instructions, as well as test accounts.
                          - type: callout
                            data:
                              body: >-
                                Changing scopes once your app is launched will
                                require all of your current users to
                                re-authorize the app before they can launch it
                                again.
                          - type: text
                            data: >-
                              ###  Submitting your App


                              Our submission guidelines aim to protect the
                              merchant experience and to provide enough
                              structure for you to develop apps efficiently and
                              effectively. Before submitting your app, please be
                              sure to carefully review the App Requirements, to
                              avoid having your app rejected and going through
                              resubmission. A fee of $99 is required for each
                              submission. If the app is rejected you will be
                              charged for a new submission. You can [submit an
                              app](/api/#payment-amp-submission) through the Dev
                              Portal.

                                
                              ###  Monetizing Your App


                              If you want to charge merchants for your app,
                              please note that BigCommerce expects you to handle
                              the billing aspects of the transaction. Your app
                              needs to take care of collecting the fee from the
                              merchant.


                              Under BigCommerce’s Technology Partner Program,
                              within 30 days of collecting this revenue, you
                              must send BigCommerce 20% and retain the remaining
                              80% for yourself. Once your app is published, a
                              mandatory revenue-share reporting form will be
                              sent to the primary contact on your partner
                              account, at the beginning of each month.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ##  Troubleshooting


                              ### Are all fields required?


                              While not all fields are required to publish edits
                              for your listing, they are all highly recommended.
                              Without filling in all fields, your listing will
                              be missing information that merchants have seen on
                              other listings and expect to see throughout the
                              Marketplace.


                              ###  I’ve logged in to the Developer Portal, but I
                              don’t see my published listing. Where is it?


                              You may be logged in with the wrong account. Each
                              listing can only be owned by one user, so it is
                              likely assigned to another email address. If
                              you’re unable to track down the correct owner
                              account for your solution, please reach out to <a
                              href="mailto:appstore@bigcommerce.com">appstore@bigcommerce.com</a>.


                              ### I saved my changes, but my listing detail page
                              on BigCommerce.com/Apps has not updated yet.
                              What’s the problem?


                              The changes will be effective immediately in your
                              control panel app card, but the updates can take
                              up to 24 hours to appear on the public BigCommerce
                              Marketplace. Feel free to use this as a grace
                              period to make additional edits as needed.
                          - type: callout
                            data:
                              type: success
                              body: >-
                                Questions? Please contact <a
                                href="mailto:partnersupport@bigcommerce.com">partnersupport@bigcommerce.com</a>
                    - title: Using Dev Tools
                      route:
                        path: /using-dev-tools
                      data:
                        blocks:
                          - type: text
                            data: '# Using the Developer Portal'
                          - type: text
                            data: >-
                              The Developer Portal can be found by clicking [My
                              Apps](https://devtools.bigcommerce.com/) in the
                              upper right corner of the page. 


                              The Developer Portal is where the Client Id and
                              Client Secret ,submission form and a list of apps
                              that you have created.
                          - type: text
                            data: '---'
                          - type: tabs
                            data:
                              children:
                                - title: App Summary
                                  blocks:
                                    - type: image
                                      data: >-
                                        //s3.amazonaws.com/user-content.stoplight.io/6012/1536259683439
                                      header:
                                        anchor: app-summary
                                    - type: text
                                      data: >-
                                        ### Contact Name

                                        Use the email address that was created
                                        when applying for your Partner Id. 


                                        ### Partner Name

                                        List the name of your company​, as you
                                        want it to be attributed on the detail
                                        page.


                                        ### Partner Website

                                        Provide the URL for your homepage so
                                        users can learn more about your company.


                                        ### Support email

                                        Email where users can get help with the
                                        app. This should be a formal group email
                                        at your company domain (Ex:
                                        support@app-partner.com) rather than a
                                        personal email. If not provided, this
                                        option will not be displayed.


                                        ### Support website

                                        A Support email and website for users to
                                        reach out as needed.

                                        These will be publicly visible on the
                                        Marketplace, so make sure to stay away
                                        from personal emails or non-support
                                        URLs. Your public detail page will
                                        include a button for users to “Get
                                        Support,” which will take them to this
                                        URL in a new tab. If not provided, the
                                        button will not be displayed on your
                                        detail page.


                                        ### Partner ID

                                        When you’re ready to submit your listing
                                        for review, you will need to enter your
                                        [Partner
                                        ID](#apply-to-the-technology-partner-program)
                                        for your Technology Partner account.
                                        This field is not required to create,
                                        save, or edit a Draft prior to
                                        submission. 
                                    - type: image
                                      data: >-
                                        //s3.amazonaws.com/user-content.stoplight.io/6012/1536259722234
                                    - type: text
                                      data: >-
                                        ### App Name

                                        Use the brand name you’ve given your app
                                        for your app title throughout your app
                                        content. This listing name should be a
                                        concise title for easy identification
                                        and should not include additional
                                        taglines or descriptors. The name will
                                        always appear alongside your summary, so
                                        there’s no need to muddy your app’s
                                        branding with duplicate content when
                                        that tagline is already displayed with
                                        it.
                                    - type: callout
                                      data:
                                        body: >-
                                          If your solution is a connector to a
                                          specific third-party service, or you’re
                                          offering only a particular feature, make
                                          sure to include both the name of the
                                          third party service or feature and your
                                          company name​ (Ex: “Marketplace by
                                          BigCommerce,” “Search by BigCommerce”).
                                          The company name needs to follow the
                                          feature.
                                    - type: text
                                      data: >-
                                        ### App Logo

                                        Your primary app logo should be 350 x
                                        130px (or larger at this ratio) with a
                                        white background and dark branding in
                                        the foreground. The logo should only
                                        include branding, no taglines necessary.


                                        ### Price

                                        Select one of our pre-formatted pricing
                                        options to call out your app’s starting
                                        price. If you offer a forever-free plan,
                                        choose the “Free” option. If your app
                                        does not fit one of our options, specify
                                        your details in a few words in the
                                        “Other” selection.
                                    - type: callout
                                      data:
                                        body: >-
                                          If you need to specify more detail on
                                          your pricing options, save it for your
                                          app description.
                                    - type: text
                                      data: >-
                                        ### App Summary

                                        A short tagline description of your app
                                        that will be used on your app card in
                                        category and search results within the
                                        Marketplace. 128 characters max.


                                        ### App Icon

                                        Your app icon will be included on the
                                        main app detail page and the sidebar in
                                        the BigCommerce control panel once the
                                        app is installed. This should be a
                                        square 200 x 200px image.


                                        ### Category

                                        Choose the most appropriate category for
                                        your app. Take a look at the live
                                        [Marketplace](https://www.bigcommerce.com/apps/)
                                        for an idea of where solutions are
                                        currently assigned to help decide the
                                        right category. The category selection
                                        will also be a search attribute for your
                                        listing. BigCommerce will review your
                                        category assignment and may
                                        re-categorize your listing prior to
                                        launch. One category maximum.
                                - title: Details
                                  blocks:
                                    - type: image
                                      data: >-
                                        //s3.amazonaws.com/user-content.stoplight.io/6012/1536260365610
                                    - type: text
                                      data: >-
                                        ### App Details

                                        A more in-depth value proposition for
                                        your listing, including how your
                                        solution works, why your solution stands
                                        out in its category, and why a merchant
                                        should choose you over other
                                        competitors. Avoid using fluff or
                                        buzzwords, as this field will not be
                                        indexed for search. 200 words max
                                        recommended.


                                        ### Videos

                                        Include videos that highlight the
                                        purpose and value of your solution.
                                        Select the video hosting platform
                                        (YouTube or Vimeo) and enter the video
                                        ID.


                                        #### Video Best Practices


                                        **YouTube**


                                        Turn off ads for any videos you've
                                        already uploaded. 


                                        1. Sign in to YouTube.


                                        2. In the top right, click your account
                                        icon > Creator Studio.


                                        3. On the left, select Video Manager.


                                        4. Select the video(s) where you want to
                                        turn ads off.


                                        5. Click Actions > More actions >
                                        Monetization.


                                        6. Select Off.


                                        7. Click Submit.


                                        **Vimeo**


                                        Per Vimeo’s guidelines, businesses may
                                        not use Basic or Plus accounts to host
                                        videos. If you want to upload commercial
                                        videos, you must use Vimeo PRO or
                                        Business. Commercial content includes:


                                        Videos promoting or representing a
                                        for-profit business or brand 

                                        Videos containing any form of
                                        advertising 

                                        Videos hosted on behalf of a business
                                        (i.e., uploaded to Vimeo and embedded on
                                        your company’s website) 

                                        Product demos and tutorials


                                        *Note:* Ads appear to viewers based on
                                        their level of Vimeo membership - not
                                        yours. Basic and non-logged in viewers
                                        may see ad banners below the video
                                        player.


                                        ### Case Studies

                                        These can either be “Thought Leadership”
                                        case studies and/or traditional case
                                        studies that demonstrate how BigCommerce
                                        merchants have benefited from using your
                                        solution with their business. Use the +
                                        ​icon to add a case study, and the x
                                        ​icon to remove. Four case studies
                                        maximum.
                                    - type: callout
                                      data:
                                        type: warning
                                        body: >-
                                          Case studies that include competitor
                                          platforms are not allowed and will be
                                          removed. Partners will be required to
                                          repurpose general case studies, remove
                                          competitor platform mentions, and
                                          republish the asset accordingly.
                                    - type: text
                                      data: >-
                                        ### Features

                                        Use these fields to enumerate the major
                                        features your platform or solution has
                                        to offer. Include a brief title for each
                                        feature, and a description of the
                                        feature to accompany it. The feature
                                        title will be search indexed in the
                                        Marketplace, so be specific with your
                                        feature names and include major
                                        functions potential users will search
                                        for. Use the + icon to add a feature,
                                        and the x icon to remove. Utilize the
                                        rich text editing of these fields to
                                        bold, underline, or italicize copy as
                                        needed. 

                                        Up to five features can be added.
                                    - type: image
                                      data: >-
                                        //s3.amazonaws.com/user-content.stoplight.io/6012/1536260434551
                                    - type: text
                                      data: >-
                                        ### Legal Terms & Privacy 

                                        Links to your privacy policy and terms
                                        of service. This requirement is in place
                                        due to legal liability and is
                                        non-optional. 


                                        ### International Optimization

                                        Please add the countries for which your
                                        solution is optimized and those which
                                        your solution does not currently
                                        support. 
                                    - type: callout
                                      data:
                                        type: info
                                        body: >-
                                          This feature will not currently be
                                          utilized in the Marketplace, but will be
                                          a part of planned internationalization
                                          updates.
                                    - type: text
                                      data: >-
                                        ### Help Guides

                                        Links to your User and Installation
                                        Guides as a reference for existing users
                                        and prospects.

                                        We now ask that you include links to
                                        your solution’s user installation guide
                                        (PDF, support articles, etc.) and
                                        standard user guide for prospective
                                        users to review before installation. If
                                        you do not submit links, this field will
                                        not be displayed on your listing detail
                                        page, however we highly recommend
                                        including these with your submission.
                                    - type: image
                                      data: >-
                                        //s3.amazonaws.com/user-content.stoplight.io/6012/1536260486010
                                    - type: text
                                      data: >-
                                        ### App Screenshot

                                        Add screenshots of your solution’s
                                        functionality or user interface as it
                                        appears when integrated with BigCommerce
                                        so users know what to expect.


                                        ### Alternate Logo

                                        Your alternate logo will be used if your
                                        app is featured on the homepage carousel
                                        of the Marketplace. This image should be
                                        259 x 158px (or larger at this ratio)
                                        with a dark background and white or
                                        light branding in the foreground. The
                                        logo should only include branding, no
                                        taglines necessary.
                                - title: Technical
                                  blocks:
                                    - type: image
                                      data: >-
                                        //s3.amazonaws.com/user-content.stoplight.io/6012/1536260547856
                                    - type: text
                                      data: >-
                                        ### Multiple Users


                                        By default, your app will only be
                                        accessible to the store owner (i.e., the
                                        user who created the store). Optionally,
                                        you can allow your app to be accessible
                                        to other store users. Consider the
                                        following before enabling [multi-user
                                        support](https://developer.bigcommerce.com/api/#multi-user-support):


                                        -   Once you enable multi-user support,
                                        a store admin will still need to grant
                                        access to other users from within the
                                        store control panel. For each user
                                        account, there are settings that grant
                                        access to specific apps.
                                            
                                        -   Your app should be aware that when
                                        it receives the [Load
                                        Callback](https://developer.bigcommerce.com/api/#load-request-and-response),
                                        the user information passed in [might
                                        not be the store
                                        owner’s](https://developer.bigcommerce.com/api/#about-the-load-request).
                                        You’ll need to determine how to respond
                                        if you see a different user. For
                                        example, you may want to provision a new
                                        user account in order to personalize the
                                        experience.
                                            
                                        -   You can optionally specify a [Remove
                                        User Callback
                                        URI](https://developer.bigcommerce.com/api/#about-the-remove-user-request)
                                        to receive a callback when a store admin
                                        revokes a user’s access.
                                            
                                        ### App Type


                                        Select the type of app. We recommend
                                        [Single Click
                                        Apps](/api#single-click-apps) although
                                        some qualify to [Connector
                                        Apps.](/api#connector-and-other-oauth-apps)


                                        ### Callback URLS


                                        You must have an [Auth Callback
                                        URI](https://developer.bigcommerce.com/api/#app-installation-and-update-sequence)
                                        and a [Load Callback
                                        URI](https://developer.bigcommerce.com/api/#load-request-and-response)
                                        to register your app.


                                        ##### Public URIs Required before
                                        Submission


                                        Because the Auth Callback URI and Load
                                        Callback URI requests originate from the
                                        browser and not from BigCommerce, you
                                        can use non–publicly-available URIs and
                                        a self-signed certificate for a quick
                                        start. However, you must switch to – and
                                        test your app with – a publicly
                                        available Auth Callback URI and Load
                                        Callback URI before submitting your app
                                        for consideration in the App
                                        Marketplace.


                                        If you want to receive a callback when
                                        the store owner uninstalls your app, you
                                        can provide an [Uninstall Callback
                                        URI](https://developer.bigcommerce.com/api/#uninstall-request-optional).
                                    - type: image
                                      data: >-
                                        //s3.amazonaws.com/user-content.stoplight.io/6012/1536260600336
                                    - type: text
                                      data: >-
                                        ### OAuth Scopes

                                        If you know the [OAuth
                                        scopes](/api#oauth-scopes) that your app
                                        requires, you should select these. If
                                        you do not yet know the scopes that you
                                        need, you can just request minimal
                                        permissions (such as Information:
                                        Read-Only) to get started. However, once
                                        you determine the scopes you need, you
                                        must:

                                        - Modify the scopes of your app in My
                                        Apps and save the changes.

                                        - Obtain the new OAuth token during the
                                        [App Installation or Update
                                        flow](https://developer.bigcommerce.com/api/#app-installation-and-update-sequence).

                                        - Retest your app to make sure it still
                                        functions properly with the new token.
                                    - type: image
                                      data: >-
                                        //s3.amazonaws.com/user-content.stoplight.io/6012/1536260650757
                                    - type: text
                                      data: >-
                                        Add in any instructions needed to test
                                        the app thoroughly. 
                                - title: Review
                                  blocks:
                                    - type: image
                                      data: >-
                                        //s3.amazonaws.com/user-content.stoplight.io/6012/1536260677950
                                    - type: text
                                      data: >-
                                        Review the information added before
                                        submitting the app. Look over this page
                                        carefully, once the app is submitted, if
                                        it is rejected there will be another fee
                                        for submission.
                                - title: Preview
                                  blocks:
                                    - type: image
                                      data: >-
                                        //s3.amazonaws.com/user-content.stoplight.io/6012/1536261272003
                                    - type: text
                                      data: >-
                                        This is an approximation of what the
                                        app’s page will look like in the
                                        BigCommerce Marketplace.
                                - title: Payment & Submission
                                  blocks:
                                    - type: image
                                      data: >-
                                        //s3.amazonaws.com/user-content.stoplight.io/6012/1536261347648
                                    - type: text
                                      data: >-
                                        At this point you make sure the
                                        information has been filled out
                                        completely and the app has been
                                        thoroughly tested before submitting for
                                        review. Updates to the App will not
                                        require the submission fee again. 
              - title: Building Apps With BigCommerce
                route:
                  path: /building-apps-bigcommerce
                data:
                  children:
                    - title: Apps Quickstart
                      route:
                        path: /apps-quickstart
                      data:
                        blocks:
                          - type: text
                            data: '# App Quickstart'
                          - type: text
                            data: >-
                              The following procedure takes you through the
                              minimum number of steps to successfully register
                              your app and get your Client Secret and Client ID.


                              1. Log in at Developer Portal’s top right.

                              2. In the resulting login page, provide your
                              sandbox store credentials.
                          - type: callout
                            data:
                              body: >-
                                These must be the credentials of the owner of
                                the store where you plan to install your draft
                                app.
                          - type: text
                            data: >-
                              3. Click My Apps.

                              4. Click Create an app.

                              5. In the Create an App dialog, type a name for
                              your app.

                              6. Click Next.

                              7. Click Next again.

                              8. Click Next one more time.

                              9. In the Auth Callback URL box, type your Auth
                              Callback URI.

                              10. In the Load Callback URL box, type your Load
                              Callback URI.

                              11. In the Uninstall Callback URI box, provide
                              your Uninstall Callback URI if you have one.

                              12. If you want to support multiple users: In the
                              Supported Features area, select Multiple Users;
                              and in the Remove User Callback URI box, provide a
                              Remove User Callback URI.

                              13. Select the OAuth scopes that your app
                              requires. If you do not yet know, select minimal
                              scopes, such as Information: Read-Only.

                              14. Click Update & Close.

                              15. Back in My Apps, hover over your app.

                              16. Click View Client ID.

                              17. Copy the Client ID and Client Secret values
                              from the dialog, and paste them into a safe and
                              secure place.
                    - title: Types of Apps
                      route:
                        path: /types-of-apps
                      data:
                        blocks:
                          - type: text
                            data: >-
                              ## Single Click Apps


                              Single-Click Apps are listed in our App
                              Marketplace and are made available for
                              installation on all BigCommerce stores. The
                              “single-click” app flow does not mean users
                              install the app in a single click, but instead,
                              the app does not require the customer to install
                              OAuth credentials themselves or configure any
                              settings for a third party service. 

                              To put an app on the Marketplace, you must first
                              be a BigCommerce partner and have your app
                              approved through the App Submission Process. After
                              becoming a partner and having the app approved you
                              have the option of charging merchants to use the
                              app. 


                              For a Single-Click App, you will need a Client ID
                              and Client Secret from the Developer Portal.

                              An OAuth token is obtained in the [single-click
                              app authentication flow. ](http://)
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Private Apps


                              In some cases, you might want to create an API
                              Account in your store’s control panel, as the
                              fastest way to establish an API connection to an
                              individual store and to start running requests. 


                              Use Cases:

                              - You are not creating an application for
                              distribution in the BigCommerce App Marketplace.

                              - You are testing your app before submission, and
                              it doesn’t need to be distributed to other stores.


                              For Private Apps you need Client ID and Client
                              Secret from the [Developer Portal](http://). Also
                              a OAuth token from the store’s [control
                              panel](http://) or you can request a token during
                              the installation flow. 
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Hidden Marketplace Apps


                              [Approved partners](http://) have the option of
                              uploading “hidden” apps to the App Marketplace. A
                              hidden app is a published app that does not show
                              up in the public BigCommerce marketplace. To
                              create a hidden app you need to be a BigCommerce
                              Partner. 

                              Use Cases:

                              A partner is beta-testing an integration before a
                              full Marketplace launch.

                              A BigCommerce user with several stores wants to
                              install a custom app on all of them. Submitting a
                              hidden app offers a streamlined alternative to
                              creating a separate draft or test apps for each
                              store.

                              To have an app hidden, please contact <a
                              href="mailto:appstore@bigcommerce.com">appstore@bigcommerce.com</a>.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Scripts


                              You can write a script to test an endpoint, check
                              small portions of app code you are writing, or to
                              create an application that will not be distributed
                              in the BigCommerce Marketplace. Scripts do not
                              have a user interface. To get started with writing
                              scripts all you need is an API key from the
                              store’s Control Panel. Learn more about [creating
                              your first request](http://) with the BigCommerce
                              API. 
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Connector and Other OAuth Apps


                              Some apps qualify to be listed in the BigCommerce
                              App Marketplace as “Connector” apps. These apps
                              use manual OAuth token creation instead of the
                              Single-Click App flow.

                              While we always recommend and prefer the
                              Single-Click App flow’s programmatic OAuth
                              exchange, certain use cases might not be
                              compatible.


                              Use Cases:

                              - Customized integrations that vary per store.

                              - Integrations that do not provide any content for
                              an iframe.

                              - Apps that do not provide Web services for OAuth
                              exchange. (For example: offline sync apps.)

                              - Apps that do not provide Web or cloud-hosted
                              components for a dashboard.
                          - type: callout
                            data:
                              body: >-
                                Manual OAuth tokens require the store owner to
                                create an API Token in the Control Panel and
                                then pass those values into the app manually.
                                The single click installation process is
                                preferred since it does not require this step.
                          - type: text
                            data: >-
                              To create a Connector app that uses manual OAuth
                              token creation, make the following selections on
                              the My Apps Create/Edit flow’s 


                              Technical tab:

                              1. Set the App Type option to Connector.

                              2. Enter your app’s Signup URL. This is the URL
                              where a user would begin to configure the
                              connection between your service and the
                              BigCommerce store.

                              4. Under OAuth scopes, select the scopes that your
                              app requires for BigCommerce review only. Later,
                              you will need to instruct store users to create a
                              token with the production scopes your app needs.


                              BigCommerce must review and approve your Connector
                              app proposal before we will accept the app’s
                              submission to the Marketplace. 


                              If you’re interested in submitting your
                              integration as a Connector app, please contact out
                              to <a
                              href="mailto:appstore@bigcommerce.com">appstore@bigcommerce.com</a>.
                              to discuss your plan.
                    - title: Building Apps
                      route:
                        path: /building-apps
                      data:
                        blocks:
                          - type: text
                            data: >-
                              ## Request Headers


                              Public API requests are authenticated by the
                              following HTTP headers:


                              ```

                              X-Auth-Client: The Client ID of the request app. 

                              X-Auth-Token: Access token authorizing the app the
                              access resources on behalf of a user

                              ```


                              In addition, while not all resources require the
                              Accept and Content-Type headers, many do. To
                              ensure that your calls succeed, always include
                              these headers.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Managing Users’ Session Timeouts


                              We recommend that you add BigCommerce’s JavaScript
                              SDK to your Single-Click Apps, to protect your
                              apps’ users from getting logged out of the
                              BigCommerce control panel after a period of
                              idleness. To include our SDK, add this script tag
                              to your Single-Click App:

                              `<script
                              src="//cdn.bigcommerce.com/jssdk/bc-sdk.js">`



                              Optionally, you can pass a logout callback
                              function within the initialization call:


                              ```

                              Bigcommerce.init({
                                    onLogout: callback
                              });

                              ```



                              This callback function will run when the user
                              explicitly logs out of the BigCommerce control
                              panel, or is automatically logged out. The
                              callback will allow your app to respond to this
                              logout.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## App Installation and Update Sequence


                              The purpose of the App Installation sequence is to
                              obtain an Oauth token for the store installing the
                              app, using the Client ID and Secret from Dev
                              Tools.


                              A user at a store’s control panel kicks off the
                              installation or update sequence by clicking the
                              “Install” button from your app details page, or by
                              clicking an installed app to update its scopes.
                              BigCommerce redirects the user to the Auth
                              Callback URI provided during app registration. The
                              Auth Callback URI must be publicly available,
                              fully qualified, and served over TLS.
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1536263813949
                            header:
                              title: App Installation Sequence
                          - type: text
                            data: >-
                              ### Handling Requests Securely


                              The request comes from the client browser, rather
                              than directly from BigCommerce. This allows you to
                              use a non-publicly-available Auth Callback URI
                              while testing your app.

                              For security, Auth and Load callback should be
                              handled server-side. If you are building a
                              client-side application (such as an AngularJS
                              Single Page App), you should handle Auth and Load
                              callbacks outside that application. Use a separate
                              service that accepts the Auth and Load callback
                              requests, generates tokens, validates requests,
                              and then redirects the user to your client-side
                              app’s entry point.
                          - type: text
                            data: >-
                              ## Receiving the GET Request

                              The GET request to your Auth Callback URI contains
                              a temporary code that you can exchange for a
                              permanent OAuth token. It also includes a unique
                              value that identifies the store installing or
                              updating your app, as well as authorized scopes.


                              The following table details the full list of
                              parameters and values included in the GET request
                              from BigCommerce to your Auth Callback URI.
                              BigCommerce passes these within the URI itself as
                              query parameters.
                          - type: text
                            data: >-
                              | Parameter | Description |

                              | --- | --- |

                              | code | Temporary code to exchange for a
                              permanent OAuth token. See [Making the POST
                              request]() below for more information about this
                              exchange. |

                              | scope | List of scopes authorized by the user.
                              As a best practice, your app should validate this
                              list to ensure that it matches the app&#39;s
                              needs, and fail if it does not. However, at this
                              time, the user does not have any opportunity to
                              pick and choose between scopes. The dialog
                              presented to the user requires the user to approve
                              all scopes or none. |

                              | context | The store hash: a unique value that
                              identifies the store on which a logged-in user has
                              clicked to install or your app. BigCommerce passes
                              this along with a context path, as follows:
                              `stores/{store_hash}`. Save the store hash value,
                              because you will need to pass it in all your
                              requests to the Stores API. |
                          - type: text
                            data: >-
                              ### Example – Initial Installation


                              This example initiates the token exchange, with a
                              requested scope of store_v2_orders:


                              ```

                              GET
                              /auth?code=qr6h3thvbvag2ffq&scope=store_v2_orders&context=stores/g5cd38
                              HTTP/1.1  

                              Host: app.example.com

                              ```



                              Example – Updating Scopes

                              The following example requests a scope of
                              store_v2_products, in addition to the initially
                              requested scope of store_v2_orders:


                              ```

                              GET
                              /auth?code=qr6h3thvbvag2ffq&scope=store_v2_orders+store_v2_products&context=stores/g5cd38
                              HTTP/1.1  

                              Host: app.example.com

                              ```
                          - type: callout
                            data:
                              body: >-
                                Note that when your app receives a new token,
                                any previously issued token is invalidated.
                          - type: text
                            data: >-
                              ## Responding to the GET Request


                              Upon receiving the GET request at your Auth
                              Callback URI, your app should return some HTML to
                              the merchant browser. BigCommerce renders this in
                              an iframe inside of the control panel. It could be
                              a form that collects further information from the
                              user, or you could redirect the user to your app’s
                              main page. If you do not pass back some HTML, the
                              user will be left looking at a blank screen. Such
                              an app would not be accepted into the App
                              Marketplace.
                          - type: text
                            data: >-
                              ## Making the POST Request


                              The POST request’s primary purpose is to exchange
                              the temporary access code for a permanent OAuth
                              token. However, your app must pass a number of
                              additional values to accomplish the exchange. Pass
                              the parameters and their values inside the request
                              body, using query parameters and URL-encoding. To
                              achieve this, you must include the following HTTP
                              headers:


                              ```

                              Content-Type: application/json

                              ```

                              Make the POST request to the following address:
                              `https://login.bigcommerce.com/oauth2/token`.


                              ### Initial Installation


                              During initial installation, upon receiving the
                              POST, BigCommerce marks the status of your app as
                              “Installed”, removes the progress-indicator
                              overlay, and places your app icon in the control
                              panel’s left-hand navigation. With the
                              progress-indicator overlay removed, the user can
                              interact with the HTML that you returned in your
                              GET response.
                          - type: callout
                            data:
                              body: >-
                                During app updates, upon receiving the POST,
                                BigCommerce removes the update prompt from the
                                control panel.
                          - type: text
                            data: >-
                              ### Parameters


                              Include values for each of the following
                              parameters.


                              | Parameter | Description |

                              | --- | --- |

                              | client_id | The Client ID for your app, obtained
                              during [registration](#app-registration). |

                              | client_secret | The Client Secret for your app,
                              obtained during [registration](#app-registration).
                              |

                              | code | Temporary access code received in the
                              [GET request](#receiving-the-get-request)
                              discussed above. |

                              | scope | List of OAuth scopes received in the
                              [GET request](#receiving-the-get-request)
                              discussed above. |

                              | grant_type | Always use the following:
                              authorization_code. |

                              | redirect_uri | Must be identical to your
                              registered Auth Callback URI. |

                              | context | The store hash received in the [GET
                              request](#receiving-the-get-request), in the
                              format: `stores/{_store_hash_}` |


                              ### Examples – Initial Installation
                          - type: code
                            data: >-
                              POST /oauth2/token HTTP/1.1

                              Host: login.bigcommerce.com

                              Content-Type: application/x-www-form-urlencoded

                              Content-Length: 186

                              client_id={CLIENT_ID}&client_secret={CLIENT_SECRET}&code=qr6h3thvbvag2ffq&scope=store_v2_orders&grant_type=authorization_code&redirect_uri=https://app.example.com/oauth&context=stores/{STORE_HASH}
                            header:
                              title: HTTP
                            config:
                              mode: http
                          - type: code
                            data: >-
                              use Bigcommerce\Api\Connection;

                              $tokenUrl =
                              "https://login.bigcommerce.com/oauth2/token";

                              $connection = new Connection();

                              $connection->useUrlencoded();

                              $response = $connection->post($tokenUrl, array(
                                  "client_id" => "CLIENT_ID",
                                  "client_secret" => "CLIENT_SECRET",
                                  "redirect_uri" => "https://app.example.com/oauth",
                                  "grant_type" => "authorization_code",
                                  "code" => $request->get("code"),
                                  "scope" => $request->get("scope"),
                                  "context" => $request->get("context"),
                              ));

                              $token = $response->access_token;
                            header:
                              title: PHP
                            config:
                              mode: php
                          - type: text
                            data: >-
                              ### Examples – Updating Scopes


                              The following examples request a scope of
                              store_v2_products, in addition to the initially
                              requested scope of store_v2_orders:
                          - type: code
                            data: >-
                              POST /oauth2/token HTTP/1.1

                              Host: login.bigcommerce.com

                              Content-Type: application/x-www-form-urlencoded

                              Content-Length: 186

                              client_id={CLIENT_ID}&client_secret={CLIENT_SECRET}&scope=store_v2_orders+store_v2_products&grant_type=authorization_code&redirect_uri=https://app.example.com/oauth&context=stores/{STORE_HASH}
                            header:
                              title: HTTP
                            config:
                              mode: http
                          - type: code
                            data: >-
                              use Bigcommerce\Api\Connection;

                              $tokenUrl =
                              "https://login.bigcommerce.com/oauth2/token";

                              $connection = new Connection();

                              $connection->useUrlencoded();

                              $response = $connection->post($tokenUrl, array(
                                  "client_id" => "CLIENT_ID",
                                  "client_secret" => "CLIENT_SECRET",
                                  "redirect_uri" => "https://app.example.com/oauth",
                                  "grant_type" => "authorization_code",
                                  "code" => $request->get("code"),
                                  "scope" => $request->get("scope"),
                                  "context" => $request->get("context"),
                              ));


                              $token = $response->access_token;
                            header:
                              title: PHP
                            config:
                              mode: php
                          - type: text
                            data: >-
                              ## Receiving the POST Response


                              The POST response will include a JSON object
                              containing the permanent OAuth token, user
                              information, and other values. Upon receiving the
                              permanent OAuth token, store it securely. You
                              should also store the user and store hash values,
                              to identify the user and store at load and
                              uninstall. The following sections detail the
                              contents of the JSON body.
                          - type: text
                            data: >-
                              ### JSON Values

                              | Name | Data Type | Value Description |

                              | --- | --- | --- |

                              | access_token | string | The permanent OAuth
                              token that your app can use to make requests to
                              the Stores API on behalf of the user. Store this
                              value securely. |

                              | scope | string | List of authorization scopes. |

                              | id | integer | Unique identifier for the user.
                              Store this value to identify the user at load and
                              uninstall. |

                              | email | string | The user’s email address. Store
                              this value to identify the user at load and
                              uninstall. |

                              | context | string | The store hash, as well as a
                              base path: `stores/{_store_hash_}` |
                          - type: code
                            data: |-
                              {
                                "access_token": "ACCESS_TOKEN",
                                "scope": "store_v2_orders",
                                "user": {
                                  "id": 24654,
                                  "email": "merchant@mybigcommerce.com"
                                },
                                "context": "stores/STORE_HASH"
                              }
                            header:
                              title: Initial Installation
                              subtitle: JSON
                            config:
                              mode: json
                          - type: text
                            data: >-
                              Update requests will refresh the payload’s
                              access_token and scope values. Here again, the
                              following example requests a scope of
                              store_v2_products, in addition to the initially
                              requested scope of store_v2_orders:
                          - type: code
                            data: |-
                              {
                                "access_token": "ACCESS_TOKEN",
                                "scope": "store_v2_orders store_v2_products",
                                "user": {
                                  "id": 24654,
                                  "email": "merchant@mybigcommerce.com"
                                },
                                "context": "stores/STORE_HASH"
                              }
                            header:
                              subtitle: JSON
                              title: Updating Scopes
                            config:
                              mode: json
                          - type: text
                            data: "## Load, Uninstall, and User Removal Requests\nIn addition to the Auth Callback URI, the following URI’s are required for BigCommerce Apps:\n\n| Name | Required? | Event Discussion |\n| --- | --- | --- |\n| Load Callback URI | Yes | Called when the store owner or user clicks to load your app. |\n| Uninstall Callback URI | No | Called when the store owner clicks to uninstall your app. |\n| Remove User Callback URI | No | Called when the store admin revokes a user&#39;s access to your app. |\n\nEach BigCommerce request is a GET request and includes a signed payload that allows your app to:\n- Verify that the request came from BigCommerce.\n- Identify the store.\n- Identify the store owner or user.\n\n### Load Request and Response\n\nOnce your app has been installed, the store owner or user can click its icon in the control panel to launch it. This causes BigCommerce to send a GET request to the Load Callback URI that you provided. In a production environment, the Load Callback URI must be publicly available, fully qualified, and served over TLS/SSL.\n\n```\nThe GET request contains a signed payload, as shown below.\nGET /load?signed_payload=hw9fhkx2ureq.t73sk8y80jx9 HTTP/1.1\nHost: app.example.com\n```\n\n\nUpon receiving a GET request to the Load Callback URI, your app needs to [process the signed payload](). After processing the payload, your app returns its user interface as HTML. BigCommerce renders this inside of an iframe. Please see [User Interface Constraints]() for important information about your app’s user interface.\n\n### Uninstall Request (Optional)\n\nStore owners have the option to uninstall any app at any time. When a store owner uninstalls an app, the app’s OAuth token is revoked and the app cannot make requests to the Stores API on the store’s behalf anymore.\n\nYou do not need to provide an Uninstall Callback URI. The lack of an Uninstall Callback URI does not prevent uninstallation. Instead, the Uninstall Callback URI allows you to track store owners who uninstall your app and to run cleanup operations, such as removing the store’s user accounts from your system.\nShould you choose to avail of this option and provide an Uninstall Callback URI, please note that it must be publicly available, fully qualified, and served over TLS/SSL. If provided, BigCommerce will send a GET request to your Uninstall Callback URI when a store owner clicks to uninstall your app.\n\nExample of a GET Request sent to the Uninstall Callback URI\n```\nGET /uninstall?signed_payload=hw9fhkx2ureq.t73sk8y80jx9 HTTP/1.1\n\tHost: app.example.com\n```\nUpon receiving the GET request, your app will need to process the signed payload."
                          - type: callout
                            data:
                              body: >-
                                Any HTML that you return in your response will
                                not be rendered.
                          - type: text
                            data: >-
                              ### Remove User Request (Optional)


                              If you have not enabled multi-user support, you
                              will not provide a Remove User Callback URI and
                              can ignore this section. If you enable multi-user
                              support, you can optionally specify a Remove User
                              Callback URI. It must be fully qualified, publicly
                              available, and served over TLS/SSL. BigCommerce
                              will send a GETrequest to your Remove User
                              Callback URI when a store admin revokes a user’s
                              access to your app. 


                              Example of a Get Request sent to the Remove User
                              URI


                              ```

                              GET
                              /remove-user?signed_payload=hw9fhkx2ureq.t73sk8y80jx9
                              HTTP/1.1

                              Host: app.example.com

                              ```


                              Upon receiving the GET request, your app will need
                              to process the signed payload.
                          - type: callout
                            data:
                              body: >-
                                Any HTML that you return in your response will
                                not be rendered.
                          - type: text
                            data: >-
                              ## Processing the Signed Payload


                              Processing the signed payload involves splitting
                              and decoding it verifying the HMAC signature, and
                              processing the JSON object.


                              ### Splitting and Decoding the Signed Payload


                              The signed payload is a string containing a
                              base64url-encoded JSON string and a
                              base64url-encoded HMAC signature. The parts are
                              delimited by the .character:


                              ```

                              encoded_json_string.encoded_hmac_signature

                              ```



                              To decode the signed payload, complete the
                              following steps:

                              * Split signed_payload into its two parts at the
                              `.` delimiter.

                              * Decode encoded_json_string using base64url.

                              * Convert the decoded JSON string into an object.
                              See Processing the JSON object for more about this
                              object.

                              * Decode encoded_hmac_signature using base64url.

                              * Use your client secret to verify the signature.
                              See the next section for more details.


                              ### Verifying the HMAC Signature


                              To verify the payload, you need to sign the
                              payload using your client secret, and confirm that
                              it matches the signature that was sent in the
                              request.
                          - type: callout
                            data:
                              body: >-
                                To limit the vulnerability of your app to timing
                                attacks, we recommend using a constant
                                time-string comparison function, rather than the
                                equality operator, to check that the signatures
                                match.
                          - type: code
                            data: |-
                              function verifySignedRequest($signedRequest)
                              {
                                  list($encodedData, $encodedSignature) = explode('.', $signedRequest, 2);

                                  // decode the data
                                  $signature = base64_decode($encodedSignature);
                                      $jsonStr = base64_decode($encodedData);
                                  $data = json_decode($jsonStr, true);

                                  // confirm the signature
                                  $expectedSignature = hash_hmac('sha256', $jsonStr, $clientSecret(), $raw = false);
                                  if (!hash_equals($expectedSignature, $signature)) {
                                      error_log('Bad signed request from BigCommerce!');
                                      return null;
                                  }
                                  return $data;
                              }
                            header:
                              title: verifySignedRequest
                            config:
                              mode: php
                          - type: callout
                            data:
                              body: >-
                                !hash_equals is available in PHP 5.6 and later.
                                If you are running an older version of PHP, pull
                                in a compatibility library such as the
                                following:
                                https://packagist.org/packages/realityking/hash_equals.
                                BigCommerce’s sample app
                                hello-world-app-php-silex app does this
                                automatically.
                          - type: code
                            data: |
                              require "base64"
                              require "openssl"

                              def verify(signed_payload, client_secret)
                                message_parts = signed_payload.split(".")

                                encoded_json_payload = message_parts[0]
                                encoded_hmac_signature = message_parts[1]

                                payload_object = Base64.strict_decode(encoded_json_payload)
                                provided_signature = Base64.strict_decode(encoded_hmac_signature)

                                expected_signature = OpenSSL::HMAC::hexdigest("sha256", client_secret, payload_object)

                                return false unless secure_compare(expected_signature, provided_signature)

                                JSON.parse(payload_object)
                              end

                              def secure_compare(a, b)
                                return false if a.blank? || b.blank? || a.bytesize != b.bytesize
                                l = a.unpack "C#{a.bytesize}"

                                res = 0
                                b.each_byte { |byte| res |= byte ^ l.shift }
                                res == 0
                              end
                            header:
                              title: verify()
                            config:
                              mode: ruby
                          - type: text
                            data: >-
                              ### Processing the JSON Object


                              The JSON object embedded in the signed_payload
                              contains information about the BigCommerce store
                              and the store owner or user.


                              ### Identifying the Store

                              You should use the store information endpoint to
                              identify the store to which the request pertains.


                              ### Interpreting the User Information


                              Interpreting the user information varies as
                              follows:


                              | Request type | Multiple users enabled | Multiple
                              users not enabled |

                              | --- | --- | --- |

                              | Load | Compare the user information to see if it
                              matches that of the store owner, received at the
                              time of [app
                              installation](#app-installation-and-update-sequence)
                              or that of an existing user. If the user
                              information does not match either of these, then
                              it represents a new user that you should add to
                              your database or other storage. | The information
                              should match that of the store owner, received at
                              the time of [app
                              installation](#app-installation-and-update-sequence).
                              |

                              | Uninstall | The user information should match
                              that of the store owner. Only the store owner can
                              uninstall your app. | Should match the store
                              owner. |

                              | Remove user | The user information should match
                              one of the users that you have stored. After
                              locating the stored user, delete it from your
                              database or other storage. | N/A |


                              ### JSON Values


                              | Name | Data Type | Value Description |

                              | --- | --- | --- |

                              | user.id | integer | Unique identifier for the
                              user who initiated the callback. |

                              | user.email | string | Email address of the user
                              who initiated the callback. |

                              | owner.id | integer | Unique identifier for the
                              user listed as the store owner. |

                              | owner.email | string | Email address of the user
                              listed as the store owner. |

                              | context | string | The context value is part of
                              the API path for this store and includes the
                              store_hash. |

                              | store_hash | string |Unique identifier for the
                              store. |

                              | timestamp | float | The time (in Unix time) when
                              the callback was generated.|
                          - type: code
                            data: |-
                              {
                                  "user":
                                       {
                                      "id":9128,
                                      "email":"user@mybigcommerce.com"
                                   },
                                   "owner":
                                        {
                                       "id":9128,
                                       "email":"user@mybigcommerce.com"
                                   },
                                   "context":"stores/z4zn3wo",
                                   "store_hash":"z4zn3wo",
                                   "timestamp":1469823892.9123988
                              }
                            header:
                              title: User Information
                            config:
                              mode: json
                          - type: text
                            data: >-
                              ## Multi-User Support


                              When you register your app with BigCommerce,
                              enabling multi-user support will allow store
                              admins to manually authorize users – other than
                              the store owner – to load the app. 


                              As soon as you enable multi-user support, this
                              affects the control panel of any store that has
                              your app installed. If you already have an app
                              published in the App Marketplace, be aware that
                              this setting takes effect immediately. Therefore,
                              we recommend testing your multi-user support using
                              a separate app that is in draft status.


                              Let your customers know that you’ve enabled this
                              feature. Otherwise, they won’t know that they can
                              start granting access to users.


                              If this is added after the app has launched, then
                              during update the app scope will change and users
                              will be alerted of the new permission request.


                              ### The Control Panel Experience

                              Store admins will be able to adjust user
                              permissions to grant/deny other store users’
                              access to your app. The next time the user logs
                              in, they will see any apps for which they have
                              been granted access. The user can then click on
                              the app icon in the left navigation to load it.

                              Use your draft app and your sandbox store to
                              review this behavior.


                              ### The Load Request

                              Apps with multiple users enabled can expect more
                              than just the store owner’s email and ID in the
                              JSON object sent in the load request. If a load
                              request is sent with information for a user you
                              haven’t seen yet, you should provision the user
                              account and associate it with the store in your
                              database.

                              Because you know the store owner’s email and ID
                              from the App Installation sequence, your app can
                              distinguish store owners from other users. This
                              allows you to provide different user experiences
                              based on the information in the load request. Here
                              is a summary of the two types of users:

                              - Store owner: Can install, uninstall, and load
                              apps.

                              - Users: Cannot install or uninstall apps.
                              Permitted only to load the apps that a store admin
                              has authorized.


                              For further details, please see Load Request and
                              Response.


                              ### The Remove User Request

                              In addition to their ability to add users, store
                              admins can also remove users. This action
                              generates a GET request to the Remove User
                              Callback URI that you provided in My Apps. Your
                              app should delete from its records the user
                              identified in the request.


                              For further information, please see Remove User
                              Request.
                          - type: text
                            data: >-
                              ## External App Installation


                              Apps can be installed from outside the BigCommerce
                              control panel. An example of this would be having
                              an install link on your company’s site that
                              directs the merchant to download your app. 

                              Render Success/Failure Pages

                              Modify your application code to serve either a
                              success or failure page, depending on whether the
                              external installation was successful or
                              unsuccessful.


                              If you skip this step, your application will load
                              in the iframe created by your button. To ensure a
                              good experience for your merchants, we strongly
                              recommend that you return a confirmation page,
                              instead of allowing your application to be loaded
                              in that modal.


                              ### Handling Errors


                              If your application’s installation was initiated
                              and completed through an external link,
                              BigCommerce will send your auth callback endpoint
                              an extra parameter called external_install.

                              If you receive this parameter and there are no
                              errors, call:


                              `https://login.bigcommerce.com/app/<your_app_client_id>/install/succeeded`


                              If there were errors, call:

                              `https://login.bigcommerce.com/app/<your_app_client_id>/install/failed`


                              Below is a sample code snippet of an auth callback
                              that does this:
                          - type: code
                            data: |2-
                                 if params['external_install']
                                      return get 'https://login.bigcommerce.com/app/m8e1mkkmjw2xjinydqz7ie05to1y2nk/install/succeeded'
                                  end

                                  redirect '/'

                              rescue => e
                                  if params['external_install']
                                      return get 'https://login.bigcommerce.com/app/m8e1mkkmjw2xjinydqz7ie05to1y2nk/install/failed'
                                  end
                            header:
                              title: Auth Callback
                          - type: text
                            data: >-
                              Depending on which endpoint you call, we will
                              render one of the following success/failed pages
                              to the modal.
              - title: Webhooks
                route:
                  path: /webhooks
                data:
                  children:
                    - title: About Webhooks
                      route:
                        path: /about-webhooks
                      data:
                        blocks:
                          - type: text
                            data: '# About Webhooks'
                          - type: text
                            data: >-
                              ## What We'll Cover


                              * [Events Available](http://)

                              * [Authentication](#authentication)

                              * [Lightweight Callback
                              Payload](#lightweight-callback-payload)

                              * [Request and Response](#request-and-response)

                              * [Recieving the
                              Callback](#receiving-the-callback)

                              * [Responding to the
                              Callback](#respond-to-webhook-callbacks)

                              * [Callback Retry
                              Mechanism](#callback-retry-mechanism)

                              * [Webhook Security](#webhook-security)

                              * [Tools for
                              Debugging](#tools-for-debugging-and-testing-webhooks)

                              * [All Available Webhooks]()
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              Webhooks allow app developers to be notified, in
                              near real-time, when specific events occur on a
                              BigCommerce store. For example, your app may need
                              to perform an action when a new order is created,
                              a product’s inventory decreases, or an item is
                              added to a shopper’s cart. When a subscribed event
                              occurs on a store, BigCommerce will POST a payload
                              to your app’s callback URI so your app can take
                              some action based on that event.
                          - type: callout
                            data:
                              type: warning
                              title: >-
                                Multiple Events Are Triggered during Bulk Data
                                Imports
                              body: >-
                                Bulk data imports will trigger the relevant
                                events for every record affected. For example,
                                if you have a hook on `store/product/created`,
                                when the merchant imports 2,000 products, we
                                will send 2,000 individual callback events.
                            header: {}
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Authentication


                              Webhooks are authenticated using Oauth and support
                              the JSON media type. Basic auth and XML are not
                              supported.


                              Before you  can begin to send and receive
                              requests, you must have the following:


                              * A store: You can get a sandbox store by joining
                              the Partner Program.

                              * OAuth Client ID: Obtained by creating an API
                              Account.

                              * OAuth token: Obtained by creating an API
                              Account.

                              * Valid TLS/SSL configuration: Verify your app
                              server’s setup at the following site:
                              [https://sslcheck.globalsign.com](https://sslcheck.globalsign.com)
                            header:
                              anchor: authentication
                          - type: callout
                            data:
                              type: error
                              title: Connection Breakers
                              body: >-
                                Any one of the following conditions on your app
                                server will cause a connection failure:

                                * Hostname/DNS mismatch.

                                * Self-signed certificate.

                                * Intermediate certificates not loaded.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Lightweight Callback Payload


                              When a subscribed event occurs, we send a light
                              payload with only minimum details regarding the
                              event that’s been triggered. This gives you
                              maximum flexibility as to how you want to handle
                              the notification in your application. For
                              instance, if you subscribe to the
                              `store/order/statusUpdated` event, we’ll send you
                              the order ID when the status is updated. You might
                              want to handle the notification by fetching the
                              full order details via a request to the Orders
                              resource.


                              An example payload follows:


                              ```

                              {
                               "store_id":11111,
                               "producer":"stores/abcde",
                               "scope":"store/order/statusUpdated",
                               "data":{
                                       "type":"order",
                                       "id":173331
                                      },
                               "hash":"3f9ea420af83450d7ef9f78b08c8af25b2213637"
                               }
                              ```
                            header:
                              anchor: lightweight-callback-payload
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Request and Response


                              *Never worked with webhooks before? Check out the
                              tutorial on creating webhooks.*


                              All webhooks requests must include the following
                              in their HTTP headers:


                              ```
                                   Accept: application/json
                                   Content-Type: application/json
                                   X-Auth-Client: <the OAuth client id>
                                   X-Auth-Token: <the OAuth token>
                              ```
                            header:
                              anchor: request-and-response
                          - type: code
                            data: |-
                              curl -X POST \
                                https://api.bigcommerce.com/stores/store_hash/v2/hooks \
                                -H 'Accept: application/json' \
                                -H 'X-Auth-Client: your-client-id \
                                -H 'X-Auth-Token: your-auth-token \
                                -d '{
                                "scope": "store/cart/lineItem/*",
                                "destination": "https://myapp.herokuapp.com/",
                                "is_active": true
                            header:
                              title: '/POST Webhook '
                              subtitle: >-
                                Request:
                                https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks
                              anchor: post-webhooks
                            config:
                              mode: shell
                          - type: code
                            data: |2-
                                  {
                                      "id": 14270456,
                                      "client_id": "your-client-id",
                                      "store_hash": "your_store_hash",
                                      "scope": "store/cart/lineItem/*",
                                      "destination": "https://779aca97.ngrok.io/webhooks",
                                      "headers": null,
                                      "is_active": true,
                                      "created_at": 1531326542,
                                      "updated_at": 1531337178
                                  }
                            header:
                              title: Response 201 Created
                              subtitle: /POST Webhook
                              anchor: response-post-webhooks
                            config:
                              mode: json
                          - type: text
                            data: "| Name |Description | Type\n|--|--|--|\n| id | A read-only value that uniquely identifies a webhook object. Do not attempt to set this value in a PUT or POST. | integer|\n| client_id | The OAuth client ID that uniquely identifies your application. BigCommerce returns this name-value pair in the JSON body of its responses. | string |\n| store_hash | \tThe hash value that uniquely identifies the store. Your application does not need to set this value via the JSON object; instead, you pass it in the path of your API requests. | string |\n|scope| Value is the event you would like to listen for. See List of Webhook Events for the full list of possibilities. Wild Cards are supported for scope. **(Required)** | string |\n| destination | value is the callback’s fully qualified URI. This should be an endpoint configured on your app server to receive webhook payloads. **(Required)** | string |\n| headers |The headers object contains one or more name-value pairs, both string values. If you choose to include a headers object, BigCommerce will include the name-value pair(s) in the HTTP header of its POST requests to your callback URI at runtime. While this feature could be used for any purpose, one is to use it to set a secret authorization key and check it at runtime. This provides an additional level of assurance that the POST request came from BigCommerce instead of some other party, such as a malicious actor. (Optional) | string |\n|is_active | Value specifies whether a webhook is active or inactive. By default, new webhooks will be set to be inactive and will have a blank value. If you want to create a webhook that should be active initially, you can pass the following name-value pair: \"is_active\": true. (Optional) | boolean |\n| created_at | The time at which the webhook was created.| date-time Unix Epoch|\n| updated_at | The time at which the webhook was last updated. | date-time Unix Epock|"
                          - type: text
                            data: >-
                              An HTTP 201 response indicates that the webhook
                              was set successfully.
                          - type: callout
                            data:
                              type: warning
                              body: >-
                                Following the creation of a webhook, it can take
                                up to one minute for BigCommerce to start
                                sending POST requests to your callback URI.
                              title: One-Minute Timeout
                          - type: code
                            data: |
                              //Response 200 OK

                              [
                                  {
                                      "id": 14270466,
                                      "client_id": "your-client-id",
                                      "store_hash": "your_store_hash",
                                      "scope": "store/product/created",
                                      "destination": "https://779aca97.ngrok.io/webhooks",
                                      "headers": null,
                                      "is_active": true,
                                      "created_at": 1531326542,
                                      "updated_at": 1531337178
                                  },
                                  {
                                      "id": 14270713,
                                      "client_id": "your-client-id",
                                      "store_hash": "your_store_hash",
                                      "scope": "store/product/updated",
                                      "destination": "https://779aca97.ngrok.io/webhooks",
                                      "headers": null,
                                      "is_active": false,
                                      "created_at": 1531338589,
                                      "updated_at": 1531338589
                                  }
                              ]
                            header:
                              title: /GET All Webhooks
                              subtitle: >-
                                Request:
                                https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks
                              anchor: get-all-webhooks
                            config:
                              mode: json
                          - type: code
                            data: |+
                              {
                                  "id": 14270466,
                                  "client_id": "your-client-id",
                                  "store_hash": "your_store_hash",
                                  "scope": "store/product/created",
                                  "destination": "https://779aca97.ngrok.io/webhooks",
                                  "headers": null,
                                  "is_active": false,
                                  "created_at": 1531326542,
                                  "updated_at": 1531337178
                              }

                            header:
                              subtitle: >-
                                To get a single webhook use the `id`.  Request:
                                https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks/id
                              title: /GET a Single Webhook
                              anchor: get-a-single-webhook
                            config:
                              mode: json
                          - type: code
                            data: |
                              {
                               "scope": "store/product/updated",
                               "destination": "https://779aca97.ngrok.io/webhooks",
                               "is_active": false
                              }


                              //Response 200 OK

                              {
                                  "id": 14270466,
                                  "client_id": "ejoftto9hv8xlip01cckcg53v7g3lrl",
                                  "store_hash": "jrah6gmn",
                                  "scope": "store/product/created",
                                  "destination": "https://779aca97.ngrok.io/webhooks",
                                  "headers": null,
                                  "is_active": false,
                                  "created_at": 1531326542,
                                  "updated_at": 1531337178
                              }
                            header:
                              title: /PUT Webhook
                              subtitle: >-
                                Update a webhook using the id. Once the webhook
                                is created all the fields below can be changed
                                via an update request. Request:
                                https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks/id
                              anchor: update-a-webhook
                            config:
                              mode: json
                          - type: code
                            data: |
                              //Response 200 OK
                              {
                                  "id": 14270466,
                                  "client_id": "ejoftto9hv8xlip01cckcg53v7g3lrl",
                                  "store_hash": "jrah6gmn",
                                  "scope": "store/product/created",
                                  "destination": "https://779aca97.ngrok.io/webhooks",
                                  "headers": null,
                                  "is_active": false,
                                  "created_at": 1531326542,
                                  "updated_at": 1531337178
                              }
                            header:
                              title: /DELETE a Wehbook
                              subtitle: >-
                                Request:
                                https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks/id
                            config:
                              mode: json
                          - type: text
                            data: >-
                              There is not a way to delete all webhooks on a
                              store. Run a GET request for the webhook id, then
                              send a request to the delete URI to remove each
                              one. It returns a 200 OK for the response with the
                              deleted hook. When requesting a list of hook, the
                              hook id is not available.


                              If webhooks are no longer being used, either
                              delete them or set `is_active:false`.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Receiving the Callback


                              You’ll need to build an application and configure
                              your server to receive the callback we send when
                              events are triggered. 


                              Need to set up a quick destination URL for
                              testing? See Tools for Debugging and Testing
                              Webhooks.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Respond to Webhook Callbacks


                              You’ll need to build an application and configure
                              your server to receive the callback we send when
                              events are triggered.


                              To acknowledge that you received the webhook
                              without issue, your server should return a 200
                              HTTP status code. Any other information you return
                              in the request headers or request body will be
                              ignored. Any response code outside the 200 range,
                              including 3_xx_ codes, will indicate to us that
                              you did not receive the webhook. When a webhook is
                              not received (for whatever reason), we will retry
                              the callback as described below.


                              Need to set up a quick destination URL for
                              testing? See [Tools for testing
                              webhooks.](http://)
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Callback Retry Mechanism


                              The webhooks service will do its best to deliver
                              events to your callback URI. If your server
                              indicates that the webhook payload has not been
                              received, the dispatch service will take the
                              following actions:

                              If an app server responds to a webhook payload
                              with anything other than a 2_xx_ response, or
                              times out, the app will be blocked for 60 seconds.

                              Webhooks created during that 60-second block will
                              be queued up to send on the next scheduled retry
                              attempt after the block expires, so that webhooks
                              are not lost.


                              The webhook dispatcher will then attempt several
                              retries (at increasing intervals) until the
                              maximum retry limit is reached.


                              ### Retry Intervals


                              * 60 seconds after the most recent failure  

                              * 180 seconds after the most recent failure  

                              * 180 seconds after the most recent failure  

                              * 300 seconds after the most recent failure  

                              * 600 seconds after the most recent failure  

                              * 900 seconds after the most recent failure  

                              * 1800 seconds after the most recent failure  

                              * 3600 seconds after the most recent failure  

                              * 7200 seconds after the most recent failure  

                              * 21600 seconds after the most recent failure  

                              * 50400 seconds after the most recent failure  

                              * 86400 seconds (24 hours) after the most recent
                              failure


                              After the final retry attempt (cumulatively, 48
                              hours after the first delivery attempt), the
                              webhook will automatically be deactivated, and we
                              will send an email to the developer’s email
                              address registered on the subscribing app. You can
                              reactivate the webhook by setting the `is_active`
                              flag back to true via a `/PUT` request to the
                              hooks resource.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Webhook Security

                              To ensure that webhook payloads are secure against
                              activity by a malicious actor, we take a
                              three-pronged approach:


                              * Webhook payloads contain minimal information
                              about the store and event, for example the ID
                              identifying the order or cart. To access
                              potentially sensitive information on a store, a
                              malicious actor would need to be fully
                              authenticated against that store’s API in order to
                              request full details.

                              * Webhook payloads are sent over a TLS-encrypted
                              connection.

                              * For added security, you can include custom
                              headers in your webhook creation request, and
                              these headers will be sent in the payload when an
                              event you subscribe to occurs. If your app
                              endpoint is secured by basic authentication, you
                              could set your own basic auth headers to
                              authenticate the payload at runtime.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Troubleshooting


                              ### Why am I not receiving event payloads to my
                              callback URI?

                              If your app does not return an HTTP 2_xx_ to
                              BigCommerce after receiving the webhook event
                              payload, BigCommerce considers it a failure.
                              BigCommerce will keep trying for a little over 48
                              hours. At the end of that time, BigCommerce sends
                              an email to the email address set during app
                              registration and disables the webhook by setting
                              the is_active flag to false.


                              You can proactively check to make sure that
                              everything is OK by periodically making a GET
                              request and checking the is_active flag.


                              If you receive an email or discover that the
                              is_active flag has been flipped to false, try the
                              following:


                              Check to see if your app is responding to the
                              event payload with something other than HTTP 200.

                              Check to make sure that your server has a valid
                              TLS/SSL setup. One way to do this is by visiting
                              the following website:
                              https://sslcheck.globalsign.com. Any of the
                              following will cause the TLS/SSL handshake to
                              fail:

                              Self-signed certificate.

                              Host name of the certificate does not match the
                              server’s DNS.

                              Your server’s key or trust store has not been
                              loaded up with the intermediate certificates
                              necessary to establish the chain of trust.

                              Once you have resolved the issue preventing the
                              connection, send a PUT request to flip the
                              is_active flag back to true. This will cause
                              BigCommerce to start sending the event payloads to
                              your callback URI again.


                              ### Why am I not receiving a 201 response after
                              creating a webhook?

                              After sending a POST request to create a webhook,
                              you should get an HTTP 201 back. If you do not,
                              check your TLS/SSL setup and be sure that your
                              request contains the following headers:


                              ```
                                   Accept: application/json
                                   Content-Type: application/json
                                   X-Auth-Client: <the OAuth client id>
                                   X-Auth-Token: <the OAuth token>
                              ```
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Tools for Debugging and Testing Webhooks


                              **[ngrok](https://ngrok.com/)**  

                              As you are building your integration, you might
                              want to test webhooks on your local dev machines.


                              We suggest using ngrok, which you can use to
                              easily set up tunnels between a server running on
                              localhost and a public URL. This will enable you
                              to send our webhooks to your localhost
                              environments via a public URL. No production push
                              is required.  

                              Need help on ngrok and webhooks see our tutorial.


                              **[Webhook Tester](https://webhook.site/#/)**  

                              This allows for webhooks to be quickly tested or
                              checked. 
                    - title: Setting up Webhooks
                      route:
                        path: /setting-up-webhooks
                      data:
                        blocks:
                          - type: text
                            data: '# Setting Up Webhooks'
                          - type: text
                            data: >-
                              ## Prerequisites


                              - NPM is installed (installed automatically with
                              Node)

                              - Familiar with Command Line

                              - Familiar with Postman

                              - [API Access Token & Client
                              ID](/api/#authenticating-with-oauth) with [scope]
                              set to Information & Settings Read-Only and
                              Products Read-Only.

                              - [Webhooks Overview](/api/#webhooks-overview)
                            header:
                              anchor: prerequisites
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Create Project Folder


                              1. Open the terminal and create a folder that will
                              hold ngrok and the Node app, then move into that
                              directory.


                              ```
                                  mkdir webhooks-test
                                  cd webhooks-test
                              ```
                            header:
                              anchor: create-project-folder
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Install ngrok


                              There are three ways to install ngrok: 

                              - Install manually and then set the $PATH so ngrok
                              can be used globally. 

                              - Download as an
                              [npm](https://www.npmjs.com/package/ngrok)
                              module. 

                              - Download manually and place in the project
                              folder. (Method we are using)


                              ### Mac/Linux


                              1. Visit https://ngrok.com/ and click on download.

                              2. Choose the version for your operating system.

                              3. Unzip ngrok and place the application in the
                              project folder that you created.


                              This can be accomplished in one command:

                              unzip "file_to_unzip" -d  destination


                              `unzip
                              /Users/your-computer/Downloads/ngrok-stable-darwin-amd64.zip
                              -d /Users/your-computer/Documents/webhooks-test`


                              ### Windows

                              1. Visit https://ngrok.com/ and click on download.

                              2. Choose the version for your operating system.

                              3. Unzip ngrok and place the application in the
                              project folder that you created.

                              4. Make sure the folder is in your PATH
                              environment variable
                                  - [What are PATH and other environment variables, and how can I set or use them?](https://superuser.com/questions/284342/what-are-path-and-other-environment-variables-and-how-can-i-set-or-use-them)
                            header:
                              anchor: install-ngrok
                          - type: callout
                            data:
                              type: success
                              body: >
                                At this point you should have a project folder
                                with ngrok unzipped inside of it. 
                              title: Checkpoint
                          - type: text
                            data: '---'
                          - type: text
                            data: "## Create Express App\n\n1. In the terminal run `npm init`. You will be prompted with several questions about the app setup. Feel free to hit return to accept the default value.  The final screen will look something like this: \n\n```\n{\n  \"name\": \"webhooks-test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"webhooks-test\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n2. Take note of the value in main, `index.js`. \n3. Create a file in your project folder called index.js. `touch index.js`\n4. Install [Express](https://expressjs.com/en/starter/installing.html) using the terminal in the same project folder. `npm install express --save`\t\t\t "
                          - type: callout
                            data:
                              type: success
                              body: >-
                                At this point your project folder should have
                                similar contents:

                                index.js

                                node_modules

                                package.json

                                ngrok

                                package-lock.json
                              title: Checkpoint
                          - type: text
                            data: >-
                              4. Open index.js in a text editor and add this
                              code snippet: 



                              ```
                                  const express = require('express')
                                  const app = express()
                                      app.post('/webhooks', function (req, res) {
                                      res.send('OK')
                                  })
                                  app.listen(3000, function () {
                                      console.log('Listening for webhooks on port 3000')
                                  })
                              ```



                              The app is starting a server and listening on port
                              3000, then returning a response of ok once it
                              receives a POST to the /webhooks url.


                              ```

                              app.post('/webhooks', function (req, res) {
                               res.send('OK')
                              })

                              ```



                              From Express
                              [Website](https://expressjs.com/en/starter/basic-routing.html):

                              `app.METHOD(PATH, HANDLER)`

                              - app is an instance of express.

                              - METHOD is an [HTTP request
                              method](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods),
                              in lowercase.

                              - PATH is a path on the server.

                              - HANDLER is the function executed when the route
                              is matched.

                              - Res.send is the body parameter that sends the
                              HTTP response.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Start the app and ngrok


                              We are going to start the app and visit the ngrok
                              url to see the status of our webhooks. 


                              1. Open two terminal tabs. They both should be in
                              your project folder. 

                              2. In one tab run the app. `node index.js`

                              3. In the other start ngrok. `./ngrok http 3000`
                            header:
                              anchor: start-the-app-ngrok
                          - type: tabs
                            data:
                              children:
                                - title: node index.js
                                  blocks:
                                    - type: text
                                      data: >-
                                        ```

                                        BIGCOMMERCE:webhooks your.computer$ node
                                        index.js

                                        Listening for webhooks on port 3000

                                        ```
                                - title: ngrok http 3000
                                  blocks:
                                    - type: image
                                      data: >-
                                        //s3.amazonaws.com/user-content.stoplight.io/6012/1531500085650
                                      config:
                                        centered: true
                                      header:
                                        title: nrgok terminal
                          - type: text
                            data: >-
                              ngrok returns two values we need for webhooks. 

                              - Web Interface: Where you can monitor the hook
                              from a browser. `https://127.0.0.1:4040`

                              - Forwarding: The webhook destination. Make note
                              of the https version. In this example its
                              https://6a35e97b.ngrok.io.


                              4. Open a web browser and copy in your Web
                              Interface URL. `http://127.0.0.1:4040` -  This is
                              where the webhooks will appear when they fire.
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1531500191661
                            header:
                              title: ngrok Web Interface
                            config:
                              centered: true
                              maxWidth: '800'
                              maxHeight: '800'
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              The webhook we are going to subscribe to is
                              `store/product/updated`. 


                              1. Create a POST request using the try it now box
                              below or your api enviroment of
                              choice.`https://api.bigcommerce.com/stores/{{store_hash}}/v2/hooks`.
                              Replace store_hash with your store.

                              2. Create a body request with the webhook we are
                              subscribing to and your forwarding url:


                              ```

                              {
                               "scope": "store/product/updated",
                               "destination": "https://6a35e97b.ngrok.io/webhooks",
                               "is_active": true
                              }

                              ```


                              The destination url is the forwarding url from
                              ngrok and /webhooks, matching the URL path set in
                              the app POST.  


                              3. Update the headers to have:

                              ```
                                  Accept: application/json
                                  Content-Type: application/json
                                  X-Auth-Client: {{the OAuth client id}}
                                  X-Auth-Token: {{the OAuth token}}
                              ```

                              4. Check all the values and then hit POST. The
                              response will be 201 Created if headers and scope
                              are correct.
                          - type: http
                            data:
                              method: post
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v2/hooks
                              headers:
                                Accept: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{the OAuth client id}'
                                X-Auth-Token: '{the OAuth token}'
                              body: |
                                {
                                "scope": "store/product/updated",
                                 "destination": "https://{your-url}.ngrok.io/webhooks",
                                 "is_active": true
                                }
                            header:
                              title: Create a Webhook
                              anchor: create-a-webhook
                          - type: code
                            data: |-
                              {
                                  "id": 14263419,
                                  "client_id": "your-client-id",
                                  "store_hash": "your-store-hasha",
                                  "scope": "store/product/updated",
                                  "destination": "https://6a35e97b.ngrok.io/webhooks",
                                  "headers": null,
                                  "is_active": true,
                                  "created_at": 1531256030,
                                  "updated_at": 1531256030
                              }
                            header:
                              title: 201 Created Response
                              anchor: 201-response
                            config:
                              mode: json
                          - type: text
                            data: >-
                              ## Fire Webhooks

                              You can fire the webhook in two ways. Either the
                              API or the store’s control panel. We are going to
                              cover both.


                              ### Update via the Control Panel


                              1. From your store’s control panel, navigate to
                              Products > View. Choose a product and change some
                              of the information. In this case, the word Hoodie
                              was added to the product name. Then click save.
                            header:
                              anchor: fire-webhooks
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1531500906129
                            config:
                              centered: true
                              maxWidth: '800'
                              maxHeight: '800'
                            header:
                              title: BigCommerce Control Panel
                              subtitle: Products > View
                          - type: text
                            data: >-
                              2. Visit the Ngrok web interface address (in the
                              sample app it’s http://127.0.0.1:4040), and check
                              for a 200 response. 
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1531500945565
                            config:
                              centered: true
                              maxWidth: '800'
                              maxHeight: '800'
                            header:
                              title: ngrok Web Interface
                          - type: text
                            data: >-
                              Under Summary you can see the webhook has fired.
                              It returned the text OK. This can be changed. In
                              the original app, res.send(‘OK’). This can be
                              changed to say something different or even post
                              the response to another app.  


                              The response will also show in the terminal. 
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1531500989467
                            header:
                              title: ngrok Terminal Response
                            config:
                              centered: true
                              maxWidth: '800'
                              maxHeight: '800'
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Update via the API

                              Create a PUT request to the product that needs to
                              be updated. 


                              `https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/124`


                              In this example, the price of product_id 124 is
                              being changed to 12.99.


                              After hitting send, check the ngrok web interface.
                              You may have more or less events based on how many
                              times the product has been updated in the previous
                              step. 
                          - type: http
                            data:
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}
                              headers:
                                X-Auth-Client: '{Your-X-Auth-Client}'
                                X-Auth-Token: '{Your-X-Auth-Token}'
                                Accept: application/json
                                Content-Type: application/json
                              method: put
                              body: |-
                                {
                                  "price": 12.99
                                }
                            header:
                              title: Update a Product
                              anchor: update-a-product-webhooks
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1531501115256
                            header:
                              title: ngrok Web Interface
                            config:
                              centered: true
                              maxWidth: '800'
                              maxHeight: '800'
                          - type: text
                            data: >-
                              That’s it. In this walkthrough you created a
                              webhook, setup a server to accept the response and
                              used Express. Some extra things are to change the
                              text in res.send() to have a custom response,
                              print the response to a webpage or setup a
                              different webhook. 
                          - type: callout
                            data:
                              body: >-
                                Unless you have paid for Ngrok, the URL is only
                                valid for a few hours. After that, the webhook
                                will stop working. Send a [DELETE]() request to
                                the specific webhook id. 
                              type: warning
                              title: URL Timeout
                          - type: http
                            data:
                              method: delete
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v2/hooks/{hook_id}
                              headers:
                                X-Auth-Client: '{your-client-id}'
                                X-Auth-Token: '{your-auth-token}'
                                Content-Type: application/json
                                Accept: application/json
                            header:
                              title: Delete the webhook
                              subtitle: >-
                                Get the hook_id by either getting it from the
                                original /POST response or by sending a /GET
                                request to the hooks resource
                              anchor: delete-webhook
                          - type: text
                            data: >-
                              ## Next Steps


                              Additionally, you can change the text in
                              res.send() to have a custom response, print the
                              response to a webpage or set up a different
                              webhook. You can also send in custom headers as a
                              way to verify the hook or get custom hook
                              information back. Setup the destination using a
                              permanent url such as creating an
                              [Heroku](https://www.heroku.com/) app, then having
                              the response print to the screen. 


                              To send in custom headers, during the /POST or
                              /PUT request add in:


                              ```

                              {
                                "scope": "store/order/*",
                                "headers": {
                                  "X-Custom-Auth-Header": "{secret_auth_password}"
                                },
                                "destination": "https://app.example.com/orders",
                                "is_active": true
                              }

                              ```

                              The custom header can be anything you choose. It
                              can be used to check the security of an incoming
                              webhook. Anything without the custom header should
                              be rejected.



                              Response:


                              ```

                              {
                                  "id": 14422996,
                                  "client_id": "{{client_id}}",
                                  "store_hash": "{{store-hash}}",
                                  "scope": "store/product/updated",
                                  "destination": "https://6a35e97b.ngrok.io/webhooks",
                                  "headers": {
                                      "A-Custom-Header": "some-secret-password"
                                  },
                                  "is_active": true,
                                  "created_at": 1533142869,
                                  "updated_at": 1533142869
                              }
                            header:
                              anchor: next-steps
                          - type: text
                            data: >-
                              ## Troubleshooting

                              1. Getting a 404 error using the root (/) url?


                              Add this snippet to your code to respond to
                              incoming get requests with 'hello'.


                              ```

                              app.get('/',(req, res)=>{
                                  res.send('Hello!');
                              }); 

                              ```


                              2. Getting error ngrok not found?

                              There are two ways to fix this. Your local setup
                              will determine which command will work.

                              Use the command `mv ngrok /usr/local/bin `to move
                              ngrok to your local bin folder. This way it
                              becomes available globally. 

                              Use the command `./ngrok http 300`0 to run ngrok
                              as a sudo user. 
                            header:
                              anchor: troubleshooting
                    - title: Webhook Events
                      route:
                        path: /webhook-events
                      data:
                        blocks:
                          - type: text
                            data: '# List of Webhook Events'
                          - type: text
                            data: >-
                              ## Orders


                              | Name | Description |

                              | ---| --- |

                              | store/order/* | Subscribe to all store/order
                              events  |

                              | store/order/created | A new order is created. It
                              can be manual or created on the storefront | 

                              | store/order/update| Order is updated |

                              | store/order/archived | Order is archived |

                              | store/order/deleted | Order is deleted |

                              | store/order/statusUpdated | Order status is
                              changed |

                              | store/order/message/created | Order message is
                              created by customer or in control panel |
                            header:
                              anchor: orders
                          - type: code
                            data: |-
                              {
                                "scope": "store/order/statusUpdated",
                                "store_id": "123456",
                                "data": {
                                  "type": "order",
                                  "id": 169,
                                  "status": {
                                    "previous_status_id": 5,
                                    "new_status_id": 9
                                  }
                                },
                                "hash": "6923dda2313a5709b13f9b217a3acd6f8308a0c2",
                                "created_at": 1535486277,
                                "producer": "stores/abcdefg"
                              }
                            header:
                              title: ' store/order/statusUpdated'
                              anchor: order-status-updated
                            config:
                              mode: json
                          - type: text
                            data: >-
                              ## Products


                              | Name | Description |

                              | --- | --- |

                              | store/product/*| Subscribe to all store/product
                              events |

                              |store/product/deleted| Product is deleted|

                              | store/product/created | A new product is created
                              |

                              | store/product/updated |Events that fire this
                              webhook are below: |

                              | _Brand Changed_ | _Product Type_ |

                              | _Category_ | _Inventory_ |

                              | _Number Sold_ | _Availibility_ |

                              | _Thumbnail Changed_ | _Visibility_ |

                              | _Featured_ | _Name_ |

                              | _Description_ | _Sort Order_ |

                              | _Price_ | _Dimensions_ |

                              | _Condition_ | _Tax Price_ |

                              | store/product/inventory/updated| Product
                              inventory is updated. |

                              | store/product/inventory/order/updated| When an
                              order is placed and product inventory is changed.
                              If subscribed the webhook will fire for products
                              where inventory is being tracked by sku or not. |

                              Included in the response for
                              `store/product/inventory/order/updated` is an
                              inventory object:


                              **value**: the number of items that the inventory
                              changed by. This can be negative if the inventory
                              is decreased `-3` or positive if an item is
                              returned to the inventory from an order, `+2`


                              **method** : Will always return relative.


                              **id**: The product id


                              **product_id**: The product id
                            header:
                              anchor: products
                          - type: code
                            data: |-
                              {
                                "scope": "store/product/inventory/order/updated",
                                "store_id": "123456",
                                "data": {
                                  "type": "product",
                                  "id": 185,
                                  "inventory": {
                                    "product_id": 185,
                                    "method": "relative",
                                    "value": -1
                                  }
                                },
                                "hash": "dc475e1059f2a67a55818bea29bf6b23ebbda707",
                                "created_at": 1535480603,
                                "producer": "stores/abcdefg"
                              }
                            header:
                              title: store/product/inventory/order/updated
                              anchor: product-inventory-order-updated
                            config:
                              mode: json
                          - type: text
                            data: >-
                              ## Category


                              | Name | Description |

                              |---|---|

                              | store/category/*| Subscribe to all
                              store/category events |

                              | store/category/created | Category is created |

                              | store/category/updated | Category is updated |

                              | store/category/deleted | Category is deleted |
                            header:
                              anchor: category
                          - type: code
                            data: |-
                              {
                                "scope": "store/category/updated",
                                "store_id": "123456",
                                "data": {
                                  "type": "category",
                                  "id": "19"
                                },
                                "hash": "9bb5584b3c28e3bb07164405626bd913c14d2209",
                                "created_at": 1535487935,
                                "producer": "stores/abcdefg"
                              }
                            header:
                              title: store/category/updated
                              anchor: category-updated
                            config:
                              mode: json
                          - type: text
                            data: >-
                              ## SKU


                              | Name | Description |

                              | --- | --- |

                              | store/sku/* |Subscribe to all store/sku events |

                              | store/sku/created | A new sku is created |

                              | store/sku/updated | Sku is updated |

                              | store/sku/deleted| Sku is deleted |

                              | store/sku/inventory/updated| |

                              | store/sku/inventory/order/updated| This webhook
                              will fire if inventory is being tracked by sku on
                              a product. It will also fire the
                              store/product/inventory/order/updated webhook. |


                              Included in the response is a data object:


                              **value**: the number of items that the inventory
                              changed by. This can be negative if the inventory
                              is decreased `-3` or positive if an item is
                              returned to the inventory from an order, `+2`


                              **method** : Will always return relative.


                              **type**: Will always be sku


                              **variant_id**: Id of the variant
                            header:
                              anchor: sku
                          - type: code
                            data: |-
                              {
                                "scope": "store/sku/inventory/order/updated",
                                "store_id": "123456",
                                "data": {
                                  "type": "sku",
                                  "id": 330,
                                  "inventory": {
                                    "product_id": 184,
                                    "method": "relative",
                                    "value": +2,
                                    "variant_id": 364
                                  }
                                },
                                "hash": "dc475e1059f2a67a55818bea29bf6b23ebbda707",
                                "created_at": 1535480603,
                                "producer": "stores/abcdefg"
                              }
                            header:
                              title: store/sku/inventory/order/updated
                              anchor: sku-inventory-order-updated
                            config:
                              mode: json
                          - type: text
                            data: >-
                              ## Customer

                              | Name | Description |

                              |---|---|

                              | store/customer/* | Subscribe to all
                              store/customer events |

                              | store/customer/created | A new customer is
                              created|

                              | store/customer/updated | Customer is updated |

                              | store/customer/deleted | Customer is deleted |
                            header:
                              anchor: customer
                          - type: code
                            data: |-
                              {
                                "scope": "store/customer/deleted",
                                "store_id": "123456",
                                "data": {
                                  "type": "customer",
                                  "id": 10
                                },
                                "hash": "4bf08f1ad81eeb460eb12f99f7fd2226b6ea0911",
                                "created_at": 1535488840,
                                "producer": "stores/abcdefg"
                              }
                            header:
                              title: tore/customer/deleted
                              anchor: customer-deleted
                            config:
                              mode: json
                          - type: text
                            data: >
                              ## Store

                              |Name|Description|

                              |---|---|

                              | store/app/uninstalled | Occurs when a client
                              store is cancelled and uninstalled from the
                              platform |

                              |store/information/updated | Events that fire this
                              webhook: |

                              | *Store Name* | *Store Address* |

                              | *Store Phone Number* | *Admin Email* |

                              | *Order Email* | *Display Date Format* |

                              | *Export Date Format* | *Store DTS Correction* |

                              | *Store Time Zone* | *Language* |

                              | *Default Currency* | *Currency Token* |

                              | *Decimal Token* | *Thousands Place* |

                              | *Currency Location* | *Weight Measurement* |

                              | *Length Measurement* | *Length Measurement* |

                              | *Dimensions Decimal Places* | *Dimensions
                              Decimal Token* |

                              | *Plan Name* | *Plan Level* |

                              | *Store Logo* | *Mobile Template Logo* |

                              | *Tax Entered With Prices* | *Stencil Template
                              Enabled* |
                            header:
                              anchor: store
                          - type: code
                            data: |-
                              {
                                "scope": "store/information/updated",
                                "store_id": "123446",
                                "data": {
                                  "type": "store"
                                },
                                "hash": "c553845e0a5e28dc8b0ea494458692a25586a294",
                                "created_at": 1535489273,
                                "producer": "stores/abcdefg"
                              }
                            header:
                              title: store/information/updated
                              anchor: store-information-updated
                            config:
                              mode: json
                          - type: text
                            data: >
                              ## Cart


                              | Name | Description |

                              | --- | --- |

                              | store/cart/lineItem/* | This webhook will fire
                              when a change occurs to line items in the cart.
                              This can be items added to a cart, removed or
                              updated.(Ex. change to quantity, product options
                              or price). |

                              | store/cart/lineItem/created | When a new item is
                              added to the cart  |

                              | store/cart/lineItem/updated | When an item’s
                              quantity has changed or the product options
                              change. |

                              | store/cart/lineItem/deleted | When an item is
                              deleted from the cart|

                              | store/cart/created | This webhook will fire
                              whenever a new cart is created either via a
                              storefront shopper adding their first item to the
                              cart or when a new cart being created via an API
                              consumer. If it is from the storefront, then it
                              fires when the first product is added to a new
                              session.(The cart did not exist before) For the
                              API it means a  `POST`  to /carts, (V3 and
                              Storefront API). The  `store/cart/updated`  will
                              also fire.|

                              | store/cart/updated | This webhook is fired
                              whenever a cart is modified through the changes in
                              its line items. Eg. when a new item is added to a
                              cart, an existing item’s quantity is updated, when
                              the email changes during guest checkout or an
                              existing item is deleted, the cart is modified
                              triggering this webhook. The payload will include
                              the ID of the cart being updated. <br> This
                              webhook is also fired along with cart created
                              because the first product being added to an empty
                              cart triggers an update. <br> - Logging into
                              customer account after creating a cart (email is
                              inherited from customer account email) <br>-
                              Entering email address via guest checkout <br>
                              -Changing the email in guest checkout |

                              | store/cart/deleted| This webhook will fire
                              whenever a cart is deleted. This is can be either
                              when all items have been removed from a cart and
                              it was auto-deleted or it was explicitly removed
                              via a DELETE request by an API consumer. This ends
                              the lifecycle of the cart. The 
                              `store/cart/updated`  webhook will also fire when
                              the last item is removed.|

                              | store/cart/couponApplied | This webhook will
                              fire whenever a new coupon code is applied to a
                              cart. It will include the ID of the coupon code |

                              | store/cart/abandoned | This webhook will fire
                              whenever a cart is considered abandoned. In the
                              BigCommerce store settings if enabled this is
                              usually set to one hour. [See Abandoned
                              Cart](https://support.bigcommerce.com/articles/Public/Using-the-Abandoned-Cart-Saver/).
                              |

                              | store/cart/converted | If a cart has been
                              converted. This will fire after a cart has been
                              considered abandoned. |
                            header:
                              anchor: cart
                          - type: code
                            data: |-
                              {
                                  "scope": "store/cart/lineItem/created",
                                  "store_id": "12074048",
                                  "data": {
                                      "type": "cart_line_item",
                                      "id": "c676e997-10fc-4049-bf18-1077a062e16d",
                                      "cartId": "351a367f-4198-4108-996a-753ffc1bce21"
                                  },
                                  "hash": "23d6ae55d612514cbc3f79619535a184bbf10fc0",
                                  "created_at": 1518405112,
                                  "producer": "stores/ojgwnqqd0g"
                              }
                            header:
                              title: store/cart/lineItem/created
                              anchor: cart-lineitem-created
                            config:
                              mode: json
                          - type: code
                            data: |-
                              {
                                  "scope": "store/cart/created",
                                  "store_id": "12074048",
                                  "data": {
                                      "type": "cart",
                                      "id": "6121f45e-e3d9-4fcf-828e-b507594a1f96"
                                  },
                                  "hash": "54eef7f35f37d770aefcb61c5d3f1df6ed0d5a31",
                                  "created_at": 1518403916,
                                
                            header:
                              title: store/cart/created
                              anchor: cart-created
                          - type: text
                            data: >-
                              ## Shipment


                              | Name | Description |

                              | --- | --- |

                              | store/shipment/* | Subscribe to all
                              store/shipment events |

                              | store/shipment/created | Shipment is created |

                              | store/shipment/updated | Shipment is updated |

                              | store/shipment/deleted | Shipment is deleted |
                            header:
                              anchor: shipment
                          - type: code
                            data: |-
                              {
                                  "scope": "store/shipment/created",
                                  "store_id": "123456",
                                  "data": {
                                      "type": "shipment",
                                      "id": 12,
                                      "orderId": "319"
                                  },
                                  "hash": "a6bc11ea25e8f389a16ee919f0c0db6d4099d7de",
                                  "created_at": 1534951410,
                                  "producer": "stores/abcdefg"
                              }
                            header:
                              title: store/shipment/created
                              anchor: shipment-created
        - title: Catalog
          route:
            path: /catalog
          data:
            children:
              - title: Products
                route:
                  path: /products
                data:
                  children:
                    - title: Products Overview
                      route:
                        path: /products-overview
                      data:
                        blocks:
                          - type: text
                            data: '# Products Overview'
                          - type: text
                            data: >-
                              The Catalog refers to a store’s collection of
                              physical and digital products. The Catalog
                              includes all the information about a product such
                              as MPN, warranty, price, and images. 
                          - type: text
                            data: >-
                              ##
                              [/catalog/products](/api-docs/api-reference/v3-api/catalog/getproducts)


                              Products are the primary catalog entity, and the
                              primary function of the e-commerce platform is to
                              sell products on the storefront and other selling
                              channels.


                              Products can either be
                              [Simple](#create-simple-product) or
                              [Complex](#create-complex-product). 


                              Products can also be Physical or Digital. 


                              * Physical products are typically products that
                              exist in a physical form, have a weight, and are
                              being sold by retailers with the intent of
                              shipping them to customers. 


                              * Digital products, on the other hand, may not
                              have a physical representation in the real world;
                              this includes downloadable products such as
                              computer software, ebooks, music, images, and
                              other digital media. Alternatively, a digital
                              product may be used to sell services such as spa
                              treatments, consulting, and so forth - which also
                              do not require shipping.
                            header:
                              anchor: catalog-products
                          - type: callout
                            data:
                              title: Product Creation
                              body: Only one Product can be created at a time.
                          - type: text
                            data: >-
                              ## Create a Simple Product


                              Simple products do not have any options,
                              modifiers, or variants, and therefore cannot be
                              configured or modified before they are added to
                              cart. A simple product is its own variant. 
                            header:
                              anchor: simple-product
                          - type: http
                            data:
                              headers:
                                Accepts: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{{CLIENT ID}}'
                                X-Auth-Token: '{{ACCESS TOKEN}}'
                              method: post
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products
                              body: |-
                                {
                                  "name": "BigCommerce Coffee Mug",
                                  "price": "10.00",
                                  "categories": [
                                    23,
                                    21
                                  ],
                                  "weight": 4,
                                  "type": "physical"
                                }
                            header:
                              title: Try It Now
                              subtitle: >-
                                Use this to create your own Simple Product.
                                Replace the test data with your own.
                              anchor: code-create-simple-product
                          - type: callout
                            data:
                              body: >-
                                When options are created, it defaults to radio
                                button as the display_type.
                              title: Creating Options
                            header: {}
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Create a Complex Product


                              Complex products have at least one option and may
                              have modifiers or variants.
                            header:
                              anchor: create-complex-product
                          - type: http
                            data:
                              headers:
                                Accepts: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{{CLIENT ID}}'
                                X-Auth-Token: '{{ACCESS TOKEN}}'
                              method: post
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products
                              body: |-
                                {
                                  "name": "BigCommerce Coffee Mug",
                                  "price": "10.00",
                                  "categories": [
                                    23,
                                    21
                                  ],
                                  "weight": 4,
                                  "type": "physical",
                                  "variants": [
                                    {
                                      "sku": "SKU-BLU",
                                      "option_values": [
                                        {
                                          "option_display_name": "Mug Color",
                                          "label": "Blue"
                                        }
                                      ]
                                    },
                                    {
                                      "sku": "SKU-GRAY",
                                      "option_values": [
                                        {
                                          "option_display_name": "Mug Color",
                                          "label": "Gray"
                                        }
                                      ]
                                    }
                                  ]
                                }
                            header:
                              title: Try It Now
                              subtitle: >-
                                Use this to create your own test product.
                                Replace the test data with your own.
                              anchor: code-create-complex-product
                          - type: text
                            data: >-
                              Using this endpoint multiple variants can be added
                              to the product when being created.
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Digital Products


                              Digital products are not physical items that are
                              shipped out. Such as manuals, ebooks or music.
                              Attached to a digital product is a Downloadable
                              product file.


                              Downloadable product files are intended for
                              products of the “digital” type, typically for
                              selling some kind of media file or software. They
                              don’t have dimensions since an item is never
                              shipped out.


                              Files must be added to digital products using the
                              [Control Panel or using
                              WebDav.](https://support.bigcommerce.com/articles/Public/Creating-Downloadable-Products/#adding-downloadable-product)
                              Additional settings such as description of the
                              file and maximum downloads can be set in the
                              Control Panel.
                            header:
                              anchor: digital-products
                          - type: http
                            data:
                              headers:
                                Accepts: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{{CLIENT ID}}'
                                X-Auth-Token: '{{ACCESS TOKEN}}'
                              method: post
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products
                              body: |-
                                {
                                  "name": "ebook: A Guide to Coffee",
                                  "price": "10.00",
                                  "categories": [
                                    23,
                                    21
                                  ],
                                  "type": "digital",
                                  "images": [
                                    {
                                      "is_thumbnail": true,
                                      "image_url": "https://your-custom-image/image_name.png"
                                    }
                                  ]
                                }
                            header:
                              title: Try It Now
                              subtitle: >-
                                Use this to create your own Digital Product.
                                Replace the test data with your own.
                              anchor: code-create-digital-product
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Webhooks Available


                              | Name | Description |

                              | --- | --- |

                              | store/product/*| Subscribe to all store/product
                              events |

                              |store/product/deleted| Product is deleted|

                              | store/product/created | A new product is created
                              |

                              | store/product/updated |Events that fire this
                              webhook are below: |

                              | _Brand Changed_ | _Product Type_ |

                              | _Category_ | _Inventory_ |

                              | _Number Sold_ | _Availibility_ |

                              | _Thumbnail Changed_ | _Visibility_ |

                              | _Featured_ | _Name_ |

                              | _Description_ | _Sort Order_ |

                              | _Price_ | _Dimensions_ |

                              | _Condition_ | _Tax Price_ |

                              | store/product/inventory/updated| Product
                              inventory is updated. |

                              | store/product/inventory/order/updated| When an
                              order is placed and product inventory is changed.
                              If subscribed the webhook will fire for products
                              where inventory is being tracked by sku or not. |


                              * See [About
                              Webhooks](/api-docs/getting-started/webhooks/about-webhooks)
                              for more on working with events.
                            header:
                              anchor: available-webhooks
                          - type: text
                            data: '---'
                          - type: jsonSchema
                            data:
                              $ref: >-
                                ./BigCommerce V3
                                API.oas2.yml#/definitions/ProductBase
                    - title: Images
                      route:
                        path: /products-images
                      data:
                        blocks:
                          - type: text
                            data: '# Product Images'
                          - type: text
                            data: >-
                              ##
                              [/catalog/products/{product_id}/images](/api-docs/api-reference/v3-api/catalog/getproductimages)


                              Product images are used to show shoppers what
                              they’re buying and merchandise products. When
                              creating an image, `image_url` or an `image_file`
                              can be passed in. 


                              If using `image_file` Content-Type needs to be set
                              to 

                              Content-Type: multipart/form-data. Any other
                              updates using the /POST or /PUT will be rejected
                              with the form-data.
                            header: {}
                          - type: http
                            data:
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/images
                              headers:
                                Accepts: application/json
                                X-Auth-Client: '{CLIENT ID}'
                                X-Auth-Token: '{{ACCESS TOKEN}}'
                                Content-Type: application/json
                              method: put
                              body: |-
                                {
                                 "is_thumbnail": true,
                                  "sort_order": 1,
                                  "description": "Yellow Large Bath Towel",
                                  "image_url": "https://your-custom-image/image_name.png"
                                }
                            header:
                              title: Try it Now
                              subtitle: >-
                                Use this to add a Image to your Product. Replace
                                the test data with your own.
                              anchor: code-add-product-image
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Create Multiple Images


                              A product can support multiple images. When adding
                              images, more than one can be added by expanding
                              the images array.
                            header:
                              anchor: create-multiple-images
                          - type: http
                            data:
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/images
                              headers:
                                Accepts: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{CLIENT ID}'
                                X-Auth-Token: '{{ACCESS TOKEN}}'
                              method: put
                              body: "{\n\"images\":[\n\t\t\t{\n\t\t\t\t\"is_thumbnail\": true,\n\t\t\t\t\"image_url\": \"https://your-custom-image/image_name.png\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"is_thumbnail\": false,\n\t\t\t\t\"image_url\": \"https://your-custom-image/image_name.png\"\n\t\t\t}\n\t\t]\n}"
                            header:
                              title: Try it Now
                              subtitle: >-
                                Use this to add a Multiple Images to your
                                Product. Replace the test data with your own.
                              anchor: code-add-multiple-images
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Product Thumbnails


                              Only one image can be the product thumbnail. The
                              product thumbnail is the image that shows on the
                              product listing page, in search results and any
                              other location that features the product. If only
                              one image is on the product it becomes both the
                              thumbnail and the main product image. Images can
                              also be added to
                              [variants](/api-docs/catalog/products/product-variants). 
                          - type: code
                            data: |-
                              {
                                  "data": {
                                      "id": 382,
                                      "product_id": 158,
                                      "is_thumbnail": true,
                                      "sort_order": 0,
                                      "description": "",
                                      "image_file": "a/521/foglinenbeigestripetowel1b_1024x1024__83011__60806.jpg",
                                      "url_zoom": "https://cdn8.bigcommerce.com/s-{{store_hash}}/products/158/images/382/foglinenbeigestripetowel1b_1024x1024__83011__60806.1534344511.1280.1280.jpg?c=2",
                                      "url_standard": "https://cdn8.bigcommerce.com/s-{{store_hash}}/products/158/images/382/foglinenbeigestripetowel1b_1024x1024__83011__60806.1534344511.560.850.jpg?c=2",
                                      "url_thumbnail": "https://cdn8.bigcommerce.com/s-{{store_hash}}/products/158/images/382/foglinenbeigestripetowel1b_1024x1024__83011__60806.1534344511.330.500.jpg?c=2",
                                      "url_tiny": "https://cdn8.bigcommerce.com/s-{{store_hash}}/products/158/images/382/foglinenbeigestripetowel1b_1024x1024__83011__60806.1534344511.66.100.jpg?c=2",
                                      "date_modified": "2018-08-15T14:48:31+00:00"
                                  },
                                  "meta": {}
                              }
                            header:
                              title: Thumbnails
                              subtitle: >-
                                /GET
                                https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/{{product_id}}/images/{{images_id}}
                              anchor: code-get-product-images
                            config:
                              mode: json
                          - type: text
                            data: '---'
                          - type: jsonSchema
                            data:
                              $ref: >-
                                ./BigCommerce V3
                                API.oas2.yml#/definitions/ProductImageBase
                    - title: Videos
                      route:
                        path: /product-videos
                      data:
                        blocks:
                          - type: text
                            data: '# Product Videos'
                          - type: text
                            data: >
                              ##
                              [/catalog/products/{product_id}/videos](/api-docs/api-reference/v3-api/catalog/getproductvideos)


                              Product Videos, in addition to images, can help
                              shoppers understand what they’re buying and help
                              sell the product. A product can have more than one
                              video.


                              * Product videos must be hosted on YouTube. The
                              video_id corresponds to the “v” parameter in a
                              video url. 


                              Example:
                              https://www.youtube.com/watch?v=***R12345677***
                            header:
                              anchor: product-video-introduction
                          - type: http
                            data:
                              headers:
                                Accept: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{CLIENT ID}'
                                X-Auth-Token: '{ACCESS TOKEN}'
                              method: put
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/videos
                              body: |-
                                {
                                  "title": "BigCommerce Mug Video",
                                  "description": "Video Describing the Mug",
                                  "sort_order": 1,
                                  "type": "youtube",
                                  "video_id": "123345AA"
                                }
                            header:
                              title: Try It Now
                              subtitle: >-
                                Use this to add a Video to your Product. Replace
                                the test data with your own.
                              anchor: code-add-product-video
                          - type: text
                            data: '---'
                          - type: jsonSchema
                            data:
                              $ref: >-
                                ./BigCommerce V3
                                API.oas2.yml#/definitions/ProductVideoBase
                    - title: Custom Fields
                      route:
                        path: /product-custom-fields
                      data:
                        blocks:
                          - type: text
                            data: '# Custom Fields'
                          - type: text
                            data: >-
                              ##
                              [/catalog/products/{product_id}/custom-fields](/api-docs/api-reference/v3-api/catalog/getcustomfields)


                              Custom fields are a feature intended for product
                              specifications, in a key: value arrangement. As an
                              example, there might be fields indicating
                              technical specifications about an LED TV  such as
                              screen size, maximum resolution, HDR support, etc.
                              Alternatively, if selling wine, I might use Custom
                              Fields for specifications such as vintage, region,
                              grape, etc. Custom fields can not be used to add
                              rules such as changing the weight or price of a
                              product. 
                            header:
                              anchor: custom-fields-overview
                          - type: callout
                            data:
                              body: >-
                                There is a limit of 250 characters for custom
                                field values.
                          - type: text
                            data: >-
                              Custom Fields are intended to be used in a couple
                              of contexts:


                              * Displaying specifications on the product detail
                              page and on the product listing pages such as
                              category and brand pages.

                              * Powering faceted search (searching/filtering by
                              custom field values)
                          - type: http
                            data:
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/custom-fields
                              method: put
                              body: |-
                                {
                                  "name": "Release Year",
                                  "value": "2018"
                                }
                              headers:
                                Accept: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{CLIENT ID}'
                                X-Auth-Token: '{ACCESS TOKEN}'
                            header:
                              title: Try It Now
                              subtitle: >-
                                Use this to add a Custom Field to your Product.
                                Replace the test data with your own.
                              anchor: code-add-custom-field
                          - type: text
                            data: '---'
                          - type: jsonSchema
                            data:
                              $ref: >-
                                ./BigCommerce V3
                                API.oas2.yml#/definitions/CustomFieldBase
                    - title: Bulk Pricing Rules
                      route:
                        path: /product-bulk-pricing
                      data:
                        blocks:
                          - type: text
                            data: '# Bulk Pricing Rules'
                          - type: text
                            data: >-
                              ##
                              [catalog/products/product_id/bulk-pricing-rules](/api-docs/api-reference/v3-api/catalog/getbulkpricingrules)


                              Bulk Pricing Rules are intended for merchants who
                              want to offer wholesale discounts for buying in
                              bulk. They apply once products are added to cart,
                              but they are displayed as a callout on the
                              storefront to let shoppers know how they can save.


                              Bulk Pricing rules in the catalog are on the
                              product, meaning that they’ll trigger even if
                              several different variants of the product are in
                              the cart, as long as the total quantity of those
                              variants meets one of the quantity breaks. [Price
                              List bulk pricing](http://) works differently.
                          - type: http
                            data:
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/bulk-pricing-rules
                              method: put
                              body: |-
                                {
                                  "bulk_pricing_rules": [
                                    {
                                      "quantity_min": 10,
                                      "quantity_max": 15,
                                      "type": "price",
                                      "amount": 3
                                    },
                                    {
                                      "quantity_min": 16,
                                      "quantity_max": 25,
                                      "type": "price",
                                      "amount": 5
                                    }
                                  ]
                                }
                              headers:
                                Accept: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{CLIENT ID}'
                                X-Auth-Token: '{ACCESS TOKEN}'
                            header:
                              title: Try It Now
                              subtitle: >-
                                Use this to add Bulk Pricing Rules to your
                                Product. Replace the test data with your own.
                              anchor: code-add-bulk-pricing-rules
                          - type: text
                            data: '---'
                          - type: jsonSchema
                            data:
                              $ref: >-
                                ./BigCommerce V3
                                API.oas2.yml#/definitions/BulkPricingRuleBase
                    - title: Variant Options
                      route:
                        path: /product-variant-options
                      data:
                        blocks:
                          - type: text
                            data: '# Variant Options'
                          - type: text
                            data: >-
                              ##
                              [/catalog/products/product_id/options](/api-docs/api-reference/v3-api/catalog/getoptions)


                              Variant options are any choices that the shopper
                              needs to make that will result in the selection of
                              a variant. Color and Size are typical examples of
                              Variant Options.  A t-shirt can have different
                              combinations of sizes and colors.  


                              Example:

                              * Color is a Variant Option while Red, Orange, and
                              Green are Variant Option Values

                              * Size is a Variant Option while Small, Medium,
                              and Large are Variant Option Values


                              The combination of Small & Red is what is selected
                              on the storefront and correlates to a product
                              variation also called a SKU. 
                               
                              **Variant options:**


                              * Require the shopper to select a value

                              * Only support “multiple choice” option types

                              * Rectangle

                              * Radio button

                              * Color swatch

                              * Product pick list

                              * Product pick list w/ images

                              * Will automatically generate variants when
                              created in the CP

                              * Are auto-generated from variants when a product
                              is created with variants via V3 API Product /POST
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Options created on V2 and V3


                              * Variant options created on V3 cannot be cannot
                              be accessed from the Control Panel. They can only
                              be accessed via the API.

                              * If a product has options that were created using
                              the V2 API, additional options cannot be added
                              using the V3 API.

                              * SKU's in V@ map to variants in V3.

                              * Base variants are not SKU's in V2.
                            header:
                              anchor: option-v2-v3
                          - type: callout
                            data:
                              body: >-
                                Creating a variant option does not automatically
                                create SKUs or build out variants. SKUs can be
                                built out later using the [variants
                                end-point]().
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Create Variant Options

                              The following request will create options, but the
                              SKU’s are not updated and they are not a variant
                              on the product. Variant SKUs must be created with
                              a separate request. Variant options will show on
                              the storefront as an option that can be selected
                              by the customer. A request like this could be used
                              to add new choices to a variant that has already
                              been created.
                          - type: code
                            data: |-
                              {
                                 "product_id": 134,
                                 "name": "Size Rectangle",
                                 "display_name": "Size",
                                 "type": "rectangles",
                                       "option_values": [
                                           {
                                               "label": "S",
                                               "sort_order": 0,
                                               "is_default": false
                                           },
                                           {
                                               "label": "M",
                                               "sort_order": 1,
                                               "is_default": true
                                           },
                                           {
                                               "label": "L",
                                               "sort_order": 2,
                                               "is_default": false
                                           }
                                       ]
                               }
                            header:
                              title: Create Size Variant Option
                              subtitle: >-
                                /POST
                                https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/options
                              anchor: create-size-variant
                            config:
                              mode: json
                          - type: callout
                            data:
                              body: >-
                                Variants can only be created one at a time using
                                this endpoint. Use the /catalog/products to add
                                more than one variant when creating a product.
                          - type: http
                            data:
                              headers:
                                Accepts: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{{CLIENT ID}}'
                                X-Auth-Token: '{{ACCESS TOKEN}}'
                              method: post
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/options
                              body: |-
                                {
                                  "product_id": 134,
                                  "name": "Colors",
                                  "display_name": "Color",
                                  "type": "swatch",
                                  "sort_order": 1,
                                  "option_values": [
                                    {
                                      "label": "Blue",
                                      "sort_order": 1,
                                      "value_data": {
                                        "colors": [
                                          "#123c91"
                                        ]
                                      },
                                      "is_default": false
                                    },
                                    {
                                      "label": "Green",
                                      "sort_order": 2,
                                      "value_data": {
                                        "colors": [
                                          "#0f961e"
                                        ]
                                      },
                                      "is_default": false
                                    },
                                    {
                                      "label": "Red",
                                      "sort_order": 3,
                                      "value_data": {
                                        "colors": [
                                          "#e60c0c"
                                        ]
                                      },
                                      "is_default": false
                                    }
                                  ]
                                }
                            header:
                              title: Try It Now
                              subtitle: >-
                                Use this to add Varaint Options to your Product.
                                Replace the test data with your own.
                              anchor: code-create-color-variant
                          - type: text
                            data: '---'
                          - type: jsonSchema
                            data:
                              $ref: >-
                                ./BigCommerce V3
                                API.oas2.yml#/definitions/OptionBase
                    - title: Variants
                      route:
                        path: /product-variants
                      data:
                        blocks:
                          - type: text
                            data: '# Variants'
                          - type: text
                            data: >-
                              ##
                              [/catalog/products/product_id/variants](/api-docs/api-reference/v3-api/catalog/getvariantsbyproductid)


                              Variants represent an item as it sits on the shelf
                              in the warehouse or a particular saleable product.
                              A product might be a t-shirt, while the variant
                              would be “a small, red t-shirt”. Variants are
                              selected by shoppers on the storefront via Product
                              Options. In the case where a product is simple,
                              meaning it does not have any options, the product
                              is its own variant - called a base variant.
                              Everything you can buy should be a variant.


                              * Options build out variants. 

                              * Variants are usually what inventory is tracked
                              against 

                              * Can have their own price, weight, dimensions,
                              image, etc - or they can inherit these values from
                              the product if they have not been specified

                              * Must have a SKU code (unless they’re a base
                              variant)

                              * In the case of non-base variants, variants will
                              relate to a particular combination of variant
                              option values - such as “small” and “red”
                            header:
                              anchor: variants
                          - type: callout
                            data:
                              type: warning
                              body: >-
                                When a variant option is created, they can not
                                be accessed from the Control Panel. They can
                                only be changed or updated via the API. 
                          - type: image
                            data: >-
                              //s3.amazonaws.com/user-content.stoplight.io/6012/1535652849070
                            header:
                              subtitle: Variant Creation Workflow
                          - type: text
                            data: >-
                              ## Create a Variant

                              Variants can be created in two ways:

                              * From existing variant options using the variant
                              options endpoint.
                              [v3/catalog/products/{product_id}/options
                              ](http://)

                              * By adding the variants with variant options and
                              skus when creating the product. See [Create a
                              Complex Product](http://).


                              This will go over using existing variant options
                              to create the variants.


                              Use the
                              `https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/131/options`
                              endpoint to get the option information.
                          - type: code
                            data: |-
                              {
                                  "data": [
                                      {
                                          "id": 193,
                                          "product_id": 134,
                                          "name": "Size1533313432-134",
                                          "display_name": "Size",
                                          "type": "rectangles",
                                          "sort_order": 0,
                                          "option_values": [
                                              {
                                                  "id": 163,
                                                  "label": "S",
                                                  "sort_order": 0,
                                                  "value_data": null,
                                                  "is_default": false
                                              },
                                              {
                                                  "id": 164,
                                                  "label": "M",
                                                  "sort_order": 1,
                                                  "value_data": null,
                                                  "is_default": true
                                              },
                                              {
                                                  "id": 165,
                                                  "label": "L",
                                                  "sort_order": 2,
                                                  "value_data": null,
                                                  "is_default": false
                                              }
                                          ],
                                          "config": []
                                      },
                                      {
                                          "id": 194,
                                          "product_id": 134,
                                          "name": "Color1533313946-134",
                                          "display_name": "Color",
                                          "type": "swatch",
                                          "sort_order": 1,
                                          "option_values": [
                                              {
                                                  "id": 166,
                                                  "label": "Blue",
                                                  "sort_order": 1,
                                                  "value_data": {
                                                      "colors": [
                                                          "#123C91"
                                                      ]
                                                  },
                                                  "is_default": false
                                              },
                                              {
                                                  "id": 167,
                                                  "label": "Green",
                                                  "sort_order": 2,
                                                  "value_data": {
                                                      "colors": [
                                                          "#0F961E"
                                                      ]
                                                  },
                                                  "is_default": false
                                              },
                                              {
                                                  "id": 168,
                                                  "label": "Red",
                                                  "sort_order": 3,
                                                  "value_data": {
                                                      "colors": [
                                                          "#E60C0C"
                                                      ]
                                                  },
                                                  "is_default": false
                                              }
                                          ],
                                          "config": []
                                      }
                                  ],
                                  "meta": {
                                      "pagination": {
                                          "total": 2,
                                          "count": 2,
                                          "per_page": 50,
                                          "current_page": 1,
                                          "total_pages": 1,
                                          "links": {
                                              "current": "?page=1&limit=50"
                                          }
                                      }
                                  }
                              }
                            header:
                              title: Example Response
                              subtitle: >-
                                /GET
                                https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/options
                              anchor: product-option-response
                            config:
                              mode: json
                          - type: http
                            data:
                              method: get
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/options
                              headers:
                                X-Auth-Client: '{CLIENT ID}'
                                X-Auth-Token: '{ACCESS TOKEN}'
                                Content-Type: application/json
                                Accept: application/json
                            header:
                              title: Try It Now
                              subtitle: Get Variant Options
                              anchor: code-get-variant-options
                          - type: text
                            data: >-
                              In the above response, there are two variant
                              options of size and color with three values each. 


                              To combine the variant option values into variants
                              and build out SKU’s use the following endpoint:


                              `https://api.bigcommerce.com/stores/{{store_hash}}/v3/catalog/products/131/variants`
                          - type: callout
                            data:
                              body: >-
                                Variants need to be created one at a time using
                                this endpoint. Only one variant option at a time
                                can be created; individual variant options will
                                contain an array of multiple values. To use a
                                variant array and create them at the same time
                                use the [/catalog/product]() endpoint during
                                product creation.
                          - type: http
                            data:
                              headers:
                                Accepts: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{{CLIENT ID}}'
                                X-Auth-Token: '{{ACCESS TOKEN}}'
                              method: put
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/variants
                              body: |-
                                {
                                  "cost_price": 3,
                                  "price": 12.99,
                                  "retail_price": 15.99,
                                  "weight": 1,
                                  "width": 4,
                                  "height": 14.6,
                                  "depth": 22,
                                  "is_free_shipping": true,
                                  "purchasing_disabled": true,
                                  "purchasing_disabled_message": "This item not available at this time.",
                                  "product_id": 134,
                                  "sku": "SMALL-BLUE",
                                  "option_values": [
                                    {
                                      "id": 163,
                                      "option_id": 193
                                    },
                                    {
                                      "id": 166,
                                      "option_id": 194
                                    }
                                  ]
                                }
                            header:
                              title: Try It Now
                              subtitle: >-
                                Use this to add Variants to your Product .
                                Replace the test data with your own.
                              anchor: code-create-variants
                          - type: text
                            data: "The option_values array is a combination of Small and Blue. Together they create the SKU SMALL-BLUE. The id in the option_values array is the id from the variant option response option_values > id. The option_id is the id of the option. \n\n```\n {\n            \"id\": 193, //option_id\n            \"product_id\": 134,\n            \"name\": \"Size1533313432-134\",\n            \"display_name\": \"Size\",\n            \"type\": \"rectangles\",\n            \"sort_order\": 0,\n            \"option_values\": [\n                {\n                    \"id\": 163, //id\n                    \"label\": \"S\",\n                    \"sort_order\": 0,\n                    \"value_data\": null,\n                    \"is_default\": false\n                }\n\t\t\t\t\t\t\t\t...\n```"
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## Create a Variant using the Products endpoint. 


                              The following example creates a base product,
                              variant options, and variants in a single call to
                              the /products endpoint. You can use this method to
                              create a product and its variants in a single call
                              without creating variant options first, but not
                              all option types are supported by this method.
                          - type: callout
                            data:
                              body: >-
                                Swatch, Radio Buttons, Rectangle, dropdown,
                                Product List and Product List with Images. 
                              title: Supported Types
                          - type: http
                            data:
                              headers:
                                Accepts: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{{CLIENT ID}}'
                                X-Auth-Token: '{{ACCESS TOKEN}}'
                              method: post
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products
                              body: |-
                                {
                                  "name": "BigCommerce Coffee Mug",
                                  "price": "10.00",
                                  "categories": [
                                    23,
                                    21
                                  ],
                                  "weight": 4,
                                  "type": "physical",
                                  "variants": [
                                    {
                                      "sku": "SKU-BLU",
                                      "option_values": [
                                        {
                                          "option_display_name": "Mug Color",
                                          "label": "Blue"
                                        }
                                      ]
                                    },
                                    {
                                      "sku": "SKU-GRAY",
                                      "option_values": [
                                        {
                                          "option_display_name": "Mug Color",
                                          "label": "Gray"
                                        }
                                      ]
                                    }
                                  ]
                                }
                            header:
                              title: Try It Now
                              subtitle: >-
                                Use this to create your own Product using the
                                products endpoint . Replace the test data with
                                your own.
                              anchor: create-variants-using-products-endpoint
                          - type: text
                            data: '---'
                          - type: jsonSchema
                            data:
                              $ref: >-
                                ./BigCommerce V3
                                API.oas2.yml#/definitions/VariantBase
                    - title: Modifier Options
                      route:
                        path: /modifier-options
                      data:
                        blocks:
                          - type: text
                            data: '# Modifier Options'
                          - type: text
                            data: >-
                              ##
                              [/catalog/products/{{product_id}}/modifiers](/api-docs/api-reference/v3-api/catalog/getmodifiers)


                              Modifier options are any choices that the shopper
                              can make that will change the way the merchant
                              fulfills the product. Examples include:

                              * A checkbox to add shipping insurance

                              * Text to be engraved on the product

                              * A color that an unfinished product is to be
                              painted before it’s shipped
                               
                              Critically, the modifier will not change the
                              SKU/variant being fulfilled, and you cannot track
                              inventory against combinations of modifier values.
                              Modifiers typically would not change which product
                              is “picked off the shelf” in the warehouse, but
                              they change what happens to that product before
                              it’s sent to the shopper, or how it’s sent.
                               
                              Modifier options:

                              * May be required or non-required

                              * Support all option types

                              * Cannot be used as part of a variant

                              * 

                              An adjuster can be added to a modifier option to
                              change things such as adding to the price,
                              changing the weight or shipping rules.  Adjusters
                              cannot be applied to all modifiers.
                          - type: callout
                            data:
                              title: Modifiers that use Adjusters
                              body: >-
                                Swatch, radio buttons, rectangle list,
                                drop-down, product list, product list with
                                images
                          - type: text
                            data: >-
                              ## Add a modifier to an existing product with
                              price adjuster


                              The following example shows how to add a modifier
                              - checkbox with a price adjuster - increase price
                              by five dollars. Checkboxes have to made in two
                              steps.  The reason is that it creates more than
                              one modifier. A checkbox is a yes or no which is
                              listed as two different `option_values`. 
                            header: {}
                          - type: callout
                            data:
                              body: >-
                                swatch, radio buttons, drop-down, rectangle
                                list, product list, product list with images,
                                and checkbox.
                              title: Modifiers that have to be created in two steps
                          - type: text
                            data: 'First, a POST to create the modifier. '
                          - type: http
                            data:
                              headers:
                                Accepts: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{{CLIENT ID}}'
                                X-Auth-Token: '{{ACCESS TOKEN}}'
                              method: put
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/modifiers
                              body: |-
                                {
                                  "type": "checkbox",
                                  "required": false,
                                  "config": {
                                    "default_value": "Yes",
                                    "checked_by_default": false,
                                    "checkbox_label": "Check for Donation"
                                  },
                                  "display_name": "Add a $5 Donation"
                                }
                            header:
                              title: Try It Now
                              subtitle: >-
                                Use this to add a Modifier to your Product.
                                Replace the test data with your own.
                              anchor: code-create-modifier
                          - type: text
                            data: >-
                              Since this is a checkbox which has two states,
                              checked/unchecked or yes/no two option values are
                              created. The adjuster values are null. 
                          - type: code
                            data: |
                              {
                                  "data": [
                                      {
                                          "id": 160,
                                          "product_id": 131,
                                          "name": "Add-a-$5-Donation1535039590-191",
                                          "display_name": "Add a $5 Donation",
                                          "type": "checkbox",
                                          "required": false,
                                          "config": {
                                              "checkbox_label": "Check for Donation",
                                              "checked_by_default": false
                                          },
                                          "option_values": [
                                              {
                                                  "id": 149,
                                                  "option_id": 160,
                                                  "label": "Yes",
                                                  "sort_order": 0,
                                                  "value_data": {
                                                      "checked_value": true
                                                  },
                                                  "is_default": false,
                                                  "adjusters": {
                                                      "price": {
                                                          "adjuster": null,
                                                          "adjuster_value": null
                                                      },
                                                      "weight": null,
                                                      "image_url": "",
                                                      "purchasing_disabled": {
                                                          "status": false,
                                                          "message": ""
                                                      }
                                                  }
                                              },
                                              {
                                                  "id": 150,
                                                  "option_id": 160,
                                                  "label": "No",
                                                  "sort_order": 1,
                                                  "value_data": {
                                                      "checked_value": false
                                                  },
                                                  "is_default": true,
                                                  "adjusters": {
                                                      "price": null,
                                                      "weight": null,
                                                      "image_url": "",
                                                      "purchasing_disabled": {
                                                          "status": false,
                                                          "message": ""
                                                      }
                                                  }
                                              }
                                          ]
                                      }
                                  ],
                                  "meta": {
                                      "pagination": {
                                          "total": 1,
                                          "count": 1,
                                          "per_page": 50,
                                          "current_page": 1,
                                          "total_pages": 1,
                                          "links": {
                                              "current": "?page=1&limit=50"
                                          }
                                      }
                                  }
                              }
                            header:
                              title: Response
                              anchor: code-response-create-modifier
                              subtitle: Create Modifier Option
                            config:
                              mode: json
                          - type: text
                            data: >-
                              Then a PUT to update the modifier value created.
                              This increases the price by $5 when the yes
                              modifier is selected.
                          - type: http
                            data:
                              headers:
                                Accepts: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{{CLIENT ID}}'
                                X-Auth-Token: '{{ACCESS TOKEN}}'
                              method: put
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/modifiers/{modifier_id}/values
                              body: |-
                                {
                                  "is_default": false,
                                  "adjusters": {
                                    "price": {
                                      "adjuster": "relative",
                                      "adjuster_value": 5
                                    }
                                  }
                                }
                            header:
                              title: Try It Now
                              subtitle: >-
                                Use this to add Modifer Values to your Product.
                                Replace the test data with your own.
                              anchor: code-create-modifer-values
                          - type: text
                            data: '---'
                          - type: text
                            data: >-
                              ## 422 Error


                              ```

                              {
                                  "status": 422,
                                  "title": "The product is currently associated with an option set, please remove it before editing an option or modifier.",
                                  "type": "https://developer.bigcommerce.com/api#api-status-codes",
                                  "errors": {
                                      "product_id": "The product is currently associated with an option set, please remove it before editing an option or modifier."
                                  }
                              }

                              ```


                              To fix this error:

                              * Modify the products using the V2 API

                              * Remove the option set using the V2 API or the
                              Control Panel, then remake the variants and
                              modifiers using V3
                          - type: text
                            data: '---'
                          - type: jsonSchema
                            data:
                              $ref: >-
                                ./BigCommerce V3
                                API.oas2.yml#/definitions/ModifierBase
                    - title: Complex Rules
                      route:
                        path: /product-complex-rules
                      data:
                        blocks:
                          - type: text
                            data: '# Complex Rules'
                          - type: text
                            data: >-
                              ##
                              [/catalog/products/product_id/complex-rules](/api-docs/api-reference/v3-api/catalog/getcomplexrules)


                              Complex rules allow merchants to set up conditions
                              and actions based on shopper option selections on
                              the storefront. You can use them to vary the
                              following based on option selections made by the
                              shopper:

                              * Price

                              * Weight

                              * Image

                              * Purchasability


                              Adjustments made by complex rules are displayed to
                              shoppers in real-time on the storefront.


                              For the majority of merchant use cases, **best
                              practice** will be to either assign values (such
                              as a price) directly to a variant or use adjusters
                              on the modifier option itself. However complex
                              rules exist for rare cases where a rule condition
                              is too complex to express in those forms easily. 


                              Use complex rules when an adjustment should be
                              triggered by:

                              * The selection of values across multiple modifier
                              options

                              * The combination of a particular variant/SKU and
                              a modifier option value.
                          - type: text
                            data: '---'
                          - type: text
                            data: >
                              ## Adding a complex rule to a modifier


                              Complex rules must be based on a combination of
                              two or more modifiers, such as two checkboxes. The
                              following example will add $10 to the product
                              price when both boxes are checked. 
                          - type: http
                            data:
                              headers:
                                Accepts: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{{CLIENT ID}}'
                                X-Auth-Token: '{{ACCESS TOKEN}}'
                              method: put
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/complex-rules
                              body: |-
                                {
                                  "product_id": 1200,
                                  "enabled": true,
                                  "price_adjuster": {
                                    "adjuster_value": 10
                                  },
                                  "conditions": [
                                    {
                                      "modifier_id": 506,
                                      "modifier_value_id": 852
                                    },
                                    {
                                      "modifier_id": 507,
                                      "modifier_value_id": 854
                                    }
                                  ]
                                }
                            header:
                              title: Try It Now
                              subtitle: >-
                                Use this to add a Complex Rules to a Modifier.
                                Replace the test data with your own.
                              anchor: code-add-complex-rule-modifier
                          - type: text
                            data: >
                              Complex rules must consist of multiple conditions
                              that trigger the rule adjustment. If multiple
                              conditions are not specified, the request will
                              return a 422 Unprocessable Entity.


                              ```

                              {
                                  "status": 422,
                                  "title": "The rule must contain multiple modifier conditions with unique modifier ids or a variant condition and modifier condition",
                                  "type": "https://developer.bigcommerce.com/api#api-status-codes"
                              }

                              ```
                          - type: text
                            data: '---'
                          - type: jsonSchema
                            data:
                              $ref: >-
                                ./BigCommerce V3
                                API.oas2.yml#/definitions/ComplexRuleBase
                    - title: Metafields
                      route:
                        path: /product-metafields
                      data:
                        blocks:
                          - type: text
                            data: '## Product Metafields'
                          - type: text
                            data: >-
                              ##
                              [/catalog/products/131/metafields](/api-docs/api-reference/v3-api/catalog/getproductmetafieldsbyproductid)


                              Metafields allow a developer to setup key and
                              namespace pairs. The data does not appear in the
                              storefront or the control panel. This is useful
                              for when information needs to be passed back and
                              forth between an app and the store. 


                              Metafields can be added to variants, products,
                              categories, and brands.
                          - type: http
                            data:
                              headers:
                                Accepts: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{{CLIENT ID}}'
                                X-Auth-Token: '{{ACCESS TOKEN}}'
                              method: put
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products/{product_id}/metafields
                              body: |-
                                {
                                  "permission_set": "read",
                                  "namespace": "Location",
                                  "key": "bin_number",
                                  "value": "#4456",
                                  "description": "location of the product",
                                  "resource_type": "product",
                                  "resource_id": 131
                                }
                            header:
                              title: Try It Now
                              subtitle: >-
                                Use this to add a Metafield to your Product.
                                Replace the test data with your own.
                              anchor: code-add-metafield
                          - type: text
                            data: '---'
                          - type: jsonSchema
                            data:
                              $ref: >-
                                ./BigCommerce V3
                                API.oas2.yml#/definitions/MetafieldBase
                    - title: Reviews
                      route:
                        path: /product-reviews
                      data:
                        blocks:
                          - type: text
                            data: '# Reviews'
                          - type: text
                            data: >-
                              ##
                              [/catalog/products/product_id/reviews](/api-docs/api-reference/v3-api/catalog/getproductreviews)


                              A product review is used to give shoppers the
                              option to rate the products they have purchased.
                              The reviews are located on the same page as the
                              product. 


                              Reviews are not able to be created in the control
                              panel, but they can be created via API. Creating
                              them via API is useful if you are migrating to
                              BigCommerce and do not want to lose existing
                              reviews. Product Reviews are native to the
                              platform but can be turned off in favor of a
                              custom setup.
                          - type: http
                            data:
                              headers:
                                Accepts: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{{CLIENT ID}}'
                                X-Auth-Token: '{{ACCESS TOKEN}}'
                              method: post
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products
                              body: |
                                {
                                  "title": "Great Coffee Mug",
                                  "text": "This coffee mug kept my liquids hot for several hours.",
                                  "status": "pending",
                                  "rating": 5,
                                  "email": "testing@bigcommerce.com",
                                  "name": "BigCommerce",
                                  "date_reviewed": "2018-07-20T17:45:13+00:00"
                                }
                            header:
                              title: Try It Now
                              subtitle: >-
                                Use this to create a Product Review. Replace the
                                test data with your own.
                              anchor: code-create-product-review
                          - type: text
                            data: '---'
                          - type: jsonSchema
                            data:
                              $ref: >-
                                ./BigCommerce V3
                                API.oas2.yml#/definitions/ProductReviewBase
                    - title: Brands
                      route:
                        path: /brands
                      data:
                        blocks:
                          - type: text
                            data: '# Brands'
                          - type: text
                            data: >-
                              ##
                              [/catalog/brands](/api-docs/api-reference/v3-api/brands/getbrands)


                              Brands are another form of catalog taxonomy,
                              similar to Categories. However, there are a few
                              differences.


                              * Exist as a single “list” on the store, with no
                              tree structure

                              * Can only have a single assignment to a product;
                              a product may have at most one brand, but a brand
                              can have many products.
                               
                              They’re primarily used to tag products so that
                              consumers can find Brands they’re interested in
                              (such as Nike shoes). Brands have their own page
                              on the storefront which shows all the products in
                              that Brand. They’re also used as part of faceted
                              search navigation.
                          - type: http
                            data:
                              headers:
                                Accepts: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{{CLIENT ID}}'
                                X-Auth-Token: '{{ACCESS TOKEN}}'
                              method: post
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/brands
                              body: |-
                                {
                                  "name": "BigCommerce",
                                  "page_title": "BigCommerce",
                                  "meta_keywords": [
                                    "ecommerce",
                                    "best in class",
                                    "grow your business"
                                  ],
                                  "image_url": "https://your-custom-image.png"
                                }
                            header:
                              title: Try It Now
                              subtitle: >-
                                Use this to create your own Brand. Replace the
                                test data with your own.
                              anchor: code-create-brand
                          - type: text
                            data: '---'
                          - type: jsonSchema
                            data:
                              $ref: >-
                                ./BigCommerce V3
                                API.oas2.yml#/definitions/BrandBase
              - title: Categories
                route:
                  path: /categories
                data:
                  blocks: []
                  children:
                    - title: Categories Overview
                      route:
                        path: /categories-overview
                      data:
                        blocks:
                          - type: text
                            data: '# Category'
                          - type: text
                            data: >-
                              ## [/catalog/categories](http://)


                              Categories are a hierarchy of products available
                              on the store, presented in a tree structure.
                              Currently, a store’s category structure determines
                              the primary menu structure of most storefront
                              themes, which are directly tied to it.


                              All products must be associated with at least one
                              Category, although a Category does not need to
                              have any products. Unlike some e-commerce
                              platforms, products on BigCommerce can be
                              associated with more than one Category. 


                              A product associated with categories does not
                              currently have any priority or weighted order
                              (there’s no “primary category”), which can make it
                              difficult to integrate with some external systems
                              which might wish to use a product’s categories to
                              map to a category structure in that external
                              system.
                          - type: http
                            data:
                              headers:
                                Accepts: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{{CLIENT ID}}'
                                X-Auth-Token: '{{ACCESS TOKEN}}'
                              method: post
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/products
                              body: |
                                {
                                  "parent_id": 18,
                                  "name": "Shoes",
                                  "description": "Shoes Available for purchase",
                                  "sort_order": 1,
                                  "page_title": "Shoes",
                                  "is_visible": true
                                }
                            header:
                              title: Try It Now
                              subtitle: >-
                                Create a Category. Replace the test data with
                                your own.
                          - type: text
                            data: '---'
                          - type: jsonSchema
                            data:
                              $ref: >-
                                ./BigCommerce V3
                                API.oas2.yml#/definitions/CategoryBase
                    - title: Category Tree
                      route:
                        path: /category-tree
                      data:
                        blocks:
                          - type: text
                            data: '# Category Tree'
                          - type: text
                            data: >-
                              ## /catalog/categories/tree


                              The Category Tree returns a simple view of the
                              parent > child relationship of all categories in
                              the store. This endpoint can be used to fetch the
                              categories if building out a custom navigation for
                              a store.
                          - type: code
                            data: |
                              {
                                  "data": [
                                      {
                                          "id": 33,
                                          "parent_id": 0,
                                          "name": "Clothing",
                                          "is_visible": true,
                                          "url": "/clothing/",
                                          "children": []
                                      },
                                      {
                                          "id": 23,
                                          "parent_id": 0,
                                          "name": "Shop All",
                                          "is_visible": true,
                                          "url": "/shop-all/",
                                          "children": []
                                      },
                                      {
                                          "id": 25,
                                          "parent_id": 0,
                                          "name": "Towels",
                                          "is_visible": true,
                                          "url": "/towels/",
                                          "children": [
                                              {
                                                  "id": 26,
                                                  "parent_id": 25,
                                                  "name": "Bath Towels",
                                                  "is_visible": true,
                                                  "url": "/towels/bath-towels/",
                                                  "children": [
                                                      {
                                                          "id": 30,
                                                          "parent_id": 26,
                                                          "name": "Bath Towels",
                                                          "is_visible": true,
                                                          "url": "/towels/bath-towels/bath-towels/",
                                                          "children": []
                                                      },
                                                      {
                                                          "id": 29,
                                                          "parent_id": 26,
                                                          "name": "Hand Towels",
                                                          "is_visible": true,
                                                          "url": "/towels/bath-towels/hand-towels/",
                                                          "children": [
                                                              {
                                                                  "id": 31,
                                                                  "parent_id": 29,
                                                                  "name": "Washcloths",
                                                                  "is_visible": true,
                                                                  "url": "/towels/bath-towels/hand-towels/wash-cloths/",
                                                                  "children": []
                                                              }
                                                          ]
                                                      }
                                                  ]
                                              },
                                              {
                                                  "id": 28,
                                                  "parent_id": 25,
                                                  "name": "Beach Towels",
                                                  "is_visible": true,
                                                  "url": "/towels/beach-towels/",
                                                  "children": []
                                              },
                                              {
                                                  "id": 27,
                                                  "parent_id": 25,
                                                  "name": "Kitchen Towels",
                                                  "is_visible": true,
                                                  "url": "/towels/kitchen-towels/",
                                                  "children": []
                                              }
                                          ]
                                      },
                                      {
                                          "id": 18,
                                          "parent_id": 0,
                                          "name": "Bath",
                                          "is_visible": true,
                                          "url": "/bath/",
                                          "children": [
                                              {
                                                  "id": 34,
                                                  "parent_id": 18,
                                                  "name": "Shoes",
                                                  "is_visible": true,
                                                  "url": null,
                                                  "children": []
                                              }
                                          ]
                                      },
                                      {
                                          "id": 32,
                                          "parent_id": 0,
                                          "name": "Hoodies",
                                          "is_visible": true,
                                          "url": "/hoodies/",
                                          "children": []
                                      },
                                      {
                                          "id": 19,
                                          "parent_id": 0,
                                          "name": "Garden",
                                          "is_visible": true,
                                          "url": "/garden/",
                                          "children": []
                                      },
                                      {
                                          "id": 21,
                                          "parent_id": 0,
                                          "name": "Kitchen",
                                          "is_visible": true,
                                          "url": "/kitchen/",
                                          "children": []
                                      },
                                      {
                                          "id": 20,
                                          "parent_id": 0,
                                          "name": "Publications",
                                          "is_visible": true,
                                          "url": "/publications/",
                                          "children": []
                                      },
                                      {
                                          "id": 22,
                                          "parent_id": 0,
                                          "name": "Utility",
                                          "is_visible": true,
                                          "url": "/utility/",
                                          "children": []
                                      }
                                  ],
                                  "meta": {}
                              }
                            header:
                              title: Category Tree Response Example
                              anchor: code-example-get-category-tree
                          - type: http
                            data:
                              headers:
                                Accepts: application/json
                                Content-Type: application/json
                                X-Auth-Client: '{{CLIENT ID}}'
                                X-Auth-Token: '{{ACCESS TOKEN}}'
                              method: get
                              url: >-
                                https://api.bigcommerce.com/stores/{store_hash}/v3/catalog/summary
                              body: |-
                                {
                                  "name": "BigCommerce Coffee Mug",
                                  "price": "10.00",
                                  "categories": [
                                    23,
                                    21
                                  ],
                                  "weight": 4,
                                  "type": "physical"
                                }
                            header:
                              title: 'Try It Now '
                              subtitle: Get your store's Category Tree
                              anchor: code-get-cateory-tree
                          - type: text
                            data: '---'
                          - type: jsonSchema
                            data:
                              type: object
                              properties: {}
                          - type: jsonSchema
                            data:
                              $ref: >-
                                ./BigCommerce V3
                                API.oas2.yml#/definitions/CategoryTreeCollectionResponse
        - title: Scripts
          route:
            path: /scripts
          data:
            blocks:
              - type: text
                data: '# Scripts'
            children:
              - title: New Subpage
                route:
                  path: /new-subpage
                data: {}
        - title: Price Lists
          route:
            path: /price-lists
          data:
            blocks:
              - type: text
                data: '# Price Lists'
            children:
              - title: New Subpage
                route:
                  path: /new-subpage
                data: {}
        - title: Subscribers & Customers
          route:
            path: /subscribers-customers
          data:
            blocks: []
            children:
              - title: Customer Login API
                route:
                  path: /customer-login-api
                data:
                  blocks:
                    - type: text
                      data: |-
                        ## What We'll Cover
                        * [JWT](#jwt)
                        * [OAuth Scope](#oauth-scope)
                        * [Sample Code](#sample-code)
                        * [Access URL](#access-url)
                        * [Logging In a Customer](#logging-in-a-customer)
                        * [Troubleshooting](#troubleshooting)
                    - type: text
                      data: >-
                        The Customer Login API enables single sign-on (SSO). It
                        allows your apps to programmatically log in a storefront
                        customer by using the login entry point URL:
                        `/login/token/{token}`. Here, {token} must be a JSON Web
                        Token (JWT) containing the parameters for the customer
                        login request, signed by your application’s Oauth client
                        secret.


                        Example use cases for the Customer Login API include:


                        * Merchants with a footprint across multiple sites and
                        platforms

                        * Social login applications

                        * Apps that need to bypass the built-in customer login
                        page in order to log customers in from a third-party
                        system
                      header:
                        anchor: customer-login-introduction
                    - type: text
                      data: >-
                        ## JWT


                        JWT is a standard for verifying a login signature
                        between two parties. For a full overview of the JWT
                        standard, please see [JWT.IO](https://jwt.io/), where
                        you can find links to client libraries (in many
                        languages) that facilitate the generation and
                        verification of JWT tokens. BigCommerce also supplies
                        helper methods for generating login tokens in our [API
                        Client
                        Libraries](/api-docs/getting-started/about-api/new-subpage).


                        ### JWT Standard


                        A valid JWT token is a string composed of three parts,
                        separated by periods (“.”), which correspond to the
                        encoded header, the encoded payload, and the signature.
                      header:
                        anchor: jwt
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1535390918772
                      header:
                        anchor: example-jwt-token
                        title: Example JWT Token
                      config:
                        centered: true
                        maxWidth: '800'
                        maxHeight: '800'
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1535391044482
                      header:
                        title: Key
                        anchor: token-key
                      config:
                        centered: true
                        maxWidth: '400'
                        maxHeight: '400'
                    - type: text
                      data: "### Header\n\nThe header specifies the type of token (JWT) and the hashing algorithm.\n\n```\n{\n\t\"typ\": \"JWT\",\n\t\"alg\": \"HS256\" \n}\n```\n\nThe type and algorithm are always JWT and HS256. Those are the only values BigCommerce supports."
                      header:
                        anchor: header
                    - type: text
                      data: >-
                        ### Payload

                        The payload contains a series of claims that identify
                        the application requesting the login, the store, and the
                        customer to be logged in. Optionally, you can specify a
                        redirect URL to direct the customer to a page other than
                        the My Account page after login. 


                        Once a request has is made with a given jti, it cannot
                        be made again. This parameter is used to prevent replay
                        attacks by malicious actors intercepting the request or
                        obtaining it after the fact.


                        The request_ip field can be used as an additional
                        security precaution, to prevent a malicious actor from
                        intercepting the request and making it from another
                        browser or system before you do. If you supply this
                        value, BigCommerce checks the incoming request to ensure
                        that it is being made from the stated IP address
                        otherwise the request fails. We strongly encourage
                        setting this IP address value, but doing so is optional,
                        to support those cases where this information is not
                        available.
                      header:
                        anchor: payload
                    - type: code
                      data: |
                        {
                        "iss": "Your app’s Oauth client ID",
                        "iat": "timestamp for when the token was issued",
                        "jti": "randomly generated string",
                        "operation": "customer_login",
                        "store_hash": "abc123",
                        "customer_id": 1234,
                        "redirect_to": "/account.php",
                        "request_ip": "111.222.333.444"
                        }
                      header:
                        anchor: example-payload
                        title: Example Payload
                      config:
                        mode: json
                    - type: text
                      data: >-
                        | Field Name | Type | Description |

                        | --- | --- | --- |

                        | iss | string | Indicates the token's issuer. This is
                        your application's client ID, which is obtained during
                        application registration in Developer Portal. |

                        | iat | integer| Time when the token was generated. This
                        is a numeric value indicating the number of seconds
                        since the [Unix
                        epoch](http://en.wikipedia.org/wiki/Unix_time).|

                        | jti | string | Request ID string that must be unique
                        across all requests made by your app. A UUID or other
                        random string would be an appropriate value. Most
                        libraries contain a method for generating a uuid. For
                        testing a [UUID
                        generator](https://www.uuidgenerator.net/) can be used,
                        but it recommended to use built in libraries.|

                        | operation | string | Must contain the string
                        "customer_login". |

                        | store_hash | string | Store hash identifying the store
                        you are logging into. |

                        | customer_id | integer | ID of the customer you are
                        logging in, as obtained through the Customer API. |

                        | redirect_to | string | Optional field containing a
                        relative path for the shopper's destination after login.
                        Will default to `/account.php`. |

                        | request_ip | string | Optional field containing the
                        expected IP address for the request. If provided,
                        BigCommerce will check that it matches the browser
                        trying to log in. If there is not a match, it will be
                        rejected |
                      header:
                        anchor: payload-fields
                    - type: text
                      data: >
                        ### Signature


                        The signature is created by signing the header and
                        payload with the hashing algorithm specified in the
                        header (HS256) and your application’s Client Secret. 
                      header:
                        anchor: signature
                    - type: text
                      data: >-
                        ## OAuth Scope

                        Your OAuth API credentials must include the
                        [customers_login](http://) scope.
                      header:
                        anchor: oauth-scope
                    - type: text
                      data: >-
                        ## Access URL

                        After generating the JWT token, your app should
                        immediately redirect the shopper’s browser to the
                        following access point URL to log the customer into
                        their account: `/login/token/{token}`


                        Example:

                        `https://storedomain.com/login/token/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
                        .eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ`
                      header:
                        anchor: access-url
                    - type: text
                      data: >-
                        ## Logging in a Customer

                        The following tutorial will walk through creating a
                        login token. We recommend scripting this process since
                        the iat is invalid after 30 seconds. For the purpose of
                        illustration, this tutorial will walk through creating a
                        token manually using the debugger tool at JWT.io,
                        although doing so can be tricky due to time
                        constraints.  


                        **Prerequisites**:

                        Client ID and Client Secret generated from the store
                        with the scope set to [Customers Login]().
                      header:
                        anchor: logging-in-a-customer
                    - type: text
                      data: >-
                        ### Create a JWT Token


                        1. Run a /GET request against the [Customers](http://)
                        resource (V2). Choose a customer and make note of the
                        customer_id. 
                      header:
                        anchor: create-jwt-token
                    - type: callout
                      data:
                        type: success
                        body: >-
                          If you are unsure how to make a /GET request see our
                          tutorial on [making your first request]().
                        title: Making a /GET request
                      header:
                        anchor: making-a-get-request
                    - type: text
                      data: >-
                        2. Create the payload by filling in the PAYLOAD:DATA on
                        jwt.io
                    - type: code
                      data: |-
                        {
                            "iss": "1234r5t6y7u8i9o0p",
                            "iat": 1535393113,
                            "jti": "20b7c03e-00da-4d29-91bf-2aa06a57575b",
                            "operation": "customer_login",
                            "store_hash": "{store_hash}",
                            "customer_id": 2,
                            "redirect_to": "/account.php"
                        }
                      header:
                        title: Create the Payload
                        anchor: create-the-paylpad
                    - type: image
                      data: >-
                        //s3.amazonaws.com/user-content.stoplight.io/6012/1535469059335
                      header:
                        anchor: jwt-image
                        subtitle: JTW.io fields
                      config:
                        centered: true
                        maxWidth: '800'
                        maxHeight: '800'
                    - type: callout
                      data:
                        type: error
                        title: IAT Claim
                        body: 'The iat claim is only good for 30 seconds. '
                      header:
                        anchor: iat-claim
                    - type: text
                      data: >
                        3.  Add your Client Secret in the Verify Signature
                        Section. Replace the text `your-256-bit-secret` with the
                        Client Secret.

                        4. Copy the token from the encoded box and paste at the
                        end of the login/token url.  


                        *https://store-url/login/token/generated-jwt-token*


                        **Example**: 

                        https://storedomain.com/login/token/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
                        .eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9
                        .TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ


                        5. Paste the URL into the address bar.


                        If the request was successful then you will be logged in
                        as the customer and directed to /account.php. If it was
                        unsuccessful there will be a login attempt message and
                        you will be directed to /login.php
                    - type: text
                      data: >-
                        ## Sample Code


                        Code to generate a valid JWT token for a storefront
                        login request is provided in our API Client Libraries.
                        The list items below link to the repositories maintained
                        by BigCommerce:


                        * [PHP
                        Sample](https://github.com/bigcommerce/bigcommerce-api-php/blob/master/src/Bigcommerce/Api/Client.php#L421)

                        * [Python
                        Sample](https://github.com/bigcommerce/bigcommerce-api-python/blob/master/bigcommerce/customer_login_token.py)

                        * [Ruby
                        Sample](https://github.com/bigcommerce/bigcommerce-api-ruby/blob/master/examples/customers/customer_login.rb)


                        Client libraries in many other languages are at JWT.io.
                      header:
                        anchor: sample-code
                    - type: tabs
                      data:
                        children:
                          - title: PHP Sample
                            blocks:
                              - type: code
                                data: |2-
                                      public static function getCustomerLoginToken($id, $redirectUrl = '', $requestIp = '')
                                      {
                                          if (empty(self::$client_secret)) {
                                              throw new Exception('Cannot sign customer login tokens without a client secret');
                                          }

                                          $payload = array(
                                              'iss' => self::$client_id,
                                              'iat' => time(),
                                              'jti' => bin2hex(random_bytes(32)),
                                              'operation' => 'customer_login',
                                              'store_hash' => self::$store_hash,
                                              'customer_id' => $id
                                          );

                                          if (!empty($redirectUrl)) {
                                              $payload['redirect_to'] = $redirectUrl;
                                          }

                                          if (!empty($requestIp)) {
                                              $payload['request_ip'] = $requestIp;
                                          }

                                          return JWT::encode($payload, self::$client_secret, 'HS256');
                                      }
                                header:
                                  subtitle: >-
                                    https://github.com/bigcommerce/bigcommerce-api-php/blob/master/src/Bigcommerce/Api/Client.php#L421
                                  title: Client.php
                                  anchor: php-sample
                                config:
                                  mode: php
                          - title: Python Sample
                            blocks:
                              - type: code
                                data: |+
                                  import os
                                  import time
                                  import uuid
                                  import jwt


                                  class CustomerLoginTokens(object):
                                      @classmethod
                                      def create(cls, client, id, redirect_url=None, request_ip=None):

                                          # Get the client_secret needed to sign tokens from the environment
                                          # Intended to play nice with the Python Hello World sample app
                                          # https://github.com/bigcommerce/hello-world-app-python-flask
                                          client_secret = os.getenv('APP_CLIENT_SECRET')

                                          if not client_secret:
                                              raise AttributeError('No OAuth client secret specified in the environment, '
                                                                   'please specify an APP_CLIENT_SECRET')

                                          try:
                                              client_id = client.connection.client_id
                                              store_hash = client.connection.store_hash
                                          except AttributeError:
                                              raise AttributeError('Store hash or client ID not found in the connection - '
                                                                   'make sure an OAuth API connection is configured. Basic auth is not supported.')

                                          payload = dict(iss=client_id,
                                                         iat=int(time.time()),
                                                         jti=uuid.uuid4().hex,
                                                         operation='customer_login',
                                                         store_hash=store_hash,
                                                         customer_id=id
                                                         )

                                          if redirect_url:
                                              payload['redirect_url'] = redirect_url

                                          if request_ip:
                                              payload['request_ip'] = request_ip

                                          token = jwt.encode(payload, client_secret, algorithm='HS256')

                                          return token.decode('utf-8')

                                      @classmethod
                                      def create_url(cls, client, id, redirect_url=None, request_ip=None):
                                          secure_url = client.Store.all()['secure_url']
                                          login_token = cls.create(client, id, redirect_url, request_ip)
                                          return '%s/login/token/%s' % (secure_url, login_token)

                                header:
                                  title: customer_login_token.py
                                  subtitle: >-
                                    https://github.com/bigcommerce/bigcommerce-api-python/blob/master/bigcommerce/customer_login_token.py
                                  anchor: python-sample
                                config:
                                  mode: python
                          - title: Ruby Sample
                            blocks:
                              - type: code
                                data: >-
                                  require 'bigcommerce'


                                  Bigcommerce.configure do |config|
                                    config.store_hash = ENV['BC_STORE_HASH']
                                    config.client_id = ENV['BC_CLIENT_ID']
                                    config.client_secret = ENV['BC_CLIENT_SECRET']
                                    config.access_token = ENV['BC_ACCESS_TOKEN']
                                  end


                                  # Get a customer

                                  customer = Bigcommerce::Customer.all(page:
                                  1).first


                                  # Generate token login url

                                  puts customer.login_token
                                header:
                                  subtitle: >-
                                    https://github.com/bigcommerce/bigcommerce-api-ruby/blob/master/examples/customers/customer_login.rb
                                  title: customer_login.rb
                                  anchor: ruby-sample
                                config:
                                  mode: ruby
                      header:
                        title: JWT Token Sample Code
                        anchor: token-samples
                    - type: text
                      data: >-
                        ## Troubleshooting


                        Tokens are valid for a very short time frame after being
                        generated, so tokens should not be generated in advance.
                        Instead, the application should generate the token and
                        then immediately redirect the user’s browser to
                        /login/token/{token}. 


                        If the server generating the iat is out of sync, the
                        login token will fail if the timestamp indicates a time
                        in the future or an expired token.


                        The login URL can be visited only once. Once a GET
                        request is run against the link, the token is
                        invalidated. 


                        Tokens can be validated or generated for testing
                        purposes using the debugger at https://jwt.io/.
                      header:
                        anchor: troubleshooting
              - title: Current Customer API
                route:
                  path: /current-customer-api
                data:
                  blocks:
                    - type: text
                      data: >-
                        ## Identifying Logged-In Customers Securely


                        If your application interacts dynamically with the
                        BigCommerce storefront, and conveys information that is
                        specific to a particular logged-in customer, you must
                        confirm that customer’s identity within the insecure
                        environment of the user’s browser.


                        To address this need, BigCommerce provides a Current
                        Customer endpoint, which your app can access via
                        JavaScript on the storefront. This endpoint returns a
                        JWT with identifying details about the customer. The
                        information is signed with your [OAuth client
                        secret](http://).
                    - type: text
                      data: >-
                        ### Example JavaScript


                        Below is example JavaScript that will access this JWT.
                        To test the JWT functionality, you can install this
                        JavaScript on your sandbox BigCommerce store. Your
                        application’s Client ID must be included in the request
                        (to identify the requesting application):
                    - type: code
                      data: |
                        <script type="text/javascript">
                        function customerJWT() {  
                            var appClientId = "**BC_CLIENT_ID**"; // TODO: Fill this in with your app's client ID
                            var xmlhttp = new XMLHttpRequest();
                            xmlhttp.onreadystatechange = function() {
                                if (xmlhttp.readyState == 4 ) {
                                   if (xmlhttp.status == 200) {
                                       alert('Customer JWT:\n' + xmlhttp.responseText);
                                   }
                                   else if (xmlhttp.status == 404) {
                                      alert('Not logged in!');
                                   }
                                   else {
                                       alert('Something went wrong');
                                   }
                                }
                            };
                            xmlhttp.open("GET", "/customer/current.jwt?app_client_id="+appClientId, true);
                            xmlhttp.send();
                        }
                        customerJWT();
                        </script>
                      header:
                        title: Identify Logged In Customers
                        anchor: identify-customers-script
                      config:
                        mode: html
                    - type: text
                      data: >-
                        If you are logged into the storefront with a customer
                        account, the above JavaScript should alert to the
                        browser with a JWT token. If no customer is logged in,
                        BigCommerce will return a 404 response, and you will see
                        an error message. The JWT returned from this endpoint
                        (example below) can be decoded on JWT.IO
                    - type: code
                      data: |-
                        {
                          "customer": {
                            "id": 4927,
                            "email": "john.doe@gmail.com",
                            "group_id": "6"
                          },
                          "iss": "bc/apps",
                          "sub": "abc123",
                          "iat": 1480831863,
                          "exp": 1480832763,
                          "version": 1,
                          "aud": "6sv16tfx3j5gsopm42ss5dd67g2srvq",
                          "application_id": "6sv16tasdgr2b5hs5dd67g2srvq",
                          "store_hash": "abc123",
                          "operation": "current_customer"
                        }
                      header:
                        title: Logged in Customers Response
                        anchor: logged-in-customer-response
                      config:
                        mode: json
                    - type: text
                      data: >-
                        By design, your application should send this token to
                        the application’s server, validate it against your
                        client secret, and then use it as a trusted indication
                        of the logged-in customer’s identity, before displaying
                        confidential information to them. 


                        An end-to-end example, which displays a customer’s
                        recently purchased products, is available in our
                        [Ruby](https://github.com/bigcommerce/hello-world-app-ruby-sinatra/)
                        and
                        [PHP](https://github.com/bigcommerce/hello-world-app-php-silex/)
                        sample apps.
        - title: Cart
          route:
            path: /cart
          data:
            children:
              - title: Storefront Cart
                route:
                  path: /storefront-cart
                data: {}
              - title: Server To Server Cart
                route:
                  path: /server-server-cart
                data: {}
        - title: Checkout
          route:
            path: /checkout
          data:
            children:
              - title: Storefront Checkout
                route:
                  path: /storefront-checkout
                data: {}
              - title: Server To Server Checkout
                route:
                  path: /server-server-checkout
                data: {}
              - title: Checkout SDK
                route:
                  path: /checkout-sdk
                data: {}
        - title: API Reference
          route:
            path: /api-reference
          data:
            children:
              - title: V3 API
                route:
                  path: /v3-api
                data:
                  blocks: []
                  children:
                    - title: V3 Catalog
                      route:
                        path: /catalog-api
                      data:
                        $ref: ./V3 Catalog.oas2.yml
                    - title: V3 Orders
                      route:
                        path: /orders-api
                      data:
                        $ref: ./V3 Orders.oas2.yml
                    - title: V3 Price Lists
                      route:
                        path: /pricelists-api
                      data:
                        $ref: ./V3 Price Lists.oas2.yml
                    - title: V3 Scripts
                      route:
                        path: /content-api
                      data:
                        $ref: ./V3 Content.oas2.yml
                    - title: V3 Subscribers
                      route:
                        path: /customers-api
                      data:
                        $ref: ./V3 Subscribers.oas2.yml
                    - title: V3 Themes
                      route:
                        path: /themes-api
                      data:
                        $ref: ./V3 Themes.oas2.yml
              - title: Storefront API's
                route:
                  path: /storefront-api
                data:
                  children:
                    - title: Storefront Cart
                      route:
                        path: /storefront-cart
                      data:
                        $ref: ./Storefront Cart API.oas2.yml
                    - title: Storefront Checkout
                      route:
                        path: /storefront-checkout
                      data:
                        $ref: ./Storefront Checkout API.oas2.yml
                    - title: Storefront Orders
                      route:
                        path: /storefront-orders
                      data:
                        $ref: ./Storefront Orders.oas2.yml
              - title: Server to Server API's
                route:
                  path: /server-to-server-api
                data:
                  children:
                    - title: Server to Server Cart
                      route:
                        path: /server-server-cart
                      data: {}
                    - title: Server to Server Checkout
                      route:
                        path: /server-server-checkout
                      data: {}
              - title: V2 API
                route:
                  path: /v2-api
                data:
                  $ref: ./BigCommerce V2 API.oas2.yml
        - title: Legacy
          route:
            path: /legacy
          data: {}
  /changelog:
    title: Changelog
    data:
      $ref: ./Changelog.html
  /tools-resources:
    title: Tools & Resources
    data:
      $ref: ./Tools & Resources.html
  /legacy:
    title: Legacy
    data:
      children:
        - title: Blueprint Themes
          route:
            path: /blueprint-themes
          data:
            children:
              - title: reCAPTCHA v2
                route:
                  path: /recaptcha-two
                data:
                  blocks:
                    - type: html
                      data: "<h1>ReCaptcha 2</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#better-spam-deterrance\">Better Spam Deterrance</a></li>\n\t\t<li><a href=\"#blueprint-how-to-upgrade-recaptcha\">How to Upgrade</a></li>\n\t\t<li><a href=\"#blueprint-supported-browsers\">Supported Browsers</a></li>\n\t\t</ul>\n</div>"
                    - type: text
                      data: >-
                        To deter spam submission through storefront forms,
                        BigCommerce now supports Google [reCAPTCHA
                        v2](https://support.google.com/recaptcha/?hl=en#6080933)
                        challenges, to distinguish human customers/visitors from
                        automated bots.
                      header: {}
                    - type: text
                      data: >
                        ## Better Spam Deterrence


                        We recommend that all storefront themes take advantage
                        of this upgraded bot detection. However, BigCommerce's
                        legacy Blueprint themes were last published in our Theme
                        Marketplace before we implemented reCAPTCHA v2.
                        Therefore, please use the following instructions to
                        update your Blueprint-based theme with the
                        best-available deterrent against automated spam.
                      header:
                        anchor: better-spam-deterrance
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## How to Upgrade


                        To incorporate reCAPTCHA v2, you will need to update
                        script references in these three template files: 


                        * `Panels/CreateAccountForm.html`

                        * `page_contact_form.html`

                        * `product_comments.html`
                      header:
                        anchor: blueprint-how-to-upgrade-recaptcha
                    - type: callout
                      data:
                        type: error
                        body: >-
                          Please back up each file before making any changes. 


                          The instructions below are based on the default
                          Blueprint theme (Classic Next), as it was last
                          published in BigCommerce’s Theme Marketplace.
                          Therefore, the HTML markup will vary, based on
                          customizations you have already made to this theme, or
                          to other Marketplace themes.
                        title: |2
                           Updating Safely 
                    - type: text
                      data: >-
                        ### Script Tag to Remove

                        Search each of the three template files for a
                        ``<script>`` tag like the following. If you find it,
                        delete the whole tag. (This script invokes a legacy
                        reCAPTCHA v1 challenge:)
                    - type: code
                      data: |-
                        <script type="text/javascript"> 
                         var RecaptchaOptions = { 
                         theme : 'clean' or 'white' 
                         }; 
                         </script>
                      header:
                        title: Script Tag to Remove
                      config:
                        mode: html
                    - type: text
                      data: >+
                        ### Variable to Remove


                        Alternately, you might see the same `RecaptchaOptions`
                        variable inside a different `<script>` tag at the top of
                        the same three templates. If so, delete the lines shown
                        here:

                    - type: code
                      data: |
                        var RecaptchaOptions = { 
                         theme : 'clean' or 'white'
                         };
                      config:
                        mode: js
                    - type: text
                      data: >-
                        ### reCAPTCHA Script to Update


                        Next, in each of the three template files, replace the
                        "before" code block just below with the simplified
                        "after" code that follows.



                        #### Replace this (before):
                      header: {}
                    - type: code
                      data: >-
                        <script type="text/javascript"

                        src="https://www.google.com/recaptcha/api/challenge?k=%%GLOBAL_ReCaptchaAPIKeyPublic%%">

                        </script>


                        <noscript>

                        <iframe
                        src="https://www.google.com/recaptcha/api/noscript?k=%%GLOBAL_ReCaptchaAPIKeyPublic%%"

                        height="300" width="500" frameborder="0"></iframe>

                        <br>

                        <textarea name="recaptcha_challenge_field" rows="3"
                        cols="40">

                        </textarea>

                        <input type="hidden" name="recaptcha_response_field"

                        value="manual_challenge">

                        </noscript>
                      config:
                        mode: html
                    - type: text
                      data: |
                        #### ...with this (after):
                    - type: code
                      data: |
                        %%GLOBAL_ReCaptchaMarkup%%
                      config:
                        mode: java
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Supported Browsers 


                        Below are the browsers supported for the BigCommerce
                        control panel. We drop support when a version falls
                        below 2% of usage. The browsers are sorted by
                        popularity, with the most popular browsers at the top.


                        | Desktop |

                        | --- |

                        | Chrome latest |

                        | Firefox latest |

                        | Internet Explorer 11 or later |

                        | Safari latest |


                        For a current list of target browsers (desktop and
                        mobile) that BigCommerce supports for _storefronts_
                        using our themes, please see <NOBR><a
                        href="https://forum.bigcommerce.com/s/article/Themes-Supported-Browsers"
                        target="_blank">this support page</a>.</nobr>
                      header:
                        anchor: blueprint-supported-browsers
              - title: Anatomy of a Theme
                route:
                  path: /anatomy-of-a-theme
                data:
                  blocks:
                    - type: html
                      data: "<h1>Anatomy of a Theme</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3>On This Page</h3>\n\t<ul>\n\t\t<li><a href=\"#directory-structure\">Directory Structure</a></li>\n\t\t<li><a href=\"#blueprint-images\">Images</a></li>\n\t\t<li><a href=\"#blueprint-layouts\">Layouts</a></li>\n    <li><a href=\"#blueprint-panels\">Panels</a></li>\n    <li><a href=\"#blueprint-snippets\">Snippets</a></li>\n    <li><a href=\"#blueprint-styles\">Styles</a></li>\n\t\t</ul>\n</div>"
                    - type: text
                      data: >-
                        Themes are built using a powerful template system that
                        enables designers and developers familiar with CSS and
                        HTML to modify the presentation and structure of a
                        BigCommerce store.
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Directory Structure


                        Theme files that apply to a store design are organized
                        in several different directories, as follows:


                        *   **Images**

                        *   **Panels**

                        *   **Snippets**

                        *   **Styles**
                      header:
                        anchor: directory-structure
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Images


                        Theme specific static images (referenced from CSS, or in
                        image tags).
                      header:
                        anchor: blueprint-images
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Layouts


                        Layout templates provide the base HTML structure that
                        wraps storefront page content. Each layout file
                        corresponds to a specific page.


                        For example, `product.html` refers to the page that’s
                        shown when a customer is viewing the details of a
                        product.


                        Most layout files contain nothing more than references
                        to individual panels to be shown on a page. These panels
                        are contained in div tags that generally define left,
                        center, or right columns of the page.
                      header:
                        anchor: blueprint-layouts
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Panels


                        Panels provide reusable blocks or dynamic sections of
                        content.


                        For example, the `SideCategoryList` panel builds a list
                        of categories to be shown throughout the store.


                        Panels are generally referenced directly from layout
                        templates. They define which content should be shown on
                        a particular page and handle the generation of that
                        specific content.


                        Some panels contain strictly static content (such as the
                        store name) whilst others generate content dynamically.
                        Dynamically generated panels cannot be created ad-hoc as
                        they are linked to specific data and logic within the
                        application.
                      header:
                        anchor: blueprint-panels
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Snippets


                        Snippets are templates containing a fragment of HTML
                        that can be embedded multiple times in a page, either
                        from direct references or from being part of a loop that
                        iterates over the items in a list.


                        For example, the `HomeFeaturedProductsItem` snippet
                        renders each individual product listed in the
                        `HomeFeaturedProducts` panel.
                      header:
                        anchor: blueprint-snippets
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Styles


                        Primary layout stylesheets for the Theme, with
                        `styles.css` being the core file.
                      header:
                        anchor: blueprint-styles
              - title: Blueprint and Developer Mode
                route:
                  path: /blueprint-and-developer-mode
                data:
                  blocks:
                    - type: text
                      data: "<h1>Blueprint and Developer Mode</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3>On This Page</h3>\n\t<ul>\n\t\t<li><a href=\"#foundation-for-creating-themes\">A Foundation for Creating Themes</a></li>\n\t\t<li><a href=\"#setting-up-your-environment\">Setting Up Your Environment</a></li>\n\t\t</ul>\n</div>"
                    - type: callout
                      data:
                        title: Restricted/Grandfathered Access
                        body: >-
                          As of November 2016, new BigCommerce stores are being
                          offered themes exclusively from BigCommerce's new <a
                          href="https://support.bigcommerce.com/articles/Public/The-Stencil-Theme-Platform"
                          target="_blank">Stencil</a> theme platform. For
                          existing stores, the control panel's <NOBR><b>Themes
                          Marketplace</b></nobr> and <NOBR><b>My
                          Themes</b></nobr> pages will show only those Blueprint
                          themes that have been applied to the store and/or
                          purchased before November 2016. <br><br> 


                          This means that the workflow below will work only for
                          stores that have applied or purchased at least one
                          Blueprint theme before November 2016. For information
                          about developing on the current Stencil platform,
                          please see <a
                          href="https://stencil.bigcommerce.com/docs/"
                          target="_blank">this developer documentation</a>.
                        type: warning
                    - type: text
                      data: >-
                        ## A Foundation for Creating Themes 


                        Our (legacy) Blueprint "Classic Next" base theme
                        provides a starting point for creating a new theme. This
                        theme includes responsive support out-of-the-box, so it
                        works with lower resolutions like those on mobile
                        devices. The visual design has been stripped back, so
                        you can create from a clean canvas.


                        <a href="https://blueprint-demo.mybigcommerce.com"
                        target="_blank">View the demo</a>.
                      header:
                        anchor: foundation-for-creating-themes
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Setting Up Your Environment 


                        Follow these steps to start developing using the
                        Blueprint theme:


                        1.  To enable the Blueprint theme on your store, simply
                        log in to the control panel, and place
                        <NOBR>`/index.php?ToDo=viewTemplates&dev=enable`
                        </nobr>after `/admin`.<br>
                            (For example: <NOBR>`https://store-123abmy.mybigcommerce.com/admin/index.php?ToDo=viewTemplates&dev=enable`.</nobr>)
                        2.  Apply the Blueprint theme.

                        3.  Connect to the site via <a
                        href="https://forum.bigcommerce.com/s/article/File-Access-WebDAV"
                        target="_blank">WebDAV</a>.

                        4.  Once connected via WebDav, navigate to the
                        `/template/` folder, where you will have access to all
                        the files that make up a theme.

                        5.  To make a change to a file, just download the file,
                        edit it, and then upload your altered version.

                        6.  Every time you make changes to any files, you will
                        need to upload them through WebDAV for the changes to be
                        reflected on your site.
                      header:
                        anchor: setting-up-your-environment
              - title: Theme Update Process
                route:
                  path: /blueprint-theme-update-process
                data:
                  blocks:
                    - type: html
                      data: "<h1>Theme Update Process</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3>On This Page</h3>\n\t<ul>\n\t\t<li><a href=\"#theme-update-prerequisites\">Prerequisites</a></li>\n\t\t<li><a href=\"#blueprint-theme-update-process\">Update Process</a></li>\n    <li><a href=\"#theme-update-other-requirements\">Requirements</a></li>\n  \n\t\t</ul>\n</div>"
                    - type: text
                      data: >-
                        Here is how BigCommerce and our partners collaborate to
                        integrate a partner's theme changes/updates into the
                        BigCommerce Theme Marketplace (which merchants also know
                        as our "theme store"):
                    - type: text
                      data: >-
                        ## Prerequisites 


                        Integrating a partner's theme changes requires these
                        preconditions:


                        *   Partner has an existing theme in the BigCommerce
                        Theme Marketplace.


                        *   BigCommerce sets up a Theme Development store (or
                        converts an existing regular store) and applies the
                        theme. All theme files will automatically be copied into
                        the WebDAV `/template/` directory.
                      header:
                        anchor: theme-update-prerequisites
                    - type: callout
                      data:
                        title: Template Path Abstracted
                        body: >
                          The Theme Development store resolves the
                          %%GLOBAL_TPL_PATH%% variable into /template/.
                          Therefore, assets will be pulled from the /template/
                          directory, which is accessible via WebDAV or via the
                          BigCommerce control panel.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Update Process 


                        1.  The partner switches on Theme Development mode, by
                        using:  

                        `http://<STORE>/admin/index.php?ToDo=viewTemplates&dev=enable`.

                        2.  The partner asks BigCommerce to switch a theme.
                        (Partners currently cannot switch it directly, because
                        it’s a paid theme.)
                      header:
                        anchor: blueprint-theme-update-process
                    - type: callout
                      data:
                        type: error
                        body: >-
                          This step will wipe out all files in the /template/
                          directory and copy in the latest version of the
                          integrated theme.
                    - type: text
                      data: >-
                        3.  The partner pulls changes from BigCommerce's GitHub
                        fork, to get the most recent version onto their local
                        machine as well.

                        4.  The partner makes appropriate changes to CSS/HTML
                        files.

                        5.  The partner commits their changes into the feature
                        branch, and opens a pull request against the BigCommerce
                        fork.
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          If BigCommerce made conflicting changes (which should
                          happen only when resolving urgent issues), the partner
                          might need to rebase changes (using git rebase master)
                          in order to resolve the conflicts.
                    - type: text
                      data: >-
                        6.  Partner [emails](mailto:themestore@bigcommerce.com)
                        their Git URL to the BigCommerce Theme Marketplace.

                        7.  BigCommerce integrates changes into BigCommerce
                        Themes.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Other Requirements 


                        *   Partners must not change the repository's directory
                        structure or directory names.

                        *   Files should have permission 644 (`rw-r–r–`).

                        *   Directories should have permission 755
                        (`drwxr-x-r-x`).
                      header:
                        anchor: theme-update-other-requirements
              - title: Style Editor
                route:
                  path: /style-editor
                data:
                  blocks:
                    - type: html
                      data: "<h1>Style Editor/h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3>On This Page</h3>\n\t<ul>\n\t\t<li><a href=\"#what-is-lessjs\">What is Less.js?</a></li>\n\t\t<li><a href=\"#integrating-theme-style-editor\">Integrating a Theme with the Style Editor</a></li>\n\t\t<li><a href=\"#testing-style-editor-with-theme\">Testing Style Editor with Your Theme</a></li>\n \n\t\t</ul>\n</div>"
                    - type: text
                      data: >
                        Style Editor allows users to customize the look and feel
                        of their BigCommerce store, without needing to know HTML
                        or CSS conventions. Using a simple WYSIWYG interface,
                        users can edit colors and fonts, then see the changes
                        simultaneously in a live preview.


                        Style Editor uses Less.js as a CSS preprocessor. This
                        allows Style Editor to take advantage of variables and
                        other functions to ensure design consistency.
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## What Is Less.js? 


                        Less (formally, Less.js) is a CSS preprocessor that
                        allows theme designers to use advanced functions and
                        programming principles in their CSS. A JavaScript
                        compiler runs over the Less files, and converts them
                        into usable CSS that can be included in themes.


                        For more information on examples, techniques, and how to
                        install Less, please see <a href="http://lesscss.org/"
                        target="_blank">lesscss.org</a>.
                      header:
                        anchor: what-is-lessjs
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Integrating a Theme with the Style Editor 


                        The Style Editor uses a specific group of files to build
                        its user interface, and to compile and generate the
                        stylesheet. BigCommerce’s base developer theme,
                        Blueprint, already contains these out-of-the-box. The
                        files are stored in the `Styles/less` directory.


                        The Style Editor depends on these files:


                        *   `style-editor-variables.less`

                        *   `internal-variables.less`

                        *   `init.less`

                        *   `theme.less`


                        ### style-editor-variables.less 


                        Style Editor uses this file to generate its user
                        interface. Here, you can enter variables for colours,
                        fonts and numbers that will help the merchant customize
                        the design of the theme. You can separate these
                        variables out into sections with headings to help
                        categorize the variables in a logical manner. No actual
                        CSS is written in this file.


                        There are some syntax patterns involved that Style
                        Editor will understand to help you customize the UI.
                        Special syntax:


                        `@color-your-text-here` — This is the naming convention
                        for a color variable. The style editor will generate
                        this as a color picker, with the value of the variable
                        set as the color picker’s default hexadecimal color
                        value.


                        For example:
                      header:
                        anchor: integrating-theme-style-editor
                    - type: code
                      data: '@color-header-background: #FFFFFF;'
                      config:
                        mode: css
                    - type: text
                      data: >-
                        This will generate a color picker with the label “Header
                        Background”, set to #FFFFFF (white) by default.


                        `@font-your-text-here` — This is the naming convention
                        for a font variable. The style editor will generate this
                        as a dropdown, preloaded with your theme’s predefined
                        fonts. The variable’s value will be preselected.


                        For example:
                    - type: code
                      data: '@font-page-text: "Open Sans",Helvetica,Arial,sans-serif;'
                      config:
                        mode: css
                    - type: text
                      data: >-
                        This will generate a dropdown with the label “Page
                        Text”, and with the “Open Sans” font preselected. The
                        dropdown’s other options will be the predefined list of
                        fonts you’ve provided.


                        `@font-declaration` — This variable will store all the
                        default fonts (and their fallbacks) for the style
                        editor. It will use these fonts in the font dropdown
                        mentioned in the above point.


                        For example:
                    - type: code
                      data: >
                        @font-declaration: '{ "Lato":["Lato", "Arial",
                        "sans-serif"], "Freckle Face":["Freckle Face",
                        "cursive"]}';
                      config:
                        mode: css
                    - type: text
                      data: >-
                        This will populate all font drop-downs with the fonts
                        “Lato” and “Freckle Face,” and if one of them is
                        selected, the fonts for that variable will be set to the
                        values in the corresponding array of fonts. For example,
                        “Lato” will set the fonts to “Lato”, Arial, sans-serif.


                        To use these fonts in the Style Editor, they must be
                        included in the style editor variables file through an
                        import. For the above example, you would include the
                        styles from Google Fonts like so:
                    - type: code
                      data: >
                        @import
                        url(//fonts.googleapis.com/css?family=Lato|Freckle+Face);
                      config:
                        mode: css
                    - type: text
                      data: >
                        `@color-declaration` — This variable will store all the
                        default colors for the style editor. It will list these
                        colours in the color picker’s palette after all the
                        color picker’s defaults.


                        For example:
                    - type: code
                      data: '@color-declaration: ''["#FF7700, #9966CC" ]'';'
                      config:
                        mode: css
                    - type: text
                      data: >
                        This will add a shade of orange and a shade of purple to
                        the end of the list of colors selectable in the color
                        picker.


                        `//! @section: your text here` — You can group variables
                        into sections with headings using this syntax to help
                        your users read and understand your variables more
                        easily.


                        For example:


                        `//! @section: Header`  

                        `@color-header-background: #FFF;`  

                        `//! @endsection`  of


                        This will create a section in the left navigation with
                        the title “Header”, which will house the “Header
                        Background” variable.


                        More information on syntax, and examples, can be found
                        in the comments of the style-editor-variables.less file
                        found in Blueprint.
                    - type: text
                      data: >
                        ### internal-variables.less 


                        This file is for you to store the variables that you may
                        need to use, but don’t want the Style editor to see. For
                        example, you can use it to create a hierarchy within
                        your Less file, so that:


                        *   The user sets a value to @color-store-name;

                        *   in internal-variables.less, @main-accent:
                        @color-store-name;

                        *   in init.less, we set a:hover {color: @main-accent};


                        In this example, the link hover color will be set to
                        whatever the store name color is. We can add as many
                        selectors as we want to this css statement, depending on
                        our design.


                        This way, we can reuse the color that gets set to
                        `@color-store-name` as the color for elements that we
                        may not want to be edited in the Style Editor, but will
                        now carry on the colour of the store name to create
                        consistency within your design.
                    - type: text
                      data: >
                        ### init.less 


                        This is where you initialize the use of the variables.
                        This file contains all the CSS that will be compiled and
                        generated into the theme.css file. For example, the
                        @color-store-name can now be applied to the `#HeaderLogo
                        h1` element by saying:
                    - type: code
                      data: |
                        #HeaderLogo h1 {
                        color: @color-store-name
                        }
                      config:
                        mode: css
                    - type: text
                      data: >+
                        ### theme.less 


                        The file that ultimately gets compiled into `theme.css`.
                        This just uses `@import` to include the other three Less
                        files for compilation. The Style Editor will read this
                        file for instructions on how to compile your styles
                        using Less.


                        Compiling your Less files


                        Once you have finished working on your `.less` files,
                        _don’t forget to compile them!_ If you are using the
                        command line, you should be doing something similar to:

                    - type: code
                      data: |+
                        lessc Styles/less/theme.less > Styles/theme.css 


                      config:
                        mode: html
                    - type: text
                      data: >-
                        This will use the `theme.less` file to generate the
                        `theme.css` file into your theme's `Styles/` folder.


                        If you find that you have to make a change to
                        `theme.css`, please don't forget to replicate this
                        change in `theme.less` (but more preferably, in
                        `init.less`). Otherwise, every time you recompile the
                        less files, this change will be overwritten.


                        Less offers a variety of compilation methods, including
                        applications for both Windows and Mac that you can use
                        if you prefer not to use the command prompt/terminal.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Testing Style Editor with Your Theme 


                        If you'd like to add Style Editor support to your theme,
                        you can enable the Style Editor on just your store.
                        Simply log in to the control panel and place
                        `/index.php?ToDo=viewTemplates&dev=enable` after
                        `/admin`.<br>

                        (For example:
                        <NOBR>`https://store-123abmy.mybigcommerce.com/admin/index.php?ToDo=viewTemplates&dev=enable`</nobr>)


                        This will enable [Developer Mode](#) for your store,
                        which also enables Blueprint and other features for
                        theme developers. You can [use Blueprint](#) as a basis
                        for creating new themes.
                      header:
                        anchor: testing-style-editor-with-theme
              - title: Product Filtering Toolkit
                route:
                  path: /product-filtering-toolkit
                data:
                  blocks:
                    - type: html
                      data: "<h1>Product Filtering Toolkit</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3>On This Page</h3>\n\t<ul>\n\t\t<li><a href=\"#creating-new-theme-product-filtering\">Creating a New Theme With Product Filtering</a></li>\n\t\t<li><a href=\"#enabling-product-filtering-customized-theme\">Enabling Product Filtering for Your Customized Theme</a></li>\n\t\t<li><a href=\"#implementing-product-filtering-your-theme\">Implementing Product Filtering in Your Theme</a></li>\n    <li><a href=\"#allowing-filtering-on-off\">Allowing For Filtering On/Off</a></li>\n    <li><a href=\"#category-filtering-details\">Category Filtering Details</a></li>\n\t\t</ul>\n</div>"
                    - type: text
                      data: >
                        Product filtering (also known as faceted search) enables
                        shoppers to refine product searches based on multiple
                        attributes like price, size, ratings, etc. For a store
                        owner's view of administering this feature, please see
                        <a
                        href="https://forum.bigcommerce.com/s/article/Product-Filtering-Settings"
                        target="_blank">this KB article</a>. 
                    - type: callout
                      data:
                        type: warning
                        title: Requirements/Restrictions
                        body: >-
                          <ul>

                          <li>

                          Adding product filtering to a theme is recommended for
                          experienced theme developers only. You must have
                          facility with HTML and CSS, and must also familiarize
                          yourself with how BigCommerce themes are structured
                          and operate. </li>

                          <li>

                          Product filtering is a Pro/Enterprise feature. To
                          enable it on an active public store, you must upgrade
                          to a Pro or Enterprise plan.

                          </li>

                          <li>

                          As noted below, we recommend implementing product
                          filtering on a temporary sandbox store. You can create
                          a trial store, and then upload your theme
                          customizations to that store via WebDAV to replicate
                          your local changes.</li>

                          </ul>
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Creating a New Theme with Product Filtering 


                        Product filtering is fully functional in the Blueprint
                        base theme. Once you’ve enabled [Developer
                        Mode](#blueprint-and-developer-mode), you’ll be able to
                        access this base theme and add product filtering to your
                        developer store.
                      header:
                        anchor: creating-new-theme-product-filtering
                    - type: callout
                      data:
                        type: warning
                        title: >-
                          Restricted/Grandfathered Access to Blueprint Base
                          Theme
                        body: >-
                          The Blueprint base theme is now available only to
                          stores that applied it before November 2016. <br><br>


                          As of that date, stores are being offered themes only
                          from BigCommerce's new <a
                          href="https://support.bigcommerce.com/articles/Public/The-Stencil-Theme-Platform"
                          target="_blank">Stencil</a> theme platform. Within a
                          store's control panel, the <NOBR><b>Themes
                          Marketplace</b></nobr> and <NOBR><b>My
                          Themes</b></nobr> pages will show only those Blueprint
                          themes that have been applied to the store and/or
                          purchased before November 2016. <br><br> 


                          For information about developing on the current
                          Stencil platform, please see <a
                          href="https://stencil.bigcommerce.com/docs/"
                          target="_blank">this developer documentation</a>.
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Enabling Product Filtering for Your Customized Theme 


                        To enable product filtering, just enable [Developer
                        Mode](#devmode) on your store. This will enable product
                        filtering on your store by default, regardless of
                        whether or not your theme and plan support it.
                      header:
                        anchor: enabling-product-filtering-customized-theme
                    - type: callout
                      data:
                        type: warning
                        title: Start with a Sandbox Store
                        body: >-
                          Depending on the customizations you have made to your
                          theme, enabling Developer Mode could have unexpected
                          results. <NOBR>We recommend</nobr> using a sandbox
                          store (not your main store) when applying these
                          changes for the first time.
                    - type: text
                      data: >+
                        If you are working with a new store, product filtering
                        might already work out-of-the-box for your theme.

                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Implementing Product Filtering in Your Theme 


                        Once you’ve enabled product filtering for your sandbox
                        store, you’ll need to get the most up-to-date Blueprint
                        files and copy them into your own theme. Here is how to
                        do so.
                      header:
                        anchor: implementing-product-filtering-your-theme
                    - type: callout
                      data:
                        type: warning
                        body: >-
                          As noted above, the Blueprint base theme is now
                          available only to stores that applied it before
                          November 2016.
                        title: |2
                           Restricted/Grandfathered Access to Blueprint Base Theme
                    - type: text
                      data: >-
                        1.  Enable [Developer Mode](#devmode) in your sandbox
                        store, if you haven’t already. This will enable the
                        Blueprint theme and the faceted search feature.

                        2.  Unless you’re starting from scratch, back up your
                        theme customizations.

                        3.  Select Blueprint as your store’s theme. 

                        4.  Download the Blueprint theme – don’t worry, you’ll
                        only need certain files for faceted search.

                        5.  Restore your theme from the backups you downloaded
                        in step 2.

                        6.  Upload the following files from Blueprint to your
                        sandbox store:
                           *   `Panels/FacetedSearch.html` – This panel contains the markup for your Faceted Search column. It calls all the panels for each of the searchable facets as well.
                            *   `Panels/FacetedSearchProductGrid.html` - This panel contains the markup for your list of product results when your category lists are set to "grid view".
                            *   `Panels/FacetedSearchProductList.html` - This panel contains the markup for your list of product results when your category lists are set to "list view".
                            *   `Panels/FacetedSearchTemplateCategory.html` – The panel that contains the markup for the Category facet.
                            *   `Panels/FacetedSearchTemplateMultichoice.html` – The panel that contains the markup for any facet containing multiple-choice check boxes.
                            *   `Panels/FacetedSearchTemplateRange.html` – The panel that contains the markup for facets containing ranges.
                            *   `Panels/FacetedSearchTemplateRating.html` – The panel that contains the markup for the Rating facet.
                            *   `Panels/FacetedSearchTemplateShowing.html` – The panel that contains the markup for the list of currently selected filters.
                            *   `Panels/FacetedSearchTemplateSingle.html` – The panel that contains the markup for any facet containing single-choice radio buttons.
                            *   `Panels/Pagination.html` – The panel that contains the markup for your pagination – note that this will not use any existing pagination panels that your theme may have.
                            *   `Styles/faceted-search.css` – This will be included in `FacetedSearch.html`, so you don’t need to add it to your `HTMLHead.html` file.

                        7.  Copy your `brands.html` page and name it
                        `brands_with_facets.html`.

                        8.  Copy your `search.html` page and name it
                        `search_with_facets.html`.

                        9.  Copy your `category.html` page and name it
                        `category_with_facets.html`.

                        10.  Include the required assets on your new facets
                        pages. You can use the facets pages from Blueprint for
                        reference (the assets will be named the same):
                           *   `%%Panel.FacetedSearch%%` – This is the main Faceted Search panel, and will call the rest of the panels it needs accordingly (including required JavaScript and CSS).
                            *   Add the `js-faceted-search-column` class to the container of your Faceted Search panel.
                            *   If you have a responsive theme, you can add the `Refine` button to your page, which toggles the Faceted Search column on or off. By default, this button displays only on mobile:<br>
                            `<button class="js-faceted-search-action btn"> %%LNG_FilterBy%% </button>`
                        11.  If the pages mentioned above don’t exist, you can
                        copy the existing pages from the Blueprint theme. Keep
                        in mind that you’ll need to modify these pages to suit
                        the structure of your theme.
                    - type: text
                      data: '---'
                    - type: text
                      data: >
                        ## Allowing For Filtering On/Off 


                        When faceted search is switched on, the following
                        templates will be used:


                        *   Brand pages > `brands_with_facets.html`

                        *   Search page > `search_with_facets.html`

                        *   Category pages > `category_with_facets.html`


                        When switched off:


                        *   Brand pages > `brands.html`

                        *   Search page > `search.html`

                        *   Category pages > `category.html`
                      header:
                        anchor: allowing-filtering-on-off
                    - type: callout
                      data:
                        type: warning
                        title: ' Clone and Rename Templates, Don’t Alter Originals'
                        body: >-
                          Development agencies should not modify the
                          <em>base</em> templates of the
                          <code>brand.html</code>, <code>search.html</code>, or
                          <code>category.html</code> pages to include faceted
                          search. Clients who are not on a Pro or Enterprise
                          plan do not get faceted search, so if you include it
                          on <code>category.html</code>, <code>brand.html</code>
                          or <code>search.html</code> page, your theme will be
                          useless to those clients.
                    - type: text
                      data: >-
                        ## Category Filtering Details 


                        When you turn on product filtering for a store, it will
                        automatically switch all `Category Layout File`s to your
                        new `category_with_facets.html` page. To view product
                        filtering on Category pages, you must ensure that the
                        `Category Layout File` is set to
                        `category_with_facets.html`.


                        You will not see the Category filter on storefront
                        Category pages. This has been hidden for SEO reasons.
                      header:
                        anchor: category-filtering-details
              - title: Template Syntax
                route:
                  path: /blueprint-template-syntax
                data:
                  blocks:
                    - type: html
                      data: "<h1>Template Syntax</h1>\n<div class=\"otp\" id=\"no-index\">\n\t<h3>On This Page</h3>\n\t<ul>\n\t\t<li><a href=\"#global-variables-references\">Global-Variables References/a></li>\n\t\t<li><a href=\"#panel-references\">Panel References/a></li>\n\t\t<li><a href=\"#snippet-references\">Snippet References</a></li>\n    <li><a href=\"#referencing-distributed-theme-assets\">Referencing Distributed Theme Assets</a></li>\n    <li><a href=\"#file-includes\">File Includes</a></li>\n</ul>\n</div>"
                    - type: text
                      data: >-
                        Each of the layout, panel, and snippet files in a theme
                        uses variables (also called placeholders) to show
                        external content or content fetched from the database
                        (such as the name of a product).


                        Template variables are enclosed within `%%` markers.
                        These types of variables are available for use in
                        templates: global variables, string variables, panel
                        references, snippet references, and file includes.
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Global-Variables References 



                        Global variables are used to render dynamic content into
                        a template. Global variables are referenced using the
                        following syntax:


                        <pre>%%GLOBAL_[placeholder_name]%%</pre>


                        For example:


                        <pre>%%GLOBAL_ProductName%%</pre>


                        Specific variables' availability depends on the layout
                        template that you're editing. For example, the variable
                        for a product's description is available on the product
                        details page, but not on the category view/product
                        listing page.
                      header:
                        anchor: global-variables-references
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Panel References 


                        Panels are the different blocks used by BigCommerce to
                        build a page. Panels are referenced both inside layout
                        files and inside other panel files.


                        Panels are referenced in templates as follows, where
                        `[panel_name]` is a placeholder for the name of a file
                        in the theme’s Panels directory:


                        <pre>%%Panel.[panel_name]%%</pre>


                        For example:


                        <pre>%%Panel.HomeFeaturedProducts%%</pre>


                        This panel reference will load in the content from the
                        `Panels/HomeFeaturedProducts.html` panel file.
                      header:
                        anchor: panel-references
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Snippet References 


                        Snippets are templates containing HTML, which you can
                        use multiple times on one page – either by using them in
                        different parts of the template, or by including them a
                        loop. For example, a loop might build a list of products
                        on the page, with each product in the list being a
                        repeated version of the same snippet.


                        Snippets are referenced in templates as follows:


                        <pre>%%SNIPPET_[snippet_name]%%</pre>


                        In most cases, this will correspond to a similarly named
                        file in the theme’s Snippets directory. For example:


                        <pre>%%SNIPPET_HomeFeaturedProducts%%</pre>


                        This snippet reference will contain repeated copies of
                        `Snippets/HomeFeaturedProductsItem.html`, one for each
                        featured product to be shown in the list.
                      header:
                        anchor: snippet-references
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## Referencing Distributed Theme Assets 


                        After the Blueprint framework was first released,
                        BigCommerce added the ability to reference theme assets
                        that are stored remotely on a CDN (content delivery
                        network). This section provides examples that map
                        first-generation Blueprint syntax to updated syntax for
                        distributed assets.


                        You can use WebDAV to upload your own custom theme
                        assets (JavaScripts, stylesheets, images, fonts, etc).
                        In your HTML, reference these assets that aren’t present
                        in the base theme using the `ASSET` syntax:


                        <pre>%%ASSET_[path_to_asset]%%</pre>


                        This syntax will output an absolute URL like: 


                        <pre>http://cdn-host/templates/__custom/path_to_asset?t=timestamp`</pre>


                        This loads the custom asset from our CDN server, and
                        includes a cache-busting querystring.


                        For example:


                        <pre>%%ASSET_Styles/myownstyle.css%%</pre>


                        ...will be output as:


                        <pre>http://cdn-host/templates/__custom/Styles/myonwstyle.css?t=123</pre>
                      header:
                        anchor: referencing-distributed-theme-assets
                    - type: text
                      data: >
                        #### Syntax Examples 


                        The following tables map earlier to current syntax:


                        ##### Assets in CSS Files 


                        | Previous Syntax | Updated Syntax (CDN) |

                        |-----------------|---------------------|

                        | `url(/template/images/foo.jpg)` |
                        `url(%%ASSET_images/foo.jpg%%)` |

                        | `url(/templates/__custom/images/foo.jpg)` |
                        `url(%%ASSET_images/foo.jpg%%)` |

                        | `url(/template/foo/bar/font.woff)` |
                        `url(%%ASSET_foo/bar/font.woff%%)` |

                        | `url(../images/foo.jpg)` |
                        `url(%%ASSET_images/foo.jpg%%)` |

                        | `url(icons/foo.ico)` |
                        `url(%%ASSET_Styles/icons/foo.ico%%)` |

                        | `url(//mystore.com/template/images/foo.jpg)` |
                        `url(%%ASSET_images/foo.jpg%%)` |


                        ##### Assets in HTML Files 


                        | Previous Syntax | Updated Syntax (CDN) |

                        |---------------|----------------|

                        | `<img src="../images/foo.jpg" />` | `<img
                        src="%%ASSET_images/foo.jpg%%" />` |

                        | `<img src="//mystore.com/template/images/foo.jpg">` |
                        `<img src="%%ASSET_images/foo.jpg%%" />` |

                        | `<link href="/template/Styles/foo.css" />` | `<link
                        href="%%ASSET_Styles/foo.css%%" />` |

                        | `<script src="/template/js/foo.js%%"></script>` |
                        `<script src="%%ASSET_js/foo.js%%"></script>` |


                        ##### Assets Outside of the /template/ Directory 


                        The `ASSET` variable can be used only with files and
                        folders inside the `/template/` directory. To take
                        advantage of a CDN's benefits, we strongly recommend
                        moving your assets to the `/template/` directory.
                        However, if you need to keep assets outside of the
                        `/template/` directory, the best practice is to use
                        _protocol-relative_, absolute or fully qualified, URLs.
                        Here are some examples:


                        ```

                        <img src="//mystore.com/content/images/foo.jpg" />

                        url(//mystore.com/content/images/foo.jpg")

                        <link href="//mystore.com/content/foo.css"
                        rel="stylesheet" type="text/css" />

                        ```
                    - type: text
                      data: '---'
                    - type: text
                      data: >-
                        ## File Includes 


                        You can include another file within a template, using
                        file include variables. This practice is extremely
                        useful for external files such as banners or
                        site-network headers.


                        Includes are referenced within template files as
                        follows:


                        <pre>

                        %%Include.http://www.example.com/remote_file.html%%

                        %%Include.https://www.example.com/secure_remote_file.html%%</pre>


                        Notes: Included external links will not follow redirects
                        (http status code 301 or 302). So if a redirect is
                        encountered, it will not include the content.
                      header:
                        anchor: file-includes
              - title: Store-Wide Global Panels
                route:
                  path: /store-wide-global-panels
                data:
                  blocks:
                    - type: html
                      data: |-
                        <h1>Store-Wide Global Panels</h1>
                        <br>
                        <br>
                    - type: text
                      data: >-
                        The following panels are available store-wide:


                        | Variable | Description |

                        |-----------------|------------------|

                        | `HTMLHead` | Content shown between the `<head>` tags
                        of each page. This includes code for visitor tracking,
                        RSS feeds, etc. |

                        | `Header` | The header for each page in the store
                        (includes the `TopMenu` and `HeaderSearch` panels) |

                        | `Footer` | The footer for each page in the store. |

                        | `SideCategoryList` | A list of categories shown in the
                        store, to the category depth configured in the control
                        panel. |

                        | `SideNewProducts` | A list of products recently added
                        to the store. |

                        | `SideNewsletterBox` | The newsletter subscription
                        form. |

                        | `SideShopByBrand` | A list of popular brands on the
                        store (based on the number of products in each brand). |

                        | `SideProductRecentlyViewed` | A list of the products
                        recently viewed by the current customer. |

                        | `SideTopSellers` | A list of top selling-products on
                        the store (based purely on the number of times the
                        product has sold on this store). |

                        | `SidePopularProducts` | A list of popular products on
                        the store (by average rating). |

                        | `SideLiveChatServices` | Any live chat service code
                        that has been integrated in to the store. |

                        | `SideCurrencySelector` | The store currency selection
                        box, containing the list of currencies configured on the
                        store. |

                        | `SideCartContents` | A list of items in currently in
                        the customer's cart. |

                        | `TopMenu` | The top navigation menu (`Home`, `My
                        Account`, `Sign In or Create Account`, etc.) |

                        | `PagesMenu` | A list of parent-level pages configured
                        on the store. |

                        | `HeaderSearch` | The search box included at the top of
                        each of the store's pages. |
              - title: Store-Wide Global Variables
                route:
                  path: /store-wide-global-variables
                data:
                  blocks:
                    - type: html
                      data: |-
                        <h1>Store-Wide Global Variables</h1>
                        <br>
                        <br>
                    - type: text
                      data: >-
                        # Store-Wide Global Variables


                        The following GLOBAL variables are available from any
                        layout, panel, or snippet in the store, independent of
                        session status.


                        | Variable | Description |

                        | --- | --- |

                        | `%%GLOBAL_AllPricesAreInCurrency%%` | This variable
                        produces a text string that identifies the currency
                        currently active on the store. For example: <NOBR>`All
                        Prices are in USD`</nobr> |

                        | `%%GLOBAL_AlternateClass%%` | . |

                        | `%%GLOBAL_CdnAppPath%%` | The URI of the CDN
                        application. |

                        | `%%GLOBAL_CdnStorePath%%` | The URI to the store's CDN
                        directory. |

                        | `%%GLOBAL_CharacterSet%%` | The character set
                        currently active on the store. For example, UTF-8. |

                        | `%%GLOBAL_CheckoutLink%%` | The URI that initiates a
                        checkout sequence. |

                        | `%%GLOBAL_CurrentCustomerFirstName%%` | The first name
                        of the customer who is currently logged in. If no
                        customer is logged in, returns: `Guest` |

                        | `%%GLOBAL_CurrentCustomerLastName%%` | The last name
                        of the customer who is currently logged in. If no
                        customer is logged in, returns no content. |

                        | `%%GLOBAL_CustomerGroupId%%` | The ID of the customer
                        group for the currently logged-in user or guest. Blank
                        if none. |

                        | `%%GLOBAL_CustomerGroupName%%` | The name of the
                        customer group for the currently logged-in user or
                        guest. Blank if none. |

                        | `%%GLOBAL_Favicon%%` | The URI location of the favicon
                        file. |

                        | `%%GLOBAL_HeaderLogo%%` | The store's logo. This can
                        be either an image file or an HTML-formatted text
                        string. |

                        | `%%GLOBAL_ImageDirectory%%` | The name of the images
                        directory. |

                        | `%%GLOBAL_IMG_PATH%%` | The URI of the directory in
                        which the site's image files reside. |

                        | `%%GLOBAL_jQueryPath%%` | The URI of the minified
                        jQuery library in use. For
                        example:<br>`https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js`
                        |

                        | `%%GLOBAL_jQueryUIPath%%` | The path to the jQuery UI
                        script. For example:<br>
                        `https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.18/jquery-ui.js`
                        |

                        | `%%GLOBAL_LiveChatCodeEnabled%%` | A value
                        representing whether Live Chat is enabled or disabled.
                        For example: `none` |

                        | `%%GLOBAL_LoginOrLogoutText%%` | The HTML code of the
                        string (including links) providing the option to sign
                        into the store or to log out. For example: <NOBR>`Sign
                        in or Create an account`</nobr> |

                        | `%%GLOBAL_LogoText%%` | The text string used for the
                        store logo. |

                        | `%%GLOBAL_MASTER_THEME_PATH%%` | The URI of the
                        __master theme directory. |

                        | `%%GLOBAL_PageLink%%` | The URI of the page. |

                        | `%%GLOBAL_PageName%%` | The name of the page. For
                        example: <NOBR>`RSS Syndication`</nobr> |

                        | `%%GLOBAL_PoweredBy%%` | The string identifying the
                        software used by the store. For example: `Shopping Cart
                        Software by BigCommerce` |

                        | `%%GLOBAL_SHARED_GIFT_THEME_PATH%%` | The CDN URI of
                        the store's gift themes. |

                        | `%%GLOBAL_ShopPath%%` | The store's URI. If the page
                        is protected with TLS/SSL, this will be an HTTPS path. |

                        | `%%GLOBAL_ShopPathNormal%%` | The unencrypted URI of
                        the store, prefixed with HTTP. |

                        | `%%GLOBAL_ShopPathSSL%%` | The encrypted URI of the
                        store, prefixed with HTTPS. |

                        | `%%GLOBAL_ShowCookieWarningMessage%%` | A boolean
                        value that represents whether or not the display of a
                        cookie warning message is enabled or disabled. |

                        | `%%GLOBAL_SiteColor%%` | The current template's active
                        color scheme. |

                        | `%%GLOBAL_SitemapURL_HTML%%` | The URI to the store's
                        site map directory. |

                        | `%%GLOBAL_SocialMedia_Service_Class%%` | The name of
                        the social media class. For example: `#FFFFFF` |

                        | `%%GLOBAL_SocialMedia_Service_Url%%` | The URI to the
                        social media service. |

                        | `%%GLOBAL_SocialMediaService_Name%%` | The name of the
                        social media service. For example: `LinkedIn` |

                        | `%%GLOBAL_StoreLogo%%` | The file name of the store
                        logo image. |

                        | `%%GLOBAL_StoreName%%` | The name of the store. |

                        | `%%GLOBAL_StorePhoneNumber%%` | The phone number of
                        the store. |

                        | `%%GLOBAL_STYLE_PATH%%` | The CDN URI of the active
                        theme's styles directory. |

                        | `%%GLOBAL_SwapFrequency%%` | . |

                        | `%%GLOBAL_TPL_PATH%%` | The CDN URI of the theme. |

                        | `%%GLOBAL_value%%` | The type of value. For example:
                        `Array` |

                        | `%%GLOBAL_Year%%` | The current year. For example:
                        `2015` |
              - title: Global Variables
                route:
                  path: /global-variables
                data:
                  blocks:
                    - type: html
                      data: <h1>Global Variables</h1>
                    - type: text
                      data: >
                        Blueprint themes use the following GLOBAL variables to
                        pull data from the store's database.


                        While these variables are prefixed with the word GLOBAL,
                        the data's availability actually varies per session,
                        layout, panel, and snippet. For the list of variables
                        truly available from anywhere in the store, regardless
                        of session status, please see [Store-Wide
                        Variables](/themes/#store_wide_variables").


                        The list below is sorted by the number of times that the
                        Blueprint base theme references the variable – with the
                        most frequently referenced variables at the top:
                    - type: text
                      data: >-
                        | Variable | Description |

                        | --- | --- |

                        | `%%GLOBAL_ShopPath%%` | The full URL to the store
                        without a trailing slash. If on an SSL based page, this
                        will be the HTTPS version of the store path. |

                        | `%%GLOBAL_IMG_PATH%%` | . |

                        | `%%GLOBAL_ProductName%%` | . |

                        | `%%GLOBAL_ProductId%%` | . |

                        | `%%GLOBAL_ShopPathNormal%%` | The normal (non SSL)
                        version of the store URL. |

                        | `%%GLOBAL_JSCacheToken%%` | . |

                        | `%%GLOBAL_ProductRating%%` | . |

                        | `%%GLOBAL_CdnAppPath%%` | . |

                        | `%%GLOBAL_ProductPrice%%` | . |

                        | `%%GLOBAL_ProductAddText%%` | . |

                        | `%%GLOBAL_ProductFieldId%%` | . |

                        | `%%GLOBAL_EmailFooter%%` | . |

                        | `%%GLOBAL_ProductLink%%` | . |

                        | `%%GLOBAL_ShopPathSSL%%` | The SSL version of the
                        store URL. |

                        | `%%GLOBAL_OrderId%%` | . |

                        | `%%GLOBAL_ProductThumb%%` | . |

                        | `%%GLOBAL_HideProductRating%%` | . |

                        | `%%GLOBAL_ProductURL%%` | . |

                        | `%%GLOBAL_TPL_PATH%%` | . |

                        | `%%GLOBAL_HideActionAdd%%` | . |

                        | `%%GLOBAL_StoreName%%` | The name of the store. |

                        | `%%GLOBAL_ProductQuantity%%` | . |

                        | `%%GLOBAL_AlternateClass%%` | . |

                        | `%%GLOBAL_CartItemId%%` | . |

                        | `%%GLOBAL_CompareLink%%` | . |

                        | `%%GLOBAL_HideCompareItems%%` | . |

                        | `%%GLOBAL_ProductOptions%%` | . |

                        | `%%GLOBAL_UpperAddressType%%` | . |

                        | `%%GLOBAL_ErrorMessage%%` | . |

                        | `%%GLOBAL_ProductNumber%%` | . |

                        | `%%GLOBAL_HeaderLogo%%` | . |

                        | `%%GLOBAL_GiftCertificateCode%%` | . |

                        | `%%GLOBAL_WishListMessage%%` | . |

                        | `%%GLOBAL_ProductFieldRequired%%` | . |

                        | `%%GLOBAL_FieldRequiredClass%%` | . |

                        | `%%GLOBAL_EmailHeader%%` | . |

                        | `%%GLOBAL_OrderAmount%%` | . |

                        | `%%GLOBAL_GiftCertificateTo%%` | . |

                        | `%%GLOBAL_ShipToBillingName%%` | . |

                        | `%%GLOBAL_SiteColor%%` | The current template’s active
                        color scheme. |

                        | `%%GLOBAL_ProductFieldName%%` | . |

                        | `%%GLOBAL_AddressId%%` | . |

                        | `%%GLOBAL_PageTitle%%` | . |

                        | `%%GLOBAL_CharacterSet%%` | . |

                        | `%%GLOBAL_SearchTrackClass%%` | . |

                        | `%%GLOBAL_ItemId%%` | . |

                        | `%%GLOBAL_ProductTotal%%` | . |

                        | `%%GLOBAL_ProductFieldInputSize%%` | . |

                        | `%%GLOBAL_ProductFieldValue%%` | . |

                        | `%%GLOBAL_AddressType%%` | . |

                        | `%%GLOBAL_HideWishlist%%` | . |

                        | `%%GLOBAL_VideoId%%` | . |

                        | `%%GLOBAL_SHARED_GIFT_THEME_PATH%%` | . |

                        | `%%GLOBAL_GiftCertificateAmount%%` | . |

                        | `%%GLOBAL_GiftCertificateFrom%%` | . |

                        | `%%GLOBAL_GiftCertificateMessage%%` | . |

                        | `%%GLOBAL_GiftCertificateExpiryInfo%%` | . |

                        | `%%GLOBAL_HideShippingOptions%%` | . |

                        | `%%GLOBAL_HideLimitedCreditWarning%%` | . |

                        | `%%GLOBAL_ProductAttributes%%` | . |

                        | `%%GLOBAL_ImageDescription%%` | . |

                        | `%%GLOBAL_HideErrorMessage%%` | . |

                        | `%%GLOBAL_ExtraCategoryClass%%` | . |

                        | `%%GLOBAL_BillingAddress%%` | . |

                        | `%%GLOBAL_ShippingAddress%%` | . |

                        | `%%GLOBAL_OrderDate%%` | . |

                        | `%%GLOBAL_HideReviewCaptcha%%` | . |

                        | `%%GLOBAL_HideReturnAction%%` | . |

                        | `%%GLOBAL_OrderTotal%%` | . |

                        | `%%GLOBAL_NewsTitle%%` | . |

                        | `%%GLOBAL_BrandName%%` | . |

                        | `%%GLOBAL_VideoTitleLong%%` | . |

                        | `%%GLOBAL_ItemClass%%` | . |

                        | `%%GLOBAL_EventDate%%` | . |

                        | `%%GLOBAL_GiftWrappingName%%` | . |

                        | `%%GLOBAL_WishListID%%` | . |

                        | `%%GLOBAL_FormFieldRequiredJS%%` | . |

                        | `%%GLOBAL_HideCreditCardError%%` | . |

                        | `%%GLOBAL_CustomerName%%` | . |

                        | `%%GLOBAL_CustomerEmail%%` | . |

                        | `%%GLOBAL_CustomerGroupId%%` | Contains the group ID
                        for a logged-in customer who is part of a group. Also
                        contains the group ID for a guest where a default group
                        is set for guests. Blank for a logged-in customer who
                        belongs to no group. Also blank for a guest where no
                        default group is set for guests. Globally available
                        across panels and snippets. |

                        | `%%GLOBAL_ReCaptchaAPIKeyPublic%%` | . |

                        | `%%GLOBAL_SearchId%%` | . |

                        | `%%GLOBAL_OrderComments%%` | . |

                        | `%%GLOBAL_AllBrandsLink%%` | . |

                        | `%%GLOBAL_CheckoutLink%%` | . |

                        | `%%GLOBAL_AdditionalCheckoutButtons%%` | . |

                        | `%%GLOBAL_CheckoutShippingTitle%%` | . |

                        | `%%GLOBAL_HideUseStoreCredit%%` | . |

                        | `%%GLOBAL_HideMailingListInvite%%` | . |

                        | `%%GLOBAL_AllPricesAreInCurrency%%` | . |

                        | `%%GLOBAL_HidePurchasingOptions%%` | . |

                        | `%%GLOBAL_jQueryUIPath%%` | . |

                        | `%%GLOBAL_ProductMaxTinyWidth%%` | . |

                        | `%%GLOBAL_ProductMaxTinyHeight%%` | . |

                        | `%%GLOBAL_BrandLink%%` | . |

                        | `%%GLOBAL_OrderProductId%%` | . |

                        | `%%GLOBAL_HideExpectedReleaseDate%%` | . |

                        | `%%GLOBAL_ExpectedReleaseDate%%` | . |

                        | `%%GLOBAL_label%%` | . |

                        | `%%GLOBAL_value%%` | . |

                        | `%%GLOBAL_ShipSuburb%%` | . |

                        | `%%GLOBAL_ShipState%%` | . |

                        | `%%GLOBAL_ShipZip%%` | . |

                        | `%%GLOBAL_ShipCountry%%` | . |

                        | `%%GLOBAL_ProductAvailability%%` | . |

                        | `%%GLOBAL_ProductFieldType%%` | . |

                        | `%%GLOBAL_FileTypes%%` | . |

                        | `%%GLOBAL_TransitTime%%` | . |

                        | `%%GLOBAL_ShippingPrice%%` | . |

                        | `%%GLOBAL_HideGiftWrapping%%` | . |

                        | `%%GLOBAL_ProviderId%%` | . |

                        | `%%GLOBAL_ShippingAddressId%%` | . |

                        | `%%GLOBAL_BaseCompareLink%%` | . |

                        | `%%GLOBAL_GiftWrappingId%%` | . |

                        | `%%GLOBAL_HideSectionPaging%%` | . |

                        | `%%GLOBAL_SectionPagingPrevious%%` | . |

                        | `%%GLOBAL_SectionPagingNext%%` | . |

                        | `%%GLOBAL_SectionPaging%%` | . |

                        | `%%GLOBAL_TrailBrandName%%` | . |

                        | `%%GLOBAL_LoginMessage%%` | . |

                        | `%%GLOBAL_ShippingMethod%%` | . |

                        | `%%GLOBAL_HideCaptcha%%` | . |

                        | `%%GLOBAL_HideOrderComments%%` | . |

                        | `%%GLOBAL_DisableReturnButton%%` | . |

                        | `%%GLOBAL_ShippingProvider%%` | . |

                        | `%%GLOBAL_HideCheckoutButton%%` | . |

                        | `%%GLOBAL_ShippingFormAction%%` | . |

                        | `%%GLOBAL_ShipCustomFields%%` | . |

                        | `%%GLOBAL_ShipToAddressChecked%%` | . |

                        | `%%GLOBAL_ShipAddressButtonText%%` | . |

                        | `%%GLOBAL_ShippingQuotes%%` | . |

                        | `%%GLOBAL_DeliveryDisclaimer%%` | . |

                        | `%%GLOBAL_totals%%` | . |

                        | `%%GLOBAL_HideCartOptions%%` | . |

                        | `%%GLOBAL_CommentsHTML%%` | . |

                        | `%%GLOBAL_AddThisLink%%` | . |

                        | `%%GLOBAL_TinyImageClickJavascript%%` | . |

                        | `%%GLOBAL_FeaturedVideo%%` | . |

                        | `%%GLOBAL_QuickViewProductURL%%` | . |

                        | `%%GLOBAL_ThumbImageURL%%` | . |

                        | `%%GLOBAL_ProductAttributeList%%` | . |

                        | `%%GLOBAL_DisplayAdd%%` | . |

                        | `%%GLOBAL_DisplayAddQty%%` | . |

                        | `%%GLOBAL_HideNormalMessage%%` | . |

                        | `%%GLOBAL_HideSuccessMessage%%` | . |

                        | `%%GLOBAL_WishListName%%` | . |

                        | `%%GLOBAL_DownloadsLink%%` | . |

                        | `%%GLOBAL_HideWrappingOptions%%` | . |

                        | `%%GLOBAL_ReturnId%%` | . |

                        | `%%GLOBAL_ReturnReason%%` | . |

                        | `%%GLOBAL_ReturnAction%%` | . |

                        | `%%GLOBAL_ReturnComments%%` | . |

                        | `%%GLOBAL_ShipFullName%%` | . |

                        | `%%GLOBAL_ShipCompany%%` | . |

                        | `%%GLOBAL_ShipPhone%%` | . |

                        | `%%GLOBAL_RecentPostUrl%%` | . |

                        | `%%GLOBAL_CatTrailName%%` | . |

                        | `%%GLOBAL_HideThumbColumn%%` | . |

                        | `%%GLOBAL_HideGiftMessagePreview%%` | . |

                        | `%%GLOBAL_GiftMessagePreview%%` | . |

                        | `%%GLOBAL_CustomFieldName%%` | . |

                        | `%%GLOBAL_CustomFieldValue%%` | . |

                        | `%%GLOBAL_ShippingQuoteId%%` | . |

                        | `%%GLOBAL_PageLink%%` | . |

                        | `%%GLOBAL_CartProductFields%%` | . |

                        | `%%GLOBAL_PaymentFieldPrefix%%` | . |

                        | `%%GLOBAL_FromURL%%` | . |

                        | `%%GLOBAL_AddressLine%%` | . |

                        | `%%GLOBAL_FeaturedCategoryName%%` | . |

                        | `%%GLOBAL_HideGiftWrapMessage%%` | . |

                        | `%%GLOBAL_PaymentMessage%%` | . |

                        | `%%GLOBAL_TagName%%` | . |

                        | `%%GLOBAL_PaymentMethod%%` | . |

                        | `%%GLOBAL_ProductSku%%` | . |

                        | `%%GLOBAL_ZoomImageMaxWidth%%` | . |

                        | `%%GLOBAL_ZoomImageMaxHeight%%` | . |

                        | `%%GLOBAL_SectionType%%` | . |

                        | `%%GLOBAL_SharingName%%` | . |

                        | `%%GLOBAL_SubBrandLink%%` | . |

                        | `%%GLOBAL_SubCatLink%%` | . |

                        | `%%GLOBAL_Amount%%` | . |

                        | `%%GLOBAL_TransactionType%%` | . |

                        | `%%GLOBAL_DateTime%%` | . |

                        | `%%GLOBAL_AuthorisationCode%%` | . |

                        | `%%GLOBAL_ResponseCode%%` | . |

                        | `%%GLOBAL_ResponseMessage%%` | . |

                        | `%%GLOBAL_MerchantURL%%` | . |

                        | `%%GLOBAL_CardholderName%%` | . |

                        | `%%GLOBAL_ReferenceNumber%%` | . |

                        | `%%GLOBAL_InvoiceNumber%%` | . |

                        | `%%GLOBAL_HideMessagesMenu%%` | . |

                        | `%%GLOBAL_HideReturnRequestsMenu%%` | . |

                        | `%%GLOBAL_ReturnInstructions%%` | . |

                        | `%%GLOBAL_AuthorizeNetHideCVV2%%` | . |

                        | `%%GLOBAL_BlogPageTitle%%` | . |

                        | `%%GLOBAL_CCTypes%%` | . |

                        | `%%GLOBAL_HideLoginMessage%%` | . |

                        | `%%GLOBAL_MessageClass%%` | . |

                        | `%%GLOBAL_EWayHideCardCode%%` | . |

                        | `%%GLOBAL_CreditCardErrorMessage%%` | . |

                        | `%%GLOBAL_CreditCardNum%%` | . |

                        | `%%GLOBAL_CreditCardHideCardCode%%` | . |

                        | `%%GLOBAL_MessageText%%` | . |

                        | `%%GLOBAL_NMIHideCVV2%%` | . |

                        | `%%GLOBAL_STYLE_PATH%%` | . |

                        | `%%GLOBAL_StoreAddressFormatted%%` | The address of
                        the store (as configured on the store settings page) |

                        | `%%GLOBAL_BillingPhone%%` | . |

                        | `%%GLOBAL_ShippingPhone%%` | . |

                        | `%%GLOBAL_HideShippingMethod%%` | . |

                        | `%%GLOBAL_DateShipped%%` | . |

                        | `%%GLOBAL_ProductsTable%%` | . |

                        | `%%GLOBAL_HideComments%%` | . |

                        | `%%GLOBAL_Comments%%` | . |

                        | `%%GLOBAL_PageContent%%` | . |

                        | `%%GLOBAL_HideFullName%%` | . |

                        | `%%GLOBAL_HideCompanyName%%` | . |

                        | `%%GLOBAL_HidePhone%%` | . |

                        | `%%GLOBAL_HideOrderNo%%` | . |

                        | `%%GLOBAL_HideRMANo%%` | . |

                        | `%%GLOBAL_PayflowProHideCVV2%%` | . |

                        | `%%GLOBAL_HideReviewEmail%%` | . |

                        | `%%GLOBAL_ProductReviewPaging%%` | . |

                        | `%%GLOBAL_ProdImageJavascript%%` | . |

                        | `%%GLOBAL_SearchTitle%%` | . |

                        | `%%GLOBAL_HideRelatedSearches%%` | . |

                        | `%%GLOBAL_ShowSearchSuggestion%%` | . |

                        | `%%GLOBAL_SuggestQueryEscaped%%` | . |

                        | `%%GLOBAL_SuggestQuery%%` | . |

                        | `%%GLOBAL_ShippingAddressFormTitle%%` | . |

                        | `%%GLOBAL_HideReturnForm%%` | . |

                        | `%%GLOBAL_OrderStatus%%` | . |

                        | `%%GLOBAL_AKBPath%%` | . |

                        | `%%GLOBAL_AddressFormFieldID%%` | . |

                        | `%%GLOBAL_HideShopByBrandPanel%%` | . |

                        | `%%GLOBAL_ListJS%%` | . |

                        | `%%GLOBAL_CompareOnSubmit%%` | . |

                        | `%%GLOBAL_CategoryProductListing%%` | . |

                        | `%%GLOBAL_HideErrors%%` | . |

                        | `%%GLOBAL_ShipAddressButtonText_JS%%` | . |

                        | `%%GLOBAL_CheckoutShippingIntro%%` | . |

                        | `%%GLOBAL_ItemList%%` | . |

                        | `%%GLOBAL_HideCheckoutError%%` | . |

                        | `%%GLOBAL_CheckoutErrorMsg%%` | . |

                        | `%%GLOBAL_HideCheckoutSuccess%%` | . |

                        | `%%GLOBAL_CheckoutSuccessMsg%%` | . |

                        | `%%GLOBAL_HideUseCoupon%%` | . |

                        | `%%GLOBAL_HidePaymentOptions%%` | . |

                        | `%%GLOBAL_CheckoutStoreCreditWarning%%` | . |

                        | `%%GLOBAL_StoreCredit%%` | . |

                        | `%%GLOBAL_Remaining%%` | . |

                        | `%%GLOBAL_HideRemainingStoreCredit%%` | . |

                        | `%%GLOBAL_RemainingCredit%%` | . |

                        | `%%GLOBAL_HideLimitedCreditPaymentOption%%` | . |

                        | `%%GLOBAL_StoreCreditPaymentProviders%%` | . |

                        | `%%GLOBAL_CheckoutWith%%` | . |

                        | `%%GLOBAL_HideCreditAltOptionList%%` | . |

                        | `%%GLOBAL_CreditAlt%%` | . |

                        | `%%GLOBAL_HidePaymentProviderList%%` | . |

                        | `%%GLOBAL_PaymentProviders%%` | . |

                        | `%%GLOBAL_HideOrderTermsAndConditions%%` | . |

                        | `%%GLOBAL_HideTermsAndConditionsTextarea%%` | . |

                        | `%%GLOBAL_OrderTermsAndConditions%%` | . |

                        | `%%GLOBAL_AgreeTermsAndConditions%%` | . |

                        | `%%GLOBAL_TermsAndConditionsLink%%` | . |

                        | `%%GLOBAL_NewsletterBoxIsTicked%%` | . |

                        | `%%GLOBAL_HideOrderCheckBox%%` | . |

                        | `%%GLOBAL_OrderBoxIsTicked%%` | . |

                        | `%%GLOBAL_PaymentButtonSwitch%%` | . |

                        | `%%GLOBAL_CreateAccountAccountFormFieldID%%` | . |

                        | `%%GLOBAL_StatusMessage%%` | . |

                        | `%%GLOBAL_QuickViewButtonText%%` | . |

                        | `%%GLOBAL_QuickViewButtonColor%%` | . |

                        | `%%GLOBAL_QuickViewGradientColor%%` | . |

                        | `%%GLOBAL_QuickViewTextColor%%` | . |

                        | `%%GLOBAL_FacetedSearchScriptPath%%` | . |

                        | `%%GLOBAL_DebugDetails%%` | . |

                        | `%%GLOBAL_DesignModeHTML%%` | . |

                        | `%%GLOBAL_QueryList%%` | . |

                        | `%%GLOBAL_DesignModeScriptTag%%` | . |

                        | `%%GLOBAL_LiveChatFooterCode%%` | . |

                        | `%%GLOBAL_FooterScripts%%` | . |

                        | `%%GLOBAL_HideForgotPasswordError%%` | . |

                        | `%%GLOBAL_MaintenanceNotice%%` | . |

                        | `%%GLOBAL_CartItems%%` | A textual string representing
                        the number of items in the cart (1 item, 2 items, etc.).
                        |

                        | `%%GLOBAL_HideSectionSeparator%%` | . |

                        | `%%GLOBAL_ProductThumbWidth%%` | . |

                        | `%%GLOBAL_ProductThumbHeight%%` | . |

                        | `%%GLOBAL_HideBrandLink%%` | . |

                        | `%%GLOBAL_HideRating%%` | . |

                        | `%%GLOBAL_Rating%%` | . |

                        | `%%GLOBAL_HidePrice%%` | . |

                        | `%%GLOBAL_RetailPrice%%` | . |

                        | `%%GLOBAL_IncludingExcludingTax%%` | . |

                        | `%%GLOBAL_YouSave%%` | . |

                        | `%%GLOBAL_VideoLength%%` | . |

                        | `%%GLOBAL_VideoDescriptionLong%%` | . |

                        | `%%GLOBAL_CartLink%%` | . |

                        | `%%GLOBAL_ProductOptionRequired%%` | . |

                        | `%%GLOBAL_FastCartButtonJs%%` | . |

                        | `%%GLOBAL_HideProductAttributeList%%` | . |

                        | `%%GLOBAL_AddToCartQty%%` | . |

                        | `%%GLOBAL_HideBulkDiscountLink%%` | . |

                        | `%%GLOBAL_BulkDiscountThickBoxRates%%` | . |

                        | `%%GLOBAL_ItemSoldOut%%` | . |

                        | `%%GLOBAL_OptionMessage%%` | . |

                        | `%%GLOBAL_ShowAddToCartQtyBox%%` | . |

                        | `%%GLOBAL_ProductMinMaxQtyJavascript%%` | . |

                        | `%%GLOBAL_EventDateJavascript%%` | . |

                        | `%%GLOBAL_AgreeChecked%%` | . |

                        | `%%GLOBAL_HideThemeSelect%%` | . |

                        | `%%GLOBAL_GiftCertificateMinimum%%` | . |

                        | `%%GLOBAL_GiftCertificateMaximum%%` | . |

                        | `%%GLOBAL_HideSearchPage%%` | . |

                        | `%%GLOBAL_ProductTabActive%%` | . |

                        | `%%GLOBAL_ProductTabUrl%%` | . |

                        | `%%GLOBAL_ContentTabActive%%` | . |

                        | `%%GLOBAL_ContentTabUrl%%` | . |

                        | `%%GLOBAL_ProductContainerDisplay%%` | . |

                        | `%%GLOBAL_ContentContainerDisplay%%` | . |

                        | `%%GLOBAL_SelectedSearchTab%%` | . |

                        | `%%GLOBAL_HideProductSearchOptions%%` | . |

                        | `%%GLOBAL_HideSearchResultsNoResult%%` | . |

                        | `%%GLOBAL_OriginalSearchQuery%%` | . |

                        | `%%GLOBAL_HideSideProductRecentlyViewedCompare%%` | .
                        |

                        | `%%GLOBAL_HideIfNoSubsection%%` | . |

                        | `%%GLOBAL_HideSuggestiveCartContent%%` | . |

                        | `%%GLOBAL_SuggestedProductListing%%` | . |

                        | `%%GLOBAL_HideAccountOptions%%` | . |

                        | `%%GLOBAL_DownloadLink%%` | . |

                        | `%%GLOBAL_ExpiryInfo%%` | . |

                        | `%%GLOBAL_AccountOrderItemList%%` | . |

                        | `%%GLOBAL_StrikeStart%%` | . |

                        | `%%GLOBAL_StrikeEnd%%` | . |

                        | `%%GLOBAL_Refunded%%` | . |

                        | `%%GLOBAL_HidePaymentInstructions%%` | . |

                        | `%%GLOBAL_ReturnStatus%%` | . |

                        | `%%GLOBAL_ShipAddressLines%%` | . |

                        | `%%GLOBAL_RecentPostTitle%%` | . |

                        | `%%GLOBAL_CatTrailLink%%` | . |

                        | `%%GLOBAL_CouponCode%%` | . |

                        | `%%GLOBAL_CouponDiscount%%` | . |

                        | `%%GLOBAL_GiftCertificateRemaining%%` | . |

                        | `%%GLOBAL_CertificateAmountUsed%%` | . |

                        | `%%GLOBAL_ProductImage%%` | . |

                        | `%%GLOBAL_ProductNameSpan%%` | . |

                        | `%%GLOBAL_ProductExpectedReleaseDate%%` | . |

                        | `%%GLOBAL_GiftCertificateName%%` | . |

                        | `%%GLOBAL_HideCartFileName%%` | . |

                        | `%%GLOBAL_ProductFieldFileValue%%` | . |

                        | `%%GLOBAL_HideDeleteFileLink%%` | . |

                        | `%%GLOBAL_HideFileHelp%%` | . |

                        | `%%GLOBAL_FileSize%%` | . |

                        | `%%GLOBAL_CurrentProductFile%%` | . |

                        | `%%GLOBAL_SelectOptions%%` | . |

                        | `%%GLOBAL_ShipperName%%` | . |

                        | `%%GLOBAL_TaxName%%` | . |

                        | `%%GLOBAL_TaxCost%%` | . |

                        | `%%GLOBAL_PageNumber%%` | . |

                        | `%%GLOBAL_ProductDescription%%` | . |

                        | `%%GLOBAL_AccountEmail%%` | . |

                        | `%%GLOBAL_ShipAddressLine1%%` | . |

                        | `%%GLOBAL_ShipAddressLine2%%` | . |

                        | `%%GLOBAL_HideChooseAddress%%` | . |

                        | `%%GLOBAL_UseAddressTitle%%` | . |

                        | `%%GLOBAL_FlyoutAttributes%%` | . |

                        | `%%GLOBAL_FlyoutChildHtml%%` | . |

                        | `%%GLOBAL_CurrencyName%%` | . |

                        | `%%GLOBAL_AddressFieldId%%` | . |

                        | `%%GLOBAL_PageName%%` | . |

                        | `%%GLOBAL_CurrentProductLink%%` | . |

                        | `%%GLOBAL_InitialZoomImage%%` | . |

                        | `%%GLOBAL_HideBillingEmail%%` | . |

                        | `%%GLOBAL_BillingEmail%%` | . |

                        | `%%GLOBAL_hideInvoiceShippingDetails%%` | . |

                        | `%%GLOBAL_HideShippingEmail%%` | . |

                        | `%%GLOBAL_ShippingEmail%%` | . |

                        | `%%GLOBAL_hideAddressColumn%%` | . |

                        | `%%GLOBAL_HideAttributes%%` | . |

                        | `%%GLOBAL_HideVariationOptions%%` | . |

                        | `%%GLOBAL_HideConfigurableFields%%` | . |

                        | `%%GLOBAL_ProductConfigurableFields%%` | . |

                        | `%%GLOBAL_ProductGiftWrapping%%` | . |

                        | `%%GLOBAL_HideEventDate%%` | . |

                        | `%%GLOBAL_ProductEventDate%%` | . |

                        | `%%GLOBAL_OptionChooseText%%` | . |

                        | `%%GLOBAL_ReviewStart%%` | . |

                        | `%%GLOBAL_ReviewLink%%` | . |

                        | `%%GLOBAL_FontSize%%` | . |

                        | `%%GLOBAL_TagLink%%` | . |

                        | `%%GLOBAL_TagProductCount%%` | . |

                        | `%%GLOBAL_ProductThumbIndex%%` | . |

                        | `%%GLOBAL_VariationName%%` | . |

                        | `%%GLOBAL_VariationNumber%%` | . |

                        | `%%GLOBAL_OptionId%%` | . |

                        | `%%GLOBAL_OptionValue%%` | . |

                        | `%%GLOBAL_NewsURL%%` | . |

                        | `%%GLOBAL_PageURL%%` | . |

                        | `%%GLOBAL_PageSmallContent%%` | . |

                        | `%%GLOBAL_SectionSearchResults%%` | . |

                        | `%%GLOBAL_RSSURL%%` | . |

                        | `%%GLOBAL_HideSplitWrappingOptions%%` | . |

                        | `%%GLOBAL_ShipperId%%` | . |

                        | `%%GLOBAL_CatId%%` | . |

                        | `%%GLOBAL_SocialMedia_Service_Name%%` | . |

                        | `%%GLOBAL_SubBrandName%%` | . |

                        | `%%GLOBAL_SubCatName%%` | . |

                        | `%%GLOBAL_ISOCode%%` | . |

                        | `%%GLOBAL_IssuerName%%` | . |

                        | `%%GLOBAL_IssuerConfirmation%%` | . |

                        | `%%GLOBAL_FirstName%%` | . |

                        | `%%GLOBAL_NewGuestAccountResetLink%%` | . |

                        | `%%GLOBAL_OrderStatusChangedHi%%` | . |

                        | `%%GLOBAL_OrderNumberStatusChangedTo%%` | . |

                        | `%%GLOBAL_DatePlaced%%` | . |

                        | `%%GLOBAL_AC_EmailFooterNote%%` | . |

                        | `%%GLOBAL_ProductUrl%%` | . |

                        | `%%GLOBAL_Contact%%` | . |

                        | `%%GLOBAL_DownloadTitle%%` | . |

                        | `%%GLOBAL_HideReturnInstructions%%` | . |

                        | `%%GLOBAL_HideAuthorizeNetError%%` | . |

                        | `%%GLOBAL_AuthorizeNetErrorMessage%%` | . |

                        | `%%GLOBAL_AuthorizeNetName%%` | . |

                        | `%%GLOBAL_AuthorizeNetNum%%` | . |

                        | `%%GLOBAL_AuthorizeNetMonths%%` | . |

                        | `%%GLOBAL_AuthorizeNetYears%%` | . |

                        | `%%GLOBAL_AuthorizeNetCCV2%%` | . |

                        | `%%GLOBAL_HideCCManualError%%` | . |

                        | `%%GLOBAL_CCErrorMessage%%` | . |

                        | `%%GLOBAL_CCName%%` | . |

                        | `%%GLOBAL_CCNum%%` | . |

                        | `%%GLOBAL_CCCVV2%%` | . |

                        | `%%GLOBAL_CCIssueNo%%` | . |

                        | `%%GLOBAL_CCMonths%%` | . |

                        | `%%GLOBAL_CCYears%%` | . |

                        | `%%GLOBAL_CCIssueDateMonths%%` | . |

                        | `%%GLOBAL_CCIssueDateYears%%` | . |

                        | `%%GLOBAL_HideCheckoutGuest%%` | . |

                        | `%%GLOBAL_HideCheckoutRegistrationRequired%%` | . |

                        | `%%GLOBAL_CustomCheckoutFormNewAccount%%` | . |

                        | `%%GLOBAL_CustomCheckoutFormBillingAddress%%` | . |

                        | `%%GLOBAL_CustomCheckoutFormShippingAddress%%` | . |

                        | `%%GLOBAL_ExpressCheckoutSignedIn%%` | . |

                        | `%%GLOBAL_ExpressCheckoutDigitalOrder%%` | . |

                        | `%%GLOBAL_GoToStep%%` | . |

                        | `%%GLOBAL_CollapsedStepClassAccountDetails%%` | . |

                        | `%%GLOBAL_ExpressCheckoutHideAccountDetails%%` | . |

                        | `%%GLOBAL_ExpressCheckoutStepAccountDetails%%` | . |

                        | `%%GLOBAL_HideGuestCheckoutOptions%%` | . |

                        | `%%GLOBAL_HideRegisteredCheckoutOptions%%` | . |

                        | `%%GLOBAL_CollapsedStepClassBillingAddress%%` | . |

                        | `%%GLOBAL_ExpressCheckoutStepBillingAddress%%` | . |

                        | `%%GLOBAL_CollapsedStepClassShippingAddress%%` | . |

                        | `%%GLOBAL_ExpressCheckoutHideShippingAddress%%` | . |

                        | `%%GLOBAL_ExpressCheckoutStepShippingAddress%%` | . |

                        | `%%GLOBAL_CollapsedStepClassShippingProvider%%` | . |

                        | `%%GLOBAL_ExpressCheckoutHideShippingProviders%%` | .
                        |

                        | `%%GLOBAL_ExpressCheckoutStepShippingProvider%%` | . |

                        | `%%GLOBAL_CollapsedStepClassConfirmation%%` | . |

                        | `%%GLOBAL_ExpressCheckoutStepConfirmation%%` | . |

                        | `%%GLOBAL_CollapsedStepClassPaymentDetails%%` | . |

                        | `%%GLOBAL_ExpressCheckoutHidePaymentDetails%%` | . |

                        | `%%GLOBAL_ExpressCheckoutStepPaymentDetails%%` | . |

                        | `%%GLOBAL_PaymentFormContent%%` | . |

                        | `%%GLOBAL_ContinueLink%%` | . |

                        | `%%GLOBAL_Continue%%` | . |

                        | `%%GLOBAL_BlogName%%` | . |

                        | `%%GLOBAL_ErrorDetails%%` | . |

                        | `%%GLOBAL_HideeSelectPlusDPError%%` | . |

                        | `%%GLOBAL_eSelectPlusDPErrorMessage%%` | . |

                        | `%%GLOBAL_eSelectPlusDPNum%%` | . |

                        | `%%GLOBAL_eSelectPlusDPMonths%%` | . |

                        | `%%GLOBAL_eSelectPlusDPYears%%` | . |

                        | `%%GLOBAL_eSelectPlusDPCCV2%%` | . |

                        | `%%GLOBAL_eSelectPlusDPCardHolderName%%` | . |

                        | `%%GLOBAL_eSelectPlusDPBillStNum%%` | . |

                        | `%%GLOBAL_eSelectPlusDPBillStName%%` | . |

                        | `%%GLOBAL_eSelectPlusDPBillZip%%` | . |

                        | `%%GLOBAL_HideEWayError%%` | . |

                        | `%%GLOBAL_EWayErrorMessage%%` | . |

                        | `%%GLOBAL_EWayName%%` | . |

                        | `%%GLOBAL_EWayMonths%%` | . |

                        | `%%GLOBAL_EWayYears%%` | . |

                        | `%%GLOBAL_EWayCardCode%%` | . |

                        | `%%GLOBAL_CreditCardName%%` | . |

                        | `%%GLOBAL_CreditCardIssueNo%%` | . |

                        | `%%GLOBAL_CreditCardIssueDateMonths%%` | . |

                        | `%%GLOBAL_CreditCardIssueDateYears%%` | . |

                        | `%%GLOBAL_CreditCardMonths%%` | . |

                        | `%%GLOBAL_CreditCardYears%%` | . |

                        | `%%GLOBAL_CreditCardCardCode%%` | . |

                        | `%%GLOBAL_AdditionalPaymentPageContents%%` | . |

                        | `%%GLOBAL_HideIdealError%%` | . |

                        | `%%GLOBAL_IdealErrorMessage%%` | . |

                        | `%%GLOBAL_IdealPaymentForm%%` | . |

                        | `%%GLOBAL_PrintInvoiceStylesheetPath%%` | . |

                        | `%%GLOBAL_PrintableInvoiceList%%` | . |

                        | `%%GLOBAL_PrintableInvoiceScript%%` | . |

                        | `%%GLOBAL_MaintenanceLogo%%` | . |

                        | `%%GLOBAL_MessageTitle%%` | . |

                        | `%%GLOBAL_HideNMIError%%` | . |

                        | `%%GLOBAL_NMIErrorMessage%%` | . |

                        | `%%GLOBAL_NMIName%%` | . |

                        | `%%GLOBAL_NMINum%%` | . |

                        | `%%GLOBAL_NMIMonths%%` | . |

                        | `%%GLOBAL_NMIYears%%` | . |

                        | `%%GLOBAL_NMICCV2%%` | . |

                        | `%%GLOBAL_HideError%%` | . |

                        | `%%GLOBAL_HidePaidOrderConfirmation%%` | . |

                        | `%%GLOBAL_HidePhysicalOrderConfirmation%%` | . |

                        | `%%GLOBAL_PhysicalOrderConfirmation%%` | . |

                        | `%%GLOBAL_HideDigitalOrderConfirmation%%` | . |

                        | `%%GLOBAL_DigitalOrderConfirmation%%` | . |

                        | `%%GLOBAL_HideDigitalOrderDownloadLink%%` | . |

                        | `%%GLOBAL_ViewFullOrderPath%%` | . |

                        | `%%GLOBAL_HideAwaitingPayment%%` | . |

                        | `%%GLOBAL_HideSuccess%%` | . |

                        | `%%GLOBAL_OrderConfirmationDetails%%` | . |

                        | `%%GLOBAL_ContinueShoppingOnStoreName%%` | . |

                        | `%%GLOBAL_ConversionCode%%` | . |

                        | `%%GLOBAL_PackingSlipTitle%%` | . |

                        | `%%GLOBAL_HideBillingPhone%%` | . |

                        | `%%GLOBAL_HideShippingPhone%%` | . |

                        | `%%GLOBAL_HideShippingDate%%` | . |

                        | `%%GLOBAL_HideTrackingNo%%` | . |

                        | `%%GLOBAL_TrackingNo%%` | . |

                        | `%%GLOBAL_HideFormError%%` | . |

                        | `%%GLOBAL_PageId%%` | . |

                        | `%%GLOBAL_ContactName%%` | . |

                        | `%%GLOBAL_ContactEmail%%` | . |

                        | `%%GLOBAL_ContactCompanyName%%` | . |

                        | `%%GLOBAL_ContactPhone%%` | . |

                        | `%%GLOBAL_ContactOrderNo%%` | . |

                        | `%%GLOBAL_ContactRMA%%` | . |

                        | `%%GLOBAL_ContactQuestion%%` | . |

                        | `%%GLOBAL_CaptchaImage%%` | . |

                        | `%%GLOBAL_ARSPanel%%` | . |

                        | `%%GLOBAL_HidePayflowProError%%` | . |

                        | `%%GLOBAL_PayflowProErrorMessage%%` | . |

                        | `%%GLOBAL_PayflowProName%%` | . |

                        | `%%GLOBAL_PayflowProNum%%` | . |

                        | `%%GLOBAL_PayflowProMonths%%` | . |

                        | `%%GLOBAL_PayflowProYears%%` | . |

                        | `%%GLOBAL_PayflowProCCV2%%` | . |

                        | `%%GLOBAL_ProductReviewFlashMessages%%` | . |

                        | `%%GLOBAL_throttleToken%%` | . |

                        | `%%GLOBAL_ReviewRating5%%` | . |

                        | `%%GLOBAL_ReviewRating4%%` | . |

                        | `%%GLOBAL_ReviewRating3%%` | . |

                        | `%%GLOBAL_ReviewRating2%%` | . |

                        | `%%GLOBAL_ReviewRating1%%` | . |

                        | `%%GLOBAL_RevTitle%%` | . |

                        | `%%GLOBAL_RevText%%` | . |

                        | `%%GLOBAL_HideNoReviewsMessage%%` | . |

                        | `%%GLOBAL_NoReviews%%` | . |

                        | `%%GLOBAL_ProductReviewList%%` | . |

                        | `%%GLOBAL_AutoShowReviewForm%%` | . |

                        | `%%GLOBAL_JumpToReviews%%` | . |

                        | `%%GLOBAL_popupCssPath%%` | . |

                        | `%%GLOBAL_jQueryPath%%` | . |

                        | `%%GLOBAL_CurrentImageIndex%%` | . |

                        | `%%GLOBAL_ProductMaxImageHeight%%` | . |

                        | `%%GLOBAL_ProductMaxImageWidth%%` | . |

                        | `%%GLOBAL_VariationImage%%` | . |

                        | `%%GLOBAL_RuleImage%%` | . |

                        | `%%GLOBAL_ProductTinyBoxHeight%%` | . |

                        | `%%GLOBAL_UnsubscribeTitle%%` | . |

                        | `%%GLOBAL_DownloadIntro%%` | . |

                        | `%%GLOBAL_HideMessageSuccess%%` | . |

                        | `%%GLOBAL_HideMessageError%%` | . |

                        | `%%GLOBAL_HideNoOrderMessage%%` | . |

                        | `%%GLOBAL_HideInbox%%` | . |

                        | `%%GLOBAL_HideInboxMessage%%` | . |

                        | `%%GLOBAL_AccountInboxIntro%%` | . |

                        | `%%GLOBAL_ReturnReasonsList%%` | . |

                        | `%%GLOBAL_ReturnActionsList%%` | . |

                        | `%%GLOBAL_HideOrderStatus%%` | . |

                        | `%%GLOBAL_HideSingleShippingAddress%%` | . |

                        | `%%GLOBAL_FlassMessage%%` | . |

                        | `%%GLOBAL_HideItemDetailsHeader%%` | . |

                        | `%%GLOBAL_OrderTotalRows%%` | . |

                        | `%%GLOBAL_ShowOrderActions%%` | . |

                        | `%%GLOBAL_LNG_OrderShipments%%` | . |

                        | `%%GLOBAL_HideOrderStatusList%%` | . |

                        | `%%GLOBAL_HideNoOrderStatusMessage%%` | . |

                        | `%%GLOBAL_HideOrderList%%` | . |

                        | `%%GLOBAL_HideNoOrdersMessage%%` | . |

                        | `%%GLOBAL_HideRecentItemList%%` | . |

                        | `%%GLOBAL_HideNoRecentItemsMessage%%` | . |

                        | `%%GLOBAL_HideNoReturnsMessage%%` | . |

                        | `%%GLOBAL_HideReturnsList%%` | . |

                        | `%%GLOBAL_CheckEmail%%` | . |

                        | `%%GLOBAL_BrandsMessage%%` | . |

                        | `%%GLOBAL_HideBrandProductListing%%` | . |

                        | `%%GLOBAL_BrandProductListing%%` | . |

                        | `%%GLOBAL_HideShoppingCartGrid%%` | . |

                        | `%%GLOBAL_CartItemTotal%%` | . |

                        | `%%GLOBAL_HideGiftWrappingTotal%%` | . |

                        | `%%GLOBAL_GiftWrappingTotal%%` | . |

                        | `%%GLOBAL_HideDiscountAmount%%` | . |

                        | `%%GLOBAL_DiscountAmount%%` | . |

                        | `%%GLOBAL_HideShoppingCartShippingEstimator%%` | . |

                        | `%%GLOBAL_ShippingCountryList%%` | . |

                        | `%%GLOBAL_ShippingHideStateList%%` | . |

                        | `%%GLOBAL_ShippingStateList%%` | . |

                        | `%%GLOBAL_ShippingHideStateBox%%` | . |

                        | `%%GLOBAL_AddressState%%` | . |

                        | `%%GLOBAL_ShippingZip%%` | . |

                        | `%%GLOBAL_HideShoppingCartShippingCost%%` | . |

                        | `%%GLOBAL_ShippingCost%%` | . |

                        | `%%GLOBAL_HideShoppingCartHandlingCost%%` | . |

                        | `%%GLOBAL_HandlingCost%%` | . |

                        | `%%GLOBAL_Taxes%%` | . |

                        | `%%GLOBAL_CartTotal%%` | . |

                        | `%%GLOBAL_InclusiveTaxes%%` | . |

                        | `%%GLOBAL_HideMultipleAddressShipping%%` | . |

                        | `%%GLOBAL_HideMultipleAddressShippingOr%%` | . |

                        | `%%GLOBAL_KeepShoppingLink%%` | . |

                        | `%%GLOBAL_KeepShoppingText%%` | . |

                        | `%%GLOBAL_HideShoppingCartEmptyMessage%%` | . |

                        | `%%GLOBAL_CartCheckoutButtonControlScript%%` | . |

                        | `%%GLOBAL_CartStatusMessage%%` | . |

                        | `%%GLOBAL_CatName%%` | . |

                        | `%%GLOBAL_CatDesc%%` | . |

                        | `%%GLOBAL_DisplayMode%%` | . |

                        | `%%GLOBAL_CompareButton%%` | . |

                        | `%%GLOBAL_HideTitle%%` | . |

                        | `%%GLOBAL_BalanceTitle%%` | . |

                        | `%%GLOBAL_HideGiftCertificateError%%` | . |

                        | `%%GLOBAL_HideIntro%%` | . |

                        | `%%GLOBAL_HideExampleImage%%` | . |

                        | `%%GLOBAL_HideShippingTabs%%` | . |

                        | `%%GLOBAL_ActiveTabSingle%%` | . |

                        | `%%GLOBAL_ActiveTabMultiple%%` | . |

                        | `%%GLOBAL_HideTabSingle%%` | . |

                        | `%%GLOBAL_HideTabMultiple%%` | . |

                        | `%%GLOBAL_CheckoutMultiShippingIntro%%` | . |

                        | `%%GLOBAL_HideShippingProviderList%%` | . |

                        | `%%GLOBAL_HideNoShippingProviders%%` | . |

                        | `%%GLOBAL_ShippingError%%` | . |

                        | `%%GLOBAL_ComparisonHeading%%` | . |

                        | `%%GLOBAL_HideTooManyProductsMessage%%` | . |

                        | `%%GLOBAL_TooManyProductsMessage%%` | . |

                        | `%%GLOBAL_NumCompareItems%%` | . |

                        | `%%GLOBAL_HideConfirmOrderPage%%` | . |

                        | `%%GLOBAL_HideShippingDetails%%` | . |

                        | `%%GLOBAL_CreateAccountHeading%%` | . |

                        | `%%GLOBAL_HideCreateAccountIntroMessage%%` | . |

                        | `%%GLOBAL_HideCreateAccountErrorMessage%%` | . |

                        | `%%GLOBAL_CreateAccountEmailPassword%%` | . |

                        | `%%GLOBAL_CreateAccountDetails%%` | . |

                        | `%%GLOBAL_CreateAccountButtonText%%` | . |

                        | `%%GLOBAL_CreateAccountShippingFormFieldID%%` | . |

                        | `%%GLOBAL_HideEditAccountIntroMessage%%` | . |

                        | `%%GLOBAL_HideEditAccountErrorMessage%%` | . |

                        | `%%GLOBAL_HideEditAccountSuccessMessage%%` | . |

                        | `%%GLOBAL_AccountCurrentEmail%%` | . |

                        | `%%GLOBAL_AccountFirstName%%` | . |

                        | `%%GLOBAL_AccountLastName%%` | . |

                        | `%%GLOBAL_AccountCompanyName%%` | . |

                        | `%%GLOBAL_AccountPhone%%` | . |

                        | `%%GLOBAL_AccountFields%%` | . |

                        | `%%GLOBAL_EditAccountAccountFormFieldID%%` | . |

                        | `%%GLOBAL%%` | . |

                        | `%%GLOBAL_FacetedSearchOptionsJSON%%` | . |

                        | `%%GLOBAL_QuickLinkText%%` | . |

                        | `%%GLOBAL_Year%%` | . |

                        | `%%GLOBAL_PoweredBy%%` | . |

                        | `%%GLOBAL_PinterestJS%%` | . |

                        | `%%GLOBAL_CustomerId%%` | . |

                        | `%%GLOBAL_ForgottenPasswordToken%%` | . |

                        | `%%GLOBAL_CustomerEmailAddress%%` | . |

                        | `%%GLOBAL_RemainingBalance%%` | . |

                        | `%%GLOBAL_AdditionalMetaTags%%` | . |

                        | `%%GLOBAL_HeadFonts%%` | . |

                        | `%%GLOBAL_Favicon%%` | . |

                        | `%%GLOBAL_Stylesheets%%` | . |

                        | `%%GLOBAL_HeadRSSLinks%%` | . |

                        | `%%GLOBAL_TrackingCode%%` | . |

                        | `%%GLOBAL_DesignModeStyleSheet%%` | . |

                        | `%%GLOBAL_HeaderImageStyle%%` | . |

                        | `%%GLOBAL_FastCart%%` | . |

                        | `%%GLOBAL_ShowCookieWarningMessage%%` | . |

                        | `%%GLOBAL_ProductThumbImageWidth%%` | . |

                        | `%%GLOBAL_ProductThumbImageHeight%%` | . |

                        | `%%GLOBAL_AdditionalScriptTags%%` | . |

                        | `%%GLOBAL_RTLStyles%%` | . |

                        | `%%GLOBAL_HideHomeFeaturedProductsPanel%%` | . |

                        | `%%GLOBAL_HideHomeNewProductsPanel%%` | . |

                        | `%%GLOBAL_HideHomeRecentBlogsPanel%%` | . |

                        | `%%GLOBAL_SwapFrequency%%` | . |

                        | `%%GLOBAL_IdealIssuerOptions%%` | . |

                        | `%%GLOBAL_NewAccountHeading%%` | . |

                        | `%%GLOBAL_HideNewCustomerButton%%` | . |

                        | `%%GLOBAL_HideLoginNewAccountIntro%%` | . |

                        | `%%GLOBAL_BlogPathNormal%%` | . |

                        | `%%GLOBAL_BlogTitle%%` | . |

                        | `%%GLOBAL_NewsDate%%` | . |

                        | `%%GLOBAL_NewsContent%%` | . |

                        | `%%GLOBAL_SubscriptionHeading%%` | . |

                        | `%%GLOBAL_Class%%` | . |

                        | `%%GLOBAL_SubscriptionMessage%%` | . |

                        | `%%GLOBAL_ShortName%%` | . |

                        | `%%GLOBAL_PostTitle%%` | . |

                        | `%%GLOBAL_PostAuthor%%` | . |

                        | `%%GLOBAL_PostISO8601DatePublished%%` | . |

                        | `%%GLOBAL_PostDatePublished%%` | . |

                        | `%%GLOBAL_PostBody%%` | . |

                        | `%%GLOBAL_HideBreadCrumbs%%` | . |

                        | `%%GLOBAL_BreadCrumbs%%` | . |

                        | `%%GLOBAL_FindByCategory%%` | . |

                        | `%%GLOBAL_ProductDesc%%` | . |

                        | `%%GLOBAL_productAttributesCssPath%%` | . |

                        | `%%GLOBAL_CurrentProdThumbImage%%` | . |

                        | `%%GLOBAL_ProductMaxZoomWidth%%` | . |

                        | `%%GLOBAL_ProductMaxZoomHeight%%` | . |

                        | `%%GLOBAL_ShowImageZoomer%%` | . |

                        | `%%GLOBAL_ProductDetailFlashMessages%%` | . |

                        | `%%GLOBAL_HideProductThumb%%` | . |

                        | `%%GLOBAL_LightBoxImageJavascript%%` | . |

                        | `%%GLOBAL_HideImageCarousel%%` | . |

                        | `%%GLOBAL_HideMorePicturesLink%%` | . |

                        | `%%GLOBAL_SeeMorePictures%%` | . |

                        | `%%GLOBAL_PinterestButton%%` | . |

                        | `%%GLOBAL_HideReviewLink%%` | . |

                        | `%%GLOBAL_ReviewLinkOnClick%%` | . |

                        | `%%GLOBAL_ReviewLinkText%%` | . |

                        | `%%GLOBAL_FacebookLikeButtonAbove%%` | . |

                        | `%%GLOBAL_FacebookLikeButtonBelow%%` | . |

                        | `%%GLOBAL_NavLinkDisplay%%` | . |

                        | `%%GLOBAL_DisablePrevLink%%` | . |

                        | `%%GLOBAL_DisableNextLink%%` | . |

                        | `%%GLOBAL_TotalImages%%` | . |

                        | `%%GLOBAL_HideCustomFields%%` | . |

                        | `%%GLOBAL_ProductTabsControlScript%%` | . |

                        | `%%GLOBAL_ProductImageMode%%` | . |

                        | `%%GLOBAL_HideSingleVideo%%` | . |

                        | `%%GLOBAL_HideVideoList%%` | . |

                        | `%%GLOBAL_ProductWarranty%%` | . |

                        | `%%GLOBAL_QuickViewShareLinks%%` | . |

                        | `%%GLOBAL_QuickViewFacebookLikeButton%%` | . |

                        | `%%GLOBAL_QuickViewProductName%%` | . |

                        | `%%GLOBAL_QuickViewReviews%%` | . |

                        | `%%GLOBAL_HideRRP%%` | . |

                        | `%%GLOBAL_CertificateTitle%%` | . |

                        | `%%GLOBAL_HideGiftCertificateForm%%` | . |

                        | `%%GLOBAL_CertificateTo%%` | . |

                        | `%%GLOBAL_CertificateToEmail%%` | . |

                        | `%%GLOBAL_CertificateFrom%%` | . |

                        | `%%GLOBAL_CertificateFromEmail%%` | . |

                        | `%%GLOBAL_CertificateMessage%%` | . |

                        | `%%GLOBAL_HideGiftCertificateAmountSelect%%` | . |

                        | `%%GLOBAL_GiftCertificateAmountSelect%%` | . |

                        | `%%GLOBAL_HideGiftCertificateCustomAmount%%` | . |

                        | `%%GLOBAL_CustomCertificateAmount%%` | . |

                        | `%%GLOBAL_GiftCertificateRange%%` | . |

                        | `%%GLOBAL_HideExpiryInfo%%` | . |

                        | `%%GLOBAL_GiftCertificateTerms%%` | . |

                        | `%%GLOBAL_GiftCertificateThemes%%` | . |

                        | `%%GLOBAL_SaveGiftCertificateButton%%` | . |

                        | `%%GLOBAL_GiftCertificatePreviewModalTitle%%` | . |

                        | `%%GLOBAL_CategoryOptions%%` | . |

                        | `%%GLOBAL_SelectedCategoryOptions%%` | . |

                        | `%%GLOBAL_AutoHideSearchForm%%` | . |

                        | `%%GLOBAL_HideAdvancedLink%%` | . |

                        | `%%GLOBAL_HideAdvancedOptions%%` | . |

                        | `%%GLOBAL_FormattedSearchQuery%%` | . |

                        | `%%GLOBAL_BrandNameOptions%%` | . |

                        | `%%GLOBAL_PriceFrom%%` | . |

                        | `%%GLOBAL_PriceTo%%` | . |

                        | `%%GLOBAL_HideSearchResults%%` | . |

                        | `%%GLOBAL_SearchResults%%` | . |

                        | `%%GLOBAL_HideSearchResultsContent%%` | . |

                        | `%%GLOBAL_SearchResultsContent%%` | . |

                        | `%%GLOBAL_HideSearchResultsCategoryAndBrand%%` | . |

                        | `%%GLOBAL_HideSearchResultsCategory%%` | . |

                        | `%%GLOBAL_SearchResultsCategory%%` | . |

                        | `%%GLOBAL_HideSearchResultsBrand%%` | . |

                        | `%%GLOBAL_SearchResultsBrand%%` | . |

                        | `%%GLOBAL_HideSearchResultsProduct%%` | . |

                        | `%%GLOBAL_SearchResultsProduct%%` | . |

                        | `%%GLOBAL_SnippetSearchResultsFeed%%` | . |

                        | `%%GLOBAL_FirstProductId%%` | . |

                        | `%%GLOBAL_SharingData%%` | . |

                        | `%%GLOBAL_HideChooseAnotherToShare%%` | . |

                        | `%%GLOBAL_HideAddShippingAddressIntroMessage%%` | . |

                        | `%%GLOBAL_ShippingAddressFormIntro%%` | . |

                        | `%%GLOBAL_HideAddShippingAddressMessage%%` | . |

                        | `%%GLOBAL_Message%%` | . |

                        | `%%GLOBAL_ShippingAddressFormAction%%` | . |

                        | `%%GLOBAL_ShipId%%` | . |

                        | `%%GLOBAL_NumNewMessages%%` | . |

                        | `%%GLOBAL_NumWishListItems%%` | . |

                        | `%%GLOBAL_HideStoreCredit%%` | . |

                        | `%%GLOBAL_StoreCreditAmount%%` | . |

                        | `%%GLOBAL_HideBrandTagCloudPanel%%` | . |

                        | `%%GLOBAL_HideSideCart%%` | . |

                        | `%%GLOBAL_SideCartItemCount%%` | . |

                        | `%%GLOBAL_SideCategoryListTypeClass%%` | . |

                        | `%%GLOBAL_HideSideCategoryNewProductsPanel%%` | . |

                        | `%%GLOBAL_HideSideCategoryPopularProductsPanel%%` | .
                        |

                        | `%%GLOBAL_HideSideCategoryShopByPricePanel%%` | . |

                        | `%%GLOBAL_HideSideCategoryTopSellersPanel%%` | . |

                        | `%%GLOBAL_SideLiveChatCode%%` | . |

                        | `%%GLOBAL_HideSideNewProductsPanel%%` | . |

                        | `%%GLOBAL_NewsletterBoxControlScript%%` | . |

                        | `%%GLOBAL_HideSidePopularProductsPanel%%` | . |

                        | `%%GLOBAL_WishLists%%` | . |

                        | `%%GLOBAL_AlsoBoughtProductListing%%` | . |

                        | `%%GLOBAL_HideRecentlyViewedProductsPanel%%` | . |

                        | `%%GLOBAL_HideRelatedProductsPanel%%` | . |

                        | `%%GLOBAL_HideSideShopByBrandFullPanel%%` | . |

                        | `%%GLOBAL_HideSubPagesList%%` | . |

                        | `%%GLOBAL_PageLinks%%` | . |

                        | `%%GLOBAL_HideSideTopSellersPanel%%` | . |

                        | `%%GLOBAL_HideIfSubsection%%` | . |

                        | `%%GLOBAL_SitemapLink%%` | . |

                        | `%%GLOBAL_SitemapSubsectionTrail%%` | . |

                        | `%%GLOBAL_ShowNewsFeed%%` | . |

                        | `%%GLOBAL_ShowNewProductsFeed%%` | . |

                        | `%%GLOBAL_ShowPopularProductsFeed%%` | . |

                        | `%%GLOBAL_ShowFeaturedProductsFeed%%` | . |

                        | `%%GLOBAL_ShowSearchFeed%%` | . |

                        | `%%GLOBAL_TaggedProducts%%` | . |

                        | `%%GLOBAL_TagProductListing%%` | . |

                        | `%%GLOBAL_ShowStorePhoneNumber%%` | . |

                        | `%%GLOBAL_StorePhoneNumber%%` | . |

                        | `%%GLOBAL_LiveChatCodeEnabled%%` | . |

                        | `%%GLOBAL_LiveChatCode%%` | . |

                        | `%%GLOBAL_LoginOrLogoutText%%` | . |

                        | `%%GLOBAL_HideWishListAddFrom%%` | . |

                        | `%%GLOBAL_WishListAction%%` | . |

                        | `%%GLOBAL_SelectPublic%%` | . |

                        | `%%GLOBAL_HideWishListItems%%` | . |

                        | `%%GLOBAL_HideShareWishList%%` | . |

                        | `%%GLOBAL_ShareWishListClass%%` | . |

                        | `%%GLOBAL_ShareWishListIntro%%` | . |

                        | `%%GLOBAL_PublicWishListUrl%%` | . |

                        | `%%GLOBAL_HideWishLists%%` | . |

                        | `%%GLOBAL_HideWishListsTable%%` | . |

                        | `%%GLOBAL_DownloadName%%` | . |

                        | `%%GLOBAL_DisplayDownloadLink%%` | . |

                        | `%%GLOBAL_DownloadSize%%` | . |

                        | `%%GLOBAL_DownloadColor%%` | . |

                        | `%%GLOBAL_DisplayDownloadExpired%%` | . |

                        | `%%GLOBAL_DownloadDescription%%` | . |

                        | `%%GLOBAL_MessageSubject%%` | . |

                        | `%%GLOBAL_MessageDate%%` | . |

                        | `%%GLOBAL_Icon%%` | . |

                        | `%%GLOBAL_Sender%%` | . |

                        | `%%GLOBAL_MessageContent%%` | . |

                        | `%%GLOBAL_OrderItemMessage%%` | . |

                        | `%%GLOBAL_ProductQtySelect%%` | . |

                        | `%%GLOBAL_DisableViewButton%%` | . |

                        | `%%GLOBAL_DownloadItemEncrypted%%` | . |

                        | `%%GLOBAL_ItemQty%%` | . |

                        | `%%GLOBAL_ItemName%%` | . |

                        | `%%GLOBAL_ItemShippingRow%%` | . |

                        | `%%GLOBAL_DisableReorder%%` | . |

                        | `%%GLOBAL_Qty%%` | . |

                        | `%%GLOBAL_Link%%` | . |

                        | `%%GLOBAL_Target%%` | . |

                        | `%%GLOBAL_Name%%` | . |

                        | `%%GLOBAL_HideItemMessage%%` | . |

                        | `%%GLOBAL_ReorderMessage%%` | . |

                        | `%%GLOBAL_Price%%` | . |

                        | `%%GLOBAL_ItemShippingRow_AddressLine%%` | . |

                        | `%%GLOBAL_TrackingLink%%` | . |

                        | `%%GLOBAL_OrderInstructions%%` | . |

                        | `%%GLOBAL_ReturnedQuantity%%` | . |

                        | `%%GLOBAL_ReturnedProduct%%` | . |

                        | `%%GLOBAL_ReturnedProductOptions%%` | . |

                        | `%%GLOBAL_DateRequested%%` | . |

                        | `%%GLOBAL_HideReturnComment%%` | . |

                        | `%%GLOBAL_AddThisServiceButtonMeta%%` | . |

                        | `%%GLOBAL_AddThisServiceButtons%%` | . |

                        | `%%GLOBAL_Thumbnail%%` | . |

                        | `%%GLOBAL_RecentPostSummary%%` | . |

                        | `%%GLOBAL_NumProducts%%` | . |

                        | `%%GLOBAL_TagSize%%` | . |

                        | `%%GLOBAL_ChooseBrandFromList%%` | . |

                        | `%%GLOBAL_CouponId%%` | . |

                        | `%%GLOBAL_MASTER_THEME_PATH%%` | . |

                        | `%%GLOBAL_CustomizeProductTitle%%` | . |

                        | `%%GLOBAL_GiftCertificateId%%` | . |

                        | `%%GLOBAL_HideGiftWrappingAdd%%` | . |

                        | `%%GLOBAL_HideGiftWrappingEdit%%` | . |

                        | `%%GLOBAL_CartItemQty%%` | . |

                        | `%%GLOBAL_HideCartItemRemove%%` | . |

                        | `%%GLOBAL_QtySelectStyle%%` | . |

                        | `%%GLOBAL_Quantity1%%` | . |

                        | `%%GLOBAL_Quantity2%%` | . |

                        | `%%GLOBAL_Quantity3%%` | . |

                        | `%%GLOBAL_Quantity4%%` | . |

                        | `%%GLOBAL_Quantity5%%` | . |

                        | `%%GLOBAL_Quantity6%%` | . |

                        | `%%GLOBAL_Quantity7%%` | . |

                        | `%%GLOBAL_Quantity8%%` | . |

                        | `%%GLOBAL_Quantity9%%` | . |

                        | `%%GLOBAL_Quantity10%%` | . |

                        | `%%GLOBAL_Quantity11%%` | . |

                        | `%%GLOBAL_Quantity12%%` | . |

                        | `%%GLOBAL_Quantity13%%` | . |

                        | `%%GLOBAL_Quantity14%%` | . |

                        | `%%GLOBAL_Quantity15%%` | . |

                        | `%%GLOBAL_Quantity16%%` | . |

                        | `%%GLOBAL_Quantity17%%` | . |

                        | `%%GLOBAL_Quantity18%%` | . |

                        | `%%GLOBAL_Quantity19%%` | . |

                        | `%%GLOBAL_Quantity20%%` | . |

                        | `%%GLOBAL_Quantity21%%` | . |

                        | `%%GLOBAL_Quantity22%%` | . |

                        | `%%GLOBAL_Quantity23%%` | . |

                        | `%%GLOBAL_Quantity24%%` | . |

                        | `%%GLOBAL_Quantity25%%` | . |

                        | `%%GLOBAL_Quantity26%%` | . |

                        | `%%GLOBAL_Quantity27%%` | . |

                        | `%%GLOBAL_Quantity28%%` | . |

                        | `%%GLOBAL_Quantity29%%` | . |

                        | `%%GLOBAL_Quantity30%%` | . |

                        | `%%GLOBAL_QtyOptionSelected%%` | . |

                        | `%%GLOBAL_ProductAttributeName%%` | . |

                        | `%%GLOBAL_ProductAttributeValue%%` | . |

                        | `%%GLOBAL_NextLink%%` | . |

                        | `%%GLOBAL_PrevLink%%` | . |

                        | `%%GLOBAL_URL%%` | . |

                        | `%%GLOBAL_HiddenSortField%%` | . |

                        | `%%GLOBAL_SortFeaturedSelected%%` | . |

                        | `%%GLOBAL_SortNewestSelected%%` | . |

                        | `%%GLOBAL_SortBestSellingSelected%%` | . |

                        | `%%GLOBAL_SortAlphaAsc%%` | . |

                        | `%%GLOBAL_SortAlphaDesc%%` | . |

                        | `%%GLOBAL_SortAvgReview%%` | . |

                        | `%%GLOBAL_SortPriceAsc%%` | . |

                        | `%%GLOBAL_SortPriceDesc%%` | . |

                        | `%%GLOBAL_HideCartProductFields%%` | . |

                        | `%%GLOBAL_MailFormatPreferenceOptions%%` | . |

                        | `%%GLOBAL_ProviderChecked%%` | . |

                        | `%%GLOBAL_ProviderType%%` | . |

                        | `%%GLOBAL_ProviderPaymentFormClass%%` | . |

                        | `%%GLOBAL_ProviderName%%` | . |

                        | `%%GLOBAL_HideAddressButton%%` | . |

                        | `%%GLOBAL_CompareWidth%%` | . |

                        | `%%GLOBAL_RemoveCompareLink%%` | . |

                        | `%%GLOBAL_HideComparisonReviewLink%%` | . |

                        | `%%GLOBAL_NumReviews%%` | . |

                        | `%%GLOBAL_ProductSummary%%` | . |

                        | `%%GLOBAL_CustomFields%%` | . |

                        | `%%GLOBAL_ProductBrand%%` | . |

                        | `%%GLOBAL_CompareHeadWidth%%` | . |

                        | `%%GLOBAL_HideProductPrice%%` | . |

                        | `%%GLOBAL_PrivacyCookieNotification%%` | . |

                        | `%%GLOBAL_ProductAttributesJavascript%%` | . |

                        | `%%GLOBAL_DesignModeCurrentTemplate%%` | . |

                        | `%%GLOBAL_DesignModeUpdateUrl%%` | . |

                        | `%%GLOBAL_ShippingQuoteRow%%` | . |

                        | `%%GLOBAL_EventDateNameRequired%%` | . |

                        | `%%GLOBAL_EventDateName%%` | . |

                        | `%%GLOBAL_EventDateLimitations%%` | . |

                        | `%%GLOBAL_EventDateMonthStyle%%` | . |

                        | `%%GLOBAL_OverviewToMonths%%` | . |

                        | `%%GLOBAL_EventDateDayStyle%%` | . |

                        | `%%GLOBAL_OverviewToDays%%` | . |

                        | `%%GLOBAL_EventDateYearStyle%%` | . |

                        | `%%GLOBAL_OverviewToYears%%` | . |

                        | `%%GLOBAL_AddressSelected%%` | . |

                        | `%%GLOBAL_UseExistingAddress%%` | . |

                        | `%%GLOBAL_AddressList%%` | . |

                        | `%%GLOBAL_AddNewAddress%%` | . |

                        | `%%GLOBAL_HideCreateAddress%%` | . |

                        | `%%GLOBAL_CompiledFormFields%%` | . |

                        | `%%GLOBAL_HideSaveAddress%%` | . |

                        | `%%GLOBAL_SaveAddressChecked%%` | . |

                        | `%%GLOBAL_CompiledFormFieldJavascript%%` | . |

                        | `%%GLOBAL_AdjustedTotalCost%%` | . |

                        | `%%GLOBAL_HideButtomPaymentButton%%` | . |

                        | `%%GLOBAL_ExpressCheckoutLoadPaymentForm%%` | . |

                        | `%%GLOBAL_FrameWidth%%` | . |

                        | `%%GLOBAL_FacebookButtonHref%%` | . |

                        | `%%GLOBAL_fastCartProdImg%%` | . |

                        | `%%GLOBAL_fastCartQuantityTxt%%` | . |

                        | `%%GLOBAL_fastCartProdLink%%` | . |

                        | `%%GLOBAL_fastCartQuantity%%` | . |

                        | `%%GLOBAL_fastCartProdTotal%%` | . |

                        | `%%GLOBAL_fastCartSubtotal%%` | . |

                        | `%%GLOBAL_fastCartNumItemsTxt%%` | . |

                        | `%%GLOBAL_FeaturedCategoryTextColourClass%%` | . |

                        | `%%GLOBAL_FeaturedCategoryRootName%%` | . |

                        | `%%GLOBAL_FeaturedCategoryUrl%%` | . |

                        | `%%GLOBAL_FeaturedCategoryImage%%` | . |

                        | `%%GLOBAL_FeaturedCategoryImageStyle%%` | . |

                        | `%%GLOBAL_FlyoutNodeUrl%%` | . |

                        | `%%GLOBAL_FlyoutNodeLabel%%` | . |

                        | `%%GLOBAL_HideWrappingTitle%%` | . |

                        | `%%GLOBAL_ExtraClass%%` | . |

                        | `%%GLOBAL_WrappingOptions%%` | . |

                        | `%%GLOBAL_GiftWrapPreviewLinks%%` | . |

                        | `%%GLOBAL_GiftWrapMessage%%` | . |

                        | `%%GLOBAL_HideWrappingSeparator%%` | . |

                        | `%%GLOBAL_CurrencyID%%` | . |

                        | `%%GLOBAL_CurrencyFlagURL%%` | . |

                        | `%%GLOBAL_CurrencyClass%%` | . |

                        | `%%GLOBAL_CustomerPhone%%` | . |

                        | `%%GLOBAL_TotalCost%%` | . |

                        | `%%GLOBAL_CdnStorePath%%` | . |

                        | `%%GLOBAL_ImageDirectory%%` | The name of the product
                        images directory. |

                        | `%%GLOBAL_StoreLogo%%` | The store logo (image or text
                        logo) |

                        | `%%GLOBAL_LogoText%%` | . |

                        | `%%GLOBAL_MsgBox_Type%%` | . |

                        | `%%GLOBAL_MsgBox_Message%%` | . |

                        | `%%GLOBAL_MobileSiteURL%%` | . |

                        | `%%GLOBAL_ShippingAddressSelect%%` | . |

                        | `%%GLOBAL_HasSubMenuClass%%` | . |

                        | `%%GLOBAL_ActivePageClass%%` | . |

                        | `%%GLOBAL_SubMenu%%` | . |

                        | `%%GLOBAL_SubMenuLinks%%` | . |

                        | `%%GLOBAL_RSSLink%%` | . |

                        | `%%GLOBAL_RSSTitle%%` | . |

                        | `%%GLOBAL_RSSDescription%%` | . |

                        | `%%GLOBAL_sPageLink%%` | . |

                        | `%%GLOBAL_sPageName%%` | . |

                        | `%%GLOBAL_PinterestButtonDescription%%` | . |

                        | `%%GLOBAL_TagUrl%%` | . |

                        | `%%GLOBAL_InvoiceTitle%%` | . |

                        | `%%GLOBAL_invoiceItemClass%%` | . |

                        | `%%GLOBAL_addressColumnRowSpan%%` | . |

                        | `%%GLOBAL_productShippingAddress%%` | . |

                        | `%%GLOBAL_HidePreOrder%%` | . |

                        | `%%GLOBAL_ProductPreOrder%%` | . |

                        | `%%GLOBAL_ProductCost%%` | . |

                        | `%%GLOBAL_ProductTotalCost%%` | . |

                        | `%%GLOBAL_FieldName%%` | . |

                        | `%%GLOBAL_SKUValue%%` | . |

                        | `%%GLOBAL_FieldValue%%` | . |

                        | `%%GLOBAL_classNameAppend%%` | . |

                        | `%%GLOBAL_totalRowColspan%%` | . |

                        | `%%GLOBAL_ProductBinNumber%%` | . |

                        | `%%GLOBAL_AddToCartButtonControlScript%%` | . |

                        | `%%GLOBAL_HideSKU%%` | . |

                        | `%%GLOBAL_SKU%%` | . |

                        | `%%GLOBAL_HideCondition%%` | . |

                        | `%%GLOBAL_ProductCondition%%` | . |

                        | `%%GLOBAL_HideWeight%%` | . |

                        | `%%GLOBAL_ProductWeight%%` | . |

                        | `%%GLOBAL_HideAvailability%%` | . |

                        | `%%GLOBAL_Availability%%` | . |

                        | `%%GLOBAL_HideShipping%%` | . |

                        | `%%GLOBAL_HideMinQty%%` | . |

                        | `%%GLOBAL_MinQty%%` | . |

                        | `%%GLOBAL_HideMaxQty%%` | . |

                        | `%%GLOBAL_MaxQty%%` | . |

                        | `%%GLOBAL_HideCurrentStock%%` | . |

                        | `%%GLOBAL_CurrentStockLabel%%` | . |

                        | `%%GLOBAL_InventoryList%%` | . |

                        | `%%GLOBAL_GiftWrappingAvailable%%` | . |

                        | `%%GLOBAL_ProductBulkDiscountThickBox%%` | . |

                        | `%%GLOBAL_BreadcrumbItems%%` | . |

                        | `%%GLOBAL_BulkDiscountThickBoxTitle%%` | . |

                        | `%%GLOBAL_ReleaseDate%%` | . |

                        | `%%GLOBAL_CheckboxFieldNameLeft%%` | . |

                        | `%%GLOBAL_CheckboxFieldNameRight%%` | . |

                        | `%%GLOBAL_FindByCategoryItems%%` | . |

                        | `%%GLOBAL_ProdImageZoomJavascript%%` | . |

                        | `%%GLOBAL_LightBoxImageList%%` | . |

                        | `%%GLOBAL_ProductTinyBoxWidth%%` | . |

                        | `%%GLOBAL_VisibleImageTotal%%` | . |

                        | `%%GLOBAL_ReviewError%%` | . |

                        | `%%GLOBAL_AlternateReviewClass%%` | . |

                        | `%%GLOBAL_ReviewTitle%%` | . |

                        | `%%GLOBAL_ReviewRating%%` | . |

                        | `%%GLOBAL_ReviewName%%` | . |

                        | `%%GLOBAL_ReviewDate%%` | . |

                        | `%%GLOBAL_ReviewText%%` | . |

                        | `%%GLOBAL_ProductReviews%%` | . |

                        | `%%GLOBAL_PrevRevLink%%` | . |

                        | `%%GLOBAL_ReviewEnd%%` | . |

                        | `%%GLOBAL_ProductNumReviews%%` | . |

                        | `%%GLOBAL_NextRevLink%%` | . |

                        | `%%GLOBAL_TinyImageOverJavascript%%` | . |

                        | `%%GLOBAL_ProductThumbImageURL%%` | . |

                        | `%%GLOBAL_ProductZoomImageURL%%` | . |

                        | `%%GLOBAL_ProductTinyImageURL%%` | . |

                        | `%%GLOBAL_VariationChooseText%%` | . |

                        | `%%GLOBAL_OptionChecked%%` | . |

                        | `%%GLOBAL_BlogLink%%` | . |

                        | `%%GLOBAL_BlogText%%` | . |

                        | `%%GLOBAL_BlogPreview%%` | . |

                        | `%%GLOBAL_RelatedSearchQuery%%` | . |

                        | `%%GLOBAL_RelatedSearchText%%` | . |

                        | `%%GLOBAL_ProductNoImageClassName%%` | . |

                        | `%%GLOBAL_ProductRatingImage%%` | . |

                        | `%%GLOBAL_HideSectionSorting%%` | . |

                        | `%%GLOBAL_SectionSortingOptions%%` | . |

                        | `%%GLOBAL_SectionExtraClass%%` | . |

                        | `%%GLOBAL_SectionResults%%` | . |

                        | `%%GLOBAL_NewsSmallContent%%` | . |

                        | `%%GLOBAL_GiftWrappingTitle%%` | . |

                        | `%%GLOBAL_GiftWrapModalClass%%` | . |

                        | `%%GLOBAL_ShippingData%%` | . |

                        | `%%GLOBAL_HideAddressLine%%` | . |

                        | `%%GLOBAL_HideItemList%%` | . |

                        | `%%GLOBAL_ShippingProviders%%` | . |

                        | `%%GLOBAL_HideHorizontalRule%%` | . |

                        | `%%GLOBAL_PriceLink%%` | . |

                        | `%%GLOBAL_PriceLow%%` | . |

                        | `%%GLOBAL_PriceHigh%%` | . |

                        | `%%GLOBAL_LastChildClass%%` | . |

                        | `%%GLOBAL_CategoryLink%%` | . |

                        | `%%GLOBAL_CategoryName%%` | . |

                        | `%%GLOBAL_SubCategoryList%%` | . |

                        | `%%GLOBAL_CurrencyFlagStyle%%` | . |

                        | `%%GLOBAL_CurrencySwitchLink%%` | . |

                        | `%%GLOBAL_CurrencySelected%%` | . |

                        | `%%GLOBAL_CurrencyFlag%%` | . |

                        | `%%GLOBAL_RootCatName%%` | . |

                        | `%%GLOBAL_RootCatList%%` | . |

                        | `%%GLOBAL_ProductRatingImageDimensions%%` | . |

                        | `%%GLOBAL_SitemapURL_HTML%%` | . |

                        | `%%GLOBAL_ModelType%%` | . |

                        | `%%GLOBAL_ModelHeading%%` | . |

                        | `%%GLOBAL_ModelBody%%` | . |

                        | `%%GLOBAL_ModelHideAllLink%%` | . |

                        | `%%GLOBAL_ModelSubsectionURL%%` | . |

                        | `%%GLOBAL_Slide_Link_Url%%` | . |

                        | `%%GLOBAL_Slide_Heading_Color%%` | . |

                        | `%%GLOBAL_Slide_Heading_Text%%` | . |

                        | `%%GLOBAL_Slide_Text_Color%%` | . |

                        | `%%GLOBAL_Slide_Text_Text%%` | . |

                        | `%%GLOBAL_Slide_Button_Hide%%` | . |

                        | `%%GLOBAL_Slide_Button_Color%%` | . |

                        | `%%GLOBAL_Slide_Button_Text%%` | . |

                        | `%%GLOBAL_Slide_Image_Url%%` | . |

                        | `%%GLOBAL_Slide_Image_AlternateText%%` | . |

                        | `%%GLOBAL_SocialMedia_Service_Url%%` | . |

                        | `%%GLOBAL_UseThemeSettingsClass%%` | . |

                        | `%%GLOBAL_SocialMedia_Service_Class%%` | . |

                        | `%%GLOBAL_SharingActiveTab%%` | . |

                        | `%%GLOBAL_SharingIcon%%` | . |

                        | `%%GLOBAL_SharingDisplay%%` | . |

                        | `%%GLOBAL_SubBrandImage%%` | . |

                        | `%%GLOBAL_SubCatImage%%` | . |

                        | `%%GLOBAL_VideoTitleShort%%` | . |

                        | `%%GLOBAL_VideoDescriptionShort%%` | . |

                        | `%%GLOBAL_NumOfItems%%` | . |

                        | `%%GLOBAL_WishListShared%%` | . |

                        | `%%GLOBAL_ShareWishListLink%%` | . |

                        | `%%GLOBAL_HideRemoveItemButton%%` | . |

                        | `%%GLOBAL_MerchantName%%` | . |

                        | `%%GLOBAL_AC_EmailBody%%` | . |

                        | `%%GLOBAL_AC_UnsubscribeLink%%` | . |

                        | `%%GLOBAL_Email%%` | . |

                        | `%%GLOBAL_Password%%` | . |

                        | `%%GLOBAL_Ebay_Listing_Abort_Email_Message_1%%` | . |

                        | `%%GLOBAL_Ebay_Listing_Abort_Email_Message_2%%` | . |

                        | `%%GLOBAL_Ebay_Listing_Error_Email_Message_1%%` | . |

                        | `%%GLOBAL_Ebay_Listing_Error_Email_Error_Heading%%` |
                        . |

                        | `%%GLOBAL_Ebay_Listing_Error_Email_Error%%` | . |

                        | `%%GLOBAL_Ebay_Listing_Error_Email_Error_Footer%%` | .
                        |

                        | `%%GLOBAL_Ebay_Listing_End_Email_Message_1%%` | . |

                        | `%%GLOBAL_Ebay_Listing_End_Email_Message_2%%` | . |

                        | `%%GLOBAL_Ebay_Listing_End_Email_Message_3%%` | . |

                        | `%%GLOBAL_Ebay_Listing_End_Email_Message_4%%` | . |

                        | `%%GLOBAL_Ebay_Listing_End_Email_Errors_Heading%%` | .
                        |

                        | `%%GLOBAL_Ebay_Listing_End_Email_Errors%%` | . |

                        | `%%GLOBAL_Ebay_Listing_End_Email_Warnings_Heading%%` |
                        . |

                        | `%%GLOBAL_Ebay_Listing_End_Email_Warnings%%` | . |

                        |
                        `%%GLOBAL_EmailIntegration_Export_Abort_Email_Message_1%%`
                        | . |

                        |
                        `%%GLOBAL_EmailIntegration_Export_Abort_Email_Message_2%%`
                        | . |

                        |
                        `%%GLOBAL_EmailIntegration_Export_Error_Email_Message_1%%`
                        | . |

                        |
                        `%%GLOBAL_EmailIntegration_Export_Error_Email_Error_Heading%%`
                        | . |

                        | `%%GLOBAL_EmailIntegration_Export_Error_Email_Error%%`
                        | . |

                        |
                        `%%GLOBAL_EmailIntegration_Export_Error_Email_Error_Footer%%`
                        | . |

                        |
                        `%%GLOBAL_EmailIntegration_Export_End_Email_Message_1%%`
                        | . |

                        |
                        `%%GLOBAL_EmailIntegration_Export_End_Email_Message_2%%`
                        | . |

                        |
                        `%%GLOBAL_EmailIntegration_Export_End_Email_Message_3%%`
                        | . |

                        |
                        `%%GLOBAL_EmailIntegration_Export_End_Email_Message_4%%`
                        | . |

                        |
                        `%%GLOBAL_EmailIntegration_Export_End_Email_Errors_Heading%%`
                        | . |

                        | `%%GLOBAL_EmailIntegration_Export_End_Email_Errors%%`
                        | . |

                        | `%%GLOBAL_EmailIntegrationNotice_Header%%` | . |

                        | `%%GLOBAL_EmailIntegrationNotice_Intro%%` | . |

                        | `%%GLOBAL_EmailIntegrationNotice_Error%%` | . |

                        | `%%GLOBAL_EmailIntegrationNotice_Message%%` | . |

                        | `%%GLOBAL_EmailIntegrationNotice_Time%%` | . |

                        | `%%GLOBAL_EmailIntegrationNotice_Details%%` | . |

                        | `%%GLOBAL_EmailIntegrationNotice_Type%%` | . |

                        | `%%GLOBAL_EmailIntegrationNotice_Subscription%%` | . |

                        | `%%GLOBAL_EmailIntegrationNotice_CommonCauses%%` | . |

                        | `%%GLOBAL_EmailIntegrationNotice_Cause1_Intro%%` | . |

                        | `%%GLOBAL_EmailIntegrationNotice_Cause1_Detail%%` | .
                        |

                        | `%%GLOBAL_EmailIntegrationNotice_Cause2_Intro%%` | . |

                        | `%%GLOBAL_EmailIntegrationNotice_Cause2_Detail%%` | .
                        |

                        | `%%GLOBAL_EmailIntegrationNotice_Cause3_Intro%%` | . |

                        | `%%GLOBAL_EmailIntegrationNotice_Cause3_Detail%%` | .
                        |

                        | `%%GLOBAL_EmailIntegrationNotice_Cause4_Intro%%` | . |

                        | `%%GLOBAL_EmailIntegrationNotice_Cause4_Detail%%` | .
                        |

                        | `%%GLOBAL_EmailIntegrationNotice_Cause5_Intro%%` | . |

                        | `%%GLOBAL_EmailIntegrationNotice_Cause5_Detail%%` | .
                        |

                        | `%%GLOBAL_EmailIntegrationNotice_Closing%%` | . |

                        | `%%GLOBAL_NoticeOfEmailIntegrationRulesDeletion_1%%` |
                        . |

                        | `%%GLOBAL_NoticeOfEmailIntegrationRulesDeletion_2%%` |
                        . |

                        |
                        `%%GLOBAL_NoticeOfEmailIntegrationRulesDeletion_Lists%%`
                        | . |

                        | `%%GLOBAL_DeletedLists%%` | . |

                        | `%%GLOBAL_NoticeOfEmailIntegrationRulesDeletion_3%%` |
                        . |

                        | `%%GLOBAL_NoticeOfEmailIntegrationRulesDeletion_4%%` |
                        . |

                        | `%%GLOBAL_NoticeOfEmailIntegrationRulesUpdate_1%%` | .
                        |

                        | `%%GLOBAL_NoticeOfEmailIntegrationRulesUpdate_2%%` | .
                        |

                        |
                        `%%GLOBAL_NoticeOfEmailIntegrationRulesUpdate_MergeFields%%`
                        | . |

                        | `%%GLOBAL_MergeFieldsList%%` | . |

                        | `%%GLOBAL_NoticeOfEmailIntegrationRulesUpdate_3%%` | .
                        |

                        | `%%GLOBAL_NoticeOfEmailIntegrationRulesUpdate_4%%` | .
                        |

                        | `%%GLOBAL_EmailMessage%%` | . |

                        | `%%GLOBAL_ToName%%` | . |

                        | `%%GLOBAL_Intro%%` | . |

                        | `%%GLOBAL_NoPaymentTaken%%` | . |

                        | `%%GLOBAL_OrderNumber%%` | . |

                        | `%%GLOBAL_ViewOrderStatusMsg%%` | . |

                        | `%%GLOBAL_PendingPaymentNotice%%` | . |

                        | `%%GLOBAL_PendingPaymentDetails%%` | . |

                        | `%%GLOBAL_OrderCommentBlock%%` | . |

                        | `%%GLOBAL_CartItemColumns%%` | . |

                        | `%%GLOBAL_LowInventoryWarning%%` | . |

                        | `%%GLOBAL_LowInventoryWarningIntro%%` | . |

                        | `%%GLOBAL_LowInventoryWarningProduct%%` | . |

                        | `%%GLOBAL_LowInventoryWarningCurrentStock%%` | . |

                        | `%%GLOBAL_LowInventoryWarningNotice%%` | . |

                        | `%%GLOBAL_TrackingLinkList%%` | . |

                        | `%%GLOBAL_ViewOrderStatusLink%%` | . |

                        | `%%GLOBAL_FormFieldList%%` | . |

                        | `%%GLOBAL_Question%%` | . |

                        | `%%GLOBAL_ProductReviewEmailUnsubscribeLink%%` | . |

                        | `%%GLOBAL_CustomerFirstName%%` | . |

                        | `%%GLOBAL_ReturnReceivedCredit%%` | . |

                        | `%%GLOBAL_AC_EmailIntroText%%` | . |

                        | `%%GLOBAL_ProductThumbnailUrl%%` | . |

                        | `%%GLOBAL_AC_ExistingCustomer%%` | . |

                        | `%%GLOBAL_AC_CustomerName%%` | . |

                        | `%%GLOBAL_AC_CustomerEmail%%` | . |

                        | `%%GLOBAL_AC_CustomerPhone%%` | . |

                        | `%%GLOBAL_AC_CustomerAddress%%` | . |

                        | `%%GLOBAL_AC_ModifiedType%%` | . |

                        | `%%GLOBAL_AC_DateModified%%` | . |

                        | `%%GLOBAL_AC_CartContents%%` | . |

                        | `%%GLOBAL_AC_CouponCode%%` | . |

                        | `%%GLOBAL_AC_CouponCodeText%%` | . |

                        | `%%GLOBAL_FormField%%` | . |

                        | `%%GLOBAL_FormValue%%` | . |

                        | `%%GLOBAL_PaymentGatewayAmount%%` | . |

                        | `%%GLOBAL_NoPaymentTakenModuleInTestMode%%` | . |

                        | `%%GLOBAL_OrderTrackingNo%%` | . |

                        | `%%GLOBAL_TrackURL%%` | . |

                        | `%%GLOBAL_RawProductPrice%%` | Currency, as a unique
                        alphanumeric code. To follow best practices for
                        microdata, use this variable – together with
                        `%%GLOBAL_RawProductPrice%%` – rather than
                        `%%GLOBAL_ProductPrice%%` (which includes a currency
                        token/symbol). |

                        | `%%GLOBAL_SelectedCurrencyCode%% ` | Currency, as a
                        unique alphanumeric code. To follow best practices for
                        microdata, use this variable – together with
                        `%%GLOBAL_RawProductPrice%%` – rather than
                        `%%GLOBAL_ProductPrice%%` (which includes a currency
                        token/symbol). |

                        | `%%GLOBAL_ProductReviewLink%%` | . |

                        | `%%GLOBAL_ProductQty%%` | . |

                        | `%%GLOBAL_ProductCustomFields%%` | You can use the
                        %%GLOBAL_ProductCustomFields%% variable in any template
                        file where you can use %%GLOBAL_ProductPrice%%. (Namely,
                        in template files that render a particular panel's
                        individual items. Examples are:
                        Snippets/CategoryProductsItem.html, for category pages;
                        or Snippets/HomeFeaturedProductsItem.html, for the
                        Featured Products panel.) Once
                        %%GLOBAL_ProductCustomFields%% is added, it will render
                        the entire table of custom fields. To incorporate this
                        variable into faceted search, we recommend adding the
                        following code to Panels/FacetedSearchProductGrid.html:

                        | |Once %%GLOBAL_ProductCustomFields%% is added, it will
                        render the entire table of custom fields. To incorporate
                        this variable into faceted search, we recommend adding
                        the following code to
                        Panels/FacetedSearchProductGrid.html:

                        | |<pre>{{#each product.custom_fields}}

                        | |   {{ id }} : {{ name }} : {{ value }}

                        | |{{/each}} </pre>|
                                
theme:
  background: '#3550b6'
  primary: '#4b71fc'
  secondary: '#4b71fc'
logo: >-
  https://cdn6.bigcommerce.com/s-qtmbtj/product_images/uploaded_images/bigcommerce-logomark-darkbg.png
meta:
  title: BigCommerce Dev Center - Theme Development & API Documentation
  description: >-
    Build apps and themes for thousands of successful merchants on our growing
    ecommerce platform
  favicon: 'https://www.bigcommerce.com/assets/images/favicons/favicon-96x96.png'
