{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "BigCommerce V3 API",
    "description": "TODO: Add a description"
  },
  "host": "api.bigcommerce.com",
  "basePath": "/stores",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/{store_hash}/v3/catalog/products": {
      "get": {
        "description": "Get all products from your BigCommerce catalog. Optional parameters can be passed in.",
        "summary": "Get All Products",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsByStoreHashGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by *Product* id. `/v3catalog/products?id=3`"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by name. `/v3catalog/products?name=towel`"
          },
          {
            "name": "sku",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by sku. `/v3catalog/products?sku=greenmd`"
          },
          {
            "name": "upc",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by upc. `/v3catalog/products?upc=1234566789102`"
          },
          {
            "name": "price",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by price. `/v3catalog/products?price=12.99`"
          },
          {
            "name": "weight",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by weight. `/v3catalog/products?weight=5`"
          },
          {
            "name": "condition",
            "in": "query",
            "required": false,
            "enum": [
              "new",
              "used",
              "refurbished"
            ],
            "x-enum-elements": [
              {
                "name": "new",
                "description": ""
              },
              {
                "name": "used",
                "description": ""
              },
              {
                "name": "refurbished",
                "description": ""
              }
            ],
            "type": "string",
            "description": "Filter items by condition. Options: `new`, `used`, `refurbished`. `/v3catalog/products?condition=used`"
          },
          {
            "name": "brand_id",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by brand_id.  `/v3catalog/products?brand_id=7`"
          },
          {
            "name": "date_modified",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by date_modified. The min or max filter needs to be added. `v3/catalog/products?date_modified:min=2018-06-15`"
          },
          {
            "name": "date_last_imported",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by date_last_imported. The min or max filter needs to be added. `v3/catalog/products?date_last_imported:min=2018-06-15`"
          },
          {
            "name": "is_visible",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Filter items by is_visible. This filter uses numbers instead. 0 = false and 1 = true `/v3catalog/products?is_visible=1`"
          },
          {
            "name": "is_featured",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Filter items by is_featured. `/v3catalog/products?is_featured=false`"
          },
          {
            "name": "is_free_shipping",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Filter items by is_free_shipping. `/v3catalog/products?is_free_shipping=true`"
          },
          {
            "name": "inventory_level",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by inventory_level. `/v3catalog/products?inventory_level=6`"
          },
          {
            "name": "inventory_low",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by inventory_low. Values: 1, 0. A value of 0 means the inventory is low. If the value is set to 1, it will return all products that do not have a low inventory\nor the inventory is not set. `/v3/catalog/products?inventory_low=0`"
          },
          {
            "name": "out_of_stock",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by out_of_stock. To see which products are out of stock, pass `out_of_stock`=`1`. `/v3/catalog/products?out_of_stock=1`"
          },
          {
            "name": "total_sold",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by total_sold. `/v3catalog/products?total_sold=15`"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "enum": [
              "physical",
              "digital"
            ],
            "x-enum-elements": [
              {
                "name": "physical",
                "description": ""
              },
              {
                "name": "digital",
                "description": ""
              }
            ],
            "type": "string",
            "description": "Filter items by type: `physical` or `digital`."
          },
          {
            "name": "categories",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by category_id. `/v3catalog/products?categories=8`"
          },
          {
            "name": "keyword",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name. `/v3catalog/products?keyword=bath`"
          },
          {
            "name": "keyword_context",
            "in": "query",
            "required": false,
            "enum": [
              "shopper",
              "merchant"
            ],
            "x-enum-elements": [
              {
                "name": "shopper",
                "description": ""
              },
              {
                "name": "merchant",
                "description": ""
              }
            ],
            "type": "string",
            "description": "Set context for a product search. `/v3catalog/products?keyword_context=merchant`"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "variants",
              "images",
              "custom_fields",
              "bulk_pricing_rules",
              "primary_image"
            ],
            "x-enum-elements": [
              {
                "name": "variants",
                "description": ""
              },
              {
                "name": "images",
                "description": ""
              },
              {
                "name": "custom_fields",
                "description": ""
              },
              {
                "name": "bulk_pricing_rules",
                "description": ""
              },
              {
                "name": "primary_image",
                "description": ""
              }
            ],
            "type": "string",
            "description": "Sub-resources to include on a product, in a comma-separated list. `/v3catalog/products?include=variants`"
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3catalog/products?include_fields=name, description`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3catalog/products?exclude_fields=weight, price`"
          },
          {
            "name": "availability",
            "in": "query",
            "required": false,
            "enum": [
              "available",
              "disabled",
              "preorder"
            ],
            "x-enum-elements": [
              {
                "name": "available",
                "description": ""
              },
              {
                "name": "disabled",
                "description": ""
              },
              {
                "name": "preorder",
                "description": ""
              }
            ],
            "type": "string",
            "description": "Filter items by availability. Values are: `available`, `disabled`, `preorder`. `/v3catalog/products?availability=available`"
          },
          {
            "name": "price_list_id",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter by the `price_list_id`. `/v3catalog/products?price_list_id=52`"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Specifies the page number in a limited (paginated) list of products. `/v3catalog/products?page=1`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Controls the number of items per page in a limited (paginated) list of products. `/v3catalog/products?limit=50`"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "enum": [
              "asc",
              "desc"
            ],
            "x-enum-elements": [
              {
                "name": "asc",
                "description": ""
              },
              {
                "name": "desc",
                "description": ""
              }
            ],
            "type": "string",
            "description": "Sort direction. Acceptable values are: `asc`, `desc`. `/v3catalog/products?direction=asc`"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "enum": [
              "id",
              "name",
              "sku",
              "price",
              "date_modified",
              "date_last_imported",
              "inventory_level",
              "is_visible",
              "total_sold"
            ],
            "x-enum-elements": [
              {
                "name": "id",
                "description": ""
              },
              {
                "name": "name",
                "description": ""
              },
              {
                "name": "sku",
                "description": ""
              },
              {
                "name": "price",
                "description": ""
              },
              {
                "name": "date_modified",
                "description": ""
              },
              {
                "name": "date_last_imported",
                "description": ""
              },
              {
                "name": "inventory_level",
                "description": ""
              },
              {
                "name": "is_visible",
                "description": ""
              },
              {
                "name": "total_sold",
                "description": ""
              }
            ],
            "type": "string",
            "description": "Field name to sort by. `/v3catalog/products?sort=date_last_imported`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductCollectionResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "name": "Fog Linen Chambray Towel - Beige Stripe",
                    "type": "physical",
                    "sku": "SLCTBS",
                    "description": "<p>The perfect beach towel: thin, lightweight and highly absorbent. Crafted by Fog Linen in Japan using soft Lithuanian linen, each towel rolls up for compact stowaway. Dry off after a refreshing dip in the ocean and stretch out on it for a sun bath. The thinness ensures a quick dry so you can have it rolled back up in your bag without soaking your belongings.</p>\\r\\n<p>Measures 75 x 145 cm/29.5 x 57 in</p>\\r\\n<p>100% Linen</p>",
                    "weight": 1,
                    "width": 6,
                    "depth": 2,
                    "height": 4,
                    "price": 49.99,
                    "cost_price": 12.99,
                    "retail_price": 32.99,
                    "tax_class_id": 0,
                    "product_tax_code": "3451",
                    "categories": [
                      1,
                      2
                    ],
                    "brand_id": 5,
                    "option_set_id": 19,
                    "inventory_level": 10,
                    "inventory_warning_level": 10,
                    "inventory_tracking": "none",
                    "fixed_cost_shipping_price": 8,
                    "is_free_shipping": false,
                    "is_visible": true,
                    "is_featured": true,
                    "related_products": [
                      -1
                    ],
                    "bin_picking_number": "56WB",
                    "layout_file": "product.html",
                    "upc": "1234567890",
                    "search_keywords": "towel, bath, kitchen",
                    "availability": "available",
                    "gift_wrapping_options_type": "list",
                    "gift_wrapping_options_list": [
                      1,
                      2,
                      3
                    ],
                    "sort_order": 4,
                    "condition": "New",
                    "is_condition_shown": true,
                    "order_quantity_minimum": 5,
                    "order_quantity_maximum": 50,
                    "meta_keywords": [],
                    "view_count": 146,
                    "preorder_release_date": "null",
                    "is_preorder_only": false,
                    "is_price_hidden": false,
                    "custom_url": {
                      "url": "/this-is-a-custom-url/",
                      "is_customized": true
                    },
                    "open_graph_type": "product",
                    "id": 81,
                    "calculated_price": 49.99,
                    "reviews_rating_sum": 0,
                    "reviews_count": 0,
                    "total_sold": 1050,
                    "custom_fields": [
                      {
                        "name": "Release year",
                        "value": "1987",
                        "id": 1
                      }
                    ],
                    "bulk_pricing_rules": [
                      {
                        "quantity_min": 10,
                        "quantity_max": 50,
                        "type": "price",
                        "amount": 10,
                        "id": 3
                      }
                    ],
                    "date_created": "2015-05-05T12:30:00+00:00",
                    "date_modified": "2015-12-15T06:22:30+00:00",
                    "images": [
                      {
                        "is_thumbnail": true,
                        "sort_order": 2,
                        "id": 265,
                        "product_id": 118,
                        "image_file": "%%SAMPLE%%/stencil/foglinenbeigestripetowel3b.jpg",
                        "url_zoom": "\"https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.1280.1280.jpg?c=2",
                        "url_standard": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.500.750.jpg?c=2",
                        "url_thumbnail": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.190.285.jpg?c=2",
                        "url_tiny": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.60.90.jpg?c=2\"",
                        "date_modified": "2018-01-05T21:47:35+00:00"
                      }
                    ],
                    "videos": [
                      {
                        "title": "About us",
                        "description": "Thank you for visiting us",
                        "sort_order": 1,
                        "type": "youtube",
                        "id": 1,
                        "video_id": "123345AA",
                        "product_id": 113,
                        "length": "22:43"
                      }
                    ],
                    "variants": [
                      {
                        "cost_price": 12,
                        "price": 14,
                        "weight": 22,
                        "width": 40,
                        "height": 100,
                        "depth": 4,
                        "is_free_shipping": false,
                        "purchasing_disabled": false,
                        "inventory_level": 50,
                        "inventory_warning_level": 10,
                        "id": 156,
                        "product_id": 77,
                        "sku": "M-ORAN-1",
                        "sku_id": 197,
                        "option_values": [
                          {
                            "option_display_name": "Color",
                            "label": "Color",
                            "id": 107,
                            "option_id": 124
                          }
                        ],
                        "calculated_price": 49.99
                      }
                    ],
                    "base_variant_id": 22
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Create a product.",
        "summary": "Create a Product",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsByStoreHashPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductPost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "name": "Fog Linen Chambray Towel - Beige Stripe",
                    "type": "physical",
                    "sku": "SLCTBS",
                    "description": "<p>The perfect beach towel: thin, lightweight and highly absorbent. Crafted by Fog Linen in Japan using soft Lithuanian linen, each towel rolls up for compact stowaway. Dry off after a refreshing dip in the ocean and stretch out on it for a sun bath. The thinness ensures a quick dry so you can have it rolled back up in your bag without soaking your belongings.</p>\\r\\n<p>Measures 75 x 145 cm/29.5 x 57 in</p>\\r\\n<p>100% Linen</p>",
                    "weight": 1,
                    "width": 6,
                    "depth": 2,
                    "height": 4,
                    "price": 49.99,
                    "cost_price": 12.99,
                    "retail_price": 32.99,
                    "tax_class_id": 0,
                    "product_tax_code": "3451",
                    "categories": [
                      1,
                      2
                    ],
                    "brand_id": 5,
                    "option_set_id": 19,
                    "inventory_level": 10,
                    "inventory_warning_level": 10,
                    "inventory_tracking": "none",
                    "fixed_cost_shipping_price": 8,
                    "is_free_shipping": false,
                    "is_visible": true,
                    "is_featured": true,
                    "related_products": [
                      -1
                    ],
                    "bin_picking_number": "56WB",
                    "layout_file": "product.html",
                    "upc": "1234567890",
                    "search_keywords": "towel, bath, kitchen",
                    "availability": "available",
                    "gift_wrapping_options_type": "list",
                    "gift_wrapping_options_list": [
                      1,
                      2,
                      3
                    ],
                    "sort_order": 4,
                    "condition": "New",
                    "is_condition_shown": true,
                    "order_quantity_minimum": 5,
                    "order_quantity_maximum": 50,
                    "meta_keywords": [],
                    "view_count": 146,
                    "preorder_release_date": "null",
                    "is_preorder_only": false,
                    "is_price_hidden": false,
                    "custom_url": {
                      "url": "/this-is-a-custom-url/",
                      "is_customized": true
                    },
                    "open_graph_type": "product",
                    "id": 81,
                    "calculated_price": 49.99,
                    "reviews_rating_sum": 0,
                    "reviews_count": 0,
                    "total_sold": 1050,
                    "custom_fields": [
                      {
                        "name": "Release year",
                        "value": "1987",
                        "id": 1
                      }
                    ],
                    "bulk_pricing_rules": [
                      {
                        "quantity_min": 10,
                        "quantity_max": 50,
                        "type": "price",
                        "amount": 10,
                        "id": 3
                      }
                    ],
                    "date_created": "2015-05-05T12:30:00+00:00",
                    "date_modified": "2015-12-15T06:22:30+00:00",
                    "images": [
                      {
                        "is_thumbnail": true,
                        "sort_order": 2,
                        "id": 265,
                        "product_id": 118,
                        "image_file": "%%SAMPLE%%/stencil/foglinenbeigestripetowel3b.jpg",
                        "url_zoom": "\"https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.1280.1280.jpg?c=2",
                        "url_standard": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.500.750.jpg?c=2",
                        "url_thumbnail": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.190.285.jpg?c=2",
                        "url_tiny": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.60.90.jpg?c=2\"",
                        "date_modified": "2018-01-05T21:47:35+00:00"
                      }
                    ],
                    "videos": [
                      {
                        "title": "About us",
                        "description": "Thank you for visiting us",
                        "sort_order": 1,
                        "type": "youtube",
                        "id": 1,
                        "video_id": "123345AA",
                        "product_id": 113,
                        "length": "22:43"
                      }
                    ],
                    "variants": [
                      {
                        "cost_price": 12,
                        "price": 14,
                        "weight": 22,
                        "width": 40,
                        "height": 100,
                        "depth": 4,
                        "is_free_shipping": false,
                        "purchasing_disabled": false,
                        "inventory_level": 50,
                        "inventory_warning_level": 10,
                        "id": 156,
                        "product_id": 77,
                        "sku": "M-ORAN-1",
                        "sku_id": 197,
                        "option_values": [
                          {
                            "option_display_name": "Color",
                            "label": "Color",
                            "id": 107,
                            "option_id": 124
                          }
                        ],
                        "calculated_price": 49.99
                      }
                    ],
                    "base_variant_id": 22
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Product was in conflict with another product. This is the result of duplicate unique values, such as name or SKU; a missing or invalid `category_id`, `brand_id`, or `tax_class id`; or a conflicting `bulk_pricing_rule`.",
            "schema": {}
          },
          "422": {
            "description": "Product was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete a product(s). At least one filter parameter should be passed to control what is being deleted. \nFor example to delete products with the id's of 1,2 and 3, use `DELETE /v3/catalog/products?id:in=1,2,3`",
        "summary": "Delete a Product(s)",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsByStoreHashDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by *Product* id. `/v3catalog/products?id=3`"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by name. `/v3catalog/products?name=towel`"
          },
          {
            "name": "sku",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by sku. `/v3catalog/products?sku=greenmd`"
          },
          {
            "name": "price",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by price. `/v3catalog/products?price=12.99`"
          },
          {
            "name": "weight",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by weight. `/v3catalog/products?weight=5`"
          },
          {
            "name": "condition",
            "in": "query",
            "required": false,
            "enum": [
              "new",
              "used",
              "refurbished"
            ],
            "x-enum-elements": [
              {
                "name": "new",
                "description": ""
              },
              {
                "name": "used",
                "description": ""
              },
              {
                "name": "refurbished",
                "description": ""
              }
            ],
            "type": "string",
            "description": "Filter items by condition. Options: `new`, `used`, `refurbished`. `/v3catalog/products?condition=used`"
          },
          {
            "name": "brand_id",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by brand_id.  `/v3catalog/products?brand_id=7`"
          },
          {
            "name": "date_modified",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by date_modified. The min or max filter needs to be added. `v3/catalog/products?date_modified:min=2018-06-15`"
          },
          {
            "name": "date_last_imported",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by date_last_imported. The min or max filter needs to be added. `v3/catalog/products?date_last_imported:min=2018-06-15`"
          },
          {
            "name": "is_visible",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Filter items by is_visible. This filter uses numbers instead. 0 = false and 1 = true `/v3catalog/products?is_visible=0`"
          },
          {
            "name": "is_featured",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Filter items by is_featured. `/v3catalog/products?is_featured=false`"
          },
          {
            "name": "inventory_level",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by inventory_level. `/v3catalog/products?inventory_level=6`"
          },
          {
            "name": "total_sold",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by total_sold. `/v3catalog/products?total_sold=15`"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "enum": [
              "physical",
              "digital"
            ],
            "x-enum-elements": [
              {
                "name": "physical",
                "description": ""
              },
              {
                "name": "digital",
                "description": ""
              }
            ],
            "type": "string",
            "description": "Filter items by type: `physical` or `digital`."
          },
          {
            "name": "categories",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by *Category* id. `/v3catalog/products?categories=8`"
          },
          {
            "name": "keyword",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by keywords found in the `name`, `description`, or `sku` fields, or in the brand name. `/v3catalog/products?keyword=bath`"
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}": {
      "get": {
        "description": "Get a product using `product_id`. Optional parameters can be passed in.",
        "summary": "Get a Product by Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsByStoreHashAndProductIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "variants",
              "images",
              "custom_fields",
              "bulk_pricing_rules",
              "primary_image"
            ],
            "x-enum-elements": [
              {
                "name": "variants",
                "description": ""
              },
              {
                "name": "images",
                "description": ""
              },
              {
                "name": "custom_fields",
                "description": ""
              },
              {
                "name": "bulk_pricing_rules",
                "description": ""
              },
              {
                "name": "primary_image",
                "description": ""
              }
            ],
            "type": "string",
            "description": "Sub-resources to include on a product, in a comma-separated list. Valid expansions currently include `variants`, `images`, 'primary_image`, `custom_fields`, and `bulk_pricing_rules`. `/v3catalog/products?include=variants`"
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3catalog/products?include_fields=name, description`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3catalog/products?exclude_fields=weight, price`"
          },
          {
            "name": "price_list_id",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter by the `price_list_id`. `/v3catalog/products?price_list_id=52`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "name": "Fog Linen Chambray Towel - Beige Stripe",
                    "type": "physical",
                    "sku": "SLCTBS",
                    "description": "<p>The perfect beach towel: thin, lightweight and highly absorbent. Crafted by Fog Linen in Japan using soft Lithuanian linen, each towel rolls up for compact stowaway. Dry off after a refreshing dip in the ocean and stretch out on it for a sun bath. The thinness ensures a quick dry so you can have it rolled back up in your bag without soaking your belongings.</p>\\r\\n<p>Measures 75 x 145 cm/29.5 x 57 in</p>\\r\\n<p>100% Linen</p>",
                    "weight": 1,
                    "width": 6,
                    "depth": 2,
                    "height": 4,
                    "price": 49.99,
                    "cost_price": 12.99,
                    "retail_price": 32.99,
                    "tax_class_id": 0,
                    "product_tax_code": "3451",
                    "categories": [
                      1,
                      2
                    ],
                    "brand_id": 5,
                    "option_set_id": 19,
                    "inventory_level": 10,
                    "inventory_warning_level": 10,
                    "inventory_tracking": "none",
                    "fixed_cost_shipping_price": 8,
                    "is_free_shipping": false,
                    "is_visible": true,
                    "is_featured": true,
                    "related_products": [
                      -1
                    ],
                    "bin_picking_number": "56WB",
                    "layout_file": "product.html",
                    "upc": "1234567890",
                    "search_keywords": "towel, bath, kitchen",
                    "availability": "available",
                    "gift_wrapping_options_type": "list",
                    "gift_wrapping_options_list": [
                      1,
                      2,
                      3
                    ],
                    "sort_order": 4,
                    "condition": "New",
                    "is_condition_shown": true,
                    "order_quantity_minimum": 5,
                    "order_quantity_maximum": 50,
                    "meta_keywords": [],
                    "view_count": 146,
                    "preorder_release_date": "null",
                    "is_preorder_only": false,
                    "is_price_hidden": false,
                    "custom_url": {
                      "url": "/this-is-a-custom-url/",
                      "is_customized": true
                    },
                    "open_graph_type": "product",
                    "id": 81,
                    "calculated_price": 49.99,
                    "reviews_rating_sum": 0,
                    "reviews_count": 0,
                    "total_sold": 1050,
                    "custom_fields": [
                      {
                        "name": "Release year",
                        "value": "1987",
                        "id": 1
                      }
                    ],
                    "bulk_pricing_rules": [
                      {
                        "quantity_min": 10,
                        "quantity_max": 50,
                        "type": "price",
                        "amount": 10,
                        "id": 3
                      }
                    ],
                    "date_created": "2015-05-05T12:30:00+00:00",
                    "date_modified": "2015-12-15T06:22:30+00:00",
                    "images": [
                      {
                        "is_thumbnail": true,
                        "sort_order": 2,
                        "id": 265,
                        "product_id": 118,
                        "image_file": "%%SAMPLE%%/stencil/foglinenbeigestripetowel3b.jpg",
                        "url_zoom": "\"https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.1280.1280.jpg?c=2",
                        "url_standard": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.500.750.jpg?c=2",
                        "url_thumbnail": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.190.285.jpg?c=2",
                        "url_tiny": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.60.90.jpg?c=2\"",
                        "date_modified": "2018-01-05T21:47:35+00:00"
                      }
                    ],
                    "videos": [
                      {
                        "title": "About us",
                        "description": "Thank you for visiting us",
                        "sort_order": 1,
                        "type": "youtube",
                        "id": 1,
                        "video_id": "123345AA",
                        "product_id": 113,
                        "length": "22:43"
                      }
                    ],
                    "variants": [
                      {
                        "cost_price": 12,
                        "price": 14,
                        "weight": 22,
                        "width": 40,
                        "height": 100,
                        "depth": 4,
                        "is_free_shipping": false,
                        "purchasing_disabled": false,
                        "inventory_level": 50,
                        "inventory_warning_level": 10,
                        "id": 156,
                        "product_id": 77,
                        "sku": "M-ORAN-1",
                        "sku_id": 197,
                        "option_values": [
                          {
                            "option_display_name": "Color",
                            "label": "Color",
                            "id": 107,
                            "option_id": 124
                          }
                        ],
                        "calculated_price": 49.99
                      }
                    ],
                    "base_variant_id": 22
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Updates a product using the `product_id`.",
        "summary": "Update a Product by Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsByStoreHashAndProductIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductPut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "name": "Fog Linen Chambray Towel - Beige Stripe",
                    "type": "physical",
                    "sku": "SLCTBS",
                    "description": "<p>The perfect beach towel: thin, lightweight and highly absorbent. Crafted by Fog Linen in Japan using soft Lithuanian linen, each towel rolls up for compact stowaway. Dry off after a refreshing dip in the ocean and stretch out on it for a sun bath. The thinness ensures a quick dry so you can have it rolled back up in your bag without soaking your belongings.</p>\\r\\n<p>Measures 75 x 145 cm/29.5 x 57 in</p>\\r\\n<p>100% Linen</p>",
                    "weight": 1,
                    "width": 6,
                    "depth": 2,
                    "height": 4,
                    "price": 49.99,
                    "cost_price": 12.99,
                    "retail_price": 32.99,
                    "tax_class_id": 0,
                    "product_tax_code": "3451",
                    "categories": [
                      1,
                      2
                    ],
                    "brand_id": 5,
                    "option_set_id": 19,
                    "inventory_level": 10,
                    "inventory_warning_level": 10,
                    "inventory_tracking": "none",
                    "fixed_cost_shipping_price": 8,
                    "is_free_shipping": false,
                    "is_visible": true,
                    "is_featured": true,
                    "related_products": [
                      -1
                    ],
                    "bin_picking_number": "56WB",
                    "layout_file": "product.html",
                    "upc": "1234567890",
                    "search_keywords": "towel, bath, kitchen",
                    "availability": "available",
                    "gift_wrapping_options_type": "list",
                    "gift_wrapping_options_list": [
                      1,
                      2,
                      3
                    ],
                    "sort_order": 4,
                    "condition": "New",
                    "is_condition_shown": true,
                    "order_quantity_minimum": 5,
                    "order_quantity_maximum": 50,
                    "meta_keywords": [],
                    "view_count": 146,
                    "preorder_release_date": "null",
                    "is_preorder_only": false,
                    "is_price_hidden": false,
                    "custom_url": {
                      "url": "/this-is-a-custom-url/",
                      "is_customized": true
                    },
                    "open_graph_type": "product",
                    "id": 81,
                    "calculated_price": 49.99,
                    "reviews_rating_sum": 0,
                    "reviews_count": 0,
                    "total_sold": 1050,
                    "custom_fields": [
                      {
                        "name": "Release year",
                        "value": "1987",
                        "id": 1
                      }
                    ],
                    "bulk_pricing_rules": [
                      {
                        "quantity_min": 10,
                        "quantity_max": 50,
                        "type": "price",
                        "amount": 10,
                        "id": 3
                      }
                    ],
                    "date_created": "2015-05-05T12:30:00+00:00",
                    "date_modified": "2015-12-15T06:22:30+00:00",
                    "images": [
                      {
                        "is_thumbnail": true,
                        "sort_order": 2,
                        "id": 265,
                        "product_id": 118,
                        "image_file": "%%SAMPLE%%/stencil/foglinenbeigestripetowel3b.jpg",
                        "url_zoom": "\"https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.1280.1280.jpg?c=2",
                        "url_standard": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.500.750.jpg?c=2",
                        "url_thumbnail": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.190.285.jpg?c=2",
                        "url_tiny": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.60.90.jpg?c=2\"",
                        "date_modified": "2018-01-05T21:47:35+00:00"
                      }
                    ],
                    "videos": [
                      {
                        "title": "About us",
                        "description": "Thank you for visiting us",
                        "sort_order": 1,
                        "type": "youtube",
                        "id": 1,
                        "video_id": "123345AA",
                        "product_id": 113,
                        "length": "22:43"
                      }
                    ],
                    "variants": [
                      {
                        "cost_price": 12,
                        "price": 14,
                        "weight": 22,
                        "width": 40,
                        "height": 100,
                        "depth": 4,
                        "is_free_shipping": false,
                        "purchasing_disabled": false,
                        "inventory_level": 50,
                        "inventory_warning_level": 10,
                        "id": 156,
                        "product_id": 77,
                        "sku": "M-ORAN-1",
                        "sku_id": 197,
                        "option_values": [
                          {
                            "option_display_name": "Color",
                            "label": "Color",
                            "id": 107,
                            "option_id": 124
                          }
                        ],
                        "calculated_price": 49.99
                      }
                    ],
                    "base_variant_id": 22
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          },
          "409": {
            "description": "Product was in conflict with another product. This is caused by: duplicate unique values, such as name or SKU; a missing \n, brand, or tax_class with which the product is being associated; or a conflicting bulk pricing rule.",
            "schema": {}
          },
          "422": {
            "description": "Product was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Deletes a product using the `product_id`.",
        "summary": "Delete a Product by Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsByStoreHashAndProductIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}/images": {
      "get": {
        "description": "Returns all images on a product using the `product_id`. Optional parameters can be passed in.",
        "summary": "Get All Product Images",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsImagesByStoreHashAndProductIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/products/product_id/images?include_fields=url_zoom, description`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/products/product_id/images?exclude_fields=url_tiny, url_thumbnail`"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Specifies the page number in a limited (paginated) list of products. `/v3/catalog/products/product_id/images?page=1`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Controls the number of items per page in a limited (paginated) list of products. `/v3/catalog/products/product_id/images?limit=50`"
          }
        ],
        "responses": {
          "204": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductImageCollectionResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "is_thumbnail": true,
                    "sort_order": 2,
                    "id": 265,
                    "product_id": 118,
                    "image_file": "%%SAMPLE%%/stencil/foglinenbeigestripetowel3b.jpg",
                    "url_zoom": "\"https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.1280.1280.jpg?c=2",
                    "url_standard": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.500.750.jpg?c=2",
                    "url_thumbnail": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.190.285.jpg?c=2",
                    "url_tiny": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.60.90.jpg?c=2\"",
                    "date_modified": "2018-01-05T21:47:35+00:00"
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The product ID does not exist.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Creates an image on a product using the `product_id`. Publicly accessible URLs and files (form post) are valid parameters.\nMust either provide a `image_url` or a `image_file`.",
        "summary": "Create a Product Image",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsImagesByStoreHashAndProductIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductImagePost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductImageResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "is_thumbnail": true,
                  "sort_order": 2,
                  "id": 265,
                  "product_id": 118,
                  "image_file": "%%SAMPLE%%/stencil/foglinenbeigestripetowel3b.jpg",
                  "url_zoom": "\"https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.1280.1280.jpg?c=2",
                  "url_standard": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.500.750.jpg?c=2",
                  "url_thumbnail": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.190.285.jpg?c=2",
                  "url_tiny": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.60.90.jpg?c=2\"",
                  "date_modified": "2018-01-05T21:47:35+00:00"
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The product ID does not exist.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}/images/{image_id}": {
      "get": {
        "description": "Return image on a product using  `product_id` and `image_id`. Optional parameters can be passed in.",
        "summary": "Get a Product Image by Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsImagesImageIdByStoreHashAndProductIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "image_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the *Image*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/products/product_id/images/{image_id}?include_fields=url_zoom, description`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/products/product_id/images/{image_id}?exclude_fields=url_tiny, url_thumbnail`"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of product images and metadata.",
            "schema": {
              "$ref": "#/definitions/ProductImageResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "is_thumbnail": true,
                  "sort_order": 2,
                  "id": 265,
                  "product_id": 118,
                  "image_file": "%%SAMPLE%%/stencil/foglinenbeigestripetowel3b.jpg",
                  "url_zoom": "\"https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.1280.1280.jpg?c=2",
                  "url_standard": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.500.750.jpg?c=2",
                  "url_thumbnail": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.190.285.jpg?c=2",
                  "url_tiny": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.60.90.jpg?c=2\"",
                  "date_modified": "2018-01-05T21:47:35+00:00"
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Update an image on a product using the `product_id` and the `image_id`. Publicly accessible URLs and files (form post) are valid parameters.",
        "summary": "Update a Product Image",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsImagesImageIdByStoreHashAndProductIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "image_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Image*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductImageBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductImageResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "is_thumbnail": true,
                  "sort_order": 2,
                  "id": 265,
                  "product_id": 118,
                  "image_file": "%%SAMPLE%%/stencil/foglinenbeigestripetowel3b.jpg",
                  "url_zoom": "\"https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.1280.1280.jpg?c=2",
                  "url_standard": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.500.750.jpg?c=2",
                  "url_thumbnail": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.190.285.jpg?c=2",
                  "url_tiny": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.60.90.jpg?c=2\"",
                  "date_modified": "2018-01-05T21:47:35+00:00"
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Deletes a product image using the  `product_id` and the `image_id`.",
        "summary": "Delete a Product Image",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsImagesImageIdByStoreHashAndProductIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "image_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Image*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}/videos": {
      "get": {
        "description": "Get all videos on a product using the `product_id `. Optional parameters can be passed in.",
        "summary": "Get All Product Video",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsVideosByStoreHashAndProductIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product* to which the resource belongs."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/products/{product_id}/videos?include_fields=type, title`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/products/{product_id}/videos?exclude_fields=sort_order`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductVideoCollectionResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "title": "About us",
                    "description": "Thank you for visiting us",
                    "sort_order": 1,
                    "type": "youtube",
                    "id": 1,
                    "video_id": "123345AA",
                    "product_id": 113,
                    "length": "22:43"
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Creates a video on a product using the `product_id`. Publicly accessible URLs and files (form post) are valid parameters.",
        "summary": "Create a Product Video",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsVideosByStoreHashAndProductIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product* to which the resource belongs."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductVideoPost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductVideoResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "title": "About us",
                  "description": "Thank you for visiting us",
                  "sort_order": 1,
                  "type": "youtube",
                  "id": 1,
                  "video_id": "123345AA",
                  "product_id": 113,
                  "length": "22:43"
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}/videos/{video_id}": {
      "get": {
        "description": "Get a video on a product using the `product_id` and the `video_id`. Optional parameters can be passed in.",
        "summary": "Get a Product Video by Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsVideosVideoIdByStoreHashAndProductIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product* to which the resource belongs."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "video_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The id of the *Video*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/products/{product_id}/videos/{video_id}?include_fields=type, title`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/products/{product_id}/videos/{video_id}?exclude_fields=sort_order`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductVideoResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "title": "About us",
                  "description": "Thank you for visiting us",
                  "sort_order": 1,
                  "type": "youtube",
                  "id": 1,
                  "video_id": "123345AA",
                  "product_id": 113,
                  "length": "22:43"
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Updates a video on a product using the `product_id` and the `video_id`.",
        "summary": "Update a Product Video",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsVideosVideoIdByStoreHashAndProductIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product* to which the resource belongs."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "video_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The id of the *Video*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductVideoPut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductVideoResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "title": "About us",
                  "description": "Thank you for visiting us",
                  "sort_order": 1,
                  "type": "youtube",
                  "id": 1,
                  "video_id": "123345AA",
                  "product_id": 113,
                  "length": "22:43"
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Deletes a product video using the `product_id` and the `video_id`.",
        "summary": "Delete a Product Video",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsVideosVideoIdByStoreHashAndProductIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product* to which the resource belongs."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "video_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The id of the *Video*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}/variants": {
      "get": {
        "description": "Get all variants on a product by `product_id`. Optional parameters can be passed in.",
        "summary": "Get a Variant by Product Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsVariantsByStoreHashAndProductIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The if of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/products/{product_id}/variants?include_fields=image_url, product_id`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/products/{product_id}/variants?exclude_fields=weight, price`"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Specifies the page number in a limited (paginated) list of products. `/v3/catalog/products/{product_id}/variants?page=1`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Controls the number of items per page in a limited (paginated) list of products. `/v3/catalog/products/{product_id}/variants?limit=50`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/VariantCollectionResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "cost_price": 12,
                    "price": 14,
                    "weight": 22,
                    "width": 40,
                    "height": 100,
                    "depth": 4,
                    "is_free_shipping": false,
                    "purchasing_disabled": false,
                    "inventory_level": 50,
                    "inventory_warning_level": 10,
                    "id": 156,
                    "product_id": 77,
                    "sku": "M-ORAN-1",
                    "sku_id": 197,
                    "option_values": [
                      {
                        "option_display_name": "Color",
                        "label": "Color",
                        "id": 107,
                        "option_id": 124
                      }
                    ],
                    "calculated_price": 49.99
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Creates a variant using the `product_id`.",
        "summary": "Create a Variant",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsVariantsByStoreHashAndProductIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The if of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/VariantPost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/VariantResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "cost_price": 12,
                  "price": 14,
                  "weight": 22,
                  "width": 40,
                  "height": 100,
                  "depth": 4,
                  "is_free_shipping": false,
                  "purchasing_disabled": false,
                  "inventory_level": 50,
                  "inventory_warning_level": 10,
                  "id": 156,
                  "product_id": 77,
                  "sku": "M-ORAN-1",
                  "sku_id": 197,
                  "option_values": [
                    {
                      "option_display_name": "Color",
                      "label": "Color",
                      "id": 107,
                      "option_id": 124
                    }
                  ],
                  "calculated_price": 49.99
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}/variants/{variant_id}": {
      "get": {
        "description": "Get a variant using the `product_id` and `variant_id`. Optional parameters can be passed in.",
        "summary": "Get a Variant by Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsVariantsVariantIdByStoreHashAndProductIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The if of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "variant_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Variant* on a *Product*, or on an associated *Price List Record*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/products/{product_id}/variants/{variant_id}?include_fields=image_url, product_id`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/products/{product_id}/variants/{variant_id}?exclude_fields=weight, price`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/VariantResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "cost_price": 12,
                  "price": 14,
                  "weight": 22,
                  "width": 40,
                  "height": 100,
                  "depth": 4,
                  "is_free_shipping": false,
                  "purchasing_disabled": false,
                  "inventory_level": 50,
                  "inventory_warning_level": 10,
                  "id": 156,
                  "product_id": 77,
                  "sku": "M-ORAN-1",
                  "sku_id": 197,
                  "option_values": [
                    {
                      "option_display_name": "Color",
                      "label": "Color",
                      "id": 107,
                      "option_id": 124
                    }
                  ],
                  "calculated_price": 49.99
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Updates a variant using the `product_id` and the `variant_id`.",
        "summary": "Update Variant",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsVariantsVariantIdByStoreHashAndProductIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The if of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "variant_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Variant* on a *Product*, or on an associated *Price List Record*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/VariantPut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/VariantResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "cost_price": 12,
                  "price": 14,
                  "weight": 22,
                  "width": 40,
                  "height": 100,
                  "depth": 4,
                  "is_free_shipping": false,
                  "purchasing_disabled": false,
                  "inventory_level": 50,
                  "inventory_warning_level": 10,
                  "id": 156,
                  "product_id": 77,
                  "sku": "M-ORAN-1",
                  "sku_id": 197,
                  "option_values": [
                    {
                      "option_display_name": "Color",
                      "label": "Color",
                      "id": 107,
                      "option_id": 124
                    }
                  ],
                  "calculated_price": 49.99
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Deletes a variant using the `product_id` and the `variant_id`.",
        "summary": "Delete Variant by Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsVariantsVariantIdByStoreHashAndProductIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The if of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "variant_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Variant* on a *Product*, or on an associated *Price List Record*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}/variants/{variant_id}/image": {
      "post": {
        "description": "Create a variant image using the `product_id` and the `variant_id`.",
        "summary": "Create Variant Image",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsVariantsVariantIdImageByStoreHashAndProductIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The if of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "variant_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Variant* on a *Produc*, or on an associated *Price List Record*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/VariantImageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ImageResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "image_url": "https://your_image_site/image.png"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          },
          "422": {
            "description": "Image was not valid. This is the result of a missing `image_file` field or of an incorrect file type. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}/variants/{variant_id}/metafields": {
      "get": {
        "description": "Get a variant metafield by `product_id` and `variant_id`. Optional parameters can be passed in.",
        "summary": "Get Variant Metafield Object",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsVariantsVariantIdMetafieldsByStoreHashAndProductIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "variant_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Variant* on a *Product*, or on an associated *Price List Record*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Specifies the page number in a limited (paginated) list of products. `/v3/catalog/products/{product_id}/variants/{variant_id}/metafields?page=1`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Controls the number of items per page in a limited (paginated) list of products. `/v3/catalog/products/{product_id}/variants/{variant_id}/metafields?limit=50`"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter based on a metafield's key. `/v3/catalog/products/{product_id}/variants/{variant_id}/metafields?key=location`"
          },
          {
            "name": "namespace",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter based on a metafield's namespace. `/v3/catalog/products/{product_id}/variants/{variant_id}/metafields?namspace=3`"
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/products/{product_id}/variants/{variant_id}/metafields?include_fields=name, description`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/products/{product_id}/variants/{variant_id}/metafields?exclude_fields=weight, price`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetaFieldCollectionResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "permission_set": "app_only",
                    "namespace": "Warehouse SKUS",
                    "key": "Location",
                    "value": "4H",
                    "description": "location in the warehouse",
                    "resource_type": "category",
                    "resource_id": 111,
                    "id": 6,
                    "created_at": "2018-05-07T20:14:17+00:00",
                    "updated_at": "2018-05-07T20:14:17+00:00"
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Creates a variant metafield by `product_id` and `variant_id`.",
        "summary": "Create Variant Metafield",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsVariantsVariantIdMetafieldsByStoreHashAndProductIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "variant_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Variant* on a *Product*, or on an associated *Price List Record*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetafieldBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetafieldResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "permission_set": "app_only",
                  "namespace": "Warehouse SKUS",
                  "key": "Location",
                  "value": "4H",
                  "description": "location in the warehouse",
                  "resource_type": "category",
                  "resource_id": 111,
                  "id": 6,
                  "created_at": "2018-05-07T20:14:17+00:00",
                  "updated_at": "2018-05-07T20:14:17+00:00"
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The Metafield was in conflict with another Metafield. This can be the result of duplicate unique-key combinations of the app's client id ,namespace, key, `resource_type`, and `resource_id`.",
            "schema": {}
          },
          "422": {
            "description": "The Metafield was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}/variants/{variant_id}/metafields/{metafield_id}": {
      "get": {
        "description": "Get a variant metafield by `product_id`, `variant_id` and `metafield_id`. Optional parameters can be passed in.",
        "summary": "Get Variant Metafields by Product Id and Variant Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsVariantsVariantIdMetafieldsMetafieldIdByStoreHashAndProductIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "variant_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Variant* on a *Product*, or on an associated *Price List Record*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "metafield_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Metafield*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/products/{product_id}/variants/{variant_id}/metafields/{metafield_id}?include_fields=permission_set, resource_type`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/products/{product_id}/variants/{variant_id}/metafields/{metafield_id}?exclude_fields=date_created`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetafieldResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "permission_set": "app_only",
                  "namespace": "Warehouse SKUS",
                  "key": "Location",
                  "value": "4H",
                  "description": "location in the warehouse",
                  "resource_type": "category",
                  "resource_id": 111,
                  "id": 6,
                  "created_at": "2018-05-07T20:14:17+00:00",
                  "updated_at": "2018-05-07T20:14:17+00:00"
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Updates a variant metafield by `product_id`, `variant_id` and `metafield_id``.",
        "summary": "Update Variant Metafield",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsVariantsVariantIdMetafieldsMetafieldIdByStoreHashAndProductIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "variant_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Variant* on a *Product*, or on an associated *Price List Record*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "metafield_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Metafield*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetafieldPut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetafieldResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "permission_set": "app_only",
                  "namespace": "Warehouse SKUS",
                  "key": "Location",
                  "value": "4H",
                  "description": "location in the warehouse",
                  "resource_type": "category",
                  "resource_id": 111,
                  "id": 6,
                  "created_at": "2018-05-07T20:14:17+00:00",
                  "updated_at": "2018-05-07T20:14:17+00:00"
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Deletes a variant metafield by `product_id`, `variant_id` and `metafield_id`.",
        "summary": "Delete Variant Metafield",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsVariantsVariantIdMetafieldsMetafieldIdByStoreHashAndProductIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "variant_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Variant* on a *Product*, or on an associated *Price List Record*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "metafield_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Metafield*."
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}/options": {
      "get": {
        "description": "Get all variant options on a product using the `product_id`. Optional parameters can be passed in.",
        "summary": "Get Variant Options",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsOptionsByStoreHashAndProductIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product* to which the resource belongs."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Specifies the page number in a limited (paginated) list of products. `/v3/catalog/products/{product_id}/options?page=1`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Controls the number of items per page in a limited (paginated) list of products. `/v3/catalog/products/{product_id}/options?limit=50`"
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/products/{product_id}/options?include_fields=name, option_values`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/products/{product_id}/options?exclude_fields=display_name`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/OptionCollectionResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": 77,
                    "product_id": 112,
                    "display_name": "Colors",
                    "type": "radio_buttons",
                    "config": {
                      "default_value": "text",
                      "checked_by_default": false,
                      "date_limit_mode": "earliest",
                      "file_types_mode": "specific",
                      "file_types_supported": [],
                      "file_types_other": [],
                      "text_min_length": 15,
                      "text_max_length": 50,
                      "text_lines_limited": true,
                      "text_max_lines": 2,
                      "number_limit_mode": "lowest",
                      "product_list_adjusts_inventory": true,
                      "product_list_adjusts_pricing": true,
                      "product_list_shipping_calc": "none"
                    },
                    "option_values": [
                      {
                        "id": 44,
                        "label": "Pick a color",
                        "sort_order": 9,
                        "value_data": {
                          "colors": [
                            "#123c91, #FFFF00, #397a44"
                          ]
                        },
                        "is_default": false
                      }
                    ]
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Create a variant option on a product using the `product_id`.",
        "summary": "Create Variant Option",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsOptionsByStoreHashAndProductIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product* to which the resource belongs."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/OptionBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/OptionResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": 77,
                  "product_id": 112,
                  "display_name": "Colors",
                  "type": "radio_buttons",
                  "config": {
                    "default_value": "text",
                    "checked_by_default": false,
                    "date_limit_mode": "earliest",
                    "file_types_mode": "specific",
                    "file_types_supported": [],
                    "file_types_other": [],
                    "text_min_length": 15,
                    "text_max_length": 50,
                    "text_lines_limited": true,
                    "text_max_lines": 2,
                    "number_limit_mode": "lowest",
                    "product_list_adjusts_inventory": true,
                    "product_list_adjusts_pricing": true,
                    "product_list_shipping_calc": "none"
                  },
                  "option_values": [
                    {
                      "id": 44,
                      "label": "Pick a color",
                      "sort_order": 9,
                      "value_data": {
                        "colors": [
                          "#123c91, #FFFF00, #397a44"
                        ]
                      },
                      "is_default": false
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "Option was in conflict with another option. This is the result of duplicate unique fields, such as `name`.",
            "schema": {}
          },
          "422": {
            "description": "Option was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}/options/{option_id}": {
      "get": {
        "description": "Get a variant option by `product_id` and `option_id`. Optional parameters can be passed in.",
        "summary": "Get Variant Option by Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsOptionsOptionIdByStoreHashAndProductIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product* to which the resource belongs."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "option_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Option*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/products/{product_id}/options/{option_id}?include_fields=name, option_values`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/products/{product_id}/options/{option_id}?exclude_fields=display_name`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/OptionResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": 77,
                  "product_id": 112,
                  "display_name": "Colors",
                  "type": "radio_buttons",
                  "config": {
                    "default_value": "text",
                    "checked_by_default": false,
                    "date_limit_mode": "earliest",
                    "file_types_mode": "specific",
                    "file_types_supported": [],
                    "file_types_other": [],
                    "text_min_length": 15,
                    "text_max_length": 50,
                    "text_lines_limited": true,
                    "text_max_lines": 2,
                    "number_limit_mode": "lowest",
                    "product_list_adjusts_inventory": true,
                    "product_list_adjusts_pricing": true,
                    "product_list_shipping_calc": "none"
                  },
                  "option_values": [
                    {
                      "id": 44,
                      "label": "Pick a color",
                      "sort_order": 9,
                      "value_data": {
                        "colors": [
                          "#123c91, #FFFF00, #397a44"
                        ]
                      },
                      "is_default": false
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Updates a product variant option, based on the `product_id` and `option_id`.",
        "summary": "Update Variant Option by Option Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsOptionsOptionIdByStoreHashAndProductIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product* to which the resource belongs."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "option_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Option*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/OptionBasePUT"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/OptionResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": 77,
                  "product_id": 112,
                  "display_name": "Colors",
                  "type": "radio_buttons",
                  "config": {
                    "default_value": "text",
                    "checked_by_default": false,
                    "date_limit_mode": "earliest",
                    "file_types_mode": "specific",
                    "file_types_supported": [],
                    "file_types_other": [],
                    "text_min_length": 15,
                    "text_max_length": 50,
                    "text_lines_limited": true,
                    "text_max_lines": 2,
                    "number_limit_mode": "lowest",
                    "product_list_adjusts_inventory": true,
                    "product_list_adjusts_pricing": true,
                    "product_list_shipping_calc": "none"
                  },
                  "option_values": [
                    {
                      "id": 44,
                      "label": "Pick a color",
                      "sort_order": 9,
                      "value_data": {
                        "colors": [
                          "#123c91, #FFFF00, #397a44"
                        ]
                      },
                      "is_default": false
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "The Option was in conflict with another option. This is the result of duplicate unique fields, such as `name`.",
            "schema": {}
          },
          "422": {
            "description": "The Option was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Deletes a product option using the `product_id` and `option_id`.",
        "summary": "Delete Variant Option by Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsOptionsOptionIdByStoreHashAndProductIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product* to which the resource belongs."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "option_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Option*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}/options/{option_id}/values": {
      "get": {
        "description": "Get all variant option values using the `product_id` and `option_id`. Optional parameters can be passed in.",
        "summary": "Get Variant Option Values",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsOptionsOptionIdValuesByStoreHashAndProductIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product* to which the resource belongs."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "option_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Option*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/products/{product_id}/options/{option_id}/values?include_fields=value_data`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/products/{product_id}/options/{option_id}/values?exclude_fields=sort_order`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/OptionValueCollectionResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": 44,
                    "label": "Pick a color",
                    "sort_order": 9,
                    "value_data": {
                      "colors": [
                        "#123c91, #FFFF00, #397a44"
                      ]
                    },
                    "is_default": false
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Creates a variant option value using the `product_id` and `option_id`.",
        "summary": "Create a Variant Option Value",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsOptionsOptionIdValuesByStoreHashAndProductIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product* to which the resource belongs."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "option_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Option*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/OptionValueBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/OptionValueResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": 44,
                  "label": "Pick a color",
                  "sort_order": 9,
                  "value_data": {
                    "colors": [
                      "#123c91, #FFFF00, #397a44"
                    ]
                  },
                  "is_default": false
                }
              }
            }
          },
          "422": {
            "description": "The OptionValue was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}/options/{option_id}/values/{value_id}": {
      "get": {
        "description": "Get a product variant option value by `product_id`, `option_id`, and `value_id`. Optional parameters can be passed in.",
        "summary": "Get Variant Option Value by Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsOptionsOptionIdValuesValueIdByStoreHashAndProductIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product* to which the resource belongs."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "option_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Option*."
          },
          {
            "name": "value_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Modifier/Option* value."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/products/{product_id}/options/{option_id}/values/{value_id}?include_fields=label`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/products/{product_id}/options/{option_id}/values/{value_id}?exclude_fields=sort_order`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/OptionValueResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": 44,
                  "label": "Pick a color",
                  "sort_order": 9,
                  "value_data": {
                    "colors": [
                      "#123c91, #FFFF00, #397a44"
                    ]
                  },
                  "is_default": false
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Updates a product variant option value using the`product_id`, `option_id`, and `value_id`.",
        "summary": "Update Variant Option Value",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsOptionsOptionIdValuesValueIdByStoreHashAndProductIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product* to which the resource belongs."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "option_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Option*."
          },
          {
            "name": "value_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Modifier/Option* value."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/OptionValuePut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/OptionValueResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": 44,
                  "label": "Pick a color",
                  "sort_order": 9,
                  "value_data": {
                    "colors": [
                      "#123c91, #FFFF00, #397a44"
                    ]
                  },
                  "is_default": false
                }
              }
            }
          },
          "422": {
            "description": "The *OptionValue* was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete a product variant option value using the `product_id`, `option_id`, and `value_id`.",
        "summary": "Delete Variant Option by Value Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsOptionsOptionIdValuesValueIdByStoreHashAndProductIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product* to which the resource belongs."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "option_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Option*."
          },
          {
            "name": "value_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Modifier/Option* value."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}/modifiers": {
      "get": {
        "description": "Get a product's modifier by `product_id`. Optional parameters can be passed in.",
        "summary": "Get All Product Modifier Options",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsModifiersByStoreHashAndProductIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Specifies the page number in a limited (paginated) list of products. `/v3/catalog/products/{product_id}/modifiers?page=1`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Controls the number of items per page in a limited (paginated) list of products. `/v3/catalog/products/{product_id}/modifiers?limit=50`"
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/products/{product_id}/modifiers?include_fields=name, config`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/products/{product_id}/modifiers?exclude_fields=display_name`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ModifierCollectionResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "type": "date",
                    "required": true,
                    "config": {
                      "default_value": "text",
                      "checked_by_default": false,
                      "date_limit_mode": "earliest",
                      "file_types_mode": "specific",
                      "file_types_supported": [],
                      "file_types_other": [],
                      "text_min_length": 15,
                      "text_max_length": 50,
                      "text_lines_limited": true,
                      "text_max_lines": 2,
                      "number_limit_mode": "lowest",
                      "product_list_adjusts_inventory": true,
                      "product_list_adjusts_pricing": true,
                      "product_list_shipping_calc": "none"
                    },
                    "option_values": [
                      {
                        "id": 22,
                        "is_default": false,
                        "label": "",
                        "sort_order": 0,
                        "value_data": {
                          "colors": [
                            "#123c91, #FFFF00, #397a44"
                          ]
                        },
                        "adjusters": {
                          "price": {
                            "adjuster": "relative",
                            "adjuster_value": 6
                          },
                          "weight": {
                            "adjuster": "relative",
                            "adjuster_value": 6
                          },
                          "purchasing_disabled": {
                            "status": true,
                            "message": "This product is not available for purchase."
                          }
                        }
                      }
                    ],
                    "id": 12,
                    "name": "Gift Wrapping",
                    "display_name": "Gift Wrapping"
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Creates a products modifier using the `product_id `.",
        "summary": "Create Modifier Option",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsModifiersByStoreHashAndProductIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ModifierPost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ModifierResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "type": "date",
                  "required": true,
                  "config": {
                    "default_value": "text",
                    "checked_by_default": false,
                    "date_limit_mode": "earliest",
                    "file_types_mode": "specific",
                    "file_types_supported": [],
                    "file_types_other": [],
                    "text_min_length": 15,
                    "text_max_length": 50,
                    "text_lines_limited": true,
                    "text_max_lines": 2,
                    "number_limit_mode": "lowest",
                    "product_list_adjusts_inventory": true,
                    "product_list_adjusts_pricing": true,
                    "product_list_shipping_calc": "none"
                  },
                  "option_values": [
                    {
                      "id": 22,
                      "is_default": false,
                      "label": "",
                      "sort_order": 0,
                      "value_data": {
                        "colors": [
                          "#123c91, #FFFF00, #397a44"
                        ]
                      },
                      "adjusters": {
                        "price": {
                          "adjuster": "relative",
                          "adjuster_value": 6
                        },
                        "weight": {
                          "adjuster": "relative",
                          "adjuster_value": 6
                        },
                        "purchasing_disabled": {
                          "status": true,
                          "message": "This product is not available for purchase."
                        }
                      }
                    }
                  ],
                  "id": 12,
                  "name": "Gift Wrapping",
                  "display_name": "Gift Wrapping"
                }
              }
            }
          },
          "409": {
            "description": "The Modifier was in conflict with another option. This is the result of duplicate unique fields, such as `name`.",
            "schema": {}
          },
          "422": {
            "description": "The Modifier was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}/modifiers/{modifier_id}": {
      "get": {
        "description": "Get a modifier by `product_id` and `modifier_id`. Optional parameters can be passed in.",
        "summary": "Get Modifer Option by Product Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsModifiersModifierIdByStoreHashAndProductIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "modifier_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Modifier*.\n+ include_fields (string, optional)\n   Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/products/{product_id}/modifiers/{modifier_id}?include_fields=name, config`\n+ exclude_fields (string, optional)\n   Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/products/{product_id}/modifiers/{modifier_id}?exclude_fields=display_name`"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ModifierResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "type": "date",
                  "required": true,
                  "config": {
                    "default_value": "text",
                    "checked_by_default": false,
                    "date_limit_mode": "earliest",
                    "file_types_mode": "specific",
                    "file_types_supported": [],
                    "file_types_other": [],
                    "text_min_length": 15,
                    "text_max_length": 50,
                    "text_lines_limited": true,
                    "text_max_lines": 2,
                    "number_limit_mode": "lowest",
                    "product_list_adjusts_inventory": true,
                    "product_list_adjusts_pricing": true,
                    "product_list_shipping_calc": "none"
                  },
                  "option_values": [
                    {
                      "id": 22,
                      "is_default": false,
                      "label": "",
                      "sort_order": 0,
                      "value_data": {
                        "colors": [
                          "#123c91, #FFFF00, #397a44"
                        ]
                      },
                      "adjusters": {
                        "price": {
                          "adjuster": "relative",
                          "adjuster_value": 6
                        },
                        "weight": {
                          "adjuster": "relative",
                          "adjuster_value": 6
                        },
                        "purchasing_disabled": {
                          "status": true,
                          "message": "This product is not available for purchase."
                        }
                      }
                    }
                  ],
                  "id": 12,
                  "name": "Gift Wrapping",
                  "display_name": "Gift Wrapping"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Updates a product's modifier using the `product_id` and `modifier_id`.",
        "summary": "Update Modifier Option",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsModifiersModifierIdByStoreHashAndProductIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "modifier_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Modifier*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ModifierBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ModifierResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "type": "date",
                  "required": true,
                  "config": {
                    "default_value": "text",
                    "checked_by_default": false,
                    "date_limit_mode": "earliest",
                    "file_types_mode": "specific",
                    "file_types_supported": [],
                    "file_types_other": [],
                    "text_min_length": 15,
                    "text_max_length": 50,
                    "text_lines_limited": true,
                    "text_max_lines": 2,
                    "number_limit_mode": "lowest",
                    "product_list_adjusts_inventory": true,
                    "product_list_adjusts_pricing": true,
                    "product_list_shipping_calc": "none"
                  },
                  "option_values": [
                    {
                      "id": 22,
                      "is_default": false,
                      "label": "",
                      "sort_order": 0,
                      "value_data": {
                        "colors": [
                          "#123c91, #FFFF00, #397a44"
                        ]
                      },
                      "adjusters": {
                        "price": {
                          "adjuster": "relative",
                          "adjuster_value": 6
                        },
                        "weight": {
                          "adjuster": "relative",
                          "adjuster_value": 6
                        },
                        "purchasing_disabled": {
                          "status": true,
                          "message": "This product is not available for purchase."
                        }
                      }
                    }
                  ],
                  "id": 12,
                  "name": "Gift Wrapping",
                  "display_name": "Gift Wrapping"
                }
              }
            }
          },
          "409": {
            "description": "The Modifier was in conflict with another modifier or option. This is the result of duplicate unique fields, such as `name`.",
            "schema": {}
          },
          "422": {
            "description": "The Modifier was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Deletes a product's modifier based on the `product_id` and `modifier_id`.",
        "summary": "Delete Modifier Option by Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsModifiersModifierIdByStoreHashAndProductIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "modifier_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Modifier*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}/modifiers/{modifier_id}/values": {
      "get": {
        "description": "Get a product's modifier values using the `product_id` and the `modifier_id`. Optional parameters can be passed in.",
        "summary": "Get Modifier Option Values",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsModifiersModifierIdValuesByStoreHashAndProductIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "modifier_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Modifier*.\n+ include_fields (string, optional)\n   Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/products/{product_id}/modifiers/{modifier_id}/values?include_fields=label, values_data`\n+ exclude_fields (string, optional)\n   Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/products/{product_id}/modifiers/{modifier_id}/values?exclude_fields=adjusters`"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ModifierValueCollectionResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": 22,
                    "is_default": false,
                    "label": "",
                    "sort_order": 0,
                    "value_data": {
                      "colors": [
                        "#123c91, #FFFF00, #397a44"
                      ]
                    },
                    "adjusters": {
                      "price": {
                        "adjuster": "relative",
                        "adjuster_value": 6
                      },
                      "weight": {
                        "adjuster": "relative",
                        "adjuster_value": 6
                      },
                      "purchasing_disabled": {
                        "status": true,
                        "message": "This product is not available for purchase."
                      }
                    }
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Creates a modifier value using the `product_id` and the `modifier_id`.",
        "summary": "Create Modifier Option Value",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsModifiersModifierIdValuesByStoreHashAndProductIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "modifier_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Modifier*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ModifierValueBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ModifierValueResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": 22,
                  "is_default": false,
                  "label": "",
                  "sort_order": 0,
                  "value_data": {
                    "colors": [
                      "#123c91, #FFFF00, #397a44"
                    ]
                  },
                  "adjusters": {
                    "price": {
                      "adjuster": "relative",
                      "adjuster_value": 6
                    },
                    "weight": {
                      "adjuster": "relative",
                      "adjuster_value": 6
                    },
                    "purchasing_disabled": {
                      "status": true,
                      "message": "This product is not available for purchase."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "The Modifier value was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}": {
      "get": {
        "description": "Get modifier value by `product_id`, `modifier_id`, and `value_id`. Optional parameters can be passed in.",
        "summary": "Get Modifier Option by Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsModifiersModifierIdValuesValueIdByStoreHashAndProductIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "modifier_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Modifier*."
          },
          {
            "name": "value_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Modifier/Option* value."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}?include_fields=option_id`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}?exclude_fields=label`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ModifierValueResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": 22,
                  "is_default": false,
                  "label": "",
                  "sort_order": 0,
                  "value_data": {
                    "colors": [
                      "#123c91, #FFFF00, #397a44"
                    ]
                  },
                  "adjusters": {
                    "price": {
                      "adjuster": "relative",
                      "adjuster_value": 6
                    },
                    "weight": {
                      "adjuster": "relative",
                      "adjuster_value": 6
                    },
                    "purchasing_disabled": {
                      "status": true,
                      "message": "This product is not available for purchase."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Updates a modifier value using the `product_id`, `modifier_id`, and `value_id`.",
        "summary": "Update Modifier Option Value",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsModifiersModifierIdValuesValueIdByStoreHashAndProductIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "modifier_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Modifier*."
          },
          {
            "name": "value_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Modifier/Option* value."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ModifierValuePut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ModifierValueResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": 22,
                  "is_default": false,
                  "label": "",
                  "sort_order": 0,
                  "value_data": {
                    "colors": [
                      "#123c91, #FFFF00, #397a44"
                    ]
                  },
                  "adjusters": {
                    "price": {
                      "adjuster": "relative",
                      "adjuster_value": 6
                    },
                    "weight": {
                      "adjuster": "relative",
                      "adjuster_value": 6
                    },
                    "purchasing_disabled": {
                      "status": true,
                      "message": "This product is not available for purchase."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "The Modifier Value was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Deletes a modifier value using the `product_id`, `modifier_id`, and `value_id`.",
        "summary": "Delete Modifier Option Value by Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsModifiersModifierIdValuesValueIdByStoreHashAndProductIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "modifier_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Modifier*."
          },
          {
            "name": "value_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Modifier/Option* value."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}/modifiers/{modifier_id}/values/{value_id}/image": {
      "post": {
        "description": "Adds an image to a modifier value using the `product_id`, `modifier_id` and `value_id`. The image will show on the storefront when the value is selected.",
        "summary": "Create Modifier Image",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsModifiersModifierIdValuesValueIdImageByStoreHashAndProductIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "modifier_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Modifier*."
          },
          {
            "name": "value_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Modifier/Option* value."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/VariantImageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ImageResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "image_url": "https://your_image_site/image.png"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          },
          "422": {
            "description": "Modifier image was not valid. This is the result of missing `image_file` fields, or of a non-URL value for the `image_file` field. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}/complex-rules": {
      "get": {
        "description": "Get all complex rules on a product using the `product_id`. Optional parameters can be passed in.",
        "summary": "Get All Complex Rules",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsComplexRulesByStoreHashAndProductIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/products/{product_id}/complex-rules?include_fields=price_adjuster, conditions`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/products/{product_id}/complex-rules?exclude_fields=stop`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ComplexRuleCollectionResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "product_id": 77,
                    "sort_order": 0,
                    "enabled": true,
                    "stop": false,
                    "purchasing_disabled": false,
                    "purchasing_hidden": false,
                    "price_adjuster": {
                      "adjuster": "relative",
                      "adjuster_value": 6
                    },
                    "weight_adjuster": {
                      "adjuster": "relative",
                      "adjuster_value": 6
                    },
                    "id": 5,
                    "conditions": [
                      {
                        "id": 5,
                        "rule_id": 5,
                        "modifier_id": 123,
                        "modifier_value_id": 104,
                        "combination_id": 0
                      }
                    ]
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Creates a complex rule on a product using the `product_id`.",
        "summary": "Create Complex Rule",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsComplexRulesByStoreHashAndProductIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ComplexRulePost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ComplexRuleResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "product_id": 77,
                  "sort_order": 0,
                  "enabled": true,
                  "stop": false,
                  "purchasing_disabled": false,
                  "purchasing_hidden": false,
                  "price_adjuster": {
                    "adjuster": "relative",
                    "adjuster_value": 6
                  },
                  "weight_adjuster": {
                    "adjuster": "relative",
                    "adjuster_value": 6
                  },
                  "id": 5,
                  "conditions": [
                    {
                      "id": 5,
                      "rule_id": 5,
                      "modifier_id": 123,
                      "modifier_value_id": 104,
                      "combination_id": 0
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "The ComplexRule was in conflict with another ComplexRule. This is the result of duplicate conditions.",
            "schema": {}
          },
          "422": {
            "description": "The ComplexRule was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}/complex-rules/{complex_rule_id}": {
      "get": {
        "description": "Get a complex rule using the `product_id` and `complex_rule_id`. Optional parameters can be passed in.",
        "summary": "Get Complex Rule by Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsComplexRulesComplexRuleIdByStoreHashAndProductIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "complex_rule_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Complex Rule*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/products/{product_id}/complex-rules/{complex_rule_id}?include_fields=price_adjuster, conditions`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/products/{product_id}/complex-rules/{complex_rule_id}?exclude_fields=stop`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ComplexRuleResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "product_id": 77,
                  "sort_order": 0,
                  "enabled": true,
                  "stop": false,
                  "purchasing_disabled": false,
                  "purchasing_hidden": false,
                  "price_adjuster": {
                    "adjuster": "relative",
                    "adjuster_value": 6
                  },
                  "weight_adjuster": {
                    "adjuster": "relative",
                    "adjuster_value": 6
                  },
                  "id": 5,
                  "conditions": [
                    {
                      "id": 5,
                      "rule_id": 5,
                      "modifier_id": 123,
                      "modifier_value_id": 104,
                      "combination_id": 0
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Updates a products complex rule using the `product_id` and `complex_rule_id`.",
        "summary": "Update Complex Rule",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsComplexRulesComplexRuleIdByStoreHashAndProductIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "complex_rule_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Complex Rule*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ComplexRulePut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ComplexRuleResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "product_id": 77,
                  "sort_order": 0,
                  "enabled": true,
                  "stop": false,
                  "purchasing_disabled": false,
                  "purchasing_hidden": false,
                  "price_adjuster": {
                    "adjuster": "relative",
                    "adjuster_value": 6
                  },
                  "weight_adjuster": {
                    "adjuster": "relative",
                    "adjuster_value": 6
                  },
                  "id": 5,
                  "conditions": [
                    {
                      "id": 5,
                      "rule_id": 5,
                      "modifier_id": 123,
                      "modifier_value_id": 104,
                      "combination_id": 0
                    }
                  ]
                }
              }
            }
          },
          "409": {
            "description": "The ComplexRule was in conflict with another ComplexRule. This is the result of duplicate conditions.",
            "schema": {}
          },
          "422": {
            "description": "The ComplexRule was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Deletes a products complex rule using the `product_id` and `complex_rule_id`.",
        "summary": "Delete Complex Rule by Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsComplexRulesComplexRuleIdByStoreHashAndProductIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "complex_rule_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Complex Rule*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}/custom-fields": {
      "get": {
        "description": "Get all custom fields on a product using the `product_id`. Optional parameters can be passed in.",
        "summary": "Get All Custom Fields",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsCustomFieldsByStoreHashAndProductIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Specifies the page number in a limited (paginated) list of products. `/v3/catalog/products/{product_id}/custom-fields?page=1`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Controls the number of items per page in a limited (paginated) list of products. `/v3/catalog/products/{product_id}/custom-fields?limit=50`"
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/products/{product_id}/custom-fields?include_fields=name`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/products/{product_id}/custom-fields?exclude_fields=value`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomFieldCollectionResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "name": "Release year",
                    "value": "1987",
                    "id": 1
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Create a custom field on a product using the `product_id`.",
        "summary": "Create Custom Field",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsCustomFieldsByStoreHashAndProductIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomFieldBasePOST"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomFieldResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "name": "Release year",
                  "value": "1987",
                  "id": 1
                }
              }
            }
          },
          "404": {
            "description": "The parent resource was not found.",
            "schema": {}
          },
          "422": {
            "description": "The CustomField was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}/custom-fields/{custom_field_id}": {
      "get": {
        "description": "Get a custom field  by `product_id` and `custom_field_id`. Optional parameters can be passed in.",
        "summary": "Get Custom Field by Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsCustomFieldsCustomFieldIdByStoreHashAndProductIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "custom_field_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Custom Field*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/products/{product_id}/custom-fields/{custom_field_id}?include_fields=name`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/products/{product_id}/custom-fields/{custom_field_id}?exclude_fields=value`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomFieldResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "name": "Release year",
                  "value": "1987",
                  "id": 1
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Updates a custom field using the the `product_id` and `custom_field_id`.",
        "summary": "Update Custom Field",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsCustomFieldsCustomFieldIdByStoreHashAndProductIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "custom_field_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Custom Field*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomField"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CustomFieldResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "name": "Release year",
                  "value": "1987",
                  "id": 1
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          },
          "422": {
            "description": "The CustomField was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Deletes a custom field using the `product_id` and `custom_field_id`.",
        "summary": "Delete Custom Field by Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsCustomFieldsCustomFieldIdByStoreHashAndProductIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "custom_field_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Custom Field*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}/bulk-pricing-rules": {
      "get": {
        "description": "Get a products bulk pricing rule using the `product_id`. Optional parameters can be passed in.",
        "summary": "Get Bulk Pricing Rules",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsBulkPricingRulesByStoreHashAndProductIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Specifies the page number in a limited (paginated) list of products. `/v3/catalog/products/{product_id}/bulk-pricing-rules?page=1`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Controls the number of items per page in a limited (paginated) list of products. `/v3/catalog/products/{product_id}/bulk-pricing-rules?limit=50`"
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/products/{product_id}/bulk-pricing-rules?include_fields=quantity_min,quantity_max`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/products/{product_id}/bulk-pricing-rules?exclude_fields=amount`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BulkPricingRuleCollectionResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "quantity_min": 10,
                    "quantity_max": 50,
                    "type": "price",
                    "amount": 10,
                    "id": 3
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The parent resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Creates a bulk pricing rule(s) using the `product_id`. Optional parameters can be passed in.",
        "summary": "Create Bulk Pricing Rule",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsBulkPricingRulesByStoreHashAndProductIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/BulkPricingRuleBasePOST"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Specifies the page number in a limited (paginated) list of products. `/v3/catalog/products/{product_id}/bulk-pricing-rules?page=1`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Controls the number of items per page in a limited (paginated) list of products. `/v3/catalog/products/{product_id}/bulk-pricing-rules?limit=50`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BulkPricingRuleResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "quantity_min": 10,
                  "quantity_max": 50,
                  "type": "price",
                  "amount": 10,
                  "id": 3
                }
              }
            }
          },
          "404": {
            "description": "The parent resource was not found.",
            "schema": {}
          },
          "409": {
            "description": "The BulkPricingRule was in conflict with another bulk pricing rule. This is the result of quantity range overlapping with existing bulk pricing rules.",
            "schema": {}
          },
          "422": {
            "description": "The BulkPricingRule was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}/bulk-pricing-rules/{bulk_pricing_rule_id}": {
      "get": {
        "description": "Get a bulk pricing rule using the  `product_id` and `bulk_pricing_rule_id`. Optional parameters can be passed in.",
        "summary": "Get Bulk Pricing Rules by Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsBulkPricingRulesBulkPricingRuleIdByStoreHashAndProductIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "bulk_pricing_rule_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the BulkPricingRule."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/products/{product_id}/bulk-pricing-rules/{bulk_pricing_rule_id}?include_fields=quantity_min,quantity_max`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/products/{product_id}/bulk-pricing-rules/{bulk_pricing_rule_id}?exclude_fields=amount`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BulkPricingRuleResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "quantity_min": 10,
                  "quantity_max": 50,
                  "type": "price",
                  "amount": 10,
                  "id": 3
                }
              }
            }
          },
          "404": {
            "description": "The resource or parent resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Updates a bulk pricing rule using the `product_id` and `bulk_pricing_rule_id`.",
        "summary": "Update Bulk Pricing Rule",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsBulkPricingRulesBulkPricingRuleIdByStoreHashAndProductIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "bulk_pricing_rule_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Bulk Pricing Rule*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/BulkPricingRule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BulkPricingRuleResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "quantity_min": 10,
                  "quantity_max": 50,
                  "type": "price",
                  "amount": 10,
                  "id": 3
                }
              }
            }
          },
          "404": {
            "description": "The resource or parent resource was not found.",
            "schema": {}
          },
          "409": {
            "description": "The BulkPricingRule was in conflict with another bulk pricing rule. This is the result of quantity range overlapping with existing bulk pricing rules.",
            "schema": {}
          },
          "422": {
            "description": "The BulkPricingRule was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Deletes a bulk pricing rule using the `product_id` and `bulk_pricing_rule_id`.",
        "summary": "Delete Bulk Pricing Rule by Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsBulkPricingRulesBulkPricingRuleIdByStoreHashAndProductIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "bulk_pricing_rule_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Bulk Pricing Rule*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "404": {
            "description": "The resource or parent resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}/metafields": {
      "get": {
        "description": "Get a product metafield using the `product_id`. Optional parameters can be passed in.",
        "summary": "Get Product Metafield Object by Product Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsMetafieldsByStoreHashAndProductIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the product to which the resource belongs."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Specifies the page number in a limited (paginated) list of products. `/v3/catalog/products/{product_id}/metafields?page=1`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Controls the number of items per page in a limited (paginated) list of products. `/v3/catalog/products/{product_id}/metafields?limit=50`"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter based on a metafield's key. `/v3/catalog/products/{product_id}/metafields?key=location`"
          },
          {
            "name": "namespace",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter based on a metafield's namespace. `/v3/catalog/products/{product_id}/metafields?namspace=3`"
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/products/{product_id}/metafields?include_fields=date_created, namespace`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/products/{product_id}/metafields?exclude_fields=key`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetaFieldCollectionResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "permission_set": "app_only",
                    "namespace": "Warehouse SKUS",
                    "key": "Location",
                    "value": "4H",
                    "description": "location in the warehouse",
                    "resource_type": "category",
                    "resource_id": 111,
                    "id": 6,
                    "created_at": "2018-05-07T20:14:17+00:00",
                    "updated_at": "2018-05-07T20:14:17+00:00"
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Creates a product metafield using the `product_id`.",
        "summary": "Create Product Metafield",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsMetafieldsByStoreHashAndProductIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the product to which the resource belongs."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetafieldBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetafieldResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "permission_set": "app_only",
                  "namespace": "Warehouse SKUS",
                  "key": "Location",
                  "value": "4H",
                  "description": "location in the warehouse",
                  "resource_type": "category",
                  "resource_id": 111,
                  "id": 6,
                  "created_at": "2018-05-07T20:14:17+00:00",
                  "updated_at": "2018-05-07T20:14:17+00:00"
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The Metafield was in conflict with another Metafield. This can be the result of duplicate unique key combinations of the app's client id, namespace, key, resource_type, and resource_id.",
            "schema": {}
          },
          "422": {
            "description": "The Metafield was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}/metafields/{metafield_id}": {
      "get": {
        "description": "Get a product metafield using the `product_id` and `metafield_id`. Optional parameters can be passed in.",
        "summary": "Get Product Metafield by Product Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsMetafieldsMetafieldIdByStoreHashAndProductIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the product to which the resource belongs."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "metafield_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Metafield*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/products/{product_id}/metafields/{metafield_id}?include_fields=date_created, namespace`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/products/{product_id}/metafields/{metafield_id}?exclude_fields=key`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetafieldResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "permission_set": "app_only",
                  "namespace": "Warehouse SKUS",
                  "key": "Location",
                  "value": "4H",
                  "description": "location in the warehouse",
                  "resource_type": "category",
                  "resource_id": 111,
                  "id": 6,
                  "created_at": "2018-05-07T20:14:17+00:00",
                  "updated_at": "2018-05-07T20:14:17+00:00"
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Updates a products metafield using the `product_id` and the `metafield_id`.",
        "summary": "Update Product Metafield",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsMetafieldsMetafieldIdByStoreHashAndProductIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the product to which the resource belongs."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "metafield_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Metafield*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetafieldPut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetafieldResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "permission_set": "app_only",
                  "namespace": "Warehouse SKUS",
                  "key": "Location",
                  "value": "4H",
                  "description": "location in the warehouse",
                  "resource_type": "category",
                  "resource_id": 111,
                  "id": 6,
                  "created_at": "2018-05-07T20:14:17+00:00",
                  "updated_at": "2018-05-07T20:14:17+00:00"
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete a products metafield using the `product_id` and the `metafield_id`.",
        "summary": "Delete Product Metafield",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsMetafieldsMetafieldIdByStoreHashAndProductIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the product to which the resource belongs."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "metafield_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Metafield*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}/reviews": {
      "get": {
        "description": "Get all reviews on a product using the `product_id`. Optional parameters can be passed in.",
        "summary": "Get Product Reviews",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsReviewsByStoreHashAndProductIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Specifies the page number in a limited (paginated) list of products. `/v3/catalog/products/{product_id}/reviews?page=1`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Controls the number of items per page in a limited (paginated) list of products. `/v3/catalog/products/{product_id}/reviews?limit=50`"
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/products/{product_id}/reviews?include_fields=rating`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/products/{product_id}/reviews?exclude_fields=name`"
          }
        ],
        "responses": {
          "204": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductReviewCollectionResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "title": "Great Product",
                  "text": "This product is amazing!!!",
                  "status": "approved",
                  "rating": 5,
                  "email": "some@email.com",
                  "name": "Jane Doe",
                  "date_reviewed": "2018-05-07T19:37:13+00:00",
                  "id": 5,
                  "date_created": "2018-05-07T19:37:13+00:00\"",
                  "date_modified": "2018-05-07T19:38:36+00:00"
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The product ID does not exist.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Creates a product review using the `product_id`.",
        "summary": "Create Product Review",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsReviewsByStoreHashAndProductIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductReviewBasePOST"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductReviewResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "title": "Great Product",
                  "text": "This product is amazing!!!",
                  "status": "approved",
                  "rating": 5,
                  "email": "some@email.com",
                  "name": "Jane Doe",
                  "date_reviewed": "2018-05-07T19:37:13+00:00",
                  "id": 5,
                  "date_created": "2018-05-07T19:37:13+00:00\"",
                  "date_modified": "2018-05-07T19:38:36+00:00"
                },
                "meta": {}
              }
            }
          },
          "404": {
            "description": "The product ID does not exist.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/products/{product_id}/reviews/{review_id}": {
      "get": {
        "description": "Get a product review using the `product_id` and the `review_id`. Optional parameters maybe passed in.",
        "summary": "Get Product Review by Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsReviewsReviewIdByStoreHashAndProductIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "review_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product Review*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/products/{product_id}/reviews/{review_id}?include_fields=rating`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/products/{product_id}/reviews/{review_id}?exclude_fields=name`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductReviewResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "title": "Great Product",
                  "text": "This product is amazing!!!",
                  "status": "approved",
                  "rating": 5,
                  "email": "some@email.com",
                  "name": "Jane Doe",
                  "date_reviewed": "2018-05-07T19:37:13+00:00",
                  "id": 5,
                  "date_created": "2018-05-07T19:37:13+00:00\"",
                  "date_modified": "2018-05-07T19:38:36+00:00"
                },
                "meta": {}
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Update a product review using the `product_id` and the `review_id`.",
        "summary": "Update Product Review",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsReviewsReviewIdByStoreHashAndProductIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "review_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product Review*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductReviewBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProductReviewResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "title": "Great Product",
                  "text": "This product is amazing!!!",
                  "status": "approved",
                  "rating": 5,
                  "email": "some@email.com",
                  "name": "Jane Doe",
                  "date_reviewed": "2018-05-07T19:37:13+00:00",
                  "id": 5,
                  "date_created": "2018-05-07T19:37:13+00:00\"",
                  "date_modified": "2018-05-07T19:38:36+00:00"
                },
                "meta": {}
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Deletes a product review using the `product_id` and the `review_id`.",
        "summary": "Delete Product Review",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogProductsReviewsReviewIdByStoreHashAndProductIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product*."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "review_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Product Review*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/categories": {
      "get": {
        "description": "Get all categories from your BigCommerce catalog. Optional parameters maybe passed in.",
        "summary": "Get Categories",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogCategoriesByStoreHashGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by name. `/v3/catalog/categories/name=Towel`"
          },
          {
            "name": "parent_id",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by `parent_id`. If the category is a child or sub category it can be filtered with the `parent_id`. `/v3/catalog/categories?parent_id=7`"
          },
          {
            "name": "page_title",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by `page_title`. `/v3/catalog/categories?page_title=New`"
          },
          {
            "name": "keyword",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by keywords. `/v3/catalog/categories?keywords=new,towel,bath`"
          },
          {
            "name": "is_visible",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by is_visible. This filter uses numbers instead. 0 = false and 1 = true `/v3/catalog/categories?is_visible=1`"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Specifies the page number in a limited (paginated) list of products. `/v3/catalog/categories/reviews?page=1`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Controls the number of items per page in a limited (paginated) list of products. `/v3/catalog/categories?limit=50`"
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/categories?include_fields=is_visible,name`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/categories?include_fields=default_product_sort,sort_order`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CategoryCollectionResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "parent_id": 25,
                    "name": "Bath",
                    "description": "<p>We offer a wide variety of products perfect for relaxing</p>",
                    "views": 1050,
                    "sort_order": 3,
                    "meta_keywords": [],
                    "layout_file": "category.html",
                    "is_visible": true,
                    "default_product_sort": "use_store_settings",
                    "image_url": "https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png",
                    "custom_url": {
                      "url": "/bath/",
                      "is_customized": false
                    },
                    "id": 18
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Create a category(s).",
        "summary": "Create Category",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogCategoriesByStoreHashPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/CategoryBasePOST"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CategoryResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "parent_id": 25,
                  "name": "Bath",
                  "description": "<p>We offer a wide variety of products perfect for relaxing</p>",
                  "views": 1050,
                  "sort_order": 3,
                  "meta_keywords": [],
                  "layout_file": "category.html",
                  "is_visible": true,
                  "default_product_sort": "use_store_settings",
                  "image_url": "https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png",
                  "custom_url": {
                    "url": "/bath/",
                    "is_customized": false
                  },
                  "id": 18
                }
              }
            }
          },
          "409": {
            "description": "The Category was in conflict with another category. This is the result of duplicate unique values, such as `name` or `custom_url`.",
            "schema": {}
          },
          "422": {
            "description": "The Category was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Deleting the category will also delete all products in that category. If you want to keep the products, best practice is to move the products to a new category before\ndeleting. At least one filter parameter should be passed in so that you're deleting a set of categories discriminately.",
        "summary": "Delete Category",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogCategoriesByStoreHashDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by name. `/v3/catalog/categories/name=Towel`"
          },
          {
            "name": "parent_id",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by `parent_id`. If the category is a child or sub category it can be filtered with the `parent_id`. `/v3/catalog/categories?parent_id=7`"
          },
          {
            "name": "page_title",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by `page_title`. `/v3/catalog/categories?page_title=New`"
          },
          {
            "name": "keyword",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by keywords. `/v3/catalog/categories?keywords=new,towel,bath`"
          },
          {
            "name": "is_visible",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by is_visible. This filter uses numbers instead. 0 = false and 1 = true. `/v3/catalog/categories?is_visible=0`"
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/categories/{category_id}": {
      "get": {
        "description": "Get a category using the `category_id`. Optional parameters can be passed in.",
        "summary": "Get Category by Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogCategoriesByStoreHashAndCategoryIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "category_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Category*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/categories/{category_id}?include_fields=is_visible,name`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/categories/{category_id}?include_fields=default_product_sort,meta_description`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CategoryResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "parent_id": 25,
                  "name": "Bath",
                  "description": "<p>We offer a wide variety of products perfect for relaxing</p>",
                  "views": 1050,
                  "sort_order": 3,
                  "meta_keywords": [],
                  "layout_file": "category.html",
                  "is_visible": true,
                  "default_product_sort": "use_store_settings",
                  "image_url": "https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png",
                  "custom_url": {
                    "url": "/bath/",
                    "is_customized": false
                  },
                  "id": 18
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Updates a category using the `category_id`.",
        "summary": "Update Category",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogCategoriesByStoreHashAndCategoryIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "category_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Category*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/CategoryBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CategoryResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "parent_id": 25,
                  "name": "Bath",
                  "description": "<p>We offer a wide variety of products perfect for relaxing</p>",
                  "views": 1050,
                  "sort_order": 3,
                  "meta_keywords": [],
                  "layout_file": "category.html",
                  "is_visible": true,
                  "default_product_sort": "use_store_settings",
                  "image_url": "https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png",
                  "custom_url": {
                    "url": "/bath/",
                    "is_customized": false
                  },
                  "id": 18
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          },
          "409": {
            "description": "The Category was in conflict with another category. This is the result of duplicate unique values, such as `name` or `custom_url`.",
            "schema": {}
          },
          "422": {
            "description": "The Category was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Deletes a category using the `category_id`.",
        "summary": "Delete Category by Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogCategoriesByStoreHashAndCategoryIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "category_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/categories/{category_id}/metafields": {
      "get": {
        "description": "Get a category metafield using the `category_id`. Optional parameters can be passed in.",
        "summary": "Get Category Metafield by Category Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogCategoriesMetafieldsByStoreHashAndCategoryIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "category_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Category*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Specifies the page number in a limited (paginated) list of products. `/v3/catalog/categories/{category_id}/metafields?page=1`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Controls the number of items per page in a limited (paginated) list of products. `/v3/catalog/categories/{category_id}/metafields?limit=50`"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter based on a metafield's key. `/v3/catalog/categories/{category_id}/metafields?key=location`"
          },
          {
            "name": "namespace",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter based on a metafield's namespace. `/v3/catalog/categories/{category_id}/metafields?namspace=3`"
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/categories/{category_id}/metafields?include_fields=date_created, namespace`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/categories/{category_id}/metafields?exclude_fields=key`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetaFieldCollectionResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "permission_set": "app_only",
                    "namespace": "Warehouse SKUS",
                    "key": "Location",
                    "value": "4H",
                    "description": "location in the warehouse",
                    "resource_type": "category",
                    "resource_id": 111,
                    "id": 6,
                    "created_at": "2018-05-07T20:14:17+00:00",
                    "updated_at": "2018-05-07T20:14:17+00:00"
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Creates a category metafield using the `category_id`.",
        "summary": "Create Category Metafield",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogCategoriesMetafieldsByStoreHashAndCategoryIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "category_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Category*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetafieldBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetafieldResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "permission_set": "app_only",
                  "namespace": "Warehouse SKUS",
                  "key": "Location",
                  "value": "4H",
                  "description": "location in the warehouse",
                  "resource_type": "category",
                  "resource_id": 111,
                  "id": 6,
                  "created_at": "2018-05-07T20:14:17+00:00",
                  "updated_at": "2018-05-07T20:14:17+00:00"
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The Metafield was in conflict with another Metafield. This can be the result of duplicate, unique key combinations of the app's client id, namespace, key, resource_type, and resource_id.",
            "schema": {}
          },
          "422": {
            "description": "The Metafield was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/categories/{category_id}/metafields/{metafield_id}": {
      "get": {
        "description": "Get a category metafield by `category_id` and `metafield_id`. Optional parameters can be passed in.",
        "summary": "Get Category Metafield by Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogCategoriesMetafieldsMetafieldIdByStoreHashAndCategoryIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "metafield_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Metafield*."
          },
          {
            "name": "category_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Category*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/categories/{category_id}/metafields/{metafield_id}?include_fields=date_created, namespace`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/categories/{category_id}/metafields/{metafield_id}?exclude_fields=key`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetafieldResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "permission_set": "app_only",
                  "namespace": "Warehouse SKUS",
                  "key": "Location",
                  "value": "4H",
                  "description": "location in the warehouse",
                  "resource_type": "category",
                  "resource_id": 111,
                  "id": 6,
                  "created_at": "2018-05-07T20:14:17+00:00",
                  "updated_at": "2018-05-07T20:14:17+00:00"
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Update a category metafield using the `category_id` and the `metafield_id`.",
        "summary": "Update Category Metafield",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogCategoriesMetafieldsMetafieldIdByStoreHashAndCategoryIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "metafield_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Metafield*."
          },
          {
            "name": "category_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Category*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetafieldPut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetafieldResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "permission_set": "app_only",
                  "namespace": "Warehouse SKUS",
                  "key": "Location",
                  "value": "4H",
                  "description": "location in the warehouse",
                  "resource_type": "category",
                  "resource_id": 111,
                  "id": 6,
                  "created_at": "2018-05-07T20:14:17+00:00",
                  "updated_at": "2018-05-07T20:14:17+00:00"
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Deletes a cateogory metafield using the `category_id` and the `metafield_id`.",
        "summary": "Delete Category Metafield by Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogCategoriesMetafieldsMetafieldIdByStoreHashAndCategoryIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "metafield_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Metafield*."
          },
          {
            "name": "category_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Category*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/categories/{category_id}/image": {
      "post": {
        "description": "Creates an image on a category using the `category_id.` Publicly accessible URLs and files (form post) are valid parameters.",
        "summary": "Create Category Image",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogCategoriesImageByStoreHashAndCategoryIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/Request"
            }
          },
          {
            "name": "category_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ImageResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "image_url": "https://your_image_site/image.png"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          },
          "422": {
            "description": "Image was not valid. This is the result of a missing `image_file` field or an incorrect file type. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Deletes a category image using the `category_id`.",
        "summary": "Delete Category Image",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogCategoriesImageByStoreHashAndCategoryIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "category_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Category*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/categories/tree": {
      "get": {
        "description": "Returns the categories tree, a nested lineage of the categories with parent->child relationship. \nThe Category objects returned are simplified versions of the category objects returned in the rest of this API.",
        "summary": "Get Category Tree",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogCategoriesTreeByStoreHashGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CategoryTreeCollectionResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": 26,
                    "parent_id": 25,
                    "name": "Bath",
                    "is_visible": true,
                    "url": "/towels/bath-towels/"
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/brands": {
      "get": {
        "description": "Get all store brands. Optional parameters can be passed in.",
        "summary": "Get All Brands",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogBrandsByStoreHashGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by name. `/v3/catalog/brands?name=BigCommerce`"
          },
          {
            "name": "page_title",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by `page_title`. `/v3/catalog/brands?page_title=BigCommerce`"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Specifies the page number in a limited (paginated) list of products. `/v3/catalog/brands?page=1`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Controls the number of items per page in a limited (paginated) list of products. `/v3/catalog/brands?limit=50`"
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/brands?include_fields=page_title,search_keywords`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/brands?exclude_fields=meta_description`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BrandCollectionResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "name": "Common Good",
                    "meta_keywords": [
                      "modern, clean, contemporary"
                    ],
                    "meta_description": "Common Good is a modern brand.",
                    "search_keywords": "kitchen, laundry, cart, storage",
                    "custom_url": {
                      "url": "/brands/Common-Good.html",
                      "is_customized": false
                    },
                    "id": 37
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Create a brand in the store.",
        "summary": "Create a Brand",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogBrandsByStoreHashPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/BrandBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BrandResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "name": "Common Good",
                  "meta_keywords": [
                    "modern, clean, contemporary"
                  ],
                  "meta_description": "Common Good is a modern brand.",
                  "search_keywords": "kitchen, laundry, cart, storage",
                  "custom_url": {
                    "url": "/brands/Common-Good.html",
                    "is_customized": false
                  },
                  "id": 37
                }
              }
            }
          },
          "409": {
            "description": "Brand was in conflict with another brand. This is the result of duplicate unique fields such as name.",
            "schema": {}
          },
          "422": {
            "description": "Brand was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete a brand(s) from the store. At least one filter parameter should be passed in so that you're deleting a set of brands discriminately.",
        "summary": "Delete Brands",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogBrandsByStoreHashDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by name. `/v3/catalog/brands?name=BigCommerce`"
          },
          {
            "name": "page_title",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by `page_title`. `/v3/catalog/brands?page_title=BigCommerce`"
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/brands/{brand_id}": {
      "get": {
        "description": "Get a brand using the `brand_id`. Optional parameters can be passed in.",
        "summary": "Get Brand by Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogBrandsByStoreHashAndBrandIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "brand_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Brand*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/brands/{brand_id}?include_fields=page_title,search_keywords`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/brands/{brand_id}?exclude_fields=meta_description`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BrandResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "name": "Common Good",
                  "meta_keywords": [
                    "modern, clean, contemporary"
                  ],
                  "meta_description": "Common Good is a modern brand.",
                  "search_keywords": "kitchen, laundry, cart, storage",
                  "custom_url": {
                    "url": "/brands/Common-Good.html",
                    "is_customized": false
                  },
                  "id": 37
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Updates a brand using the `brand_id`.",
        "summary": "Update a Brand",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogBrandsByStoreHashAndBrandIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "brand_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Brand*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/BrandPut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/BrandResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "name": "Common Good",
                  "meta_keywords": [
                    "modern, clean, contemporary"
                  ],
                  "meta_description": "Common Good is a modern brand.",
                  "search_keywords": "kitchen, laundry, cart, storage",
                  "custom_url": {
                    "url": "/brands/Common-Good.html",
                    "is_customized": false
                  },
                  "id": 37
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          },
          "409": {
            "description": "The Brand was in conflict with another product. This is the result of duplicate unique values, such as `name`.",
            "schema": {}
          },
          "422": {
            "description": "The Brand was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3catalog/brands/{brand_id}": {
      "delete": {
        "description": "Deletes a brand using the `brand_id`.",
        "summary": "Delete Brand by Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3catalogBrandsByStoreHashAndBrandIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "brand_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Brand*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/brands/{brand_id}/metafields": {
      "get": {
        "description": "Get all the brand metafields using the`brand_id`. Optional parameters can be passed in.",
        "summary": "Get Brand Metafield by Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogBrandsMetafieldsByStoreHashAndBrandIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "brand_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Brand*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Specifies the page number in a limited (paginated) list of products. `/v3/catalog/brands/{brand_id}/metafields?page=1`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Controls the number of items per page in a limited (paginated) list of products. `/v3/catalog/brands/{brand_id}/metafields?limit=50`"
          },
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter based on a metafield's key. `/v3/catalog/brands/{brand_id}/metafields?key=location`"
          },
          {
            "name": "namespace",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter based on a metafield's namespace. `/v3/catalog/brands/{brand_id}/metafields?namspace=3`"
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/brands/{brand_id}/metafields?include_fields=date_created, namespace`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/brands/{brand_id}/metafields?exclude_fields=key`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetaFieldCollectionResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "permission_set": "app_only",
                    "namespace": "Warehouse SKUS",
                    "key": "Location",
                    "value": "4H",
                    "description": "location in the warehouse",
                    "resource_type": "category",
                    "resource_id": 111,
                    "id": 6,
                    "created_at": "2018-05-07T20:14:17+00:00",
                    "updated_at": "2018-05-07T20:14:17+00:00"
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Creates a brand metafield using the `brand_id`.",
        "summary": "Create Brand Metafield",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogBrandsMetafieldsByStoreHashAndBrandIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "brand_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Brand*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetafieldBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetafieldResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "permission_set": "app_only",
                  "namespace": "Warehouse SKUS",
                  "key": "Location",
                  "value": "4H",
                  "description": "location in the warehouse",
                  "resource_type": "category",
                  "resource_id": 111,
                  "id": 6,
                  "created_at": "2018-05-07T20:14:17+00:00",
                  "updated_at": "2018-05-07T20:14:17+00:00"
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The Metafield was in conflict with another Metafield. This can be the result of duplicate unique key combination of the app's client id, `namespace`, `key`, `resource_type`, and `resource_id`.",
            "schema": {}
          },
          "422": {
            "description": "The Metafield was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/brands/{brand_id}/metafields/{metafield_id}": {
      "get": {
        "description": "Get a brand metafield by `brand_id` and `category_id`. Optional parameters can be passed in.",
        "summary": "Get Brand Metafield by Category Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogBrandsMetafieldsMetafieldIdByStoreHashAndBrandIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "metafield_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Metafield*."
          },
          {
            "name": "brand_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Brand*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/brands/{brand_id}/metafields/{metafield_id}?include_fields=date_created, namespace`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/brands/{brand_id}/metafields/{metafield_id}?exclude_fields=key`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetafieldResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "permission_set": "app_only",
                  "namespace": "Warehouse SKUS",
                  "key": "Location",
                  "value": "4H",
                  "description": "location in the warehouse",
                  "resource_type": "category",
                  "resource_id": 111,
                  "id": 6,
                  "created_at": "2018-05-07T20:14:17+00:00",
                  "updated_at": "2018-05-07T20:14:17+00:00"
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Updates a brand metafield by `brand_id` and `metafield_id`.",
        "summary": "Update Brand Metafield",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogBrandsMetafieldsMetafieldIdByStoreHashAndBrandIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "metafield_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Metafield*."
          },
          {
            "name": "brand_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Brand*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetafieldPut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MetafieldResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "permission_set": "app_only",
                  "namespace": "Warehouse SKUS",
                  "key": "Location",
                  "value": "4H",
                  "description": "location in the warehouse",
                  "resource_type": "category",
                  "resource_id": 111,
                  "id": 6,
                  "created_at": "2018-05-07T20:14:17+00:00",
                  "updated_at": "2018-05-07T20:14:17+00:00"
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete a brand metafield by `brand_id` and `metafield_id`.",
        "summary": "Delete Brand Metafield by Id",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogBrandsMetafieldsMetafieldIdByStoreHashAndBrandIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "metafield_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Metafield*."
          },
          {
            "name": "brand_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Brand*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/brands/{brand_id}/image": {
      "post": {
        "description": "Creates an image on a brand using the `brand_id`. Publicly accessible URLs and files (form post) are valid parameters.",
        "summary": "Create Brand Image",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogBrandsImageByStoreHashAndBrandIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "brand_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Brand*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/VariantImageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ImageResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "image_url": "https://your_image_site/image.png"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          },
          "422": {
            "description": "Image was not valid. This is the result of a missing `image_file` field, or of an incorrect file type. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Deletes a brand image using the `brand_id`.",
        "summary": "Delete Brand Image",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogBrandsImageByStoreHashAndBrandIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "brand_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Brand*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/variants": {
      "get": {
        "description": "Get all variants from your catalog. Optional parameters can be passed in.",
        "summary": "Get All Variants",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogVariantsByStoreHashGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by *Variant* id. `/v3/catalog/variants?id=129`"
          },
          {
            "name": "sku",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by sku. `/v3/catalog/variants?sku=M-BLUE`"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Specifies the page number in a limited (paginated) list of products. `/v3/catalog/variants?page=1`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Controls the number of items per page in a limited (paginated) list of products. `/v3/catalog/variants?limit=50`"
          },
          {
            "name": "include_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to include, in a comma-separated list. The ID and the specified fields will be returned. `/v3/catalog/variants?include_fields=product_id,price`"
          },
          {
            "name": "exclude_fields",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Fields to exclude, in a comma-separated list. The specified fields will be excluded from a response. The ID cannot be excluded. `/v3/catalog/variants?exclude_fields=cost_price,`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/VariantCollectionResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "cost_price": 12,
                    "price": 14,
                    "weight": 22,
                    "width": 40,
                    "height": 100,
                    "depth": 4,
                    "is_free_shipping": false,
                    "purchasing_disabled": false,
                    "inventory_level": 50,
                    "inventory_warning_level": 10,
                    "id": 156,
                    "product_id": 77,
                    "sku": "M-ORAN-1",
                    "sku_id": 197,
                    "option_values": [
                      {
                        "option_display_name": "Color",
                        "label": "Color",
                        "id": 107,
                        "option_id": 124
                      }
                    ],
                    "calculated_price": 49.99
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/catalog/summary": {
      "get": {
        "description": "Returns a lightweight inventory summary from the BigCommerce Catalog.",
        "summary": "Catalog Summary",
        "tags": [
          "Catalog"
        ],
        "operationId": "V3CatalogSummaryByStoreHashGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CatalogSummaryResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "inventory_count": 2000,
                  "inventory_value": 0,
                  "primary_category_id": 23,
                  "primary_category_name": "Shop All",
                  "variant_count": 28,
                  "highest_variant_price": 225,
                  "average_variant_price": 53.525693,
                  "lowest_variant_price": 13,
                  "oldest_variant_date": "2018-01-05",
                  "newest_variant_date": "2018-05-07"
                }
              }
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/customers/subscribers": {
      "get": {
        "description": "Get all subscribers from your store. Optional parameters may be passed in.",
        "summary": "Get All Subscribers",
        "tags": [
          "Subscribers"
        ],
        "operationId": "V3CustomersSubscribersByStoreHashGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by email. `/v3/customers/subscribers?email=janedoes@bigcommerce.com`"
          },
          {
            "name": "first_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by first_name. `/v3/customers/subscribers?first_name=jane`"
          },
          {
            "name": "last_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by last_name. `/v3/customers/subscribers?last_name=doe`"
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by source. `/v3/customers/subscribers?source=storefront`"
          },
          {
            "name": "order_id",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by order_id. `/v3/customers/subscribers?order_id=152`"
          },
          {
            "name": "date_created",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by date_created. The min or max filter needs to be added. `/v3/customers/subscribers?date_modified:min=2018-06-15`"
          },
          {
            "name": "date_modified",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by date_modified. The min or max filter needs to be added. `/v3/customers/subscribers?date_modified:min=2018-06-15`"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Specifies the page number in a limited (paginated) list of products. `/v3/customers/subscribers?page=2`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Controls the number of items per page in a limited (paginated) list of products. `/v3/customers/subscribers?limit=50`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SubscriberCollectionResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": 1,
                    "email": "testing@bigcommerce.com",
                    "first_name": "Jane",
                    "last_name": "Doe",
                    "source": "storefront",
                    "date_modified": "2018-05-07T17:46:40+00:00",
                    "date_created": "2018-05-07T17:46:40+00:00"
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Create a subscriber.",
        "summary": "Create Subscriber",
        "tags": [
          "Subscribers"
        ],
        "operationId": "V3CustomersSubscribersByStoreHashPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/SubscriberBasePOST"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SubscriberResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": 1,
                  "email": "testing@bigcommerce.com",
                  "first_name": "Jane",
                  "last_name": "Doe",
                  "source": "storefront",
                  "date_modified": "2018-05-07T17:46:40+00:00",
                  "date_created": "2018-05-07T17:46:40+00:00"
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The Subscriber was in conflict with another subscriber. This is the result of duplicate unique values, such as email.",
            "schema": {}
          },
          "422": {
            "description": "The Subscriber was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete a subscriber(s). Optional parameters maybe passed in.",
        "summary": "Delete Subscribers",
        "tags": [
          "Subscribers"
        ],
        "operationId": "V3CustomersSubscribersByStoreHashDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by email. `/v3/customers/subscribers?email=janedoes@bigcommerce.com`"
          },
          {
            "name": "first_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by first_name. `/v3/customers/subscribers?first_name=jane`"
          },
          {
            "name": "last_name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by last_name. `/v3/customers/subscribers?last_name=doe`"
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by source. `/v3/customers/subscribers?source=storefront`"
          },
          {
            "name": "order_id",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by order_id. `/v3/customers/subscribers?order_id=152`"
          },
          {
            "name": "date_created",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by date_created. The min or max filter needs to be added. `/v3/customers/subscribers?date_modified:min=2018-06-15`"
          },
          {
            "name": "date_modified",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by date_modified. The min or max filter needs to be added. `/v3/customers/subscribers?date_modified:min=2018-06-15`"
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/customers/subscribers/{subscriber_id}": {
      "get": {
        "description": "Get a subscriber using the `subscriber_id`.",
        "summary": "Get Subscriber by Id",
        "tags": [
          "Subscribers"
        ],
        "operationId": "V3CustomersSubscribersByStoreHashAndSubscriberIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "subscriber_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Subscriber*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SubscriberResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": 1,
                  "email": "testing@bigcommerce.com",
                  "first_name": "Jane",
                  "last_name": "Doe",
                  "source": "storefront",
                  "date_modified": "2018-05-07T17:46:40+00:00",
                  "date_created": "2018-05-07T17:46:40+00:00"
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Updates a subscriber using the `subscriber_id`.",
        "summary": "Update Subscriber",
        "tags": [
          "Subscribers"
        ],
        "operationId": "V3CustomersSubscribersByStoreHashAndSubscriberIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "subscriber_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Subscriber*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/SubscriberBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SubscriberResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": 1,
                  "email": "testing@bigcommerce.com",
                  "first_name": "Jane",
                  "last_name": "Doe",
                  "source": "storefront",
                  "date_modified": "2018-05-07T17:46:40+00:00",
                  "date_created": "2018-05-07T17:46:40+00:00"
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          },
          "409": {
            "description": "The Subscriber was in conflict with another subscriber. This is the result of duplicate unique values, such as `email`.",
            "schema": {}
          },
          "422": {
            "description": "The Subscriber was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete a subscriber using the `subscriber_id`. Fitler parameters are recommened to only target certain subscribers.",
        "summary": "Delete Subscriber by Id",
        "tags": [
          "Subscribers"
        ],
        "operationId": "V3CustomersSubscribersByStoreHashAndSubscriberIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "subscriber_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Subscriber*."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/orders/{order_id}/transactions": {
      "get": {
        "description": "Get transaction related to an order using the `order_id`.",
        "summary": "Get Transactions",
        "tags": [
          "Orders"
        ],
        "operationId": "V3OrdersTransactionsByStoreHashAndOrderIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the Order to which the transactions belong."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TransactionCollectionResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "event": "purchase",
                    "method": "credit_card",
                    "amount": 1,
                    "currency": "USD",
                    "gateway": "2checkout",
                    "date_created": "2018-05-08T15:06:12+00:00",
                    "test": false,
                    "status": "ok",
                    "fraud_review": false,
                    "offline": {
                      "display_name": "Cash on Delivery"
                    },
                    "custom": {
                      "payment_method": "Cash"
                    },
                    "avs_result": {},
                    "cvv_result": {},
                    "credit_card": {},
                    "gift_certificate": {
                      "code": "123456",
                      "original_balance": 150,
                      "starting_balance": 150,
                      "remaining_balance": 25,
                      "status": "active"
                    },
                    "store_credit": {
                      "remaining_balance": "15"
                    }
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/themes": {
      "get": {
        "description": "Get all store themes.",
        "summary": "Get All Store Themes",
        "tags": [
          "Themes"
        ],
        "operationId": "V3ThemesByStoreHashGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ThemesCollectionResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "variations": [
                      {}
                    ]
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Uploads a new theme to your BigCommerce store.",
        "summary": "Upload a Theme",
        "tags": [
          "Themes"
        ],
        "operationId": "V3ThemesByStoreHashPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/Request284"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Job ID for the background job processing the theme upload.",
            "schema": {
              "$ref": "#/definitions/JobId"
            },
            "examples": {
              "application/json": {}
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/themes/{uuid}": {
      "get": {
        "description": "Get a store theme by `uuid`.",
        "summary": "Get a Store Theme by Id",
        "tags": [
          "Themes"
        ],
        "operationId": "V3ThemesByStoreHashAndUuidGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The *Theme* identifier."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ThemeResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "variations": [
                    {}
                  ]
                }
              }
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete a store theme by `uuid`.",
        "summary": "Delete a Store Theme",
        "tags": [
          "Themes"
        ],
        "operationId": "V3ThemesByStoreHashAndUuidDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The *Theme* identifier."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "No content found to fulfill the request.",
            "schema": {
              "$ref": "#/definitions/NoContent"
            },
            "examples": {
              "application/json": {}
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/themes/{uuid}/actions/download": {
      "post": {
        "description": "Downloads a store theme by `uuid`.",
        "summary": "Download a Store Theme",
        "tags": [
          "Themes"
        ],
        "operationId": "V3ThemesActionsDownloadByStoreHashAndUuidPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The *Theme* identifier."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/WhichThemeToDownload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/JobId"
            },
            "examples": {
              "application/json": {}
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/themes/actions/activate": {
      "post": {
        "description": "Activates a store theme.",
        "summary": "Activate Store Theme",
        "tags": [
          "Themes"
        ],
        "operationId": "V3ThemesActionsActivateByStoreHashPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/Activate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content found to fulfill the request.",
            "schema": {
              "$ref": "#/definitions/NoContent"
            },
            "examples": {
              "application/json": {}
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/themes/jobs/{job_id}": {
      "get": {
        "description": "Get a specified job by `job_id`.",
        "summary": "Get Job",
        "tags": [
          "Themes"
        ],
        "operationId": "V3ThemesJobsByStoreHashAndJobIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The job identifier."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/JobResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "errors": [
                    {}
                  ],
                  "warnings": [
                    {}
                  ]
                }
              }
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/carts/{cartId}": {
      "get": {
        "description": "Get a stores cart using the `cartId`.",
        "summary": "Get a Cart",
        "tags": [
          "Cart"
        ],
        "operationId": "V3CartsByStoreHashAndCartIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "line_items.physical_items.options",
              "line_items.digital_items.options",
              "redirect_urls"
            ],
            "x-enum-elements": [
              {
                "name": "Enum_line_items.physical_items.options",
                "description": ""
              },
              {
                "name": "Enum_line_items.digital_items.options",
                "description": ""
              },
              {
                "name": "redirect_urls",
                "description": ""
              }
            ],
            "type": "string",
            "description": "Include additional details about the cart in the /GET response."
          },
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "Get an empty list if no cart exists in the session, or the cart if the shopper has an active cart.",
            "schema": {
              "$ref": "#/definitions/CartsResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "6b485543-e815-4aca-9590-4d6d945b8c2d",
                    "customer_id": 0,
                    "email": "janedoe@email.com",
                    "currency": {
                      "code": "USD"
                    },
                    "tax_included": true,
                    "base_amount": 12.99,
                    "discount_amount": 5,
                    "cart_amount": 12.99,
                    "coupons": [
                      {
                        "id": "1",
                        "code": "SAVE123",
                        "name": "",
                        "coupon_type": "per_total_discount",
                        "discounted_amount": 5,
                        "slug": ""
                      }
                    ],
                    "discounts": [
                      {
                        "id": 1,
                        "discounted_amount": 5
                      }
                    ],
                    "line_items": [
                      {
                        "physical_items": [
                          {
                            "quantity": 10,
                            "id": "8235d47d-718b-4b9c-89a4-5fa1ee76a0b4",
                            "variant_id": 182,
                            "product_id": 118,
                            "name": "Bath Towel Green",
                            "url": "http://your-store-url.mybigcommerce.com/your-product/",
                            "taxable": false,
                            "image_url": "https://pathtoproductimage/ProductDefault.gif",
                            "discounts": [
                              {
                                "id": 1,
                                "discounted_amount": 5
                              }
                            ],
                            "discount_amount": 4.76,
                            "coupon_amount": 0,
                            "list_price": 100,
                            "sale_price": 100,
                            "extended_list_price": 100,
                            "extended_sale_price": 100,
                            "options": [
                              {
                                "name": "Color",
                                "name_id": 8,
                                "value": "Medium",
                                "value_id": 15
                              }
                            ],
                            "is_require_shipping": true,
                            "gift_wrapping": {
                              "name": "Holiday Wrapping",
                              "amount": 10
                            }
                          }
                        ],
                        "digital_items": [
                          {
                            "quantity": 2,
                            "id": "5",
                            "variant_id": 7,
                            "product_id": 118,
                            "sku": "SMGREEN",
                            "name": "T-Shirt",
                            "url": "http://your-store-url.mybigcommerce.com/your-product/",
                            "taxable": false,
                            "image_url": "https://pathtoproductimage/ProductDefault.gif",
                            "discounts": [
                              {
                                "id": 1,
                                "discounted_amount": 5
                              }
                            ],
                            "discount_amount": 0,
                            "coupon_amount": 0,
                            "list_price": 100,
                            "sale_price": 100,
                            "extended_list_price": 100,
                            "extended_sale_price": 100,
                            "options": [
                              {
                                "name": "Color",
                                "name_id": 8,
                                "value": "Medium",
                                "value_id": 15
                              }
                            ]
                          }
                        ],
                        "gift_certificates": [
                          {
                            "theme": "Birthday",
                            "amount": 50,
                            "sender": {
                              "name": "Jane Does",
                              "email": "janedoe@email.com"
                            },
                            "recipient": {
                              "name": "Jane Does",
                              "email": "janedoe@email.com"
                            },
                            "id": "23",
                            "taxable": false,
                            "message": "Have an amazing day!"
                          }
                        ]
                      }
                    ],
                    "created_time": "2018-06-06T21:02:24+00:00",
                    "updated_time": "2018-06-06T21:02:24+00:00"
                  }
                ]
              }
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Update a cart using the `cartId`. The `customer_id` can be updated.",
        "summary": "Update a Cart",
        "tags": [
          "Cart"
        ],
        "operationId": "V3CartsByStoreHashAndCartIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "This cart's unique ID."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/CartUpdateRequestData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Cart"
            },
            "examples": {
              "application/json": {
                "id": "6b485543-e815-4aca-9590-4d6d945b8c2d",
                "customer_id": 0,
                "email": "janedoe@email.com",
                "currency": {
                  "code": "USD"
                },
                "tax_included": true,
                "base_amount": 12.99,
                "discount_amount": 5,
                "cart_amount": 12.99,
                "coupons": [
                  {
                    "id": "1",
                    "code": "SAVE123",
                    "name": "",
                    "coupon_type": "per_total_discount",
                    "discounted_amount": 5,
                    "slug": ""
                  }
                ],
                "discounts": [
                  {
                    "id": 1,
                    "discounted_amount": 5
                  }
                ],
                "line_items": [
                  {
                    "physical_items": [
                      {
                        "quantity": 10,
                        "id": "8235d47d-718b-4b9c-89a4-5fa1ee76a0b4",
                        "variant_id": 182,
                        "product_id": 118,
                        "name": "Bath Towel Green",
                        "url": "http://your-store-url.mybigcommerce.com/your-product/",
                        "taxable": false,
                        "image_url": "https://pathtoproductimage/ProductDefault.gif",
                        "discounts": [
                          {
                            "id": 1,
                            "discounted_amount": 5
                          }
                        ],
                        "discount_amount": 4.76,
                        "coupon_amount": 0,
                        "list_price": 100,
                        "sale_price": 100,
                        "extended_list_price": 100,
                        "extended_sale_price": 100,
                        "options": [
                          {
                            "name": "Color",
                            "name_id": 8,
                            "value": "Medium",
                            "value_id": 15
                          }
                        ],
                        "is_require_shipping": true,
                        "gift_wrapping": {
                          "name": "Holiday Wrapping",
                          "amount": 10
                        }
                      }
                    ],
                    "digital_items": [
                      {
                        "quantity": 2,
                        "id": "5",
                        "variant_id": 7,
                        "product_id": 118,
                        "sku": "SMGREEN",
                        "name": "T-Shirt",
                        "url": "http://your-store-url.mybigcommerce.com/your-product/",
                        "taxable": false,
                        "image_url": "https://pathtoproductimage/ProductDefault.gif",
                        "discounts": [
                          {
                            "id": 1,
                            "discounted_amount": 5
                          }
                        ],
                        "discount_amount": 0,
                        "coupon_amount": 0,
                        "list_price": 100,
                        "sale_price": 100,
                        "extended_list_price": 100,
                        "extended_sale_price": 100,
                        "options": [
                          {
                            "name": "Color",
                            "name_id": 8,
                            "value": "Medium",
                            "value_id": 15
                          }
                        ]
                      }
                    ],
                    "gift_certificates": [
                      {
                        "theme": "Birthday",
                        "amount": 50,
                        "sender": {
                          "name": "Jane Does",
                          "email": "janedoe@email.com"
                        },
                        "recipient": {
                          "name": "Jane Does",
                          "email": "janedoe@email.com"
                        },
                        "id": "23",
                        "taxable": false,
                        "message": "Have an amazing day!"
                      }
                    ]
                  }
                ],
                "created_time": "2018-06-06T21:02:24+00:00",
                "updated_time": "2018-06-06T21:02:24+00:00"
              }
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Remove a cart using the `cartId`.",
        "summary": "Delete Cart by Id",
        "tags": [
          "Cart"
        ],
        "operationId": "V3CartsByStoreHashAndCartIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The identifier of a specific cart."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/carts": {
      "post": {
        "description": "Creates a cart and generates a cart ID.",
        "summary": "Create a Cart",
        "tags": [
          "Cart"
        ],
        "operationId": "V3CartsByStoreHashPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/LineItemsRequest"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "line_items.physical_items.options",
              "line_items.digital_items.options",
              "redirect_urls"
            ],
            "x-enum-elements": [
              {
                "name": "Enum_line_items.physical_items.options",
                "description": ""
              },
              {
                "name": "Enum_line_items.digital_items.options",
                "description": ""
              },
              {
                "name": "redirect_urls",
                "description": ""
              }
            ],
            "type": "string",
            "description": "Include additional details about the cart in the POST response."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Cart"
            },
            "examples": {
              "application/json": {
                "id": "6b485543-e815-4aca-9590-4d6d945b8c2d",
                "customer_id": 0,
                "email": "janedoe@email.com",
                "currency": {
                  "code": "USD"
                },
                "tax_included": true,
                "base_amount": 12.99,
                "discount_amount": 5,
                "cart_amount": 12.99,
                "coupons": [
                  {
                    "id": "1",
                    "code": "SAVE123",
                    "name": "",
                    "coupon_type": "per_total_discount",
                    "discounted_amount": 5,
                    "slug": ""
                  }
                ],
                "discounts": [
                  {
                    "id": 1,
                    "discounted_amount": 5
                  }
                ],
                "line_items": [
                  {
                    "physical_items": [
                      {
                        "quantity": 10,
                        "id": "8235d47d-718b-4b9c-89a4-5fa1ee76a0b4",
                        "variant_id": 182,
                        "product_id": 118,
                        "name": "Bath Towel Green",
                        "url": "http://your-store-url.mybigcommerce.com/your-product/",
                        "taxable": false,
                        "image_url": "https://pathtoproductimage/ProductDefault.gif",
                        "discounts": [
                          {
                            "id": 1,
                            "discounted_amount": 5
                          }
                        ],
                        "discount_amount": 4.76,
                        "coupon_amount": 0,
                        "list_price": 100,
                        "sale_price": 100,
                        "extended_list_price": 100,
                        "extended_sale_price": 100,
                        "options": [
                          {
                            "name": "Color",
                            "name_id": 8,
                            "value": "Medium",
                            "value_id": 15
                          }
                        ],
                        "is_require_shipping": true,
                        "gift_wrapping": {
                          "name": "Holiday Wrapping",
                          "amount": 10
                        }
                      }
                    ],
                    "digital_items": [
                      {
                        "quantity": 2,
                        "id": "5",
                        "variant_id": 7,
                        "product_id": 118,
                        "sku": "SMGREEN",
                        "name": "T-Shirt",
                        "url": "http://your-store-url.mybigcommerce.com/your-product/",
                        "taxable": false,
                        "image_url": "https://pathtoproductimage/ProductDefault.gif",
                        "discounts": [
                          {
                            "id": 1,
                            "discounted_amount": 5
                          }
                        ],
                        "discount_amount": 0,
                        "coupon_amount": 0,
                        "list_price": 100,
                        "sale_price": 100,
                        "extended_list_price": 100,
                        "extended_sale_price": 100,
                        "options": [
                          {
                            "name": "Color",
                            "name_id": 8,
                            "value": "Medium",
                            "value_id": 15
                          }
                        ]
                      }
                    ],
                    "gift_certificates": [
                      {
                        "theme": "Birthday",
                        "amount": 50,
                        "sender": {
                          "name": "Jane Does",
                          "email": "janedoe@email.com"
                        },
                        "recipient": {
                          "name": "Jane Does",
                          "email": "janedoe@email.com"
                        },
                        "id": "23",
                        "taxable": false,
                        "message": "Have an amazing day!"
                      }
                    ]
                  }
                ],
                "created_time": "2018-06-06T21:02:24+00:00",
                "updated_time": "2018-06-06T21:02:24+00:00"
              }
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/carts/{cartId}/items": {
      "post": {
        "description": "Add a line item(s) to the cart using the `cartId`.",
        "summary": "Add Cart Items",
        "tags": [
          "Cart"
        ],
        "operationId": "V3CartsItemsByStoreHashAndCartIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "This cart's unique ID."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/LineItemsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Cart"
            },
            "examples": {
              "application/json": {
                "id": "6b485543-e815-4aca-9590-4d6d945b8c2d",
                "customer_id": 0,
                "email": "janedoe@email.com",
                "currency": {
                  "code": "USD"
                },
                "tax_included": true,
                "base_amount": 12.99,
                "discount_amount": 5,
                "cart_amount": 12.99,
                "coupons": [
                  {
                    "id": "1",
                    "code": "SAVE123",
                    "name": "",
                    "coupon_type": "per_total_discount",
                    "discounted_amount": 5,
                    "slug": ""
                  }
                ],
                "discounts": [
                  {
                    "id": 1,
                    "discounted_amount": 5
                  }
                ],
                "line_items": [
                  {
                    "physical_items": [
                      {
                        "quantity": 10,
                        "id": "8235d47d-718b-4b9c-89a4-5fa1ee76a0b4",
                        "variant_id": 182,
                        "product_id": 118,
                        "name": "Bath Towel Green",
                        "url": "http://your-store-url.mybigcommerce.com/your-product/",
                        "taxable": false,
                        "image_url": "https://pathtoproductimage/ProductDefault.gif",
                        "discounts": [
                          {
                            "id": 1,
                            "discounted_amount": 5
                          }
                        ],
                        "discount_amount": 4.76,
                        "coupon_amount": 0,
                        "list_price": 100,
                        "sale_price": 100,
                        "extended_list_price": 100,
                        "extended_sale_price": 100,
                        "options": [
                          {
                            "name": "Color",
                            "name_id": 8,
                            "value": "Medium",
                            "value_id": 15
                          }
                        ],
                        "is_require_shipping": true,
                        "gift_wrapping": {
                          "name": "Holiday Wrapping",
                          "amount": 10
                        }
                      }
                    ],
                    "digital_items": [
                      {
                        "quantity": 2,
                        "id": "5",
                        "variant_id": 7,
                        "product_id": 118,
                        "sku": "SMGREEN",
                        "name": "T-Shirt",
                        "url": "http://your-store-url.mybigcommerce.com/your-product/",
                        "taxable": false,
                        "image_url": "https://pathtoproductimage/ProductDefault.gif",
                        "discounts": [
                          {
                            "id": 1,
                            "discounted_amount": 5
                          }
                        ],
                        "discount_amount": 0,
                        "coupon_amount": 0,
                        "list_price": 100,
                        "sale_price": 100,
                        "extended_list_price": 100,
                        "extended_sale_price": 100,
                        "options": [
                          {
                            "name": "Color",
                            "name_id": 8,
                            "value": "Medium",
                            "value_id": 15
                          }
                        ]
                      }
                    ],
                    "gift_certificates": [
                      {
                        "theme": "Birthday",
                        "amount": 50,
                        "sender": {
                          "name": "Jane Does",
                          "email": "janedoe@email.com"
                        },
                        "recipient": {
                          "name": "Jane Does",
                          "email": "janedoe@email.com"
                        },
                        "id": "23",
                        "taxable": false,
                        "message": "Have an amazing day!"
                      }
                    ]
                  }
                ],
                "created_time": "2018-06-06T21:02:24+00:00",
                "updated_time": "2018-06-06T21:02:24+00:00"
              }
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/carts/{cartId}/redirect_urls": {
      "post": {
        "description": "Create a URL to redirect a shopper to an already created cart using the `cartId`.\nA cart's redirect URLs may only be used once.\nOnce a redirect URL has been visited, it will be invalidated and cannot be used again.\nIf your application requires URLs to be visited more than once, consider generating a fresh one each time you need to restore a cart, and redirecting to the URL from your own application.",
        "summary": "Create Redirect URL",
        "tags": [
          "Cart"
        ],
        "operationId": "V3CartsRedirectUrlsByStoreHashAndCartIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "This cart's unique ID."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RedirectURLResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "cart_url": "https://store-{{store_hash}}.mybigcommerce.com/cart.php?action=load&id=6b485543-e815-4aca-9590-4d6d945b8c2d&token=825b8419ce5968fa61aec047ecf869cf9e02e705319c86e36c35f8e8f4c01bc9",
                  "checkout_url": "https://store-{{store_hash}}.mybigcommerce.com/cart.php?action=loadInCheckout&id=6b485543-e815-4aca-9590-4d6d945b8c2d&token=825b8419ce5968fa61aec047ecf869cf9e02e705319c86e36c35f8e8f4c01bc9"
                },
                "meta": {}
              }
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/carts/{cartId}/items/{itemId}": {
      "put": {
        "description": "Updates an existing, single line item in the cart using the `cartId` and the `itemId`. Currently only updating the item price and quantity are supported.\nIf a variant needs to be changed or updated, the product will need to be removed and re-added to the cart with the correct variants using the Add Cart Line Items endpoint.",
        "summary": "Update Cart Item",
        "tags": [
          "Cart"
        ],
        "operationId": "V3CartsItemsItemIdByStoreHashAndCartIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "This cart's unique ID."
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "This item's ID."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/CartUpdateLineItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Cart"
            },
            "examples": {
              "application/json": {
                "id": "6b485543-e815-4aca-9590-4d6d945b8c2d",
                "customer_id": 0,
                "email": "janedoe@email.com",
                "currency": {
                  "code": "USD"
                },
                "tax_included": true,
                "base_amount": 12.99,
                "discount_amount": 5,
                "cart_amount": 12.99,
                "coupons": [
                  {
                    "id": "1",
                    "code": "SAVE123",
                    "name": "",
                    "coupon_type": "per_total_discount",
                    "discounted_amount": 5,
                    "slug": ""
                  }
                ],
                "discounts": [
                  {
                    "id": 1,
                    "discounted_amount": 5
                  }
                ],
                "line_items": [
                  {
                    "physical_items": [
                      {
                        "quantity": 10,
                        "id": "8235d47d-718b-4b9c-89a4-5fa1ee76a0b4",
                        "variant_id": 182,
                        "product_id": 118,
                        "name": "Bath Towel Green",
                        "url": "http://your-store-url.mybigcommerce.com/your-product/",
                        "taxable": false,
                        "image_url": "https://pathtoproductimage/ProductDefault.gif",
                        "discounts": [
                          {
                            "id": 1,
                            "discounted_amount": 5
                          }
                        ],
                        "discount_amount": 4.76,
                        "coupon_amount": 0,
                        "list_price": 100,
                        "sale_price": 100,
                        "extended_list_price": 100,
                        "extended_sale_price": 100,
                        "options": [
                          {
                            "name": "Color",
                            "name_id": 8,
                            "value": "Medium",
                            "value_id": 15
                          }
                        ],
                        "is_require_shipping": true,
                        "gift_wrapping": {
                          "name": "Holiday Wrapping",
                          "amount": 10
                        }
                      }
                    ],
                    "digital_items": [
                      {
                        "quantity": 2,
                        "id": "5",
                        "variant_id": 7,
                        "product_id": 118,
                        "sku": "SMGREEN",
                        "name": "T-Shirt",
                        "url": "http://your-store-url.mybigcommerce.com/your-product/",
                        "taxable": false,
                        "image_url": "https://pathtoproductimage/ProductDefault.gif",
                        "discounts": [
                          {
                            "id": 1,
                            "discounted_amount": 5
                          }
                        ],
                        "discount_amount": 0,
                        "coupon_amount": 0,
                        "list_price": 100,
                        "sale_price": 100,
                        "extended_list_price": 100,
                        "extended_sale_price": 100,
                        "options": [
                          {
                            "name": "Color",
                            "name_id": 8,
                            "value": "Medium",
                            "value_id": 15
                          }
                        ]
                      }
                    ],
                    "gift_certificates": [
                      {
                        "theme": "Birthday",
                        "amount": 50,
                        "sender": {
                          "name": "Jane Does",
                          "email": "janedoe@email.com"
                        },
                        "recipient": {
                          "name": "Jane Does",
                          "email": "janedoe@email.com"
                        },
                        "id": "23",
                        "taxable": false,
                        "message": "Have an amazing day!"
                      }
                    ]
                  }
                ],
                "created_time": "2018-06-06T21:02:24+00:00",
                "updated_time": "2018-06-06T21:02:24+00:00"
              }
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Removes a line item from the cart using the `cartId` and `itemId`.",
        "summary": "Remove Cart Line Item",
        "tags": [
          "Cart"
        ],
        "operationId": "V3CartsItemsItemIdByStoreHashAndCartIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Cart"
            },
            "examples": {
              "application/json": {
                "id": "6b485543-e815-4aca-9590-4d6d945b8c2d",
                "customer_id": 0,
                "email": "janedoe@email.com",
                "currency": {
                  "code": "USD"
                },
                "tax_included": true,
                "base_amount": 12.99,
                "discount_amount": 5,
                "cart_amount": 12.99,
                "coupons": [
                  {
                    "id": "1",
                    "code": "SAVE123",
                    "name": "",
                    "coupon_type": "per_total_discount",
                    "discounted_amount": 5,
                    "slug": ""
                  }
                ],
                "discounts": [
                  {
                    "id": 1,
                    "discounted_amount": 5
                  }
                ],
                "line_items": [
                  {
                    "physical_items": [
                      {
                        "quantity": 10,
                        "id": "8235d47d-718b-4b9c-89a4-5fa1ee76a0b4",
                        "variant_id": 182,
                        "product_id": 118,
                        "name": "Bath Towel Green",
                        "url": "http://your-store-url.mybigcommerce.com/your-product/",
                        "taxable": false,
                        "image_url": "https://pathtoproductimage/ProductDefault.gif",
                        "discounts": [
                          {
                            "id": 1,
                            "discounted_amount": 5
                          }
                        ],
                        "discount_amount": 4.76,
                        "coupon_amount": 0,
                        "list_price": 100,
                        "sale_price": 100,
                        "extended_list_price": 100,
                        "extended_sale_price": 100,
                        "options": [
                          {
                            "name": "Color",
                            "name_id": 8,
                            "value": "Medium",
                            "value_id": 15
                          }
                        ],
                        "is_require_shipping": true,
                        "gift_wrapping": {
                          "name": "Holiday Wrapping",
                          "amount": 10
                        }
                      }
                    ],
                    "digital_items": [
                      {
                        "quantity": 2,
                        "id": "5",
                        "variant_id": 7,
                        "product_id": 118,
                        "sku": "SMGREEN",
                        "name": "T-Shirt",
                        "url": "http://your-store-url.mybigcommerce.com/your-product/",
                        "taxable": false,
                        "image_url": "https://pathtoproductimage/ProductDefault.gif",
                        "discounts": [
                          {
                            "id": 1,
                            "discounted_amount": 5
                          }
                        ],
                        "discount_amount": 0,
                        "coupon_amount": 0,
                        "list_price": 100,
                        "sale_price": 100,
                        "extended_list_price": 100,
                        "extended_sale_price": 100,
                        "options": [
                          {
                            "name": "Color",
                            "name_id": 8,
                            "value": "Medium",
                            "value_id": 15
                          }
                        ]
                      }
                    ],
                    "gift_certificates": [
                      {
                        "theme": "Birthday",
                        "amount": 50,
                        "sender": {
                          "name": "Jane Does",
                          "email": "janedoe@email.com"
                        },
                        "recipient": {
                          "name": "Jane Does",
                          "email": "janedoe@email.com"
                        },
                        "id": "23",
                        "taxable": false,
                        "message": "Have an amazing day!"
                      }
                    ]
                  }
                ],
                "created_time": "2018-06-06T21:02:24+00:00",
                "updated_time": "2018-06-06T21:02:24+00:00"
              }
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/content/scripts": {
      "get": {
        "description": "Get all scripts. Optional parameters can be passed in.",
        "summary": "Get All Scripts",
        "tags": [
          "Scripts"
        ],
        "operationId": "V3ContentScriptsByStoreHashGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Specifies the page number in a limited (paginated) list of products. `/v3/content/script?page=2`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Controls the number of items per page in a limited (paginated) list of products. `/v3/content/script?limit=50`"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "enum": [
              "name",
              "description",
              "date_created",
              "date_modified"
            ],
            "x-enum-elements": [
              {
                "name": "name",
                "description": ""
              },
              {
                "name": "description",
                "description": ""
              },
              {
                "name": "date_created",
                "description": ""
              },
              {
                "name": "date_modified",
                "description": ""
              }
            ],
            "type": "string",
            "description": "Script fields names to sort by."
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "enum": [
              "asc",
              "desc"
            ],
            "x-enum-elements": [
              {
                "name": "asc",
                "description": ""
              },
              {
                "name": "desc",
                "description": ""
              }
            ],
            "type": "string",
            "description": "Sort direction. Acceptable values are: `asc`, `desc`. `/v3/content/script?direction=asc`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ScriptsResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "uuid": "2bf40be2-e57a-4bc8-860a-5bf45edd3795",
                    "name": "jQuery",
                    "description": "The Write Less, Do More, JavaScript Library.",
                    "html": "<script src=\\\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\\\"></script>",
                    "src": "https://code.jquery.com/jquery-3.2.1.min.js",
                    "auto_uninstall": true,
                    "load_method": "default",
                    "location": "head",
                    "visibility": "storefront",
                    "kind": "src",
                    "api_client_id": "d1j42k5q76xsm15fa3g8sp2egytoixo",
                    "date_created": "2017-12-05T23:37:45.506Z",
                    "date_modified": "2017-12-05T23:37:45.506Z"
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Creates a script.",
        "summary": "Create a Script",
        "tags": [
          "Scripts"
        ],
        "operationId": "V3ContentScriptsByStoreHashPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ScriptPost"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ScriptResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "uuid": "2bf40be2-e57a-4bc8-860a-5bf45edd3795",
                  "name": "jQuery",
                  "description": "The Write Less, Do More, JavaScript Library.",
                  "html": "<script src=\\\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\\\"></script>",
                  "src": "https://code.jquery.com/jquery-3.2.1.min.js",
                  "auto_uninstall": true,
                  "load_method": "default",
                  "location": "head",
                  "visibility": "storefront",
                  "kind": "src",
                  "api_client_id": "d1j42k5q76xsm15fa3g8sp2egytoixo",
                  "date_created": "2017-12-05T23:37:45.506Z",
                  "date_modified": "2017-12-05T23:37:45.506Z"
                }
              }
            }
          },
          "422": {
            "description": "This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/content/scripts/{uuid}": {
      "get": {
        "description": "Get a script by `uuid`.",
        "summary": "Get Content Scripts By Uuid",
        "tags": [
          "Scripts"
        ],
        "operationId": "V3ContentScriptsByStoreHashAndUuidGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The identifier for a specific script."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ScriptResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "uuid": "2bf40be2-e57a-4bc8-860a-5bf45edd3795",
                  "name": "jQuery",
                  "description": "The Write Less, Do More, JavaScript Library.",
                  "html": "<script src=\\\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\\\"></script>",
                  "src": "https://code.jquery.com/jquery-3.2.1.min.js",
                  "auto_uninstall": true,
                  "load_method": "default",
                  "location": "head",
                  "visibility": "storefront",
                  "kind": "src",
                  "api_client_id": "d1j42k5q76xsm15fa3g8sp2egytoixo",
                  "date_created": "2017-12-05T23:37:45.506Z",
                  "date_modified": "2017-12-05T23:37:45.506Z"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          },
          "422": {
            "description": "This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Updates a script by `uuid`.",
        "summary": "Update a Script",
        "tags": [
          "Scripts"
        ],
        "operationId": "V3ContentScriptsByStoreHashAndUuidPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ScriptPut"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ScriptResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "uuid": "2bf40be2-e57a-4bc8-860a-5bf45edd3795",
                  "name": "jQuery",
                  "description": "The Write Less, Do More, JavaScript Library.",
                  "html": "<script src=\\\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\\\"></script>",
                  "src": "https://code.jquery.com/jquery-3.2.1.min.js",
                  "auto_uninstall": true,
                  "load_method": "default",
                  "location": "head",
                  "visibility": "storefront",
                  "kind": "src",
                  "api_client_id": "d1j42k5q76xsm15fa3g8sp2egytoixo",
                  "date_created": "2017-12-05T23:37:45.506Z",
                  "date_modified": "2017-12-05T23:37:45.506Z"
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          },
          "422": {
            "description": "This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Deletes a script using the `uuid`.",
        "summary": "Delete a Script",
        "tags": [
          "Scripts"
        ],
        "operationId": "V3ContentScriptsByStoreHashAndUuidDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          },
          "422": {
            "description": "This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/pricelists": {
      "get": {
        "description": "Get all price lists. Optional parameters can be passed in.",
        "summary": "Get Price List Collection",
        "tags": [
          "Price Lists"
        ],
        "operationId": "V3PricelistsByStoreHashGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by id. `/v3/pricelists?id=3`"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by name. `/v3/pricelists?name=B2B`"
          },
          {
            "name": "date_created",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by date_created. The min or max filter needs to be added. `/v3/pricelists?date_created:min=2018-06-15`"
          },
          {
            "name": "date_modified",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by date_modified. The min or max filter needs to be added. `/v3/pricelists?date_modified:min=2018-06-15`"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Specifies the page number in a limited (paginated) list of products. `/v3/pricelists?page=2`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Controls the number of items per page in a limited (paginated) list of products. `/v3/pricelists?limit=50`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PriceListCollectionResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": 1,
                    "date_created": "2018-05-08T14:05:27Z",
                    "date_modified": "2018-05-08T14:05:27Z",
                    "name": "B2B Discount",
                    "active": true
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Create a price list.",
        "summary": "Create Price List",
        "tags": [
          "Price Lists"
        ],
        "operationId": "V3PricelistsByStoreHashPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/PriceListBasePOST"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PriceListResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": 1,
                  "date_created": "2018-05-08T14:05:27Z",
                  "date_modified": "2018-05-08T14:05:27Z",
                  "name": "B2B Discount",
                  "active": true
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Price List was in conflict with another Price List. This is the result of duplicate unique values, such as `name`.",
            "schema": {}
          },
          "422": {
            "description": "Price List was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete a set of price lists. This also removed all associated price records. Optional parameters can be passed in.",
        "summary": "Delete Price List by Filter",
        "tags": [
          "Price Lists"
        ],
        "operationId": "V3PricelistsByStoreHashDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by id. `/v3/pricelists?id=6`"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by name. `/v3/pricelists?name=B2B`"
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/pricelists/{price_list_id}": {
      "get": {
        "description": "Get a price list using the `price_list_id`.",
        "summary": "Get Price List",
        "tags": [
          "Price Lists"
        ],
        "operationId": "V3PricelistsByStoreHashAndPriceListIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "price_list_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the Price List requested."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PriceListResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": 1,
                  "date_created": "2018-05-08T14:05:27Z",
                  "date_modified": "2018-05-08T14:05:27Z",
                  "name": "B2B Discount",
                  "active": true
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Updates a single price list using the `price_list_id`.",
        "summary": "Update Price List",
        "tags": [
          "Price Lists"
        ],
        "operationId": "V3PricelistsByStoreHashAndPriceListIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "price_list_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the Price List requested."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/PriceListBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PriceListResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": 1,
                  "date_created": "2018-05-08T14:05:27Z",
                  "date_modified": "2018-05-08T14:05:27Z",
                  "name": "B2B Discount",
                  "active": true
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          },
          "409": {
            "description": "Price List was in conflict with another Price List. This is the result of duplicate unique values, such as `name`.",
            "schema": {}
          },
          "422": {
            "description": "Price List was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete a price list using the `price_list_id.` This also remove all the associated price records.",
        "summary": "Delete Price List",
        "tags": [
          "Price Lists"
        ],
        "operationId": "V3PricelistsByStoreHashAndPriceListIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "price_list_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The ID of the Price List requested."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/pricelists/{price_list_id}/records": {
      "get": {
        "description": "Get the price records associated with a price list using the `price_list_id`.",
        "summary": "Get Price List Record Collection",
        "tags": [
          "Price Lists"
        ],
        "operationId": "V3PricelistsRecordsByStoreHashAndPriceListIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "variant_id",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Variant* whose prices were requested. `/v3/pricelists/{price_list_id}/records?variant_id=67`"
          },
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A comma-separated list of product ids whose prices were requested. `/v3/pricelists/{price_list_id}/records?product_id=1,4,78`"
          },
          {
            "name": "currency",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by currency. `/v3/pricelists/{price_list_id}/records?currency=USD`"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Specifies the page number in a limited (paginated) list of products. `/v3/pricelists/{price_list_id}/records?page=1`"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Controls the number of items per page in a limited (paginated) list of products. `/v3/pricelists/{price_list_id}/records?limit=50`"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "bulk_pricing_tiers",
              "sku"
            ],
            "x-enum-elements": [
              {
                "name": "bulk_pricing_tiers",
                "description": ""
              },
              {
                "name": "sku",
                "description": ""
              }
            ],
            "type": "string",
            "description": "Sub-resources to include on a price record, in a comma-separated list. `/v3/pricelists/{price_list_id}/records?include=sku`"
          },
          {
            "name": "price",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by price. `/v3/pricelists/{price_list_id}/records?price=12.50`"
          },
          {
            "name": "sale_price",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by sale_price. `/v3/pricelists/{price_list_id}/records?sale_price=22`"
          },
          {
            "name": "retail_price",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by retail_price. `/v3/pricelists/{price_list_id}/records?retail_price=45`"
          },
          {
            "name": "map_price",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by map_price or minimum advertised price. `/v3/pricelists/{price_list_id}/records?map_price=22`"
          },
          {
            "name": "calculated_price",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "Filter items by calculated_price. `/v3/pricelists/{price_list_id}/records?calculated_price=4.99`"
          },
          {
            "name": "date_created",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by date_created. The min or max filter needs to be added. `/v3/pricelists/{price_list_id}/records?date_created:min=2018-06-15`"
          },
          {
            "name": "date_modified",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by date_modified. The min or max filter needs to be added. `/v3/pricelists/{price_list_id}/records?date_modified:min=2018-06-15`"
          },
          {
            "name": "sku",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter items by sku. `/v3/pricelists/{price_list_id}/records?sku=GRN56`"
          },
          {
            "name": "price_list_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PriceRecordCollectionResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "calculated_price": 48.99,
                    "date_created": "2018-05-08T14:05:27Z",
                    "date_modified": "2018-05-08T14:05:27Z",
                    "product_id": 77,
                    "price": 48.99,
                    "bulk_pricing_tiers": [
                      {
                        "quantity_min": 1,
                        "quantity_max": 10,
                        "type": "price",
                        "amount": 3
                      }
                    ],
                    "sku": "SLCTBS",
                    "price_list_id": 1,
                    "variant_id": "66"
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Create or update a price list records using the `price_list_id`.",
        "summary": "Create or Update Price Records",
        "tags": [
          "Price Lists"
        ],
        "operationId": "V3PricelistsRecordsByStoreHashAndPriceListIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PriceRecordBatchItem"
              }
            }
          },
          {
            "name": "price_list_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "string"
            },
            "examples": {
              "text/plain": "Returns an empty 200 OK."
            }
          },
          "422": {
            "description": "Error response for batch PUT of Price Records.  May include errors during partial update in non-strict mode.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete price records. Optional parameters can be used.",
        "summary": "Delete Price Records by Filter",
        "tags": [
          "Price Lists"
        ],
        "operationId": "V3PricelistsRecordsByStoreHashAndPriceListIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "variant_id",
            "in": "query",
            "required": false,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Variant* whose prices were requested. `/v3/pricelists/{price_list_id}/records?variant_id=4`"
          },
          {
            "name": "price_list_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/pricelists/{price_list_id}/records/{variant_id}": {
      "get": {
        "description": "Get price records from a price list using the `price_list_id` and the `variant_id`. Will contain any set price records by currency.",
        "summary": "Get Price List Records by Variant Id",
        "tags": [
          "Price Lists"
        ],
        "operationId": "V3PricelistsRecordsVariantIdByStoreHashAndPriceListIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "price_list_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Price List* requested."
          },
          {
            "name": "variant_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the variant on a product, or on an associated Price List Record."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "bulk_pricing_tiers",
              "sku"
            ],
            "x-enum-elements": [
              {
                "name": "bulk_pricing_tiers",
                "description": ""
              },
              {
                "name": "sku",
                "description": ""
              }
            ],
            "type": "string",
            "description": "Sub-resources to include on a price record, in a comma-separated list. Valid expansions currently include `bulk_pricing_tiers` and `sku`.  Other values will be ignored. `/v3/pricelists/{price_list_id}/records/{variant_id}?include=sku`"
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PriceRecordCollectionResponse"
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "calculated_price": 48.99,
                    "date_created": "2018-05-08T14:05:27Z",
                    "date_modified": "2018-05-08T14:05:27Z",
                    "product_id": 77,
                    "price": 48.99,
                    "bulk_pricing_tiers": [
                      {
                        "quantity_min": 1,
                        "quantity_max": 10,
                        "type": "price",
                        "amount": 3
                      }
                    ],
                    "sku": "SLCTBS",
                    "price_list_id": 1,
                    "variant_id": "66"
                  }
                ],
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete the price record associated with a price list using the `price_list_id` and the `variant_id`.",
        "summary": "Delete Price List Records by Variant Id",
        "tags": [
          "Price Lists"
        ],
        "operationId": "V3PricelistsRecordsVariantIdByStoreHashAndPriceListIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "price_list_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Price List* requested."
          },
          {
            "name": "variant_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the variant on a product, or on an associated Price List Record."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/{store_hash}/v3/pricelists/{price_list_id}/records/{variant_id}/{currency_code}": {
      "get": {
        "description": "Get a price list using the `price_list_id`, `variant_id` and `currency_code`. Optional parameters can be used.",
        "summary": "Get Price List Record",
        "tags": [
          "Price Lists"
        ],
        "operationId": "V3PricelistsRecordsVariantIdCurrencyCodeByStoreHashAndPriceListIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "price_list_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Price List* requested."
          },
          {
            "name": "variant_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the variant on a product, or on an associated Price List Record."
          },
          {
            "name": "currency_code",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The currency code associated with the price record being acted upon."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "enum": [
              "bulk_pricing_tiers",
              "sku"
            ],
            "x-enum-elements": [
              {
                "name": "bulk_pricing_tiers",
                "description": ""
              },
              {
                "name": "sku",
                "description": ""
              }
            ],
            "type": "string",
            "description": "Sub-resources to include on a price record, in a comma-separated list. Valid expansions currently include `bulk_pricing_tiers` and `sku`.  Other values will be ignored.\n`/v3/pricelists/{price_list_id}/records?include=sku`?include=sku`"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PriceRecordResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "calculated_price": 48.99,
                  "date_created": "2018-05-08T14:05:27Z",
                  "date_modified": "2018-05-08T14:05:27Z",
                  "product_id": 77,
                  "price": 48.99,
                  "bulk_pricing_tiers": [
                    {
                      "quantity_min": 1,
                      "quantity_max": 10,
                      "type": "price",
                      "amount": 3
                    }
                  ],
                  "sku": "SLCTBS",
                  "price_list_id": 1,
                  "variant_id": "66"
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Creates or updates a single price record using the `price_list_id`, `variant_id` and `currency_code`.",
        "summary": "Set Price List Record",
        "tags": [
          "Price Lists"
        ],
        "operationId": "V3PricelistsRecordsVariantIdCurrencyCodeByStoreHashAndPriceListIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "price_list_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Price List* requested."
          },
          {
            "name": "variant_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the variant on a product, or on an associated Price List Record."
          },
          {
            "name": "currency_code",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The currency code associated with the price record being acted upon."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/PriceRecordBase"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PriceRecordResponse"
            },
            "examples": {
              "application/json": {
                "data": {
                  "calculated_price": 48.99,
                  "date_created": "2018-05-08T14:05:27Z",
                  "date_modified": "2018-05-08T14:05:27Z",
                  "product_id": 77,
                  "price": 48.99,
                  "bulk_pricing_tiers": [
                    {
                      "quantity_min": 1,
                      "quantity_max": 10,
                      "type": "price",
                      "amount": 3
                    }
                  ],
                  "sku": "SLCTBS",
                  "price_list_id": 1,
                  "variant_id": "66"
                },
                "meta": {
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 50,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": {
                      "previous": "?page=1&limit=50",
                      "current": "?page=1&limit=50",
                      "next": "?page=1&limit=50"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The resource was not found.",
            "schema": {}
          },
          "409": {
            "description": "Price Record was in conflict with another price record. This is the result of duplicate unique values.",
            "schema": {}
          },
          "422": {
            "description": "Price Record was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.",
            "schema": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete a price record(s) using the `price_list_id`, `variant_id` and `currency_code`.",
        "summary": "Pricelists Records Currency Code_Delete Price List",
        "tags": [
          "Price Lists"
        ],
        "operationId": "V3PricelistsRecordsVariantIdCurrencyCodeByStoreHashAndPriceListIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "price_list_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the *Price List* requested."
          },
          {
            "name": "variant_id",
            "in": "path",
            "required": true,
            "type": "number",
            
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "description": "The id of the variant on a product, or on an associated Price List Record."
          },
          {
            "name": "currency_code",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The currency code associated with the price record being acted upon."
          },
          {
            "name": "store_hash",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Your store's hash from the canonical URL."
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Client",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "X-Auth-Token",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    }
  },
  "definitions": {
    "VariantImageRequest": {
      "title": "VariantImageRequest",
      "type": "object",
      "properties": {
        "image_file": {
          "description": "An image file. Supported MIME types include GIF, JPEG, and PNG.",
          "type": "string"
        }
      },
      "required": [
        "image_file"
      ]
    },
    "WidgetTemplatePreview": {
      "title": "WidgetTemplatePreview",
      "type": "object",
      "properties": {
        "widget_configuration": {
          "description": "The JSON data that populates the template.",
          "type": "object"
        }
      }
    },
    "WidgetTemplatePut": {
      "title": "WidgetTemplatePut",
      "type": "object",
      "properties": {
        "name": {
          "description": "User-friendly name.",
          "type": "string"
        },
        "schema": {
          "description": "The schema for this template. Describes how to build dynamic forms for widget configurations.",
          "type": "object"
        },
        "template": {
          "description": "Handlebars HTML content. Also has access to Stencil Paper helpers.",
          "type": "string"
        }
      }
    },
    "WidgetTemplatePost": {
      "title": "WidgetTemplatePost",
      "type": "object",
      "properties": {
        "name": {
          "description": "User friendly name.",
          "type": "string"
        },
        "template": {
          "description": "Handlebars HTML content. Also has access to Stencil Paper helpers.",
          "type": "string"
        },
        "schema": {
          "description": "The JSON schema of data for this template. Used to validate a configuration.",
          "type": "object"
        }
      },
      "required": [
        "name",
        "template"
      ]
    },
    "WidgetTemplateResponse": {
      "title": "WidgetTemplateResponse",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/WidgetTemplate"
        }
      }
    },
    "WidgetTemplate": {
      "title": "WidgetTemplate",
      "type": "object",
      "properties": {
        "uuid": {
          "description": "The primary identifier.",
          "type": "string"
        },
        "name": {
          "description": "The user-friendly name.",
          "type": "string"
        },
        "kind": {
          "description": "The kind of widget template.",
          "type": "string"
        },
        "schema": {
          "description": "The JSON schema of data for this template. Used to validate a configuration.",
          "type": "object"
        },
        "template": {
          "description": "The widget template HTML. Supports Handlebars and Paper helpers.",
          "type": "string"
        },
        "date_created": {
          "description": "The date on which this object was initially created.",
          "type": "string"
        },
        "date_modified": {
          "description": "The date on which this object was last updated.",
          "type": "string"
        }
      }
    },
    "WidgetTemplatePreviewResponse": {
      "title": "WidgetTemplatePreviewResponse",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Data"
        }
      }
    },
    "Data": {
      "title": "Data",
      "type": "object",
      "properties": {
        "html": {
          "description": "The HTML render of the widget template.",
          "type": "string"
        }
      }
    },
    "WidgetTemplatesResponse": {
      "title": "WidgetTemplatesResponse",
      "type": "object",
      "properties": {
        "data": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/WidgetTemplate"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "CollectionMeta": {
      "title": "CollectionMeta",
      "type": "object",
      "properties": {
        "pagination": {
          "$ref": "#/definitions/Pagination"
        }
      }
    },
    "Pagination": {
      "title": "Pagination",
      "type": "object",
      "properties": {
        "total": {
          "description": "Total number of items in the result set.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "count": {
          "description": "Total number of items in the collection response.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "per_page": {
          "description": "The amount of items returned in the collection per page, controlled by the limit parameter.",
          "example": 50,
          "type": "number",
          "format": "double"
        },
        "current_page": {
          "description": "The page you are currently on within the collection.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "total_pages": {
          "description": "The total number of pages in the collection.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "links": {
          "$ref": "#/definitions/Links"
        }
      }
    },
    "Links": {
      "title": "Links",
      "type": "object",
      "properties": {
        "previous": {
          "description": "Link to the previous page returned in the response.",
          "example": "?page=1&limit=50",
          "type": "string"
        },
        "current": {
          "description": "Link to the current page returned in the response.",
          "example": "?page=1&limit=50",
          "type": "string"
        },
        "next": {
          "description": "Link to the next page returned in the response.",
          "example": "?page=1&limit=50",
          "type": "string"
        }
      }
    },
    "Widget": {
      "title": "Widget",
      "type": "object",
      "properties": {
        "uuid": {
          "description": "The primary identifier.",
          "type": "string"
        },
        "name": {
          "description": "The user-friendly name.",
          "type": "string"
        },
        "description": {
          "description": "The user-friendly description.",
          "type": "string"
        },
        "widget_configuration": {
          "description": "The JSON data that populates the template.",
          "type": "object"
        },
        "widget_template": {
          "$ref": "#/definitions/WidgetTemplate"
        },
        "date_created": {
          "description": "The date on which this object was initially created.",
          "type": "string"
        },
        "date_modified": {
          "description": "The date on which this object was last updated.",
          "type": "string"
        }
      }
    },
    "WidgetPost": {
      "title": "WidgetPost",
      "type": "object",
      "properties": {
        "name": {
          "description": "User friendly name.",
          "type": "string"
        },
        "widget_template_uuid": {
          "description": "The widget template UUID.",
          "type": "string"
        },
        "description": {
          "description": "The user-friendly description.",
          "type": "string"
        },
        "widget_configuration": {
          "description": "The JSON data that populates the template.",
          "type": "object"
        }
      },
      "required": [
        "name",
        "widget_template_uuid"
      ]
    },
    "WidgetPut": {
      "title": "WidgetPut",
      "type": "object",
      "properties": {
        "name": {
          "description": "User-friendly name.",
          "type": "string"
        },
        "description": {
          "description": "The user-friendly description.",
          "type": "string"
        },
        "widget_configuration": {
          "description": "The JSON data that populates the template.",
          "type": "object"
        },
        "widget_template_uuid": {
          "description": "The widget template UUID.",
          "type": "string"
        }
      }
    },
    "WidgetResponse": {
      "title": "WidgetResponse",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Widget"
        }
      }
    },
    "WidgetResponses": {
      "title": "WidgetResponses",
      "type": "object",
      "properties": {
        "data": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Widget"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "PlacementPost": {
      "title": "PlacementPost",
      "type": "object",
      "properties": {
        "widget_uuid": {
          "description": "A widget identifier.",
          "type": "string"
        },
        "region": {
          "description": "The name of the region in which to insert content widgets.",
          "type": "string"
        },
        "template_file": {
          "description": "The template file that you would like to target.",
          "type": "string"
        },
        "entity_id": {
          "description": "The specific instance of a page that you would like to target.",
          "type": "string"
        },
        "sort_order": {
          "description": "The sort order to control the position of a content widget in a region.",
          "type": "number",
          "format": "double"
        },
        "status": {
          "$ref": "#/definitions/Status"
        }
      },
      "required": [
        "widget_uuid",
        "region",
        "template_file"
      ]
    },
    "Status": {
      "title": "status",
      "example": "inactive",
      "x-enum-elements": [
        {
          "name": "inactive",
          "description": ""
        },
        {
          "name": "active",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "inactive",
        "active"
      ]
    },
    "PlacementPut": {
      "title": "PlacementPut",
      "type": "object",
      "properties": {
        "entity_id": {
          "description": "Optional. The specific instance of a page that you would like to target.",
          "type": "string"
        },
        "template_file": {
          "description": "The template file that you would like to target.",
          "type": "string"
        },
        "region": {
          "description": "The name of the region in which to insert content widgets.",
          "type": "string"
        },
        "sort_order": {
          "description": "The sort order to control the position of a content widget in a region.",
          "type": "number",
          "format": "double"
        },
        "widget_uuid": {
          "description": "A widget identifier.",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/Status"
        }
      }
    },
    "PlacementResponse": {
      "title": "PlacementResponse",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Placement"
        }
      }
    },
    "Placement": {
      "title": "Placement",
      "type": "object",
      "properties": {
        "uuid": {
          "description": "The primary identifier.",
          "type": "string"
        },
        "entity_id": {
          "description": "The specific instance of a page",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/Status"
        },
        "template_file": {
          "description": "The page template name.",
          "type": "string"
        },
        "region": {
          "description": "The user-friendly name.",
          "type": "string"
        },
        "sort_order": {
          "description": "The sort order to control position of a content widget in a region.",
          "type": "number",
          "format": "double"
        },
        "widget": {
          "$ref": "#/definitions/Widget"
        },
        "date_created": {
          "description": "The date on which this object was initially created.",
          "type": "string"
        },
        "date_modified": {
          "description": "The date on which this object was last updated.",
          "type": "string"
        }
      }
    },
    "PlacementsResponse": {
      "title": "PlacementsResponse",
      "type": "object",
      "properties": {
        "data": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Placement"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "Script": {
      "title": "Script",
      "type": "object",
      "properties": {
        "uuid": {
          "description": "The primary identifier.",
          "example": "2bf40be2-e57a-4bc8-860a-5bf45edd3795",
          "type": "string"
        },
        "name": {
          "description": "The user-friendly name.",
          "example": "jQuery",
          "type": "string"
        },
        "description": {
          "description": "The user-friendly description.",
          "example": "The Write Less, Do More, JavaScript Library.",
          "type": "string"
        },
        "html": {
          "description": "An html string containing exactly one `script` tag. Only present if `kind` is `script_tag`",
          "example": "<script src=\\\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\\\"></script>",
          "type": "string"
        },
        "src": {
          "description": "The `src` attribute of the script to load. Only present if `kind` is `src`.",
          "example": "https://code.jquery.com/jquery-3.2.1.min.js",
          "type": "string"
        },
        "auto_uninstall": {
          "description": "Whether to uninstall this script when the app associated with it is removed.",
          "example": true,
          "type": "boolean"
        },
        "load_method": {
          "$ref": "#/definitions/LoadMethod"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "visibility": {
          "$ref": "#/definitions/Visibility"
        },
        "kind": {
          "$ref": "#/definitions/Kind"
        },
        "api_client_id": {
          "description": "The client id of the API user that created this script, or blank if created by other means.",
          "example": "d1j42k5q76xsm15fa3g8sp2egytoixo",
          "type": "string"
        },
        "date_created": {
          "description": "The date on which this object was initially created.",
          "example": "12/5/2017 11:37:45 PM",
          "type": "string"
        },
        "date_modified": {
          "description": "The date on which this object was last updated.",
          "example": "12/5/2017 11:37:45 PM",
          "type": "string"
        }
      }
    },
    "LoadMethod": {
      "title": "load_method",
      "example": "default",
      "x-enum-elements": [
        {
          "name": "default",
          "description": ""
        },
        {
          "name": "async",
          "description": ""
        },
        {
          "name": "defer",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "default",
        "async",
        "defer"
      ]
    },
    "Location": {
      "title": "location",
      "example": "head",
      "x-enum-elements": [
        {
          "name": "head",
          "description": ""
        },
        {
          "name": "footer",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "head",
        "footer"
      ]
    },
    "Visibility": {
      "title": "visibility",
      "example": "storefront",
      "x-enum-elements": [
        {
          "name": "storefront",
          "description": ""
        },
        {
          "name": "all_pages",
          "description": ""
        },
        {
          "name": "checkout",
          "description": ""
        },
        {
          "name": "order_confirmation",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "storefront",
        "all_pages",
        "checkout",
        "order_confirmation"
      ]
    },
    "Kind": {
      "title": "kind",
      "example": "src",
      "x-enum-elements": [
        {
          "name": "src",
          "description": ""
        },
        {
          "name": "script_tag",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "src",
        "script_tag"
      ]
    },
    "ScriptPost": {
      "title": "ScriptPost",
      "type": "object",
      "properties": {
        "name": {
          "description": "The user-friendly name.",
          "example": "jQuery",
          "type": "string"
        },
        "description": {
          "description": "The user-friendly description.",
          "example": "The Write Less, Do More, JavaScript Library.",
          "type": "string"
        },
        "html": {
          "description": "An html string containing exactly one `script` tag. Required if `kind` is `script_tag`.",
          "example": "<script src=\\\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\\\"></script>",
          "type": "string"
        },
        "src": {
          "description": "The `src` attribute of the script to load. Required if `kind` is `src`. Must be in `https` format.",
          "example": "https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js",
          "type": "string"
        },
        "auto_uninstall": {
          "description": "Whether to uninstall this script when the app associated with it is removed.",
          "example": true,
          "type": "boolean"
        },
        "load_method": {
          "$ref": "#/definitions/LoadMethod"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "visibility": {
          "$ref": "#/definitions/Visibility"
        },
        "kind": {
          "$ref": "#/definitions/Kind34"
        }
      },
      "required": [
        "name"
      ]
    },
    "Kind34": {
      "title": "kind34",
      "example": "src",
      "x-enum-elements": [
        {
          "name": "src",
          "description": ""
        },
        {
          "name": "html",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "src",
        "html"
      ]
    },
    "ScriptPut": {
      "title": "ScriptPut",
      "type": "object",
      "properties": {
        "name": {
          "description": "The user-friendly name.",
          "example": "jQuery",
          "type": "string"
        },
        "description": {
          "description": "The user-friendly description.",
          "example": "The Write Less, Do More, JavaScript Library.",
          "type": "string"
        },
        "html": {
          "description": "An html string containing exactly one `script` tag. Required if `kind` is `script_tag`.",
          "example": "<script src=\\\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\\\"></script>",
          "type": "string"
        },
        "src": {
          "description": "The `src` attribute of the script to load. Required if `kind` is `src`. Must be in `https` format.",
          "example": "https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js",
          "type": "string"
        },
        "auto_uninstall": {
          "description": "Whether to uninstall this script when the app associated with it is removed.",
          "example": true,
          "type": "boolean"
        },
        "load_method": {
          "$ref": "#/definitions/LoadMethod"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "visibility": {
          "$ref": "#/definitions/Visibility"
        },
        "kind": {
          "$ref": "#/definitions/Kind34"
        }
      }
    },
    "ScriptResponse": {
      "title": "ScriptResponse",
      "example": {
        "data": {
          "uuid": "2bf40be2-e57a-4bc8-860a-5bf45edd3795",
          "name": "jQuery",
          "description": "The Write Less, Do More, JavaScript Library.",
          "html": "<script src=\\\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\\\"></script>",
          "src": "https://code.jquery.com/jquery-3.2.1.min.js",
          "auto_uninstall": true,
          "load_method": "default",
          "location": "head",
          "visibility": "storefront",
          "kind": "src",
          "api_client_id": "d1j42k5q76xsm15fa3g8sp2egytoixo",
          "date_created": "2017-12-05T23:37:45.506Z",
          "date_modified": "2017-12-05T23:37:45.506Z"
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Script"
        }
      }
    },
    "ScriptsResponse": {
      "title": "ScriptsResponse",
      "example": {
        "data": [
          {
            "uuid": "2bf40be2-e57a-4bc8-860a-5bf45edd3795",
            "name": "jQuery",
            "description": "The Write Less, Do More, JavaScript Library.",
            "html": "<script src=\\\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\\\"></script>",
            "src": "https://code.jquery.com/jquery-3.2.1.min.js",
            "auto_uninstall": true,
            "load_method": "default",
            "location": "head",
            "visibility": "storefront",
            "kind": "src",
            "api_client_id": "d1j42k5q76xsm15fa3g8sp2egytoixo",
            "date_created": "2017-12-05T23:37:45.506Z",
            "date_modified": "2017-12-05T23:37:45.506Z"
          }
        ],
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Script"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "ThemeRegion": {
      "title": "ThemeRegion",
      "type": "object",
      "properties": {
        "name": {
          "description": "The region name.",
          "example": "header_bottom",
          "type": "string"
        }
      }
    },
    "ThemeRegionsResponse": {
      "title": "ThemeRegionsResponse",
      "type": "object",
      "properties": {
        "data": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ThemeRegion"
          }
        },
        "meta": {
          "description": "Empty meta object; may be used later.",
          "type": "object"
        }
      }
    },
    "ModifierCollectionResponse": {
      "title": "ModifierCollectionResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": [
          {
            "type": "date",
            "required": true,
            "config": {
              "default_value": "text",
              "checked_by_default": false,
              "date_limit_mode": "earliest",
              "file_types_mode": "specific",
              "file_types_supported": [],
              "file_types_other": [],
              "text_min_length": 15,
              "text_max_length": 50,
              "text_lines_limited": true,
              "text_max_lines": 2,
              "number_limit_mode": "lowest",
              "product_list_adjusts_inventory": true,
              "product_list_adjusts_pricing": true,
              "product_list_shipping_calc": "none"
            },
            "option_values": [
              {
                "id": 22,
                "is_default": false,
                "label": "",
                "sort_order": 0,
                "value_data": {
                  "colors": [
                    "#123c91, #FFFF00, #397a44"
                  ]
                },
                "adjusters": {
                  "price": {
                    "adjuster": "relative",
                    "adjuster_value": 6
                  },
                  "weight": {
                    "adjuster": "relative",
                    "adjuster_value": 6
                  },
                  "purchasing_disabled": {
                    "status": true,
                    "message": "This product is not available for purchase."
                  }
                }
              }
            ],
            "id": 12,
            "name": "Gift Wrapping",
            "display_name": "Gift Wrapping"
          }
        ],
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Modifier"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "Modifier": {
      "title": "Modifier",
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/Type"
        },
        "required": {
          "description": "Whether or not this modifer is required or not at checkout.",
          "example": true,
          "type": "boolean"
        },
        "config": {
          "$ref": "#/definitions/OptionConfig"
        },
        "option_values": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModifierValue"
          }
        },
        "id": {
          "description": "The unique numeric ID of the modifier; increments sequentially.",
          "example": 12,
          "type": "number",
          "format": "double"
        },
        "product_id:": {
          "description": "The unique numeric ID of the product to which the option belongs.",
          "type": "number",
          "format": "double"
        },
        "name": {
          "description": "The unique option name. Auto-generated from the display name, a timestamp, and the product ID.",
          "example": "Gift Wrapping",
          "type": "string"
        },
        "display_name": {
          "description": "The name of the option shown on the storefront.",
          "example": "Gift Wrapping",
          "type": "string"
        }
      }
    },
    "Type": {
      "title": "type",
      "example": "date",
      "x-enum-elements": [
        {
          "name": "date",
          "description": ""
        },
        {
          "name": "checkbox",
          "description": ""
        },
        {
          "name": "file",
          "description": ""
        },
        {
          "name": "text",
          "description": ""
        },
        {
          "name": "multi_line_text",
          "description": ""
        },
        {
          "name": "numbers_only_text",
          "description": ""
        },
        {
          "name": "radio_buttons",
          "description": ""
        },
        {
          "name": "rectangles",
          "description": ""
        },
        {
          "name": "dropdown",
          "description": ""
        },
        {
          "name": "product_list",
          "description": ""
        },
        {
          "name": "product_list_with_images",
          "description": ""
        },
        {
          "name": "swatch",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "date",
        "checkbox",
        "file",
        "text",
        "multi_line_text",
        "numbers_only_text",
        "radio_buttons",
        "rectangles",
        "dropdown",
        "product_list",
        "product_list_with_images",
        "swatch"
      ]
    },
    "OptionConfig": {
      "title": "OptionConfig",
      "type": "object",
      "properties": {
        "default_value": {
          "description": "(date, text, multi_line_text, numbers_only_text) The default value. Shown on a date option as an ISO-8601–formatted string, or on a text option as a string.",
          "example": "text",
          "type": "string"
        },
        "checked_by_default": {
          "description": "(checkbox) Flag for setting the checkbox to be checked by default.",
          "example": false,
          "type": "boolean"
        },
        "checkbox_label": {
          "description": "(checkbox) Label displayed for the checkbox option.",
          "type": "string"
        },
        "date_limited": {
          "description": "(date) Flag to limit the dates allowed to be entered on a date option.",
          "type": "boolean"
        },
        "date_limit_mode": {
          "$ref": "#/definitions/DateLimitMode"
        },
        "date_earliest_value": {
          "description": "(date) The earliest date allowed to be entered on the date option, as an ISO-8601 formatted string.",
          "type": "string"
        },
        "date_latest_value": {
          "description": "(date) The latest date allowed to be entered on the date option, as an ISO-8601 formatted string.",
          "type": "string"
        },
        "file_types_mode": {
          "$ref": "#/definitions/FileTypesMode"
        },
        "file_types_supported": {
          "description": "(file) The type of files allowed to be uploaded if the `file_type_option` is set to `specific`. Values:\n`images` - Allows upload of image MIME types (`bmp`, `gif`, `jpg`, `jpeg`, `jpe`, `jif`, `jfif`, `jfi`, `png`, `wbmp`, `xbm`, `tiff`). `documents` - Allows upload of document MIME types (`txt`, `pdf`, `rtf`, `doc`, `docx`, `xls`, `xlsx`, `accdb`, `mdb`, `one`, `pps`, `ppsx`, `ppt`, `pptx`, `pub`, `odt`, `ods`, `odp`, `odg`, `odf`).\n`other` - Allows file types defined in the `file_types_other` array.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "file_types_other": {
          "description": "(file) A list of other file types allowed with the file upload option.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "file_max_size": {
          "description": "(file) The maximum size for a file that can be used with the file upload option.",
          "type": "number",
          "format": "double"
        },
        "text_characters_limited": {
          "description": "(text, multi_line_text) Flag to validate the length of a text or multi-line text input.",
          "type": "boolean"
        },
        "text_min_length": {
          "description": "(text, multi_line_text) The minimum length allowed for a text or multi-line text option.",
          "example": 15,
          "type": "number",
          "format": "double"
        },
        "text_max_length": {
          "description": "(text, multi_line_text) The maximum length allowed for a text or multi line text option.",
          "example": 50,
          "type": "number",
          "format": "double"
        },
        "text_lines_limited": {
          "description": "(multi_line_text) Flag to validate the maximum number of lines allowed on a multi-line text input.",
          "example": true,
          "type": "boolean"
        },
        "text_max_lines": {
          "description": "(multi_line_text) The maximum number of lines allowed on a multi-line text input.",
          "example": 2,
          "type": "number",
          "format": "double"
        },
        "number_limited": {
          "description": "(numbers_only_text) Flag to limit the value of a number option.",
          "type": "boolean"
        },
        "number_limit_mode": {
          "$ref": "#/definitions/NumberLimitMode"
        },
        "number_lowest_value": {
          "description": "(numbers_only_text) The lowest allowed value for a number option if `number_limited` is true.",
          "type": "number",
          "format": "double"
        },
        "number_highest_value": {
          "description": "(numbers_only_text) The highest allowed value for a number option if `number_limited` is true.",
          "type": "number",
          "format": "double"
        },
        "number_integers_only": {
          "description": "(numbers_only_text) Flag to limit the input on a number option to whole numbers only.",
          "type": "boolean"
        },
        "product_list_adjusts_inventory": {
          "description": "(product_list, product_list_with_images) Flag for automatically adjusting inventory on a product included in the list.",
          "example": true,
          "type": "boolean"
        },
        "product_list_adjusts_pricing": {
          "description": "(product_list, product_list_with_images) Flag to add the optional product's price to the main product's price.",
          "example": true,
          "type": "boolean"
        },
        "product_list_shipping_calc": {
          "$ref": "#/definitions/ProductListShippingCalc"
        }
      }
    },
    "DateLimitMode": {
      "title": "date_limit_mode",
      "example": "earliest",
      "x-enum-elements": [
        {
          "name": "earliest",
          "description": ""
        },
        {
          "name": "range",
          "description": ""
        },
        {
          "name": "latest",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "earliest",
        "range",
        "latest"
      ]
    },
    "FileTypesMode": {
      "title": "file_types_mode",
      "example": "specific",
      "x-enum-elements": [
        {
          "name": "specific",
          "description": ""
        },
        {
          "name": "all",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "specific",
        "all"
      ]
    },
    "NumberLimitMode": {
      "title": "number_limit_mode",
      "example": "lowest",
      "x-enum-elements": [
        {
          "name": "lowest",
          "description": ""
        },
        {
          "name": "highest",
          "description": ""
        },
        {
          "name": "range",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "lowest",
        "highest",
        "range"
      ]
    },
    "ProductListShippingCalc": {
      "title": "product_list_shipping_calc",
      "example": "none",
      "x-enum-elements": [
        {
          "name": "none",
          "description": ""
        },
        {
          "name": "weight",
          "description": ""
        },
        {
          "name": "package",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "none",
        "weight",
        "package"
      ]
    },
    "ModifierValue": {
      "title": "ModifierValue",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique numeric ID of the value; increments sequentially.",
          "example": 22,
          "type": "number",
          "format": "double"
        },
        "is_default": {
          "description": "The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers",
          "type": "boolean"
        },
        "label": {
          "description": "The text display identifying the value on the storefront.",
          "type": "string"
        },
        "sort_order": {
          "description": "The order in which the value will be displayed on the product page.",
          "type": "number",
          "format": "double"
        },
        "value_data": {
          "$ref": "#/definitions/ValueData"
        },
        "adjusters": {
          "$ref": "#/definitions/Adjusters"
        }
      }
    },
    "ValueData": {
      "title": "ValueData",
      "type": "object",
      "properties": {
        "colors": {
          "description": "Sample colors array",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Adjusters": {
      "title": "Adjusters",
      "type": "object",
      "properties": {
        "price": {
          "$ref": "#/definitions/Adjuster"
        },
        "weight": {
          "$ref": "#/definitions/Adjuster"
        },
        "image_url": {
          "description": "The URL for an image displayed on the storefront when the modifier value is selected.",
          "type": "string"
        },
        "purchasing_disabled": {
          "$ref": "#/definitions/PurchasingDisabled"
        }
      }
    },
    "Adjuster": {
      "title": "Adjuster",
      "type": "object",
      "properties": {
        "adjuster": {
          "$ref": "#/definitions/Adjuster56"
        },
        "adjuster_value": {
          "description": "The numeric amount by which the adjuster will change either the price or the weight of the variant, when the modifier value is selected on the storefront.",
          "example": 6,
          "type": "number",
          "format": "double"
        }
      }
    },
    "Adjuster56": {
      "title": "adjuster56",
      "example": "relative",
      "x-enum-elements": [
        {
          "name": "relative",
          "description": ""
        },
        {
          "name": "percentage",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "relative",
        "percentage"
      ]
    },
    "PurchasingDisabled": {
      "title": "PurchasingDisabled",
      "type": "object",
      "properties": {
        "status": {
          "description": "Flag for whether the modifier value disables purchasing when selected on the storefront. This can be used for temporarily disabling a particular modifier value.",
          "example": true,
          "type": "boolean"
        },
        "message": {
          "description": "The message displayed on the storefront when the purchasing disabled status is `true`.",
          "example": "This product is not available for purchase.",
          "type": "string"
        }
      }
    },
    "ModifierResponse": {
      "title": "ModifierResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": {
          "type": "date",
          "required": true,
          "config": {
            "default_value": "text",
            "checked_by_default": false,
            "date_limit_mode": "earliest",
            "file_types_mode": "specific",
            "file_types_supported": [],
            "file_types_other": [],
            "text_min_length": 15,
            "text_max_length": 50,
            "text_lines_limited": true,
            "text_max_lines": 2,
            "number_limit_mode": "lowest",
            "product_list_adjusts_inventory": true,
            "product_list_adjusts_pricing": true,
            "product_list_shipping_calc": "none"
          },
          "option_values": [
            {
              "id": 22,
              "is_default": false,
              "label": "",
              "sort_order": 0,
              "value_data": {
                "colors": [
                  "#123c91, #FFFF00, #397a44"
                ]
              },
              "adjusters": {
                "price": {
                  "adjuster": "relative",
                  "adjuster_value": 6
                },
                "weight": {
                  "adjuster": "relative",
                  "adjuster_value": 6
                },
                "purchasing_disabled": {
                  "status": true,
                  "message": "This product is not available for purchase."
                }
              }
            }
          ],
          "id": 12,
          "name": "Gift Wrapping",
          "display_name": "Gift Wrapping"
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Modifier"
        },
        "meta": {
          "description": "Empty meta object; may be used later.",
          "type": "object"
        }
      }
    },
    "ModifierBase": {
      "title": "ModifierBase",
      "description": "Common Modifier properties.",
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/Type"
        },
        "required": {
          "description": "Whether or not this modifer is required or not at checkout.",
          "example": true,
          "type": "boolean"
        },
        "config": {
          "$ref": "#/definitions/OptionConfig"
        },
        "option_values": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModifierValue"
          }
        }
      }
    },
    "ModifierPost": {
      "title": "ModifierPost",
      "description": "The model for a POST to create a modifier on a product.",
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/Type"
        },
        "required": {
          "description": "Whether or not this modifer is required or not at checkout.",
          "example": true,
          "type": "boolean"
        },
        "display_name": {
          "description": "The name of the option shown on the storefront.",
          "type": "string"
        },
        "config": {
          "$ref": "#/definitions/OptionConfig"
        },
        "option_values": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModifierValue"
          }
        }
      },
      "required": [
        "type",
        "required",
        "display_name"
      ]
    },
    "ModifierPut": {
      "title": "ModifierPut",
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/Type"
        },
        "required": {
          "description": "Whether or not this modifer is required or not at checkout.",
          "example": true,
          "type": "boolean"
        },
        "config": {
          "$ref": "#/definitions/OptionConfig"
        },
        "option_values": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModifierValue"
          }
        }
      }
    },
    "ModifierValueCollectionResponse": {
      "title": "ModifierValueCollectionResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": [
          {
            "id": 22,
            "is_default": false,
            "label": "",
            "sort_order": 0,
            "value_data": {
              "colors": [
                "#123c91, #FFFF00, #397a44"
              ]
            },
            "adjusters": {
              "price": {
                "adjuster": "relative",
                "adjuster_value": 6
              },
              "weight": {
                "adjuster": "relative",
                "adjuster_value": 6
              },
              "purchasing_disabled": {
                "status": true,
                "message": "This product is not available for purchase."
              }
            }
          }
        ],
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModifierValue"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "ModifierValueResponse": {
      "title": "ModifierValueResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": {
          "id": 22,
          "is_default": false,
          "label": "",
          "sort_order": 0,
          "value_data": {
            "colors": [
              "#123c91, #FFFF00, #397a44"
            ]
          },
          "adjusters": {
            "price": {
              "adjuster": "relative",
              "adjuster_value": 6
            },
            "weight": {
              "adjuster": "relative",
              "adjuster_value": 6
            },
            "purchasing_disabled": {
              "status": true,
              "message": "This product is not available for purchase."
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ModifierValue"
        },
        "meta": {
          "description": "Empty meta object; may be used later.",
          "type": "object"
        }
      }
    },
    "ModifierValueBase": {
      "title": "ModifierValueBase",
      "type": "object",
      "properties": {
        "label": {
          "description": "The text display identifying the value on the storefront.",
          "example": "Check here for gift wrapping",
          "type": "string"
        },
        "sort_order": {
          "description": "The order in which the value will be displayed on the product page.",
          "example": 3,
          "type": "number",
          "format": "double"
        },
        "is_default": {
          "description": "The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.",
          "example": true,
          "type": "boolean"
        },
        "value_data": {
          "$ref": "#/definitions/ValueData"
        },
        "adjusters": {
          "$ref": "#/definitions/Adjusters"
        }
      },
      "required": [
        "label",
        "sort_order"
      ]
    },
    "ModifierValuePost": {
      "title": "ModifierValuePost",
      "type": "object",
      "properties": {
        "is_default": {
          "description": "The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers",
          "type": "boolean"
        },
        "label": {
          "description": "The text display identifying the value on the storefront.",
          "type": "string"
        },
        "sort_order": {
          "description": "The order in which the value will be displayed on the product page.",
          "type": "number",
          "format": "double"
        },
        "value_data": {
          "$ref": "#/definitions/ValueData"
        },
        "adjusters": {
          "$ref": "#/definitions/Adjusters"
        }
      }
    },
    "ModifierValuePut": {
      "title": "ModifierValuePut",
      "description": "The model for a PUT to update a modifier value on a product.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique numeric ID of the value; increments sequentially.",
          "example": 22,
          "type": "number",
          "format": "double"
        },
        "is_default": {
          "description": "The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers",
          "type": "boolean"
        },
        "label": {
          "description": "The text display identifying the value on the storefront.",
          "type": "string"
        },
        "sort_order": {
          "description": "The order in which the value will be displayed on the product page.",
          "type": "number",
          "format": "double"
        },
        "value_data": {
          "$ref": "#/definitions/ValueData"
        },
        "adjusters": {
          "$ref": "#/definitions/Adjusters"
        }
      }
    },
    "OptionCollectionResponse": {
      "title": "OptionCollectionResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": [
          {
            "id": 77,
            "product_id": 112,
            "display_name": "Colors",
            "type": "radio_buttons",
            "config": {
              "default_value": "text",
              "checked_by_default": false,
              "date_limit_mode": "earliest",
              "file_types_mode": "specific",
              "file_types_supported": [],
              "file_types_other": [],
              "text_min_length": 15,
              "text_max_length": 50,
              "text_lines_limited": true,
              "text_max_lines": 2,
              "number_limit_mode": "lowest",
              "product_list_adjusts_inventory": true,
              "product_list_adjusts_pricing": true,
              "product_list_shipping_calc": "none"
            },
            "option_values": [
              {
                "id": 44,
                "label": "Pick a color",
                "sort_order": 9,
                "value_data": {
                  "colors": [
                    "#123c91, #FFFF00, #397a44"
                  ]
                },
                "is_default": false
              }
            ]
          }
        ],
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Option"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "Option": {
      "title": "Option",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique numerical ID of the option, increments sequentially.",
          "example": 77,
          "type": "number",
          "format": "double"
        },
        "product_id": {
          "description": "The unique numerical ID of the product to which the option belongs.",
          "example": 112,
          "type": "number",
          "format": "double"
        },
        "display_name": {
          "description": "The name of the option shown on the storefront.",
          "example": "Colors",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/Type72"
        },
        "config": {
          "$ref": "#/definitions/OptionConfig"
        },
        "option_values": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OptionValue"
          }
        },
        "name": {
          "description": "The unique option name, auto-generated from the display name, a timestamp, and the product ID.",
          "type": "string"
        }
      }
    },
    "Type72": {
      "title": "type72",
      "example": "radio_buttons",
      "x-enum-elements": [
        {
          "name": "radio_buttons",
          "description": ""
        },
        {
          "name": "rectangles",
          "description": ""
        },
        {
          "name": "dropdown",
          "description": ""
        },
        {
          "name": "product_list",
          "description": ""
        },
        {
          "name": "product_list_with_images",
          "description": ""
        },
        {
          "name": "swatch",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "radio_buttons",
        "rectangles",
        "dropdown",
        "product_list",
        "product_list_with_images",
        "swatch"
      ]
    },
    "OptionValue": {
      "title": "OptionValue",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique numeric ID of the value; increments sequentially.",
          "example": 44,
          "type": "number",
          "format": "double"
        },
        "label": {
          "description": "The text display identifying the value on the storefront.",
          "example": "Pick a color",
          "type": "string"
        },
        "sort_order": {
          "description": "The order in which the value will be displayed on the product page.",
          "example": 9,
          "type": "number",
          "format": "double"
        },
        "value_data": {
          "$ref": "#/definitions/ValueData"
        },
        "is_default": {
          "description": "The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.",
          "example": false,
          "type": "boolean"
        }
      }
    },
    "OptionResponse": {
      "title": "OptionResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": {
          "id": 77,
          "product_id": 112,
          "display_name": "Colors",
          "type": "radio_buttons",
          "config": {
            "default_value": "text",
            "checked_by_default": false,
            "date_limit_mode": "earliest",
            "file_types_mode": "specific",
            "file_types_supported": [],
            "file_types_other": [],
            "text_min_length": 15,
            "text_max_length": 50,
            "text_lines_limited": true,
            "text_max_lines": 2,
            "number_limit_mode": "lowest",
            "product_list_adjusts_inventory": true,
            "product_list_adjusts_pricing": true,
            "product_list_shipping_calc": "none"
          },
          "option_values": [
            {
              "id": 44,
              "label": "Pick a color",
              "sort_order": 9,
              "value_data": {
                "colors": [
                  "#123c91, #FFFF00, #397a44"
                ]
              },
              "is_default": false
            }
          ]
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Option"
        },
        "meta": {
          "description": "Empty meta object; may be used later.",
          "type": "object"
        }
      }
    },
    "OptionBase": {
      "title": "OptionBase",
      "description": "Common Option properties.",
      "type": "object",
      "properties": {
        "display_name": {
          "description": "The name of the option shown on the storefront.",
          "example": "Colors",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/Type72"
        },
        "option_values": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OptionValue"
          }
        },
        "id": {
          "description": "The unique numerical ID of the option, increments sequentially.",
          "example": 22,
          "type": "number",
          "format": "double"
        },
        "product_id": {
          "description": "The unique numerical ID of the product to which the option belongs.",
          "example": 77,
          "type": "number",
          "format": "double"
        },
        "config": {
          "$ref": "#/definitions/OptionConfig"
        }
      },
      "required": [
        "display_name",
        "type",
        "option_values"
      ]
    },
    "OptionBasePUT": {
      "title": "OptionBasePUT",
      "description": "Common Option properties.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique numerical ID of the option, increments sequentially.",
          "example": 22,
          "type": "number",
          "format": "double"
        },
        "product_id": {
          "description": "The unique numerical ID of the product to which the option belongs.",
          "example": 77,
          "type": "number",
          "format": "double"
        },
        "display_name": {
          "description": "The name of the option shown on the storefront.",
          "example": "Colors",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/Type72"
        },
        "config": {
          "$ref": "#/definitions/OptionConfig"
        },
        "option_values": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OptionValue"
          }
        }
      }
    },
    "CategoryTreeCollectionResponse": {
      "title": "CategoryTreeCollectionResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": [
          {
            "id": 26,
            "parent_id": 25,
            "name": "Bath",
            "is_visible": true,
            "url": "/towels/bath-towels/"
          }
        ],
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CategoryNode"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "CategoryNode": {
      "title": "CategoryNode",
      "description": "A BigCommerce category node object. Used to reflect parent <> child category relationships.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique numeric ID of the category; increments sequentially.",
          "example": 26,
          "type": "number",
          "format": "double"
        },
        "parent_id": {
          "description": "The unique numeric ID of the category's parent. This field controls where the category sits in the tree of categories that organize the catalog.",
          "example": 25,
          "type": "number",
          "format": "double"
        },
        "name": {
          "description": "The name displayed for the category. Name is unique with respect to the category's siblings.",
          "example": "Bath",
          "type": "string"
        },
        "is_visible": {
          "description": "Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view.",
          "example": true,
          "type": "boolean"
        },
        "url": {
          "description": "The custom URL for the category on the storefront.",
          "example": "/towels/bath-towels/",
          "type": "string"
        }
      }
    },
    "CategoryCollectionResponse": {
      "title": "CategoryCollectionResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": [
          {
            "parent_id": 25,
            "name": "Bath",
            "description": "<p>We offer a wide variety of products perfect for relaxing</p>",
            "views": 1050,
            "sort_order": 3,
            "meta_keywords": [],
            "layout_file": "category.html",
            "is_visible": true,
            "default_product_sort": "use_store_settings",
            "image_url": "https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png",
            "custom_url": {
              "url": "/bath/",
              "is_customized": false
            },
            "id": 18
          }
        ],
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Category"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "Category": {
      "title": "Category",
      "type": "object",
      "properties": {
        "parent_id": {
          "description": "The unique numeric ID of the category's parent. This field controls where the category sits in the tree of categories that organize the catalog.",
          "example": 25,
          "type": "number",
          "format": "double"
        },
        "name": {
          "description": "The name displayed for the category. Name is unique with respect to the category's siblings.",
          "example": "Bath",
          "type": "string"
        },
        "description": {
          "description": "The product description, which can include HTML formatting.",
          "example": "<p>We offer a wide variety of products perfect for relaxing</p>",
          "type": "string"
        },
        "views": {
          "description": "Number of views the category has on the storefront.",
          "example": 1050,
          "type": "number",
          "format": "double"
        },
        "sort_order": {
          "description": "Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be.",
          "example": 3,
          "type": "number",
          "format": "double"
        },
        "page_title": {
          "description": "Custom title for the category page. If not defined, the category name will be used as the meta title.",
          "type": "string"
        },
        "search_keywords": {
          "description": "A comma-separated list of keywords that can be used to locate the category when searching the store.",
          "type": "string"
        },
        "meta_keywords": {
          "description": "Custom meta keywords for the category page. If not defined, the store's default keywords will be used. Must post as an array like: [\"awesome\",\"sauce\"].",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "meta_description": {
          "description": "Custom meta description for the category page. If not defined, the store's default meta description will be used.",
          "type": "string"
        },
        "layout_file": {
          "description": "The layout template file used to render this category.",
          "example": "category.html",
          "type": "string"
        },
        "is_visible": {
          "description": "Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view.",
          "example": true,
          "type": "boolean"
        },
        "default_product_sort": {
          "$ref": "#/definitions/DefaultProductSort"
        },
        "image_url": {
          "description": "Image URL used for this category on the storefront. Images can be uploaded via form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field.",
          "example": "https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png",
          "type": "string"
        },
        "custom_url": {
          "$ref": "#/definitions/CustomUrlCategory"
        },
        "id": {
          "description": "The unique numeric ID of the category; increments sequentially.",
          "example": 18,
          "type": "number",
          "format": "double"
        }
      }
    },
    "DefaultProductSort": {
      "title": "default_product_sort",
      "example": "use_store_settings",
      "x-enum-elements": [
        {
          "name": "use_store_settings",
          "description": ""
        },
        {
          "name": "featured",
          "description": ""
        },
        {
          "name": "newest",
          "description": ""
        },
        {
          "name": "best_selling",
          "description": ""
        },
        {
          "name": "alpha_asc",
          "description": ""
        },
        {
          "name": "alpha_desc",
          "description": ""
        },
        {
          "name": "avg_customer_review",
          "description": ""
        },
        {
          "name": "price_asc",
          "description": ""
        },
        {
          "name": "price_desc",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "use_store_settings",
        "featured",
        "newest",
        "best_selling",
        "alpha_asc",
        "alpha_desc",
        "avg_customer_review",
        "price_asc",
        "price_desc"
      ]
    },
    "CustomUrlCategory": {
      "title": "CustomUrlCategory",
      "type": "object",
      "properties": {
        "url": {
          "description": "Category URL on the storefront.",
          "example": "/bath/",
          "type": "string"
        },
        "is_customized": {
          "description": "Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).",
          "example": false,
          "type": "boolean"
        }
      }
    },
    "CategoryResponse": {
      "title": "CategoryResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": {
          "parent_id": 25,
          "name": "Bath",
          "description": "<p>We offer a wide variety of products perfect for relaxing</p>",
          "views": 1050,
          "sort_order": 3,
          "meta_keywords": [],
          "layout_file": "category.html",
          "is_visible": true,
          "default_product_sort": "use_store_settings",
          "image_url": "https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png",
          "custom_url": {
            "url": "/bath/",
            "is_customized": false
          },
          "id": 18
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Category"
        },
        "meta": {
          "description": "Empty meta object; may be used later.",
          "type": "object"
        }
      }
    },
    "CategoryBase": {
      "title": "CategoryBase",
      "description": "Common Category properties.",
      "type": "object",
      "properties": {
        "parent_id": {
          "description": "The unique numeric ID of the category's parent. This field controls where the category sits in the tree of categories that organize the catalog.",
          "example": 25,
          "type": "number",
          "format": "double"
        },
        "name": {
          "description": "The name displayed for the category. Name is unique with respect to the category's siblings.",
          "example": "Bath",
          "type": "string"
        },
        "description": {
          "description": "The product description, which can include HTML formatting.",
          "example": "<p>We offer a wide variety of products perfect for relaxing</p>",
          "type": "string"
        },
        "views": {
          "description": "Number of views the category has on the storefront.",
          "example": 1050,
          "type": "number",
          "format": "double"
        },
        "sort_order": {
          "description": "Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be.",
          "example": 3,
          "type": "number",
          "format": "double"
        },
        "page_title": {
          "description": "Custom title for the category page. If not defined, the category name will be used as the meta title.",
          "type": "string"
        },
        "search_keywords": {
          "description": "A comma-separated list of keywords that can be used to locate the category when searching the store.",
          "type": "string"
        },
        "meta_keywords": {
          "description": "Custom meta keywords for the category page. If not defined, the store's default keywords will be used. Must post as an array like: [\"awesome\",\"sauce\"].",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "meta_description": {
          "description": "Custom meta description for the category page. If not defined, the store's default meta description will be used.",
          "type": "string"
        },
        "layout_file": {
          "description": "The layout template file used to render this category.",
          "example": "category.html",
          "type": "string"
        },
        "is_visible": {
          "description": "Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view.",
          "example": true,
          "type": "boolean"
        },
        "default_product_sort": {
          "$ref": "#/definitions/DefaultProductSort"
        },
        "image_url": {
          "description": "Image URL used for this category on the storefront. Images can be uploaded via form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field.",
          "example": "https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png",
          "type": "string"
        },
        "custom_url": {
          "$ref": "#/definitions/CustomUrlCategory"
        }
      }
    },
    "CategoryBasePOST": {
      "title": "CategoryBasePOST",
      "description": "Common Category properties.",
      "type": "object",
      "properties": {
        "parent_id": {
          "description": "The unique numeric ID of the category's parent. This field controls where the category sits in the tree of categories that organize the catalog.",
          "example": 25,
          "type": "number",
          "format": "double"
        },
        "name": {
          "description": "The name displayed for the category. Name is unique with respect to the category's siblings.",
          "example": "Bath",
          "type": "string"
        },
        "description": {
          "description": "The product description, which can include HTML formatting.",
          "example": "<p>We offer a wide variety of products perfect for relaxing</p>",
          "type": "string"
        },
        "views": {
          "description": "Number of views the category has on the storefront.",
          "example": 1050,
          "type": "number",
          "format": "double"
        },
        "sort_order": {
          "description": "Priority this category will be given when included in the menu and category pages. The lower the number, the closer to the top of the results the category will be.",
          "example": 3,
          "type": "number",
          "format": "double"
        },
        "page_title": {
          "description": "Custom title for the category page. If not defined, the category name will be used as the meta title.",
          "type": "string"
        },
        "search_keywords": {
          "description": "A comma-separated list of keywords that can be used to locate the category when searching the store.",
          "type": "string"
        },
        "meta_keywords": {
          "description": "Custom meta keywords for the category page. If not defined, the store's default keywords will be used. Must post as an array like: [\"awesome\",\"sauce\"].",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "meta_description": {
          "description": "Custom meta description for the category page. If not defined, the store's default meta description will be used.",
          "type": "string"
        },
        "layout_file": {
          "description": "The layout template file used to render this category.",
          "example": "category.html",
          "type": "string"
        },
        "is_visible": {
          "description": "Flag to determine whether the product should be displayed to customers browsing the store. If `true`, the category will be displayed. If `false`, the category will be hidden from view.",
          "example": true,
          "type": "boolean"
        },
        "default_product_sort": {
          "$ref": "#/definitions/DefaultProductSort"
        },
        "image_url": {
          "description": "Image URL used for this category on the storefront. Images can be uploaded via form file post to `/categories/{categoryId}/image`, or by providing a publicly accessible URL in this field.",
          "example": "https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png",
          "type": "string"
        },
        "custom_url": {
          "$ref": "#/definitions/CustomUrlCategory"
        }
      },
      "required": [
        "parent_id",
        "name"
      ]
    },
    "BrandCollectionResponse": {
      "title": "BrandCollectionResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": [
          {
            "name": "Common Good",
            "meta_keywords": [
              "modern, clean, contemporary"
            ],
            "meta_description": "Common Good is a modern brand.",
            "search_keywords": "kitchen, laundry, cart, storage",
            "custom_url": {
              "url": "/brands/Common-Good.html",
              "is_customized": false
            },
            "id": 37
          }
        ],
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Brand"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "Brand": {
      "title": "Brand",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the brand. Must be unique.",
          "example": "Common Good",
          "type": "string"
        },
        "page_title": {
          "description": "The title shown in the browser while viewing the brand.",
          "type": "string"
        },
        "meta_keywords": {
          "description": "Comma-separated list of meta keywords to include in the HTML.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "meta_description": {
          "description": "A meta description to include.",
          "example": "Common Good is a modern brand.",
          "type": "string"
        },
        "search_keywords": {
          "description": "A comma-separated list of keywords that can be used to locate this brand.",
          "example": "kitchen, laundry, cart, storage",
          "type": "string"
        },
        "image_url": {
          "description": "Image URL used for this brand on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.",
          "type": "string"
        },
        "custom_url": {
          "$ref": "#/definitions/CustomUrlBrand"
        },
        "id": {
          "description": "The unique numeric ID of the brand; increments sequentially. Readme only.",
          "example": 37,
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "name"
      ]
    },
    "CustomUrlBrand": {
      "title": "CustomUrlBrand",
      "type": "object",
      "properties": {
        "url": {
          "description": "Brand URL on the storefront.",
          "example": "/brands/Common-Good.html",
          "type": "string"
        },
        "is_customized": {
          "description": "Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).",
          "example": false,
          "type": "boolean"
        }
      }
    },
    "BrandResponse": {
      "title": "BrandResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": {
          "name": "Common Good",
          "meta_keywords": [
            "modern, clean, contemporary"
          ],
          "meta_description": "Common Good is a modern brand.",
          "search_keywords": "kitchen, laundry, cart, storage",
          "custom_url": {
            "url": "/brands/Common-Good.html",
            "is_customized": false
          },
          "id": 37
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Brand"
        },
        "meta": {
          "description": "Empty meta object; may be used later.",
          "type": "object"
        }
      }
    },
    "BrandBase": {
      "title": "BrandBase",
      "description": "Common Brand properties.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the brand. Must be unique.",
          "example": "Common Good",
          "type": "string"
        },
        "page_title": {
          "description": "The title shown in the browser while viewing the brand.",
          "type": "string"
        },
        "meta_keywords": {
          "description": "Comma-separated list of meta keywords to include in the HTML.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "meta_description": {
          "description": "A meta description to include.",
          "type": "string"
        },
        "search_keywords": {
          "description": "A comma-separated list of keywords that can be used to locate this brand.",
          "type": "string"
        },
        "image_url": {
          "description": "Image URL used for this brand on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.",
          "example": "https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png",
          "type": "string"
        },
        "custom_url": {
          "$ref": "#/definitions/CustomUrlBrand"
        }
      },
      "required": [
        "name"
      ]
    },
    "BrandPut": {
      "title": "BrandPut",
      "description": "The model for a PUT to update brand.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the brand. Must be unique.",
          "example": "Common Good",
          "type": "string"
        },
        "page_title": {
          "description": "The title shown in the browser while viewing the brand.",
          "example": "Common Good",
          "type": "string"
        },
        "meta_keywords": {
          "description": "Comma-separated list of meta keywords to include in the HTML.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "meta_description": {
          "description": "A meta description to include.",
          "example": "Common Good is a modern brand.",
          "type": "string"
        },
        "search_keywords": {
          "description": "A comma-separated list of keywords that can be used to locate this brand.",
          "example": "kitchen, laundry, cart, storage",
          "type": "string"
        },
        "image_url": {
          "description": "Image URL used for this brand on the storefront. Images can be uploaded via form file post to `/brands/{brandId}/image`, or by providing a publicly accessible URL in this field.",
          "example": "\"https://cdn8.bigcommerce.com/s-12345/product_images/k/your-image-name.png",
          "type": "string"
        },
        "custom_url": {
          "$ref": "#/definitions/CustomUrlBrand"
        },
        "id": {
          "description": "The unique numeric ID of the brand; increments sequentially.",
          "type": "number",
          "format": "double"
        }
      }
    },
    "SubscriberCollectionResponse": {
      "title": "SubscriberCollectionResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": [
          {
            "id": 1,
            "email": "testing@bigcommerce.com",
            "first_name": "Jane",
            "last_name": "Doe",
            "source": "storefront",
            "date_modified": "2018-05-07T17:46:40+00:00",
            "date_created": "2018-05-07T17:46:40+00:00"
          }
        ],
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Subscriber"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "Subscriber": {
      "title": "Subscriber",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique numeric ID of the subscriber; increments sequentially.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "email": {
          "description": "The email of the subscriber. Must be unique.",
          "example": "testing@bigcommerce.com",
          "type": "string"
        },
        "first_name": {
          "description": "The first name of the subscriber.",
          "example": "Jane",
          "type": "string"
        },
        "last_name": {
          "description": "The last name of the subscriber.",
          "example": "Doe",
          "type": "string"
        },
        "source": {
          "description": "The source of the subscriber. Values are: `storefront`, `order`, or `custom`.",
          "example": "storefront",
          "type": "string"
        },
        "order_id": {
          "description": "The ID of the source order, if source was an order.",
          "type": "number",
          "format": "double"
        },
        "date_modified": {
          "description": "The date on which the subscriber was modified.",
          "example": "5/7/2018 5:46:40 PM",
          "type": "string"
        },
        "date_created": {
          "description": "The date of which the subscriber was created.",
          "example": "5/7/2018 5:46:40 PM",
          "type": "string"
        }
      }
    },
    "SubscriberResponse": {
      "title": "SubscriberResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": {
          "id": 1,
          "email": "testing@bigcommerce.com",
          "first_name": "Jane",
          "last_name": "Doe",
          "source": "storefront",
          "date_modified": "2018-05-07T17:46:40+00:00",
          "date_created": "2018-05-07T17:46:40+00:00"
        },
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Subscriber"
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "SubscriberBase": {
      "title": "SubscriberBase",
      "description": "Common Subscriber properties.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique numeric ID of the subscriber; increments sequentially.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "email": {
          "description": "The email of the subscriber. Must be unique.",
          "example": "testing@bigcommerce.com",
          "type": "string"
        },
        "first_name": {
          "description": "The first name of the subscriber.",
          "example": "Jane",
          "type": "string"
        },
        "last_name": {
          "description": "The last name of the subscriber.",
          "example": "Doe",
          "type": "string"
        },
        "source": {
          "description": "The source of the subscriber. Values are: `storefront`, `order`, or `custom`.",
          "example": "storefront",
          "type": "string"
        },
        "order_id": {
          "description": "The ID of the source order, if source was an order.",
          "type": "number",
          "format": "double"
        }
      }
    },
    "SubscriberBasePOST": {
      "title": "SubscriberBasePOST",
      "description": "Common Subscriber properties.",
      "type": "object",
      "properties": {
        "email": {
          "description": "The email of the subscriber. Must be unique.",
          "example": "testing@bigcommerce.com",
          "type": "string"
        },
        "id": {
          "description": "The unique numeric ID of the subscriber; increments sequentially.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "first_name": {
          "description": "The first name of the subscriber.",
          "example": "Jane",
          "type": "string"
        },
        "last_name": {
          "description": "The last name of the subscriber.",
          "example": "Doe",
          "type": "string"
        },
        "source": {
          "description": "The source of the subscriber. Values are: `storefront`, `order`, or `custom`.",
          "example": "storefront",
          "type": "string"
        },
        "order_id": {
          "description": "The ID of the source order, if source was an order.",
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "email"
      ]
    },
    "VariantCollectionResponse": {
      "title": "VariantCollectionResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": [
          {
            "cost_price": 12,
            "price": 14,
            "weight": 22,
            "width": 40,
            "height": 100,
            "depth": 4,
            "is_free_shipping": false,
            "purchasing_disabled": false,
            "inventory_level": 50,
            "inventory_warning_level": 10,
            "id": 156,
            "product_id": 77,
            "sku": "M-ORAN-1",
            "sku_id": 197,
            "option_values": [
              {
                "option_display_name": "Color",
                "label": "Color",
                "id": 107,
                "option_id": 124
              }
            ],
            "calculated_price": 49.99
          }
        ],
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variant"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "Variant": {
      "title": "Variant",
      "type": "object",
      "properties": {
        "cost_price": {
          "description": "The cost price of the variant. Not affected by Price List prices.",
          "example": 12,
          "type": "number",
          "format": "double"
        },
        "price": {
          "description": "This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price.",
          "example": 14,
          "type": "number",
          "format": "double"
        },
        "sale_price": {
          "description": "This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price.",
          "type": "number",
          "format": "double"
        },
        "retail_price": {
          "description": "This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price.",
          "type": "number",
          "format": "double"
        },
        "weight": {
          "description": "This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight.",
          "example": 22,
          "type": "number",
          "format": "double"
        },
        "width": {
          "description": "Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width.",
          "example": 40,
          "type": "number",
          "format": "double"
        },
        "height": {
          "description": "Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height.",
          "example": 100,
          "type": "number",
          "format": "double"
        },
        "depth": {
          "description": "Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth.",
          "example": 4,
          "type": "number",
          "format": "double"
        },
        "is_free_shipping": {
          "description": "Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero.",
          "example": false,
          "type": "boolean"
        },
        "fixed_cost_shipping_price": {
          "description": "A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.",
          "type": "number",
          "format": "double"
        },
        "purchasing_disabled": {
          "description": "If `true`, this variant will not be purchasable on the storefront.",
          "example": false,
          "type": "boolean"
        },
        "purchasing_disabled_message": {
          "description": "If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected.",
          "type": "string"
        },
        "image_url": {
          "description": "The image that will be displayed when this variant is selected on the storefront. When updating a SKU image, send the publicly accessible URL. Supported image formats are JPEG, PNG, and GIF. Generic product images not specific to the variant should be stored on the product.",
          "type": "string"
        },
        "upc": {
          "description": "The UPC code used in feeds for shopping comparison sites and external channel integrations.",
          "type": "string"
        },
        "inventory_level": {
          "description": "Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`.",
          "example": 50,
          "type": "number",
          "format": "double"
        },
        "inventory_warning_level": {
          "description": "When the variant hits this inventory level, it is considered low stock.",
          "example": 10,
          "type": "number",
          "format": "double"
        },
        "bin_picking_number": {
          "description": "Identifies where in a warehouse the variant is located.",
          "type": "string"
        },
        "id": {
          "description": "",
          "example": 156,
          "type": "number",
          "format": "double"
        },
        "product_id": {
          "description": "",
          "example": 77,
          "type": "number",
          "format": "double"
        },
        "sku": {
          "description": "",
          "example": "M-ORAN-1",
          "type": "string"
        },
        "sku_id": {
          "description": "Read-only reference to v2 API's SKU ID. Null if it is a base variant.",
          "example": 197,
          "type": "number",
          "format": "double"
        },
        "option_values": {
          "description": "Array of option and option values IDs that make up this variant. Will be empty if the variant is the product's base variant.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OptionValueVariant"
          }
        },
        "calculated_price": {
          "description": "The price of the variant as seen on the storefront. This price takes into account `sale_price` and any price adjustment rules that are applicable to this variant.",
          "example": 49.99,
          "type": "number",
          "format": "double"
        }
      }
    },
    "OptionValueVariant": {
      "title": "OptionValueVariant",
      "type": "object",
      "properties": {
        "option_display_name": {
          "description": "The name of the option.",
          "example": "Color",
          "type": "string"
        },
        "label": {
          "description": "The label of the option value.",
          "example": "Color",
          "type": "string"
        },
        "id": {
          "description": "",
          "example": 107,
          "type": "number",
          "format": "double"
        },
        "option_id": {
          "description": "",
          "example": 124,
          "type": "number",
          "format": "double"
        }
      }
    },
    "VariantResponse": {
      "title": "VariantResponse",
      "description": "Successful response.",
      "example": {
        "data": {
          "cost_price": 12,
          "price": 14,
          "weight": 22,
          "width": 40,
          "height": 100,
          "depth": 4,
          "is_free_shipping": false,
          "purchasing_disabled": false,
          "inventory_level": 50,
          "inventory_warning_level": 10,
          "id": 156,
          "product_id": 77,
          "sku": "M-ORAN-1",
          "sku_id": 197,
          "option_values": [
            {
              "option_display_name": "Color",
              "label": "Color",
              "id": 107,
              "option_id": 124
            }
          ],
          "calculated_price": 49.99
        },
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Variant"
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "VariantBase": {
      "title": "VariantBase",
      "description": "Common Variant properties.",
      "type": "object",
      "properties": {
        "cost_price": {
          "description": "The cost price of the variant. Not affected by Price List prices.",
          "example": 3.99,
          "type": "number",
          "format": "double"
        },
        "price": {
          "description": "This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price.",
          "example": 12.99,
          "type": "number",
          "format": "double"
        },
        "sale_price": {
          "description": "This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price.",
          "example": 4.99,
          "type": "number",
          "format": "double"
        },
        "retail_price": {
          "description": "This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price.",
          "type": "number",
          "format": "double"
        },
        "weight": {
          "description": "This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight.",
          "example": 12,
          "type": "number",
          "format": "double"
        },
        "width": {
          "description": "Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width.",
          "example": 3,
          "type": "number",
          "format": "double"
        },
        "height": {
          "description": "Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height.",
          "example": 4,
          "type": "number",
          "format": "double"
        },
        "depth": {
          "description": "Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "is_free_shipping": {
          "description": "Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero.",
          "example": true,
          "type": "boolean"
        },
        "fixed_cost_shipping_price": {
          "description": "A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.",
          "type": "number",
          "format": "double"
        },
        "purchasing_disabled": {
          "description": "If `true`, this variant will not be purchasable on the storefront.",
          "example": false,
          "type": "boolean"
        },
        "purchasing_disabled_message": {
          "description": "If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected.",
          "type": "string"
        },
        "image_url": {
          "description": "The image that will be displayed when this variant is selected on the storefront. When updating a SKU image, send the publicly accessible URL. Supported image formats are JPEG, PNG, and GIF. Generic product images not specific to the variant should be stored on the product.",
          "example": "https://cdn8.bigcommerce.com/s-123456/product_images/d/fakeimage.png",
          "type": "string"
        },
        "upc": {
          "description": "The UPC code used in feeds for shopping comparison sites and external channel integrations.",
          "type": "string"
        },
        "inventory_level": {
          "description": "Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`.",
          "example": 22,
          "type": "number",
          "format": "double"
        },
        "inventory_warning_level": {
          "description": "When the variant hits this inventory level, it is considered low stock.",
          "example": 5,
          "type": "number",
          "format": "double"
        },
        "bin_picking_number": {
          "description": "Identifies where in a warehouse the variant is located.",
          "type": "string"
        }
      }
    },
    "VariantPost": {
      "title": "VariantPost",
      "description": "The model for a POST to create variants on a product.",
      "type": "object",
      "properties": {
        "sku": {
          "description": "",
          "example": "S-ORAN-1",
          "type": "string"
        },
        "option_values": {
          "description": "Array of option and option values IDs that make up this variant. Will be empty if the variant is the product's base variant.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OptionValueVariantPost"
          }
        },
        "cost_price": {
          "description": "The cost price of the variant. Not affected by Price List prices.",
          "example": 3,
          "type": "number",
          "format": "double"
        },
        "price": {
          "description": "This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price.",
          "example": 50.99,
          "type": "number",
          "format": "double"
        },
        "sale_price": {
          "description": "This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price.",
          "example": 45,
          "type": "number",
          "format": "double"
        },
        "retail_price": {
          "description": "This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price.",
          "example": 50.99,
          "type": "number",
          "format": "double"
        },
        "weight": {
          "description": "This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "width": {
          "description": "Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width.",
          "example": 4,
          "type": "number",
          "format": "double"
        },
        "height": {
          "description": "Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height.",
          "example": 14.6,
          "type": "number",
          "format": "double"
        },
        "depth": {
          "description": "Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth.",
          "example": 22,
          "type": "number",
          "format": "double"
        },
        "is_free_shipping": {
          "description": "Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero.",
          "example": true,
          "type": "boolean"
        },
        "fixed_cost_shipping_price": {
          "description": "A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.",
          "type": "number",
          "format": "double"
        },
        "purchasing_disabled": {
          "description": "If `true`, this variant will not be purchasable on the storefront.",
          "example": true,
          "type": "boolean"
        },
        "purchasing_disabled_message": {
          "description": "If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected.",
          "example": "This item not available at this time.",
          "type": "string"
        },
        "image_url": {
          "description": "The image that will be displayed when this variant is selected on the storefront. When updating a SKU image, send the publicly accessible URL. Supported image formats are JPEG, PNG, and GIF. Generic product images not specific to the variant should be stored on the product.",
          "type": "string"
        },
        "upc": {
          "description": "The UPC code used in feeds for shopping comparison sites and external channel integrations.",
          "type": "string"
        },
        "inventory_level": {
          "description": "Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`.",
          "type": "number",
          "format": "double"
        },
        "inventory_warning_level": {
          "description": "When the variant hits this inventory level, it is considered low stock.",
          "type": "number",
          "format": "double"
        },
        "bin_picking_number": {
          "description": "Identifies where in a warehouse the variant is located.",
          "type": "string"
        },
        "product_id": {
          "description": "",
          "example": 87,
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "sku",
        "option_values"
      ]
    },
    "OptionValueVariantPost": {
      "title": "OptionValueVariantPost",
      "description": "The model for a POST to create option values on a variant.",
      "type": "object",
      "properties": {
        "id": {
          "description": "",
          "example": 107,
          "type": "number",
          "format": "double"
        },
        "option_id": {
          "description": "",
          "example": 124,
          "type": "number",
          "format": "double"
        }
      }
    },
    "VariantPut": {
      "title": "VariantPut",
      "description": "The model for a PUT to update variants on a product.",
      "type": "object",
      "properties": {
        "cost_price": {
          "description": "The cost price of the variant. Not affected by Price List prices.",
          "example": 3,
          "type": "number",
          "format": "double"
        },
        "price": {
          "description": "This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price.",
          "example": 50.99,
          "type": "number",
          "format": "double"
        },
        "sale_price": {
          "description": "This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price.",
          "example": 45,
          "type": "number",
          "format": "double"
        },
        "retail_price": {
          "description": "This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price.",
          "example": 50.99,
          "type": "number",
          "format": "double"
        },
        "weight": {
          "description": "This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "width": {
          "description": "Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width.",
          "example": 4,
          "type": "number",
          "format": "double"
        },
        "height": {
          "description": "Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height.",
          "example": 14.6,
          "type": "number",
          "format": "double"
        },
        "depth": {
          "description": "Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth.",
          "example": 22,
          "type": "number",
          "format": "double"
        },
        "is_free_shipping": {
          "description": "Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero.",
          "example": true,
          "type": "boolean"
        },
        "fixed_cost_shipping_price": {
          "description": "A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.",
          "type": "number",
          "format": "double"
        },
        "purchasing_disabled": {
          "description": "If `true`, this variant will not be purchasable on the storefront.",
          "example": true,
          "type": "boolean"
        },
        "purchasing_disabled_message": {
          "description": "If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected.",
          "example": "This item not available at this time.",
          "type": "string"
        },
        "image_url": {
          "description": "The image that will be displayed when this variant is selected on the storefront. When updating a SKU image, send the publicly accessible URL. Supported image formats are JPEG, PNG, and GIF. Generic product images not specific to the variant should be stored on the product.",
          "type": "string"
        },
        "upc": {
          "description": "The UPC code used in feeds for shopping comparison sites and external channel integrations.",
          "type": "string"
        },
        "inventory_level": {
          "description": "Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`.",
          "type": "number",
          "format": "double"
        },
        "inventory_warning_level": {
          "description": "When the variant hits this inventory level, it is considered low stock.",
          "type": "number",
          "format": "double"
        },
        "bin_picking_number": {
          "description": "Identifies where in a warehouse the variant is located.",
          "type": "string"
        },
        "id": {
          "description": "",
          "type": "number",
          "format": "double"
        }
      }
    },
    "VariantProductPost": {
      "title": "VariantProductPost",
      "description": "The model for a POST to create variants on a product.",
      "type": "object",
      "properties": {
        "cost_price": {
          "description": "The cost price of the variant. Not affected by Price List prices.",
          "example": 3,
          "type": "number",
          "format": "double"
        },
        "price": {
          "description": "This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price.",
          "example": 50.99,
          "type": "number",
          "format": "double"
        },
        "sale_price": {
          "description": "This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price.",
          "example": 45,
          "type": "number",
          "format": "double"
        },
        "retail_price": {
          "description": "This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price.",
          "example": 50.99,
          "type": "number",
          "format": "double"
        },
        "weight": {
          "description": "This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "width": {
          "description": "Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width.",
          "example": 4,
          "type": "number",
          "format": "double"
        },
        "height": {
          "description": "Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height.",
          "example": 14.6,
          "type": "number",
          "format": "double"
        },
        "depth": {
          "description": "Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth.",
          "example": 22,
          "type": "number",
          "format": "double"
        },
        "is_free_shipping": {
          "description": "Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero.",
          "example": true,
          "type": "boolean"
        },
        "fixed_cost_shipping_price": {
          "description": "A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.",
          "type": "number",
          "format": "double"
        },
        "purchasing_disabled": {
          "description": "If `true`, this variant will not be purchasable on the storefront.",
          "example": true,
          "type": "boolean"
        },
        "purchasing_disabled_message": {
          "description": "If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected.",
          "example": "This item not available at this time.",
          "type": "string"
        },
        "image_url": {
          "description": "The image that will be displayed when this variant is selected on the storefront. When updating a SKU image, send the publicly accessible URL. Supported image formats are JPEG, PNG, and GIF. Generic product images not specific to the variant should be stored on the product.",
          "type": "string"
        },
        "upc": {
          "description": "The UPC code used in feeds for shopping comparison sites and external channel integrations.",
          "type": "string"
        },
        "inventory_level": {
          "description": "Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`.",
          "type": "number",
          "format": "double"
        },
        "inventory_warning_level": {
          "description": "When the variant hits this inventory level, it is considered low stock.",
          "type": "number",
          "format": "double"
        },
        "bin_picking_number": {
          "description": "Identifies where in a warehouse the variant is located.",
          "type": "string"
        },
        "product_id": {
          "description": "",
          "example": 87,
          "type": "number",
          "format": "double"
        },
        "sku": {
          "description": "",
          "example": "S-ORAN-1",
          "type": "string"
        },
        "option_values": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OptionValueProductBase"
          }
        }
      }
    },
    "OptionValueProductBase": {
      "title": "OptionValueProductBase",
      "description": "Common OptionValueProduct properties.",
      "type": "object",
      "properties": {
        "option_display_name": {
          "description": "The name of the option.",
          "example": "Colors",
          "type": "string"
        },
        "label": {
          "description": "The label of the option value.",
          "example": "Colors",
          "type": "string"
        }
      }
    },
    "VariantProductPut": {
      "title": "VariantProductPut",
      "description": "The model for a PUT to update variants on a product.",
      "type": "object",
      "properties": {
        "cost_price": {
          "description": "The cost price of the variant. Not affected by Price List prices.",
          "example": 3,
          "type": "number",
          "format": "double"
        },
        "price": {
          "description": "This variant's base price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is `null`, the product's default price (set in the Product resource's `price` field) will be used as the base price.",
          "example": 50.99,
          "type": "number",
          "format": "double"
        },
        "sale_price": {
          "description": "This variant's sale price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's sale price (set in the Product resource's `price` field) will be used as the sale price.",
          "example": 45,
          "type": "number",
          "format": "double"
        },
        "retail_price": {
          "description": "This variant's retail price on the storefront. If a Price List ID is used, the Price List value will be used. If a Price List ID is not used, and this value is null, the product's retail price (set in the Product resource's `price` field) will be used as the retail price.",
          "example": 50.99,
          "type": "number",
          "format": "double"
        },
        "weight": {
          "description": "This variant's base weight on the storefront. If this value is null, the product's default weight (set in the Product resource's weight field) will be used as the base weight.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "width": {
          "description": "Width of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default width (set in the Product resource's `width` field) will be used as the base width.",
          "example": 4,
          "type": "number",
          "format": "double"
        },
        "height": {
          "description": "Height of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default height (set in the Product resource's `height` field) will be used as the base height.",
          "example": 14.6,
          "type": "number",
          "format": "double"
        },
        "depth": {
          "description": "Depth of the variant, which can be used when calculating shipping costs. If this value is `null`, the product's default depth (set in the Product resource's `depth` field) will be used as the base depth.",
          "example": 22,
          "type": "number",
          "format": "double"
        },
        "is_free_shipping": {
          "description": "Flag used to indicate whether the variant has free shipping. If `true`, the shipping cost for the variant will be zero.",
          "example": true,
          "type": "boolean"
        },
        "fixed_cost_shipping_price": {
          "description": "A fixed shipping cost for the variant. If defined, this value will be used during checkout instead of normal shipping-cost calculation.",
          "type": "number",
          "format": "double"
        },
        "purchasing_disabled": {
          "description": "If `true`, this variant will not be purchasable on the storefront.",
          "example": true,
          "type": "boolean"
        },
        "purchasing_disabled_message": {
          "description": "If `purchasing_disabled` is `true`, this message should show on the storefront when the variant is selected.",
          "example": "This item not available at this time.",
          "type": "string"
        },
        "image_url": {
          "description": "The image that will be displayed when this variant is selected on the storefront. When updating a SKU image, send the publicly accessible URL. Supported image formats are JPEG, PNG, and GIF. Generic product images not specific to the variant should be stored on the product.",
          "type": "string"
        },
        "upc": {
          "description": "The UPC code used in feeds for shopping comparison sites and external channel integrations.",
          "type": "string"
        },
        "inventory_level": {
          "description": "Inventory level for the variant, which is used when the product's inventory_tracking is set to `variant`.",
          "example": 100,
          "type": "number",
          "format": "double"
        },
        "inventory_warning_level": {
          "description": "When the variant hits this inventory level, it is considered low stock.",
          "example": 10,
          "type": "number",
          "format": "double"
        },
        "bin_picking_number": {
          "description": "Identifies where in a warehouse the variant is located.",
          "type": "string"
        },
        "product_id": {
          "description": "",
          "example": 87,
          "type": "number",
          "format": "double"
        },
        "sku": {
          "description": "",
          "example": "S-ORAN-1",
          "type": "string"
        }
      }
    },
    "OptionValueCollectionResponse": {
      "title": "OptionValueCollectionResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": [
          {
            "id": 44,
            "label": "Pick a color",
            "sort_order": 9,
            "value_data": {
              "colors": [
                "#123c91, #FFFF00, #397a44"
              ]
            },
            "is_default": false
          }
        ],
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OptionValue"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "OptionValueResponse": {
      "title": "OptionValueResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": {
          "id": 44,
          "label": "Pick a color",
          "sort_order": 9,
          "value_data": {
            "colors": [
              "#123c91, #FFFF00, #397a44"
            ]
          },
          "is_default": false
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/OptionValue"
        },
        "meta": {
          "description": "Empty meta object; may be used later.",
          "type": "object"
        }
      }
    },
    "OptionValueBase": {
      "title": "OptionValueBase",
      "description": "Common OptionValue properties.",
      "type": "object",
      "properties": {
        "label": {
          "description": "The text display identifying the value on the storefront.",
          "example": "Colors",
          "type": "string"
        },
        "sort_order": {
          "description": "The order in which the value will be displayed on the product page.",
          "example": 2,
          "type": "number",
          "format": "double"
        },
        "is_default": {
          "description": "The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.",
          "example": true,
          "type": "boolean"
        },
        "value_data": {
          "$ref": "#/definitions/ValueData"
        }
      },
      "required": [
        "label",
        "sort_order"
      ]
    },
    "OptionValuePut": {
      "title": "OptionValuePut",
      "description": "The model for a PUT to update option values on a product.",
      "type": "object",
      "properties": {
        "is_default": {
          "description": "The flag for preselecting a value as the default on the storefront. This field is not supported for swatch options/modifiers.",
          "example": false,
          "type": "boolean"
        },
        "label": {
          "description": "The text display identifying the value on the storefront.",
          "example": "Colors",
          "type": "string"
        },
        "sort_order": {
          "description": "The order in which the value will be displayed on the product page.",
          "example": 2,
          "type": "number",
          "format": "double"
        },
        "value_data": {
          "$ref": "#/definitions/ValueData"
        },
        "id": {
          "description": "The unique numeric ID of the value; increments sequentially.",
          "example": 152,
          "type": "number",
          "format": "double"
        }
      }
    },
    "ProductImageCollectionResponse": {
      "title": "ProductImageCollectionResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": [
          {
            "is_thumbnail": true,
            "sort_order": 2,
            "id": 265,
            "product_id": 118,
            "image_file": "%%SAMPLE%%/stencil/foglinenbeigestripetowel3b.jpg",
            "url_zoom": "\"https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.1280.1280.jpg?c=2",
            "url_standard": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.500.750.jpg?c=2",
            "url_thumbnail": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.190.285.jpg?c=2",
            "url_tiny": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.60.90.jpg?c=2\"",
            "date_modified": "2018-01-05T21:47:35+00:00"
          }
        ],
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductImage"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "ProductImage": {
      "title": "ProductImage",
      "type": "object",
      "properties": {
        "is_thumbnail": {
          "description": "Flag for identifying whether the image is used as the product's thumbnail.",
          "example": true,
          "type": "boolean"
        },
        "sort_order": {
          "description": "The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered.",
          "example": 2,
          "type": "number",
          "format": "double"
        },
        "description": {
          "description": "The description for the image.",
          "type": "string"
        },
        "id": {
          "description": "The unique numeric ID of the image; increments sequentially.",
          "example": 265,
          "type": "number",
          "format": "double"
        },
        "product_id": {
          "description": "The unique numeric identifier for the product with which the image is associated.",
          "example": 118,
          "type": "number",
          "format": "double"
        },
        "image_file": {
          "description": "The local path to the original image file uploaded to BigCommerce.",
          "example": "%%SAMPLE%%/stencil/foglinenbeigestripetowel3b.jpg",
          "type": "string"
        },
        "url_zoom": {
          "description": "The zoom URL for this image. By default, this is used as the zoom image on product pages when zoom images are enabled.",
          "example": "\"https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.1280.1280.jpg?c=2",
          "type": "string"
        },
        "url_standard": {
          "description": "The standard URL for this image. By default, this is used for product-page images.",
          "example": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.500.750.jpg?c=2",
          "type": "string"
        },
        "url_thumbnail": {
          "description": "The thumbnail URL for this image. By default, this is the image size used on the category page and in side panels.",
          "example": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.190.285.jpg?c=2",
          "type": "string"
        },
        "url_tiny": {
          "description": "The tiny URL for this image. By default, this is the image size used for thumbnails beneath the product image on a product page.",
          "example": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.60.90.jpg?c=2\"",
          "type": "string"
        },
        "date_modified": {
          "description": "The date on which the product image was modified.",
          "example": "1/5/2018 9:47:35 PM",
          "type": "string"
        }
      }
    },
    "ProductImageResponse": {
      "title": "ProductImageResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": {
          "is_thumbnail": true,
          "sort_order": 2,
          "id": 265,
          "product_id": 118,
          "image_file": "%%SAMPLE%%/stencil/foglinenbeigestripetowel3b.jpg",
          "url_zoom": "\"https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.1280.1280.jpg?c=2",
          "url_standard": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.500.750.jpg?c=2",
          "url_thumbnail": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.190.285.jpg?c=2",
          "url_tiny": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.60.90.jpg?c=2\"",
          "date_modified": "2018-01-05T21:47:35+00:00"
        },
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ProductImage"
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "ProductImageBase": {
      "title": "ProductImageBase",
      "description": "Common ProductImage properties.",
      "type": "object",
      "properties": {
        "is_thumbnail": {
          "description": "Flag for identifying whether the image is used as the product's thumbnail.",
          "example": true,
          "type": "boolean"
        },
        "sort_order": {
          "description": "The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "description": {
          "description": "The description for the image.",
          "example": "Yellow Large Bath Towel",
          "type": "string"
        }
      }
    },
    "ProductImagePost": {
      "title": "ProductImagePost",
      "description": "The model for a POST to create an image on a product.",
      "type": "object",
      "properties": {
        "image_url": {
          "description": "Must be a fully qualified URL path, including protocol.",
          "example": "https://your-custom-image/image_name.png",
          "type": "string"
        },
        "image_file": {
          "description": "Must be sent as a multipart/form-data field in the request body.",
          "example": "/Users/your-computer/Documents/image-file.png",
          "type": "string"
        },
        "is_thumbnail": {
          "description": "Flag for identifying whether the image is used as the product's thumbnail.",
          "example": true,
          "type": "boolean"
        },
        "sort_order": {
          "description": "The order in which the image will be displayed on the product page. Higher integers give the image a lower priority. When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "description": {
          "description": "The description for the image.",
          "example": "Yellow Large Bath Towel",
          "type": "string"
        }
      },
      "required": [
        "image_url",
        "image_file"
      ]
    },
    "ProductVideoCollectionResponse": {
      "title": "ProductVideoCollectionResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": [
          {
            "title": "About us",
            "description": "Thank you for visiting us",
            "sort_order": 1,
            "type": "youtube",
            "id": 1,
            "video_id": "123345AA",
            "product_id": 113,
            "length": "22:43"
          }
        ],
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductVideo"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "ProductVideo": {
      "title": "ProductVideo",
      "type": "object",
      "properties": {
        "title": {
          "description": "The title for the video. If left blank, this will be filled in according to data on a host site.",
          "example": "About us",
          "type": "string"
        },
        "description": {
          "description": "The description for the video. If left blank, this will be filled in according to data on a host site.",
          "example": "Thank you for visiting us",
          "type": "string"
        },
        "sort_order": {
          "description": "The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "type": {
          "description": "The video type (a short name of a host site).",
          "example": "youtube",
          "type": "string"
        },
        "id": {
          "description": "The unique numeric ID of the product video; increments sequentially.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "video_id": {
          "description": "The ID of the video on a host site.",
          "example": "123345AA",
          "type": "string"
        },
        "product_id": {
          "description": "The unique numeric identifier for the product with which the image is associated.",
          "example": 113,
          "type": "number",
          "format": "double"
        },
        "length": {
          "description": "Length of the video. This will be filled in according to data on a host site.",
          "example": "22:43",
          "type": "string"
        }
      }
    },
    "ProductVideoResponse": {
      "title": "ProductVideoResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": {
          "title": "About us",
          "description": "Thank you for visiting us",
          "sort_order": 1,
          "type": "youtube",
          "id": 1,
          "video_id": "123345AA",
          "product_id": 113,
          "length": "22:43"
        },
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ProductVideo"
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "ProductVideoBase": {
      "title": "ProductVideoBase",
      "description": "Common ProductVideo properties.",
      "type": "object",
      "properties": {
        "title": {
          "description": "The title for the video. If left blank, this will be filled in according to data on a host site.",
          "example": "Your Video",
          "type": "string"
        },
        "description": {
          "description": "The description for the video. If left blank, this will be filled in according to data on a host site.",
          "example": "Something related to the product",
          "type": "string"
        },
        "sort_order": {
          "description": "The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "type": {
          "description": "The video type (a short name of a host site).",
          "example": "youtube",
          "type": "string"
        }
      }
    },
    "ProductVideoPost": {
      "title": "ProductVideoPost",
      "description": "The model for a POST to create a video on a product.",
      "type": "object",
      "properties": {
        "video_id": {
          "description": "The ID of the video on a host site.",
          "example": "123345AA",
          "type": "string"
        },
        "title": {
          "description": "The title for the video. If left blank, this will be filled in according to data on a host site.",
          "example": "Your Video",
          "type": "string"
        },
        "description": {
          "description": "The description for the video. If left blank, this will be filled in according to data on a host site.",
          "example": "Something related to the product",
          "type": "string"
        },
        "sort_order": {
          "description": "The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "type": {
          "description": "The video type (a short name of a host site).",
          "example": "youtube",
          "type": "string"
        }
      },
      "required": [
        "video_id"
      ]
    },
    "ProductVideoPut": {
      "title": "ProductVideoPut",
      "description": "The model for a PUT to update a video on a product.",
      "type": "object",
      "properties": {
        "title": {
          "description": "The title for the video. If left blank, this will be filled in according to data on a host site.",
          "example": "Your Video",
          "type": "string"
        },
        "description": {
          "description": "The description for the video. If left blank, this will be filled in according to data on a host site.",
          "example": "Something related to the product",
          "type": "string"
        },
        "sort_order": {
          "description": "The order in which the video will be displayed on the product page. Higher integers give the video a lower priority. When updating, if the video is given a lower priority, all videos with a `sort_order` the same as or greater than the video's new `sort_order` value will have their `sort_order`s reordered.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "type": {
          "description": "The video type (a short name of a host site).",
          "example": "youtube",
          "type": "string"
        },
        "id": {
          "description": "The unique numeric ID of the product video; increments sequentially.",
          "example": 2,
          "type": "number",
          "format": "double"
        }
      }
    },
    "ProductReviewCollectionResponse": {
      "title": "ProductReviewCollectionResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": {
          "title": "Great Product",
          "text": "This product is amazing!!!",
          "status": "approved",
          "rating": 5,
          "email": "some@email.com",
          "name": "Jane Doe",
          "date_reviewed": "2018-05-07T19:37:13+00:00",
          "id": 5,
          "date_created": "2018-05-07T19:37:13+00:00\"",
          "date_modified": "2018-05-07T19:38:36+00:00"
        },
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ProductReview"
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "ProductReview": {
      "title": "ProductReview",
      "type": "object",
      "properties": {
        "title": {
          "description": "The title for the product review.",
          "example": "Great Product",
          "type": "string"
        },
        "text": {
          "description": "The text for the product review.",
          "example": "This product is amazing!!!",
          "type": "string"
        },
        "status": {
          "description": "The status of the product review. Must be one of `approved`, `disapproved` or `pending`.",
          "example": "approved",
          "type": "string"
        },
        "rating": {
          "description": "The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5.",
          "example": 5,
          "type": "number",
          "format": "double"
        },
        "email": {
          "description": "The email of the reviewer. Must be a valid email, or an empty string.",
          "example": "some@email.com",
          "type": "string"
        },
        "name": {
          "description": "The name of the reviewer.",
          "example": "Jane Doe",
          "type": "string"
        },
        "date_reviewed": {
          "description": "Date the product was reviewed.",
          "example": "5/7/2018 7:37:13 PM",
          "type": "string"
        },
        "id": {
          "description": "The unique numeric ID of the product review; increments sequentially.",
          "example": 5,
          "type": "number",
          "format": "double"
        },
        "date_created": {
          "description": "Date the product review was created.",
          "example": "2018-05-07T19:37:13+00:00\"",
          "type": "string"
        },
        "date_modified": {
          "description": "Date the product review was modified.",
          "example": "5/7/2018 7:38:36 PM",
          "type": "string"
        }
      }
    },
    "ProductReviewResponse": {
      "title": "ProductReviewResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": {
          "title": "Great Product",
          "text": "This product is amazing!!!",
          "status": "approved",
          "rating": 5,
          "email": "some@email.com",
          "name": "Jane Doe",
          "date_reviewed": "2018-05-07T19:37:13+00:00",
          "id": 5,
          "date_created": "2018-05-07T19:37:13+00:00\"",
          "date_modified": "2018-05-07T19:38:36+00:00"
        },
        "meta": {}
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ProductReview"
        },
        "meta": {
          "description": "Empty meta object; may be used later.",
          "type": "object"
        }
      }
    },
    "ProductReviewBase": {
      "title": "ProductReviewBase",
      "description": "Common ProductReview properties.",
      "type": "object",
      "properties": {
        "title": {
          "description": "The title for the product review.",
          "example": "Great Product",
          "type": "string"
        },
        "text": {
          "description": "The text for the product review.",
          "example": "This product is amazing!!!",
          "type": "string"
        },
        "status": {
          "description": "The status of the product review. Must be one of `approved`, `disapproved` or `pending`.",
          "example": "approved",
          "type": "string"
        },
        "rating": {
          "description": "The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5.",
          "example": 5,
          "type": "number",
          "format": "double"
        },
        "email": {
          "description": "The email of the reviewer. Must be a valid email, or an empty string.",
          "example": "some@email.com",
          "type": "string"
        },
        "name": {
          "description": "The name of the reviewer.",
          "example": "Jane Doe",
          "type": "string"
        },
        "date_reviewed": {
          "description": "Date the product was reviewed.",
          "example": "5/7/2018 7:37:13 PM",
          "type": "string"
        }
      }
    },
    "ProductReviewBasePOST": {
      "title": "ProductReviewBasePOST",
      "description": "Common ProductReview properties.",
      "type": "object",
      "properties": {
        "title": {
          "description": "The title for the product review.",
          "example": "Great Product",
          "type": "string"
        },
        "date_reviewed": {
          "description": "Date the product was reviewed.",
          "example": "5/7/2018 7:37:13 PM",
          "type": "string"
        },
        "text": {
          "description": "The text for the product review.",
          "example": "This product is amazing!!!",
          "type": "string"
        },
        "status": {
          "description": "The status of the product review. Must be one of `approved`, `disapproved` or `pending`.",
          "example": "approved",
          "type": "string"
        },
        "rating": {
          "description": "The rating of the product review. Must be one of 0, 1, 2, 3, 4, 5.",
          "example": 5,
          "type": "number",
          "format": "double"
        },
        "email": {
          "description": "The email of the reviewer. Must be a valid email, or an empty string.",
          "example": "some@email.com",
          "type": "string"
        },
        "name": {
          "description": "The name of the reviewer.",
          "example": "Jane Doe",
          "type": "string"
        }
      },
      "required": [
        "title",
        "date_reviewed"
      ]
    },
    "ImageResponse": {
      "title": "ImageResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": {
          "image_url": "https://your_image_site/image.png"
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ResourceImage"
        },
        "meta": {
          "description": "Empty meta object; may be used later.",
          "type": "object"
        }
      }
    },
    "ResourceImage": {
      "title": "ResourceImage",
      "type": "object",
      "properties": {
        "image_url": {
          "description": "A public URL for a GIF, JPEG, or PNG image.",
          "example": "https://your_image_site/image.png",
          "type": "string"
        }
      }
    },
    "ProductCollectionResponse": {
      "title": "ProductCollectionResponse",
      "example": {
        "data": [
          {
            "name": "Fog Linen Chambray Towel - Beige Stripe",
            "type": "physical",
            "sku": "SLCTBS",
            "description": "<p>The perfect beach towel: thin, lightweight and highly absorbent. Crafted by Fog Linen in Japan using soft Lithuanian linen, each towel rolls up for compact stowaway. Dry off after a refreshing dip in the ocean and stretch out on it for a sun bath. The thinness ensures a quick dry so you can have it rolled back up in your bag without soaking your belongings.</p>\\r\\n<p>Measures 75 x 145 cm/29.5 x 57 in</p>\\r\\n<p>100% Linen</p>",
            "weight": 1,
            "width": 6,
            "depth": 2,
            "height": 4,
            "price": 49.99,
            "cost_price": 12.99,
            "retail_price": 32.99,
            "tax_class_id": 0,
            "product_tax_code": "3451",
            "categories": [
              1,
              2
            ],
            "brand_id": 5,
            "option_set_id": 19,
            "inventory_level": 10,
            "inventory_warning_level": 10,
            "inventory_tracking": "none",
            "fixed_cost_shipping_price": 8,
            "is_free_shipping": false,
            "is_visible": true,
            "is_featured": true,
            "related_products": [
              -1
            ],
            "bin_picking_number": "56WB",
            "layout_file": "product.html",
            "upc": "1234567890",
            "search_keywords": "towel, bath, kitchen",
            "availability": "available",
            "gift_wrapping_options_type": "list",
            "gift_wrapping_options_list": [
              1,
              2,
              3
            ],
            "sort_order": 4,
            "condition": "New",
            "is_condition_shown": true,
            "order_quantity_minimum": 5,
            "order_quantity_maximum": 50,
            "meta_keywords": [],
            "view_count": 146,
            "preorder_release_date": "null",
            "is_preorder_only": false,
            "is_price_hidden": false,
            "custom_url": {
              "url": "/this-is-a-custom-url/",
              "is_customized": true
            },
            "open_graph_type": "product",
            "id": 81,
            "calculated_price": 49.99,
            "reviews_rating_sum": 0,
            "reviews_count": 0,
            "total_sold": 1050,
            "custom_fields": [
              {
                "name": "Release year",
                "value": "1987",
                "id": 1
              }
            ],
            "bulk_pricing_rules": [
              {
                "quantity_min": 10,
                "quantity_max": 50,
                "type": "price",
                "amount": 10,
                "id": 3
              }
            ],
            "date_created": "2015-05-05T12:30:00+00:00",
            "date_modified": "2015-12-15T06:22:30+00:00",
            "images": [
              {
                "is_thumbnail": true,
                "sort_order": 2,
                "id": 265,
                "product_id": 118,
                "image_file": "%%SAMPLE%%/stencil/foglinenbeigestripetowel3b.jpg",
                "url_zoom": "\"https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.1280.1280.jpg?c=2",
                "url_standard": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.500.750.jpg?c=2",
                "url_thumbnail": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.190.285.jpg?c=2",
                "url_tiny": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.60.90.jpg?c=2\"",
                "date_modified": "2018-01-05T21:47:35+00:00"
              }
            ],
            "videos": [
              {
                "title": "About us",
                "description": "Thank you for visiting us",
                "sort_order": 1,
                "type": "youtube",
                "id": 1,
                "video_id": "123345AA",
                "product_id": 113,
                "length": "22:43"
              }
            ],
            "variants": [
              {
                "cost_price": 12,
                "price": 14,
                "weight": 22,
                "width": 40,
                "height": 100,
                "depth": 4,
                "is_free_shipping": false,
                "purchasing_disabled": false,
                "inventory_level": 50,
                "inventory_warning_level": 10,
                "id": 156,
                "product_id": 77,
                "sku": "M-ORAN-1",
                "sku_id": 197,
                "option_values": [
                  {
                    "option_display_name": "Color",
                    "label": "Color",
                    "id": 107,
                    "option_id": 124
                  }
                ],
                "calculated_price": 49.99
              }
            ],
            "base_variant_id": 22
          }
        ],
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Product"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "Product": {
      "title": "Product",
      "type": "object",
      "properties": {
        "name": {
          "description": "The product name.",
          "example": "Fog Linen Chambray Towel - Beige Stripe",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/Type136"
        },
        "weight": {
          "description": "Weight of the product, which can be used when calculating shipping costs.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "price": {
          "description": "The price of the product. The price should include or exclude tax, based on the store settings.",
          "example": 49.99,
          "type": "number",
          "format": "double"
        },
        "categories": {
          "description": "An array of IDs for the categories to which this product belongs. When updating a product, if an array of categories is supplied, all product categories will be overwritten. Does not accept more than 1,000 ID values.",
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "sku": {
          "description": "User defined product code/stock keeping unit (SKU).",
          "example": "SLCTBS",
          "type": "string"
        },
        "description": {
          "description": "The product description, which can include HTML formatting.",
          "example": "<p>The perfect beach towel: thin, lightweight and highly absorbent. Crafted by Fog Linen in Japan using soft Lithuanian linen, each towel rolls up for compact stowaway. Dry off after a refreshing dip in the ocean and stretch out on it for a sun bath. The thinness ensures a quick dry so you can have it rolled back up in your bag without soaking your belongings.</p>\\r\\n<p>Measures 75 x 145 cm/29.5 x 57 in</p>\\r\\n<p>100% Linen</p>",
          "type": "string"
        },
        "width": {
          "description": "Width of the product, which can be used when calculating shipping costs.",
          "example": 6,
          "type": "number",
          "format": "double"
        },
        "depth": {
          "description": "Depth of the product, which can be used when calculating shipping costs.",
          "example": 2,
          "type": "number",
          "format": "double"
        },
        "height": {
          "description": "Height of the product, which can be used when calculating shipping costs.",
          "example": 4,
          "type": "number",
          "format": "double"
        },
        "cost_price": {
          "description": "The cost price of the product. Stored for reference only; it is not used or displayed anywhere on the store.",
          "example": 12.99,
          "type": "number",
          "format": "double"
        },
        "retail_price": {
          "description": "The retail cost of the product. If entered, the retail cost price will be shown on the product page.",
          "example": 32.99,
          "type": "number",
          "format": "double"
        },
        "sale_price": {
          "description": "If entered, the sale price will be used instead of value in the price field when calculating the product's cost.",
          "type": "number",
          "format": "double"
        },
        "tax_class_id": {
          "description": "The ID of the tax class applied to the product. (NOTE: Value ignored if automatic tax is enabled.)",
          "example": 0,
          "type": "number",
          "format": "double"
        },
        "product_tax_code": {
          "description": "Accepts AvaTax System Tax Codes, which identify products and services that fall into special sales-tax categories. By using these codes, merchants who subscribe to BigCommerce's Avalara Premium integration can calculate sales taxes more accurately. Stores without Avalara Premium will ignore the code when calculating sales tax. Do not pass more than one code. The codes are case-sensitive. For details, please see Avalara's documentation.",
          "example": "3451",
          "type": "string"
        },
        "brand_id": {
          "description": "The ID associated with the products brand.",
          "example": 5,
          "type": "number",
          "format": "double"
        },
        "option_set_id": {
          "description": "Id of the option set assigned to the product.",
          "example": 19,
          "type": "number",
          "format": "double"
        },
        "inventory_level": {
          "description": "Current inventory level of the product. Simple inventory tracking must be enabled (See the inventory_tracking field) for this to take any effect.",
          "example": 10,
          "type": "number",
          "format": "double"
        },
        "inventory_warning_level": {
          "description": "Inventory warning level for the product. When the product's inventory level drops below the warning level, the store owner will be informed. Simple inventory tracking must be enabled (see the inventory_tracking field) for this to take any effect.",
          "example": 10,
          "type": "number",
          "format": "double"
        },
        "inventory_tracking": {
          "$ref": "#/definitions/InventoryTracking"
        },
        "fixed_cost_shipping_price": {
          "description": "A fixed shipping cost for the product. If defined, this value will be used during checkout instead of normal shipping-cost calculation.",
          "example": 8,
          "type": "number",
          "format": "double"
        },
        "is_free_shipping": {
          "description": "Flag used to indicate whether the product has free shipping. If true, the shipping cost for the product will be zero.",
          "example": false,
          "type": "boolean"
        },
        "is_visible": {
          "description": "Flag to determine whether the product should be displayed to customers browsing the store. If true, the product will be displayed. If false, the product will be hidden from view.",
          "example": true,
          "type": "boolean"
        },
        "is_featured": {
          "description": "Flag to determine whether the product should be included in the featured products panel when viewing the store.",
          "example": true,
          "type": "boolean"
        },
        "related_products": {
          "description": "An array of IDs for the related products.",
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "warranty": {
          "description": "Warranty information displayed on the product page. Can include HTML formatting.",
          "type": "string"
        },
        "bin_picking_number": {
          "description": "The BIN picking number for the product.",
          "example": "56WB",
          "type": "string"
        },
        "layout_file": {
          "description": "The layout template file used to render this product.",
          "example": "product.html",
          "type": "string"
        },
        "upc": {
          "description": "The product UPC code, which is used in feeds for shopping comparison sites and external channel integrations.",
          "example": "1234567890",
          "type": "string"
        },
        "search_keywords": {
          "description": "A comma-separated list of keywords that can be used to locate the product when searching the store.",
          "example": "towel, bath, kitchen",
          "type": "string"
        },
        "availability": {
          "$ref": "#/definitions/Availability"
        },
        "availability_description": {
          "description": "Availability text displayed on the checkout page, under the product title. Tells the customer how long it will normally take to ship this product, such as: 'Usually ships in 24 hours.'",
          "type": "string"
        },
        "gift_wrapping_options_type": {
          "$ref": "#/definitions/GiftWrappingOptionsType"
        },
        "gift_wrapping_options_list": {
          "description": "A list of gift-wrapping option IDs.",
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "sort_order": {
          "description": "Priority to give this product when included in product lists on category pages and in search results. Lower integers will place the product closer to the top of the results.",
          "example": 4,
          "type": "number",
          "format": "double"
        },
        "condition": {
          "$ref": "#/definitions/Condition"
        },
        "is_condition_shown": {
          "description": "Flag used to determine whether the product condition is shown to the customer on the product page.",
          "example": true,
          "type": "boolean"
        },
        "order_quantity_minimum": {
          "description": "The minimum quantity an order must contain, to be eligible to purchase this product.",
          "example": 5,
          "type": "number",
          "format": "double"
        },
        "order_quantity_maximum": {
          "description": "The maximum quantity an order can contain when purchasing the product.",
          "example": 50,
          "type": "number",
          "format": "double"
        },
        "page_title": {
          "description": "Custom title for the product page. If not defined, the product name will be used as the meta title.",
          "type": "string"
        },
        "meta_keywords": {
          "description": "Custom meta keywords for the product page. If not defined, the store's default keywords will be used.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "meta_description": {
          "description": "Custom meta description for the product page. If not defined, the store's default meta description will be used.",
          "type": "string"
        },
        "view_count": {
          "description": "The number of times the product has been viewed.",
          "example": 146,
          "type": "number",
          "format": "double"
        },
        "preorder_release_date": {
          "description": "Pre-order release date. See the availability field for details on setting a product's availability to accept pre-orders.",
          "example": "null",
          "type": "string"
        },
        "preorder_message": {
          "description": "Custom expected-date message to display on the product page. If undefined, the message defaults to the storewide setting. Can contain the %%DATE%% placeholder, which will be substituted for the release date.",
          "type": "string"
        },
        "is_preorder_only": {
          "description": "If set to false, the product will not change its availability from preorder to available on the release date. Otherwise, on the release date the product's availability/status will change to available.",
          "example": false,
          "type": "boolean"
        },
        "is_price_hidden": {
          "description": "False by default, indicating that this product's price should be shown on the product page. If set to true, the price is hidden. (NOTE: To successfully set is_price_hidden to true, the availability value must be disabled.)",
          "example": false,
          "type": "boolean"
        },
        "price_hidden_label": {
          "description": "By default, an empty string. If is_price_hidden is true, the value of price_hidden_label is displayed instead of the price. (NOTE: To successfully set a non-empty string value with is_price_hidden set to true, the availability value must be disabled.)",
          "type": "string"
        },
        "custom_url": {
          "$ref": "#/definitions/CustomUrlProduct"
        },
        "open_graph_type": {
          "$ref": "#/definitions/OpenGraphType"
        },
        "open_graph_title": {
          "description": "Title of the product, if not specified the product name will be used instead.",
          "type": "string"
        },
        "open_graph_description": {
          "description": "Description to use for the product, if not specified then the meta_description will be used instead.",
          "type": "string"
        },
        "open_graph_use_meta_description": {
          "description": "Flag to determine if product description or open graph description is used.",
          "type": "boolean"
        },
        "open_graph_use_product_name": {
          "description": "Flag to determine if product name or open graph name is used.",
          "type": "boolean"
        },
        "open_graph_use_image": {
          "description": "Flag to determine if product image or open graph image is used.",
          "type": "boolean"
        },
        "id": {
          "description": "The unique numeric ID of the product; increments sequentially.",
          "example": 81,
          "type": "number",
          "format": "double"
        },
        "calculated_price": {
          "description": "The price of the product as seen on the storefront. It will be equal to the sale_price, if set, and the price if there is not a sale_price.",
          "example": 49.99,
          "type": "number",
          "format": "double"
        },
        "reviews_rating_sum": {
          "description": "The total rating for the product.",
          "example": 0,
          "type": "number",
          "format": "double"
        },
        "reviews_count": {
          "description": "The number of times the product has been rated.",
          "example": 0,
          "type": "number",
          "format": "double"
        },
        "total_sold": {
          "description": "The total quantity of this product sold.",
          "example": 1050,
          "type": "number",
          "format": "double"
        },
        "custom_fields": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomField"
          }
        },
        "bulk_pricing_rules": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BulkPricingRule"
          }
        },
        "date_created": {
          "description": "The date on which the product was created.",
          "example": "5/5/2015 12:30:00 PM",
          "type": "string"
        },
        "date_modified": {
          "description": "The date on which the product was modified.",
          "example": "12/15/2015 6:22:30 AM",
          "type": "string"
        },
        "images": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductImage"
          }
        },
        "videos": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductVideo"
          }
        },
        "variants": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variant"
          }
        },
        "base_variant_id": {
          "description": "The unique identifier of the base variant associated with a simple product. This value is null for complex products.",
          "example": 22,
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "name",
        "type",
        "weight",
        "price",
        "categories"
      ]
    },
    "Type136": {
      "title": "type136",
      "example": "physical",
      "x-enum-elements": [
        {
          "name": "physical",
          "description": ""
        },
        {
          "name": "digital",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "physical",
        "digital"
      ]
    },
    "InventoryTracking": {
      "title": "inventory_tracking",
      "example": "none",
      "x-enum-elements": [
        {
          "name": "none",
          "description": ""
        },
        {
          "name": "product",
          "description": ""
        },
        {
          "name": "variant",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "none",
        "product",
        "variant"
      ]
    },
    "Availability": {
      "title": "availability",
      "example": "available",
      "x-enum-elements": [
        {
          "name": "available",
          "description": ""
        },
        {
          "name": "disabled",
          "description": ""
        },
        {
          "name": "preorder",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "available",
        "disabled",
        "preorder"
      ]
    },
    "GiftWrappingOptionsType": {
      "title": "gift_wrapping_options_type",
      "example": "any",
      "x-enum-elements": [
        {
          "name": "any",
          "description": ""
        },
        {
          "name": "none",
          "description": ""
        },
        {
          "name": "list",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "any",
        "none",
        "list"
      ]
    },
    "Condition": {
      "title": "condition",
      "example": "New",
      "x-enum-elements": [
        {
          "name": "New",
          "description": ""
        },
        {
          "name": "Used",
          "description": ""
        },
        {
          "name": "Refurbished",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "New",
        "Used",
        "Refurbished"
      ]
    },
    "CustomUrlProduct": {
      "title": "CustomUrlProduct",
      "type": "object",
      "properties": {
        "url": {
          "description": "Product URL on the storefront.",
          "example": "/this-is-a-custom-url/",
          "type": "string"
        },
        "is_customized": {
          "description": "Returns `true` if the URL has been changed from its default state (the auto-assigned URL that BigCommerce provides).",
          "example": true,
          "type": "boolean"
        }
      }
    },
    "OpenGraphType": {
      "title": "open_graph_type",
      "example": "product",
      "x-enum-elements": [
        {
          "name": "product",
          "description": ""
        },
        {
          "name": "album",
          "description": ""
        },
        {
          "name": "book",
          "description": ""
        },
        {
          "name": "drink",
          "description": ""
        },
        {
          "name": "food",
          "description": ""
        },
        {
          "name": "game",
          "description": ""
        },
        {
          "name": "movie",
          "description": ""
        },
        {
          "name": "song",
          "description": ""
        },
        {
          "name": "tv_show",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "product",
        "album",
        "book",
        "drink",
        "food",
        "game",
        "movie",
        "song",
        "tv_show"
      ]
    },
    "CustomField": {
      "title": "CustomField",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the field, shown on the storefront, orders, etc.",
          "example": "Release year",
          "type": "string"
        },
        "value": {
          "description": "The name of the field, shown on the storefront, orders, etc.",
          "example": "1987",
          "type": "string"
        },
        "id": {
          "description": "The unique numeric ID of the custom field; increments sequentially.",
          "example": 1,
          "type": "number",
          "format": "double"
        }
      }
    },
    "BulkPricingRule": {
      "title": "BulkPricingRule",
      "type": "object",
      "properties": {
        "quantity_min": {
          "description": "The minimum inclusive quantity of a product to satisfy this rule. Must be greater than or equal to zero.",
          "example": 10,
          "type": "number",
          "format": "double"
        },
        "quantity_max": {
          "description": "The maximum inclusive quantity of a product to satisfy this rule. Must be greater than the `quantity_min` value – unless this field has a value of 0 (zero), in which case there will be no maximum bound for this rule.",
          "example": 50,
          "type": "number",
          "format": "double"
        },
        "type": {
          "$ref": "#/definitions/Type145"
        },
        "amount": {
          "description": "The value of the adjustment by the bulk pricing rule.",
          "example": 10,
          "type": "number",
          "format": "double"
        },
        "id": {
          "description": "The ID of the bulk pricing rule.",
          "example": 3,
          "type": "number",
          "format": "double"
        }
      }
    },
    "Type145": {
      "title": "type145",
      "example": "price",
      "x-enum-elements": [
        {
          "name": "price",
          "description": ""
        },
        {
          "name": "percent",
          "description": ""
        },
        {
          "name": "fixed",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "price",
        "percent",
        "fixed"
      ]
    },
    "ProductResponse": {
      "title": "ProductResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": [
          {
            "name": "Fog Linen Chambray Towel - Beige Stripe",
            "type": "physical",
            "sku": "SLCTBS",
            "description": "<p>The perfect beach towel: thin, lightweight and highly absorbent. Crafted by Fog Linen in Japan using soft Lithuanian linen, each towel rolls up for compact stowaway. Dry off after a refreshing dip in the ocean and stretch out on it for a sun bath. The thinness ensures a quick dry so you can have it rolled back up in your bag without soaking your belongings.</p>\\r\\n<p>Measures 75 x 145 cm/29.5 x 57 in</p>\\r\\n<p>100% Linen</p>",
            "weight": 1,
            "width": 6,
            "depth": 2,
            "height": 4,
            "price": 49.99,
            "cost_price": 12.99,
            "retail_price": 32.99,
            "tax_class_id": 0,
            "product_tax_code": "3451",
            "categories": [
              1,
              2
            ],
            "brand_id": 5,
            "option_set_id": 19,
            "inventory_level": 10,
            "inventory_warning_level": 10,
            "inventory_tracking": "none",
            "fixed_cost_shipping_price": 8,
            "is_free_shipping": false,
            "is_visible": true,
            "is_featured": true,
            "related_products": [
              -1
            ],
            "bin_picking_number": "56WB",
            "layout_file": "product.html",
            "upc": "1234567890",
            "search_keywords": "towel, bath, kitchen",
            "availability": "available",
            "gift_wrapping_options_type": "list",
            "gift_wrapping_options_list": [
              1,
              2,
              3
            ],
            "sort_order": 4,
            "condition": "New",
            "is_condition_shown": true,
            "order_quantity_minimum": 5,
            "order_quantity_maximum": 50,
            "meta_keywords": [],
            "view_count": 146,
            "preorder_release_date": "null",
            "is_preorder_only": false,
            "is_price_hidden": false,
            "custom_url": {
              "url": "/this-is-a-custom-url/",
              "is_customized": true
            },
            "open_graph_type": "product",
            "id": 81,
            "calculated_price": 49.99,
            "reviews_rating_sum": 0,
            "reviews_count": 0,
            "total_sold": 1050,
            "custom_fields": [
              {
                "name": "Release year",
                "value": "1987",
                "id": 1
              }
            ],
            "bulk_pricing_rules": [
              {
                "quantity_min": 10,
                "quantity_max": 50,
                "type": "price",
                "amount": 10,
                "id": 3
              }
            ],
            "date_created": "2015-05-05T12:30:00+00:00",
            "date_modified": "2015-12-15T06:22:30+00:00",
            "images": [
              {
                "is_thumbnail": true,
                "sort_order": 2,
                "id": 265,
                "product_id": 118,
                "image_file": "%%SAMPLE%%/stencil/foglinenbeigestripetowel3b.jpg",
                "url_zoom": "\"https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.1280.1280.jpg?c=2",
                "url_standard": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.500.750.jpg?c=2",
                "url_thumbnail": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.190.285.jpg?c=2",
                "url_tiny": "https://cdn8.bigcommerce.com/s-123456/products/118/images/265/foglinenbeigestripetowel3b.1435946201.60.90.jpg?c=2\"",
                "date_modified": "2018-01-05T21:47:35+00:00"
              }
            ],
            "videos": [
              {
                "title": "About us",
                "description": "Thank you for visiting us",
                "sort_order": 1,
                "type": "youtube",
                "id": 1,
                "video_id": "123345AA",
                "product_id": 113,
                "length": "22:43"
              }
            ],
            "variants": [
              {
                "cost_price": 12,
                "price": 14,
                "weight": 22,
                "width": 40,
                "height": 100,
                "depth": 4,
                "is_free_shipping": false,
                "purchasing_disabled": false,
                "inventory_level": 50,
                "inventory_warning_level": 10,
                "id": 156,
                "product_id": 77,
                "sku": "M-ORAN-1",
                "sku_id": 197,
                "option_values": [
                  {
                    "option_display_name": "Color",
                    "label": "Color",
                    "id": 107,
                    "option_id": 124
                  }
                ],
                "calculated_price": 49.99
              }
            ],
            "base_variant_id": 22
          }
        ],
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "description": "A BigCommerce Product object describes a single purchasable unit or a collection of purchasable units.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Product"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "ProductBase": {
      "title": "ProductBase",
      "description": "Common Product properties.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The product name.",
          "example": "Fog Linen Chambray Towel - Beige Stripe",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/Type136"
        },
        "weight": {
          "description": "Weight of the product, which can be used when calculating shipping costs.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "price": {
          "description": "The price of the product. The price should include or exclude tax, based on the store settings.",
          "example": 49.99,
          "type": "number",
          "format": "double"
        },
        "categories": {
          "description": "An array of IDs for the categories to which this product belongs. When updating a product, if an array of categories is supplied, all product categories will be overwritten. Does not accept more than 1,000 ID values.",
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "sku": {
          "description": "User defined product code/stock keeping unit (SKU).",
          "example": "SLCTBS",
          "type": "string"
        },
        "description": {
          "description": "The product description, which can include HTML formatting.",
          "example": "<p>The perfect beach towel: thin, lightweight and highly absorbent. Crafted by Fog Linen in Japan using soft Lithuanian linen, each towel rolls up for compact stowaway. Dry off after a refreshing dip in the ocean and stretch out on it for a sun bath. The thinness ensures a quick dry so you can have it rolled back up in your bag without soaking your belongings.</p>\\r\\n<p>Measures 75 x 145 cm/29.5 x 57 in</p>\\r\\n<p>100% Linen</p>",
          "type": "string"
        },
        "width": {
          "description": "Width of the product, which can be used when calculating shipping costs.",
          "example": 6,
          "type": "number",
          "format": "double"
        },
        "depth": {
          "description": "Depth of the product, which can be used when calculating shipping costs.",
          "example": 2,
          "type": "number",
          "format": "double"
        },
        "height": {
          "description": "Height of the product, which can be used when calculating shipping costs.",
          "example": 4,
          "type": "number",
          "format": "double"
        },
        "cost_price": {
          "description": "The cost price of the product. Stored for reference only; it is not used or displayed anywhere on the store.",
          "example": 12.99,
          "type": "number",
          "format": "double"
        },
        "retail_price": {
          "description": "The retail cost of the product. If entered, the retail cost price will be shown on the product page.",
          "example": 32.99,
          "type": "number",
          "format": "double"
        },
        "sale_price": {
          "description": "If entered, the sale price will be used instead of value in the price field when calculating the product's cost.",
          "type": "number",
          "format": "double"
        },
        "tax_class_id": {
          "description": "The ID of the tax class applied to the product. (NOTE: Value ignored if automatic tax is enabled.)",
          "example": 0,
          "type": "number",
          "format": "double"
        },
        "product_tax_code": {
          "description": "Accepts AvaTax System Tax Codes, which identify products and services that fall into special sales-tax categories. By using these codes, merchants who subscribe to BigCommerce's Avalara Premium integration can calculate sales taxes more accurately. Stores without Avalara Premium will ignore the code when calculating sales tax. Do not pass more than one code. The codes are case-sensitive. For details, please see Avalara's documentation.",
          "example": "3451",
          "type": "string"
        },
        "brand_id": {
          "description": "The ID associated with the products brand.",
          "example": 5,
          "type": "number",
          "format": "double"
        },
        "inventory_level": {
          "description": "Current inventory level of the product. Simple inventory tracking must be enabled (See the inventory_tracking field) for this to take any effect.",
          "example": 10,
          "type": "number",
          "format": "double"
        },
        "inventory_warning_level": {
          "description": "Inventory warning level for the product. When the product's inventory level drops below the warning level, the store owner will be informed. Simple inventory tracking must be enabled (see the inventory_tracking field) for this to take any effect.",
          "example": 10,
          "type": "number",
          "format": "double"
        },
        "inventory_tracking": {
          "$ref": "#/definitions/InventoryTracking"
        },
        "fixed_cost_shipping_price": {
          "description": "A fixed shipping cost for the product. If defined, this value will be used during checkout instead of normal shipping-cost calculation.",
          "example": 8,
          "type": "number",
          "format": "double"
        },
        "is_free_shipping": {
          "description": "Flag used to indicate whether the product has free shipping. If true, the shipping cost for the product will be zero.",
          "example": false,
          "type": "boolean"
        },
        "is_visible": {
          "description": "Flag to determine whether the product should be displayed to customers browsing the store. If true, the product will be displayed. If false, the product will be hidden from view.",
          "example": true,
          "type": "boolean"
        },
        "is_featured": {
          "description": "Flag to determine whether the product should be included in the featured products panel when viewing the store.",
          "example": true,
          "type": "boolean"
        },
        "related_products": {
          "description": "An array of IDs for the related products.",
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "warranty": {
          "description": "Warranty information displayed on the product page. Can include HTML formatting.",
          "type": "string"
        },
        "bin_picking_number": {
          "description": "The BIN picking number for the product.",
          "example": "56WB",
          "type": "string"
        },
        "layout_file": {
          "description": "The layout template file used to render this product.",
          "example": "product.html",
          "type": "string"
        },
        "upc": {
          "description": "The product UPC code, which is used in feeds for shopping comparison sites and external channel integrations.",
          "example": "1234567890",
          "type": "string"
        },
        "search_keywords": {
          "description": "A comma-separated list of keywords that can be used to locate the product when searching the store.",
          "example": "towel, bath, kitchen",
          "type": "string"
        },
        "availability": {
          "$ref": "#/definitions/Availability"
        },
        "availability_description": {
          "description": "Availability text displayed on the checkout page, under the product title. Tells the customer how long it will normally take to ship this product, such as: 'Usually ships in 24 hours.'",
          "type": "string"
        },
        "gift_wrapping_options_type": {
          "$ref": "#/definitions/GiftWrappingOptionsType"
        },
        "gift_wrapping_options_list": {
          "description": "A list of gift-wrapping option IDs.",
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "sort_order": {
          "description": "Priority to give this product when included in product lists on category pages and in search results. Lower integers will place the product closer to the top of the results.",
          "example": 4,
          "type": "number",
          "format": "double"
        },
        "condition": {
          "$ref": "#/definitions/Condition"
        },
        "is_condition_shown": {
          "description": "Flag used to determine whether the product condition is shown to the customer on the product page.",
          "example": true,
          "type": "boolean"
        },
        "order_quantity_minimum": {
          "description": "The minimum quantity an order must contain, to be eligible to purchase this product.",
          "example": 5,
          "type": "number",
          "format": "double"
        },
        "order_quantity_maximum": {
          "description": "The maximum quantity an order can contain when purchasing the product.",
          "example": 50,
          "type": "number",
          "format": "double"
        },
        "page_title": {
          "description": "Custom title for the product page. If not defined, the product name will be used as the meta title.",
          "type": "string"
        },
        "meta_keywords": {
          "description": "Custom meta keywords for the product page. If not defined, the store's default keywords will be used.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "meta_description": {
          "description": "Custom meta description for the product page. If not defined, the store's default meta description will be used.",
          "type": "string"
        },
        "view_count": {
          "description": "The number of times the product has been viewed.",
          "example": 146,
          "type": "number",
          "format": "double"
        },
        "preorder_release_date": {
          "description": "Pre-order release date. See the availability field for details on setting a product's availability to accept pre-orders.",
          "example": "null",
          "type": "string"
        },
        "preorder_message": {
          "description": "Custom expected-date message to display on the product page. If undefined, the message defaults to the storewide setting. Can contain the %%DATE%% placeholder, which will be substituted for the release date.",
          "type": "string"
        },
        "is_preorder_only": {
          "description": "If set to false, the product will not change its availability from preorder to available on the release date. Otherwise, on the release date the product's availability/status will change to available.",
          "example": false,
          "type": "boolean"
        },
        "is_price_hidden": {
          "description": "False by default, indicating that this product's price should be shown on the product page. If set to true, the price is hidden. (NOTE: To successfully set is_price_hidden to true, the availability value must be disabled.)",
          "example": false,
          "type": "boolean"
        },
        "price_hidden_label": {
          "description": "By default, an empty string. If is_price_hidden is true, the value of price_hidden_label is displayed instead of the price. (NOTE: To successfully set a non-empty string value with is_price_hidden set to true, the availability value must be disabled.)",
          "type": "string"
        },
        "custom_url": {
          "$ref": "#/definitions/CustomUrlProduct"
        },
        "open_graph_type": {
          "$ref": "#/definitions/OpenGraphType"
        },
        "open_graph_title": {
          "description": "Title of the product, if not specified the product name will be used instead.",
          "type": "string"
        },
        "open_graph_description": {
          "description": "Description to use for the product, if not specified then the meta_description will be used instead.",
          "type": "string"
        },
        "open_graph_use_meta_description": {
          "description": "Flag to determine if product description or open graph description is used.",
          "type": "boolean"
        },
        "open_graph_use_product_name": {
          "description": "Flag to determine if product name or open graph name is used.",
          "type": "boolean"
        },
        "open_graph_use_image": {
          "description": "Flag to determine if product image or open graph image is used.",
          "type": "boolean"
        }
      },
      "required": [
        "name",
        "type",
        "weight",
        "price",
        "categories"
      ]
    },
    "ProductPost": {
      "title": "ProductPost",
      "description": "The model for a POST to create a product.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The product name.",
          "example": "Fog Linen Chambray Towel - Beige Stripe",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/Type136"
        },
        "weight": {
          "description": "Weight of the product, which can be used when calculating shipping costs.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "price": {
          "description": "The price of the product. The price should include or exclude tax, based on the store settings.",
          "example": 49.99,
          "type": "number",
          "format": "double"
        },
        "categories": {
          "description": "An array of IDs for the categories to which this product belongs. When updating a product, if an array of categories is supplied, all product categories will be overwritten. Does not accept more than 1,000 ID values.",
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "sku": {
          "description": "User defined product code/stock keeping unit (SKU).",
          "example": "SLCTBS",
          "type": "string"
        },
        "description": {
          "description": "The product description, which can include HTML formatting.",
          "example": "<p>The perfect beach towel: thin, lightweight and highly absorbent. Crafted by Fog Linen in Japan using soft Lithuanian linen, each towel rolls up for compact stowaway. Dry off after a refreshing dip in the ocean and stretch out on it for a sun bath. The thinness ensures a quick dry so you can have it rolled back up in your bag without soaking your belongings.</p>\\r\\n<p>Measures 75 x 145 cm/29.5 x 57 in</p>\\r\\n<p>100% Linen</p>",
          "type": "string"
        },
        "width": {
          "description": "Width of the product, which can be used when calculating shipping costs.",
          "example": 6,
          "type": "number",
          "format": "double"
        },
        "depth": {
          "description": "Depth of the product, which can be used when calculating shipping costs.",
          "example": 2,
          "type": "number",
          "format": "double"
        },
        "height": {
          "description": "Height of the product, which can be used when calculating shipping costs.",
          "example": 4,
          "type": "number",
          "format": "double"
        },
        "cost_price": {
          "description": "The cost price of the product. Stored for reference only; it is not used or displayed anywhere on the store.",
          "example": 12.99,
          "type": "number",
          "format": "double"
        },
        "retail_price": {
          "description": "The retail cost of the product. If entered, the retail cost price will be shown on the product page.",
          "example": 32.99,
          "type": "number",
          "format": "double"
        },
        "sale_price": {
          "description": "If entered, the sale price will be used instead of value in the price field when calculating the product's cost.",
          "type": "number",
          "format": "double"
        },
        "tax_class_id": {
          "description": "The ID of the tax class applied to the product. (NOTE: Value ignored if automatic tax is enabled.)",
          "example": 0,
          "type": "number",
          "format": "double"
        },
        "product_tax_code": {
          "description": "Accepts AvaTax System Tax Codes, which identify products and services that fall into special sales-tax categories. By using these codes, merchants who subscribe to BigCommerce's Avalara Premium integration can calculate sales taxes more accurately. Stores without Avalara Premium will ignore the code when calculating sales tax. Do not pass more than one code. The codes are case-sensitive. For details, please see Avalara's documentation.",
          "example": "3451",
          "type": "string"
        },
        "brand_id": {
          "description": "The ID associated with the products brand.",
          "example": 5,
          "type": "number",
          "format": "double"
        },
        "inventory_level": {
          "description": "Current inventory level of the product. Simple inventory tracking must be enabled (See the inventory_tracking field) for this to take any effect.",
          "example": 10,
          "type": "number",
          "format": "double"
        },
        "inventory_warning_level": {
          "description": "Inventory warning level for the product. When the product's inventory level drops below the warning level, the store owner will be informed. Simple inventory tracking must be enabled (see the inventory_tracking field) for this to take any effect.",
          "example": 10,
          "type": "number",
          "format": "double"
        },
        "inventory_tracking": {
          "$ref": "#/definitions/InventoryTracking"
        },
        "fixed_cost_shipping_price": {
          "description": "A fixed shipping cost for the product. If defined, this value will be used during checkout instead of normal shipping-cost calculation.",
          "example": 8,
          "type": "number",
          "format": "double"
        },
        "is_free_shipping": {
          "description": "Flag used to indicate whether the product has free shipping. If true, the shipping cost for the product will be zero.",
          "example": false,
          "type": "boolean"
        },
        "is_visible": {
          "description": "Flag to determine whether the product should be displayed to customers browsing the store. If true, the product will be displayed. If false, the product will be hidden from view.",
          "example": true,
          "type": "boolean"
        },
        "is_featured": {
          "description": "Flag to determine whether the product should be included in the featured products panel when viewing the store.",
          "example": true,
          "type": "boolean"
        },
        "related_products": {
          "description": "An array of IDs for the related products.",
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "warranty": {
          "description": "Warranty information displayed on the product page. Can include HTML formatting.",
          "type": "string"
        },
        "bin_picking_number": {
          "description": "The BIN picking number for the product.",
          "example": "56WB",
          "type": "string"
        },
        "layout_file": {
          "description": "The layout template file used to render this product.",
          "example": "product.html",
          "type": "string"
        },
        "upc": {
          "description": "The product UPC code, which is used in feeds for shopping comparison sites and external channel integrations.",
          "example": "1234567890",
          "type": "string"
        },
        "search_keywords": {
          "description": "A comma-separated list of keywords that can be used to locate the product when searching the store.",
          "example": "towel, bath, kitchen",
          "type": "string"
        },
        "availability": {
          "$ref": "#/definitions/Availability"
        },
        "availability_description": {
          "description": "Availability text displayed on the checkout page, under the product title. Tells the customer how long it will normally take to ship this product, such as: 'Usually ships in 24 hours.'",
          "type": "string"
        },
        "gift_wrapping_options_type": {
          "$ref": "#/definitions/GiftWrappingOptionsType"
        },
        "gift_wrapping_options_list": {
          "description": "A list of gift-wrapping option IDs.",
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "sort_order": {
          "description": "Priority to give this product when included in product lists on category pages and in search results. Lower integers will place the product closer to the top of the results.",
          "example": 4,
          "type": "number",
          "format": "double"
        },
        "condition": {
          "$ref": "#/definitions/Condition"
        },
        "is_condition_shown": {
          "description": "Flag used to determine whether the product condition is shown to the customer on the product page.",
          "example": true,
          "type": "boolean"
        },
        "order_quantity_minimum": {
          "description": "The minimum quantity an order must contain, to be eligible to purchase this product.",
          "example": 5,
          "type": "number",
          "format": "double"
        },
        "order_quantity_maximum": {
          "description": "The maximum quantity an order can contain when purchasing the product.",
          "example": 50,
          "type": "number",
          "format": "double"
        },
        "page_title": {
          "description": "Custom title for the product page. If not defined, the product name will be used as the meta title.",
          "type": "string"
        },
        "meta_keywords": {
          "description": "Custom meta keywords for the product page. If not defined, the store's default keywords will be used.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "meta_description": {
          "description": "Custom meta description for the product page. If not defined, the store's default meta description will be used.",
          "type": "string"
        },
        "view_count": {
          "description": "The number of times the product has been viewed.",
          "example": 146,
          "type": "number",
          "format": "double"
        },
        "preorder_release_date": {
          "description": "Pre-order release date. See the availability field for details on setting a product's availability to accept pre-orders.",
          "example": "null",
          "type": "string"
        },
        "preorder_message": {
          "description": "Custom expected-date message to display on the product page. If undefined, the message defaults to the storewide setting. Can contain the %%DATE%% placeholder, which will be substituted for the release date.",
          "type": "string"
        },
        "is_preorder_only": {
          "description": "If set to false, the product will not change its availability from preorder to available on the release date. Otherwise, on the release date the product's availability/status will change to available.",
          "example": false,
          "type": "boolean"
        },
        "is_price_hidden": {
          "description": "False by default, indicating that this product's price should be shown on the product page. If set to true, the price is hidden. (NOTE: To successfully set is_price_hidden to true, the availability value must be disabled.)",
          "example": false,
          "type": "boolean"
        },
        "price_hidden_label": {
          "description": "By default, an empty string. If is_price_hidden is true, the value of price_hidden_label is displayed instead of the price. (NOTE: To successfully set a non-empty string value with is_price_hidden set to true, the availability value must be disabled.)",
          "type": "string"
        },
        "custom_url": {
          "$ref": "#/definitions/CustomUrlProduct"
        },
        "open_graph_type": {
          "$ref": "#/definitions/OpenGraphType"
        },
        "open_graph_title": {
          "description": "Title of the product, if not specified the product name will be used instead.",
          "type": "string"
        },
        "open_graph_description": {
          "description": "Description to use for the product, if not specified then the meta_description will be used instead.",
          "type": "string"
        },
        "open_graph_use_meta_description": {
          "description": "Flag to determine if product description or open graph description is used.",
          "type": "boolean"
        },
        "open_graph_use_product_name": {
          "description": "Flag to determine if product name or open graph name is used.",
          "type": "boolean"
        },
        "open_graph_use_image": {
          "description": "Flag to determine if product image or open graph image is used.",
          "type": "boolean"
        },
        "custom_fields": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomFieldBase"
          }
        },
        "bulk_pricing_rules": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BulkPricingRuleBase"
          }
        },
        "variants": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariantProductPost"
          }
        }
      },
      "required": [
        "name",
        "type",
        "weight",
        "price",
        "categories"
      ]
    },
    "CustomFieldBase": {
      "title": "CustomFieldBase",
      "description": "Common CustomField properties.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the field, shown on the storefront, orders, etc.",
          "example": "Release year",
          "type": "string"
        },
        "value": {
          "description": "The name of the field, shown on the storefront, orders, etc.",
          "example": "1987",
          "type": "string"
        }
      }
    },
    "BulkPricingRuleBase": {
      "title": "BulkPricingRuleBase",
      "description": "Common BulkPricingRule properties",
      "type": "object",
      "properties": {
        "quantity_min": {
          "description": "The minimum inclusive quantity of a product to satisfy this rule. Must be greater than or equal to zero.",
          "example": 10,
          "type": "number",
          "format": "double"
        },
        "quantity_max": {
          "description": "The maximum inclusive quantity of a product to satisfy this rule. Must be greater than the `quantity_min` value – unless this field has a value of 0 (zero), in which case there will be no maximum bound for this rule.",
          "example": 50,
          "type": "number",
          "format": "double"
        },
        "type": {
          "$ref": "#/definitions/Type145"
        },
        "amount": {
          "description": "The value of the adjustment by the bulk pricing rule.",
          "example": 10,
          "type": "number",
          "format": "double"
        }
      }
    },
    "CustomFieldBasePOST": {
      "title": "CustomFieldBasePOST",
      "description": "Common CustomField properties.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the field, shown on the storefront, orders, etc.",
          "example": "Release year",
          "type": "string"
        },
        "value": {
          "description": "The name of the field, shown on the storefront, orders, etc.",
          "example": "1987",
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ]
    },
    "BulkPricingRuleBasePOST": {
      "title": "BulkPricingRuleBasePOST",
      "description": "Common BulkPricingRule properties",
      "type": "object",
      "properties": {
        "quantity_min": {
          "description": "The minimum inclusive quantity of a product to satisfy this rule. Must be greater than or equal to zero.",
          "example": 10,
          "type": "number",
          "format": "double"
        },
        "quantity_max": {
          "description": "The maximum inclusive quantity of a product to satisfy this rule. Must be greater than the `quantity_min` value – unless this field has a value of 0 (zero), in which case there will be no maximum bound for this rule.",
          "example": 50,
          "type": "number",
          "format": "double"
        },
        "type": {
          "$ref": "#/definitions/Type145"
        },
        "amount": {
          "description": "The value of the adjustment by the bulk pricing rule.",
          "example": 10,
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "quantity_min",
        "quantity_max",
        "type",
        "amount"
      ]
    },
    "ProductPut": {
      "title": "ProductPut",
      "description": "The model for a PUT to update a product.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The product name.",
          "example": "Fog Linen Chambray Towel - Beige Stripe",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/Type136"
        },
        "sku": {
          "description": "User defined product code/stock keeping unit (SKU).",
          "example": "SLCTBS",
          "type": "string"
        },
        "description": {
          "description": "The product description, which can include HTML formatting.",
          "example": "<p>The perfect beach towel: thin, lightweight and highly absorbent. Crafted by Fog Linen in Japan using soft Lithuanian linen, each towel rolls up for compact stowaway. Dry off after a refreshing dip in the ocean and stretch out on it for a sun bath. The thinness ensures a quick dry so you can have it rolled back up in your bag without soaking your belongings.</p>\\r\\n<p>Measures 75 x 145 cm/29.5 x 57 in</p>\\r\\n<p>100% Linen</p>",
          "type": "string"
        },
        "weight": {
          "description": "Weight of the product, which can be used when calculating shipping costs.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "width": {
          "description": "Width of the product, which can be used when calculating shipping costs.",
          "example": 6,
          "type": "number",
          "format": "double"
        },
        "depth": {
          "description": "Depth of the product, which can be used when calculating shipping costs.",
          "example": 2,
          "type": "number",
          "format": "double"
        },
        "height": {
          "description": "Height of the product, which can be used when calculating shipping costs.",
          "example": 4,
          "type": "number",
          "format": "double"
        },
        "price": {
          "description": "The price of the product. The price should include or exclude tax, based on the store settings.",
          "example": 49.99,
          "type": "number",
          "format": "double"
        },
        "cost_price": {
          "description": "The cost price of the product. Stored for reference only; it is not used or displayed anywhere on the store.",
          "example": 12.99,
          "type": "number",
          "format": "double"
        },
        "retail_price": {
          "description": "The retail cost of the product. If entered, the retail cost price will be shown on the product page.",
          "example": 32.99,
          "type": "number",
          "format": "double"
        },
        "sale_price": {
          "description": "If entered, the sale price will be used instead of value in the price field when calculating the product's cost.",
          "type": "number",
          "format": "double"
        },
        "tax_class_id": {
          "description": "The ID of the tax class applied to the product. (NOTE: Value ignored if automatic tax is enabled.)",
          "example": 0,
          "type": "number",
          "format": "double"
        },
        "product_tax_code": {
          "description": "Accepts AvaTax System Tax Codes, which identify products and services that fall into special sales-tax categories. By using these codes, merchants who subscribe to BigCommerce's Avalara Premium integration can calculate sales taxes more accurately. Stores without Avalara Premium will ignore the code when calculating sales tax. Do not pass more than one code. The codes are case-sensitive. For details, please see Avalara's documentation.",
          "example": "3451",
          "type": "string"
        },
        "categories": {
          "description": "An array of IDs for the categories to which this product belongs. When updating a product, if an array of categories is supplied, all product categories will be overwritten. Does not accept more than 1,000 ID values.",
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "brand_id": {
          "description": "The ID associated with the products brand.",
          "example": 5,
          "type": "number",
          "format": "double"
        },
        "inventory_level": {
          "description": "Current inventory level of the product. Simple inventory tracking must be enabled (See the inventory_tracking field) for this to take any effect.",
          "example": 10,
          "type": "number",
          "format": "double"
        },
        "inventory_warning_level": {
          "description": "Inventory warning level for the product. When the product's inventory level drops below the warning level, the store owner will be informed. Simple inventory tracking must be enabled (see the inventory_tracking field) for this to take any effect.",
          "example": 10,
          "type": "number",
          "format": "double"
        },
        "inventory_tracking": {
          "$ref": "#/definitions/InventoryTracking"
        },
        "fixed_cost_shipping_price": {
          "description": "A fixed shipping cost for the product. If defined, this value will be used during checkout instead of normal shipping-cost calculation.",
          "example": 8,
          "type": "number",
          "format": "double"
        },
        "is_free_shipping": {
          "description": "Flag used to indicate whether the product has free shipping. If true, the shipping cost for the product will be zero.",
          "example": false,
          "type": "boolean"
        },
        "is_visible": {
          "description": "Flag to determine whether the product should be displayed to customers browsing the store. If true, the product will be displayed. If false, the product will be hidden from view.",
          "example": true,
          "type": "boolean"
        },
        "is_featured": {
          "description": "Flag to determine whether the product should be included in the featured products panel when viewing the store.",
          "example": true,
          "type": "boolean"
        },
        "related_products": {
          "description": "An array of IDs for the related products.",
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "warranty": {
          "description": "Warranty information displayed on the product page. Can include HTML formatting.",
          "type": "string"
        },
        "bin_picking_number": {
          "description": "The BIN picking number for the product.",
          "example": "56WB",
          "type": "string"
        },
        "layout_file": {
          "description": "The layout template file used to render this product.",
          "example": "product.html",
          "type": "string"
        },
        "upc": {
          "description": "The product UPC code, which is used in feeds for shopping comparison sites and external channel integrations.",
          "example": "1234567890",
          "type": "string"
        },
        "search_keywords": {
          "description": "A comma-separated list of keywords that can be used to locate the product when searching the store.",
          "example": "towel, bath, kitchen",
          "type": "string"
        },
        "availability": {
          "$ref": "#/definitions/Availability"
        },
        "availability_description": {
          "description": "Availability text displayed on the checkout page, under the product title. Tells the customer how long it will normally take to ship this product, such as: 'Usually ships in 24 hours.'",
          "type": "string"
        },
        "gift_wrapping_options_type": {
          "$ref": "#/definitions/GiftWrappingOptionsType"
        },
        "gift_wrapping_options_list": {
          "description": "A list of gift-wrapping option IDs.",
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "sort_order": {
          "description": "Priority to give this product when included in product lists on category pages and in search results. Lower integers will place the product closer to the top of the results.",
          "example": 4,
          "type": "number",
          "format": "double"
        },
        "condition": {
          "$ref": "#/definitions/Condition"
        },
        "is_condition_shown": {
          "description": "Flag used to determine whether the product condition is shown to the customer on the product page.",
          "example": true,
          "type": "boolean"
        },
        "order_quantity_minimum": {
          "description": "The minimum quantity an order must contain, to be eligible to purchase this product.",
          "example": 5,
          "type": "number",
          "format": "double"
        },
        "order_quantity_maximum": {
          "description": "The maximum quantity an order can contain when purchasing the product.",
          "example": 50,
          "type": "number",
          "format": "double"
        },
        "page_title": {
          "description": "Custom title for the product page. If not defined, the product name will be used as the meta title.",
          "type": "string"
        },
        "meta_keywords": {
          "description": "Custom meta keywords for the product page. If not defined, the store's default keywords will be used.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "meta_description": {
          "description": "Custom meta description for the product page. If not defined, the store's default meta description will be used.",
          "type": "string"
        },
        "view_count": {
          "description": "The number of times the product has been viewed.",
          "example": 146,
          "type": "number",
          "format": "double"
        },
        "preorder_release_date": {
          "description": "Pre-order release date. See the availability field for details on setting a product's availability to accept pre-orders.",
          "example": "null",
          "type": "string"
        },
        "preorder_message": {
          "description": "Custom expected-date message to display on the product page. If undefined, the message defaults to the storewide setting. Can contain the %%DATE%% placeholder, which will be substituted for the release date.",
          "type": "string"
        },
        "is_preorder_only": {
          "description": "If set to false, the product will not change its availability from preorder to available on the release date. Otherwise, on the release date the product's availability/status will change to available.",
          "example": false,
          "type": "boolean"
        },
        "is_price_hidden": {
          "description": "False by default, indicating that this product's price should be shown on the product page. If set to true, the price is hidden. (NOTE: To successfully set is_price_hidden to true, the availability value must be disabled.)",
          "example": false,
          "type": "boolean"
        },
        "price_hidden_label": {
          "description": "By default, an empty string. If is_price_hidden is true, the value of price_hidden_label is displayed instead of the price. (NOTE: To successfully set a non-empty string value with is_price_hidden set to true, the availability value must be disabled.)",
          "type": "string"
        },
        "custom_url": {
          "$ref": "#/definitions/CustomUrlProduct"
        },
        "open_graph_type": {
          "$ref": "#/definitions/OpenGraphType"
        },
        "open_graph_title": {
          "description": "Title of the product, if not specified the product name will be used instead.",
          "type": "string"
        },
        "open_graph_description": {
          "description": "Description to use for the product, if not specified then the meta_description will be used instead.",
          "type": "string"
        },
        "open_graph_use_meta_description": {
          "description": "Flag to determine if product description or open graph description is used.",
          "type": "boolean"
        },
        "open_graph_use_product_name": {
          "description": "Flag to determine if product name or open graph name is used.",
          "type": "boolean"
        },
        "open_graph_use_image": {
          "description": "Flag to determine if product image or open graph image is used.",
          "type": "boolean"
        },
        "id": {
          "description": "The unique numerical ID of the product; increments sequentially.",
          "example": 113,
          "type": "number",
          "format": "double"
        },
        "custom_fields": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomField"
          }
        },
        "bulk_pricing_rules": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BulkPricingRule"
          }
        },
        "variants": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VariantProductPut"
          }
        }
      }
    },
    "CatalogSummaryResponse": {
      "title": "CatalogSummaryResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": {
          "inventory_count": 2000,
          "inventory_value": 0,
          "primary_category_id": 23,
          "primary_category_name": "Shop All",
          "variant_count": 28,
          "highest_variant_price": 225,
          "average_variant_price": 53.525693,
          "lowest_variant_price": 13,
          "oldest_variant_date": "2018-01-05",
          "newest_variant_date": "2018-05-07"
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/CatalogSummary"
        },
        "meta": {
          "description": "Empty meta object; may be used later.",
          "type": "object"
        }
      }
    },
    "CatalogSummary": {
      "title": "CatalogSummary",
      "type": "object",
      "properties": {
        "inventory_count": {
          "description": "A count of all inventory items in the catalog.",
          "example": 2000,
          "type": "number",
          "format": "double"
        },
        "inventory_value": {
          "description": "Total value of store's inventory.",
          "example": 0,
          "type": "number",
          "format": "double"
        },
        "primary_category_id": {
          "description": "ID of the category containing the most products.",
          "example": 23,
          "type": "number",
          "format": "double"
        },
        "primary_category_name": {
          "description": "Name of the category containing the most products.",
          "example": "Shop All",
          "type": "string"
        },
        "variant_count": {
          "description": "Number of variants in catalog.",
          "example": 28,
          "type": "number",
          "format": "double"
        },
        "highest_variant_price": {
          "description": "Highest variant price in the catalog.",
          "example": 225,
          "type": "number",
          "format": "double"
        },
        "average_variant_price": {
          "description": "Average price of all catalog variants",
          "example": 53.52569286,
          "type": "number",
          "format": "double"
        },
        "lowest_variant_price": {
          "description": "Lowest variant price in catalog.",
          "example": 13,
          "type": "number",
          "format": "double"
        },
        "oldest_variant_date": {
          "description": "Oldest variant in the catalog.",
          "example": "2018-01-05",
          "type": "string"
        },
        "newest_variant_date": {
          "description": "Newest variant in the catalog.",
          "example": "2018-05-07",
          "type": "string"
        }
      }
    },
    "MetaFieldCollectionResponse": {
      "title": "MetaFieldCollectionResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": [
          {
            "permission_set": "app_only",
            "namespace": "Warehouse SKUS",
            "key": "Location",
            "value": "4H",
            "description": "location in the warehouse",
            "resource_type": "category",
            "resource_id": 111,
            "id": 6,
            "created_at": "2018-05-07T20:14:17+00:00",
            "updated_at": "2018-05-07T20:14:17+00:00"
          }
        ],
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Metafield"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "Metafield": {
      "title": "Metafield",
      "type": "object",
      "properties": {
        "permission_set": {
          "$ref": "#/definitions/PermissionSet"
        },
        "namespace": {
          "description": "Namespace for the metafield, for organizational purposes.",
          "example": "Warehouse SKUS",
          "type": "string"
        },
        "key": {
          "description": "The name of the field, for example: `location_id`, `color`.",
          "example": "Location",
          "type": "string"
        },
        "value": {
          "description": "The value of the field, for example: `1`, `blue`.",
          "example": "4H",
          "type": "string"
        },
        "description": {
          "description": "Description for the metafields.",
          "example": "location in the warehouse",
          "type": "string"
        },
        "resource_type": {
          "$ref": "#/definitions/ResourceType"
        },
        "resource_id": {
          "description": "The unique identifier for the resource with which the metafield is associated. This will be the `product_id`, `category_id` etc.",
          "example": 111,
          "type": "number",
          "format": "double"
        },
        "id": {
          "description": "The unique identifier for the metafields.",
          "example": 6,
          "type": "number",
          "format": "double"
        },
        "created_at": {
          "description": "Date and time of the metafield's creation.",
          "example": "5/7/2018 8:14:17 PM",
          "type": "string"
        },
        "updated_at": {
          "description": "Date and time when the metafield was last updated.",
          "example": "5/7/2018 8:14:17 PM",
          "type": "string"
        }
      }
    },
    "PermissionSet": {
      "title": "permission_set",
      "example": "app_only",
      "x-enum-elements": [
        {
          "name": "app_only",
          "description": ""
        },
        {
          "name": "read",
          "description": ""
        },
        {
          "name": "write",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "app_only",
        "read",
        "write"
      ]
    },
    "ResourceType": {
      "title": "resource_type",
      "example": "category",
      "x-enum-elements": [
        {
          "name": "category",
          "description": ""
        },
        {
          "name": "brand",
          "description": ""
        },
        {
          "name": "product",
          "description": ""
        },
        {
          "name": "variant",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "category",
        "brand",
        "product",
        "variant"
      ]
    },
    "MetafieldResponse": {
      "title": "MetafieldResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": {
          "permission_set": "app_only",
          "namespace": "Warehouse SKUS",
          "key": "Location",
          "value": "4H",
          "description": "location in the warehouse",
          "resource_type": "category",
          "resource_id": 111,
          "id": 6,
          "created_at": "2018-05-07T20:14:17+00:00",
          "updated_at": "2018-05-07T20:14:17+00:00"
        },
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Metafield"
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "MetafieldBase": {
      "title": "MetafieldBase",
      "description": "Common Metafield properties.",
      "type": "object",
      "properties": {
        "permission_set": {
          "$ref": "#/definitions/PermissionSet"
        },
        "namespace": {
          "description": "Namespace for the metafield, for organizational purposes.",
          "example": "App Namespace",
          "type": "string"
        },
        "key": {
          "description": "The name of the field, for example: `location_id`, `color`.",
          "example": "location_id",
          "type": "string"
        },
        "value": {
          "description": "The value of the field, for example: `1`, `blue`.",
          "example": "Shelf 3, Bin 5",
          "type": "string"
        },
        "description": {
          "description": "Description for the metafields.",
          "example": "Where products are locationed",
          "type": "string"
        },
        "resource_type": {
          "$ref": "#/definitions/ResourceType"
        },
        "resource_id": {
          "description": "The unique identifier for the resource with which the metafield is associated. This will be the `product_id`, `category_id` etc.",
          "example": 111,
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "permission_set",
        "namespace",
        "key",
        "value"
      ]
    },
    "MetafieldPut": {
      "title": "MetafieldPut",
      "description": "The model for a PUT to update metafield.",
      "type": "object",
      "properties": {
        "permission_set": {
          "$ref": "#/definitions/PermissionSet"
        },
        "namespace": {
          "description": "Namespace for the metafield, for organizational purposes.",
          "example": "Warehouse SKUS",
          "type": "string"
        },
        "key": {
          "description": "The name of the field, for example: `location_id`, `color`.",
          "example": "Location",
          "type": "string"
        },
        "value": {
          "description": "The value of the field, for example: `1`, `blue`.",
          "example": "4H",
          "type": "string"
        },
        "description": {
          "description": "Description for the metafields.",
          "example": "Location in the warehouse",
          "type": "string"
        },
        "resource_type": {
          "$ref": "#/definitions/ResourceType"
        },
        "resource_id": {
          "description": "The unique identifier for the resource with which the metafield is associated. This will be the `product_id`, `category_id` etc.",
          "example": 111,
          "type": "number",
          "format": "double"
        }
      }
    },
    "ComplexRuleCollectionResponse": {
      "title": "ComplexRuleCollectionResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": [
          {
            "product_id": 77,
            "sort_order": 0,
            "enabled": true,
            "stop": false,
            "purchasing_disabled": false,
            "purchasing_hidden": false,
            "price_adjuster": {
              "adjuster": "relative",
              "adjuster_value": 6
            },
            "weight_adjuster": {
              "adjuster": "relative",
              "adjuster_value": 6
            },
            "id": 5,
            "conditions": [
              {
                "id": 5,
                "rule_id": 5,
                "modifier_id": 123,
                "modifier_value_id": 104,
                "combination_id": 0
              }
            ]
          }
        ],
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComplexRule"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "ComplexRule": {
      "title": "ComplexRule",
      "type": "object",
      "properties": {
        "product_id": {
          "description": "The unique numeric ID of the product with which the rule is associated; increments sequentially.",
          "example": 77,
          "type": "number",
          "format": "double"
        },
        "sort_order": {
          "description": "The priority to give this rule when making adjustments to the product properties.",
          "example": 0,
          "type": "number",
          "format": "double"
        },
        "enabled": {
          "description": "Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty.",
          "example": true,
          "type": "boolean"
        },
        "stop": {
          "description": "Flag for determining whether other rules should not be applied after this rule has been applied.",
          "example": false,
          "type": "boolean"
        },
        "purchasing_disabled": {
          "description": "Flag for determining whether the rule should disable purchasing of a product when the conditions are applied.",
          "example": false,
          "type": "boolean"
        },
        "purchasing_disabled_message": {
          "description": "Message displayed on the storefront when a rule disables the purchasing of a product.",
          "type": "string"
        },
        "purchasing_hidden": {
          "description": "Flag for determining whether the rule should hide purchasing of a product when the conditions are applied.",
          "example": false,
          "type": "boolean"
        },
        "price_adjuster": {
          "$ref": "#/definitions/Adjuster"
        },
        "weight_adjuster": {
          "$ref": "#/definitions/Adjuster"
        },
        "id": {
          "description": "The unique numeric ID of the rule; increments sequentially.",
          "example": 5,
          "type": "number",
          "format": "double"
        },
        "image_url": {
          "description": "The URL for an image displayed on the storefront when the conditions are applied.",
          "type": "string"
        },
        "conditions": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComplexRuleCondition"
          }
        }
      }
    },
    "ComplexRuleCondition": {
      "title": "ComplexRuleCondition",
      "description": "Complex rules may return with conditions that apply to one or more variants, or with a single modifier value (if the rules were created using the v2 API or the control panel). Complex rules created or updated in the v3 API must have conditions that either reference multiple `modifier_value_id`'s, or else reference a `modifier_value_id` and a `variant_id`.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique numeric ID of the rule condition; increments sequentially.",
          "example": 5,
          "type": "number",
          "format": "double"
        },
        "rule_id": {
          "description": "The unique numeric ID of the rule with which the condition is associated.",
          "example": 5,
          "type": "number",
          "format": "double"
        },
        "modifier_id": {
          "description": "The unique numeric ID of the modifier with which the rule condition is associated.",
          "example": 123,
          "type": "number",
          "format": "double"
        },
        "modifier_value_id": {
          "description": "The unique numeric ID of the modifier value with which the rule condition is associated.",
          "example": 104,
          "type": "number",
          "format": "double"
        },
        "variant_id": {
          "description": "The unique numeric ID of the variant with which the rule condition is associated.",
          "type": "number",
          "format": "double"
        },
        "combination_id": {
          "description": "(READ-ONLY:) The unique numeric ID of the SKU (v2 API), or Combination, with which the rule condition is associated. This is to maintain cross-compatibility between v2 and v3.",
          "example": 0,
          "type": "number",
          "format": "double"
        }
      }
    },
    "ComplexRuleResponse": {
      "title": "ComplexRuleResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": {
          "product_id": 77,
          "sort_order": 0,
          "enabled": true,
          "stop": false,
          "purchasing_disabled": false,
          "purchasing_hidden": false,
          "price_adjuster": {
            "adjuster": "relative",
            "adjuster_value": 6
          },
          "weight_adjuster": {
            "adjuster": "relative",
            "adjuster_value": 6
          },
          "id": 5,
          "conditions": [
            {
              "id": 5,
              "rule_id": 5,
              "modifier_id": 123,
              "modifier_value_id": 104,
              "combination_id": 0
            }
          ]
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ComplexRule"
        },
        "meta": {
          "description": "Empty meta object; may be used later.",
          "type": "object"
        }
      }
    },
    "ComplexRuleBase": {
      "title": "ComplexRuleBase",
      "description": "Common ComplexRule properties.",
      "type": "object",
      "properties": {
        "product_id": {
          "description": "The unique numeric ID of the product with which the rule is associated; increments sequentially.",
          "example": 77,
          "type": "number",
          "format": "double"
        },
        "sort_order": {
          "description": "The priority to give this rule when making adjustments to the product properties.",
          "example": 0,
          "type": "number",
          "format": "double"
        },
        "enabled": {
          "description": "Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty.",
          "example": true,
          "type": "boolean"
        },
        "stop": {
          "description": "Flag for determining whether other rules should not be applied after this rule has been applied.",
          "example": false,
          "type": "boolean"
        },
        "purchasing_disabled": {
          "description": "Flag for determining whether the rule should disable purchasing of a product when the conditions are applied.",
          "example": false,
          "type": "boolean"
        },
        "purchasing_disabled_message": {
          "description": "Message displayed on the storefront when a rule disables the purchasing of a product.",
          "type": "string"
        },
        "purchasing_hidden": {
          "description": "Flag for determining whether the rule should hide purchasing of a product when the conditions are applied.",
          "example": false,
          "type": "boolean"
        },
        "price_adjuster": {
          "$ref": "#/definitions/Adjuster"
        },
        "weight_adjuster": {
          "$ref": "#/definitions/Adjuster"
        }
      }
    },
    "ComplexRulePost": {
      "title": "ComplexRulePost",
      "description": "The model for a POST to create a complex rule on a product.",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComplexRuleConditionBase"
          }
        },
        "product_id": {
          "description": "The unique numeric ID of the product with which the rule is associated; increments sequentially.",
          "example": 77,
          "type": "number",
          "format": "double"
        },
        "sort_order": {
          "description": "The priority to give this rule when making adjustments to the product properties.",
          "example": 0,
          "type": "number",
          "format": "double"
        },
        "enabled": {
          "description": "Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty.",
          "example": true,
          "type": "boolean"
        },
        "stop": {
          "description": "Flag for determining whether other rules should not be applied after this rule has been applied.",
          "example": false,
          "type": "boolean"
        },
        "purchasing_disabled": {
          "description": "Flag for determining whether the rule should disable purchasing of a product when the conditions are applied.",
          "example": false,
          "type": "boolean"
        },
        "purchasing_disabled_message": {
          "description": "Message displayed on the storefront when a rule disables the purchasing of a product.",
          "type": "string"
        },
        "purchasing_hidden": {
          "description": "Flag for determining whether the rule should hide purchasing of a product when the conditions are applied.",
          "example": false,
          "type": "boolean"
        },
        "price_adjuster": {
          "$ref": "#/definitions/Adjuster"
        },
        "weight_adjuster": {
          "$ref": "#/definitions/Adjuster"
        }
      },
      "required": [
        "conditions"
      ]
    },
    "ComplexRuleConditionBase": {
      "title": "ComplexRuleConditionBase",
      "description": "Common ComplexRuleCondition properties.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique numeric ID of the rule condition; increments sequentially.",
          "example": 5,
          "type": "number",
          "format": "double"
        },
        "rule_id": {
          "description": "The unique numeric ID of the rule with which the condition is associated.",
          "example": 5,
          "type": "number",
          "format": "double"
        },
        "modifier_id": {
          "description": "The unique numeric ID of the modifier with which the rule condition is associated.",
          "example": 123,
          "type": "number",
          "format": "double"
        },
        "modifier_value_id": {
          "description": "The unique numeric ID of the modifier value with which the rule condition is associated.",
          "example": 104,
          "type": "number",
          "format": "double"
        },
        "variant_id": {
          "description": "The unique numeric ID of the variant with which the rule condition is associated.",
          "type": "number",
          "format": "double"
        }
      }
    },
    "ComplexRulePut": {
      "title": "ComplexRulePut",
      "description": "The model for a PUT to update a complex rule on a product.",
      "type": "object",
      "properties": {
        "product_id": {
          "description": "The unique numeric ID of the product with which the rule is associated; increments sequentially.",
          "example": 77,
          "type": "number",
          "format": "double"
        },
        "sort_order": {
          "description": "The priority to give this rule when making adjustments to the product properties.",
          "example": 0,
          "type": "number",
          "format": "double"
        },
        "enabled": {
          "description": "Flag for determining whether the rule is to be used when adjusting a product's price, weight, image, or availabilty.",
          "example": true,
          "type": "boolean"
        },
        "stop": {
          "description": "Flag for determining whether other rules should not be applied after this rule has been applied.",
          "example": false,
          "type": "boolean"
        },
        "purchasing_disabled": {
          "description": "Flag for determining whether the rule should disable purchasing of a product when the conditions are applied.",
          "example": false,
          "type": "boolean"
        },
        "purchasing_disabled_message": {
          "description": "Message displayed on the storefront when a rule disables the purchasing of a product.",
          "type": "string"
        },
        "purchasing_hidden": {
          "description": "Flag for determining whether the rule should hide purchasing of a product when the conditions are applied.",
          "example": false,
          "type": "boolean"
        },
        "price_adjuster": {
          "$ref": "#/definitions/Adjuster"
        },
        "weight_adjuster": {
          "$ref": "#/definitions/Adjuster"
        },
        "id": {
          "description": "The unique numeric ID of the rule; increments sequentially.",
          "example": 5,
          "type": "number",
          "format": "double"
        },
        "conditions": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComplexRuleConditionBase"
          }
        }
      }
    },
    "CustomFieldCollectionResponse": {
      "title": "CustomFieldCollectionResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": [
          {
            "name": "Release year",
            "value": "1987",
            "id": 1
          }
        ],
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomField"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "CustomFieldResponse": {
      "title": "CustomFieldResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": {
          "name": "Release year",
          "value": "1987",
          "id": 1
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/CustomField"
        },
        "meta": {
          "description": "Empty meta object; may be used later.",
          "type": "object"
        }
      }
    },
    "BulkPricingRuleCollectionResponse": {
      "title": "BulkPricingRuleCollectionResponse",
      "description": "Response payload for the BigCommerce bulk pricing rules API.",
      "example": {
        "data": [
          {
            "quantity_min": 10,
            "quantity_max": 50,
            "type": "price",
            "amount": 10,
            "id": 3
          }
        ],
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BulkPricingRule"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "BulkPricingRuleResponse": {
      "title": "BulkPricingRuleResponse",
      "description": "Response payload for the BigCommerce single bulk pricing rule API.",
      "example": {
        "data": {
          "quantity_min": 10,
          "quantity_max": 50,
          "type": "price",
          "amount": 10,
          "id": 3
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/BulkPricingRule"
        },
        "meta": {
          "description": "Empty meta object; may be used later.",
          "type": "object"
        }
      }
    },
    "PriceListCollectionResponse": {
      "title": "PriceListCollectionResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": [
          {
            "id": 1,
            "date_created": "2018-05-08T14:05:27Z",
            "date_modified": "2018-05-08T14:05:27Z",
            "name": "B2B Discount",
            "active": true
          }
        ],
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceList"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "PriceList": {
      "title": "PriceList",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique numeric ID of the `Price List`; increments sequentially.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "date_created": {
          "description": "The date on which the `Price List` was created.",
          "example": "5/8/2018 2:05:27 PM",
          "type": "string"
        },
        "date_modified": {
          "description": "The date on which the `Price List` was created.",
          "example": "5/8/2018 2:05:27 PM",
          "type": "string"
        },
        "name": {
          "description": "The unique name of the Price List.",
          "example": "B2B Discount",
          "type": "string"
        },
        "active": {
          "description": "Whether or not this `Price List` and its prices are active.  Defaults to `true`.",
          "example": true,
          "type": "boolean"
        }
      }
    },
    "PriceListResponse": {
      "title": "PriceListResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": {
          "id": 1,
          "date_created": "2018-05-08T14:05:27Z",
          "date_modified": "2018-05-08T14:05:27Z",
          "name": "B2B Discount",
          "active": true
        },
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/PriceList"
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "PriceListBase": {
      "title": "PriceListBase",
      "description": "Common Price List properties.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The unique name of the Price List.",
          "example": "Wholesale group",
          "type": "string"
        },
        "active": {
          "description": "Whether or not this `Price List` and its prices are active.  Defaults to `true`.",
          "example": false,
          "type": "boolean"
        }
      },
      "required": [
        "name"
      ]
    },
    "PriceListBasePOST": {
      "title": "PriceListBasePOST",
      "description": "Common Price List properties.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The unique name of the Price List.",
          "example": "Wholesale group",
          "type": "string"
        },
        "active": {
          "description": "Whether or not this `Price List` and its prices are active.  Defaults to `true`.",
          "example": false,
          "type": "boolean"
        }
      },
      "required": [
        "name"
      ]
    },
    "PriceRecordCollectionResponse": {
      "title": "PriceRecordCollectionResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": [
          {
            "calculated_price": 48.99,
            "date_created": "2018-05-08T14:05:27Z",
            "date_modified": "2018-05-08T14:05:27Z",
            "product_id": 77,
            "price": 48.99,
            "bulk_pricing_tiers": [
              {
                "quantity_min": 1,
                "quantity_max": 10,
                "type": "price",
                "amount": 3
              }
            ],
            "sku": "SLCTBS",
            "price_list_id": 1,
            "variant_id": "66"
          }
        ],
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceRecord"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "PriceRecord": {
      "title": "PriceRecord",
      "description": "The comprehensive Price Record object.",
      "type": "object",
      "properties": {
        "calculated_price": {
          "description": "The price of the variant as seen on the storefront if a price record is in effect. It will be equal to the `sale_price`, if set, and the `price` if there is not a `sale_price`.  Read only.",
          "example": 48.99,
          "type": "number",
          "format": "double"
        },
        "date_created": {
          "description": "The date on which the Price entry was created.",
          "example": "5/8/2018 2:05:27 PM",
          "type": "string"
        },
        "date_modified": {
          "description": "The date on which the Price entry was created.",
          "example": "5/8/2018 2:05:27 PM",
          "type": "string"
        },
        "product_id": {
          "description": "The id of the product this `Price Record`'s variant_id is associated with.  Read only.",
          "example": 77,
          "type": "number",
          "format": "double"
        },
        "price": {
          "description": "The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.",
          "example": 48.99,
          "type": "number",
          "format": "double"
        },
        "sale_price": {
          "description": "The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.",
          "type": "number",
          "format": "double"
        },
        "retail_price": {
          "description": "The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant.",
          "type": "number",
          "format": "double"
        },
        "map_price": {
          "description": "The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.",
          "type": "number",
          "format": "double"
        },
        "bulk_pricing_tiers": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BulkPricingTier"
          }
        },
        "sku": {
          "description": "The SKU code associated with this Price Record if requested and it exists.",
          "example": "SLCTBS",
          "type": "string"
        },
        "price_list_id": {
          "description": "The Price List with which this price set is associated.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "variant_id": {
          "description": "The variant the Price Record is associated with.",
          "example": "66",
          "type": "string"
        }
      }
    },
    "BulkPricingTier": {
      "title": "BulkPricingTier",
      "type": "object",
      "properties": {
        "quantity_min": {
          "description": "The minimum quantity of associated variant in the cart needed to qualify for this tiers pricing.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "quantity_max": {
          "description": "The maximum allowed quantity of associated variant in the cart to qualify for this tiers pricing.",
          "example": 10,
          "type": "number",
          "format": "double"
        },
        "type": {
          "$ref": "#/definitions/Type145"
        },
        "amount": {
          "description": "The price adjustment amount. This value along with the type will decide the price per variant for the pricing tier.",
          "example": 3,
          "type": "number",
          "format": "double"
        }
      }
    },
    "PriceRecordResponse": {
      "title": "PriceRecordResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": {
          "calculated_price": 48.99,
          "date_created": "2018-05-08T14:05:27Z",
          "date_modified": "2018-05-08T14:05:27Z",
          "product_id": 77,
          "price": 48.99,
          "bulk_pricing_tiers": [
            {
              "quantity_min": 1,
              "quantity_max": 10,
              "type": "price",
              "amount": 3
            }
          ],
          "sku": "SLCTBS",
          "price_list_id": 1,
          "variant_id": "66"
        },
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/PriceRecord"
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "PriceRecordBase": {
      "title": "PriceRecordBase",
      "description": "Common Price Record properties.",
      "type": "object",
      "properties": {
        "price": {
          "description": "The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.",
          "example": 48.99,
          "type": "number",
          "format": "double"
        },
        "sale_price": {
          "description": "The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.",
          "type": "number",
          "format": "double"
        },
        "retail_price": {
          "description": "The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant.",
          "type": "number",
          "format": "double"
        },
        "map_price": {
          "description": "The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.",
          "type": "number",
          "format": "double"
        },
        "bulk_pricing_tiers": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BulkPricingTier"
          }
        },
        "sku": {
          "description": "The SKU code associated with this `Price Record` if requested and it exists.",
          "example": "SM-ORANGE",
          "type": "string"
        }
      }
    },
    "PriceRecordBatchItem": {
      "title": "PriceRecordBatchItem",
      "description": "`Price Record` object used in batch create or update.",
      "type": "object",
      "properties": {
        "variant_id": {
          "description": "The variant with which this price set is associated. Either variant_id or sku is required.",
          "example": 66,
          "type": "number",
          "format": "double"
        },
        "sku": {
          "description": "The sku for the variant with which this price set is associated.  Either sku or variant_id is required.",
          "example": "SM-ORANGE",
          "type": "string"
        },
        "currency": {
          "description": "The 3-letter currency code with which this price set is associated.",
          "example": "usd",
          "type": "string"
        },
        "price": {
          "description": "The list price for the variant mapped in a Price List. Overrides any existing or Catalog list price for the variant/product.",
          "example": 48.99,
          "type": "number",
          "format": "double"
        },
        "sale_price": {
          "description": "The sale price for the variant mapped in a Price List. Overrides any existing or Catalog sale price for the variant/product. If empty, the sale price will be treated as not being set on this variant.",
          "type": "number",
          "format": "double"
        },
        "retail_price": {
          "description": "The retail price for the variant mapped in a Price List. Overrides any existing or Catalog retail price for the variant/product.  If empty, the retail price will be treated as not being set on this variant.",
          "type": "number",
          "format": "double"
        },
        "map_price": {
          "description": "The MAP (Manufacturer's Advertised Price) for the variant mapped in a Price List. Overrides any existing or Catalog MAP price for the variant/product. If empty, the MAP price will be treated as not being set on this variant.",
          "type": "number",
          "format": "double"
        },
        "bulk_pricing_tiers": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BulkPricingTier"
          }
        }
      },
      "required": [
        "variant_id",
        "sku",
        "currency"
      ]
    },
    "PriceRecordIdentifiers": {
      "title": "PriceRecordIdentifiers",
      "type": "object",
      "properties": {
        "price_list_id": {
          "description": "The Price List with which this price set is associated.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "variant_id": {
          "description": "The variant with which this price set is associated. Either variant_id or sku is required.",
          "example": 66,
          "type": "number",
          "format": "double"
        },
        "sku": {
          "description": "The variant with which this price set is associated. Either sku or variant_id is required.",
          "example": "SM-ORANGE",
          "type": "string"
        },
        "currency": {
          "description": "The 3-letter currency code with which this price set is associated.",
          "example": "usd",
          "type": "string"
        }
      }
    },
    "PriceRecordBatchErrorSet": {
      "title": "PriceRecordBatchErrorSet",
      "description": "Error during `Price Record` batch PUT.  Includes data sent in the request and errors.",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/PriceRecordIdentifiers"
        },
        "field_errors": {
          "description": "",
          "type": "string"
        }
      }
    },
    "BaseError": {
      "title": "BaseError",
      "description": "Error payload for the BigCommerce API.",
      "type": "object",
      "properties": {
        "status": {
          "description": "The HTTP status code.",
          "type": "number",
          "format": "double"
        },
        "title": {
          "description": "The error title describing the particular error.",
          "type": "string"
        },
        "type": {
          "description": "",
          "type": "string"
        },
        "instance": {
          "description": "",
          "type": "string"
        }
      }
    },
    "TransactionPost": {
      "title": "TransactionPost",
      "description": "Payload to create a transaction in BigCommerce.",
      "type": "object",
      "properties": {
        "event": {
          "$ref": "#/definitions/Event"
        },
        "method": {
          "$ref": "#/definitions/Method"
        },
        "amount": {
          "description": "Amount of money in the transaction.",
          "type": "number",
          "format": "double"
        },
        "currency": {
          "description": "Currency used for the transaction.",
          "type": "string"
        },
        "gateway": {
          "$ref": "#/definitions/Gateway"
        },
        "gateway_transaction_id": {
          "description": "The transaction ID returned by the payment gateway for this transaction item.",
          "type": "string"
        },
        "date_created": {
          "description": "The datetime of the transaction.",
          "type": "string"
        },
        "test": {
          "description": "True if the transaction performed was a test, or if the gateway is in test mode.",
          "type": "boolean"
        },
        "status": {
          "$ref": "#/definitions/Status218"
        },
        "fraud_review": {
          "description": "Result of gateway fraud review, if any. Default is `false`.",
          "type": "boolean"
        },
        "reference_transaction_id": {
          "description": "Identifier for an existing transaction upon which this transaction acts.",
          "type": "number",
          "format": "double"
        },
        "offline": {
          "$ref": "#/definitions/Offline"
        },
        "custom": {
          "$ref": "#/definitions/Custom"
        }
      },
      "required": [
        "event",
        "method",
        "amount",
        "currency",
        "gateway"
      ]
    },
    "Event": {
      "title": "event",
      "example": "purchase",
      "x-enum-elements": [
        {
          "name": "purchase",
          "description": ""
        },
        {
          "name": "authorization",
          "description": ""
        },
        {
          "name": "capture",
          "description": ""
        },
        {
          "name": "refund",
          "description": ""
        },
        {
          "name": "void",
          "description": ""
        },
        {
          "name": "pending",
          "description": ""
        },
        {
          "name": "settled",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "purchase",
        "authorization",
        "capture",
        "refund",
        "void",
        "pending",
        "settled"
      ]
    },
    "Method": {
      "title": "method",
      "example": "credit_card",
      "x-enum-elements": [
        {
          "name": "credit_card",
          "description": ""
        },
        {
          "name": "electronic_wallet",
          "description": ""
        },
        {
          "name": "gift_certificate",
          "description": ""
        },
        {
          "name": "store_credit",
          "description": ""
        },
        {
          "name": "apple_pay_card",
          "description": ""
        },
        {
          "name": "apple_pay_token",
          "description": ""
        },
        {
          "name": "token",
          "description": ""
        },
        {
          "name": "custom",
          "description": ""
        },
        {
          "name": "offsite",
          "description": ""
        },
        {
          "name": "offline",
          "description": ""
        },
        {
          "name": "nonce",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "credit_card",
        "electronic_wallet",
        "gift_certificate",
        "store_credit",
        "apple_pay_card",
        "apple_pay_token",
        "token",
        "custom",
        "offsite",
        "offline",
        "nonce"
      ]
    },
    "Gateway": {
      "title": "gateway",
      "example": "2checkout",
      "x-enum-elements": [
        {
          "name": "Enum_2checkout",
          "description": ""
        },
        {
          "name": "adyen",
          "description": ""
        },
        {
          "name": "amazon",
          "description": ""
        },
        {
          "name": "authorizenet",
          "description": ""
        },
        {
          "name": "bankdeposit",
          "description": ""
        },
        {
          "name": "braintree",
          "description": ""
        },
        {
          "name": "cheque",
          "description": ""
        },
        {
          "name": "cod",
          "description": ""
        },
        {
          "name": "custom",
          "description": ""
        },
        {
          "name": "firstdatagge4",
          "description": ""
        },
        {
          "name": "giftcertificate",
          "description": ""
        },
        {
          "name": "hps",
          "description": ""
        },
        {
          "name": "instore",
          "description": ""
        },
        {
          "name": "klarna",
          "description": ""
        },
        {
          "name": "migs",
          "description": ""
        },
        {
          "name": "moneyorder",
          "description": ""
        },
        {
          "name": "nmi",
          "description": ""
        },
        {
          "name": "paypalexpress",
          "description": ""
        },
        {
          "name": "paypalpaymentsprous",
          "description": ""
        },
        {
          "name": "paypalpaymentsprouk",
          "description": ""
        },
        {
          "name": "plugnpay",
          "description": ""
        },
        {
          "name": "qbmsv2",
          "description": ""
        },
        {
          "name": "securenet",
          "description": ""
        },
        {
          "name": "square",
          "description": ""
        },
        {
          "name": "storecredit",
          "description": ""
        },
        {
          "name": "stripe",
          "description": ""
        },
        {
          "name": "testgateway",
          "description": ""
        },
        {
          "name": "usaepay",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "2checkout",
        "adyen",
        "amazon",
        "authorizenet",
        "bankdeposit",
        "braintree",
        "cheque",
        "cod",
        "custom",
        "firstdatagge4",
        "giftcertificate",
        "hps",
        "instore",
        "klarna",
        "migs",
        "moneyorder",
        "nmi",
        "paypalexpress",
        "paypalpaymentsprous",
        "paypalpaymentsprouk",
        "plugnpay",
        "qbmsv2",
        "securenet",
        "square",
        "storecredit",
        "stripe",
        "testgateway",
        "usaepay"
      ]
    },
    "Status218": {
      "title": "status218",
      "example": "ok",
      "x-enum-elements": [
        {
          "name": "ok",
          "description": ""
        },
        {
          "name": "error",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "ok",
        "error"
      ]
    },
    "Offline": {
      "title": "Offline",
      "type": "object",
      "properties": {
        "display_name": {
          "description": "Display name for the offline payment.",
          "example": "Cash on Delivery",
          "type": "string"
        }
      }
    },
    "Custom": {
      "title": "Custom",
      "type": "object",
      "properties": {
        "payment_method": {
          "description": "Text entered for the payment method in the control panel.",
          "example": "Cash",
          "type": "string"
        }
      }
    },
    "TransactionResponse": {
      "title": "TransactionResponse",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Transaction"
        },
        "meta": {
          "description": "May be used in the future",
          "type": "object"
        }
      }
    },
    "Transaction": {
      "title": "Transaction",
      "type": "object",
      "properties": {
        "event": {
          "$ref": "#/definitions/Event"
        },
        "method": {
          "$ref": "#/definitions/Method"
        },
        "amount": {
          "description": "Amount of money in the transaction.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "currency": {
          "description": "Currency used for the transaction.",
          "example": "USD",
          "type": "string"
        },
        "gateway": {
          "$ref": "#/definitions/Gateway225"
        },
        "gateway_transaction_id": {
          "description": "The transaction ID returned by the payment gateway for this transaction item.",
          "type": "string"
        },
        "date_created": {
          "description": "The datetime of the transaction.",
          "example": "5/8/2018 3:06:12 PM",
          "type": "string"
        },
        "test": {
          "description": "True if the transaction performed was a test, or if the gateway is in test mode.",
          "example": false,
          "type": "boolean"
        },
        "status": {
          "$ref": "#/definitions/Status218"
        },
        "fraud_review": {
          "description": "Result of gateway fraud review, if any. Default is `false`.",
          "example": false,
          "type": "boolean"
        },
        "reference_transaction_id": {
          "description": "Identifier for an existing transaction upon which this transaction acts.",
          "type": "number",
          "format": "double"
        },
        "offline": {
          "$ref": "#/definitions/Offline"
        },
        "custom": {
          "$ref": "#/definitions/Custom"
        },
        "id": {
          "description": "Unique identifier for the transaction.",
          "type": "number",
          "format": "double"
        },
        "order_id": {
          "description": "Identifier for the BigCommerce Order with which this transaction is associated.",
          "type": "string"
        },
        "payment_instrument_token": {
          "description": "Token for an existing stored Credit Card used for this transaction, if any. Currently Authorize.net, stored cards on Cybersource and Braintree return tokens.",
          "type": "string"
        },
        "avs_result": {
          "$ref": "#/definitions/AVSResult"
        },
        "cvv_result": {
          "$ref": "#/definitions/CVVResult"
        },
        "credit_card": {
          "$ref": "#/definitions/CreditCard"
        },
        "gift_certificate": {
          "$ref": "#/definitions/GiftCertificate"
        },
        "store_credit": {
          "$ref": "#/definitions/StoreCredit"
        }
      },
      "required": [
        "event",
        "method",
        "amount",
        "currency",
        "gateway"
      ]
    },
    "Gateway225": {
      "title": "gateway225",
      "example": "2checkout",
      "x-enum-elements": [
        {
          "name": "Enum_2checkout",
          "description": ""
        },
        {
          "name": "adyen",
          "description": ""
        },
        {
          "name": "amazon",
          "description": ""
        },
        {
          "name": "authorizenet",
          "description": ""
        },
        {
          "name": "bankdeposit",
          "description": ""
        },
        {
          "name": "braintree",
          "description": ""
        },
        {
          "name": "cheque",
          "description": ""
        },
        {
          "name": "cod",
          "description": ""
        },
        {
          "name": "custom",
          "description": ""
        },
        {
          "name": "firstdatagge4",
          "description": ""
        },
        {
          "name": "giftcertificate",
          "description": ""
        },
        {
          "name": "hps",
          "description": ""
        },
        {
          "name": "instore",
          "description": ""
        },
        {
          "name": "klarna",
          "description": ""
        },
        {
          "name": "migs",
          "description": ""
        },
        {
          "name": "moneyorder",
          "description": ""
        },
        {
          "name": "nmi",
          "description": ""
        },
        {
          "name": "paypalexpress",
          "description": ""
        },
        {
          "name": "paypalpaymentsprous",
          "description": ""
        },
        {
          "name": "paypalpaymentsprouk",
          "description": ""
        },
        {
          "name": "plugnpay",
          "description": ""
        },
        {
          "name": "qbmsv2",
          "description": ""
        },
        {
          "name": "securenet",
          "description": ""
        },
        {
          "name": "square",
          "description": ""
        },
        {
          "name": "squarev2",
          "description": ""
        },
        {
          "name": "storecredit",
          "description": ""
        },
        {
          "name": "stripe",
          "description": ""
        },
        {
          "name": "testgateway",
          "description": ""
        },
        {
          "name": "usaepay",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "2checkout",
        "adyen",
        "amazon",
        "authorizenet",
        "bankdeposit",
        "braintree",
        "cheque",
        "cod",
        "custom",
        "firstdatagge4",
        "giftcertificate",
        "hps",
        "instore",
        "klarna",
        "migs",
        "moneyorder",
        "nmi",
        "paypalexpress",
        "paypalpaymentsprous",
        "paypalpaymentsprouk",
        "plugnpay",
        "qbmsv2",
        "securenet",
        "square",
        "squarev2",
        "storecredit",
        "stripe",
        "testgateway",
        "usaepay"
      ]
    },
    "AVSResult": {
      "title": "AVSResult",
      "type": "object",
      "properties": {
        "code": {
          "description": "AVS code.",
          "type": "string"
        },
        "message": {
          "description": "AVS message.",
          "type": "string"
        },
        "street_match": {
          "description": "AVS Code for street matching result.",
          "type": "string"
        },
        "postal_match": {
          "description": "AVS Code for postal matching result.",
          "type": "string"
        }
      }
    },
    "CVVResult": {
      "title": "CVVResult",
      "type": "object",
      "properties": {
        "code": {
          "description": "CVV code.",
          "type": "string"
        },
        "message": {
          "description": "CVV message.",
          "type": "string"
        }
      }
    },
    "CreditCard": {
      "title": "CreditCard",
      "type": "object",
      "properties": {
        "card_type": {
          "description": "The credit-card type: Visa, MasterCard, etc.",
          "type": "string"
        },
        "card_iin": {
          "description": "The IIN of a credit-card number.",
          "type": "string"
        },
        "card_last4": {
          "description": "The last 4 digits of a credit-card number.",
          "type": "string"
        }
      }
    },
    "GiftCertificate": {
      "title": "GiftCertificate",
      "type": "object",
      "properties": {
        "code": {
          "description": "The gift-certificate code.",
          "example": "123456",
          "type": "string"
        },
        "original_balance": {
          "description": "The balance on a gift certificate when it was purchased.",
          "example": 150,
          "type": "number",
          "format": "double"
        },
        "starting_balance": {
          "description": "The balance on a gift certificate at the time of this purchase.",
          "example": 150,
          "type": "number",
          "format": "double"
        },
        "remaining_balance": {
          "description": "The remaining balance on a gift certificate.",
          "example": 25,
          "type": "number",
          "format": "double"
        },
        "status": {
          "$ref": "#/definitions/Status231"
        }
      }
    },
    "Status231": {
      "title": "status231",
      "example": "active",
      "x-enum-elements": [
        {
          "name": "active",
          "description": ""
        },
        {
          "name": "pending",
          "description": ""
        },
        {
          "name": "disabled",
          "description": ""
        },
        {
          "name": "expired",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "active",
        "pending",
        "disabled",
        "expired"
      ]
    },
    "StoreCredit": {
      "title": "StoreCredit",
      "type": "object",
      "properties": {
        "remaining_balance": {
          "description": "Remaining balance of shopper's store credit.",
          "example": "15",
          "type": "string"
        }
      }
    },
    "TransactionCollectionResponse": {
      "title": "TransactionCollectionResponse",
      "description": "Response payload for the BigCommerce Order Transactions API.",
      "example": {
        "data": [
          {
            "event": "purchase",
            "method": "credit_card",
            "amount": 1,
            "currency": "USD",
            "gateway": "2checkout",
            "date_created": "2018-05-08T15:06:12+00:00",
            "test": false,
            "status": "ok",
            "fraud_review": false,
            "offline": {
              "display_name": "Cash on Delivery"
            },
            "custom": {
              "payment_method": "Cash"
            },
            "avs_result": {},
            "cvv_result": {},
            "credit_card": {},
            "gift_certificate": {
              "code": "123456",
              "original_balance": 150,
              "starting_balance": 150,
              "remaining_balance": 25,
              "status": "active"
            },
            "store_credit": {
              "remaining_balance": "15"
            }
          }
        ],
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Transaction"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "NoContent": {
      "title": "NoContent",
      "description": "No-content response for the BigCommerce API.",
      "example": {},
      "type": "object",
      "properties": {
        "status": {
          "description": "204 HTTP status code.",
          "type": "number",
          "format": "double"
        },
        "title": {
          "description": "The error title describing the situation.",
          "type": "string"
        },
        "type": {
          "description": "",
          "type": "string"
        },
        "instance": {
          "description": "",
          "type": "string"
        }
      }
    },
    "Job": {
      "title": "Job",
      "description": "A job.",
      "type": "object",
      "properties": {
        "errors": {
          "description": "The errors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        },
        "id": {
          "description": "The identifier.",
          "type": "string"
        },
        "percent_complete": {
          "description": "The percent complete.",
          "type": "number",
          "format": "double"
        },
        "result": {
          "description": "The result.",
          "type": "string"
        },
        "status": {
          "description": "The status.",
          "type": "string"
        },
        "time": {
          "description": "The time.",
          "type": "string"
        },
        "warnings": {
          "description": "The warnings.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Warning"
          }
        }
      }
    },
    "Error": {
      "title": "Error",
      "type": "object",
      "properties": {
        "error": {
          "description": "The error.",
          "type": "string"
        },
        "message": {
          "description": "The message.",
          "type": "string"
        }
      }
    },
    "Warning": {
      "title": "Warning",
      "type": "object",
      "properties": {
        "message": {
          "description": "The message.",
          "type": "string"
        },
        "warning": {
          "description": "The warning.",
          "type": "string"
        }
      }
    },
    "Theme": {
      "title": "Theme",
      "type": "object",
      "properties": {
        "variations": {
          "description": "The variations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variation"
          }
        },
        "uuid": {
          "description": "The identifier.",
          "type": "string"
        },
        "name": {
          "description": "The theme name identifier.",
          "type": "string"
        },
        "is_private": {
          "description": "Flag to identify private themes.",
          "type": "boolean"
        }
      }
    },
    "Variation": {
      "title": "Variation",
      "description": "A variation.",
      "type": "object",
      "properties": {
        "description": {
          "description": "The description.",
          "type": "string"
        },
        "external_id": {
          "description": "The external identifier.",
          "type": "string"
        },
        "name": {
          "description": "The name.",
          "type": "string"
        },
        "uuid": {
          "description": "The identifier.",
          "type": "string"
        }
      }
    },
    "JobId": {
      "title": "JobId",
      "description": "The job identifier.",
      "example": {},
      "type": "object",
      "properties": {
        "job_id": {
          "description": "The job identifier.",
          "type": "string"
        }
      }
    },
    "Activate": {
      "title": "Activate",
      "description": "Request definition for activation endpoint.",
      "type": "object",
      "properties": {
        "variation_id": {
          "description": "The identifier for the variation to activate.",
          "type": "string"
        },
        "which": {
          "$ref": "#/definitions/Which"
        }
      },
      "required": [
        "variation_id",
        "which"
      ]
    },
    "Which": {
      "title": "which",
      "example": "original",
      "x-enum-elements": [
        {
          "name": "original",
          "description": ""
        },
        {
          "name": "last_activated",
          "description": ""
        },
        {
          "name": "last_created",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "original",
        "last_activated",
        "last_created"
      ]
    },
    "ThemesCollectionResponse": {
      "title": "ThemesCollectionResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": [
          {
            "variations": [
              {}
            ]
          }
        ],
        "meta": {
          "pagination": {
            "total": 1,
            "count": 1,
            "per_page": 50,
            "current_page": 1,
            "total_pages": 1,
            "links": {
              "previous": "?page=1&limit=50",
              "current": "?page=1&limit=50",
              "next": "?page=1&limit=50"
            }
          }
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Theme"
          }
        },
        "meta": {
          "$ref": "#/definitions/CollectionMeta"
        }
      }
    },
    "ThemeResponse": {
      "title": "ThemeResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": {
          "variations": [
            {}
          ]
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Theme"
        },
        "meta": {
          "description": "Empty meta object; may be used later.",
          "type": "object"
        }
      }
    },
    "JobResponse": {
      "title": "JobResponse",
      "description": "Response payload for the BigCommerce API.",
      "example": {
        "data": {
          "errors": [
            {}
          ],
          "warnings": [
            {}
          ]
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Job"
        },
        "meta": {
          "description": "Empty meta object; may be used later.",
          "type": "object"
        }
      }
    },
    "WhichThemeToDownload": {
      "title": "WhichThemeToDownload",
      "type": "object",
      "properties": {
        "which": {
          "$ref": "#/definitions/Which"
        }
      },
      "required": [
        "which"
      ]
    },
    "ErrorResponse": {
      "title": "ErrorResponse",
      "type": "object",
      "properties": {
        "status": {
          "description": "The HTTP status code.",
          "type": "number",
          "format": "double"
        },
        "title": {
          "description": "The error title describing the particular error.",
          "type": "string"
        },
        "type": {
          "description": "",
          "type": "string"
        },
        "instance": {
          "description": "",
          "type": "string"
        },
        "errors": {
          "description": "",
          "type": "string"
        }
      }
    },
    "NotFound": {
      "title": "NotFound",
      "description": "Error payload for the BigCommerce API.",
      "type": "object",
      "properties": {
        "status": {
          "description": "404 HTTP status code.",
          "type": "number",
          "format": "double"
        },
        "title": {
          "description": "The error title describing the particular error.",
          "type": "string"
        },
        "type": {
          "description": "",
          "type": "string"
        },
        "instance": {
          "description": "",
          "type": "string"
        }
      }
    },
    "PriceRecordBatchErrorResponse": {
      "title": "PriceRecordBatchErrorResponse",
      "description": "Errors during batch usage for the BigCommerce API.",
      "type": "object",
      "properties": {
        "batch_errors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceRecordBatchErrorSet"
          }
        }
      }
    },
    "LineItemsRequest": {
      "title": "LineItemsRequest",
      "type": "object",
      "properties": {
        "line_items": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LineItemRequestData"
          }
        },
        "gift_certificates": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LineItemGiftCertificateRequestData"
          }
        }
      },
      "required": [
        "line_items"
      ]
    },
    "LineItemRequestData": {
      "title": "LineItemRequestData",
      "type": "object",
      "properties": {
        "quantity": {
          "description": "Quantity of this item.",
          "example": 2,
          "type": "number",
          "format": "double"
        },
        "product_id": {
          "description": "ID of the product.",
          "example": 77,
          "type": "number",
          "format": "double"
        },
        "variant_id": {
          "description": "ID of the variant. This is only required if the product has variants.",
          "example": 125,
          "type": "number",
          "format": "double"
        },
        "list_price": {
          "description": "The product's price as provided by the catalog upon add to cart. This can be further discounted in the cart (via coupons or cart-level discounts) to determine the Line Item Sale Price. This price can also be overridden using [Update Cart Item](#reference/cart/server-to-server-cart/update-cart-item) in order to supply a custom price.",
          "example": 12.5,
          "type": "number",
          "format": "double"
        },
        "option_selections": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductOptionSelection"
          }
        }
      },
      "required": [
        "quantity",
        "product_id",
        "variant_id"
      ]
    },
    "ProductOptionSelection": {
      "title": "ProductOptionSelection",
      "type": "object",
      "properties": {
        "option_id": {
          "description": "",
          "example": 8,
          "type": "number",
          "format": "double"
        },
        "option_value": {
          "description": "This can accept both a number and string depending on the `option_value`",
          "example": "Yes",
          "type": "string"
        }
      }
    },
    "LineItemGiftCertificateRequestData": {
      "title": "LineItemGiftCertificateRequestData",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name assigned to this gift-certificate line item.",
          "example": "Happy Birthday",
          "type": "string"
        },
        "theme": {
          "description": "Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`.",
          "example": "Birthday",
          "type": "string"
        },
        "amount": {
          "description": "Gift-certificate amount.",
          "example": 50,
          "type": "number",
          "format": "double"
        },
        "quantity": {
          "description": "Quantity of this item.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "sender": {
          "$ref": "#/definitions/ContactEntity"
        },
        "recipient": {
          "$ref": "#/definitions/ContactEntity"
        },
        "message": {
          "description": "Message shown to recipient, as provided by sender.",
          "example": "Happy Birthday Jane!",
          "type": "string"
        }
      },
      "required": [
        "name",
        "theme",
        "amount",
        "quantity",
        "sender",
        "recipient"
      ]
    },
    "ContactEntity": {
      "title": "ContactEntity",
      "type": "object",
      "properties": {
        "name": {
          "description": "Contact's name.",
          "example": "Jane Does",
          "type": "string"
        },
        "email": {
          "description": "Contact's email address.",
          "example": "janedoe@email.com",
          "type": "string"
        }
      }
    },
    "CartUpdateLineItem": {
      "title": "CartUpdateLineItem",
      "type": "object",
      "properties": {
        "quantity": {
          "description": "Quantity of this item.",
          "example": 2,
          "type": "number",
          "format": "double"
        },
        "list_price": {
          "description": "The product's price as provided by the catalog upon add to cart. This can be further discounted in the cart (via coupons or cart-level discounts) to determine the Line Item Sale Price. This price can also be overridden using [Update Cart Item](#reference/cart/server-to-server-cart/update-cart-item) in order to supply a custom price.",
          "example": 12.5,
          "type": "number",
          "format": "double"
        }
      }
    },
    "CartUpdateRequest": {
      "title": "CartUpdateRequest",
      "type": "object",
      "properties": {
        "line_item": {
          "$ref": "#/definitions/LineItemRequestData"
        },
        "gift_certificate": {
          "$ref": "#/definitions/LineItemGiftCertificateRequestData"
        }
      },
      "required": [
        "line_item"
      ]
    },
    "Cart": {
      "title": "Cart",
      "example": {
        "id": "6b485543-e815-4aca-9590-4d6d945b8c2d",
        "customer_id": 0,
        "email": "janedoe@email.com",
        "currency": {
          "code": "USD"
        },
        "tax_included": true,
        "base_amount": 12.99,
        "discount_amount": 5,
        "cart_amount": 12.99,
        "coupons": [
          {
            "id": "1",
            "code": "SAVE123",
            "name": "",
            "coupon_type": "per_total_discount",
            "discounted_amount": 5,
            "slug": ""
          }
        ],
        "discounts": [
          {
            "id": 1,
            "discounted_amount": 5
          }
        ],
        "line_items": [
          {
            "physical_items": [
              {
                "quantity": 10,
                "id": "8235d47d-718b-4b9c-89a4-5fa1ee76a0b4",
                "variant_id": 182,
                "product_id": 118,
                "name": "Bath Towel Green",
                "url": "http://your-store-url.mybigcommerce.com/your-product/",
                "taxable": false,
                "image_url": "https://pathtoproductimage/ProductDefault.gif",
                "discounts": [
                  {
                    "id": 1,
                    "discounted_amount": 5
                  }
                ],
                "discount_amount": 4.76,
                "coupon_amount": 0,
                "list_price": 100,
                "sale_price": 100,
                "extended_list_price": 100,
                "extended_sale_price": 100,
                "options": [
                  {
                    "name": "Color",
                    "name_id": 8,
                    "value": "Medium",
                    "value_id": 15
                  }
                ],
                "is_require_shipping": true,
                "gift_wrapping": {
                  "name": "Holiday Wrapping",
                  "amount": 10
                }
              }
            ],
            "digital_items": [
              {
                "quantity": 2,
                "id": "5",
                "variant_id": 7,
                "product_id": 118,
                "sku": "SMGREEN",
                "name": "T-Shirt",
                "url": "http://your-store-url.mybigcommerce.com/your-product/",
                "taxable": false,
                "image_url": "https://pathtoproductimage/ProductDefault.gif",
                "discounts": [
                  {
                    "id": 1,
                    "discounted_amount": 5
                  }
                ],
                "discount_amount": 0,
                "coupon_amount": 0,
                "list_price": 100,
                "sale_price": 100,
                "extended_list_price": 100,
                "extended_sale_price": 100,
                "options": [
                  {
                    "name": "Color",
                    "name_id": 8,
                    "value": "Medium",
                    "value_id": 15
                  }
                ]
              }
            ],
            "gift_certificates": [
              {
                "theme": "Birthday",
                "amount": 50,
                "sender": {
                  "name": "Jane Does",
                  "email": "janedoe@email.com"
                },
                "recipient": {
                  "name": "Jane Does",
                  "email": "janedoe@email.com"
                },
                "id": "23",
                "taxable": false,
                "message": "Have an amazing day!"
              }
            ]
          }
        ],
        "created_time": "2018-06-06T21:02:24+00:00",
        "updated_time": "2018-06-06T21:02:24+00:00"
      },
      "type": "object",
      "properties": {
        "id": {
          "description": "Cart ID, provided after creating a cart with a POST.",
          "example": "6b485543-e815-4aca-9590-4d6d945b8c2d",
          "type": "string"
        },
        "customer_id": {
          "description": "ID of the customer to which the cart belongs.",
          "example": 0,
          "type": "number",
          "format": "double"
        },
        "email": {
          "description": "The cart’s email. This is the same email that is used in the billing address.",
          "example": "janedoe@email.com",
          "type": "string"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "tax_included": {
          "description": "Whether this item is taxable.",
          "example": true,
          "type": "boolean"
        },
        "base_amount": {
          "description": "Cost of cart's contents, before applying discounts.",
          "example": 12.99,
          "type": "number",
          "format": "double"
        },
        "discount_amount": {
          "description": "Discounted amount.",
          "example": 5,
          "type": "number",
          "format": "double"
        },
        "cart_amount": {
          "description": "Sum of line-items amounts, minus cart-level discounts and coupons. This amount includes taxes (where applicable).",
          "example": 12.99,
          "type": "number",
          "format": "double"
        },
        "coupons": {
          "description": "Array of `AppliedCoupon` objects applied to this cart.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedCoupon"
          }
        },
        "discounts": {
          "description": "Array of `AppliedDiscount` objects applied to this cart.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedDiscount"
          }
        },
        "line_items": {
          "description": "Array of `LineItem` objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LineItem"
          }
        },
        "created_time": {
          "description": "Time when the cart was created.",
          "example": "6/6/2018 9:02:24 PM",
          "type": "string"
        },
        "updated_time": {
          "description": "Time when the cart was last updated.",
          "example": "6/6/2018 9:02:24 PM",
          "type": "string"
        }
      }
    },
    "Currency": {
      "title": "Currency",
      "type": "object",
      "properties": {
        "code": {
          "description": "ISO-4217 currency code. (See: http://en.wikipedia.org/wiki/ISO_4217.)",
          "example": "USD",
          "type": "string"
        }
      }
    },
    "AppliedCoupon": {
      "title": "AppliedCoupon",
      "type": "object",
      "properties": {
        "code": {
          "description": "The coupon code.",
          "example": "SAVE123",
          "type": "string"
        },
        "id": {
          "description": "The coupon ID.",
          "example": "1",
          "type": "string"
        },
        "name": {
          "description": "The coupon name, as specified by the merchant.",
          "type": "string"
        },
        "coupon_type": {
          "description": "Key name to identify the type of coupon.",
          "example": "per_total_discount",
          "type": "string"
        },
        "discounted_amount": {
          "description": "The discounted amount applied within a given context.",
          "example": 5,
          "type": "number",
          "format": "double"
        },
        "slug": {
          "description": "Automatically-generated description for the discount.",
          "type": "string"
        }
      },
      "required": [
        "code"
      ]
    },
    "AppliedDiscount": {
      "title": "AppliedDiscount",
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the applied discount.",
          "example": 1,
          "type": "number",
          "format": "double"
        },
        "discounted_amount": {
          "description": "The discounted amount applied within a given context.",
          "example": 5,
          "type": "number",
          "format": "double"
        }
      }
    },
    "LineItem": {
      "title": "LineItem",
      "type": "object",
      "properties": {
        "physical_items": {
          "description": "Array of `ItemPhysical` objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItemPhysical"
          }
        },
        "digital_items": {
          "description": "Array of `ItemDigital` objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BaseItem"
          }
        },
        "gift_certificates": {
          "description": "Array of `ItemGiftCertificate` objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItemGiftCertificate"
          }
        }
      },
      "required": [
        "physical_items",
        "digital_items",
        "gift_certificates"
      ]
    },
    "ItemPhysical": {
      "title": "ItemPhysical",
      "type": "object",
      "properties": {
        "quantity": {
          "description": "Quantity of this item.",
          "example": 10,
          "type": "number",
          "format": "double"
        },
        "id": {
          "description": "The line-item ID.",
          "example": "8235d47d-718b-4b9c-89a4-5fa1ee76a0b4",
          "type": "string"
        },
        "variant_id": {
          "description": "ID of the variant.",
          "example": 182,
          "type": "number",
          "format": "double"
        },
        "product_id": {
          "description": "ID of the product.",
          "example": 118,
          "type": "number",
          "format": "double"
        },
        "sku": {
          "description": "SKU of the variant.",
          "type": "string"
        },
        "name": {
          "description": "The item's product name.",
          "example": "Bath Towel Green",
          "type": "string"
        },
        "url": {
          "description": "The product URL.",
          "example": "http://your-store-url.mybigcommerce.com/your-product/",
          "type": "string"
        },
        "taxable": {
          "description": "Whether the item is taxable.",
          "example": false,
          "type": "boolean"
        },
        "image_url": {
          "description": "URL of an image of this item, accessible on the internet.",
          "example": "https://pathtoproductimage/ProductDefault.gif",
          "type": "string"
        },
        "discounts": {
          "description": "List of discounts applied to this item, as an array of AppliedDiscount objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedDiscount"
          }
        },
        "discount_amount": {
          "description": "The total value of all discounts applied to this item (excluding coupon).",
          "example": 4.76,
          "type": "number",
          "format": "double"
        },
        "coupon_amount": {
          "description": "The total value of all coupons applied to this item.",
          "example": 0,
          "type": "number",
          "format": "double"
        },
        "list_price": {
          "description": "Item's list price, as quoted by the manufacturer/distributor.",
          "example": 100,
          "type": "number",
          "format": "double"
        },
        "sale_price": {
          "description": "Item's price after all discounts are applied. (The final price before tax calculation.)",
          "example": 100,
          "type": "number",
          "format": "double"
        },
        "extended_list_price": {
          "description": "Item's list price multiplied by the quantity.",
          "example": 100,
          "type": "number",
          "format": "double"
        },
        "extended_sale_price": {
          "description": "Item's sale price multiplied by the quantity.",
          "example": 100,
          "type": "number",
          "format": "double"
        },
        "options": {
          "description": "The list of selected options for this product.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductOption"
          }
        },
        "is_require_shipping": {
          "description": "Whether this item requires shipping to a physical address.",
          "example": true,
          "type": "boolean"
        },
        "gift_wrapping": {
          "$ref": "#/definitions/GiftWrapping"
        }
      },
      "required": [
        "quantity"
      ]
    },
    "ProductOption": {
      "title": "ProductOption",
      "type": "object",
      "properties": {
        "name": {
          "description": "The product option name. For example, Color or Size",
          "example": "Color",
          "type": "string"
        },
        "name_id": {
          "description": "The product option identifier.",
          "example": 8,
          "type": "number",
          "format": "double"
        },
        "value": {
          "description": "The product option value. For example, Red or Medium",
          "example": "Medium",
          "type": "string"
        },
        "value_id": {
          "description": "The product option value identifier.",
          "example": 15,
          "type": "number",
          "format": "double"
        }
      }
    },
    "GiftWrapping": {
      "title": "GiftWrapping",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the gift-wrapping option.",
          "example": "Holiday Wrapping",
          "type": "string"
        },
        "amount": {
          "description": "Gift-wrapping price per product.",
          "example": 10,
          "type": "number",
          "format": "double"
        }
      }
    },
    "BaseItem": {
      "title": "BaseItem",
      "type": "object",
      "properties": {
        "quantity": {
          "description": "Quantity of this item.",
          "example": 2,
          "type": "number",
          "format": "double"
        },
        "id": {
          "description": "The line-item ID.",
          "example": "5",
          "type": "string"
        },
        "variant_id": {
          "description": "ID of the variant.",
          "example": 7,
          "type": "number",
          "format": "double"
        },
        "product_id": {
          "description": "ID of the product.",
          "example": 118,
          "type": "number",
          "format": "double"
        },
        "sku": {
          "description": "SKU of the variant.",
          "example": "SMGREEN",
          "type": "string"
        },
        "name": {
          "description": "The item's product name.",
          "example": "T-Shirt",
          "type": "string"
        },
        "url": {
          "description": "The product URL.",
          "example": "http://your-store-url.mybigcommerce.com/your-product/",
          "type": "string"
        },
        "taxable": {
          "description": "Whether the item is taxable.",
          "example": false,
          "type": "boolean"
        },
        "image_url": {
          "description": "URL of an image of this item, accessible on the internet.",
          "example": "https://pathtoproductimage/ProductDefault.gif",
          "type": "string"
        },
        "discounts": {
          "description": "List of discounts applied to this item, as an array of AppliedDiscount objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedDiscount"
          }
        },
        "discount_amount": {
          "description": "The total value of all discounts applied to this item (excluding coupon).",
          "example": 0,
          "type": "number",
          "format": "double"
        },
        "coupon_amount": {
          "description": "The total value of all coupons applied to this item.",
          "example": 0,
          "type": "number",
          "format": "double"
        },
        "list_price": {
          "description": "Item's list price, as quoted by the manufacturer/distributor.",
          "example": 100,
          "type": "number",
          "format": "double"
        },
        "sale_price": {
          "description": "Item's price after all discounts are applied. (The final price before tax calculation.)",
          "example": 100,
          "type": "number",
          "format": "double"
        },
        "extended_list_price": {
          "description": "Item's list price multiplied by the quantity.",
          "example": 100,
          "type": "number",
          "format": "double"
        },
        "extended_sale_price": {
          "description": "Item's sale price multiplied by the quantity.",
          "example": 100,
          "type": "number",
          "format": "double"
        },
        "options": {
          "description": "The list of selected options for this product.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductOption"
          }
        }
      },
      "required": [
        "quantity"
      ]
    },
    "ItemGiftCertificate": {
      "title": "ItemGiftCertificate",
      "type": "object",
      "properties": {
        "theme": {
          "description": "Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`.",
          "example": "Birthday",
          "type": "string"
        },
        "amount": {
          "description": "Value must be between 1.00 and 1,000.00 in the store's default currency.",
          "example": 50,
          "type": "number",
          "format": "double"
        },
        "sender": {
          "$ref": "#/definitions/ContactEntity"
        },
        "recipient": {
          "$ref": "#/definitions/ContactEntity"
        },
        "id": {
          "description": "ID of this gift certificate.",
          "example": "23",
          "type": "string"
        },
        "taxable": {
          "description": "Whether or not the gift certificate is taxable.",
          "example": false,
          "type": "boolean"
        },
        "message": {
          "description": "Message that will be sent to the gift certificate's recipient. Limited to 200 characters.",
          "example": "Have an amazing day!",
          "type": "string"
        }
      },
      "required": [
        "theme",
        "amount",
        "sender",
        "recipient"
      ]
    },
    "CartsResponse": {
      "title": "CartsResponse",
      "example": {
        "data": [
          {
            "id": "6b485543-e815-4aca-9590-4d6d945b8c2d",
            "customer_id": 0,
            "email": "janedoe@email.com",
            "currency": {
              "code": "USD"
            },
            "tax_included": true,
            "base_amount": 12.99,
            "discount_amount": 5,
            "cart_amount": 12.99,
            "coupons": [
              {
                "id": "1",
                "code": "SAVE123",
                "name": "",
                "coupon_type": "per_total_discount",
                "discounted_amount": 5,
                "slug": ""
              }
            ],
            "discounts": [
              {
                "id": 1,
                "discounted_amount": 5
              }
            ],
            "line_items": [
              {
                "physical_items": [
                  {
                    "quantity": 10,
                    "id": "8235d47d-718b-4b9c-89a4-5fa1ee76a0b4",
                    "variant_id": 182,
                    "product_id": 118,
                    "name": "Bath Towel Green",
                    "url": "http://your-store-url.mybigcommerce.com/your-product/",
                    "taxable": false,
                    "image_url": "https://pathtoproductimage/ProductDefault.gif",
                    "discounts": [
                      {
                        "id": 1,
                        "discounted_amount": 5
                      }
                    ],
                    "discount_amount": 4.76,
                    "coupon_amount": 0,
                    "list_price": 100,
                    "sale_price": 100,
                    "extended_list_price": 100,
                    "extended_sale_price": 100,
                    "options": [
                      {
                        "name": "Color",
                        "name_id": 8,
                        "value": "Medium",
                        "value_id": 15
                      }
                    ],
                    "is_require_shipping": true,
                    "gift_wrapping": {
                      "name": "Holiday Wrapping",
                      "amount": 10
                    }
                  }
                ],
                "digital_items": [
                  {
                    "quantity": 2,
                    "id": "5",
                    "variant_id": 7,
                    "product_id": 118,
                    "sku": "SMGREEN",
                    "name": "T-Shirt",
                    "url": "http://your-store-url.mybigcommerce.com/your-product/",
                    "taxable": false,
                    "image_url": "https://pathtoproductimage/ProductDefault.gif",
                    "discounts": [
                      {
                        "id": 1,
                        "discounted_amount": 5
                      }
                    ],
                    "discount_amount": 0,
                    "coupon_amount": 0,
                    "list_price": 100,
                    "sale_price": 100,
                    "extended_list_price": 100,
                    "extended_sale_price": 100,
                    "options": [
                      {
                        "name": "Color",
                        "name_id": 8,
                        "value": "Medium",
                        "value_id": 15
                      }
                    ]
                  }
                ],
                "gift_certificates": [
                  {
                    "theme": "Birthday",
                    "amount": 50,
                    "sender": {
                      "name": "Jane Does",
                      "email": "janedoe@email.com"
                    },
                    "recipient": {
                      "name": "Jane Does",
                      "email": "janedoe@email.com"
                    },
                    "id": "23",
                    "taxable": false,
                    "message": "Have an amazing day!"
                  }
                ]
              }
            ],
            "created_time": "2018-06-06T21:02:24+00:00",
            "updated_time": "2018-06-06T21:02:24+00:00"
          }
        ]
      },
      "type": "object",
      "properties": {
        "data": {
          "description": "A cart contains a collection of items, prices, discounts, etc. It does not contain customer-related data.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cart"
          }
        }
      }
    },
    "RequestHeaders": {
      "title": "RequestHeaders",
      "type": "object",
      "properties": {
        "Accept": {
          "description": "",
          "example": "application/json",
          "type": "string"
        },
        "Content-Type": {
          "description": "",
          "example": "application/json",
          "type": "string"
        },
        "X-Auth-Client": {
          "description": "",
          "example": "Your Client ID",
          "type": "string"
        },
        "X-Auth-Token": {
          "description": "",
          "example": "Your Token",
          "type": "string"
        }
      },
      "required": [
        "Accept",
        "Content-Type",
        "X-Auth-Client",
        "X-Auth-Token"
      ]
    },
    "RedirectURLResponse": {
      "title": "RedirectURLResponse",
      "example": {
        "data": {
          "cart_url": "https://store-{{store_hash}}.mybigcommerce.com/cart.php?action=load&id=6b485543-e815-4aca-9590-4d6d945b8c2d&token=825b8419ce5968fa61aec047ecf869cf9e02e705319c86e36c35f8e8f4c01bc9",
          "checkout_url": "https://store-{{store_hash}}.mybigcommerce.com/cart.php?action=loadInCheckout&id=6b485543-e815-4aca-9590-4d6d945b8c2d&token=825b8419ce5968fa61aec047ecf869cf9e02e705319c86e36c35f8e8f4c01bc9"
        },
        "meta": {}
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/RedirectURL"
        },
        "meta": {
          "description": "An empty meta object",
          "type": "object"
        }
      }
    },
    "RedirectURL": {
      "title": "RedirectURL",
      "type": "object",
      "properties": {
        "cart_url": {
          "description": "",
          "example": "https://store-{{store_hash}}.mybigcommerce.com/cart.php?action=load&id=6b485543-e815-4aca-9590-4d6d945b8c2d&token=825b8419ce5968fa61aec047ecf869cf9e02e705319c86e36c35f8e8f4c01bc9",
          "type": "string"
        },
        "checkout_url": {
          "description": "",
          "example": "https://store-{{store_hash}}.mybigcommerce.com/cart.php?action=loadInCheckout&id=6b485543-e815-4aca-9590-4d6d945b8c2d&token=825b8419ce5968fa61aec047ecf869cf9e02e705319c86e36c35f8e8f4c01bc9",
          "type": "string"
        }
      }
    },
    "CartUpdateRequestData": {
      "title": "CartUpdateRequestData",
      "type": "object",
      "properties": {
        "customer_id": {
          "description": "The id of the customer.",
          "example": 5,
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "customer_id"
      ]
    },
    "Condition273": {
      "title": "condition273",
      "example": "new",
      "x-enum-elements": [
        {
          "name": "new",
          "description": ""
        },
        {
          "name": "used",
          "description": ""
        },
        {
          "name": "refurbished",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "new",
        "used",
        "refurbished"
      ]
    },
    "KeywordContext": {
      "title": "keyword_context",
      "example": "shopper",
      "x-enum-elements": [
        {
          "name": "shopper",
          "description": ""
        },
        {
          "name": "merchant",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "shopper",
        "merchant"
      ]
    },
    "Include": {
      "title": "include",
      "example": "variants",
      "x-enum-elements": [
        {
          "name": "variants",
          "description": ""
        },
        {
          "name": "images",
          "description": ""
        },
        {
          "name": "custom_fields",
          "description": ""
        },
        {
          "name": "bulk_pricing_rules",
          "description": ""
        },
        {
          "name": "primary_image",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "variants",
        "images",
        "custom_fields",
        "bulk_pricing_rules",
        "primary_image"
      ]
    },
    "Direction": {
      "title": "direction",
      "example": "asc",
      "x-enum-elements": [
        {
          "name": "asc",
          "description": ""
        },
        {
          "name": "desc",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "asc",
        "desc"
      ]
    },
    "Sort": {
      "title": "sort",
      "example": "id",
      "x-enum-elements": [
        {
          "name": "id",
          "description": ""
        },
        {
          "name": "name",
          "description": ""
        },
        {
          "name": "sku",
          "description": ""
        },
        {
          "name": "price",
          "description": ""
        },
        {
          "name": "date_modified",
          "description": ""
        },
        {
          "name": "date_last_imported",
          "description": ""
        },
        {
          "name": "inventory_level",
          "description": ""
        },
        {
          "name": "is_visible",
          "description": ""
        },
        {
          "name": "total_sold",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "id",
        "name",
        "sku",
        "price",
        "date_modified",
        "date_last_imported",
        "inventory_level",
        "is_visible",
        "total_sold"
      ]
    },
    "Request": {
      "title": "request",
      "type": "object",
      "properties": {
        "category_id": {
          "description": "The id of the *Category*.",
          "type": "number",
          "format": "double"
        },
        "image_file": {
          "description": "An image file. Supported MIME types include GIF, JPEG, and PNG.",
          "type": "string"
        }
      },
      "required": [
        "category_id",
        "image_file"
      ]
    },
    "Request284": {
      "title": "request284",
      "type": "object",
      "properties": {
        "file": {
          "description": "The file that will be uploaded.",
          "type": "string"
        }
      },
      "required": [
        "file"
      ]
    },
    "Include285": {
      "title": "include285",
      "example": "line_items.physical_items.options",
      "x-enum-elements": [
        {
          "name": "Enum_line_items.physical_items.options",
          "description": ""
        },
        {
          "name": "Enum_line_items.digital_items.options",
          "description": ""
        },
        {
          "name": "redirect_urls",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "line_items.physical_items.options",
        "line_items.digital_items.options",
        "redirect_urls"
      ]
    },
    "Sort287": {
      "title": "sort287",
      "example": "name",
      "x-enum-elements": [
        {
          "name": "name",
          "description": ""
        },
        {
          "name": "description",
          "description": ""
        },
        {
          "name": "date_created",
          "description": ""
        },
        {
          "name": "date_modified",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "name",
        "description",
        "date_created",
        "date_modified"
      ]
    },
    "Include289": {
      "title": "include289",
      "example": "bulk_pricing_tiers",
      "x-enum-elements": [
        {
          "name": "bulk_pricing_tiers",
          "description": ""
        },
        {
          "name": "sku",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "bulk_pricing_tiers",
        "sku"
      ]
    }
  }
}