{
  "swagger": "2.0.0",
  "info": {
    "title": "Storefront Token",
    "version": "",
    "description": "\n- [OAuth Scopes](#oauth-scopes)\n- [Authentication](#authentication)\n- [Available Endpoints](#available-endpoints)\n\nAn OpenAPI Document for Storefront API Token generation via Bigcommerce v3 API. \n\n## OAuth Scopes\n| UI Name                                      | Permission | Parameter                                     |\n|----------------------------------------------|------------|-----------------------------------------------|\n| Storefront API Customer Impersonation Tokens | manage     | `store_storefront_api_customer_impersonation` |\n| Storefront API Tokens                        | manage     | `store_storefront_api`                        |\n\nFor more information on OAuth Scopes, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).\n\n## Authentication\n\nRequests can be authenticated by sending a `client_id` and `access_token` via `X-Auth-Client` and `X-Auth-Token` HTTP headers:\n\n```http\nGET /stores/{$$.env.store_hash}/v3/catalog/summary\nhost: api.bigcommerce.com\nAccept: application/json\nX-Auth-Client: {client_id}\nX-Auth-Token: {access_token}\n```\n\n|Header|Parameter|Description|\n|-|-|-|\n|`X-Auth-Client`|`client_id`|Obtained by creating an API account or installing an app in a BigCommerce control panel.|\n|`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|\n\nFor more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).\n\n## Available Endpoints\n| Resource / Endpoint                     | Description                                                             |\n|-----------------------------------------|-------------------------------------------------------------------------|\n| Storefront API Token                    | Create Auth Tokens for use with Storefront APIs                         |\n| Storefront Customer Impersonation Token | Create a storefront API token for customer impersonation                |",
    "termsOfService": "http://www.bigcommerce.com/terms"
  },
  "tags": [],
  "paths": {
    "/storefront/api-token": {
      "post": {
        "tags": [
          "API Token"
        ],
        "description": "Creates a Storefront API token.\n\n**Required Scopes**\n* `Manage` `Storefront API Tokens`",
        "operationId": "createToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenPostSimple"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A storefront API access token is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Invalid JSON request body - missing or invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "API Token",
          "API Token Customer Impersonation"
        ],
        "description": "Revoke access for a Storefront API token.",
        "operationId": "revokeToken",
        "parameters": [
          {
            "in": "header",
            "name": "Sf-Api-Token",
            "required": true,
            "description": "An existing JWT token that you want to revoke.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A storefront API token revocation has been scheduled.",
            "content": {
              "applicaton/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Invalid JWT Token provided or missing JWT token header",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": ""
      }
    },
    "/storefront/api-token-customer-impersonation": {
      "post": {
        "tags": [
          "API Token Customer Impersonation"
        ],
        "description": "Creates a Storefront API token that allows for customer impersonation.\n\n**Required Scopes**\n* `Manage` `Storefront API Customer Impersonation Tokens`\n\n**Headers**:\n* `X-Bc-Customer-Id` - The ID of the Customer to impersonate",
        "operationId": "createTokenWithCustomerImpersonation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenPostImpersonation"
              },
              "examples": {
                "example-1": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A storefront API access token that allows for customer impersonation is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Invalid JSON request body - missing or invalid data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer"
            },
            "in": "header",
            "name": "X-Bc-Customer-Id",
            "description": "Ther Customer ID for the customer to impersonate",
            "required": true
          }
        ]
      }
    }
  },
  "security": [
    {
      "X-Auth-Client": []
    },
    {
      "X-Auth-Token": []
    }
  ],
  "definitions": {
    "TokenPostImpersonation": {
      "type": "object",
      "properties": {
        "channel_id": {
          "type": "integer",
          "description": "Channel ID for requested token"
        },
        "expires_at": {
          "type": "number",
          "format": "double",
          "description": "Unix timestamp (UTC time) defining when the token should expire."
        }
      },
      "required": [
        "channel_id",
        "expires_at"
      ]
    },
    "TokenPostSimple": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/components/schemas/TokenPostImpersonation"
        },
        {
          "type": "object",
          "properties": {
            "allowed_cors_origins": {
              "type": "array",
              "description": "List of allowed domains for Cross-Origin Request Sharing.",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "TokenResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/components/schemas/Token"
        },
        "meta": {
          "type": "object"
        }
      }
    },
    "Token": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "JWT Token for accessing the Storefront API"
        }
      }
    },
    "ErrorResponse": {
      "allOf": [
        {
          "$ref": "#/components/schemas/BaseError"
        },
        {
          "type": "object",
          "properties": {
            "errors": {
              "$ref": "#/components/schemas/DetailedErrors"
            }
          }
        }
      ]
    },
    "BaseError": {
      "type": "object",
      "description": "Error payload for the BigCommerce API.\n",
      "properties": {
        "status": {
          "description": "The HTTP status code.\n",
          "type": "integer"
        },
        "title": {
          "description": "The error title describing the particular error.\n",
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "DetailedErrors": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    }
  },
  "host": "api.bigcommerce.com",
  "basePath": "/stores/{$$.env.store_hash}/v3",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "X-Auth-Client": {
      "type": "apiKey",
      "name": "X-Auth-Client",
      "in": "header",
      "description": "|Header|Parameter|Description|\n|-|-|-|\n|`X-Auth-Client`|`client_id`|Obtained by creating an API account or installing an app in a BigCommerce control panel.|\n|`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|\n\n```http\nGET /stores/{$$.env.store_hash}/v3/catalog/summary\nhost: api.bigcommerce.com\nAccept: application/json\nX-Auth-Client: {client_id}\nX-Auth-Token: {access_token}\n```\n\nFor more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication)."
    },
    "X-Auth-Token": {
      "type": "apiKey",
      "in": "header",
      "description": "|Header|Parameter|Description|\n|-|-|-|\n|`X-Auth-Client`|`client_id`|Obtained by creating an API account or installing an app in a BigCommerce control panel.|\n|`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|\n\n```http\nGET /stores/{$$.env.store_hash}/v3/catalog/summary\nhost: api.bigcommerce.com\nAccept: application/json\nX-Auth-Client: {client_id}\nX-Auth-Token: {access_token}\n```\n\nFor more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication)",
      "name": "X-Auth-Token"
    },
    "OAuth": {
      "type": "oauth2",
      "flow": "application",
      "tokenUrl": "https://login.bigcommerce.com/oauth2/token",
      "description": "## Request Headers\n\nAPI requests are authenticated by the following HTTP headers:\n\n* `X-Auth-Client` -- The Client ID of the requesting app. \n* `X-Auth-Token` -- Access token authorizing an app to access store data on behalf of a user.\n\nIn addition, while not all resources require the Accept and Content-Type headers, many do. To ensure that your calls succeed, always include these headers. For more details on request headers and their accepted values, see [Request Headers](https://developer.bigcommerce.com/api-docs/getting-started/about-our-api#request-headers).\n\n`https://login.bigcommerce.com/oauth2/token`\n\n### Request\n\n```http\nPOST /oauth2/token HTTP/1.1\nHost: login.bigcommerce.com\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 186\nclient_id={CLIENT_ID}&client_secret={CLIENT_SECRET}&code=qr6h3thvbvag2ffq&scope=store_v2_orders&grant_type=authorization_code&redirect_uri=https://app.example.com/oauth&context=stores/{STORE_HASH}\n```\n\n### Response\n\n```json\n{\n  \"access_token\": \"ACCESS_TOKEN\",\n  \"scope\": \"store_v2_orders\",\n  \"user\": {\n    \"id\": 24654,\n    \"email\": \"merchant@mybigcommerce.com\"\n  },\n  \"context\": \"stores/STORE_HASH\"\n}\n```"
    }
  }
}