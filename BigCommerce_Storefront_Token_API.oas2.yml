{
  "swagger": "2.0",
  "info": {
    "title": "Storefront Token",
    "version": "",
    "description": "\n- [OAuth Scopes](#oauth-scopes)\n- [Authentication](#authentication)\n- [Available Endpoints](#available-endpoints)\n- [Creating Customer Impersonation Tokens](#creating-customer-impersonation-tokens)\n- [Revoking Tokens](#revoking-tokens)\n\nAn OpenAPI Document for Storefront API Token generation via Bigcommerce v3 API. \n\n## OAuth Scopes\n| UI Name                                      | Permission | Parameter                                     |\n|----------------------------------------------|------------|-----------------------------------------------|\n| Storefront API Customer Impersonation Tokens | manage     | `store_storefront_api_customer_impersonation` |\n| Storefront API Tokens                        | manage     | `store_storefront_api`                        |\n\nFor more information on OAuth Scopes, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).\n\n## Authentication\n\nRequests can be authenticated by sending a `client_id` and `access_token` via `X-Auth-Client` and `X-Auth-Token` HTTP headers:\n\n```http\nGET /stores/{$$.env.store_hash}/v3/catalog/summary\nhost: api.bigcommerce.com\nAccept: application/json\nX-Auth-Client: {client_id}\nX-Auth-Token: {access_token}\n```\n\n|Header|Parameter|Description|\n|-|-|-|\n|`X-Auth-Client`|`client_id`|Obtained by creating an API account or installing an app in a BigCommerce control panel.|\n|`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|\n\nFor more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).\n\n## Available Endpoints\n| Resource / Endpoint                     | Description                                                             |\n|-----------------------------------------|-------------------------------------------------------------------------|\n| Storefront API Token                    | Create Auth Tokens for use with Storefront APIs                         |\n| Storefront Customer Impersonation Token | Create a storefront API token for customer impersonation                |\n\n## Creating Customer Impersonation Tokens\nIts possible to generate tokens for use in server-to-server interactions with a trusted consumer by POSTing to the API Token Customer Impersonation Endpoint with the X-Bc-Customer-Id header set to the customerâ€™s ID:\n\n```http\nPOST /stores/{$$.env.store_hash}/v3/storefront/api-token-customer-impersonation\nhost: api.bigcommerce.com\nx-Auth-Client: {client_id}\nx-Auth-Token: {access_token}\nX-Bc-Customer-Id: {customer_id}\n```\n\n## Revoking Tokens\nTo revoke tokens, send a `DELETE` request to the Revoke a Token endpoint and include the `JWT` in the `Sf-Api-Token` header\n\n```http\nDELETE /stores/{$$.env.store_hash}/v3/storefront/api-token-customer-impersonation\nhost: api.bigcommerce.com\nx-Auth-Client: {client_id}\nx-Auth-Token: {access_token}\nSf-Api-Token: {customer_id}\n```\n",
    "termsOfService": ""
  },
  "tags": [
    {
      "name": "API Token"
    },
    {
      "name": "Customer Impersonation Token"
    }
  ],
  "paths": {
    "/storefront/api-token": {
      "post": {
        "tags": [
          "API Token"
        ],
        "description": "Creates a Storefront API token.\n\n**Required Scopes**\n* `Manage` `Storefront API Tokens`",
        "operationId": "createToken",
        "responses": {
          "200": {
            "description": "A storefront API access token is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/TokenResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Invalid JSON request body - missing or invalid data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Create a Token",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/TokenPostSimple"
                },
                {
                  "$ref": "#/definitions/TokenPostImpersonation"
                }
              ]
            },
            "x-examples": {
              "application/json": "{\n  \"channel_id\": 1,\n  \"expires_at\": {$$.env.expires_at},\n  \"allowed_cors_origins\": [\n    \"{$$.env.allowed_cors_origin}\"\n  ]\n}"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "API Token"
        ],
        "description": "Revoke access for a Storefront API token.",
        "operationId": "revokeToken",
        "parameters": [
          {
            "in": "header",
            "name": "Sf-Api-Token",
            "required": true,
            "description": "An existing JWT token that you want to revoke.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A storefront API token revocation has been scheduled.",
            "content": {
              "applicaton/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Invalid JWT Token provided or missing JWT token header",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Revoke a Token"
      }
    },
    "/storefront/api-token-customer-impersonation": {
      "post": {
        "tags": [
          "Customer Impersonation Token"
        ],
        "description": "Creates a Storefront API token that allows for customer impersonation.\n\n**Required Scopes**\n* `Manage` `Storefront API Customer Impersonation Tokens`\n\n**Headers**:\n* `X-Bc-Customer-Id` - The ID of the Customer to impersonate",
        "operationId": "createTokenWithCustomerImpersonation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/TokenPostImpersonation"
              },
              "examples": {
                "example-1": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A storefront API access token that allows for customer impersonation is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/TokenResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - the v3 Auth client ID or token in the request are not a valid combination for this store.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Missing scope - the v3 Auth token is valid but does not have proper permissions to access this endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Invalid JSON request body - missing or invalid data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ErrorResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "integer"
            },
            "in": "header",
            "name": "X-Bc-Customer-Id",
            "description": "Ther Customer ID for the customer to impersonate",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/TokenPostImpersonation"
            },
            "x-examples": {
              "application/json": "{\n  \"channel_id\": 19079517,\n  \"expires_at\": {$$.env.expires_at}\n}"
            }
          }
        ],
        "summary": "Create a Token"
      }
    }
  },
  "security": [
    {
      "X-Auth-Client": []
    },
    {
      "X-Auth-Token": []
    }
  ],
  "definitions": {
    "TokenPostImpersonation": {
      "type": "object",
      "properties": {
        "channel_id": {
          "type": "integer",
          "description": "Channel ID for requested token",
          "minimum": 0
        },
        "expires_at": {
          "type": "integer",
          "description": "Unix timestamp (UTC time) defining when the token should expire.",
          "format": "double",
          "default": "{$$.env.expires_at}"
        }
      },
      "required": [
        "channel_id",
        "expires_at"
      ]
    },
    "TokenPostSimple": {
      "type": "object",
      "properties": {
        "allowed_cors_origins": {
          "type": "array",
          "description": "List of allowed domains for Cross-Origin Request Sharing. Currently only accepts a single element.",
          "minItems": 1,
          "maxItems": 1,
          "example": "https://www.yourstorefront.com/",
          "items": {
            "type": "string",
            "minLength": 1,
            "maxLength": 1,
            "pattern": "/^https?:\\/\\/(?=.{1,254}(?::|$))(?:(?!\\d|-)(?![a-z0-9\\-]{1,62}-(?:\\.|:|$))[a-z0-9\\-]{1,63}\\b(?!\\.$)\\.?)+(:\\d+)?$/i;"
          }
        }
      }
    },
    "TokenResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Token"
        },
        "meta": {
          "type": "object"
        }
      }
    },
    "Token": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "JWT Token for accessing the Storefront API"
        }
      }
    },
    "ErrorResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/BaseError"
        },
        {
          "type": "object",
          "properties": {
            "errors": {
              "$ref": "#/definitions/DetailedErrors"
            }
          }
        }
      ]
    },
    "BaseError": {
      "type": "object",
      "description": "Error payload for the BigCommerce API.\n",
      "properties": {
        "status": {
          "description": "The HTTP status code.\n",
          "type": "integer"
        },
        "title": {
          "description": "The error title describing the particular error.\n",
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "DetailedErrors": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    }
  },
  "host": "api.bigcommerce.com",
  "basePath": "/stores/{$$.env.store_hash}/v3",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "X-Auth-Client": {
      "type": "apiKey",
      "name": "X-Auth-Client",
      "in": "header",
      "description": "|Header|Parameter|Description|\n|-|-|-|\n|`X-Auth-Client`|`client_id`|Obtained by creating an API account or installing an app in a BigCommerce control panel.|\n|`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|\n\n```http\nGET /stores/{$$.env.store_hash}/v3/catalog/summary\nhost: api.bigcommerce.com\nAccept: application/json\nX-Auth-Client: {client_id}\nX-Auth-Token: {access_token}\n```\n\nFor more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication)."
    },
    "X-Auth-Token": {
      "type": "apiKey",
      "in": "header",
      "description": "|Header|Parameter|Description|\n|-|-|-|\n|`X-Auth-Client`|`client_id`|Obtained by creating an API account or installing an app in a BigCommerce control panel.|\n|`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|\n\n```http\nGET /stores/{$$.env.store_hash}/v3/catalog/summary\nhost: api.bigcommerce.com\nAccept: application/json\nX-Auth-Client: {client_id}\nX-Auth-Token: {access_token}\n```\n\nFor more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication)",
      "name": "X-Auth-Token"
    }
  }
}