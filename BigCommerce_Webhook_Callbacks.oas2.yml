swagger: '2.0'
info:
  title: Webhook Callbacks
  version: ''
  description: >-
    For a list of all webhook events see [Webhook
    Events](https://developer.bigcommerce.com/api-docs/getting-started/webhooks/webhook-events). 
paths:
  /store/cart/lineItem/created:
    post:
      responses:
        '200':
          $ref: '#/responses/CallbackResponse'
      description: >-
        This webhook will fire whenever a new cart is created either via a
        storefront shopper adding their first item to the cart or when a new
        cart being created via an API consumer. If it is from the storefront,
        then it fires when the first product is added to a new session.(The cart
        did not exist before) For the API it means a POST to /carts, (V3 and
        Storefront API). The store/cart/lineItem/updated will also fire.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/cart/lineItem/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart
      summary: /store/cart/lineItem/created
      produces: []
      consumes:
        - application/json
  /store/cart/lineItem/updated:
    post:
      responses:
        '200':
          $ref: '#/responses/CallbackResponse'
      description: "\tThis webhook is fired whenever a cart is modified through the changes in its line items. Eg. when a new item is added to a cart or an existing item’s quantity is updated. This hook also fires when the email is changed during guest checkout or an existing item is deleted. The payload will include the ID of the cart being updated.\nThis webhook is also fired along with cart created, because the first product being added to an empty cart triggers an update.\n- Logging into store account after creating a cart (email is inherited from store account email)\n- Entering email address via guest checkout\n-Changing the email in guest checkout"
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/cart/lineItem/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart LineItem
      summary: /store/cart/lineItem/updated
      produces: []
      consumes:
        - application/json
  /store/cart/lineItem/deleted:
    post:
      responses:
        '200':
          $ref: '#/responses/CallbackResponse'
      description: >-
        This webhook will fire whenever a cart is deleted. This will occur
        either when all items have been removed from a cart and it is
        auto-deleted, or when the cart is explicitly removed via a DELETE
        request by an API consumer. This ends the lifecycle of the cart. The
        store/cart/lineItem/updated webhook will also fire when the last item is
        removed.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/cart/lineItem/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart LineItem
      summary: /store/cart/lineItem/deleted
      produces: []
      consumes:
        - application/json
  /store/information/updated:
    post:
      responses:
        '200':
          $ref: '#/responses/CallbackResponse'
      description: "\tThis webhook is fired whenever a cart is modified through the changes in its line items. Eg. when a new item is added to a cart or an existing item’s quantity is updated. This hook also fires when the email is changed during guest checkout or an existing item is deleted. The payload will include the ID of the cart being updated.\nThis webhook is also fired along with cart created, because the first product being added to an empty cart triggers an update.\n- Logging into store account after creating a cart (email is inherited from store account email)\n- Entering email address via guest checkout\n-Changing the email in guest checkout"
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/information/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart
      summary: /store/information/updated
      produces: []
      consumes:
        - application/json
  /store/customer/created:
    post:
      responses:
        '200':
          $ref: '#/responses/CallbackResponse'
      description: >-
        This webhook will fire whenever a new cart is created either via a
        storefront shopper adding their first item to the cart or when a new
        cart being created via an API consumer. If it is from the storefront,
        then it fires when the first product is added to a new session.(The cart
        did not exist before) For the API it means a POST to /carts, (V3 and
        Storefront API). The store/customer/updated will also fire.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/customer/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart
      summary: /store/customer/created
      produces: []
      consumes:
        - application/json
  /store/customer/updated:
    post:
      responses:
        '200':
          $ref: '#/responses/CallbackResponse'
      description: "\tThis webhook is fired whenever a cart is modified through the changes in its line items. Eg. when a new item is added to a cart or an existing item’s quantity is updated. This hook also fires when the email is changed during guest checkout or an existing item is deleted. The payload will include the ID of the cart being updated.\nThis webhook is also fired along with cart created, because the first product being added to an empty cart triggers an update.\n- Logging into customer account after creating a cart (email is inherited from customer account email)\n- Entering email address via guest checkout\n-Changing the email in guest checkout"
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/customer/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart
      summary: /store/customer/updated
      produces: []
      consumes:
        - application/json
  /store/customer/deleted:
    post:
      responses:
        '200':
          $ref: '#/responses/CallbackResponse'
      description: >-
        This webhook will fire whenever a cart is deleted. This will occur
        either when all items have been removed from a cart and it is
        auto-deleted, or when the cart is explicitly removed via a DELETE
        request by an API consumer. This ends the lifecycle of the cart. The
        store/customer/updated webhook will also fire when the last item is
        removed.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/customer/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart
      summary: /store/customer/deleted
      produces: []
      consumes:
        - application/json
  /store/sku/created:
    post:
      responses:
        '200':
          $ref: '#/responses/CallbackResponse'
      description: >-
        This webhook will fire whenever a new cart is created either via a
        storefront shopper adding their first item to the cart or when a new
        cart being created via an API consumer. If it is from the storefront,
        then it fires when the first product is added to a new session.(The cart
        did not exist before) For the API it means a POST to /carts, (V3 and
        Storefront API). The store/sku/updated will also fire.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/sku/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart
      summary: /store/sku/created
      produces: []
      consumes:
        - application/json
  /store/sku/updated:
    post:
      responses:
        '200':
          $ref: '#/responses/CallbackResponse'
      description: "\tThis webhook is fired whenever a cart is modified through the changes in its line items. Eg. when a new item is added to a cart or an existing item’s quantity is updated. This hook also fires when the email is changed during guest checkout or an existing item is deleted. The payload will include the ID of the cart being updated.\nThis webhook is also fired along with cart created, because the first product being added to an empty cart triggers an update.\n- Logging into customer account after creating a cart (email is inherited from customer account email)\n- Entering email address via guest checkout\n-Changing the email in guest checkout"
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/sku/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart
      summary: /store/sku/updated
      produces: []
      consumes:
        - application/json
  /store/sku/deleted:
    post:
      responses:
        '200':
          $ref: '#/responses/CallbackResponse'
      description: >-
        This webhook will fire whenever a cart is deleted. This will occur
        either when all items have been removed from a cart and it is
        auto-deleted, or when the cart is explicitly removed via a DELETE
        request by an API consumer. This ends the lifecycle of the cart. The
        store/sku/updated webhook will also fire when the last item is removed.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/sku/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart
      summary: /store/sku/deleted
      produces: []
      consumes:
        - application/json
  /store/category/created:
    post:
      responses:
        '200':
          $ref: '#/responses/CallbackResponse'
      description: >-
        This webhook will fire whenever a new cart is created either via a
        storefront shopper adding their first item to the cart or when a new
        cart being created via an API consumer. If it is from the storefront,
        then it fires when the first product is added to a new session.(The cart
        did not exist before) For the API it means a POST to /carts, (V3 and
        Storefront API). The store/category/updated will also fire.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/category/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Category
      summary: /store/category/created
      produces: []
      consumes:
        - application/json
  /store/category/updated:
    post:
      responses:
        '200':
          $ref: '#/responses/CallbackResponse'
      description: "\tThis webhook is fired whenever a cart is modified through the changes in its line items. Eg. when a new item is added to a cart or an existing item’s quantity is updated. This hook also fires when the email is changed during guest checkout or an existing item is deleted. The payload will include the ID of the cart being updated.\nThis webhook is also fired along with cart created, because the first product being added to an empty cart triggers an update.\n- Logging into customer account after creating a cart (email is inherited from customer account email)\n- Entering email address via guest checkout\n-Changing the email in guest checkout"
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/category/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Category
      summary: /store/category/updated
      produces: []
      consumes:
        - application/json
  /store/category/deleted:
    post:
      responses:
        '200':
          $ref: '#/responses/CallbackResponse'
      description: >-
        This webhook will fire whenever a cart is deleted. This will occur
        either when all items have been removed from a cart and it is
        auto-deleted, or when the cart is explicitly removed via a DELETE
        request by an API consumer. This ends the lifecycle of the cart. The
        store/category/updated webhook will also fire when the last item is
        removed.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/category/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Category
      summary: /store/category/deleted
      produces: []
      consumes:
        - application/json
  /store/order/created:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              '':
                $ref: '#/definitions/callback_Base'
              data:
                $ref: '#/definitions/order-created'
      description: >-
        This webhook will fire whenever a new cart is created either via a
        storefront shopper adding their first item to the cart or when a new
        cart being created via an API consumer. If it is from the storefront,
        then it fires when the first product is added to a new session.(The cart
        did not exist before) For the API it means a POST to /carts, (V3 and
        Storefront API). The store/order/updated will also fire.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/order/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart
      summary: /store/order/created
      produces: []
      consumes:
        - application/json
  /store/order/updated:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              '':
                $ref: '#/definitions/callback_Base'
              data:
                $ref: '#/definitions/order-updated'
      description: >
        This webhooks is fifed when an order is updated in any manner via the
        Control Panel. This webhook is also fired along with order created
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/order/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart
      summary: /store/order/updated
      produces: []
      consumes:
        - application/json
  /store/order/deleted:
    post:
      responses:
        '200':
          $ref: '#/responses/CallbackResponse'
      description: >-
        This webhook will fire whenever a cart is deleted. This will occur
        either when all items have been removed from a cart and it is
        auto-deleted, or when the cart is explicitly removed via a DELETE
        request by an API consumer. This ends the lifecycle of the cart. The
        store/order/updated webhook will also fire when the last item is
        removed.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/order/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart
      summary: /store/order/deleted
      produces: []
      consumes:
        - application/json
  /store/cart/created:
    post:
      responses:
        '200':
          $ref: '#/responses/CallbackResponse'
      description: >-
        This webhook will fire whenever a new cart is created either via a
        storefront shopper adding their first item to the cart or when a new
        cart being created via an API consumer. If it is from the storefront,
        then it fires when the first product is added to a new session.(The cart
        did not exist before) For the API it means a POST to /carts, (V3 and
        Storefront API). The store/cart/updated will also fire.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/cart/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart
      summary: /store/cart/created
      produces: []
      consumes:
        - application/json
  /store/cart/updated:
    post:
      responses:
        '200':
          $ref: '#/responses/CallbackResponse'
      description: "\tThis webhook is fired whenever a cart is modified through the changes in its line items. Eg. when a new item is added to a cart or an existing item’s quantity is updated. This hook also fires when the email is changed during guest checkout or an existing item is deleted. The payload will include the ID of the cart being updated.\nThis webhook is also fired along with cart created, because the first product being added to an empty cart triggers an update.\n- Logging into customer account after creating a cart (email is inherited from customer account email)\n- Entering email address via guest checkout\n-Changing the email in guest checkout"
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/cart/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart
      summary: /store/cart/updated
      produces: []
      consumes:
        - application/json
  /store/cart/deleted:
    post:
      responses:
        '200':
          $ref: '#/responses/CallbackResponse'
      description: >-
        This webhook will fire whenever a cart is deleted. This will occur
        either when all items have been removed from a cart and it is
        auto-deleted, or when the cart is explicitly removed via a DELETE
        request by an API consumer. This ends the lifecycle of the cart. The
        store/cart/updated webhook will also fire when the last item is removed.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/cart/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart
      summary: /store/cart/deleted
      produces: []
      consumes:
        - application/json
  /store/product/created:
    post:
      responses:
        '200':
          $ref: '#/responses/CallbackResponse'
      description: >-
        This webhook will fire whenever a new cart is created either via a
        storefront shopper adding their first item to the cart or when a new
        cart being created via an API consumer. If it is from the storefront,
        then it fires when the first product is added to a new session.(The cart
        did not exist before) For the API it means a POST to /carts, (V3 and
        Storefront API). The store/product/updated will also fire.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/product/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart
      summary: /store/product/created
      produces: []
      consumes:
        - application/json
  /store/product/updated:
    post:
      responses:
        '200':
          $ref: '#/responses/CallbackResponse'
      description: "\tThis webhook is fired whenever a cart is modified through the changes in its line items. Eg. when a new item is added to a cart or an existing item’s quantity is updated. This hook also fires when the email is changed during guest checkout or an existing item is deleted. The payload will include the ID of the cart being updated.\nThis webhook is also fired along with cart created, because the first product being added to an empty cart triggers an update.\n- Logging into customer account after creating a cart (email is inherited from customer account email)\n- Entering email address via guest checkout\n-Changing the email in guest checkout"
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/product/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart
      summary: /store/product/updated
      produces: []
      consumes:
        - application/json
  /store/product/deleted:
    post:
      responses:
        '200':
          $ref: '#/responses/CallbackResponse'
      description: >-
        This webhook will fire whenever a cart is deleted. This will occur
        either when all items have been removed from a cart and it is
        auto-deleted, or when the cart is explicitly removed via a DELETE
        request by an API consumer. This ends the lifecycle of the cart. The
        store/product/updated webhook will also fire when the last item is
        removed.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/product/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart
      summary: /store/product/deleted
      produces: []
      consumes:
        - application/json
  /store/cart/couponApplied:
    post:
      responses:
        '200':
          $ref: '#/responses/CallbackResponse'
      description: >-
        This webhook will fire whenever a new coupon code is applied to a cart.
        It will include the ID of the coupon code
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/cart/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart
      summary: /store/cart/couponApplied
      produces: []
      consumes:
        - application/json
  /store/cart/abandoned:
    post:
      responses:
        '200':
          $ref: '#/responses/CallbackResponse'
      description: >-
        This webhook will fire once after a cart is abandoned. A cart is
        considered abandoned if no changes were made at least one hour after the
        last modified property.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/cart/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart LineItem
      summary: /store/cart/abandoned
      produces: []
      consumes:
        - application/json
  /store/cart/converted:
    post:
      responses:
        '200':
          $ref: '#/responses/CallbackResponse'
      description: >-
        This hook fires when a cart is converted into an order, which is
        typically after the payment step of checkout on the storefront. At this
        point, the Cart is no longer accessible and has been deleted. This hook
        returns both the Cart ID and Order ID for correlation purposes.
      security: []
      parameters:
        - in: body
          name: body
          schema: {}
          x-examples:
            application/json:
              scope: store/cart/created
              store_id: '1025646'
              data:
                type: cart
                id: 09346904-4175-44fd-be53-f7e598531b6c
              hash: 352e4afc6dd3fc85ea26bfdf3f91852604d57528
              created_at: 1561482670
              producer: 'stores/{$$.env.store_hash}'
      tags:
        - Cart
      summary: /store/cart/converted
      produces: []
      consumes:
        - application/json
  /store/order/statusUpdated:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              '':
                $ref: '#/definitions/callback_Base'
              data:
                $ref: '#/definitions/order-updated'
      tags:
        - Cart
      description: >-
        This webhook fires when the status of an order is changed. It also fires
        when an order is created, because the order status is changed from `0`
        to a different status (depending on the payment gateway and payment
        capture settings).
      summary: /store/order/statusUpdated
      consumes:
        - application/json
  "store/order/message/created\t":
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              '':
                $ref: '#/definitions/callback_Base'
              data:
                $ref: '#/definitions/order-message-created'
      summary: "store/order/message/created\t"
      tags:
        - Cart
      consumes:
        - application/json
      description: "\tThis webhook is fired whenever a cart is modified through the changes in its line items. Eg. when a new item is added to a cart or an existing item’s quantity is updated. This hook also fires when the email is changed during guest checkout or an existing item is deleted. The payload will include the ID of the cart being updated.\nThis webhook is also fired along with cart created, because the first product being added to an empty cart triggers an update.\n- Logging into customer account after creating a cart (email is inherited from customer account email)\n- Entering email address via guest checkout\n-Changing the email in guest checkout"
  "store/order/archived\t":
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              '':
                $ref: '#/definitions/callback_Base'
              data:
                $ref: '#/definitions/order-created'
      summary: "store/order/archived\t"
      consumes:
        - application/json
      tags:
        - Cart
      description: This webhooks is triggered when an order is archived
basePath: ''
schemes:
  - https
consumes: []
produces: []
tags:
  - name: Cart
  - name: Cart LineItem
  - name: Category
securityDefinitions: {}
parameters:
  Accept:
    in: header
    type: string
    name: Accept
    default: application/json
  Content-Type:
    name: Content-Type
    in: header
    type: string
    default: application/json
definitions:
  cart_callback:
    type: object
    properties:
      scope:
        type: string
      store_id:
        type: string
      hash:
        type: string
      created_at:
        type: integer
      producer:
        type: string
      data:
        $ref: '#/definitions/cart_callbackData_Full'
    title: cart_callback
  cart_callbackData_Full:
    oneOf:
      - $ref: '#/definitions/cart_callbackData_Updated'
      - $ref: '#/definitions/cart_callbackData_Created'
  cart_callbackData_Updated:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
  cart_callbackData_Created:
    type: object
    properties:
      type:
        type: string
      id:
        type: string
  callback_Base:
    type: object
    title: callback_Base
    properties:
      store_id:
        type: string
      hash:
        type: string
      created_at:
        type: integer
      producer:
        type: string
  order-created:
    type: object
    title: Order Created
    properties:
      type:
        type: string
      id:
        type: integer
  order-updated:
    type: object
    title: Order Updated
    properties:
      type:
        type: string
      id:
        type: integer
      status:
        type: object
        properties:
          previous_status_id:
            type: integer
          new_status_id:
            type: integer
  order-message-created:
    type: object
    title: Order Message Created
    properties:
      type:
        type: string
      id:
        type: integer
      message:
        type: object
        properties:
          order_message_id:
            type: integer
responses:
  Webhooks Response:
    description: ''
    schema:
      type: object
      properties:
        id:
          type: integer
          description: Id of the webhook
          example: 18048287
        client_id:
          type: string
          description: 'Client ID, unique to the store'
          example: m9r6keqmo7h7f23btnpwernbez1kglkl
        store_hash:
          type: string
          description: 'Store permanent ID. '
          example: sftg45fsd
        scope:
          type: string
          description: Webhook event subscribed to
          example: store/order/*
        destination:
          type: string
          example: 'https://665b65a6.ngrok.io/webhooks'
          description: URL that returns a 200 response for webhooks
        headers:
          type: object
          description: >-
            You can pass in any number of custom headers to validate webhooks
            being returned.
          properties:
            custom:
              type: string
        is_active:
          type: boolean
          example: false
          description: If the webhook is active or not
        created_at:
          type: integer
          example: 1561488106
          description: Created time
        updated_at:
          type: integer
          example: 1561488106
          description: Updated time
    examples:
      application/json:
        id: 18048287
        client_id: m9r6keqmo7h7f23btnp3anbez1kglkl
        store_hash: '{store_hash}'
        scope: store/order/*
        destination: 'https://665b65a6.ngrok.io/webhooks'
        headers:
          username: Webhooks User
          password: Webhooks Password
        is_active: true
        created_at: 1561488106
        updated_at: 1561488106
  store/cart/created:
    description: >-
      This webhook will fire whenever a new cart is created either via a
      storefront shopper adding their first item to the cart or when a new cart
      being created via an API consumer. If it is from the storefront, then it
      fires when the first product is added to a new session.(The cart did not
      exist before) For the API it means a POST to /carts, (V3 and Storefront
      API). The store/cart/updated will also fire.
    schema:
      type: object
      properties:
        scope:
          type: string
        store_id:
          type: string
        data:
          type: object
          properties:
            type:
              type: string
            id:
              type: string
        hash:
          type: string
        created_at:
          type: integer
        producer:
          type: string
  CallbackResponse:
    description: >-
      To acknowledge that you received the webhook without issue, your server
      should return a 200 HTTP status code. Any other information you return in
      the request headers or request body will be ignored. Any response code
      outside the 200 range, including 3_xx_ codes, will indicate to us that you
      did not receive the webhook. When a webhook is not received (for whatever
      reason), we will retry the callback as described below.


      Need to set up a quick destination URL for testing? See [Tools for testing
      webhooks](https://developer.bigcommerce.com/api-docs/getting-started/webhooks/about-webhooks#about-webhooks_tools-for-debugging-and-testing-webhooks).
    schema:
      type: object
      properties: {}
host: '{$$.env.webhook_destination}?'
