{
  "title": "Dev Center",
  "header": {
    "nav": {
      "left": [
        {
          "title": "API Docs",
          "path": "/api-docs"
        },
        {
          "title": "Stencil Docs",
          "path": "/stencil-docs"
        },
        {
          "title": "Tools & Resources",
          "path": "/tools-resources"
        },
        {
          "title": "Changelog",
          "path": "/changelog"
        }
      ],
      "center": [],
      "right": [
        {
          "title": "My Apps",
          "path": ""
        },
        {
          "title": "Create Account",
          "path": ""
        }
      ]
    }
  },
  "pages": {
    "/": {
      "title": "",
      "data": {}
    },
    "/stencil-docs": {
      "title": "Stencil Docs",
      "data": {
        "children": [
          {
            "title": "Getting Started",
            "route": {
              "path": "/getting-started"
            },
            "data": {
              "children": [
                {
                  "title": "About Stencil",
                  "route": {
                    "path": "/about-stencil"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>About Stencil</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#what-is-stencil\"> What is Stencil?</a></li>\n\t\t<li><a href=\"#features-and-stack\"> Stencil Development Features and Technology Stack</a></li>\n\t\t<li><a href=\"#key-components\">Key Components (Video Demo)</a></li>\n\t\t<li><a href=\"#blueprint\"> Blueprint (Legacy Framework) Documentation </a></li>\n\t</ul>\n</div>\n"
                      },
                      {
                        "type": "text",
                        "data": "## What is Stencil?\n\nStencil is the theming engine for the BigCommerce platform and for BigCommerce's Cornerstone theme, which is the foundation a developer needs to quickly start developing premium, custom themes with Stencil. \n\n[Cornerstone](https://github.com/bigcommerce/cornerstone) is available on Github as an open source software, and will be the Stencil engined theme we reference in this documentation in order to demonstrate Stencil's capabilities in a fully functioning storefront theme. Here is a demo of the [BigCommerce Cornerstone theme](http://cornerstone-light-demo.mybigcommerce.com/).\n\nStencil also provides features that allow merchants to customize a storefront's look and feel with no coding, making Stencil a powerful and useful engine for all audiences.",
                        "header": {
                          "anchor": "what-is-stencil"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Stencil Development Features and Technology Stack\n\nStencil's provides the following features, allowing BigCommerce theme developers to create beautiful, dynamic, and powerful storefronts.\n\n\n### Stencil Command Line Interface (Stencil CLI)\n\nThe Stencil CLI enables developers to locally develop and customize on any Stencil theme with no impact on a merchant's live storefront during the development process. When locally developing, you will have access to real-time Browsersync preview and testing across desktop, mobile, and tablet devices/viewports.\n\nStencil CLI runs on the Node.js runtime environment. Installing Node.js also provides the required npm package manager.\n\n### Logic-Based Templates\n\nStencil's logic based templates allow BigCommerce developers to customize storefront pages efficiently with the lightweight templating languge, Handlebars.js.  Handlebars allows you to efficiently embed dynamic and conditional logic onto your storefront pages.\n\n### Sass/SCSS Support\n\nStencils Sass and SCSS support allows developers to nest properties, variables, and mixins. Use the familiar Foundation framework (provided) or substitute your choice of framework.\n\nStencil's Cornerstone base theme uses a BigCommerce pattern library called Citadel, which is built on top of the ZURB Foundation framework, version 5.5.3. Stencil does not support Foundation 6.x, due to breaking changes introduced between versions 5.x and 6.x.\n\nFoundation offers the framework for creating a responsive theme. You have the option of swapping out Foundation for another framework, although doing so would require significant work.\n\nFoundation assets bundled with Cornerstone are located in these subdirectories: \n\n* `Cornerstone/assets/scss/settings/foundation/ `\n* `Cornerstone/assets/scss/components/foundation/`\n\nCitadel extends Foundation’s mixins and components to provide Stencil’s own mixins, extensible components, and utilities. These include drop-down lists, forms, and similar resources. Citadel resources are named according to BEM and SUIT CSS conventions. Classes are named functionally, rather than based on visual presentation or content. Our style guide is published here.\nCitadel assets bundled with Cornerstone are located in these Cornerstone subdirectories: \n\n* `Cornerstone/assets/scss/settings/citadel/`\n* `Cornerstone/assets/scss/components/citadel/`\n\nMore detailed information about the Citadel and Foundation SCSS components, and their naming conventions will be covered in *Components and Design Patterns*.\n\n### Page-specific Resource Definition\n\nSpecify the dynamic content you want to be displayed on your storefront pages with YAML formatted front matter.\n\n### Javascript Event Hooks\n\nYour Stencil themes can access remote objects through event hooks, using the hooks to trigger defined events based on shopper behavior. This will allow you to collect product data and optimize a shopper's experience.\n\nTo facilitate theme-building, BigCommerce provides the stencil-utils client-side JavaScript library for managing event hooks.\n\n---\n\n## Stencil Theme Editor\n\nThe Stencil Theme Editor is a browser-based tool that enables merchants to rapidly customize a theme's look and feel with no coding. \n\nBigCommerce theme developers' configuration choices determine which theme aspects merchants can customize, and the range of choices for each aspect.\n\nStencil's Theme Editor graphical interface enables merchants and store administrators to make styling changes to the theme currently applied to their storefront. \n\nAs a theme developer, you have the capability to define which style settings appear in the Stencil Theme Editor. You can grant access to colors, fonts, display/hiding of page features, and number of products/entries to display per feature.\n\n### Stencil Theme Variations\n\nEach Stencil theme can contain one to four variations. You can optimize individual variations for specific markets, audiences and styles – while still managing and distributing all of these variations as one theme.\nCornerstone comes with 3 variations: Cornerstone Light, Cornerstone Warm, and Cornerstone Bold.\n\n### Responsive, Mobile-Friendly Themes\n\nBigCommerce stores powered by Stencil allow shoppers to have a first class experience across any device.\n\n\n_Note that this is simply a summary Stencil's core features. Continue reading through the Stencil Developer Documentation to learn about Stencil's full capabilities._",
                        "header": {
                          "anchor": "features-and-stack"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Key Components (Video Demo)\n\nWatch Stencil senior developer's tour of Stencil's key components:\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/p5SR8N0SeCg\" frameborder=\"0\" allowfullscreen></iframe>",
                        "header": {
                          "anchor": "video-demo"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Blueprint (Legacy Framework) Documentation\n\nIf you are looking for information on Blueprint, BigCommerce's legacy theme framework, you can access that below:\n\n* [Themes (Blueprint)](https://developer.bigcommerce.com/themes)\n* [Stores API reference](https://developer.bigcommerce.com/api)",
                        "header": {
                          "anchor": "blueprint"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Transitioning to Stencil",
                  "route": {
                    "path": "/transitionining-to-stencil"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Transitioning to Stencil</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#choosing-dev-path\"> Choosing a Development Path</a></li>\n\t\t<li><a href=\"#front-matter-quick-start\">Front-Matter Quick Start</a></li>\n    <li><a href=\"#front-matter-quick-start\">Handlebars Quick Start</a></li>\n\t\t<li><a href=\"#seo-tips\">SEO Tips and Best Practices</a></li>\n\t\t<li><a href=\"#blueprint-to-stencil\">Blueprint to Stencil Features Map</a></li>\n    <li><a href=\"#interacting-with-api\">Interacting with the BigCommerce API</a></li>\n    <li><a href=\"#partnering-with-bc\">Partnering with BigCommerce</a></li>\n    <li><a href=\"#next-steps\">Next Steps</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Choosing a Development Path\n\nAre you approaching Stencil from a different theming framework, like Blueprint, BigCommerce's legacy framework? Or moving to the Stencil templating environment from a pure HTML and CSS-based design?\n\nYou have four (non-mutually exclusive) options for developing Stencil themes:\n\n* Find a Design & Solutions Partner\n* Light Customization using the Theme Editor\n* Light Customization using HTML and CSS\n* Adapting a Stencil Theme or Developing from Scratch\n\n###  Find a Design & Solutions Partner\n\nIf you prefer to have an expert collaborator customize your theme, we recommend working with one of our certified BigCommerce Design & Solutions Partners. Reference the following resources to do so:\n\n* [Partner Directory](https://partners.bigcommerce.com/directory/search?i=75)\n* [Working with a Design Partner](https://support.bigcommerce.com/articles/Learning/Working-with-a-Design-Partner) (Support Guide)\n\n### Light Customization with Stencil Theme Editor\n\nStencil can be customized without the use of any specialized development tools or techniques by using of the Stencil Theme Editor. The Stencil Theme Editor still enables customization of a theme's colors, typography, banners, headings, carousel, and footer. It also enables customization of broader layout characteristics, such as the number of products displayed in various panels, category pages, and brand pages.\n\nFor details, please see:\n\n* [Theme Editor](https://support.bigcommerce.com/articles/Public/Using-the-Stencil-Theme-Editor/) (Support article)\n* [Stencil and the BigCommerce Control Panel](https://www.youtube.com/watch?v=d2F6F8LJXzs&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0&index=2) (Video introduction to Theme Editor)\n* [Changing Your Store's Theme](https://support.bigcommerce.com/articles/Learning/What-to-Consider-When-Changing-Your-Theme) (Support guide)\n* [Personalizing Your Theme](https://support.bigcommerce.com/articles/Learning/Personalizing-your-New-Theme) (Support guide)\n\n### Light Customization with HTML and CSS\n\nIf you are most comfortable working in HTML and CSS, Stencil's *Edit Theme Files* feature allows you to directly edit most of your theme's files from the Control Panel. For details, please see:\n\n* [Editing Stencil Theme Files](https://support.bigcommerce.com/articles/Public/Editing-Stencil-Theme-Files) (Support article)\n* [Getting Started with the Stencil Framework](https://www.youtube.com/watch?v=waJ1dg_dAh8&index=11&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0) (Video overview of copying and editing a theme's files)\n\n### Adapt a Stencil Theme, or Develop from Scratch\n\nFor complete control over a theme's appearance and logic – including the ability to edit _all_ theme configuration files – you will want to use the Stencil Command-line interface, also known as the Stencil CLI.\n\nTo learn Stencil CLI's templating conventions, see Installing Stencil CLI. Also take a look at BigCommerce's [Getting Started with the Stencil Framework](https://www.youtube.com/playlist?list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0) video playlist.",
                        "header": {
                          "anchor": "choosing-dev-path"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Front-Matter Quick Start\n\nStencil templates start with a section of \"front matter\" where you can and concisely customize each page's design and layout details. \n\nThis front-matter section uses conventions from YAML, a simple, widely used markup language. If you haven't used these conventions before, refer to our [Front-Matter Overview](https://stencil.bigcommerce.com/docs/using-yaml-front-matter).",
                        "header": {
                          "anchor": "front-matter-quick-start"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Handlebars Quick Start\n\nStencil uses Handlebars.js to assemble dynamic content into the storefront pages that are displayed to shoppers. The dynamic content can be drawn from a few sources, like the store's catalog.\n\nHandlebars' syntax is quite simple, and it allows you to accomplish powerful JavaScript operations with minimal JavaScript code. To learn more about Handlebars.js, see these third-party tutorials: \n\n* [Learn Handlebars in 10 Minutes or Less](http://tutorialzine.com/2015/01/learn-handlebars-in-10-minutes/)\n* [A Beginner’s Guide to Handlebars](https://www.sitepoint.com/a-beginners-guide-to-handlebars/)\n* [Getting Started with Handlebars.js](http://blog.teamtreehouse.com/getting-started-with-handlebars-js)\n* [Handlebars interactive tutorial](http://tryhandlebarsjs.com/)",
                        "header": {
                          "anchor": "handlebars-quick-start"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## SEO Tips and Best Practices\n\nSearch-engine optimization (SEO) helps translate an elegant theme into a successful, high-conversion storefront. Because so many shoppers reach online stores through a search engine, a search-optimized site will be more visible – attracting more traffic. \n\nThe Stencil framework is [designed for high SEO performance](https://www.bigcommerce.com/improve-organic-traffic/). However, you will want to keep SEO in mind as you build out each theme and storefront. For guidelines, please see these BigCommerce support articles (which are a series of intermediate to advanced chapters in our Guide to SEO):\n\n* [SEO Do's and Don'ts](https://support.bigcommerce.com/articles/Learning/Things-to-Know/)\n* [Developing a Keyword Strategy](https://support.bigcommerce.com/articles/Learning/Developing-a-Keyword-Strategy/)\n* [SEO Success Essentials](https://support.bigcommerce.com/articles/Learning/Bigcommerce-SEO-Success-Essentials/)\n* [Advanced SEO on BigCommerce](https://support.bigcommerce.com/articles/Learning/Advanced-SEO-on-Bigcommerce/)\n\nAlso checkout our [Guide to Keyword Research](https://support.bigcommerce.com/articles/Learning/Value-of-Keywords/).",
                        "header": {
                          "anchor": "seo-tips"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Blueprint-to-Stencil Features Map \n\nThis following resources are designed to help you identify the Stencil counterparts to familiar Blueprint components.\n\n* What to Consider When Changing Your Theme (Support article)\n* Stencil and the BigCommerce Control Panel (Video tour of Blueprint-to-Stencil  changes in the BigCommerce control panel)",
                        "header": {
                          "anchor": "blueprint-to-stencil"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Interacting with the BigCommerce API\n\nInteracting with the BigCommerce API\nBigCommerce's growing API resources enable application developers to create private scripts or apps that support a single store, or to create public apps offered to multiple stores via BigCommerce's App Marketplace.\n\nAs a theme developer, you can rely on apps to enhance your themes' capabilities, and to extend or complement the storefront features built into the BigCommerce platform. Popular app areas include inventory management, email marketing, coupons, reviews, shipping, tax accounting, and security. For more information, see BigCommerce's:\n\n* App Marketplace\n* API documentation",
                        "header": {
                          "anchor": "interacting-with-api"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Partnering with BigCommerce\n\nDo we belong together? No formal business relationship is required to develop themes on the BigCommerce platform. However, consider applying to become a BigCommerce Design & Solutions Partner (DSP), in order to accelerate your development of new business and revenue. For details, see our:\n\n* Overview of BigCommerce Partnerships\n* Design & Solutions Partners – basics and application links\n* Technology Partners – basics and application links\n* Partnership Application",
                        "header": {
                          "anchor": "partnering-with-bc"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Next Steps\n\nProceed to: \n\n* Installation and Launch instructions\n* Development Quick Start tutorial\n* Front-matter overview of YAML conventions\n* Front-matter attributes reference\n* Handlebars overview",
                        "header": {
                          "anchor": "next-steps"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Supported Browsers",
                  "route": {
                    "path": "/supported-browsers"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Supported Browsers</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#desktop-and-mobile\">Supported Desktop and Mobile Browsers</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Supported Desktop and Mobile Browsers\n\nThe following browsers are supported for BigCommerce storefronts that use Stencil-based themes. \n\nThe browsers are sorted by popularity, beginning with the most popular browsers. Please ensure that your theme functions properly with all supported browsers.\n\n### Desktop Browsers\n\n* Google Chrome (latest edition)\n* Firefox (latest edition)\n* Internet Explorer 10 and 11\n* Safari (latest edition)\n* Microsoft Edge (latest edition)\n\n### Mobile Browsers \n\n* Android Chrome browser (latest edition)\n* iOS Safari browser (latest edition)",
                        "header": {
                          "anchor": "desktop-and-mobile"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "type": "warning",
                          "body": "Browser support will cease to be offered if browser usage falls below 2%.",
                          "title": "Usage Support"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Installing Stencil",
                  "route": {
                    "path": "/installing-stencil"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Installing Stencil</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#installing_prerequisites\">Prerequisites by OS</a></li>\n    <li><a href=\"#installing_installing-the-stencil-cli\">Installing the Stencil Command Line Interface (CLI)</a></li>\n    <li><a href=\"#installing_cloning-cornerstone\">Cloning Cornerstone Using Github</a></li>\n    <li><a href=\"#installing_installing-stencils-js-utilities\">Installing Stencil's Javascript Utilities</a></li>\n    <li><a href=\"#installing_video-demo\">Video Demo</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "tabs",
                        "data": {
                          "children": [
                            {
                              "title": " Mac OS Prerequisites",
                              "blocks": [
                                {
                                  "type": "html",
                                  "data": "<h1>Mac OS Prerequisites</h1>"
                                },
                                {
                                  "type": "html",
                                  "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3>On This Tab</h3>\n\t<ul>\n    <li><a href=\"mac_xcode\">Installing Xcode</a></li>\n    <li><a href=\"mac_nodejs\">Installing Node.js</a></li>\n    <li><a href=\"mac_troubleshooting\">Troubleshooting</a></li>\n\t</ul>\n</div>\n"
                                },
                                {
                                  "type": "callout",
                                  "data": {
                                    "body": "These instructions have been tested on Mac OS X Yosemite. Dependencies for other platforms will be added upon further testing.",
                                    "title": "Platform Support"
                                  }
                                },
                                {
                                  "type": "text",
                                  "data": "## Installing Xcode \n\nYou must install the Xcode development tools (latest stable version).",
                                  "header": {
                                    "anchor": "mac_xcode"
                                  }
                                },
                                {
                                  "type": "text",
                                  "data": "---"
                                },
                                {
                                  "type": "text",
                                  "data": "## Node.js \n\nStencil requires the <a href=\"https://nodejs.org/\">Node.js</a> runtime environment, version <a href=\"https://nodejs.org/en/blog/release/\">6.x or later</a>. We have tested Stencil on selected Node.js versions, from <a href=\"https://nodejs.org/en/blog/release/v6.10.3/\">6.10.3</a> to <a href=\"https://nodejs.org/en/blog/release/v7.9.0/\">7.9.0</a>. \n\nWe recommend that you install or update Node.js using <a href=\"https://github.com/creationix/nvm#installation\">nvm</a>. First install nvm, version <a href=\"https://github.com/creationix/nvm/tree/v0.31.0\">0.31.0</a>, as follows:\n\n```\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash\n```\n\nNext, explicitly install a supported Node.js version, using this convention:<br>\n\n```\nnvm install 6.4.0\n```",
                                  "header": {
                                    "anchor": "mac_nodejs"
                                  }
                                },
                                {
                                  "type": "callout",
                                  "data": {
                                    "body": "You can choose to instead download the latest x.x version of Node.js from the Node.js Foundation's archives, using URLs of the form: https://nodejs.org/dist/latest-v6.x/, https://nodejs.org/dist/latest-v7.x/, etc. We recommend installing only LTS (\"Long-Term Support\"/\"Mature and Dependable\") versions.",
                                    "title": "Notes on Dependencies"
                                  }
                                },
                                {
                                  "type": "text",
                                  "data": "---"
                                },
                                {
                                  "type": "text",
                                  "data": "## Troubleshooting\n\nIf you run into any problems with Stencil installation or launch, first consult [Troubleshooting Your Setup](). \n\nIf that does not resolve your issue, consult our [Support resources](), which include community and peer support via BigCommerce and Stack Overflow forums.\n",
                                  "header": {
                                    "anchor": "mac_troubleshooting"
                                  }
                                }
                              ]
                            },
                            {
                              "title": "Linux Prerequisites",
                              "blocks": [
                                {
                                  "type": "html",
                                  "data": "<h1>Linux Prerequisites</h1>"
                                },
                                {
                                  "type": "html",
                                  "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3>On This Tab</h3>\n\t<ul>\n    <li><a href=\"#linux_root\">Root Permissions</a></li>\n     <li><a href=\"#linux_git-client\">Git Client</a></li>\n     <li><a href=\"#linux_nodejs\">Node.js</a></li>\n      <li><a href=\"#linux_troubleshooting\">Troubleshooting</a></li>\n\t</ul>\n</div>"
                                },
                                {
                                  "type": "callout",
                                  "data": {
                                    "body": "These instructions have been tested on Linux/Ubuntu v.14.04.4. Dependencies for other platforms will be added upon further testing",
                                    "title": "Platform Support"
                                  }
                                },
                                {
                                  "type": "text",
                                  "data": "## Root Permissions\n\nYou should have administrator/root permissions on your machine. (If not, you may need to precede some of the below commands with the `sudo` prefix.)",
                                  "header": {
                                    "anchor": "linux_root"
                                  }
                                },
                                {
                                  "type": "text",
                                  "data": "---"
                                },
                                {
                                  "type": "text",
                                  "data": "## Git Client\n\nYou must have a [Git client](https://git-scm.com/downloads) installed.",
                                  "header": {
                                    "anchor": "linux_git-client"
                                  }
                                },
                                {
                                  "type": "text",
                                  "data": "---"
                                },
                                {
                                  "type": "text",
                                  "data": "## Node.js\n\nStencil requires the Node.js runtime environment, version 6.x or later. We have tested Stencil on selected Node.js versions, from 6.10.3 to 7.9.0.\n\nWe recommend that you install or update Node.js using nvm. First install nvm, version 0.31.0, as follows:\n\n`curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash`\n\nNext, explicitly install a supported Node.js version, using this convention:\n\n`nvm install 6.4.0`",
                                  "header": {
                                    "anchor": "linux_nodejs"
                                  }
                                },
                                {
                                  "type": "text",
                                  "data": "---"
                                },
                                {
                                  "type": "text",
                                  "data": "## Troubleshooting\n\nIf you run into any problems with Stencil installation or launch, please first see our Troubleshooting Your Setup page. Next, please consult our Support resources, which include community/peer support via BigCommerce and Stack Overflow forums.",
                                  "header": {
                                    "anchor": "linux_troubleshooting"
                                  }
                                }
                              ]
                            },
                            {
                              "title": "Windows Prerequisites",
                              "blocks": [
                                {
                                  "type": "html",
                                  "data": "<h1>Windows Prerequisites</h1>"
                                },
                                {
                                  "type": "html",
                                  "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Tab </h3>\n\t<ul>\n     <li><a href=\"#windows_root-permissions\">Root Permissions</a></li>\n     <li><a href=\"#windows_git-client\">Git Client and Git BASH</a></li>\n     <li><a href=\"#windows_python-installation\">Python Installation</a></li>\n     <li><a href=\"#windows_python-node-config\">Python/Node Configuration</a></li>\n     <li><a href=\"#windows_node-installation\">Node.js Installation</a></li>\n     <li><a href=\"#windows_compiler-options\">C++ Compiler Options</a></li>\n    <li><a href=\"#windows_troubleshooting\">Troubleshooting</a></li>\n\t</ul>\n</div>"
                                },
                                {
                                  "type": "callout",
                                  "data": {
                                    "body": "The following instructions have been tested on Windows 8. Dependencies for other platforms will be added upon further testing.",
                                    "title": "Platform Support"
                                  }
                                },
                                {
                                  "type": "text",
                                  "data": "## Root Permissions\n\nYou must have authorization to run Powershell \"as administrator\" on your machine.",
                                  "header": {
                                    "anchor": "windows_root-permissions"
                                  }
                                },
                                {
                                  "type": "text",
                                  "data": "---"
                                },
                                {
                                  "type": "text",
                                  "data": "## Git Client and Git BASH\n\nYou must have a Git client installed. The Git for Windows distribution includes a Git client, and also provides the Git BASH emulator for command-line access. All commands should be run in Git Bash from here.",
                                  "header": {
                                    "anchor": "windows_git-client"
                                  }
                                },
                                {
                                  "type": "text",
                                  "data": "---"
                                },
                                {
                                  "type": "text",
                                  "data": "## Python Installation\n\nInstall [Python 2.7.x for Windows](https://www.python.org/downloads/windows/). This is required for Visual Studio's Windows Build Tools, installed below. **Python 3.x is not supported.**\n\nIn the installer dialog shown below, change the bottom default, so as to enable the `Add python.exe` to Path option. This provides global command-line access to Python.",
                                  "header": {
                                    "anchor": "windows_python-installation"
                                  }
                                },
                                {
                                  "type": "image",
                                  "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539115629012"
                                },
                                {
                                  "type": "text",
                                  "data": "---"
                                },
                                {
                                  "type": "text",
                                  "data": "## Node.js Installation\n\nStencil requires the [Node.js]() runtime environment, version [6.x or later]().\n\nOn Windows, we have tested Stencil CLI on selected Node.js version [7.10.0](https://nodejs.org/en/blog/release/v7.10.0/\"7.10.0). We recommend that you install only an LTS (\"Long-Term Support\"/\"Mature and Dependable\") version, and that you download that version's `.msi` installer (not its `.exe` binary).\n\n**Note:** _You can choose to instead download the latest x.x version of Node.js from the Node.js Foundation's archives, using URLs of the form: [https://nodejs.org/dist/latest-v8.x/](https://nodejs.org/dist/latest-v8.x/), [https://nodejs.org/dist/latest-v8.x/](https://nodejs.org/dist/latest-v8.x/), etc. In all cases, we recommend installing only LTS (\"Long-Term Support\"/\"Mature and Dependable\") versions. However, please see the restriction on technical assistance in the Notes on Dependencies below._\n\nTo verify your Node.js installation or reinstallation, this [blog post](http://blog.teamtreehouse.com/install-node-js-npm-windows) provides Windows-specific tips and tests.",
                                  "header": {
                                    "anchor": "windows_node-installation"
                                  }
                                },
                                {
                                  "type": "callout",
                                  "data": {
                                    "body": "You will need to restart your computer to complete Node.js installation.",
                                    "type": "warning",
                                    "title": "Restart Required"
                                  }
                                },
                                {
                                  "type": "text",
                                  "data": "## Python/Node Configuration\n\nAfter installing both Python and Node.js, configure Python within the Node.js runtime environment by running this npm command:\n\n`npm config set python python2.7`",
                                  "header": {
                                    "anchor": "windows_python-node-config"
                                  }
                                },
                                {
                                  "type": "callout",
                                  "data": {
                                    "body": "The [node package manager](https://www.npmjs.com/) was installed as part of Node.js. As you proceed through Stencil CLI setup (and later refreshes), you will use this command-line utility to install packages/modules, and to configure and manage dependencies and their versions.",
                                    "title": "About Node Package Manager (npm)"
                                  }
                                },
                                {
                                  "type": "text",
                                  "data": "## C++ Compiler Options\n\nChoose to either install Turbo C++ or Visual Studio for your C++ Compiler.\n\n### Turbo C++\n\nYou can install Turbo C++ as a lighter version instead of Visual Studio. The installation takes about 5 minutes. After installation, a box opens that highlights the features of Turbo C++. This box can be closed since it is not needed to complete installation. If you prefer using Visual Studio then use the steps below.\n\n### Visual Studio Installation\nInstall MicroSoft Visual Studio. Stencil requires a 2013 or later release, Community Edition (free) or higher.\n\nBe sure to install Visual Studio's \"Common Tools\" component. You can also add this component later in the window shown below.\n\n### Visual Studio Version/Node Configuration\nFinally, configure Visual Studio within the Node.js runtime environment by running the following npm command.\n(Replace the 2015 parameter with 2013 or 2017, as needed, to match the Visual Studio release you have installed:)\n\n`npm config set msvs_version 2015`\n",
                                  "header": {
                                    "anchor": "windows_compiler-options"
                                  }
                                },
                                {
                                  "type": "callout",
                                  "data": {
                                    "title": "Notes on Dependencies",
                                    "body": "While alternate versions might also support Stencil, BigCommerce does not offer technical assistance on substitutions for, or customized versions of, the tested dependencies listed here.\n\nOnce Stencil is fully installed, you can check dependencies' installed versions by examining your `<theme-name>/package.jsonfile`."
                                  }
                                },
                                {
                                  "type": "text",
                                  "data": "## Troubleshooting\n\nIf you run into any problems with Stencil installation or launch, please first see our [Troubleshooting Your Setup]() article. If that doesn't solve the issue, try consulting our [Support resources](https://forum.bigcommerce.com/s/group/0F913000000HLjECAW/bigcommerce-developers).",
                                  "header": {
                                    "anchor": "windows_troubleshooting"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        "header": {
                          "title": "Stencil Prerequisites by OS",
                          "anchor": "installing_prerequisites"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Installing the Stencil Command Line Interface\n\nThe first step toward developing on Stencil is to install the Stencil CLI. \n\nYou can do this via the following command (_If you are using Windows, you will need to run this command in git bash._):\n\n`npm install -g @bigcommerce/stencil-cli`\n\n### Items to Note\n\n* The command above requires <a href=\"https://www.npmjs.com/\">npm</a> to be installed in your local development environment.\n\n* In Windows, this <span class=\"inline-code\">npm</span> command's execution might at times appear to freeze. However, the installer is running. \nGive it several minutes to complete installation.\n\n* On Mac OS machines with installed xcode, version 5.x, this <span class=\"inline-code\">npm</span> command has generated errors of the form: \n<span class=\"inline-code\">npm ERR! invalid: string_decoder</span>. The workaround is to upgrade xcode to the latest stable xcode version \n(7.3.1 as of this page's last revision). \n\n* If you receive a file-permissions error, and you did not install Node.js via <a href=\"https://github.com/creationix/nvm#installation\">nvm</a> (Node Version Manager), \nthen either install nvm now, or follow one of the workarounds on this external page: \n  [https://docs.npmjs.com/getting-started/fixing-npm-permissions](https://docs.npmjs.com/getting-started/fixing-npm-permissions)",
                        "header": {
                          "anchor": "installing_installing-the-stencil-cli"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "body": "To ensure the Stencil CLI is compatible with all the changes introduced in Cornerstone 2.0.0, you must upgrade to the latest version of Stencil CLI (1.15.1) if using Cornerstone 2.x.x.\n\nOccasionally, you will receive a command line prompt to run the installation command when you restart your Stencil server. This occurs when BigCommerce publishes a critical fix in Stencil CLI, to resolve an issue like a newly discovered security exploit.",
                          "title": "CLI Force Upgrade and Cornerstone 2.0.0",
                          "type": "warning"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Cloning Cornerstone using Github\n\n_Windows users need to run this in git bash._\n\nNavigate to a directory where you would like to install a subdirectory for your theme. You must have appropriate write permissions in this directory. \n\nExecute the following command to clone Stencil's base theme, Cornerstone, into a new subdirectory named `.../cornerstone/`\n\n`git clone https://github.com/bigcommerce/cornerstone.git`\n  \nIf the above command fails, and you are accessing GitHub anonymously, give the URL this alternate prefix:\n\n`git clone git://github.com/bigcommerce/cornerstone.git`\n\n\n<!-- Add a note here: If downloading a marketplace theme, must install jspm, register your jspm instance, and set up BitBucket access...  -->\n\n<!-- If you are installing Stencil for the first time, then in--> In the next step, you will install Stencil's <a href=\"/docs/stencil-docs/getting-started/installing-and-launching/javascript-utilities\">JavaScript utilities</a> to enable API access via Ajax.\n\n/stencil-docs/getting-started/installing-and-launching/adding-a-base-theme",
                        "header": {
                          "anchor": "installing_cloning-cornerstone"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "body": "If you are reinstalling over a base theme on which you have already begun development, first back up your theme's `.stencil` file. This contains your store URL, BigCommerce username and access tokens, and other basic settings. Preserving those settings will speed up initializing and launching the new version. If you would like to allow for complete rollback, back up your entire theme's directory.",
                          "type": "error",
                          "title": "Back Up before Reinstalling"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Installing Stencil's Javascript Utilities\n\nStencil's Cornerstone theme provides utilities called `stencil-utils` to enable API usage (via Ajax) to BigCommerce's backend. \n\nYou will learn more about Stencil Utils in our Stencil Utils overview, but for now, you'll want to be sure you have it installed in your theme. \n\nYou must use [npm](https://www.npmjs.com/) to install the `stencil-utils` module in your theme during initial installation. You must run `npm install` after downloading and installing a refreshed Cornerstone version to ensure that all your dependencies are up to date.\n\n_Windows users need to run this in git bash._\n\nComplete the following steps:\n\nNavigate to your Stencil theme directory. This example assumes that this target directory has the default name `cornerstone`.\n\n`cd cornerstone`\n\nNext, execute the following command inside of that directory:\n\t\n`npm install`\n\nThis will install the required npm modules to properly leverage the Stencil event framework.\n\nNow that your installation is complete, start \n<a href=\"/docs/preparing-your-store-tokens\">preparing your store/tokens</a>.",
                        "header": {
                          "anchor": "installing_installing-stencils-js-utilities"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Video Demo\n\nWatch a brief demonstration of the Stencil installation and launch:\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/iWBrJalyM0A\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>",
                        "header": {
                          "anchor": "installing_video-demo"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Authentication and Tokens",
                  "route": {
                    "path": "/authentication-and-tokens"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Creating an API Account to Obtain OAuth Tokens</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#authentication_creating-an-api-account\">Creating an API Account</a></li>\n    <li><a href=\"#authentication_issuing-additional\">Issuing Additional Tokens</a></li>\n    <li><a href=\"#authentication_revoking-tokens\">Revoking Tokens</a></li>\n    <li><a href=\"#authentication_copying-oauth-tokens \">Copying OAuth Tokens</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "callout",
                        "data": {
                          "type": "error",
                          "body": "If you've successfully installed Stencil you're ready to create a BigCommerce API Account. \n_If you have not yet installed Stencil, see the articles in \"Installing and Launching Stencil._",
                          "title": "Status Check"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Creating an API Account \n\nFollow the steps below to create an API Account and obtain your OAuth Tokens.\n\n1. Using the store owner's credentials, log into the control panel of the store for which you are developing. \n\n2. From the left nav, select `Advanced Settings` > `API Accounts`.\n\n3. From the resulting Store API Accounts page, select the `Create API Account` button.\n\n4. Give your account a name that reflects its purpose.\n\n_The BigCommerce platform does not validate this name, however, we recommend naming accounts by purpose to help you keep track of which accounts you need to keep active. You should assign a name that will make the account's purpose clear to you and other store administrators._\n\n5. Under OAuth Scopes, set the Themes selector to either `modify` or `read-only`.\n\n_The read-only scope is sufficient to authorize/initialize a Stencil theme. However, the modify scope will achieve the same goal, while also authorizing this account to upload themes to the store from the command line._\n\n6. Click `Save`. \n\n_As outlined in [this support article](), doing so will display a modal, from which you can copy your `Client ID` and `Access Token` values. The modal will also prompt your browser to download a .txt file that contains your credentials. You will need these values to authorize and initialize your Stencil theme. If you're ready to do so now, move ahead to [Authorizing and Initializing Stencil]()._",
                        "header": {
                          "anchor": "authentication_creating-an-api-account"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "type": "warning",
                          "title": "Reserved Role",
                          "body": "Currently, only the store owner can create an OAuth API account according to the instructions below. Also, note that each store is limited to 50 accounts at a time."
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Issuing Additional Tokens\n\nTo issue store tokens for additional themes or developers, repeat the process outlined in Creating an API Account.\n\n(Even if you originally initialized your theme using a legacy API [Basic-Auth] token, you will need to generate any new tokens using the new OAuth flow.)\n\nYou can create up to 50 API accounts/tokens per store. If you hit this limit and still need to create new tokens, you will need to delete existing accounts. Deleting an account will invalidate the corresponding token, which will affect any developer using that token.\n",
                        "header": {
                          "anchor": "authentication_issuing-additional"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Revoking OAuth Tokens\n\n**Note**: After completing the below process, there is no undo. The following process completely deletes the selected account(s), revoking the corresponding token(s).\n\nIf you are completely sure you would like to revoke an existing OAuth store token, delete the corresponding Store API account with the following steps:\n\n1. Navigate to the Control Panel's API Accounts page.\n\n2. Select the trash-can button to the right of the account that you want to delete.\n\n_*You can also use the check boxes at left to select multiple accounts to delete them all at once._",
                        "header": {
                          "anchor": "authentication_revoking-tokens"
                        }
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1537421464104"
                      },
                      {
                        "type": "text",
                        "data": "## Copying OAuth Tokens \n\nTo access an existing OAuth token to authorize your theme:\n\n1. Open the `.txt` file that the BigCommerce control panel generated when you created the API account.\n\n_If you did not retain this file, you will need to generate a new token by repeating the Creating an API Account procedure._\n\n2. Note the Client ID and Access Token hashes in the file (or in the control-panel modal for your newly created token).\n\n3. If you are a merchant granting an outside theme developer access to your store, provide the Client ID and Access Token values to the developer. The developer will need these when [Authorizing and Initializing Stencil](). If you are a merchant developing a theme against your own store, you will use the same two values in the same [Authorizing and Initializing Stencil]() step.",
                        "header": {
                          "anchor": "authentication_copying-oauth-tokens "
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Launching Stencil",
                  "route": {
                    "path": "/launching-stencil"
                  },
                  "data": {
                    "children": [
                      {
                        "title": "Authorizing and Initializing Stencil",
                        "route": {
                          "path": "/authorizing-and-initializing"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Authorizing and Initializing Stencil</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#authorizing_authorizing-oauth\">Authorizing with OAuth Tokens</a></li>\n\t</ul>\n</div>"
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "Even when you share a theme across storefronts, we strongly recommend that you clone a separate subdirectory (each containing its own .stencil file) for each store. This helps isolate and secure each merchant's data.\n\nYou can clone your .../cornerstone/ subdirectory now to create your first isolated copy, and then switch to the resulting new subdirectory to continue. (Prior to March 2017, Stencil's default subdirectory name was .../stencil/.)",
                                "title": " Best Practice: Isolate Stores by Subdirectory"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Authorizing with OAuth Tokens\n\nUse the following steps to authorize your theme using an OAuth API account:\n\n1. Have your store API account's Client ID and Access Token hashes ready. \n(Refer back to the Copying a Token to Initialize Stencil or Creating an API Account instructions.)\n\n2. Starting from the subdirectory for the appropriate theme (and store), initialize Stencil CLI by running the following command (_Windows users need to run this in git bash_):\n\n`stencil init`\n\n3. You will be prompted to provide the homepage URL of the production store against which you want to develop. This can be your own store, or a client store that you are customizing.\n\n4. Next, you will be prompted to enter the port where you would like to run your store on your local machine. This can be any port you like, but we recommend using port 3000.\n\n5. Next, you will be prompted: What is your Stencil OAuth Client ID? Enter your store API account's Client ID.\n\n(If you used this Client ID when you last ran stencil init, you'll see it hinted on the command line, and can just confirm it.)\n\n6. Finally, you will be prompted: What is your Stencil OAuth Access Token? If you entered these credentials when you last ran stencil init, you'll see the token hinted in cleartext. If not, paste your Access Token hash onto the command line. Then press Enter.\n\n\nYour terminal window should now confirm that you have successfully initialized Stencil CLI on your local machine. With Stencil CLI initialized, you are ready to start Stencil and begin development.\n\n\n"
                            }
                          ]
                        }
                      },
                      {
                        "title": "Running Stencil Locally",
                        "route": {
                          "path": "/running-stencil-locally"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Running Stencil Locally</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#root-permissions\">Local Launch: Theme Only</a></li>\n    <li><a href=\"#node.js\">Local Launch: Theme and Theme Editor</a></li>\n    <li><a href=\"#next-steps\">Customizing Theme Editor's Port</a></li>\n    <li><a href=\"#next-steps\">Local Launch: Disabling Caching</a></li>\n\t</ul>\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## Local Launch: Theme Only\n\nIn order to run Stencil locally, issue the following command in your initialized Stencil theme directory (_Windows users need to run this in git bash_):\n\n`stencil start`\n\nAssuming that you set Stencil to run on `port 3000`, when you navigate to http://localhost:3000, you should see the storefront to which you pointed your local instance – but with the stencil theme applied to it.\n\n## Troubleshooting Token Errors\n\nIf you receive the following error message, \n\n`Unauthorized, please use a valid username/token`\n\nthen store token authentication has failed.\n\nIn this case, please track back and review the following articles:\n\n* [Creating an API Account](creating-an-api-account): How to issue or reissue tokens in the BigCommerce control panel.\n* [Authorizing and Initializing Stencil:](authorizing-and-initializing-stencil): How to initialize Stencil with your username and token."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Troubleshooting Token Errors\n\nIf you receive the following error message, then store token authentication has failed:\n\n`Unauthorized, please use a valid username/token`\n\nIn this case, please review these steps:\n* Creating an API Account: How to issue or reissue tokens in the BigCommerce control panel.\n* Authorizing and Initializing Stencil: How to initialize Stencil with your username and token."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Local Launch: Theme and Theme Editor\n\nTo run Stencil locally while also launching a local version of Theme Editor, start in your theme directory and run the following command, but append the -e option:\n\n`stencil start -e`\n\nThe Theme Editor server will run in parallel with the stencil theme at [http://localhost:8181](http://localhost:8181/). The use case for this is a developer who is reconfiguring the Theme Editor/Store Design (check terminology) settings. It is important to note this is a tool to understand the experience changes when editing the schema.json file. Making changes to your store on the Theme Editor/Using store design on the local host port will not affect your life store."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Customizing Theme Editor's Port\n\nYou can override Theme Editor's default port by appending the \"--theme-editor-port [port]\" option. For example, to specify port 9000, you would enter:\n\n`stencil start -e --theme-editor-port 9000\n`\n\nTo verify Theme Editor's launch, you would then go to http://localhost:9000. Using this option, you can specify any port between `1024` and `65535`."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Local Launch: Disabling Caching\n\nBy default, Stencil caches API resource data per storefront page. This minimizes server traffic while you develop your theme locally.\nIf you prefer to see your changes reflected immediately in your live store, you can turn off caching by appending the `--no-cache` or `-n` option:\n\n`stencil start --no-cache`\n`stencil start -n`\n\n### To re-enable caching:\n\nKill the current Stencil server (_ctrl + c will do the job_) and restart Stencil, this time omitting the `--no-cache` or `-n` option.\n\n`stencil start` \n"
                            }
                          ]
                        }
                      },
                      {
                        "title": "Troubleshooting Your Setup",
                        "route": {
                          "path": "/troubleshooting-your-setup"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Troubleshooting Your Setup</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#desktop-and-mobile\">Unsupported Node Version</a></li>\n    <li><a href=\"#desktop-and-mobile\">npm install errors (\"Unmet Peer Dependency\")</a></li>\n    <li><a href=\"#desktop-and-mobile\">npm install/stencil init Errors/a></li>\n    <li><a href=\"#desktop-and-mobile\">npm install permissions Errors</a></li>\n    <li><a href=\"#desktop-and-mobile\">\"Uncaught TypeError: Illegal invocation\" error: Re-run npm install inside Theme Directory</a></li>\n    <li><a href=\"#desktop-and-mobile\">\"js/bundle\" Errors upon stencil init</a></li>\n    <li><a href=\"#desktop-and-mobile\">stencil init/stencil start Errors</a></li>\n    <li><a href=\"#desktop-and-mobile\">Mac OS:\"Xcode/iOS license...\" Errors upon Stencil Commands</a></li>\n\t</ul>\n</div>"
                            },
                            {
                              "type": "callout",
                              "data": {
                                "title": "First Check the Terminal Window",
                                "body": "For any unexpected behavior that you encounter while developing your Stencil theme, first check your terminal window where you started Stencil CLI. \n\nIn some cases, the terminal will provide a verbose error message specifying where to look for problems. In any case, it has the potential to provide further insight on the issue. Diagnostic suggestions are listed on this page for error messages that may not be helpful in revealing the issue you're experiencing."
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Unsupported Node Version\n"
                            },
                            {
                              "type": "text",
                              "data": "## `npm install` Errors\n\nIf you get any `Unmet Peer Dependency` errors when issuing the `npm install` command – or at other times – make sure you are running the `npm install` command **inside** your theme directory.\n\nIf running the `npm install ` command inside your theme directory does not resolve the error, try one of the following:\n\n* Try removing your theme directory's `/node_modules/` subdirectory, by running `rm -rf node_modules`\n\n* Run the `npm cache clean` command\n\n* Re-run `npm install`"
                            },
                            {
                              "type": "text",
                              "data": "## `npm install` and `stencil init` Errors\n\nPlease similarly check and adjust your Node.js version – by following the Prerequisites link above to see platform-specific recommendations – if you get unexpected error messages when issuing the npm install or stencil init commands."
                            },
                            {
                              "type": "text",
                              "data": "## \"Uncaught TypeError: Illegal invocation\" error\n\nIf you receive an `Uncaught TypeError: Illegal invocation` console error, and previously installed Stencil using the original jspm-based installation flow, then later switched to our current webpack installation flow: Please remove your theme's `/node_modules/` subdirectory, then re-run `npm install` inside your theme's directory.\n"
                            },
                            {
                              "type": "text",
                              "data": "## \"js/bundle\" Errors upon `stencil init`\n\nIf you get errors of the following type upon executing the stencil init command:\n\n```\nPotentially unhandled rejection [6] TypeError: Error loading \"js/bundle\" \nat file:/Users/<username>/Desktop/Fortune-1.4.6/assets/js/bundle.js\n\nError evaluating file:/Users/<username>/Desktop/Fortune-1.4.6/assets/js/bundle.js\n\nCannot read property 'createElement' of undefined...\n```\n\ntry the following workaround:\n\n1. Download and unzip a fresh copy of the theme.\n\n3. Refresh theme dependencies by running `npm install && jspm install`\n\n3. Run `stencil init`.\n\n*You will see the same error message as before, but proceed.*\n\n4. Delete the `<theme-name>/assets/js/bundle.js` file.\n\n5. Run `stencil init` again.\nThis should now execute properly.\n6. Run `stencil start`\n\n8. Verify your theme's launch at: http://localhost:3000.\n\n"
                            },
                            {
                              "type": "text",
                              "data": "## stencil init/stencil start Errors\n\nIf you get unexpected error messages or unexpected results upon executing the `stencil init`, `stencil start`, or other Stencil CLI commands, make sure you are working in the subdirectory for the specific theme you intend to launch. \n\nOne way of checking what directory you are working in is by running the `pwd` command in your terminal."
                            },
                            {
                              "type": "text",
                              "data": "## stencil start/missing module Errors\n\nIf executing `stencil start` provokes errors like the following\n\n```\nmodule.js:327\nthrow err;\n^\n\nError: Cannot find module 'webpack'\nat Function.Module._resolveFilename (module.js:325:15)\nat Function.Module._load (module.js:276:25)\nat Module.require (module.js:353:17)\nat require (internal/module.js:12:17)\nat Object. (/Users/jane.doe/themes/cornerstone/stencil.conf.js:2:15)\nat Module._compile (module.js:409:26)\nat Object.Module._extensions..js (module.js:416:10)\nat Module.load (module.js:343:32)\nat Function.Module._load (module.js:300:12)\nat Module.require (module.js:353:17)\n```\n\nswitch to your theme directory and run `npm install`. Running this command will add the missing JavaScript library dependencies.\n\nIf you receive the same error again after running `npm install`, you should completely uninstall and reinstall both the Stencil framework and Node.js.\n\n### Uninstalling and Reinstalling Stencil CLI\n\nIf you encounter persistent problems in initializing or starting Stencil, you have the option of completely removing Stencil CLI and doing a fresh reinstall. You would do so as follows:\n\n1. From your command line, issue the command:\n`npm uninstall -g @bigcommerce/stencil-cli`\n\n2. Navigate back to the Installing and Launching Stencil section and repeat all installation steps to reinstall dependencies and restore your theme, according to your development scenario."
                            },
                            {
                              "type": "callout",
                              "data": {
                                "title": "Alternative Options",
                                "body": "A more-drastic measure is to **also** uninstall and reinstall Stencil CLI's Node.js prerequisites (along with uninstalling Stencil CLI). We do not recommend this, as it might disable other Node.js applications on your local machine.",
                                "type": "error"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Stencil CLI Options and Commands",
                        "route": {
                          "path": "/stencil-cli-options-and-commands"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Stencil CLI Options and Commands</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#stencil_basic-cli\">Basic CLI Options and Commands</a></li>\n    <li><a href=\"#stencil_stencil-start\">Stencil Start Options</a></li>\n    <li><a href=\"#stencil_stencil-push\">Stencil Push Options</a></li>\n\t</ul>\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## Basic CLI Options and Commands\n\nThe syntax to run a basic Stencil CLI command is: stencil <commands> [options] <parameter>.\n\nTo see the basic options and commands that the Stencil CLI package supports, enter any of the following forms of the help option on your command line:\n\n`stencil <command> [option] <parameter>`\n\nTo see the basic options and commands that the Stencil CLI package supports, enter any of the following forms of the help option on your command line:\n\n```\nstencil\nstencil help\nstencil --help\nstencil -h\n```\n\nYour terminal window will display options and commands listed in the tables below. \n",
                              "header": {
                                "anchor": "#stencil_basic-cli"
                              }
                            },
                            {
                              "type": "html",
                              "data": "<table>\n  <tr>\n    <th>Option</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>-h, --help</td>\n    <td>Outputs usage information.</td>\n  </tr>\n  <tr>\n    <td>-V, --version</td>\n    <td>Outputs the version number (which is read from package.json file</span>).</td>\n  </tr>\n</table>\n\n<p></p>\n<table>\n  <tr>\n    <th>Command</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>init</td>\n    <td >Interactively creates a .stencil file, which configures how to run a BigCommerce store locally.</td>\n  </tr>\n  <tr>\n    <td>start</td>\n    <td>Starts up the BigCommerce store, using theme files in the current directory. \n\n<b>Note:</b> If stencil start generates an \"Unauthorized, please use a valid username/token error: Please make sure that the .stencil file contains the correct store URL and (for OAuth) the correct URL prefix). Also, verify that you have copied the correct credentials, as outlined here. If you continue to get the same error, please reissue tokens, as outlined here.\n    </td>\n  </tr>\n \n  \n  <tr>\n    <td>bundle</td>\n    <td>Bundles up the theme into a structured .zip file, which can be uploaded to BigCommerce. (Please see restrictions here).</td>\n  </tr>\n  \n  <tr>\n    <td></a>push</td>\n    <td>Bundles up the theme into a structured .zip file; then directly uploads (pushes) the .zip to BigCommerce.(Please see</nobr> usage instructions here. The same restrictions apply as for the bundle command.)</td>\n  </tr>\n  \n  <tr>\n    <td>release</td>\n    <td>Creates a new release in a theme's GitHub repository. Developers outside BigCommerce can use this for forks (not master) of Stencil's Cornerstone base theme, or for their own parallel themes independent of Cornerstone.</td>\n  </tr>\n    \n  <tr>\n    <td>help &lt;command&gt;</td>\n    <td>return all the options available to use for the specified command. For example, <code>stencil help bundle</code> will return the options that are available to use specifically with the stencil bundle command.\t\n    </td>\n  </tr>  \n  \n</table>"
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1538055264839",
                              "header": {
                                "title": "Basic Stencil CLI Options and Commands"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "title": "'stencil start' and 'stencil push' Options",
                                "body": "The `stencil start` and `stencil push` CLI Commands have additional custom options that can be used with the command, which are detailed below."
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Stencil Start Options\n\nTo see Stencil CLI's additional options for the `stencil start` command (described above), enter the following on your command line:\n\n`stencil help start` \n\nYour terminal screen should read similar to the image below.\n",
                              "header": {
                                "anchor": "#stencil_stencil-start"
                              }
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1538029681278",
                              "config": {
                                "maxWidth": "1300",
                                "maxHeight": "1300"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Stencil Push Options\n\nTo see Stencil CLI's additional options for the stencil push command (described above), enter the following on your command line:\n\n`stencil help push`\n\nYour terminal screen should read similar to the image below."
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1538055086025",
                              "config": {
                                "maxHeight": "800",
                                "maxWidth": "800"
                              }
                            },
                            {
                              "type": "text",
                              "data": "You can use the `-f` or `--filename` option in cases where you have already run `stencil bundle` to bundle your theme, but the resulting .zip file has not yet uploaded to BigCommerce. Use the generated .zip file's **filename** as a parameter to identify the generated file in your theme directory. An example of the command is outlined below.\n\n`stencil push -f Cornerstone-2.3.2.zip`\n\nIn this example, `Cornerstone-2.3.2.zip` is the name of the file that was generated after running `stencil bundle`.\n\nWhen you run `stencil push` with the `-f` or `--filename` option, Stencil CLI skips all its bundling steps and diagnostics. It proceeds directly to uploading the specified file, displaying its processing progress bar to show upload status.\n\n"
                            }
                          ]
                        }
                      },
                      {
                        "title": "Cornerstone File Structure",
                        "route": {
                          "path": "/cornerstone-file-structure"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Cornerstone File Structure</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#cornerstone_cornerstone-file-structure\">The Cornerstone Theme File Structure</a></li>\n\t</ul>\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## The Cornerstone Theme File Structure\n\nCornerstone is the base Stencil theme, and it is also the default theme for all newly initialized local storefronts. Cornerstone provides the standard file structure, base design pattern, and default file assets necessary to start developing a custom storefront experience.\n\nThe Cornerstone file structure consists of four main subdirectories. Within those subdirectories, you'll be directed to specific files in the Development Quick Start tutorial and in Stencil reference material:\n\n### `template/pages`\n`templates/pages` contains all the base template pages used in a BigCommerce online storefront. The pages are grouped by page category. In order to prevent any rendering errors, please avoid changing page names. For details, please see Templates Required Directory > Pages Subdirectory.\n\n\n### `template/components`\n`templates/components` Components consist of code snippets and partials that can be reused throughout your theme. This directory is grouped by component type. For details, please see Templates Required Directory > Component Subdirectory.\n\n### `template/layout`\n`templates/layout` define the overall structure (header, footer, etc.) for your storefront. You can implement multiple layouts here, for different use cases – to make it easy to switch between different look-and-feel variations for the same theme. For details, please see Templates Required Directory > Layout Subdirectory.\n\n### `assets/`\n`assets/` (images, CSS and JavaScript files) will be located in this directory. For details, please see CSS, JavaScript, and Design Resources.\n\n### `lang/`\n`lang/` contains translation files, including the required `en.json`. For details, please see the Internationalization/Localization section of the documentation.\n\nWhen developing in your local environment, all files that you change in your Stencil theme directory (/cornerstone/ in our default installation) will be reflected immediately at [http://localhost:3000](http://localhost:3000).\n",
                              "header": {
                                "anchor": "cornerstone_cornerstone-file-structure"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "blocks": []
                  }
                },
                {
                  "title": "Advanced Installation Options",
                  "route": {
                    "path": "/advanced-installation-options"
                  },
                  "data": {
                    "blocks": [],
                    "children": [
                      {
                        "title": "Navigating Your Setup Scenario",
                        "route": {
                          "path": "/navigating-your-setup-scenario"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Navigating Your Setup Scenario</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#navigating_illustration\">Illustration of Stencil's Setup Options</a></li>\n    <li><a href=\"#navigating_initial\">Intial Cornerstone Setup</a></li>\n    <li><a href=\"#navigating_cornerstone-refresh\">Cornerstone Refresh</a></li>\n    <li><a href=\"#navigating_download-marketplace\">Download a Marketplace Theme</a></li>\n    <li><a href=\"#navigating_implementing-custom-build\">Implementing a Custom Build System</a></li>\n    <li><a href=\"#navigating_blueprint-store\">Blueprint Store Launched Before January 26th, 2016</a></li>\n\t</ul>\n</div>"
                            },
                            {
                              "type": "callout",
                              "data": {
                                "type": "warning",
                                "title": "Notes on Dependencies",
                                "body": "Our installation instructions have been tested on Mac OS X Yosemite, Linux/Ubuntu v.14.04.4, and Windows. Dependencies for other platforms/releases will be added upon further testing.\n"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Illustration of Stencil's Setup Options\n\nThe diagram below visually illustrates _all_ currently supported workflows for setting up a Stencil theme. You will choose one pathway to setup Stencil for your store. The color codes for each setup scenario are as follows: \n\n* [Black arrows: Initial setup with the default Cornerstone theme.](#navigating_initial)\n\n* [Orange arrows: Refresh Cornerstone from Theme Marketplace.](#navigating_cornerstone-refresh)\n\n* [Purple arrows: Customize a theme (_other than_ Cornerstone) downloaded from Theme Marketplace.](#navigating_download-marketplace)\n\n* [Green arrows: Configure a custom JavaScript build system](#navigating_implementing-custom-build)\n\n* [Blue arrows: Adds onto any of the preceding four scenarios. If developing for a BigCommerce Blueprint production store launched before Jan. 26, 2016, you must add one extra step to enable Stencil in the store's control panel.](#navigating_blueprint-store)",
                              "header": {
                                "anchor": "navigating_illustration"
                              }
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1538540242143",
                              "config": {
                                "centered": true,
                                "fluid": true,
                                "bordered": true
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "title": "Detailed Steps Described Below",
                                "body": "Continue reading to get a detailed description and breakdown of the steps required for each setup scenario."
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Initial Cornerstone Setup \n\nThis is the workflow to start developing based on BigCommerce's default Cornerstone theme. This workflow uses Webpack as the JavaScript build system. Steps required:\n\n* Install your necessary prerequisites\n\t* [Mac OS Prerequisites](/stencil-docs/getting-started/installing-and-launching/mac-os-prerequisites)\n\t* [Linux Prerequisites](/stencil-docs/getting-started/installing-and-launching/linux-prerequisites)\n\t* [Windows Prerequisites](/stencil-docs/getting-started/installing-and-launching/windows-prerequisites)\n* [Install Stencil CLI](/stencil-docs/getting-started/installing-and-launching/installing-the-stencil-cli)\n* [Clone the Cornerstone theme using Github](/stencil-docs/getting-started/installing-and-launching/cloning-the-cornerstone-theme)\n* [Install JavaScript Utilities](stencil-docs/getting-started/installing-and-launching/installing-stencil-utils)\n* [Create an API Account to prepare store and tokens](stencil-docs/getting-started/installing-and-launching/creating-an-api-account)\n\n\nOnce you have completed these steps, proceed to the _Launching Stencil_ section.",
                              "header": {
                                "anchor": "navigating_initial"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Download and Install a New Version of Cornerstone \n\nIf you would like to download and install a **new** version of Cornerstone from BigCommerce's Theme Marketplace, perform the following steps:\n\n* Ensure all necessary prerequisites are installed\n\t* [Mac OS Prerequisites](/stencil-docs/getting-started/installing-and-launching/mac-os-prerequisites)\n\t* [Linux Prerequisites](/stencil-docs/getting-started/installing-and-launching/linux-prerequisites)\n\t* [Windows Prerequisites](/stencil-docs/getting-started/installing-and-launching/windows-prerequisites)\n* [Ensure Stencil CLI is installed](/stencil-docs/getting-started/installing-and-launching/installing-the-stencil-cli)\n* [Download a new Cornerstone .zip file](/stencil-docs/advanced-installation-options/downloading-cornerstone)\n* [Reinstall JavaScript Utilities](stencil-docs/getting-started/installing-and-launching/installing-stencil-utils)\n* Repeat steps in _Launching Stencil_",
                              "header": {
                                "anchor": "navigating_cornerstone"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Download a Marketplace Theme \n\nIf you would like to customize a theme _other than_ Cornerstone, follow the required steps to download a theme from BigCommerce's Theme Marketplace. This workflow requires BitBucket. Some earlier theme versions will also require additional steps for the jspm JavaScript build system. Steps required:\n\n* Install all necessary prerequisites\n\t* [Mac OS Prerequisites](/stencil-docs/getting-started/installing-and-launching/mac-os-prerequisites)\n\t* [Linux Prerequisites](/stencil-docs/getting-started/installing-and-launching/linux-prerequisites)\n\t* [Windows Prerequisites](/stencil-docs/getting-started/installing-and-launching/windows-prerequisites)\n* [Install Stencil CLI](/stencil-docs/getting-started/installing-and-launching/installing-the-stencil-cli)\n* [Set up BitBucket and Download the Marketplace theme's .zip file](/stencil-docs/advanced-installation-options/downloading-a-marketplace-theme)\n* [Install JavaScript Utilities](stencil-docs/getting-started/installing-and-launching/installing-stencil-utils)\n* [Create an API Account to Prepare Your Store and Tokens](stencil-docs/getting-started/installing-and-launching/creating-an-api-account)\n* Complete the steps outlined in _Launching Stencil_",
                              "header": {
                                "anchor": "navigating_download-marketplace"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Implement a Custom JavaScript Build System \n\nThe Stencil framework currently uses Webpack 4 as its default Javascript Build system (jspm for older versions), but if you prefer, you can substitute this for a custom JavaScript build system such as Grunt. Steps recommended:\n\n* Install all necessary prerequisites\n\t* [Mac OS Prerequisites](/stencil-docs/getting-started/installing-and-launching/mac-os-prerequisites)\n\t* [Linux Prerequisites](/stencil-docs/getting-started/installing-and-launching/linux-prerequisites)\n\t* [Windows Prerequisites](/stencil-docs/getting-started/installing-and-launching/windows-prerequisites)\n* [Install Stencil CLI](/stencil-docs/getting-started/installing-and-launching/installing-the-stencil-cli)\n* [Clone the Cornerstone theme using Github](/stencil-docs/getting-started/installing-and-launching/cloning-the-cornerstone-theme)\n* [Install JavaScript Utilities](stencil-docs/getting-started/installing-and-launching/installing-stencil-utils)\n* [Configure your custom build system](/stencil-docs/getting-started/installing-and-launching/configuring-webpack-or-custom-build)\n* [Create an API Account to Prepare Your Store and Tokens](stencil-docs/getting-started/installing-and-launching/creating-an-api-account)\n* Proceed to _Launching Stencil_",
                              "header": {
                                "anchor": "navigating_custom-build"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Blueprint Store Launched before January 26th, 2016\n\nIf your store is **both**:\n* running on a Blueprint theme\n* was launched before Jan. 26th, 2016 \n\nand you would like to enable Stencil development on it, you must perform the following steps:\n\n* Follow the installation path above that corresponds to your development scenario\n* Enable Stencil in the store’s control panel",
                              "header": {
                                "anchor": "navigating_blueprint-store"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Downloading the Cornerstone Theme",
                        "route": {
                          "path": "/downloading-the-cornerstone-theme"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Downloading the Cornerstone Theme from the BigCommerce Control Panel</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#downloading_downloading-cornerstone-zip\">Downloading the Cornerstone .zip file</a></li>\n    <li><a href=\"#downloading_reinstalling-dependencies\">Reinstalling Dependencies and Relaunching</a></li>\n    <li><a href=\"#downloading_next-steps\">Next Steps</a></li>\n\t</ul>\n</div>"
                            },
                            {
                              "type": "callout",
                              "data": {
                                "type": "error",
                                "title": "Back Up Before Reinstalling",
                                "body": "If you are reinstalling over a base theme on which you have already begun development, first back up at least your theme's .stencil file. This file contains your store URL, your BigCommerce username and access tokens, and other basic settings. Preserving those settings will speed up initializing and launching the new version. To allow complete rollback, back up your whole theme directory. (In a current default installation, this directory is named `cornerstone`. Prior to March 2017, this directory's name defaulted to `stencil`)."
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Downloading the Cornerstone .zip file from the Control Panel\n\n_If you have not yet added Cornerstone to your store, navigate to `Storefront` > `Themes Marketplace` and add the Cornerstone theme to your store._\n\nUse these steps to download a the Cornerstone theme from the store Control Panel: \n\n**Note:** The steps below are required only if you are downloading a refreshed copy of Stencil's default Cornerstone theme, specifically from the BigCommerce Theme Marketplace. \n\nIf you are downloading a Marketplace theme (other than Cornerstone) for customization, you must follow the workflow outlined in Downloading a Marketplace Themes.\n    \n* Go to `Storefront` -> `My Themes`.\n\n* Click the Cornerstone theme's thumbnail:\n\t* If Cornerstone is the store's currently active theme, click its image thumbnail at the top of the page, under the `Current Theme` heading.\n\t* If Cornerstone is _not_ the current theme, scroll down below the lower My Themes subheading, find, and click the Cornerstone thumbnail.\n\n_The Cornerstone theme's description should zoom to full-page and display a Theme Options drop-down list at the upper right._\n\n* From the `Theme Options` drop-down list, select `Download theme file` to download this Cornerstone release as it was refreshed on Theme Marketplace. \n\n* Unpack the zipped theme to a working directory. This can either be the directory where you have been developing your theme or a new directory.\n",
                              "header": {
                                "anchor": "#downloading_downloading-cornerstone-zip"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Reinstalling Dependencies and Relaunching\n\n* Ensure that your theme includes all current dependencies by repeating the [Stencil Utils installation.](stencil-docs/getting-started/installing-and-launching/installing-stencil-utils) \n\n* To relaunch, repeat the steps listed in the _Launching Stencil_ section.\n",
                              "header": {
                                "anchor": "#downloading_reinstalling-dependencies"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Next Steps\n\nWhen you are ready to upload your custom theme to a store, follow the instructions in Bundling and Submitting a Theme and Troubleshooting Theme Uploads.",
                              "header": {
                                "anchor": "#downloading_next-steps"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "Distribution of Cornerstone-based themes is subject to BigCommerce's Cornerstone license, including the mandatory incorporation of BigCommerce's copyright statement.",
                                "title": "Distribution of Cornerstone-based Themes",
                                "type": "error"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Downloading a Marketplace Theme",
                        "route": {
                          "path": "/downloadining-a-marketplace-theme"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Downloading a Marketplace Theme from the BigCommerce Control Panel</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#downloading_setting-up-bitbucket\">Setting Up BitBucket SSH Keys</a></li>\n    <li><a href=\"#downloading_downloading-a-marketplace-theme\">Downloading a Marketplace Theme for Customization</a></li>\n    <li><a href=\"#downloading_checking-theme-version\">Checking the Theme's Version</a></li>\n    <li><a href=\"#downloading_jspm-steps\">jspm Steps for Earlier Versions</a></li>\n    <li><a href=\"#downloading_installing-modules\">Installing Modules (Webpack themes)</a></li>\n    <li><a href=\"#downloading_next-steps\">Next Steps</a></li>\n    </ul>\n</div>"
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "BitBucket registry access is required for all Marketplace themes (excluding Cornerstone). jspm Extra Steps (to enable jspm and jspm-git) are required only for theme versions earlier than v1.2.1, as outlined on this article.",
                                "title": "BitBucket Registry Access",
                                "type": "warning"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Setting Up BitBucket SSH Keys\n\nTo set up Stencil CLI for themes other than Cornerstone, you must authorize communication among your local system, the BitBucket registry, and GitHub.\n\n**Note:** _Steps beyond this point require that you have active accounts on both BitBucket and GitHub._\n\nTo authorize ongoing communication, you must set up a secure shell (SSH) key that is shared between BitBucket and GitHub. This is a multi-step process, which is beyond the scope of this documentation. However, we have tested the following instructions and found them to be reliable:\n\n* [Setting up SSH for Git on BitBucket](\nhttps://confluence.atlassian.com/bitbucket/set-up-ssh-for-git-728138079.html)\n\n_Follow the default instructions to create a key in your `~/.ssh/config`_\n\n* [Setting up SSH on GitHub (a series of linked steps)](\nhttps://help.github.com/articles/connecting-to-github-with-ssh/)\n\n"
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "Marketplace themes other than Cornerstone must be purchased in order to be downloadable.\n\nYou are entitled to customize a free or purchased theme for a store that you support. However, the theme's original creator retains rights to that theme's design. So, except for Cornerstone-based themes, you may not upload a derived theme to a public theme marketplace (whether BigCommerce's or third-party), nor sell it privately.",
                                "title": " Theme Access, Copyright/Ownership, and Distribution"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Downloading a Marketplace Theme for Customization\n\nUse these steps to download a theme (other than Cornerstone) available in the store control panel's Storefront Design area. \n\n1. If you have not yet added the theme to your store, start at Storefront Design > Themes Marketplace, and add the theme.\n\n2. Go to Storefront Design > My Themes.\n\n3. Click the theme's thumbnail:\n\t \n\t* To download the store's currently active theme, click the image thumbnail at the top of the page, under the Current Theme heading.\n\t\n\t* To download an inactive theme, scroll down below the lower My Themes subheading, and click the appropriate theme's thumbnail.\n\nYour selected theme will zoom up to a full-page description and display a Theme Options drop-down list at the upper right.\n\n4. Note the version number displayed under the theme's title and credits. At Checking the Theme's Version below, you will use this number to choose between two installation flows.\n\n5. From the Theme Options drop-down list, select the appropriate Download option. (The options visible depend on your theme's current state:)\n\n\t* Download current theme: Download the theme version that is now active on the storefront. (This option appears only if you selected the Current Theme.)\n\n\t* Download your latest customizations: Download the theme's most recently saved version. (This option appears only for themes that have been customized for this store.)\n\n\t* Download theme file: Download the theme as it was originally uploaded to Theme Marketplace. \n\n6. Unpack the zipped theme to a working directory.\n(In the remainder of this documentation, substitute this working directory's name for the default `stencil` path or the `theme-name` placeholder.)"
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1538543505088",
                              "header": {
                                "title": "Theme Options",
                                "subtitle": "Dropdown list options as related to step #5"
                              },
                              "config": {
                                "centered": true,
                                "fluid": true,
                                "bordered": true,
                                "maxWidth": "300",
                                "maxHeight": "300"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "Some versions of the BigCommerce control panel offer you shortcuts for steps 3–5 above, removing the need to click the theme card/thumbnail:\n\n* For your store's currently active theme, look for a version number to the right of the thumbnail. You can select the Advanced drop-down list to display options similar to those at step 5 above.\n\n* For inactive themes, look for a version number at the theme card's lower left. Also, you can select the \"...\" menu at the theme card's lower right to display options similar to those at step 5 above.",
                                "title": "Theme Download Shortcuts"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Checking the Theme's Version\n\nRefer to the theme's version number that you noted above at Downloading a Theme for Customization:\n\n* If the version number is 1.10.0 or higher, the theme uses Webpack as its JavaScript build system. Skip ahead to the simplified installation instructions in Installing Modules (Webpack Themes).\n\n* If the theme's version number is lower than 1.10.0, the theme uses jspm as its JavaScript build system. Follow the steps outlined on [jspm Steps for Earlier Versions]()\n"
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "For version numbers below 1.10.0, consider using the options within control panel > My Themes to download a newer version of the same theme. This will allow you to jump ahead to the streamlined instructions below at Installing Modules (Webpack Themes).\n\n**Note**: These version numbers do not apply to the Cornerstone theme. All currently supported Cornerstone versions use Webpack, and can be refreshed using the even simpler refresh instructions in [Downloading the Cornerstone Theme]().",
                                "title": "Consider Updating Your Theme",
                                "type": "warning"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## jspm Steps for Earlier Versions\n\nlink to legacy article"
                            },
                            {
                              "type": "text",
                              "data": "## Installing Modules (Webpack themes)\n\nFor Marketplace themes whose version number is 1.10.0 or higher, simply use npm to install the modules required to access Stencil JavaScript events:\n\n1. Navigate to your theme directory. This example assumes that this target directory has the default name Cornerstone:\n\n`cd cornerstone`\n\n2. Within that directory, install the stencil-utils module to ensure that all your dependencies are up to date:\n\n`npm install`"
                            },
                            {
                              "type": "text",
                              "data": "## Next Steps\n\nTo authorize, initialize, and launch your theme, follow the steps in the _Launching Stencil_ section.\n\nLater, when you are ready to upload your customized theme to a store, you should follow the zipping and uploading instructions in Bundling and Submitting a Theme and Troubleshooting Theme Uploads.\n"
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "When you issue the `stencil init` command to authorize and initialize Stencil, you might receive error messages about resolving BitBucket as an SSH host. These errors occur when you have not recently logged into BitBucket.\n\nWhen prompted, enter the BitBucket password you used in Setting Up BitBucket SSH Keys above. This will clear the errors and allow you to proceed.",
                                "type": "warning",
                                "title": "BitBucket Reauthentication"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Theme Updates and Version Control",
                        "route": {
                          "path": "/theme-updates-and-version-control"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Theme Updates and Version Control</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#theme-updates_isolating\">Customizing Strategically for Easier Updates</a></li>\n    <li><a href=\"#theme-updates_synchronizing-cornerstone\">Synchronizing Your Theme With Cornerstone's Updates</a></li>\n    <li><a href=\"#theme-updates_synchronizing-multiple\">Synchronizing Updates for Multiple Themes</a></li>\n\t</ul>\n</div>"
                            },
                            {
                              "type": "callout",
                              "data": {
                                "title": "Distributed Version Control via Git",
                                "body": "Many techniques discussed below rely on GitHub's _distributed version control_ model and features. For the underlying principles, please see [Git's own documentation](https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control)."
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Customizing Strategically for Easier Updates\n\nIn order to keep your store and Stencil theme performant, it's crucial to know the best way to set up your customized Stencil theme in order to smoothly incorporate future bug fixes, enhancements, and updates that are applied to the base theme. "
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## GoRuck's Best Practices for Handling Theme Updates\n\nThe guidelines provided are from Web Developement team from the BigCommerce client, [GoRuck](https://www.goruck.com/). \n\nGoRuck's scenario addresses maintaining a single custom theme that is based on a third-party Marketplace theme (a theme other than Cornerstone). These guidelines can also apply to maintaining a custom theme based on Stencil's default Cornerstone theme.\n\n### Handling and Managing Theme Updates\n\n_We've made significant changes to our theme, and one principle that I've found successful is isolating my changes as much as possible. I try to put my changes into their own files, whether they're changes to templates, JavaScript, or SCSS._\n\n_I also name all my files, CSS classes and identifiers, and JavaScript methods and classes with a `gr-` prefix (as an abbreviation for our company, GORUCK LLC). Also, any changes I make to standard theme files are identified with a comment, such as:_\n\n`//Go Ruck Customization`\n\t\t\n_For example, I have a file in `assets/scss/` named `gr-theme.scss`. All of the styles I've added to the theme are either in this file, or imported by this file. So for styling, my only changes to the theme itself are in a handful of places where I had to change an existing theme style (identified with a comment), plus this one line in `templates/layout/base.html`:_\n\n`{{{stylesheet '/assets/css/gr-theme.css'}}}`\n\n_I've found that this approach provides several advantages:_\n\n* It makes it easier to distinguish my custom code from code supplied by the default theme.\n* It makes it less likely that my code will get intermingled with the standard theme code. This, in turn, prevents my code from unexpectedly being affected by theme updates.\n* It makes it easier to merge base-theme updates into my theme code.\n\n### Comparing and Merging Theme Updates\n\n_Having isolated my changes as much as I can, I identify theme changes and updates by comparing base themes, rather than by comparing base themes to my customized theme. When a new version of the theme is released, I download the .zip file from the BigCommerce Control Panel._\n\n_I then use a desktop diff tool (Beyond Compare) to \ncompare the new version to the .zip file of the theme's previous release. I ignore changes in the .zip file's\n `meta/` and `parsed/` folders, and to its `manifest.json`, and do a `Compare Contents` on the rest of the files._\n\nUltimately, I need to examine the changes carefully, to identify any changes that might affect, or be affected by, my customizations. And I need to test thoroughly. But comparing the stock themes to each other reduces the number of changes I have to examine. \n\nAlso, because I isolate my changes, most of the theme changes can be copied directly into the corresponding file in my customized theme. In practice, this means that I can limit my testing to the areas affected by changes in the standard theme, rather than having to re-test all my own changes.\n\nI personally find that it is also helpful to migrate *every* theme update into my customized version, as the update is released. If I were to wait, and to allow changes to accumulate and become more substantial, I think it would be more difficult to adequately test – and correctly integrate – the changes. Similarly, I'm grateful to the developer of our base theme (Pixel Union) for updates that have always made small, incremental changes.\n\n### Dynamic Content Injection\n\n_We've also come up with a variety of techniques for dynamically placing content on a page. For example, we can dynamically add tabs to a product page, using content stored on our WebDAV. Similarly, we can inject content from an external file into the body of a page. This allows us to put something that appears in many places, like a sizing chart, in a single place where it can be easily updated._\n\n_Or, we can use the BigCommerce control panel's various HTML editors – for Products, Categories, and Content > Web Pages – to inject content into predefined \"dropzones\" (custom div's). This allows us to generate a wide variety of content pages using a single custom template._\n\nAll of these techniques minimize the complexity of merging base-theme updates into our customized theme. For further details and examples on how we implement these techniques, see [Dynamic Content Rendering on Stencil Storefronts]()."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Synchronizing Your Theme With Cornerstone's Updates\n\nThis section addresses two methods that will allow you to keep your customized Stencil theme up to date with Cornerstone's updates, enhancements, and bug fixes\n\nUpdating Lightly Customized Themes\nUpdating Heavily Customized Themes\n\nWe've adapted these tips from a Stencil developer's titled Stencil Version Control Best Practices? on the BigCommerce Community forums.\n\n### Updating Lightly Customized Themes\n\nIn this scenario, you can use Git's cherry-pick option to merge in specific Cornerstone commits.\n\nUse the Stencil Framework Release Notes to look up specific updates' commit hashes on the Cornerstone repository.\n\nSee this Stack Overflow explanation of how to use the cherry-pick option.\n\n### Updating Highly Customized Themes\n\nHere, unexpected errors from automatic merges can be time-consuming to undo. So, consider this handtooled approach:\n\nUse GitHub's Web interface to inspect each Cornerstone commit (change) of interest. Each commit will show you – for all changed files – a diff view highlighting any deletions (left/red) and any insertions (right/green).\n\nFor changes that you want to incorporate into your theme, access the source code.\n\nAs illustrated below, you can either access individual files via Github's Raw view, or you can download a .zip of the whole Cornerstone repo in order to access all files locally.\n\nManually edit the changes into your theme's affected files.\n\n### Accessing Individual Files\n\nIn the file-by-file approach: For each commit that you would like to incorporate into your custom theme, do the following for each of the commit's changed files.\n\nIn GitHub's diff view, click the View button at the upper right. (We show it highlighted with a red border and a tooltip.) You will see the file's full contents, as shown below.\n\nClick the Raw button at the upper right (which we show highlighted in red). This will reveal the file's full contents as plaintext – allowing you to copy and paste without picking up the table metadata used to display line numbering.\n\n### Downloading the Cornerstone Repository\n\nThis approach downloads all theme files at once, allowing you to copy/paste their relevant contents locally.\n\n1. Navigate to the [Cornerstone Github Repository](https://github.com/bigcommerce/cornerstone).\n2. On the right hand side of the page, click the green `Clone or download` button, and select Download ZIP.\n\n\n\n"
                            }
                          ]
                        }
                      },
                      {
                        "title": "Configuring Webpack or a Custom Build System",
                        "route": {
                          "path": "/configuring-webpack-or-custom-build"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Configuring Webpack or a Custom Build System</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#configuring_webpack-jspm-other\">Webpack, jspm, or Other JavaScript Managers</a></li>\n    <li><a href=\"#configuring_webpack-specific\">Webpack-Specific Configuration</a></li>\n    <li><a href=\"#configuring_downloaded\">Build-System Configuration File</a></li>\n    <li><a href=\"#configuring_custom-build\">Watched Folders: watchOptions Object</a></li>\n    <li><a href=\"#configuring_blueprint-store\">JavaScript Rebundling: development Function</a></li>\n    <li><a href=\"#configuring_blueprint-store\">Theme Packaging: production Function</a></li>\n\t</ul>\n</div>\n\n\n\n\n"
                            },
                            {
                              "type": "text",
                              "data": "## Webpack, jspm, or Other JavaScript Managers\n\nStencil themes are Node.js applications, and therefore contain dependencies on other JavaScript libraries. For the default Cornerstone theme, we provide the [Webpack](https://webpack.github.io/docs/) build manager to handle these dependencies. \n\nAs you develop and customize a theme based on Cornerstone, you have option to reconfigure Webpack's watched folders, and to even substitute a different build system. These options are explained below.\n\nAll themes in the BigCommerce Theme Marketplace use Webpack. However, older versions of certain themes used the jspm JavaScript dependency manager instead of Webpack. Please see this page to determine (by version number) whether you are developing based on one of these earlier versions, and to find the required jspm setup procedures."
                            },
                            {
                              "type": "callout",
                              "data": {
                                "type": "info",
                                "body": "The steps below are required only if you plan to modify or override the default Webpack-based workflow that installs with Stencil's default Cornerstone theme or and current theme in the BigCommerce Theme Marketplace. If you do not require these advanced configuration options, you can safely skip this page.",
                                "title": "Optional Workflow"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Webpack-Specific Javascript Diagnostics\n\nThe following Webpack configuration options can aid in troubleshooting.\n\nIf JavaScript errors in your browser's developer tools are not reporting filenames and line numbers, try changing your `webpack.conf.js` file's [sourcemap](https://webpack.js.org/guides/build-performance/#devtool) entry from:\n\n```\ndevtool: 'source-map'\n```\nto:\n\n```\ndevtool: 'eval-source-map'\n```\n\nThe `eval-source-map` option is slower, but more verbose. This [Webpack Devtool Configuration](https://webpack.js.org/configuration/devtool/) article provides an overview of all devtool options and details regarding each."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Build-System Configuration File\n\nTo take advantage of automatic JavaScript bundling and browser refresh, Stencil themes require the [`stencil.conf.js`](https://github.com/bigcommerce/cornerstone/blob/master/stencil.conf.js) file. If you would like to enable a custom build system, you will need to edit this file.\n\nWithin `stencil.conf.js`, Stencil CLI looks for the exported `watchOptions` object, and `development` and `production` callbacks, shown below. \n\nContinue reading to take a closer look at each of these three references."
                            },
                            {
                              "type": "text",
                              "data": "## Watched Folders: watchOptions Object\n\nThe `watchOptions` object defines directories for the [Browsersync](https://browsersync.io/docs) preview engine to watch or ignore, in two respective lists. You are free to edit these lists:\n\n```\nvar watchOptions = {\n    // If files in these directories change, reload the page.\n    files: [\n        '/templates',\n        '/lang'\n    ],\n\n    //Do not watch files in these directories\n     ignored: [\n        '/assets/scss',\n        '/assets/less',\n        '/assets/css',\n        '/assets/dist',\n    ]\n};\n```"
                            },
                            {
                              "type": "text",
                              "data": "### JavaScript Rebundling: `development` Function\n\nUpon the command-line instruction `stencil start`, Stencil CLI will look for and call the `development` function. \n\nIn the base Cornerstone theme, we have created a Webpack watcher to trigger a browser reload whenever theme edits cause JavaScript to be rebundled to the theme's `bundle.js` file. This watcher uses options configured in the `webpack.conf.js` file passed by `webpackConfig`. So a JavaScript rebuild will refresh the browser:\n\n```\nfunction development() {\n    webpack(webpackConfig).watch({}, err => {\n        if (err) {\n            console.error(err.message, err.details);\n        }\n\n        process.send('reload');\n    });\n}\n```"
                            },
                            {
                              "type": "text",
                              "data": "## Theme Packaging: `production` Function \n\nWhen you issue the command-line instruction `stencil bundle`, to process and package a completed theme for upload to a store, Stencil CLI will look for and call the `production` function. This function passes a callback as its first argument to support asynchronous builds. \n\nThe callback must be invoked somewhere inside the `production` function to notify Stencil CLI that the theme-specific build has completed and is ready to package:\n\n```\nfunction production() {\n    webpackConfig.watch = false;\n    webpackConfig.devtool = false;\n    webpackConfig.plugins.push(new webpack.LoaderOptionsPlugin({\n        minimize: true,\n    }));\n    webpackConfig.plugins.push(new webpack.optimize.UglifyJsPlugin({\n        comments: false,\n        compress: {\n            warnings: true,\n        },\n        sourceMap: false, // Toggle to turn on source maps.\n    }));\n\n    webpack(webpackConfig).run(err => {\n        if (err) {\n            console.error(err.message, err.details);\n            throw err;\n        }\n\n        process.send('done');\n    });\n}\n\nif (process.send) {\n    // running as a forked worker\n    process.on('message', message => {\n        if (message === 'development') {\n            development();\n        }\n\n        if (message === 'production') {\n            production();\n        }\n    });\n\n    process.send('ready');\n}\n```"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ],
              "blocks": []
            }
          },
          {
            "title": "Theme Development Quickstart",
            "route": {
              "path": "/development-quickstart"
            },
            "data": {
              "children": [
                {
                  "title": "Configuring Your Custom Theme",
                  "route": {
                    "path": "/new-subpage-4"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Configuring Your Custom Theme</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#configuring_before\">Before You Begin</a></li>\n\t\t<li><a href=\"#configuring_config-json\">Configuring config.json Keys</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Before You Begin\n\nBefore you begin developing on your Stencil theme, note that you may decide to either:\n\n* directly modify the theme that you installed when completing the steps in _Getting Started_\n* create a **copy** of the theme you installed in _Getting Started_ and develop on the copy, leaving the original installed theme in its default state. This allows you to retain a local copy of the default theme.",
                        "header": {
                          "anchor": "configuring_before"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "type": "warning",
                          "body": "If you decide to copy your theme's directory structure, you must reissue both the `stencil init` and `stencil start` command-line instructions from **inside** your newly created directory.",
                          "title": "Reissue Stencil Commands"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Configuring config.json Keys\n\n**Note:** these instructions will refer to the top-level theme directory as _cornerstone_.\n\nThe first thing you must do when beginning theme developement is configure certain values in the [cornerstone/config.json file](https://github.com/bigcommerce/cornerstone/blob/master/config.json). For example, here are the first few key/value sets in Cornerstone's config.json:\n\n```\n{\n\"name\": \"Cornerstone\",\n\"version\": \"1.0.0\",\n\"meta\": {\n  \"price\": 0,\n   \"documentation_url\": \t\t\n   \"https://support.bigcommerce.com/articles/Public/Cornerstone-\n   \tTheme-Manual\",\n  ...\n  }\n}\n```\n\nFor further details about config.json settings and a breakdown of each key/value set, please see the [in-depth config.json reference](). \n\nThe next code block shows how you might change these values to reflect your own theme’s name, version number, price on Theme Marketplace, and documentation URL:\n\n```\n{\n\"name\": \"MyTheme\",\n\"version\": \"1.1.2\",\n\"meta\": {\n  \"price\": 10000,\n  \"documentation_url\": \"https://www.mywebsite.com/theme-docs/my-theme.html\",\n  ...\n  }\n}\n```",
                        "header": {
                          "anchor": "configuring_config-json"
                        }
                      }
                    ],
                    "children": []
                  }
                },
                {
                  "title": "config.json Resource Interactions",
                  "route": {
                    "path": "/config-json-resource-interactions"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1><code>config.json</code> Interactions</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"\">New Products Example</a></li>\n    <li><a href=\"\">Changing Page Layout using Local Front Matter</a></li>\n    <li><a href=\"\">Retrieving Specific config.json Values through Sass</a></li>\n    <li><a href=\"\">Adding/Removing Components</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## New Products Example"
                      },
                      {
                        "type": "text",
                        "data": "## Changing Page Layout Using Local Front Matter"
                      },
                      {
                        "type": "text",
                        "data": "## Retrieving Specific config.json Values through Sass"
                      },
                      {
                        "type": "text",
                        "data": "## Adding/Removing Components"
                      }
                    ]
                  }
                },
                {
                  "title": "config.json Metadata",
                  "route": {
                    "path": "/config-json-metadata"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1><code>config.json</code> Metadata</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#config_choosing\">Choosing a Development Path</a></li>\n\t\t<li><a href=\"#config_front-matter\">Front-Matter Quick Start</a></li>\n    <li><a href=\"#front-matter-quick-start\">Handlebars Quick Start</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## config.json Reference\n\nBelow is a table of all the the key/value pairs in the config.json file with example values included for reference.\n"
                      },
                      {
                        "type": "html",
                        "data": "<table>\n  <tr>\n    <th>Property</th>\n    <th>Format</th>\n    <th>Default/Examples</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>String</td>\n    <td>\"Stencil\"</td>\n    <td>Theme’s name, as it will appear in the Theme Marketplace.<br><br>\n\n(<b>Note:</b> Theme names should be composed of only the following characters: a-z, A-Z, 0-9, hyphen.)</td>\n  </tr>\n  <tr>\n    <td>version</td>\n    <td><a href=\"http://semver.org/\">SemVer</a></td>\n    <td>\"1.0.0\"</td>\n    <td>Theme’s version number, formatted as <span class=\"inline-code\">major.minor.patch</span>.</td>\n  </tr>\n  <tr>\n    <td><a name=\"config-theme-meta\"></a>meta</td>\n    <td class=\"\">Object</td>\n    <td class=\"\"></td>\n    <td class=\"\">BigCommerce will use this metadata to list themes in Theme Marketplace.<br><br>\n      \n(Theme variations also have their <a href=\"#config-var-meta\">own metadata collections</a>.)</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">price</span></td>\n    <td class=\"\">Number</td>\n    <td class=\"\">15000</td>\n    <td class=\"\">Price, in cents, to purchase this theme in Theme Marketplace.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\">    <span class=\"indent1\">documentation_url</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"https://support.bigcommerce.com/articles/Public/Cornerstone-Theme-Manual\"</td>\n    <td class=\"\">URL of theme developer’s documentation site.<br><br>\n\n(<b>Note: For a successful theme upload to BigCommerce, this key is required to have a value.</b>)</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">    <span class=\"indent1\">author_name</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"eCommerce Themes, Inc.\"</td>\n    <td class=\"\">Name of the developer or partner creating the theme.<br><br>\n\n(<b>Note: For a successful theme upload to BigCommerce, this key is required to have a value.</b>)</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">    <span class=\"indent1\">author_email</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"support@example.com\"</td>\n    <td class=\"\">Contact/support email address for the developer or partner creating the theme.<br><br>\n\n(<b>Note: For a successful theme upload to BigCommerce, this key is required to have a value.</b>)</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">    <span class=\"indent1\">author_support_url</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"http://example.com/contactus\"</td>\n    <td class=\"\">Contact form/support URL for the developer or partner creating the theme.<br><br>\n\n(<b>Note: For a successful theme upload to BigCommerce, this key is required to have a value.</b>)</td>\n  </tr>    \n  \n  <tr>\n    <td class=\"\"><span class=\"indent1\">composed_image</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"composed_image.png\"</td>\n    <td class=\"\">File name for a composed/mosaic screenshot of all variations of the theme, to appear on the \"My Themes\" page of purchased themes.<br><br>\n\nThe file-name value is arbitrary, but it must match the name of a file located in the <span class=\"inline-code\">&lt;theme‑name&gt;/meta/</span> subdirectory.\n\nThe actual file’s resolution must be 600 x 760 pixels (horizontal x vertical).</td>\n  </tr>\n  <tr>\n    <td class=\"\"> <span class=\"indent1\" id=\"features\">features</span></td>\n    <td class=\"\">Array</td>\n    <td class=\"\">[<NOBR>\"fully_responsive\"</nobr>, <NOBR>\"mega_navigation\"</nobr>, <NOBR>\"multi_tiered_sidebar_menu\"</nobr>, <NOBR>\"masonry_design\"</nobr>, <NOBR>\"frontpage_slideshow\"</nobr>, <NOBR>\"quick_add_to_cart\"</nobr>, <NOBR>\"switchable_product_view\"</nobr>, <NOBR>\"product_comparison_table\"</nobr>, <NOBR>\"complex_search_filtering\"</nobr>, <NOBR>\"customizable_product_selector\"</nobr>, <NOBR>\"cart_suggested_products\"</nobr>, <NOBR>\"free_customer_support\"</nobr>, <NOBR>\"free_theme_upgrades\"</nobr>, <NOBR>\"high_res_product_images\"</nobr>, <NOBR>\"product_filtering\"</nobr>, <NOBR>\"advanced_quick_view\"</nobr>, <NOBR>\"product_showcase\"</nobr>, <NOBR>\"persistent_cart\"</nobr>, <NOBR>\"one_page_check_out\"</nobr>, <NOBR>\"customized_check_out\"</nobr>, <NOBR>\"product_videos\"</nobr>]</td>\n    <td class=\"\">Array of exact feature names supported in this theme. <NOBR>The \"Default/Examples\"</nobr> column lists the complete namespace. At least one of the values listed there must be present. <br><br>\n\nThese values are used as metadata for <NOBR>Theme Marketplace</nobr> searches. <br><br> \n      The <span class=\"inline-code\">\"customized_check_out\"</span> value has a second function: It must be present if you want to enable <a href=\"https://support.bigcommerce.com/articles/Public/Optimized-Single-Page-Checkout\" target=\"_blank\">Optimized One-Page Checkout</a> for your theme.</td>\n  </tr>\n  <tr>\n    <td class=\"\">css_compiler</td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"scss\"</td>\n    <td class=\"\">CSS preprocessor; defaults to SCSS.</td>\n  </tr>\n  <tr>\n    <td class=\"\">autoprefixer_cascade</td>\n    <td class=\"\">Boolean</td>\n    <td class=\"\">true</td>\n    <td class=\"\">Whether to enable the Autoprefixer CSS postprocessor, to add vendor prefixes to CSS rules.</td>\n  </tr>\n  <tr>\n    <td class=\"\">autoprefixer_browsers</td>\n    <td class=\"\">Array</td>\n    <td class=\"\">[\"last 3 versions\"]</td>\n    <td class=\"\">Which legacy browsers <a href=\"https://github.com/postcss/autoprefixer\">Autoprefixer</a> should support, specified in <a href=\"https://github.com/ai/browserslist\">Browserslist</a> query format.</td>\n  </tr>\n  \n<!-- jspm object removed here:\n\t<tr>\n    <td class=\"\">jspm</td>\n    <td class=\"\">Object</td>\n    <td class=\"\"></td>\n    <td class=\"\">Configuration options for optional <a href=\"http://jspm.io/\">jspm</a> JavaScript transpiler/package manager.</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">dev</span></td>\n    <td class=\"\">Object</td>\n    <td class=\"\"></td>\n    <td class=\"\">Specifies development rules.</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">&nbsp; &nbsp; &nbsp; dep_location</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"assets/js/dependency-bundle.js\"</td>\n    <td class=\"\">Specifies <span class=\"inline-code\">.../assets/...</span> path to a bundle combining all vendors’ JS modules. jspm can preload this for faster page loads in development mode.</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">&nbsp; &nbsp; &nbsp;  bootstrap</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"js/app\"</td>\n    <td class=\"\">Path to the <span class=\"inline-code\">app.js</span> bootstrap file – relative to the <span class=\"inline-code\">...&lt;theme‑name&gt;/assets/</span> directory, and omitting the file’s <span class=\"inline-code\">.js</span> extension.</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">&nbsp; &nbsp; &nbsp; bundle_location</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"assets/js/bundle.js\"</td>\n    <td class=\"\">Running the jspm bundle will minify/mangle all your JavaScript into this one file, which you point to in production. (Specify the path relative to your theme’s top-level directory.)</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">&nbsp; &nbsp; &nbsp; jspm_packages_path</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"assets/jspm_packages\"</td>\n    <td class=\"\">Path where jspm installs its packages. (Specify the path relative to your theme’s top-level directory.)</td>\n  </tr> \n :jspm object removed here -->\n  \n  <tr>\n    <td class=\"\"><a name=\"config-theme-settings\"></a>settings</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">Display-oriented key names, and values, that you can arbitrarily set for your theme. Handlebars accesses the combined settings as the context variable <span class=\"inline-code\">{{theme_settings}}</span>.<br><br>\n      \nVariations also have their <a href=\"#config-var-settings\">own </a> <span class=\"inline-code\">settings</span> sections. Values that you set at the variation level will override global values that you set here (for corresponding key names, and within the scope of that variation).<br><br>\n\nIf you want to create a custom variable to use in Handlebars, either add it here within this theme-level <span class=\"inline-code\">settings</span> section, or add it down in a <a href=\"#config-var-settings\">variation-level</a> <span class=\"inline-code\">settings</span> section.<br><br>\n\nYou would access your arbitrarily named custom variable in Handlebars as <span class=\"inline-code\">{{theme_settings.&lt;variablename&gt;}}</span>.\n\nHere is an example of a custom variable in the default theme’s <span class=\"inline-code\">config.json</span>:<br><br>\n\n<span class=\"inline-code\">\"settings\": { \"homepage_featured_products_count\": 6,\n}</span><br><br>\n\nHere is the corresponding front matter in <span class=\"inline-code\">home.html</span> that calls this variable. (Note that this is pure YAML – the <span class=\"inline-code\">{{...}}</span> used to reference <span class=\"inline-code\">config.json</span> variables within pages’ front matter do not constitute a Handlebars statement:)<br><br>\n\n<pre>\n---\nproducts:\n  featured:\n      limit: {{theme_settings.homepage_featured_products_count}}\n---\n</pre></td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"><span class=\"indent1\">homepage_new_products_count</span></td>\n    <td class=\"\">Number</td>\n    <td class=\"\">12</td>\n    <td class=\"\">Number of products to include in home page’s New Products section.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"><NOBR><span class=\"indent1\">homepage_&lt;section-name&gt;_count,</span></nobr><br> <NOBR><span class=\"indent1\">homepage_&lt;section-name&gt;_column_count</span></nobr></td>\n    <td class=\"\">Number</td>\n    <td class=\"\">[Varies]</td>\n    <td class=\"\">Number of products, or columns, to include in the specified home-page section.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"><NOBR><span class=\"indent1\">productpage_&lt;section-name&gt;_count</span></nobr></td>\n    <td class=\"\">Number</td>\n    <td class=\"\">[Varies]</td>\n    <td class=\"\">Number of products to include in the specified section of product-details pages.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"><NOBR><span class=\"indent1\">categorypage_products_per_page,</span></nobr><br> <NOBR><span class=\"indent1\">brandpage_products_per_page,</span></nobr><br> <NOBR><span class=\"indent1\">searchpage_products_per_page</span></nobr></td>\n    <td class=\"\">Number</td>\n    <td class=\"\">12</td>\n    <td class=\"\">Number of products to include on each specified page type.</td>\n  </tr>\n  \n\t<tr>\n    <td class=\"\"> <span class=\"indent1\">homepage_show_carousel</span></td>\n    <td class=\"\">Boolean</td>\n    <td class=\"\">true</td>\n    <td class=\"\">Defines whether to display an image carousel on the home page.</td>\n  </tr>  \n\n\t<tr>\n    <td class=\"\"> <span class=\"indent1\">show_product_quick_view</span></td>\n    <td class=\"\">Boolean</td>\n    <td class=\"\">true</td>\n    <td class=\"\">Defines whether to offer customers product Quick View modal windows.</td>\n  </tr>  \n\n\t<tr>\n    <td class=\"\"> <span class=\"indent1\">show_powered_by</span></td>\n    <td class=\"\">Boolean</td>\n    <td class=\"\">true</td>\n    <td class=\"\">Defines whether to display a \"Powered by BigCommerce\" credit in the sitewide footer.</td>\n  </tr>  \n  \n\t<tr>\n    <td class=\"\"> <span class=\"indent1\"><NOBR>show_accept_amex,</nobr></span><br>\n      <span class=\"indent1\"><NOBR>show_accept_visa,</nobr></span><br> <span class=\"indent1\">etc.</span>\n    </td>\n    <td class=\"\">Boolean</td>\n    <td class=\"\">false</td>\n    <td class=\"\">Each of these keys displays or hides a payment-method icon in the sitewide footer. The icons respectively identify credit-card issuers, PayPal, etc. If these keys are defined in <a href=\"/docs/schemajson-metadata-for-theme-editor\">schema.json</a>, merchants can use the <a href=\"/docs/what-is-theme-editor\">Theme Editor</a> GUI to toggle each payment icon's visibility.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"><span class=\"indent1\">product_list_display_mode</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"grid\"</td>\n    <td class=\"\">Default display mode for product lists. A <span class=\"inline-code\">\"grid\"</span> value specifies grid format. Other entries trigger list format.</td>\n  </tr>\n   \n  <tr>\n    <td class=\"\"><span class=\"indent1\">logo-position</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"center\", \"left\", \"right\"</td>\n    <td class=\"\">Sets (horizontal) display alignment for store logo throughout the theme.</td>\n  </tr>\n \n<!-- Begin images section/intro: -->\n  <tr>\n    <td class=\"\"> <span class=\"indent1\"> <a name=\"config-images\"></a> [images]</td>\n    <td colspan=\"3\">\n    The following keys' values define storewide dimensions for named sizes. The <span class=\"inline-code\">{{getImage}}</span> Handlebars helper can use member keys’ values to dynamically resize any images, up to a maximum target size of 4096x4096 pixels.<br><br>\n    \n<!--The <span class=\"inline-code\">_images</span> key name is reserved. Child key--> Key names like <span class=\"inline-code\">\"logo_size\"</span> and <span class=\"inline-code\">\"thumb_size\"</span> are arbitrary.<br><br>\n\nFor example, this Handlebars expression:<br>\n\n<span class=\"inline-code\">{{getImage product.image \"thumb_size\"}}</span><br><br>\n\n...will output the path to a 100x100-pixel image (assuming the <span class=\"inline-code\">\"thumb_size\"</span> key retains its default value of <span class=\"inline-code\">\"100x100\"</span>).<br><br>\n\nBy defining or redefining these named sizes' values, in the format outlined below, you can automatically replicate the new sizes throughout your theme.</td>\n  </tr>\n  <!-- :End images intro: -->\n  \n  <tr>\n    <td class=\"\"><span class=\"indent1\">logo_size</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">250x100</td>\n    <td class=\"\">Key/value pair defining global (storewide) display dimensions for the store logo. The value is a string defining the width and height &ndash; in that order &ndash; in pixels.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"><span class=\"indent1\">gallery_size</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">300x300</td>\n    <td class=\"\">Key/value pair defining storewide display dimensions for blog images (also available for other uses).</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"><span class=\"indent1\">productgallery_size</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">300x300</td>\n    <td class=\"\">Key/value pair defining storewide display dimensions for product-gallery images.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"><span class=\"indent1\">product_size</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">500x659</td>\n    <td class=\"\">Key/value pair defining storewide display dimensions for standard/medium-sized product images.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"><span class=\"indent1\">productthumb_size</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">100x100</td>\n    <td class=\"\">Key/value pair defining storewide display dimensions for product-image thumbnails on the product details page.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"><span class=\"indent1\">thumb_size</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">100x100</td>\n    <td class=\"\">Key/value pair defining storewide display dimensions for swatches, and for brand and category thumbnails.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"><span class=\"indent1\">zoom_size</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">1280x1280</td>\n    <td class=\"\">Key/value pair defining storewide display dimensions for zoomable product images on the product details page.</td>\n  </tr>\n<!-- :End images section-->\n\n<!-- Begin image URLs section: -->    \n  <tr>\n    <td class=\"\"><span class=\"indent1\">product_list_display_mode</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"grid\"</td>\n    <td class=\"\">Default display mode for product lists. A <span class=\"inline-code\">\"grid\"</span> value specifies grid format. Other entries trigger list format.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"> <span class=\"indent1\"> default_image_brand</td>\n    <td class=\"\">String</td>\n    <td class=\"\">/assets/img/BrandDefault.gif</td>\n    <td class=\"\">Relative path to a default image representing brands.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"> <span class=\"indent1\"> default_image_product</td>\n    <td class=\"\">String</td>\n    <td class=\"\">/assets/img/ProductDefault.gif</td>\n    <td class=\"\">Relative path to a default image representing products.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"> <span class=\"indent1\"> default_image_gift_certificate</td>\n    <td class=\"\">String</td>\n    <td class=\"\">/assets/img/GiftCertificate.png</td>\n    <td class=\"\">Relative path to a default image representing gift certificates.</td>\n  </tr>\n<!-- :End image URLs section -->    \n  \n<!-- Begin fonts section: -->\n  <tr>\n    <td class=\"\">         <a name=\"config-json-fonts\"></a><span class=\"indent1\">body-font</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"Google_Karla_400\"</td>\n    <td class=\"\">Font-family keys, with corresponding values.\nKeys are named by display purpose, and keys' names should end in <span class=\"inline-code\">-font</span>. But naming is otherwise arbitrary. So you can freely define additional font families for your theme.<br>\n\n      <p></p>Values should follow the format:<br> \n<pre>&lt;ProviderName&gt;_&lt;Font+FamilyName&gt;\n    _&lt;OptionalWeightNumber&gt;\n</pre>\n\n<!--      <span class=\"inline-code\">&lt;ProviderName&gt;_&lt;Font+FamilyName&gt;_&lt;OptionalWeightNumber&gt;</span><br><br> -->\n\nAs in this example:<br>\n      <pre>Google_Open+Sans_700</pre>\n\n<!--      <span class=\"inline-code\">Google_Open+Sans_700</span><br><br> -->\n\n      ...which specifies <span class=\"inline-code\">Google Fonts</span> as the Provider, <span class=\"inline-code\">Open Sans</span> as the Font Family, and <span class=\"inline-code\">800</span> as the (optional) Weight attribute.<br><br>\n\n(<b>Note:</b> The Provider &ndash; also called \"Foundry\" &ndash; is currently limited to Google Fonts.)<br><br>\n      \nStencil’s <a href=\"/docs/custom-sass-functions#FontFamily\">custom Sass functions</a> can process these keys’ values. E.g., to <span class=\"inline-code\">stencilFontFamily</span>, you could pass the (arbitrary) key name <span class=\"inline-code\">\"body-font\"</span>, and the function would process the value.<br><br>\n      \nNote that Sass requires explicit typing of inputs and outputs – e.g., <span class=\"inline-code\">stencilNumber</span> defaults to pixels – so you must specify any other units. Thus, for a<br><p></p>\n\n      <pre>\"font‑size\" = 3</pre>\n      <p></p>\n\n<!--      <span class=\"indent1\"><span class=\"inline-code\">\"font‑size\" = 3</span></span><br> -->\n\n...this statement:<br><p></p>\n\n    <pre>stencilNumber(\"font-size\",\"rem\")\n    * 3</pre><p></p>\n\n<!--    <span class=\"indent1\"><span class=\"inline-code\">stencilNumber(\"font-size\",\"rem\")</span></span><br>   \n    <span class=\"indent1\"><span class=\"inline-code\">* 3</span></span><br> -->\n\n...will output:<br><p></p>\n\n    <pre>9rem</pre>\n    <p></p>\n\n<!--    <span class=\"indent1\"><span class=\"inline-code\">9rem</span></span><br><br> -->\n\n      (<b>Note:</b> To enable merchants to customize your themes' fonts via <NOBR>Theme Editor</nobr>, we recommend that you rely on Google Fonts, with no more than 25 typefaces per theme.)</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">headings-font</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"Google_Montserrat_400\"</td>\n    <td class=\"\">Arbitrary key name, and value, for a font family and (optional) weight that can be applied to headings.</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">logo-font</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"Google_Oswald_300\"</td>\n    <td class=\"\">Arbitrary key name, and value, for a font family and (optional) weight for logo text.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">         <span class=\"indent1\"><NOBR>fontSize-root,</nobr></span><br> <span class=\"indent1\"><NOBR>fontSize-h1</nobr>..</span><NOBR>fontSize-h6,</nobr><br> <span class=\"indent1\">etc.</span> </td>\n    <td class=\"\">Number</td>\n    <td class=\"\">14</td>\n    <td class=\"\">Font-size keys, with corresponding values.<br><br>\n      \nThese keys' values provide defaults for options selectable in the Theme Editor GUI. Also, Stencil’s <a href=\"#CustomSassFn\">custom Sass functions</a> can process these values.<br><br> \n      \n      Here again, these keys are named by display purpose, but arbitrarily. So you can freely define additional font sizes for your theme.</td>\n  </tr>\n\n  <!--\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">fontFamily-serif</span></td>\n    <td class=\"\">Integer[? Number?]</td>\n    <td class=\"\">\"Georgia, serif\"</td>\n    <td class=\"\">\"</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">fontFamily-mono</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"Menlo, monospace\"</td>\n    <td class=\"\">\"</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">fontFamily-headings</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"Montserrat, sans-serif\"</td>\n    <td class=\"\">\"</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">fontFamily-hero</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"Oswald, sans-serif\"</td>\n    <td class=\"\">\"</td>\n  </tr>\n-->\n<!-- :End fonts section -->\n  \n  \n<!--Begin colors section:-->  \n  <tr>\n    <td class=\"\">\n      <span class=\"indent1\"><NOBR>color-textBase</nobr></span>\n    </td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"#4f4f4f\"</td>\n    <td class=\"\">Color definitions, with corresponding hex values. These keys' values provide defaults for options selectable in the Theme Editor GUI.<br><br> \n      \n      Also, Stencil’s <a href=\"#CustomSassFn\">custom Sass functions</a> can process these values. E.g., to <span class=\"inline-code\">stencilColor</span>, you could pass the key name <span class=\"inline-code\">\"color-textBase\"</span>, and the function would return the <span class=\"inline-code\">\"#4f4f4f\"</span> value defined here.<br><br>\n      \n      The keys are named by display purpose &ndash; defining consistent colors for various parts of the theme in different states. But the keys are also named arbitrarily. So you can freely name and define new color keys for your theme.<br><br> \n      \n      (<b>Note:</b> Only a subset of the default <span class=\"inline-code\">config.json</span> file’s color definitions are listed here.) </td>\n  </tr>\n\n  <tr>\n    <td class=\"\">   <span class=\"indent1\"><NOBR>color-textBase--hover,</nobr></span> <span class=\"indent1\"><NOBR>color-textBase--active,</nobr></span><br> <span class=\"indent1\">..</span><br> <span class=\"indent1\"><NOBR>color-textLink--active,</nobr></span><br> <span class=\"indent1\"><NOBR>color-textHeading,</nobr></span><br> <span class=\"indent1\">etc.</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">[Varies]</td>\n    <td class=\"\">\"</td>\n  </tr>\n\n  <tr>\n    <td class=\"\">   <span class=\"indent1\">color-primary</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"#4f4f4f\"</td>\n    <td class=\"\">\"</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">         <span class=\"indent1\">color-primaryDark</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"#454545\"</td>\n    <td class=\"\">\"</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">color-primaryDarker</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"#2d2d2d\"</td>\n    <td class=\"\">\"</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">color-primaryLight</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"#a5a5a5\"</td>\n    <td class=\"\">\"</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">color-secondary</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"#ffffff\"</td>\n    <td class=\"\">\"</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">color-secondaryDark</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"#f2f2f2\"</td>\n    <td class=\"\">\"</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">color-secondaryDarker</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"#f2f2f2\"</td>\n    <td class=\"\">\"</td>\n  </tr>\n<!-- :End colors section -->\n\n<!-- Begin Optimized checkout subsection/intro: -->\n  <tr>\n    <td class=\"\"> <span class=\"indent1\"> <a name=\"config-uco\"></a> [Optimized Checkout]</td>\n    <td colspan=\"3\">\n    The following are examples of keys that define default style properties for the Optimized Checkout page. Each key/value pair here corresponds to a class in the <span class=\"inline-code\">&lt;theme‑name&gt;/assets/scss/optimized-checkout.scss</span> file.\n\t</td>\n  </tr>\n  <!-- :End Optimized Checkout intro. -->\n  \n  <tr>\n    <td class=\"\"><span class=\"indent1\">optimizedCheckout-header-backgroundColor</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">#f7f7f7</td>\n    <td class=\"\">Key/value pair defining default background color for the Optimized Checkout page's header.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"><span class=\"indent1\">optimizedCheckout-show-backgroundImage</span></td>\n    <td class=\"\">Boolean</td>\n    <td class=\"\">false</td>\n    <td class=\"\">Key/value pair defining whether to display a background image on the Optimized Checkout page.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"><span class=\"indent1\">optimizedCheckout-backgroundImage</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\"> &ndash; </td>\n    <td class=\"\">Key/value pair containing file name of background image for the Optimized Checkout page.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"><span class=\"indent1\">optimizedCheckout-backgroundImage-size</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">1000x400</td>\n    <td class=\"\">Key/value pair defining display size for background image on the Optimized Checkout page.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"><span class=\"indent1\">optimizedCheckout-show-logo</span></td>\n    <td class=\"\">enum</td>\n    <td class=\"\">none</td>\n    <td class=\"\">Key/value pair defining whether to show logo on the Optimized Checkout page.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"><span class=\"indent1\">optimizedCheckout-logo</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\"> &ndash; </td>\n    <td class=\"\">Key/value pair containing file name of background image for the Optimized Checkout page.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"><span class=\"indent1\">[...]</span></td>\n    <td class=\"\">[...]</td>\n    <td class=\"\"> [...] </td>\n    <td class=\"\">[...]<br> \n      (Multiple similar key/value pairs. For a more-complete list of the classes available, please see <a href=\"/docs/optimized-checkout-customization\">Optimized One-Page Checkout Customization</a>.)</td>\n  </tr>\n<!-- :end Optimized checkout subsection -->  \n\n<!-- Begin read-only subsection-->\n  <tr>\n    <td class=\"\"><span class=\"indent1\" id=\"readonly\">read_only_files</span></td>\n    <td class=\"\">String array</td>\n    <td class=\"\"> \"/assets/scss/components/citadel\",<br> \"/assets/scss/components/foundation\",<br> \"/assets/scss/components/vendor\",<br> \"/assets/scss/vendor\",<br> \"/assets/scss/settings/citadel\",<br> \"/assets/scss/settings/foundation\",<br> \"/assets/scss/settings/vendor\",<br> \"/assets/scss/settings/normalize\" </td>\n    <td class=\"\">Files and paths specified in this array will be viewable in the <a href=\"/docs/what-is-theme-editor\">Theme Editor</a> GUI, but not editable. Add any theme files/paths that you want to make read-only for store administrators using that editor.</td>\n  </tr>\n<!-- :end read-only subsection -->\n  \n<!-- Begin resources: section -->\n  <tr>\n    <td class=\"\">resources</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">Global resources, inherited by all pages located directly within your <span class=\"inline-code\">&lt;theme‑name&gt;/templates/pages/</span> <a href=\"#Pages-Subdir\">subdirectory</a>.<br><br>\n\n(This inheritance spares you from having to define them in front matter on every page. Here, the resources are defined in JSON rather than YAML format.)<br><br>\n\nYou are free to add more global resources here – for example: <span class=\"inline-code\">\"brands\": true</span> to display a brands list; or\n<span class=\"inline-code\">\"blog\": \"posts\": \"limit\": 3</span> to display the top 3 blog posts. For syntax, see <a href=\"/docs/front-matter-variables#Front-ref-global\">Front-Matter Global Attributes</a>.</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">cart</span></td>\n    <td class=\"\">Boolean</td>\n    <td class=\"\">true</td>\n    <td class=\"\">Defines whether to retrieve/display cart data <!--to display a shopping-cart icon/link--> in pages' chrome.</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">shop_by_brand</span></td>\n    <td class=\"\">Boolean</td>\n    <td class=\"\">true</td>\n    <td class=\"\">Defines whether to include a quick-navigation list of brands in the footer. Adding this optional filter defines how many brands to load:<br>\n        <span class=\"inline-code\">limit: &lt;number&gt;</span></td>\n  </tr>\n    \n  <tr>\n    <td class=\"\"><a name=\"config-variations\"></a>variations</td>\n    <td class=\"\">Object</td>\n    <td class=\"\"></td>\n    <td class=\"\">Collection of variation objects. Each contained object defines one variation on this overall theme. (A theme must contain at least one variation, and may contain up to four.)</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">name</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"Light\", \"Bold\",\"Warm\" (etc.)</td>\n    <td class=\"\">An arbitrary name for this variation. This name is used in the Themes Marketplace and Theme Editor.</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\">id</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"light\", \"bold\", \"warm\" (etc.)</td>\n    <td class=\"\">A string ID for this variation. Arbitrarily named, but must be unique to this variation.\nThe Stencil framework’s database uses this unique ID to identify and process updates to variations.<br><br> \n\nWhen you submit an updated version of your theme to BigCommerce, IDs and settings for previously submitted variations must match those in previous submissions of your theme. You may add, but not remove, variations and settings in such resubmissions. You may rename variations for clarity.\n</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\"><a name=\"config-var-settings\"></a>settings</span></td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">Variation-level counterpart to this theme’s <a href=\"#config-theme-settings\">theme-level</a> <span class=\"inline-code\">\"settings\"</span> object.<br><br>\n\nValues that you set here will override <a href=\"#config-theme-settings\">theme-wide</a> values for corresponding key names,  within the scope of this variation.<br><br>\n\nYou can also create custom variables here, whose scope will be limited to this variation. Syntax is the same as for <a href=\"#config-theme-settings\">theme-wide</a> custom variables.</td>\n  </tr>\n  <tr>\n    <td class=\"\">         <span class=\"indent1\"><a name=\"config-var-meta\"></a>meta</span></td>\n    <td class=\"\">Object</td>\n    <td class=\"\"></td>\n    <td class=\"\">Variation-level counterpart to this theme’s <a href=\"#config-theme-meta\">top-level</a> <span class=\"inline-code\">\"meta\"</span> collection.\nBigCommerce will similarly use this collection’s values when listing themes in Theme Marketplace and Theme Editor.</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent2\"> \"desktop_screenshot\"</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"desktop_screenshot.png\"</td>\n    <td class=\"\">File name for a screenshot of this variation’s large-format layout.\nThe key name is fixed. The file-name value is arbitrary, but it must match the name of a file located in the <span class=\"inline-code\">&lt;theme‑name&gt;/meta/</span> subdirectory. <NOBR>(If you</nobr> are updating a variation, be sure to match this value to the intended file name.) The screenshot’s required dimensions are 2048 x 2600 pixels.</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent2\"> \"mobile_screenshot\"</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"mobile_screenshot.png\",</td>\n    <td class=\"\">File name for a screenshot of this variation’s mobile-format layout.\nThe key name is fixed. The file-name value is arbitrary, but it must match the name of a file located in the <span class=\"inline-code\">&lt;theme‑name&gt;/meta/</span> subdirectory. <NOBR>(If you</nobr> are updating a variation, be sure to match this value to the intended file name.) The screenshot’s required dimensions are 304 x 540 pixels.</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent2\"> \"description\" </span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"This is the light style of the Stencil Theme\"</td>\n    <td class=\"\">Arbitrary text description for this variation. This description will appear in Themes Marketplace and <NOBR>Theme Editor.</nobr></td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent2\"> \"demo_url\"</span></td>\n    <td class=\"\">String</td>\n    <td class=\"\">\"https://stencil-light.mybigcommerce.com\"</td>\n    <td class=\"\">URL of your demo store, as set up on bigcommerce.com.</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent2\"> \"optimized_for”</span></td>\n    <td class=\"\">Array</td>\n    <td class=\"\">[<NOBR>\"arts_crafts\",</nobr> <NOBR>\"animals_pets\",</nobr> <NOBR>\"automotive_industrial\",</nobr> <NOBR>\"electronics_computers\",</nobr> <NOBR>\"fashion_jewelry\",</nobr> <NOBR>\"food_beverage\",</nobr> <NOBR>\"gifts_specialty\",</nobr> <NOBR>\"health_beauty\",</nobr> <NOBR>\"home_garden\",</nobr> <NOBR>\"books_entertainment\",</nobr> <NOBR>\"sports_recreation\",</nobr> <NOBR>\"toys_games\",</nobr> <NOBR>\"multi_purpose\",</nobr> <NOBR>\"chrome_firefox_safari_ie_10\",</nobr> <NOBR>\"mobile_tablet_desktop\",</nobr> <NOBR>\"sales_discounts\",</nobr> <NOBR>\"wholesale\",</nobr> <NOBR>\"single_product\",</nobr> <NOBR>\"large_catalog\",</nobr> <NOBR>\"mobile\",</nobr> <NOBR>\"clothing\",</nobr> <NOBR>\"cosmetics\",</nobr> <NOBR>\"home_appliances\",</nobr> <NOBR>\"home_furnishings\",</nobr> <NOBR>\"movies\",</nobr> <NOBR>\"music\",</nobr> <NOBR>\"digital_downloads\",</nobr> <NOBR>\"outdoor_sports\",</nobr> <NOBR>\"hunting_fishing\",</nobr> <NOBR>\"video_games\"]</nobr></td>\n    <td class=\"\">Array of metadata for Theme Marketplace searches &ndash; exact names of storefront types compatible with this theme. <NOBR>The \"Default/Examples\"</nobr> column lists the complete namespace. At least one of the values listed there must be present.</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent2\"> “industries\"</span></td>\n    <td class=\"\">Array</td>\n    <td class=\"\">[<NOBR>\"arts_crafts\",</nobr> <NOBR>\"animals_pets\",</nobr> <NOBR>\"automotive_industrial\",</nobr> <NOBR>\"electronics_computers\",</nobr> <NOBR>\"fashion_jewelry\",</nobr> <NOBR>\"food_beverage\",</nobr> <NOBR>\"gifts_specialty\",</nobr> <NOBR>\"health_beauty\",</nobr> <NOBR>\"home_garden\",</nobr> <NOBR>\"books_entertainment\",</nobr> <NOBR>\"sports_recreation\",</nobr> <NOBR>\"toys_games\"]</nobr></td>\n    <td class=\"\">Array of optional metadata for <NOBR>Theme Marketplace,</nobr> where these values will be used to support faceted searches. You may submit up to four values from the complete namespace listed in the \"Default/Examples\"</nobr> column.</td>\n  </tr>\n</table>"
                      }
                    ]
                  }
                },
                {
                  "title": "Editing Your Theme",
                  "route": {
                    "path": "/editing-your-theme"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Editing Your Theme's Template Files</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#editing_editing-video\">Editing Your Theme: Video Demo</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/9Rk4qWgia5Y\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>",
                        "header": {
                          "anchor": "editing_editing-video"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Making Basic Design and Layout Changes",
                  "route": {
                    "path": "/new-subpage-3"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Making Basic Design and Layout Changes</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#choosing-dev-path\"> Choosing a Development Path</a></li>\n\t\t<li><a href=\"#front-matter-quick-start\">Front-Matter Quick Start</a></li>\n    <li><a href=\"#front-matter-quick-start\">Handlebars Quick Start</a></li>\n\t</ul>\n</div>"
                      }
                    ]
                  }
                },
                {
                  "title": "Customizing Javascript",
                  "route": {
                    "path": "/new-subpage-1"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Hello World!</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#choosing-dev-path\"> Choosing a Development Path</a></li>\n\t\t<li><a href=\"#front-matter-quick-start\">Front-Matter Quick Start</a></li>\n    <li><a href=\"#front-matter-quick-start\">Handlebars Quick Start</a></li>\n\t</ul>\n</div>"
                      }
                    ]
                  }
                },
                {
                  "title": "Rendering HTML with Ajax",
                  "route": {
                    "path": "/new-subpage"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Rendering HTML with Ajax</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#choosing-dev-path\"> Choosing a Development Path</a></li>\n\t\t<li><a href=\"#front-matter-quick-start\">Front-Matter Quick Start</a></li>\n    <li><a href=\"#front-matter-quick-start\">Handlebars Quick Start</a></li>\n\t</ul>\n</div>"
                      }
                    ]
                  }
                },
                {
                  "title": "Testing and Debugging Your Theme",
                  "route": {
                    "path": "/new-subpage"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>HTesting and Debugging Your Theme</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#choosing-dev-path\"> Choosing a Development Path</a></li>\n\t\t<li><a href=\"#front-matter-quick-start\">Front-Matter Quick Start</a></li>\n    <li><a href=\"#front-matter-quick-start\">Handlebars Quick Start</a></li>\n\t</ul>\n</div>"
                      }
                    ]
                  }
                },
                {
                  "title": "Managing Theme Variations",
                  "route": {
                    "path": "/new-subpage"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Managing Theme Variations</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#choosing-dev-path\"> Choosing a Development Path</a></li>\n\t\t<li><a href=\"#front-matter-quick-start\">Front-Matter Quick Start</a></li>\n    <li><a href=\"#front-matter-quick-start\">Handlebars Quick Start</a></li>\n\t</ul>\n</div>"
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Editing Your Theme's Template Files",
            "route": {
              "path": "/templates-directory"
            },
            "data": {
              "children": [
                {
                  "title": "Templates Directory Overview",
                  "route": {
                    "path": "/templates-directory-overview"
                  },
                  "data": {
                    "children": [
                      {
                        "title": "Components Subdirectory",
                        "route": {
                          "path": "/new-subpage-3"
                        },
                        "data": {}
                      },
                      {
                        "title": "Layout Subdirectory",
                        "route": {
                          "path": "/new-subpage-2"
                        },
                        "data": {}
                      },
                      {
                        "title": "Pages Subdirectory",
                        "route": {
                          "path": "/new-subpage-1"
                        },
                        "data": {}
                      },
                      {
                        "title": "Custom Templates",
                        "route": {
                          "path": "/new-subpage"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Custom Templates</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#configuring_before\">Custom Templates</a></li>\n\t\t<li><a href=\"#configuring_config-json\">Configuring config.json Keys</a></li>\n\t</ul>\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## Custom Templates"
                            },
                            {
                              "type": "text",
                              "data": "## Limitations on Custom Templates"
                            }
                          ]
                        }
                      },
                      {
                        "title": "Authoring, Testing, and Uploading Custom Templates",
                        "route": {
                          "path": "/new-subpage-2"
                        },
                        "data": {}
                      },
                      {
                        "title": "Assigning Templates to Pages",
                        "route": {
                          "path": "/new-subpage-1"
                        },
                        "data": {}
                      },
                      {
                        "title": "Switching Themes with Custom Templates",
                        "route": {
                          "path": "/new-subpage"
                        },
                        "data": {}
                      },
                      {
                        "title": "Theme Updates with  Custom Templates",
                        "route": {
                          "path": "/new-subpage"
                        },
                        "data": {}
                      },
                      {
                        "title": "Stencil with Disqus",
                        "route": {
                          "path": "/new-subpage"
                        },
                        "data": {}
                      }
                    ]
                  }
                },
                {
                  "title": "Stencil Checkout",
                  "route": {
                    "path": "/new-subpage"
                  },
                  "data": {
                    "children": [
                      {
                        "title": "Preparing Stencil for Optimized One-Page Checkout",
                        "route": {
                          "path": "/new-subpage"
                        },
                        "data": {}
                      },
                      {
                        "title": "Currency Conversion",
                        "route": {
                          "path": "/new-subpage"
                        },
                        "data": {}
                      },
                      {
                        "title": "Multi Language Checkout",
                        "route": {
                          "path": "/new-subpage"
                        },
                        "data": {}
                      },
                      {
                        "title": "Checkout/Confirmation Injection Options",
                        "route": {
                          "path": "/new-subpage-1"
                        },
                        "data": {}
                      },
                      {
                        "title": "Implement a Custom Checkout with React",
                        "route": {
                          "path": "/implement-a-custom-checkout"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Implementing a Custom React.js Checkout to Cornerstone using the BigCommerce Checkout SDK</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"implement_tutorial-overview\">Tutorial Overview</a></li>\n    <li><a href=\"implement_steps\">Steps to Implement a Custom React Checkout</a></li>\n    <li><a href=\"implement_additional\">Additional Resources</a></li>\t\n</ul>\n</div>\n"
                            },
                            {
                              "type": "text",
                              "data": "## Tutorial Overview\n\nThis tutorial will take you through the steps to implement a custom checkout built with React to the Cornerstone Theme. The checkout will utilize BigCommerce's Checkout SDK. This tutorial assumes Cornerstone 2.4.0 as a starting point.",
                              "header": {
                                "anchor": "implement_tutorial-overview"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "type": "error",
                                "body": "Please note that the provided checkout example is a good starting and reference point, but is **NOT production ready**. You should **not** use this custom checkout in production as it stands.",
                                "title": "Checkout Example NOT production ready!"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Steps to Implement a Custom React Checkout in Cornerstone\n\n### Tutorial Prerequisites\n\nBefore beginning this tutorial, you will need to have the Stencil CLI installed.\n\nIf you do not yet have Stencil CLI installed, complete the steps in [Installing the Stencil CLI](stencil-docs/getting-started/installing-and-launching/installing-the-stencil-cli).\n\n### Install Dependencies\n\nThe React app used to demonstrate the Checkout SDK has a few additional dependencies.\nIn your theme directory (e.g. /stencil/cornerstone), run the following command:\n\n`npm install --save react react-dom react-text-mask classnames accounting babel-preset-react css-loader node-sass sass-loader style-loader @bigcommerce/checkout-sdk`\n\n\n### Update webpack.common.js\n\nThe React app includes .jsx files which will not be resolved using the default webpack configuration in Cornerstone. Additionally, loaders must be registered for .jsx and .scss files.\n\n**Note:** _Cornerstone 2.0 and above uses Webpack 4 which does **not** use a `webpack.conf.js` file like earlier Webpack versions. Instead, we will modify `webpack.common.js`._\n\n#### Register .jsx and .scss loaders\n\nIn webpack.common.js, add the following objects to the `rules` array:\n\n```\n{\n  test: /\\.jsx$/,\n  exclude: /node_modules/,\n  use: {\n      loader: \"babel-loader\",\n      options: {\n          presets: ['react'],\n      },\n  }\n},\n\n{\n  test: /\\.scss$/,\n  use:  [\n      'style-loader',\n      {\n          loader: 'css-loader',\n          options: {\n              modules: true\n          }\n      },\n      'sass-loader'\n  ],\n},\n```\n\nNext, in webpack.common.js, add the following property to the `resolve` object:\n\n\n`extensions: ['.js', '.jsx']`\n\n\n### Add React Checkout Components to Theme\n\n1. Clone or download BigCommerce's [Checkout SDK JS Example](https://github.com/bigcommerce/checkout-sdk-js-example) **outside** of your theme directory\n\n`git clone git@github.com:bigcommerce/checkout-sdk-js-example.git`\n\n2. In your theme directory, navigate to `/assets/js/` and create a `checkout-app` directory (i.e. `/assets/js/checkout-app`)\n\n3. Copy the contents of `/checkout-sdk-js-example/src` into your new `/assets/js/checkout-app` directory \n\n\n### Import Dependencies\n\nEdit `/assets/js/app.js` and add the following lines toward the beginning with the other import statements:\n\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Checkout from './checkout-app/Checkout/checkout';\n```\n\n### Define a Function to Initialize React\n\nEdit `/assets/js/app.js` and add the following lines to the end:\n\n```\nwindow.initReact = function initReact() {\n    ReactDOM.render(\n        React.createElement(Checkout, null, null),\n        document.getElementById('checkout-app')\n    );\n};\n```\n\n### Customize the Checkout Template\n\n1. Edit `/templates/pages/checkout.html` and add the following lines between `{{{ footer.scripts }}}` and `{{/partial}}`\n\n```\n<script src=\"{{cdn 'assets/dist/theme-bundle.main.js'}}\"></script>\n \n<script type=\"text/javascript\" defer>\n    // Exported in app.js\n    window.initReact();\n</script>\n```\n\n2. In `/templates/pages/checkout.html`, replace `{{{ checkout.checkout_content }}}` with the following:\n\n```<div id=\"checkout-app\"></div>```\n\n### Congratulations!\n\nYou should now be able to view your example React checkout by running the `stencil start` command in your theme directory and navigating to your storefront at [http://localhost:3000](http://localhost:3000).\n\nYou can make further customizations to the checkout by modifying the React components in `/assets/js/checkout-app`.",
                              "header": {
                                "anchor": "implement_steps"
                              }
                            },
                            {
                              "type": "tabs",
                              "data": {
                                "children": [
                                  {
                                    "title": "webpack.common.js",
                                    "blocks": [
                                      {
                                        "type": "code",
                                        "data": "LodashPlugin = require('lodash-webpack-plugin'),\npath = require('path'),\nwebpack = require('webpack');\n\n// Common configuration, with extensions in webpack.dev.js and webpack.prod.js.\nmodule.exports = {\nbail: true,\ncontext: __dirname,\nentry: {\n  main: './assets/js/app.js',\n},\nmodule: {\n  rules: [\n      {\n          test: /\\.js$/,\n          include: /(assets\\/js|assets\\\\js|stencil-utils)/,\n          use: {\n              loader: 'babel-loader',\n              options: {\n                  plugins: [\n                      'dynamic-import-webpack', // Needed for dynamic imports.\n                      'lodash', // Automagically tree-shakes lodash.\n                      'transform-regenerator', // Transforms async and generator functions.\n                  ],\n                  presets: [\n                      ['env', {\n                          loose: true, // Enable \"loose\" transformations for any plugins in this preset that allow them.\n                          modules: false, // Don't transform modules; needed for tree-shaking.\n                          useBuiltIns: true, // Tree-shake babel-polyfill.\n                      }],\n                  ],\n              },\n          },\n      },\n      {\n          test: /jquery-migrate/,\n          use: 'imports-loader?define=>false',\n      },\n      {\n          test: /\\.jsx$/,\n          exclude: /node_modules/,\n          use: {\n              loader: \"babel-loader\",\n              options: {\n                  presets: ['react'],\n              },\n          }\n      },\n      {\n          test: /\\.scss$/,\n          use:  [\n              'style-loader',\n              {\n                  loader: 'css-loader',\n                  options: {\n                      modules: true\n                  }\n              },\n              'sass-loader'\n          ]\n      }\n  ],\n},\noutput: {\n  chunkFilename: 'theme-bundle.chunk.[name].js',\n  filename: 'theme-bundle.[name].js',\n  path: path.resolve(__dirname, 'assets/dist'),\n},\nplugins: [\n  new CleanPlugin(['assets/dist'], {\n      verbose: false,\n      watch: false,\n  }),\n  new LodashPlugin, // Complements babel-plugin-lodash by shrinking its cherry-picked builds further.\n  new webpack.ProvidePlugin({\n      $: 'jquery',\n      jQuery: 'jquery',\n      'window.jQuery': 'jquery',\n  }),\n],\nresolve: {\n  alias: {\n      'jquery-migrate': path.resolve(__dirname, 'node_modules/jquery-migrate/dist/jquery-migrate.min.js'),\n      jstree: path.resolve(__dirname, 'node_modules/jstree/dist/jstree.min.js'),\n      lazysizes: path.resolve(__dirname, 'node_modules/lazysizes/lazysizes.min.js'),\n      pace: path.resolve(__dirname, 'node_modules/pace/pace.min.js'),\n      'slick-carousel': path.resolve(__dirname, 'node_modules/slick-carousel/slick/slick.min.js'),\n      'svg-injector': path.resolve(__dirname, 'node_modules/svg-injector/dist/svg-injector.min.js'),\n      sweetalert2: path.resolve(__dirname, 'node_modules/sweetalert2/dist/sweetalert2.min.js'),\n  },\n  extensions: ['.js', '.jsx'],\n},\n};\n",
                                        "header": {
                                          "title": "webpack.common.js"
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "title": "app.js",
                                    "blocks": []
                                  },
                                  {
                                    "title": "checkout.html",
                                    "blocks": [
                                      {
                                        "type": "code",
                                        "data": "{{#partial \"head\"}}\n \n{{{ checkout.checkout_head }}}\n{{{ stylesheet '/assets/css/optimized-checkout.css' }}}\n{{ getFontsCollection }}\n \n<script type=\"text/javascript\">\n    window.language = {{{langJson 'optimized_checkout'}}};\n</script>\n \n{{{head.scripts}}}\n \n{{/partial}}\n \n{{#partial \"page\"}}\n<header class=\"checkoutHeader optimizedCheckout-header\">\n    <div class=\"checkoutHeader-content\">\n        <h1 class=\"is-srOnly\">{{lang 'checkout.title'}}</h1>\n        <h2 class=\"checkoutHeader-heading\">\n            <a class=\"checkoutHeader-link\" href=\"{{urls.home}}\">\n                {{#if checkout.header_image}}\n                    <img alt=\"{{settings.store_logo.title}}\" class=\"checkoutHeader-logo\" id=\"logoImage\" src=\"{{ checkout.header_image }}\"/>\n                {{ else }}\n                    <span class=\"header-logo-text\">{{settings.store_logo.title}}</span>\n                {{/if}}\n            </a>\n        </h2>\n    </div>\n</header>\n \n<div id=\"checkout-app\"></div>\n \n{{{ footer.scripts }}}\n<script src=\"{{cdn 'assets/dist/theme-bundle.main.js'}}\"></script>\n \n<script type=\"text/javascript\" defer>\n    // Exported in app.js\n    window.initReact();\n</script>\n{{/partial}}\n \n{{> layout/empty}}",
                                        "header": {
                                          "title": "checkout.html"
                                        }
                                      }
                                    ]
                                  }
                                ]
                              },
                              "header": {
                                "title": "Examples of files after completing this tutorial"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Additional Resources\n\n* [www.reactjs.org](www.reactjs.org)\n* [www.reactjs.org/tutorial/tutorial.html](www.reactjs.org/tutorial/tutorial.html) (Excellent tutorial on the basics of React)\n* [https://webpack.js.org/concepts/](https://webpack.js.org/concepts/)",
                              "header": {
                                "anchor": "implement_additional\""
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Styling the Apple Pay Button",
                        "route": {
                          "path": "/new-subpage-3"
                        },
                        "data": {}
                      },
                      {
                        "title": "Customizing Invoices and Packing Slips",
                        "route": {
                          "path": "/new-subpage-4"
                        },
                        "data": {}
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Developing on the Stencil Theme Editor ",
            "route": {
              "path": "/developing-on-the-stencil-theme-editor"
            },
            "data": {
              "children": [
                {
                  "title": "Stencil Theme Editor Overview",
                  "route": {
                    "path": "/stencil-theme-editor-overview"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Stencil Theme Editor Overview</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#stencil_stencil-theme-editor-overview\">Stencil Theme Editor</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Stencil Theme Editor\nThe [Stencil Theme Editor](https://forum.bigcommerce.com/s/article/Stencil-Themes?_ga=2.258361674.1984523106.1539568940-967431010.1523308107) is a Graphical User Interface (GUI) that allows BigCommerce merchants to modify a storefront's look and feel without manually entering any code. A merchant using the Stencil Theme Editor can customize a storefront theme by modifying characteristics from a variety of menu options such as Styles, Colors, Typography, Buttons, and more. Furthermore, the Stencil Theme Editor is a useful rapid-customization tool for developers. \n\nAs a theme developer, you not only have the opportunity to _use_ the theme editor to rapidly customize your theme, but also _configure your own settings_ for the Theme Editor. This will give merchants who download your theme the ability to use the Theme Editor with your theme in the ways you provide access to. Like previously mentioned, the Theme Editor by default allows merchants to customize everything from Styles, Colors, Typography, Buttons, and more. As a theme developer, you can choose and configure what features can be modified via the Theme Editor for the theme that you develop.\n\nTo configure and work with the Theme Editor GUI locally, run `stencil start -e` , and point your browser to `localhost:8181`, as described here. This allows you to see and test your personally configured Theme Editor from a merchant's point of view. \n\nThe remainder of this section guides you, as a developer, through configuring your own theme options.",
                        "header": {
                          "anchor": "stencil_stencil-theme-editor-overview"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "type": "error",
                          "body": "Open only one instance of Theme Editor at a time against each storefront. There is currently no synchronization mechanism for configuration changes made by multiple Theme Editor instances.",
                          "title": " Single Instance per Storefront"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Configuring the Stencil Theme Editor",
                  "route": {
                    "path": "/configuring-the-stencil-theme-editor"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Configuring the Stencil Theme Editor</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#configuring_configuration-files\">Configuration Files</a></li>\n    <li><a href=\"#configuring_managing-keys\">Managing Keys between Versions</a></li>\n    <li><a href=\"#configuring_persistent-settings\">Persistent Settings Storage</a></li>\n    <li><a href=\"#configuring_theme-upgrades\">Theme Upgrades and Settings</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Configuration Files\n\nEach theme contains two related JSON files of key-value pairs: `config.json` and `schema.json`. These files' keys provide the following features:\n\nKeys that you include in `schema.json` – together with their corresponding `config.json` default values – define the settings that merchants can customize through the Theme Editor graphical interface.\nOther `config.json` keys contain metadata about the theme, such as the theme's name, version, and resource controls.\nKeys located under the `config.json > variations` object define variations of the theme. For example, a theme might have a \"Light\" variation and a \"Bold\" variation, each with different typography and colors. Each theme can include as many variations as you like.\nKeys located under both files' `settings` objects define the theme's look, feel, and functionality.\n\nFor documentation on the principal keys included in Stencil's reference Cornerstone theme, see this section's [config.json Metadata]() and [schema.json Metadata]() entries. For an introduction to the graphical editor, see\n[Stencil Theme Editor Overview]().",
                        "header": {
                          "anchor": "configuring_configuration-files"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Managing Keys between Versions\n\nTo make sure revisions to your theme are backward-compatibile, we generally recommend that you manage keys in both your `config.json` and `schema.json` files in an additive way. Specific recommendations:\n\nAdding new keys is generally fine. (However, each key in `schema.json` must have a matching default in `config.json`, as outlined in [Enabling Theme Editor]().)\n* Use caution in deleting any key. Doing so can break your new theme version's backward compatibility.\n* We do not recommend renaming keys. Instead, we recommend introducing a new key, while maintaining the old key until it is no longer in use by anyone using an older version of your theme.\n* Each object within your `config.json` > [variations]() object defines one theme variation. If you are adapting an existing theme and consciously want to remove one or more variations, you can do so by removing the corresponding key(s).",
                        "header": {
                          "anchor": "configuring_managing-keys"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Persistent Settings Storage\n\nWhen store administrators use Theme Editor to customize your theme for their store, the store's resulting configuration settings are saved to a separate configuration service at BigCommerce.",
                        "header": {
                          "anchor": "configuring_persistent-settings"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Theme Upgrades and Settings\n\nWhen a merchant upgrades your theme to a newer version, all key-value pairs that were saved to the BigCommerce configuration service are carried forward. For example, assume this customization/upgrade scenario:\n\nYou release your Star Glow theme, version 1. This theme's `config.json` includes a key named `logo_size`, establishing a default value of 100x250. The combination of the key and the value compose a `logo_size` setting.\nThe merchant uses Theme Editor to change the `logo_size` setting to 175x275. This customized setting is stored in the BigCommerce configuration service.\nYou release Star Glow, version 1.1. In this theme revision, you have changed the `logo_size` to 300x300.\nWhen the merchant applies Star Glow version 1.1 to their store, their custom `logo_size` setting of 175x275 remains in effect.\nIf you the merchant creates a second store and applies Star Glow version 1.1 to it, that store has no custom `logo_size` setting – so it will default to the new theme version's 300x300 value.",
                        "header": {
                          "anchor": "configuring_theme-upgrades"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "config.json Metadata",
                  "route": {
                    "path": "/config.json-metadata"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1><code>config.json</code> Metadata</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#config_stencil-theme-editor\"></a></li>\n\t</ul>\n</div>"
                      }
                    ]
                  }
                },
                {
                  "title": "schema.json/Theme Editor Metadata",
                  "route": {
                    "path": "/new-subpage"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#stencil_stencil-theme-editor\">Stencil Theme Editor</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "Waiting to hear back from Erik Christensen about changes that need to be made to this with the new Store Design tool"
                      }
                    ]
                  }
                },
                {
                  "title": "Preparing Thumbnail Images",
                  "route": {
                    "path": "/preparing-thumbnail-images"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Preparing Thumbnail Images</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#preparing_where-and-how-merchants\"></a>Where and How Merchants See Your Theme's Thumbnail Images</li>\n    <li><a href=\"#preparing_general-image\"></a>General Image Requirements</li>\n    <li><a href=\"#preparing_themewide-composite\"></a>Themewide Composite Image</li>\n    <li><a href=\"#preparing_variations\"></a>Variations: Desktop/Mobile Screenshots\n</li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Where and How Merchants See Your Theme's Thumbnail Images\n\nA complete Stencil theme includes screenshots to show off the theme on cards that appear in two locations within the BigCommerce Control Panel:\n\n* `Storefront` > `My Themes`: Each individual card displays a _themewide composite image_, which is an image that contains combination of screenshots of the theme's multiple variations. \n`Storefront` > `Themes Marketplace`: Each card displays one variation of your theme. The three variations of Cornerstone (Light, Warm, and Bold) are displayed across three ",
                        "header": {
                          "anchor": "preparing_where-and-how-merchants"
                        }
                      },
                      {
                        "type": "tabs",
                        "data": {
                          "children": [
                            {
                              "title": "Desktop View of 'My Themes'",
                              "blocks": [
                                {
                                  "type": "image",
                                  "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539625143199",
                                  "header": {
                                    "title": "Storefront > My Themes",
                                    "subtitle": "Each card contains a themewide composite image, showing all the variations of the theme in each. In this image, we see 3 variations for the Cornerstone theme and 4 for the Showroom theme."
                                  },
                                  "config": {
                                    "centered": true,
                                    "fluid": true,
                                    "bordered": true,
                                    "maxWidth": "600",
                                    "maxHeight": "900"
                                  }
                                }
                              ]
                            },
                            {
                              "title": "Desktop View of Themes Marketplace",
                              "blocks": [
                                {
                                  "type": "image",
                                  "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539624737619",
                                  "header": {
                                    "title": "Storefront > Themes Marketplace"
                                  }
                                }
                              ]
                            },
                            {
                              "title": "Mobile View of Themes Marketplace",
                              "blocks": [
                                {
                                  "type": "image",
                                  "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539625004658",
                                  "config": {
                                    "centered": true,
                                    "fluid": true,
                                    "bordered": true,
                                    "maxWidth": "500",
                                    "maxHeight": "1000"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        "header": {
                          "title": "How your theme will appear in the Control Panel and Theme Marketplace"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## General Image Requirements\n\nBelow are details about:\n* how to size and save these images to stage them within your theme's directory structure\n* how to reference them in your config.json file.\n\nAll screenshots described below must meet the following specifications in order for the `stencil bundle` command to be able to process them:\n\n* Saved to a supported image file type: .jpg/.jpeg, .png, or .gif.\n* Stored in your <theme‑name>/meta/ subdirectory.\n\n\nAlso note that all of these screenshots must be in **portrait aspect ratio**, with specific resolutions listed below.",
                        "header": {
                          "anchor": "preparing_general-image"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Themewide Composite Image\n\nThe themewide composite image represents your theme in the Control Panel's `Storefront` > `My Themes` area, which shows merchants their currently available themes (including any custom uploaded themes). \n\nThis file will normally be a mosaic of screenshots from multiple variations within your theme. It must meet the following requirements, beyond the general specifications above:\n\n* Resolution of 600 x 760 pixels (horizontal x vertical).\n* File size smaller than 2 MB.\n* Arbitrary filename prefix, referenced in your config.json file as the \nmeta > composed_image key's value.\n\nHere is an example of a compliant file type and location:\n\n`<theme‑name>/meta/composed.png`\n\nHere is how you would reference this file within `config.json`:\n\n```\n{\n  [...]\n  \"meta\": {\n    [...]\n    \"composed_image\": \"composed.png\",\t\n    [...]\n}\n```",
                        "header": {
                          "anchor": "preparing_themewide-composite"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Variations: Desktop/Mobile Screenshots\n\nEach variation within your theme must be represented by two additional screenshots if you want that variation to appear in the control panel > Storefront > Themes Marketplace area, which shows merchants the themes that are available for download.\n\n### Desktop Screenshot\n\nThe first screenshot, showing your theme on a desktop viewport, must meet the following requirements beyond the general specifications above: \nResolution of 2048 x 2600 pixels (horizontal x vertical).\nFile size smaller than 5 MB.\nArbitrary filename prefix, referenced in your config.json file as the \n`<variation-name> > meta > desktop_screenshot` key's value.\n\t\n### Mobile Screenshot\n\nThe second screenshot, showing your theme on a mobile viewport, must meet the following requirements beyond the general specifications above: \n* Resolution of 304 x 540 pixels (horizontal x vertical).\n* File size smaller than 1 MB.\n* Arbitrary filename prefix, referenced in your config.json file as the \n`<variation-name> > meta > mobile_screenshot` key's value.\n\nHere is an example showing two files of compliant types and location:\n\n* `<theme‑name>/meta/desktop_bright.png`\n* `<theme‑name>/meta/mobile_bright.png`\t\n\nHere is how you would reference these files within `config.json`, for a variation named `Bright`:\n\n```\n [...]\n  \"variations\": [\n    {\n      \"name\": \"Bright\",\n      \"id\": \"bright\",\n      \"meta\": {\n        \"desktop_screenshot\": \"desktop_bright.png\",\n        \"mobile_screenshot\": \"mobile_bright.jpg\",\n    [...]\n    }\n  ]\n```\n",
                        "header": {
                          "anchor": "preparing_variations"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Theme Editor Troubleshooting",
                  "route": {
                    "path": "/new-subpage"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Theme Editor Troubleshooting</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#theme-editor_\">Empty Drop-Down List in Theme Editor Panel</a></li>\n    <li><a href=\"#theme-editor_\">Configured Control Missing from Theme Editor Panel</a></li>\n    <li><a href=\"#theme-editor_\">Theme Changes Not Saved from Theme Editor UI</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "callout",
                        "data": {
                          "title": "Check the Terminal Window",
                          "body": "For any unexpected behavior that you encounter while developing your Stencil theme, please also check the terminal window where you started Stencil CLI. In some cases, the terminal will provide a verbose error message specifying where to look for problems. For less-detailed error messages, we list diagnostic suggestions in this documentation."
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Empty Drop-Down List in Theme Editor Panel\n\n* **Symptom:** A drop-down list's outline appears below its configured label. However, the list appears to be empty.\n* **Likely Cause:** A default value specified in the theme's config.json file is not enumerated in the schema.json file.\n* **Resolution:** Update schema.json to include the config.json value."
                      },
                      {
                        "type": "text",
                        "data": "## Configured Control Missing from Theme Editor Panel\n\n* **Symptom:** A control that you have configured within schema.json is completely absent from the Theme Editor UI.\n* **Likely Cause:** The specified \"type\" is one of: text, text area, radio [button], or image.\n(Theme Editor does not currently support these data types.)\n* **Resolution:** Display the user option via one of the supported data types: color, font, select [drop-down list], or checkbox."
                      },
                      {
                        "type": "text",
                        "data": "## Theme Changes Not Saved from Theme Editor UI\n\n* **Symptom:** Changes saved in a browser's Theme Editor panel are not reflected in the storefront.\n* **Likely Cause:** Check whether multiple users are simultaneously using Theme Editor to customize the same storefront.\n* **Resolution:** We strongly recommend opening only one instance of Theme Editor, at a time, per storefront. BigCommerce currently provides no synchronization mechanism for configuration changes from multiple Theme Editor instances. So the storefront's schema.json will record the last changes made by any instance – but changes saved earlier by other instances might be lost."
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Front-Matter Attributes",
            "route": {
              "path": "/front-matter-attributes"
            },
            "data": {
              "children": [
                {
                  "title": "Front Matter Overview",
                  "route": {
                    "path": "/front-matter-overview"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Front Matter Overview</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#front-matter-overview_declaring-objects\">Declaring Objects</a></li>\n    <li><a href=\"#front-matter-overview_yaml-syntax\">YAML Syntax – Requirements</a></li>\n    <li><a href=\"#front-matter-overview_filtering-attributes\">Filtering Attributes</a></li>\n    <li><a href=\"#front-matter-overview_combining-front-matter\">Combining Front Matter with Handlebars Attributes</a></li>\n    <li><a href=\"#front-matter-overview_default-versus-custom\">Default versus Custom Attributes, per Page</a></li>\n    <li><a href=\"#front-matter-overview_declaring-multiple\">Declaring Multiple Attributes</a></li>\n\t</ul>\n</div>\n\n\n\n\n\n\n"
                      },
                      {
                        "type": "text",
                        "data": "## Declaring Front-Matter Objects\n\nWhen you create a store page that requires specific attributes (such as 'New Products') to be displayed, you must first declare the object and attribute on the page in a front-matter block at the top of the page's HTML template file. The front matter block makes the attribute accessible on the page. Then, to display the attribute on the storefront page, you will reference the the object using Handlebars within the page's HTML.\nFor example, to display 'new products' on a storefront's home page, you first need to make new products accessible on the home page. To achieve this, include the following front matter block at the top of the [home.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/home.html) file to declare the products object with its new attribute. This allows a storefront's home page to access a store's \"New Products.\"\n\n```\n---\nproducts:\n    new:\n    \tlimit: {{theme_settings.homepage_new_products_count}}\n---\n```\n\n**Note:** A 'limit' is required for Product Objects to render on a storefront page. You can hard code the limit value or utilize handlebars.js to reference it from the theme's config.json file. In this case, the limit value is being referenced from the `settings` JSON object in the `config.json` file using handlebars.js. Information on required attributes is detailed in the Front Matter Attributes Reference. \n\nAfter including the front matter block at the top of the home.html file, the New Products attribute will be accessible in the home page's context. As previously stated, simply including the front matter block will not display the attribute on the page. In order to actually display the new products on the desired storefront page, you will refernce the attribute using Handlebars in the same file you have added the front matter block to.\nIn this example, we will include the following code in Cornerstone's [home.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/home.html) file to display New Products on our store's home page. \n\n\n```\n  {{#if products.new}}\n        {{> components/products/new products=products.new columns=theme_settings.homepage_new_products_column_count}}\n    {{/if}}\n```\n",
                        "header": {
                          "anchor": "front-matter-overview_declaring-objects"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## YAML Syntax – Requirements\n\nStencil front matter uses the conventions of [YAML]() (short for the recursive \"YAML Ain't Markup Language\"). Here are the YAML conventions you must follow in front matter:\n\nPlace the front-matter block at the top of your template.\nFence the beginning and end of the front-matter block with a row of three hyphens (---), as you see in the examples here.\nShow attribute > key relationship (or object > property relationship) by indenting the children. In the example above, products is the object,\nPlace a colon (:) directly after each attribute name, and directly after each key name. (Colons separate key:value pairs.)\nIdentifiers are case-sensitive.\n\n### Restrictions\n\nYou can use front matter to specify attributes on the tops of pages in your\n`<theme-name>/templates/pages/` subdirectory.\n\nYou **cannot** use front matter to accomplish this on pages in the following subdirectories:\n* `<theme-name>/templates/components/`\n* `<theme-name>/templates/layout/`\n* `<theme-name>/templates/pages/custom/` \n\n* Indent using only spaces, not tabs. (YAML forbids tabs, to avoid inconsistent encoding of tabs across platforms.) An indent of even one space indicates a child.\n\n* Front matter on a given page cannot exceed 64 KB.\n\n* If a front-matter directive contains an invalid option, Stencil CLI will silently ignore that option.\n\n",
                        "header": {
                          "anchor": "front-matter-overview_yaml-syntax"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Filtering Attributes\n\nSome attributes can accept indented keys, or key-value pairs, to further define the attribute. For example, limit is a key commonly used to restrict the number of objects to return for an attribute.\nTo return products similar to the product that a customer is currently viewing – with a limit of six – you would declare front matter as follows:\n\n```\n---\nproducts:\n    similar_by_views:\n        limit: 6\n---\n```\n\nMost keys have a default value, as listed in the [Front Matter Attributes]() Reference. Specifying the key without a value will call that default value. The default value for `similar_by_views:limit:` happens to be `4`, so inserting `limit` with no integer will display four products:\n\n```\n---\nproducts:\n    similar_by_views:\n        limit:\n---\n```\n",
                        "header": {
                          "anchor": "front-matter-overview_filtering-attributes"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "body": "To keep your pages lightweight, specify only the attributes you need per page. Also, use the limit key (with appropriate values) for attributes that accept it.",
                          "title": "Filtering for Faster Page Loads"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Combining Front Matter with Handlebars Attributes\n\nThe next example builds on front-matter object invocation and filtering, by showing a corresponding Handlebars statement in HTML. Here is how you would declare the `products` object to return four new products, and to then display each product’s name:\n\n```\n---\nproducts:\n    new:\n        limit: 4\n---\n\n<h1> This is the HTML for the new-products example </h1>\n{{#each products.new}}\n    <p>{{ name }}</p>\n{{/each}}\n```",
                        "header": {
                          "anchor": "front-matter-overview_combining-front-matter"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "body": "In the above HTML, the {{ name }} identifier calls an attribute of Stencil’s common product card model, which consolidates details about a given product. For this and other objects that you can access through HTML, please see our reference section on Handlebars objects.",
                          "title": " Reading the Handlebars"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Default versus Custom Attributes, per Page\n\nTo make templates readily useful, they automatically include a page’s default attributes. For example, a theme’s [product.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/product.html) page will automatically include a product attribute.\n\nHowever, if you want to include additional attributes on a page, you can declare those attributes in front matter using the conventions shown above. [The Declaring Objects](#front-matter-overview_declaring-objects) example shows the only way to display a \"new products\" storefront section, which requires front-matter invocation.",
                        "header": {
                          "anchor": "front-matter-overview_default-versus-custom"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Declaring Multiple Attributes\n\nBelow is an example that assumes you want to include a product’s reviews and also related products. To display images for the related products, the HTML statement `<img src=\"{{getImage image 'gallery'}}\">` relies on Stencil's `{{getImage}}` custom Handlebars helper:\n\n```\n---\nproduct:\n   reviews:\n       limit: 9\n   related_products:\n       limit: 10\n---\n\n\n<h2>{{ product.name }}</h2>\n{{#each product.reviews.list}}\n    <p>{{text}}</p>\n{{/each}}\n<h3>Related Products</h3>\n{{#each product.related_products}}\n  <img src=\"{{getImage image 'gallery'}}\">\n  <p>{{ name }}</p>\n{{/each}}\n```\n\n",
                        "header": {
                          "anchor": "front-matter-overview_declaring-multiple"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Front Matter Attributes Reference",
                  "route": {
                    "path": "/front-matter-attributes-reference"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Front Matter Attributes Reference</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#front-matter-attributes-reference_global\">Global Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_blog\">Blog Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_category\">Category Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_product\">Product Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_brand\">Brand Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_brand-list\">Brand List Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_cart\">Cart Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_search\">Search Attributes</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "<h2> <a name=\"Front-ref-global\"></a>Global Attributes </h2>\n\nGlobal attributes are available on all pages. <br><br>\n\n<table>\n  <tr>\n    <td>Attribute</td>\n    <td>Option with Sample Assignment</td>\n    <td>Default Value</td>\n    <td>Details and Other \nAllowable Values/Results</td>\n  </tr>\n  <tr>\n    <td class=\"\">customer:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">Customer attributes are always included, and are available if the active shopper is logged in.</td>\n  </tr>\n\n  <tr>\n  \t<td class=\"\"></td>\n  \t<td class=\"\">addresses: true</td>\n    <td class=\"\">true – on address page<br><p></p>\n\nnull – on all other pages</td>\n    <td class=\"\">Boolean indicating whether to retrieve addresses for this customer.<br><p></p> \n\nNo filtering available. Default sorting is by address id, from lowest to highest.<br><p></p>\n\nnull or false: Do not retrieve addresses.\ntrue: Retrieve addresses.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">returns: true</td>\n    <td class=\"\">true – on returns page<br><p></p>\n\nnull – on all other pages</td>\n    <td class=\"\">Boolean indicating whether to retrieve product-return requests for this customer.<br><p></p> \n      \n      No filtering available.<br><p></p>\n      \n      true: Retrieve requests.<br><p></p>\n      \n      null or false: <NOBR>Do not</nobr> retrieve requests.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">wishlists: <br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: No wishlists displayed.\n      <br><p></p>\n      &lt;number&gt; limits the number of wishlists displayed.\n      <br><p></p>\n      If &lt;number&gt; is not defined, retrieves an unlimited number of wishlists.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">orders: <br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">null</td>\n    <td class=\"\">Contains all orders, complete or not.\n      <br><p></p>\n      null: no orders displayed.\n      <br><p></p>\n      &lt;number&gt; limits the number of orders displayed.\n      <br><p></p>\n      If &lt;number&gt; is not defined, displays 20 orders. (Default sorting is by order id, from lowest to highest.)</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">recently_viewed_products:</td>\n    <td class=\"\">null</td>\n    <td class=\"\">Boolean indicating whether to display recently viewed products.<br><p></p>\n\nNo filtering available.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\">products:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">(When filtering/limiting, products' default sorting is by order id, from lowest to highest.)</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">featured: <br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: No featured products displayed.<br><p></p>\n&lt;number&gt; limits the number of featured products displayed.\n      <br><p></p>\n      If &lt;number&gt; is not set, defaults to 4 products.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">new:<br>\n      <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">\nnull</td>\n    <td class=\"\">null: No new products displayed.<br><p></p>\n&lt;number&gt; limits the number of new products displayed. Maximum allowable value is 25.\n      <br><p></p>\n      If &lt;number&gt; is not defined, defaults to 8 products.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">top_sellers: <br>\n      <span class=\"indent1\">limit:  &lt;number&gt;</span></td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: No top-selling products displayed.\n      <br><p></p>\n      &lt;number&gt; limits the number of top sellers displayed.\n      <br><p></p>\n      If &lt;number&gt; is not defined, defaults to all top sellers.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">carousel: true</td>\n    <td class=\"\"></td>\n  <td class=\"\">null</td>\n    <td class=\"\">Boolean indicating whether to display a carousel on storefront.\n      <br><p></p>\n      No filtering available.\n      <br><p></p>\n      null or false: No carousel display.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">blog:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">(Default sorting is by published_date, from most-recent to earliest.)</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">recent_posts:<br>\n      <span class=\"indent1\">limit: &lt;number&gt;</span>\n    </td>\n    <td class=\"\">20</td>\n    <td class=\"\">null: No recent blog posts displayed.\n      <br><p></p>      \n      &lt;number&gt; limits the number of recent blog posts displayed.\n      <br><p></p>      \n      If &lt;number&gt; is not defined, defaults to the maximum of 20 blog posts.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">summary: &lt;number&gt;</td>\n    <td class=\"\">100</td>\n    <td class=\"\"><!-- null: No summary characters displayed.<br><p></p> -->      \n      &lt;number&gt; sets the number of characters to display in each blog-post summary.\n      <br><p></p>\n      If &lt;number&gt; is not defined, displays 100 characters.</td>\n  </tr>\n  \n  <!-- <tr>\n    <td class=\"\">brands:<br>\n        <span class=\"indent1\">&lt;number&gt;</span></td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: Do not display a brand list.<br><p></p>\n&lt;number&gt; limits the number of brands to return.<br><p></p>\nIf &lt;number&gt; is not defined, returns all brands.</td>\n  </tr> -->\n  \n  <tr>\n    <td class=\"\">cart: true</td>\n    <td class=\"\"></td>\n    <td class=\"\">false</td>\n    <td class=\"\">Boolean indicating whether to retrieve cart data.<br><p></p>\ntrue: Return cart data.<br><p></p>\nfalse: Do not return cart data.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">categories: true</td>\n    <td class=\"\"></td>\n    <td class=\"\">false</td>\n    <td class=\"\">Boolean indicating whether to retrieve the <a href=\"docs/global-resources#Categories\">category tree</a> during an AJAX request.\n      <br><p></p>\n      true: Retrieve the category tree.\n      <br><p></p>\n      false: Do not retrieve the category tree.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">description: true</td>\n    <td class=\"\">\nfalse</td>\n    <td class=\"\">\nBoolean indicating whether to retrieve category descriptions dynamically from the database.\n      <br><p></p>\n      Set to true for themes that must display category descriptions when pages render. (This can slow page loads.)</td>\n  </tr>\n    \n  <tr>\n    <td class=\"\">shop_by_brand:</td>\n    <td class=\"\">limit: &lt;number&gt;</td>\n    <td class=\"\">null</td>\n    <td class=\"\">Typically used in a footer or sidebar.<br><p></p>\nnull: Do not display this brand list.<br><p></p>\n&lt;number&gt; limits the number of brands to return.<br><p></p>\nIf &lt;number&gt; is not defined, returns 10 brands, ordered by the number of products per brand.</td>\n  </tr>\n\n  <!-- <tr>\n    <td class=\"\">suggested_products:<br>\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; limit: &lt;number&gt;</td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: Do not display suggested products.<br><p></p>\n&lt;number&gt; limits the number of suggested products to return.<br><p></p>\nIf &lt;number&gt; is not defined, returns 4 suggested products.</td>\n  </tr> -->\n</table>\n\n\n<h2> <a name=\"Front-ref-cat\"></a>Category Attributes</h2>\n\nCategory attributes are available in the context of a category.<br><br>\n\n<table>\n  <tr>\n    <td>Attribute</td>\n    <td>Option with Sample Assignment</td>\n    <td>Default Value</td>\n    <td>Details</td>\n  </tr>\n  <tr>\n    <td class=\"\">category:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n  </tr>\n\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">shop_by_price:</td>\n    <td class=\"\">\nfalse</td>\n    <td class=\"\">\nBoolean indicating whether to display Shop-by-Price controls.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">products:<br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">\n16</td>\n    <td class=\"\">\nDefines the number of products displayed per page for this category. Range of possible values is 1&ndash;100 products.</td>\n  </tr>\n</table>\n\n\n<h2> <a name=\"Front-ref-blog\"></a>Blog Attributes</h2>\n\nBlog attributes are available in the context of a blog.<br><br>\n\n<table>\n  <tr>\n    <td>Attribute</td>\n    <td>Sub-Attribute</td>\n    <td>Option with Sample Assignment</td>\n    <td>Default Value</td>\n    <td>Details</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">blog:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n  </tr>\n\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">posts:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">(Default sorting is by published_date, from most-recent to earliest.)</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">limit: &lt;number&gt;</td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: No blog posts displayed.<br><p></p>\n      &lt;number&gt; limits the number of blog posts displayed.<br><p></p>\n      Maximum is 20 blog posts per page.\n    </td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">pages: &lt;number&gt;</td>\n    <td class=\"\">5</td>\n    <td class=\"\">\nnull: No pagination.<br><p></p>\n      \n      &lt;number&gt; sets the number of pages to display in pagination links.<br><p></p>\n      \n      If &lt;number&gt; is not defined, defaults to 5 pages.\n    </td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">summary: &lt;number&gt;</td>\n    <td class=\"\">250</td>\n    <td class=\"\"> <!-- null: No summary characters displayed.<br><p></p> -->  \n      &lt;number&gt; sets the number of characters to display in each blog-post summary.<br><p></p>\nIf &lt;number&gt; is not defined, displays 250 characters.</td>\n  </tr>\n</table>\n\n\n<h2> <a name=\"Front-ref-prod\"></a>Product Attributes</h2>\n\nProduct attributes are available in the context of a product.<br><br>\n\n<table>\n  <tr>\n    <td>Attribute</td>\n    <td>Option with Sample Assignment</td>\n    <td>Default Value</td>\n    <td>Details</td>\n  </tr>\n  <tr>\n    <td class=\"\">product:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">(When filtering/limiting, products' default sorting is by order id, from lowest to highest.)</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">videos:<br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">\n[unlimited]</td>\n    <td class=\"\">If product.videos is not defined, no videos are returned.<br><p></p>\n      \n      If product.videos is defined, the default behavior is to return all videos. <!-- Check & correct this. --> <br><p></p>\n      \n      If product.videos.limit is also defined, &lt;number&gt; sets the maximum number of videos returned.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">images:<br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">\n[unlimited]</td>\n    <td class=\"\">If product.images is not defined, no images are returned.<br><p></p>\n      \n      If product.images is defined, you must also define product.images.limit, which throttles the number of images returned. <br><p></p>\nThe maximum allowable value for this option's &lt;number&gt; parameter is 5 images.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">reviews: true<br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">[false]</td>\n    <td class=\"\">Boolean indicating whether to display product reviews.\n      <br><p></p>      \n      If product.reviews is present, and is not explicitly set to \"false\", reviews will appear.\n      <br><p></p>      \n      If &lt;number&gt; is not defined, defaults to 10 reviews.<br><p></p>\n      (When filtering/limiting reviews, default sorting is by review id, from lowest to highest.)</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">related_products:<br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">\n[unlimited]</td>\n    <td class=\"\">Displays products that are related by name.<br><p></p>\n      \n      &lt;number&gt; limits the number of products displayed.<br><p></p>\n      \n      If &lt;limit&gt; is absent or undefined, the default behavior is to display all related products.<br><p></p> \n\nInserting “limit:” with no integer will display 0 products. </td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">similar_by_views:<br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">[unlimited]</td>\n    <td class=\"\">Displays products similar to those displayed in the current page context.<br><p></p>\n      \n      &lt;number&gt; limits the number of products displayed.<br><p></p>\n      \n      If &lt;limit&gt; is absent or undefined, default is to display 4 products.</td>\n  </tr>\n</table>\n\n\n<h2> <a name=\"Front-ref-brand\"></a>Brand Attributes</h2>\n\nBrand attributes are available in the context of a brand.<br><br>\n\n<table>\n  <tr>\n    <td>Attribute</td>\n    <td>Option with Sample Assignment</td>\n    <td>Default Value</td>\n    <td>Details</td>\n  </tr>\n  <tr>\n    <td class=\"\">brand:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n  </tr>\n\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">products: <br>\n      <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">\n50</td>\n    <td class=\"\">\nDefines the number of products displayed per page for this brand. Range of possible values is 1&ndash;50 products.</td>\n  </tr>\n</table>\n\n\n<h2> <a name=\"Front-ref-brandlist\"></a>Brand List Attributes</h2>\n\nThese attributes are available in the context of a list of brands.<br><br>\n\n<table>\n  <tr>\n    <td>Attribute</td>\n    <td>Option with Sample Assignment</td>\n    <td>Default Value</td>\n    <td>Details</td>\n  </tr>\n  <tr>\n    <td class=\"\">brands:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">(When retrieving a collection of brands, default sorting is by brand id, from lowest to highest.)</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">limit: &lt;number&gt;</td>\n    <td class=\"\">50</td>\n    <td class=\"\">\nSets the number of brands displayed in the list. If &lt;limit&gt; is not defined, returns all brands, up to a maximum of 50.</td>\n  </tr>\n</table>\n\n\n<h2> <a name=\"Front-ref-cart\"></a>Cart Attributes</h2>\n\nCart attributes are available in the context of a shopper's cart.<br><br>\n\n<table>\n  <tr>\n    <td>Attribute</td>\n    <td>Sub-Attribute</td>\n    <td>Option with Sample Assignment</td>\n    <td>Default Value</td>\n    <td>Details</td>\n  </tr>\n  <tr>\n    <td class=\"\">cart</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n  </tr>\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">suggestions:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">Suggested products to display to shopper, based on cart contents. <NOBR>(If enabled,</nobr> these suggestions appear only immediately after the shopper adds an item to the cart.)</td>\n  </tr>\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">limit: &lt;number&gt;</td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: Do not display suggested products.<br><p></p>\n&lt;number&gt; limits the number of suggested products to return.<br><p></p>\nIf &lt;number&gt; is not defined, returns 4 suggested products.</td>\n  </tr>\n</table>\n\n\n<h2> <a name=\"Front-ref-search\"></a>Search Attributes</h2>\n\nSearch attributes are available in the context of a search results page.<br><br>\n\n<table>\n  <tr>\n    <td>Attribute</td>\n    <td>Sub-Attribute</td>\n    <td>Option with Sample Assignment</td>\n    <td>Default Value</td>\n    <td>Details</td>\n  </tr>\n  <tr>\n    <td class=\"\">search</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n  </tr>\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">product_results:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n  </tr>\n\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">limit: &lt;number&gt;</td>\n    <td class=\"\">16</td>\n    <td class=\"\">\nDefines the number of product search results displayed per page. Range of possible values is 1&ndash;100 products.</td>\n  </tr>\n</table>"
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Handlebars Syntax and Helpers",
            "route": {
              "path": "/handlebars-syntax-and-helpers"
            },
            "data": {
              "children": [
                {
                  "title": "Handlebars.js Overview",
                  "route": {
                    "path": "/handlebars-overview"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Handlebars.js Overview</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_\"></a>Handlebars.js</li>\n    <li><a href=\"#handlebars_\"></a>Template Logic</li>\n    <li><a href=\"#handlebars_\"></a>Custom Handlebars Helpers</li>\n    <li><a href=\"#handlebars_\"></a>Stencil Handlebars Resources</li>\n    <li><a href=\"#handlebars_\"></a>Rendering Special Characters</li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Handlebars.js\n\nHandlebars is a minimal templating language that allows you to create dynamic and robust templates for any BigCommerce storefront. A Handlebars template looks just like a regular HTML page, with the addition of Handlebars expressions for all dynamic logic that you embed into the page.\n\nA Handlebars expression begins with: ``{{`` and ends with: ``}}``.\n\nHere is a basic example that accesses the title and body variables:\n\n```\n<div class=\"entry\">\n<div class=\"entry\">\n  <h1>{{ title }}</h1>\n  <div class=\"body\">\n    {{ body }}\n  </div>\n</div>\n```\n\nIn production, Handlebars statements run on the server side, generating HTML that the shopper's browser receives.\n\nFor a thorough overview of how to use Handlebars inside your templates, please review the Handlebars documentation and tutorials located at http://handlebarsjs.com/."
                      },
                      {
                        "type": "text",
                        "data": "## Template Logic\n\nWith Handlebars, it’s easy to embed logic right into your templates. Handlebars has built-in helpers for widely used logic and iterator functions. You can find a list of all built-in Handlebars helpers here."
                      },
                      {
                        "type": "text",
                        "data": "## Custom Handlebars Helpers\n\nBigCommerce has extended the built-in Handlebars helpers with certain custom Handlebars helpers. For details, please proceed to this reference section."
                      },
                      {
                        "type": "text",
                        "data": "## Stencil Handlebars Resources\n\nFor a comprehensive reference to the Stencil data objects that you can manipulate via Handlebars statements, please see the Stencil Object Model Reference."
                      },
                      {
                        "type": "text",
                        "data": "## Rendering Special Characters\n\nBy default, Handlebars HTML-escapes values returned by a Handlebars {{ expression }}. So, where a Handlebars expression's referenced content includes special characters, those characters will render literally on the storefront as HTML entities.\nIn the example above, assume that the HTML referenced by {{ title }} contains an ampersand and a \"straight\" apostrophe. You will see the entities &amp; and &#039; displayed literally on the storefront, instead of the intended characters & and '. Similar display errors will be triggered by apostrophes, quotation marks, primes, and other extended characters.\nThe workaround is to place the Handlebars variable in triple braces, like this: {{{ title }}}. Handlebars documentation refers to this technique as a \"triple-stash.\""
                      }
                    ]
                  }
                },
                {
                  "title": "Handlebars Helpers Reference",
                  "route": {
                    "path": "/handlebars-helpers-reference"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Handlebars Helpers Reference</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"handlebars-helpers-reference_a\">Array Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_collection\">Collection Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_comparison\">Comparison Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_control-flow\">Control-Flow Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_html\">HTML Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_image\">Image Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_inflection\">Inflection Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_injection\">Injection Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_markdown\">Markdown Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_math\">Math Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_number\">Number Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_object\">Object Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_operator\">Operator Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_string\">String Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_url\">URL Helpers</a></li>\n    <li><a href=\"handlebars-helpers-reference_misc\">Miscellaneous Helpers</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## {{itemAt}}\n\n_Block helper that returns the item at the specified index._\n\n#### Parameters\n\n* `array` {Array}\n* `idx` {Number}\n* `returns` {any} `value`\n\n#### {{itemAt}} Example\n\nGiven the array `['a', 'b', 'c']`:\n\n```\n{{itemAt array 1}}\n//=> 'b'\n\n```\n---\n\n## {{join}}\n\nThe `join` helper is custom to Stencil. It joins an array of string items, with separators. It returns a string. \n\n#### Parameters\n\n- `values`: {Array}\n- `separator`: {String}\n- `limit=<number>`: An optional limit.\n\n#### {{join}} Example\n\ninsert join example\n\n---\n\n### {{limit}}\n\nThe `limit` helper is custom to Stencil. It limits the number of items returned from an array variable, and returns a new array.\n\n#### Parameters\n\n- `data`: {Array}\n- `limit`: {Number}\n\n#### {{limit}} Example \n\nAssume that `{{cart.items}}` would return 10 items. You could use this helper to limit that behavior to only the first four items, by specifying: \n\n```\n{{limit cart.items 4}}\n```\n\n---\n\n### {{pluck}}\n\nThe `pluck` helper is custom to Stencil. For one or more specified search key(s), it retrieves corresponding values from some or all elements in a specified collection. \n\nThe `pluck` helper returns the retrieved values in a comma-separated string. This helper's general form is:\n\n```\n{{pluck ([limit] <collection> [<limit-value>]) '<search-key>'}}\n```\n\n#### Parameters\n\n- `limit`, `limit-value`: Optional parameters to limit the number of results returned.\n- `collection`: The collection to search.\n- `search-key`: The string to search for.\n\n\n#### {{pluck}} Example 1\n\nAssume that the `categories` collection contains:\n\n```\ncategories: [\n  { \"id\": 1, \"name\": \"Bakeware\" },\n  { \"id\": 2, \"name\": \"Cookware\" },\n  { \"id\": 3, \"name\": \"Cutlery\" }\n]\n```\n\nIn this case, this Handlebars statement:\n\n```\n{{pluck (limit categories 2) 'name'}}\n```\n\n...would return:\n\n```\n\"Bakeware,Cookware\"\n```\n\n#### {{pluck}} Example 2\n\nIf the `categories` themselves each contained an image object, then you could use dot notation to access that image object's children:\n\n```\ncategories: [\n  { \"id\": 1, \"name\": \"Bakeware\", \"image\": { \"data\": \"http://...\", \"alt\": \"Bakeware image\"} },\n  { \"id\": 2, \"name\": \"Cookware\" \"image\": { \"data\": \"http://...\", \"alt\": \"Cookware image\"} },\n  { \"id\": 3, \"name\": \"Cutlery\" \"image\": { \"data\": \"http://...\", \"alt\": \"Cutlery image\"} }\n]\n```\n\nIn this case, this Handlebars statement:\n\n```\n{{pluck (limit categories 2) 'image.data'}}\n```\n\n...would return a comma-separated list of image URLs.\n\n---\n\n\n## <a name=\"array_std\"></a> Standard Array Helpers\n\nThe following standard array helpers are supported on the Stencil framework.\n\n### <a name=\"after\"></a> {{after}}\n\nReturns all of the items in an array after the specified index. Opposite of [before](#before).\n\nGiven the array `['a', 'b', 'c']`:\n\n#### Parameters\n\n* `array` {Array}: Collection.\n* `n` {Number}: Starting index (number of items to exclude).\n* `returns` {Array}: Array exluding `n` items.\n\n#### Example\n\n```handlebars\n{{after array 1}}\n//=> '[\"c\"]'\n```\n\n---\n\n## {{arrayify}}\n\nCasts the given `value` to an array.\n\n#### Parameters\n\n* `value` {any}\n* `returns` {Array}\n\n#### {{arrayify}} Example\n\n```handlebars\n{{arrayify \"foo\"}}\n//=> '[\"foo\"]'\n```\n---\n\n## <a name=\"before\"></a> {{before}}\n\nReturns all of the items in the collection before the specified count. Opposite of [after](#after).\n\nGiven the array `['a', 'b', 'c']`:\n\n#### Parameters\n\n* `array` {Array}\n* `n` {Number}\n* `returns` {Array}: Array excluding items after the given number.\n\n#### {{before}} Example\n\n```handlebars\n{{before array 2}}\n//=> '[\"a\", \"b\"]'\n```\n\n---\n\n## {{eachIndex}}\n\n#### Parameters\n\n* `array` {Array}\n* `options` {Object}\n* `returns` {String}\n\n#### {{eachIndex}} Example\n\n```handlebars\n{{#eachIndex collection}}\n  {{item}} is {{index}}\n{{/eachIndex}}\n```\n\n---\n\n### {{filter}}\n\nBlock helper that filters the given array. Renders the block for values that evaluate to `true`; otherwise, returns the inverse block.\n\n#### Parameters\n\n* `array` {Array}\n* `value` {any}\n* `options` {Object}\n* `returns` {String}\n\n#### {{filter}} Example\n\n```handlebars\n{{#filter array \"foo\"}}AAA{{else}}BBB{{/filter}}\n//=> 'BBB\n```\n\n---\n\n## <a name=\"first\"></a> {{first}}\n\nReturns the first item, or first `n` items, of an array.\n\n#### Parameters\n\n* `array` {Array}\n* `n` {Number}: Number of items to return, starting at `0`.\n* `returns` {Array}\n\n#### {{first}} Example\n\nGiven the array `['a', 'b', 'c', 'd', 'e']`:\n\n```handlebars\n{{first array 2}}\n//=> '[\"a\", \"b\"]'\n```\n\n---\n\n\n### {{forEach}}\n\nIterates over each item in an array, and exposes the current item in the array as context to the inner block. In addition to the current array item, the helper exposes the following variables to the inner block:\n\n* `index`\n* `total`\n* `isFirst`\n* `isLast`\n\nAlso, `@index` is exposed as a private variable, and additional private variables may be defined as hash arguments.\n\n#### Parameters\n\n* `array` {Array}\n* `returns` {String}\n\n#### {{forEach}} Example\n\n```js\nvar accounts = [\n{'name': 'John', 'email': 'john@example.com'},\n{'name': 'Malcolm', 'email': 'malcolm@example.com'},\n{'name': 'David', 'email': 'david@example.com'}\n];\n\n// example usage\n// {{#forEach accounts}}\n//   <a href=\"mailto:{{ email }}\" title=\"Send an email to {{ name }}\">\n//     {{ name }}\n//   </a>{{#unless isLast}}, {{/unless}}\n// {{/forEach}}\n```\n\n---\n\n### {{inArray}}\n\nBlock helper that renders the block if an array has the given `value`. Optionally, you can specify an inverse block to render when the array does not have the given value.\n\n#### Parameters\n\n* `array` {Array}\n* `value` {any}\n* `options` {Object}\n* `returns` {String}\n\n#### {{inArray}} Example\n\nGiven the array `['a', 'b', 'c']`:\n\n```handlebars\n{{#inArray array \"d\"}}\n  foo\n{{else}}\n  bar\n{{/inArray}}\n//=> 'bar'\n```\n\n---\n\n### {{isArray}}\n\nReturns true if `value` is an es5 array.\n\n#### Parameters\n\n* `value` {any}: The value to test.\n* `returns` {Boolean}\n\n#### Example\n\n```handlebars\n{{isArray \"abc\"}}\n//=> 'false'\n```\n\n### <a name=\"last\"></a> {{last}}\n\nReturns the last item, or last `n` items, of an array. Opposite of [first](#first).\n\n#### Parameters\n\n* `array` {Array}\n* `n` {Number}: Number of items to return, starting with the last item.\n* `returns` {Array}\n\n#### Example\n\nGiven the array `['a', 'b', 'c', 'd', 'e']`:\n\n```handlebars\n{{last array 2}}\n//=> '[\"d\", \"e\"]'\n```\n\n### {{lengthEqual}}\n\nBlock helper that compares the length of the given array to the number passed as the second argument. If the array length is equal to the given `length`, the block is returned. Otherwise, you have the option of returning an inverse block.\n\n#### Parameters\n\n* `array` {Array}\n* `length` {Number}\n* `options` {Object}\n* `returns` {String}\n\n#### Example\n\nGiven the array `['a', 'b', 'c', 'd', 'e']`:\n\n```handlebars\n{{#lengthEqual array 10}}AAA{{else}}BBB{{/lengthEqual}}\n//=> 'BBB'\n```\n\n### {{map}}\n\nReturns a new array, created by calling `function` on each element of the given `array`.\n\n#### Parameters\n\n* `array` {Array}\n* `fn` {Function}\n* `returns` {String}\n\n#### Example\n\nGiven an array `['a', 'b', 'c']`:\n\n```js\n// register `double` as a helper\nfunction double(str) {\n  return str + str;\n}\n// then used like this:\n// {{map array double}}\n//=> '[\"aa\", \"bb\", \"cc\"]'\n```\n\n### {{some}}\n\nBlock helper that returns the block *if* the callback returns true for some value in the given array.\n\n#### Parameters\n\n* `array` {Array}\n* `cb` {Function}: Callback function.\n* {Options}: Handlebars-provided options object.\n* `returns` {Array}\n\n#### Example\n\nGiven the array `[1, 'b', 3]`:\n\n```handlebars\n{{#some array isString}}\n  Render me if the array has a string.\n{{else}}\n  Render me if it doesn't.\n{{/some}}\n//=> 'Render me if the array has a string.'\n```\n\n### {{sort}}\n\nSorts the given `array`. If an array of objects is passed, you may optionally pass (as the second argument) a `key` to sort on. Alternatively, you may pass a sorting function as the second argument.\n\n#### Parameters\n\n* `array` {Array}: The array to sort.\n* `key` {String|Function}: The object key to sort by, or a sorting function.\n\n#### Example\n\nGiven an array `['b', 'a', 'c']`:\n\n\n```handlebars\n{{sort array}}\n//=> '[\"a\", \"b\", \"c\"]'\n```\n\n### {{sortBy}}\n\nSorts an `array`. If an array of objects is passed, you may optionally pass a `key` to sort on as the second argument. You may alternatively pass a sorting function as the second argument.\n\n#### Parameters\n\n* `array` {Array}: The array to sort.\n* `props` {String|Function}: One or more properties to sort by, or sorting functions to use.\n\n#### {{sortBy}} Example\n\nGiven an array `[{a: 'zzz'}, {a: 'aaa'}]`:\n\n```handlebars\n{{sortBy array \"a\"}}\n//=> '[{\"a\":\"aaa\"}, {\"a\":\"zzz\"}]'\n```\n---\n\n### <a name=\"withAfter\"></a> {{withAfter}}\n\nUse the items in the array, _after_ the specified index, as context inside a block. Opposite of [withBefore](#withBefore).\n\n#### Parameters\n\n* `array` {Array}\n* `idx` {Number}\n* `options` {Object}\n* `returns` {Array}\n\n#### {{withAfter}} Example\n\nGiven the array `['a', 'b', 'c', 'd', 'e']`:\n\n```handlebars\n{{#withAfter array 3}}\n  {{this}}\n{{/withAfter}}\n//=> \"de\"\n```\n\n### <a name=\"withBefore\"></a> {{withBefore}}\n\nUse the items in the array, _before_ the specified index, as context inside a block. Opposite of [withAfter](#withAfter).\n\n#### Parameters\n\n* `array` {Array}\n* `idx` {Number}\n* `options` {Object}\n* `returns` {Array}\n\n#### {{withBefore}} Example\n\nGiven the array `['a', 'b', 'c', 'd', 'e']`:\n\n```handlebars\n{{#withBefore array 3}}\n  {{this}}\n{{/withBefore}}\n//=> 'ab'\n```\n\n### <a name=\"withFirst\"></a> {{withFirst}}\n\nUses a collection's first item inside a Handlebars block expression. Opposite of [withLast](#withLast).\n\n#### Parameters\n\n* `array` {Array}\n* `idx` {Number}\n* `options` {Object}\n* `returns` {String}\n\n#### {{withFirst}} Example\n\nGiven the array `['a', 'b', 'c']`:\n\n```handlebars\n{{#withFirst array}}\n  {{this}}\n{{/withFirst}}\n//=> 'a'\n```\n"
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Stencil Object Model Reference",
            "route": {
              "path": "/stencil-object-model-reference"
            },
            "data": {
              "children": [
                {
                  "title": "Stencil Objects",
                  "route": {
                    "path": "/stencil-objects"
                  },
                  "data": {
                    "children": [
                      {
                        "title": "Global Objects & Properties",
                        "route": {
                          "path": "/global-objects"
                        },
                        "data": {
                          "children": [
                            {
                              "title": "Banners",
                              "route": {
                                "path": "/banners"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<b>Description: </b>Elements of marketing banners at page’s top and/or bottom<br>\n\n<b>Handlebars Expressions:</b> <span class=\"inline-code\">{{banner}}</span>, <span class=\"inline-code\">{{{banner}}}</span><br>\n\n<b>Object Properties:</b><br><br>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td class=\"\">banners</td>\n    <td class=\"\">Blocks of static HTML content to define banners</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">top</span></td>\n    <td class=\"\">Array of HTML content/strings, for custom top-banner content; banners are populated from the BigCommerce control panel</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">bottom</span></td>\n    <td class=\"\">Array of HTML content/strings, for custom bottom-banner content; banners are populated from the BigCommerce control panel</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "Banner"
                                    },
                                    "config": {}
                                  },
                                  {
                                    "type": "callout",
                                    "data": {
                                      "type": "warning",
                                      "body": "Where a banner contains HTML, the <span class=\"inline-code\">banner</span> helper must be placed in triple braces, as in this \nexample: <span class=\"inline-code\">{{{banner}}}</span>. (Double braces would escape the HTML.)",
                                      "title": "Handlebars Formatting Exception"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "title": "Breadcrumbs",
                              "route": {
                                "path": "/breadcrumbs"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<b>Description:</b> Defines a page's breadcrumbs – available on virtually all pages that have a breadcrumb trail<br>\n\n<b>Handlebars Expression:</b> <span class=\"inline-code\">{{breadcrumbs}}</span><br>\n\n<b>Object Properties:</b><br><br>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td class=\"\">name</td>\n    <td class=\"\">Displayed name of this breadcrumb element</td>\n  </tr>\n  <tr>\n    <td class=\"\">url</td>\n    <td class=\"\">URL of this breadcrumb element</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "Stencil-Bread-ref"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "title": "Categories",
                              "route": {
                                "path": "/categories"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "text",
                                    "data": "<A NAME=\"Categories\"></a>\n<b>Description:</b> A list of all product categories shown in the current page context; default sorting is by category id, from lowest to highest<br>\n\n<b>Handlebars Expression:</b> <span class=\"inline-code\">{{categories}}</span><br>\n\n<b>Object Properties:</b><br><br>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td class=\"\">id</td>\n    <td class=\"\">ID of the top-level category listed</td>\n  </tr>\n  <tr>\n    <td class=\"\">name</td>\n    <td class=\"\">Name of the top-level category</td>\n  </tr>\n  <tr>\n    <td class=\"\">description</td>\n    <td class=\"\">Description of the top-level category (optional &ndash; when requested in front matter)</td>\n  </tr>\n  <tr>\n    <td class=\"\">url</td>\n    <td class=\"\">URL to the category page</td>\n  </tr>\n  <tr>\n    <td class=\"\">count</td>\n    <td class=\"\">Number of products in this category</td>\n  </tr>\n  <tr>\n    <td class=\"\">children</td>\n    <td class=\"\">List of child categories for this top-level category</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> id</span></td>\n    <td class=\"\">ID of the child category</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> name</span></td>\n    <td class=\"\">Name of the child category</td>\n  </tr>\n    <tr>\n    <td class=\"\"><span class=\"indent1\"> description</span></td>\n    <td class=\"\">Description of the child category (optional &ndash; when requested in front matter)</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> url</span></td>\n    <td class=\"\">URL of the child category</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> count</span></td>\n    <td class=\"\">Number of products in this child category</td>\n  </tr>\n</table>"
                                  }
                                ]
                              }
                            },
                            {
                              "title": "Currency Selector",
                              "route": {
                                "path": "/currency-selector"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<b>Description:</b> A list of all supported currencies, and the currency that is actively in use in the storefront<br>\n\n<b>Handlebars Expression:</b> <span class=\"inline-code\">{{currency_selector}}</span><br>\n\n<b>Object Properties:</b><br><br>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td class=\"\">active_currency_id</td>\n    <td class=\"\">ID of the currency actively in use in the storefront</td>\n  </tr>\n  <tr>\n    <td class=\"\">active_currency_flag</td>\n    <td class=\"\">Country flag used to represent the active currency</td>\n  </tr>\n  <tr>\n    <td class=\"\">active_currency_name</td>\n    <td class=\"\">Name of the active currency</td>\n  </tr>\n  <tr>\n    <td class=\"\">active_currency_code</td>\n    <td class=\"\">Code for the active currency</td>\n  </tr>\n  <tr>\n    <td class=\"\">currencies</td>\n    <td class=\"\">List of all the currencies supported for this storefront</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> is_active</span></td>\n    <td class=\"\">Boolean that indicates whether this currency is active for use in the storefront</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> switch_url</span></td>\n    <td class=\"\">The URL to invoke a switch to this currency</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> id</span></td>\n    <td class=\"\">ID of the currency</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> name</span></td>\n    <td class=\"\">Name of the currency</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> flag</span></td>\n    <td class=\"\">Country flag used to visually represent the currency</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "CurrencySel"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "title": "Faceted Search",
                              "route": {
                                "path": "/new-subpage-6"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<A NAME=\"FacSearch\"></a>\n<b>Description: </b>Faceted-search object for searching globally, by category, or by brand<br>\n\n<b>Handlebars Expression</b><b>:</b> <span class=\"inline-code\">{{faceted_search}}</span><br>\n\n<b>Object Properties:</b><br><br>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td class=\"\">facets</td>\n    <td class=\"\">List of all search facets available</td>\n  </tr>\n  <tr>\n    <td class=\"\">selected</td>\n    <td class=\"\">Container for the selected search facets</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">remove_all_url</span></td>\n    <td class=\"\">URL to remove all selected search restrictions</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">items</span></td>\n    <td class=\"\">Currently enabled search facets</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "FacetedSearch"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "title": "Featured Products",
                              "route": {
                                "path": "/new-subpage-2"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<b>Description:</b> A list of all the featured products for the BigCommerce storefront<br>\n\n<b>Handlebars Expression:</b> <span class=\"inline-code\">{{products.featured}}</span><br>\n\n<b>Object Properties:</b> References the <a href=\"/docs/common-product-card-model\">product card model</a>.",
                                    "header": {
                                      "anchor": "FeatProducts"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "<b> Usage Example: </b>\n\nFrom Stencil's base Cornerstone theme, the example below displays the global `{{products.featured}}` object on the `<theme-name>/templates/pages/home.html` page template.\n\nFirst, to declare the object, the following [front matter](/docs/using-yaml-front-matter) must be placed at the top of this template. This particular declaration also limits the number of featured products to be displayed:\n\n```\n---\nproducts:\n    [...]\n    featured:\n        limit: {{theme_settings.homepage_featured_products_count}}\n---\n```\nThe `homepage_featured_products_count` limit is one of two relevant variables defined in Cornerstone's [`config.json`&#160;file](/docs/configjson-reference), here:\n\n```\n  \"settings\": {\n    [...]\n    \"homepage_featured_products_count\": 8,\n    [...]\n    \"homepage_featured_products_column_count\": 4,\n    [...]    \n```\n\nIn the body of the `home.html` template, the following Handlebars conditional statement displays the featured-products object declared above:\n\n```\n    {{#if products.featured}}\n        {{> components/products/featured products=products.featured columns=theme_settings.homepage_featured_products_column_count}}\n    {{/if}}\n```\n\nThis statement formats the featured-products display according to the `homepage_featured_products_column_count` variable, also defined in the `config.json` excerpt above."
                                  }
                                ]
                              }
                            },
                            {
                              "title": "Footer",
                              "route": {
                                "path": "/footer"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<b>Description: </b>The footer content for each storefront page<br>\n\n<b>Handlebars Expression:</b> <span class=\"inline-code\">{{footer}}</span><br>\n\n<b>Object Properties:</b><br><br>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td class=\"\">sitemap_url</td>\n    <td class=\"\">The URL to the sitemap, based on store’s SEO setting</td>\n  </tr>\n  <tr>\n    <td class=\"\">scripts</td>\n    <td class=\"\">Scripts to be loaded after the HTML has loaded; includes performance metrics</td>\n  </tr>\n</table>"
                                  }
                                ]
                              }
                            },
                            {
                              "title": "Home Slide Show",
                              "route": {
                                "path": "/home-slide-show"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<b>Description:</b> A list of images, text, and style assets for a storefront’s image slide show<br>\n\n<b>Handlebars Expression: </b><span class=\"inline-code\">{{carousel}}</span><br>\n\n<b>Object Properties:</b><br><br>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">swap_frequency</td>\n    <td class=\"\">Indicates how often (in seconds) the slides will change; the value must be between 1 and 90,000 seconds</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">slides</td>\n    <td class=\"\">Object containing properties for each slide in the slideshow</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"><span class=\"indent1\">image</span></td>\n    <td class=\"\">Path to the image file used on this slide</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">alt_text</span></td>\n    <td class=\"\">Alt text for the image</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">url</span></td>\n    <td class=\"\">URL to which the image will link</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">heading</span></td>\n    <td class=\"\">Heading message defined by the merchant</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">heading_color</span></td>\n    <td class=\"\">Color of the heading text</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">text</span></td>\n    <td class=\"\">Subheading defined by the merchant</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">text_color</span></td>\n    <td class=\"\">Color of the subheading text</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">button_text</span></td>\n    <td class=\"\">Text displayed on a call-to-action button defined by the merchant</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">button_text_color</span></td>\n    <td class=\"\">Color of the button</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "SlideShow"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "title": "HTML Head",
                              "route": {
                                "path": "/html-head"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<b>Description: </b>Data to be included in the HTML &lt;head&gt; element<br>\n\n<b>Handlebars Expression:</b> <span class=\"inline-code\">{{head}}</span><br>\n\n<b>Object Properties:</b><br><br>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td class=\"\">character_set</td>\n    <td class=\"\">The character set to specify</td>\n  </tr>\n  <tr>\n    <td class=\"\">meta_tags</td>\n    <td class=\"\">Meta tags to improve store SEO</td>\n  </tr>\n  <tr>\n    <td class=\"\">title</td>\n    <td class=\"\">Current page’s title</td>\n  </tr>\n  <tr>\n    <td class=\"\">stylesheets</td>\n    <td class=\"\">CSS files to be included</td>\n  </tr>\n  <tr>\n    <td class=\"\">scripts</td>\n    <td class=\"\">Scripts to be loaded in the &lt;head&gt; tag</td>\n  </tr>\n  <tr>\n    <td class=\"\">favicon</td>\n    <td class=\"\">The store’s favicon (Favorite icon)</td>\n  </tr>\n  <tr>\n    <td class=\"\">rsslinks</td>\n    <td class=\"\">RSS feeds to improve SEO</td>\n  </tr>\n  </tr>\n</table>"
                                  }
                                ]
                              }
                            },
                            {
                              "title": "Is_ajax",
                              "route": {
                                "path": "/is-ajax"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<b>Description: </b>Boolean; returns true if the current executing request is an Ajax request<br>\n\n<b>Handlebars Expression:</b> <span class=\"inline-code\">{{is_ajax}}</span><br>",
                                    "header": {
                                      "anchor": "IsAjax"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "title": "Login",
                              "route": {
                                "path": "/login"
                              },
                              "data": {}
                            }
                          ]
                        }
                      },
                      {
                        "title": "Common Objects",
                        "route": {
                          "path": "/common-objects"
                        },
                        "data": {
                          "children": [
                            {
                              "title": "Catalog Price Common Object",
                              "route": {
                                "path": "/catalog-price-common-object"
                              }
                            },
                            {
                              "title": "Price Common Object",
                              "route": {
                                "path": "/price-common-object"
                              }
                            },
                            {
                              "title": "Price Range Object",
                              "route": {
                                "path": "/price-range-object"
                              }
                            },
                            {
                              "title": "Stencil Image Common Object",
                              "route": {
                                "path": "/stencil-image-common-object"
                              }
                            },
                            {
                              "title": "Common Product Card Model",
                              "route": {
                                "path": "/common-product-card-model"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Other Objects/Properties",
                        "route": {
                          "path": "/new-subpage"
                        },
                        "data": {
                          "children": [
                            {
                              "title": "Product Objects",
                              "route": {
                                "path": "/product-objects"
                              }
                            },
                            {
                              "title": "Category Objects",
                              "route": {
                                "path": "/category-objects"
                              }
                            },
                            {
                              "title": "Brand Objects",
                              "route": {
                                "path": "/brand-objects"
                              }
                            },
                            {
                              "title": "Cart Objects",
                              "route": {
                                "path": "/cart-objects"
                              }
                            },
                            {
                              "title": "Customer Objects",
                              "route": {
                                "path": "/customer-objects"
                              }
                            },
                            {
                              "title": "Blog Objects",
                              "route": {
                                "path": "/new-subpage"
                              }
                            },
                            {
                              "title": "Forms Objects",
                              "route": {
                                "path": "/forms-objects"
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ],
              "blocks": [
                {
                  "type": "html",
                  "data": "<a name=\"Stencil-Obj-ref\"></a>The entries in this section list and describe the objects<!--, custom operators, and data resources--> and properties that you can access programmatically via Handlebars expressions:\n\n<ul>\n  <!-- <li><a href=\"/docs/custom-handlebars-helpers\">Stencil Custom Handlebars Helpers</a></li> -->\n <li><a href=\"/stencil-object-model-reference/global-objects\">Global Objects (subsection)</a></li>\n <li><a href=\"/stencil-object-model-reference/common-object-formats\">Common Objects</a></li>\n <li><a href=\"/stencil-object-model-reference/product-resources\">Product Objects</a></li>\n <li><a href=\"/stencil-object-model-reference/category-resources\">Category Objects</a></li>\n <li><a href=\"/stencil-object-model-reference/brand-resources\">Brand Objects</a></li>\n <li><a href=\"/stencil-object-model-reference/cart-resources\">Cart Objects</a></li>\n <li><a href=\"/stencil-object-model-reference/customer-resources\">Customer Objects</a></li>\n <li><a href=\"/stencil-object-model-reference/blog-resources\">Blog Objects</a></li>\n <li><a href=\"/stencil-object-model-reference/forms-resources\">Forms Objects</a></li>\n</ul>"
                }
              ]
            }
          },
          {
            "title": "Adding Event Hooks to Your Theme",
            "route": {
              "path": "/adding-event-hooks-to-your-theme"
            },
            "data": {
              "children": [
                {
                  "title": "Event Hook Overview and Examples",
                  "route": {
                    "path": "/event-hook-overview-and-examples"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Event Hook Overview and Examples</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#event_event-hook\"></a>Event Hook Overview</li>\n    <li><a href=\"#event_cookie-notification\"></a>Cookie Notification Example</li>\n    <li><a href=\"#event_ecart-dialog\"></a>Cart Dialog Example</li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Event Hook Overview \n\nStencil themes provide access to remote resources through data tags and event hooks. Developers can use these hooks to trigger defined events: A theme can hook to an event to perform its own actions or calculations, based on shopper behavior.\n\nYour Stencil themes incorporate these resources by importing the stencil-utils module, using this statement:\n\n`import utils from '@bigcommerce/stencil-utils';`",
                        "header": {
                          "anchor": "event_event-hook"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Cookie Notification Example\n\nIn the JavaScript-only example below, the `cookie-privacy-notification` hook enables customization of the alert window that displays European Union–required cookie notifications:\n\nFirst, ensure you have loaded the `stencil-utils` package with the following command:\n\n`import utils from '@bigcommerce/stencil-utils';`\n\nEuropean websites must notify users of cookies to comply with European Union law.\nThe following code implements hook that will alert shoppers that the website uses cookies.\n\n```\nexport default function() {\n\n  // Here you can override the default browser alert box by\n  // hooking to the 'cookie-privacy-notification' hook.\n  utils.hooks.on('cookie-privacy-notification', (event, privacyMessage) => {\n\n    // You can make your own custom modal or alert box\n    // appear in your theme using the privacyMessage provided\n    myCustomAlert(privacyMessage);\n\n    // Call event.preventDefault() to prevent the default\n    // browser alert from occurring in stencil-utils\n    event.preventDefault();\n  });\n}\n```\n\nA theme could listen for the `cookie-privacy-notification` event to override the browser’s default notification UI.\n",
                        "header": {
                          "anchor": "event_cookie-notification"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Cart Dialog Example\n\nIn the following code snippet from Cornerstone in [templates/components/products/product-view.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/components/products/product-view.html), note the data tag named `data‑cart‑item‑add`:\n\n```\n<form class=\"form\" method=\"post\" action=\"{{product.cart_url}}\"\n    enctype=\"multipart/form-data\" data-cart-item-add>\n```\n\nThis data tag enables the emission of the `cart‑item‑add` event in this next snippet:\n\n```\n/*  \n * Import all product-specific js \n */\n[...]\nimport utils from '@bigcommerce/stencil-utils';\n[...]\naddProductToCart() {\n    utils.hooks.on('cart-item-add', (event) => {\n        event.preventDefault();\n    });\n}\n```\n",
                        "header": {
                          "anchor": "event_cart-dialog"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Remote API Example",
                  "route": {
                    "path": "/remote-api-example"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Remote API Example</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#remote_remote-api-example\"></a>Remote API Example</li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Remote API Example\n\nClient-side JavaScript can access event hooks directly, without using Handlebars statements. By setting up listeners for these events, you can exercise granular control over your storefront’s user interface. For example, you can pop up custom windows when certain events occur.\n\nBelow is an example implemented within a Stencil theme. This code adds an item to the shopping cart, and displays the result in a custom modal dialog rather than a cart page.\n\n_This particular example uses certain conventions of ES6 JavaScript (also known as ECMAScript 6 or\nECMAScript 2015)._\n\nHere is the signature of the cart.itemAdd function used below, with parameters for product ID, quantity, and options:\n\n`itemAdd(FormData, callback)`\n\nHere is the signature of the cart.getContent function used further down:\n\n`getContent(options, callback)`\n\nThis first complete code snippet calls `cart.itemAdd`, catches any errors, and displays the cart contents in a modal dialog: \n\n```\n // Add item to cart\n        utils.api.cart.itemAdd(new FormData(form), (err, response) => {\n            const errorMessage = err || response.data.error;\n\n            $addToCartBtn\n                .val(originalBtnVal)\n                .prop('disabled', false);\n\n            this.$overlay.hide();\n\n            // Guard statement\n            if (errorMessage) {\n                // Strip the HTML from the error message\n                const tmp = document.createElement('DIV');\n                tmp.innerHTML = errorMessage;\n\n                return alert(tmp.textContent || tmp.innerText);\n            }\n\n            // Open preview modal and update content\n            if (this.previewModal) {\n                this.previewModal.open();\n\n                this.updateCartContent(this.previewModal, response.data.cart_item.hash);\n            } else {\n                this.$overlay.show();\n                // if no modal, redirect to the cart page\n                this.redirectTo(response.data.cart_item.cart_url || this.context.urls.cart);\n            }\n        });\n```\n\nThis final code snippet calls `cart.getContent` to fetch the cart contents, then display it in a preview format, which is specified by a `template` option with a value of `cart/preview`:\n\n```\n  /**\n     * Get cart contents\n     *\n     * @param {String} cartItemHash\n     * @param {Function} onComplete\n     */\n    getCartContent(cartItemHash, onComplete) {\n        const options = {\n            template: 'cart/preview',\n            params: {\n                suggest: cartItemHash,\n            },\n            config: {\n                cart: {\n                    suggestions: {\n                        limit: 4,\n                    },\n                },\n            },\n        };\n\n        utils.api.cart.getContent(options, onComplete);\n    }\n```"
                      }
                    ]
                  }
                },
                {
                  "title": "Data Tags/Event Hook Reference",
                  "route": {
                    "path": "/data-tags-event-hooks-reference"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Data Tags/Event Hook Reference</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#data_stencil-data-tags\"></a>Stencil Data Tags and Event Hooks</li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Stencil Data Tags and Event Hooks\nStencil themes provide the following chains of data tags, delegated DOM (Document Object Model) events, emitted Stencil event hooks, and Stencil event parameter(s).\n\n### Cart Item Added\n\nHook for items added to the customer’s shopping cart.\n\n**Function Signature:**\n\n```\nitemAdd() {\n    this.$body.on('submit', '[data-cart-item-add]', (event) => {\n        this.emit('cart-item-add', event, event.target);\n    });\n}\n```\n\n<table>\n\t<tr>\n\t\t<th>Data Tag</th>\n\t\t<th>Delegated DOM Event</th>\n\t\t<th>Stencil Event/Hook</th>\n\t\t<th>Stencil Event Parameter(s)</th>\n\t</tr>\n\t<tr>\n\t\t<td>data-cart-item-add</td>\n\t\t<td>submit</td>\n\t\t<td>cart-item-add</td>\n\t\t<td>event, event.target</td>\n\t</tr>\n</table>\n\n### Faceted-Search Events\n\nHooks for faceted-search selections that the customer initiates or submits.\n\n**Function Signature**\n\n```\nsearchEvents() {\n  this.$body.on('click', '[data-faceted-search-facet]', (event) => {\n        this.emit('facetedSearch-facet-clicked', event);\n  });\n \n  this.$body.on('submit', '[data-faceted-search-range]', (event) => {\n        this.emit('facetedSearch-range-submitted', event);\n  });\n}\n\n```\n\n<table>\n\t<tr>\n\t\t<th>Data Tag</th>\n\t\t<th>Delegated DOM Event</th>\n\t\t<th>Stencil Event/Hook</th>\n\t\t<th>Stencil Event Parameter(s)</th>\n\t</tr>\n\t<tr>\n\t\t<td>data-faceted-search-facet</td>\n\t\t<td>click</td>\n\t\t<td>facetedSearch-facet-clicked</td>\n\t\t<td>event</td>\n\t</tr>\n\t<tr>\n\t\t<td>data-faceted-search-range</td>\n\t\t<td>submit</td>\n\t\t<td>facetedSearch-range-submitted</td>\n\t\t<td>event</td>\n\t</tr>\n</table>",
                        "header": {
                          "anchor": "data_stencil-data-tags"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "stencil-utils API Reference",
                  "route": {
                    "path": "/stencil-utils-api-reference"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>stencil-utils API Reference</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#remote_remote-api-example\"></a>stencil-utils API Reference</li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "<h2> <A NAME=\"API-js\"></a>API [api.js]</h2>\n\nThe <span class=\"inline-code\">api.getPage()</span> function allows you to add Ajax functionality to your themes.<br>\n\n<br> <span id=\"getpage\"> <b>getPage Signature</b> </span> <br>\n\nThe following statement passes <span class=\"inline-code\">url</span> and <span class=\"inline-code\">options</span> arguments to the <span class=\"inline-code\">api.getPage()</span> function:<br><p></p>\n\n<pre>utils.api.getPage(url, options, callback)\n</pre><br>\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\">url</td>\n    <td class=\"\">String</td>\n    <td class=\"\">URL to which you want to send a request (for example: localhost:4000/cart.php)</td>\n  </tr>\n  <tr>\n    <td class=\"\">options</td>\n    <td class=\"\">Object</td>\n    <td class=\"\">Can contain <span class=\"inline-code\">template</span>, <span class=\"inline-code\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FormData\">FormData</a></span> (for POST methods), <span class=\"inline-code\">params</span>&nbsp;(for GET methods), and/or <span class=\"inline-code\">config</span>. <br><br>    \n      The <span class=\"inline-code\">template</span> option allows you to select a particular template, or an array of templates, for rendering one page. Each value must correspond to a file present in the theme's <span class=\"inline-code\">templates/components/</span> subdirectory. <br><br>\n      The <span class=\"inline-code\">config</span> option can be used to pass extra resources, corresponding to attributes that are valid in a page's <a href=\"/docs/using-yaml-front-matter\">front matter</a>, as an object.\n    </td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody></table>\n\nThe <span class=\"inline-code\">config</span> argument works like front matter: it encapsulates JSON. For a usage example of <span class=\"inline-code\">config</span>, see <NOBR><a href=\"/docs/remote-api-example\">Remote API Example</a></nobr>. <br><br>\n\n\n<span id=\"getPageEx\"> <b>getPage Example</b> </span> <br>\n\nIn the following example (from <span class=\"inline-code\">common/faceted-search.js</span>), <span class=\"inline-code\">api.getPage()</span> is called to help execute an <span class=\"inline-code\">updateView()</span> function:<br><p></p>\n\n<pre>    updateView() {\n        $(this.options.blockerSelector).show();\n\n        api.getPage(urlUtils.getUrl(), this.requestOptions, (err, content) => {\n            $(this.options.blockerSelector).hide();\n\n            if (err) {\n                throw new Error(err);\n            }\n\n            // Refresh view with new content\n            this.refreshView(content);\n        });\n    }</pre><p></p>\n\n\n<h2> <A NAME=\"Cart-API\"></a>Cart API </h2>\n\nThe following functions allow your theme to work with cart contents in customized ways.<br><br>\n\n<b>itemAdd Signature</b><br>\n\nThe <span class=\"inline-code\">itemAdd</span> function allows your code to add an item to the cart, with options:<br><p></p>\n\n<pre>utils.api.cart.itemAdd(<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FormData\">FormData</a>, callback)</pre>\n<br>\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\"><A NAME=\"CartAPI-FormData\"></a>formData</td>\n    <td class=\"\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FormData\">FormData</a> object </td>\n    <td class=\"\">Contains all details about the added item and its product options</td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody></table>\n\n\n<span id=\"itemAddEx\"> <b>itemAdd Example</b> </span> <br>\n\n<span class=\"inline-code\">itemAdd</span> is called at the head of the following example (from <span class=\"inline-code\">common/product-details.js</span>) to populate the cart:<br><p></p>\n\n<pre>        // Add item to cart\n        utils.api.cart.itemAdd(new FormData(form), (err, response) => {\n            const errorMessage = err || response.data.error;\n\n            $addToCartBtn\n                .val(originalBtnVal)\n                .prop('disabled', false);\n\n            this.$overlay.hide();\n\n            // Guard statement\n            if (errorMessage) {\n                // Strip the HTML from the error message\n                const tmp = document.createElement('DIV');\n                tmp.innerHTML = errorMessage;\n\n                return alert(tmp.textContent || tmp.innerText);\n            }\n\n            // Open preview modal and update content\n            if (this.previewModal) {\n                this.previewModal.open();\n\n                this.updateCartContent(this.previewModal, response.data.cart_item.hash);\n            } else {\n                this.$overlay.show();\n                // if no modal, redirect to the cart page\n                this.redirectTo(response.data.cart_item.cart_url || this.context.urls.cart);\n            }\n        }); </pre><br>\n\n\n<b>itemUpdate Signature</b><br>\n\nThe <span class=\"inline-code\">itemUpdate</span> function allows your code to update a specified cart item’s quantity:<br>\n\n<p></p><pre>utils.api.cart.itemUpdate(itemId, qty, callback)</pre>\n<br>\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\">itemId</td>\n    <td class=\"\">String</td>\n    <td class=\"\">The item’s ID</td>\n  </tr>\n  <tr>\n    <td class=\"\">qty</td>\n    <td class=\"\">Integer</td>\n    <td class=\"\">The item’s quantity in the cart</td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody></table>\n\n<span id=\"itemUpdateEx\"> <b>itemUpdate  Example</b> </span> <br>\n\nIn the following example (from <span class=\"inline-code\">cart.js</span>), <span class=\"inline-code\">itemUpdate</span> is called just before the final if/else test for an empty cart:<br><p></p>\n\n<pre>    cartUpdate($target) {\n        const itemId = $target.data('cartItemid');\n        const $el = $(`#qty-${itemId}`);\n        const oldQty = parseInt($el.val(), 10);\n        const maxQty = parseInt($el.data('quantityMax'), 10);\n        const minQty = parseInt($el.data('quantityMin'), 10);\n        const minError = $el.data('quantityMinError');\n        const maxError = $el.data('quantityMaxError');\n        const newQty = $target.data('action') === 'inc' ? oldQty + 1 : oldQty - 1;\n\n        // Does not quality for min/max quantity\n        if (newQty < minQty) {\n            return swal({\n                text: minError,\n                type: 'error',\n            });\n        } else if (maxQty > 0 && newQty > maxQty) {\n            return swal({\n                text: maxError,\n                type: 'error',\n            });\n        }\n\n        this.$overlay.show();\n\n        utils.api.cart.itemUpdate(itemId, newQty, (err, response) => {\n            this.$overlay.hide();\n\n            if (response.data.status === 'succeed') {\n                // if the quantity is changed \"1\" from \"0\", we have to remove the row.\n                const remove = (newQty === 0);\n\n                this.refreshContent(remove);\n            } else {\n                $el.val(oldQty);\n                swal({\n                    text: response.data.errors.join('\\n'),\n                    type: 'error',\n                });\n            }\n        });\n    } </pre><br>\n\n\n<b>itemRemove Signature</b><br>\n\nThe <span class=\"inline-code\">itemRemove</span> function allows your code to remove items from the cart:<br>\n\n<p></p><pre>utils.api.cart.itemRemove(itemId, callback)</pre>\n <br>\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\">itemId</td>\n    <td class=\"\">String</td>\n    <td class=\"\">The item’s ID</td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody></table>\n\n\n<span id=\"itemRemoveEx\"> <b>itemRemove Example</b> </span><br>\n\nIn the following example (from <span class=\"inline-code\">cart.js</span>), <span class=\"inline-code\">itemRemove</span> is called before the if/else test:<br><p></p>\n\n<pre>    cartRemoveItem(itemId) {\n        this.$overlay.show();\n        utils.api.cart.itemRemove(itemId, (err, response) => {\n            if (response.data.status === 'succeed') {\n                this.refreshContent(true);\n            } else {\n                alert(response.data.errors.join('\\n'));\n            }\n        });\n    } </pre><br>\n\n\n<b>update Signature</b><br>\n\nThe <span class=\"inline-code\">update</span> function allows your code to update the set of items in the cart:<br>\n\n<p></p><pre>utils.api.cart.update(itemId, qty, callback)</pre>\n\n <br>\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\">items</td>\n    <td class=\"\">Array</td>\n    <td class=\"\">The items in the cart</td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody></table>\n\n\n<b>update Example</b><br>\n\nThe following example shows a call to <span class=\"inline-code\">update</span> within the <span class=\"inline-code\">itemUpdate</span> function:<br><p></p>\n\n<pre>    /**\n    itemUpdate(itemId, qty, callback) {\n        let callbackArg = callback;\n        let items;\n\n        if (Array.isArray(itemId) && typeof qty === 'function') {\n            callbackArg = qty;\n            items = itemId;\n        } else {\n            items = [\n                {\n                    id: itemId,\n                    quantity: qty,\n                },\n            ];\n        }\n\n        this.update(items, (err, response) => {\n            const emitData = {\n                items,\n                err,\n                response,\n            };\n\n            Hooks.emit('cart-item-update-remote', emitData);\n            callbackArg(err, response);\n        });\n    } </pre><br>\n\n\n<b>getItemGiftWrappingOptions Signature</b><br>\n\nThe <span class=\"inline-code\">getItemGiftWrappingOptions</span> function allows your code to retrieve gift-wrapping options for the current cart item, in customized ways:<br><p></p>\n\n\n<pre>utils.api.cart.getItemGiftWrappingOptions(itemId, callback)</pre>\n<br>\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\">itemId</td>\n    <td class=\"\">String</td>\n    <td class=\"\">The cart item</td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody></table>\n\n\n<b>getItemGiftWrappingOptions Example</b> <br>\n\nThe following example (from <span class=\"inline-code\">cart.js</span>) calls <span class=\"inline-code\">getItemGiftWrappingOptions</span> to display gift-wrapping options in a modal:<br><p></p>\n\n<pre>    bindGiftWrappingEvents() {\n        const modal = defaultModal();\n\n        $('[data-item-giftwrap]').on('click', (event) => {\n            const itemId = $(event.currentTarget).data('item-giftwrap');\n            const options = {\n                template: 'cart/modals/gift-wrapping-form',\n            };\n\n            event.preventDefault();\n\n            modal.open();\n\n            utils.api.cart.getItemGiftWrappingOptions(itemId, options, (err, response) => {\n                modal.updateContent(response.content);\n\n                this.bindGiftWrappingForm();\n            });\n        });\n    } </pre><br>\n\n\n<b>submitItemGiftWrappingOption Signature</b><br>\n\nThe <span class=\"inline-code\">submitItemGiftWrappingOption</span> function allows your code to handle the customer’s gift-wrapping selection for the current cart item:<br><p></p>\n\n<pre>utils.api.cart.submitItemGiftWrappingOption(itemId, qty, callback)</pre>\n<br>\n\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\">itemId</td>\n    <td class=\"\">String</td>\n    <td class=\"\">The cart item</td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody></table>\n\n\n<b>submitItemGiftWrappingOption Example</b> <br>\n\nThis commented example shows a simple call to <span class=\"inline-code\">submitItemGiftWrappingOption</span>:\n\n<pre>    /**\n     * Submit giftwrapping options\n     *\n     * @param {String} itemId\n     * @param {Function} callback\n     */\n    submitItemGiftWrappingOption(itemId, params, callback) {\n        this.remoteRequest(`/gift-wrapping/${itemId}`, 'POST', { params }, callback);\n    } </pre><br>\n\n\n<b>getContent Signature</b><br>\n\nThe <span class=\"inline-code\">getContent</span> function allows your code to display the cart contents in customized ways:<br>\n\n<p></p><pre>utils.api.cart.getContent(options, callback)</pre>\n<br>\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\"><A NAME=\"getContent-options\"></a>options</td>\n    <td class=\"\">Object</td>\n    <td class=\"\">Template containing content and totals children</td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody></table>\n\n<span id=\"getContentEx\"> <b>getContent Examples</b> </span> <br>\n\nThe following example (from <span class=\"inline-code\">common/product-details.js</span>) a call to <span class=\"inline-code\">getContent</span>, set up by a prior call to <span class=\"inline-code\">getCartContent</span>:<br><p></p>\n\n<pre>    /**\n     * Get cart contents\n     *\n     * @param {String} cartItemHash\n     * @param {Function} onComplete\n     */\n    getCartContent(cartItemHash, onComplete) {\n        const options = {\n            template: 'cart/preview',\n            params: {\n                suggest: cartItemHash,\n            },\n            config: {\n                cart: {\n                    suggestions: {\n                        limit: 4,\n                    },\n                },\n            },\n        };\n\n        utils.api.cart.getContent(options, onComplete);\n    } </pre><p></p>\n\nThis example (from <span class=\"inline-code\">cart.js</span>) shows a call to <span class=\"inline-code\">getContent</span> within the <span class=\"inline-code\">refreshContent</span> function:<br><p></p>\n\n<pre>    refreshContent(remove) {\n        const $cartItemsRows = $('[data-item-row]', this.$cartContent);\n        const $cartPageTitle = $('[data-cart-page-title]');\n        const options = {\n            template: {\n                content: 'cart/content',\n                totals: 'cart/totals',\n                pageTitle: 'cart/page-title',\n                statusMessages: 'cart/status-messages',\n            },\n        };\n\n        this.$overlay.show();\n\n        // Remove last item from cart? Reload\n        if (remove && $cartItemsRows.length === 1) {\n            return window.location.reload();\n        }\n\n        utils.api.cart.getContent(options, (err, response) => {\n            this.$cartContent.html(response.content);\n            this.$cartTotals.html(response.totals);\n            this.$cartMessages.html(response.statusMessages);\n\n            $cartPageTitle.replaceWith(response.pageTitle);\n            this.bindEvents();\n            this.$overlay.hide();\n\n            const quantity = $('[data-cart-quantity]', this.$cartContent).data('cart-quantity') || 0;\n\n            $('body').trigger('cart-quantity-update', quantity);\n        });\n    } </pre><p></p> \n\nHere is a final example of a call to <span class=\"inline-code\">getContent</span>, from <span class=\"inline-code\">global/cart-preview.js</span>:<br><p></p>\n\n<pre>    $cart.on('click', (event) => {\n        const options = {\n            template: 'common/cart-preview',\n        };\n\n        // Redirect to full cart page\n        //\n        // https://developer.mozilla.org/en-US/docs/Browser_detection_using_the_user_agent\n        // In summary, we recommend looking for the string 'Mobi' anywhere in the User Agent to detect a mobile device.\n        if (/Mobi/i.test(navigator.userAgent)) {\n            return event.stopPropagation();\n        }\n\n        event.preventDefault();\n\n        $cartDropdown\n            .addClass(loadingClass)\n            .html($cartLoading);\n        $cartLoading\n            .show();\n\n        utils.api.cart.getContent(options, (err, response) => {\n            $cartDropdown\n                .removeClass(loadingClass)\n                .html(response);\n            $cartLoading\n                .hide();\n        });\n    }); </pre><br>\n\n\n<b><A NAME=\"getShippingQuotes\"></a>getShippingQuotes Signature</b><br>\n\nThe <span class=\"inline-code\">getShippingQuotes</span> function allows your code to retrieve shipping-cost quotes for the cart’s contents. It returns <span class=\"inline-code\">shippingQuote</span> objects that contain IDs. You must follow <span class=\"inline-code\">getShippingQuotes</span> by calling <span class=\"inline-code\"><a href=\"#submitShippingQuotes\">submitShippingQuote</a></span> on a <span class=\"inline-code\">quoteId</span>:<br>\n\n<p></p><pre>utils.api.cart.getShippingQuotes(params, renderWith, callback)</pre>\n<br>\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\">params</td>\n    <td class=\"\">Object</td>\n    <td class=\"\">Contains country_id, state_id, and zip_code</td>\n  </tr>\n  <tr>\n    <td class=\"\">template</td>\n    <td class=\"\">String/  Array/ Object</td>\n    <td class=\"\">The template to use for rendering</td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody></table>\n\n\n<b>getShippingQuotes and submitShippingQuote Example</b> <br><p></p>\n\nThe following example (from <span class=\"inline-code\">cart/shipping-estimator.js</span>) shows calls to both <span class=\"inline-code\">getShippingQuotes</span> and <span class=\"inline-code\">submitShippingQuote</span>:<br><p></p>\n\n<pre>    bindEstimatorEvents() {\n        const $estimatorContainer = $('.shipping-estimator');\n        const $estimatorForm = $('.estimator-form');\n\n        $estimatorForm.on('submit', (event) => {\n            const params = {\n                country_id: $('[name=\"shipping-country\"]', $estimatorForm).val(),\n                state_id: $('[name=\"shipping-state\"]', $estimatorForm).val(),\n                city: $('[name=\"shipping-city\"]', $estimatorForm).val(),\n                zip_code: $('[name=\"shipping-zip\"]', $estimatorForm).val(),\n            };\n\n            event.preventDefault();\n\n            utils.api.cart.getShippingQuotes(params, 'cart/shipping-quotes', (err, response) => {\n                $('.shipping-quotes').html(response.content);\n\n                // bind the select button\n                $('.select-shipping-quote').on('click', (clickEvent) => {\n                    const quoteId = $('.shipping-quote:checked').val();\n\n                    clickEvent.preventDefault();\n\n                    utils.api.cart.submitShippingQuote(quoteId, () => {\n                        location.reload();\n                    });\n                });\n            });\n        }); </pre><br>\n\n<A NAME=\"submitShippingQuote\"></a> <b>submitShippingQuote Signature</b><br>\n\nThe <span class=\"inline-code\">submitShippingQuote</span> function must be called after <span class=\"inline-code\"><a href=\"#getShippingQuotes\">getShippingQuote</a></span>, which returns <span class=\"inline-code\">shippingQuote</span> objects that contain IDs. The cart page renders the shipping quotes. When the user selects one of the quotes, this function sends that <span class=\"inline-code\">quoteId</span> to the backend:<br>\n\n<p></p><pre>utils.api.cart.submitShippingQuote(quoteId, callback)</pre>\n\n <br>\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\">quoteId</td>\n    <td class=\"\">Number</td>\n    <td class=\"\">ID for a shipping quote returned by <span class=\"inline-code\"><a href=\"#getShippingQuotes\">getShippingQuotes</a></span></td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody></table>\n\n(For sample code, please see <b>getShippingQuotes and submitShippingQuote Example</b>, above.)<br><br>\n\n\n<b>applyCode Signature</b><br>\n\nThe <span class=\"inline-code\">applyCode</span> function applies a coupon code or gift certificate to the cart:<br>\n\n<p></p><pre>utils.api.cart.applyCode(code, callback)</pre>\n<br>\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\">code</td>\n    <td class=\"\">String</td>\n    <td class=\"\">Alphanumeric representation of the coupon or gift-certificate code</td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody></table>\n\nIn the following example (from <span class=\"inline-code\">cart.js</span>),  <span class=\"inline-code\">applyCode</span> is called before the final if/else test to apply a coupon code:<br><p></p>\n\n<pre>    bindPromoCodeEvents() {\n        const $couponContainer = $('.coupon-code');\n        const $couponForm = $('.coupon-form');\n        const $codeInput = $('[name=\"couponcode\"]', $couponForm);\n\n        $('.coupon-code-add').on('click', (event) => {\n            event.preventDefault();\n\n            $(event.currentTarget).hide();\n            $couponContainer.show();\n            $('.coupon-code-cancel').show();\n            $codeInput.focus();\n        });\n\n        $('.coupon-code-cancel').on('click', (event) => {\n            event.preventDefault();\n\n            $couponContainer.hide();\n            $('.coupon-code-cancel').hide();\n            $('.coupon-code-add').show();\n        });\n\n        $couponForm.on('submit', (event) => {\n            const code = $codeInput.val();\n\n            event.preventDefault();\n\n            // Empty code\n            if (!code) {\n                return alert($codeInput.data('error'));\n            }\n\n            utils.api.cart.applyCode(code, (err, response) => {\n                if (response.data.status === 'success') {\n                    this.refreshContent();\n                } else {\n                    alert(response.data.errors.join('\\n'));\n                }\n            });\n        });\n    } </pre><p></p>\n\n\n<h2> <A NAME=\"Cookie\"></a>Cookie Resource</h2>\n\nThis resource allows you to override a browser’s default alert box for cookie notifications.<br><p></p>\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\">privacyMessage</td>\n    <td class=\"\">Merchant-defined message informing customers of storefront’s cookie usage (e.g., to comply with E.U. notification requirement)</td>\n  </tr>\n</tbody></table>\n\n\n<b>Cookie Examples:</b> <br><p></p>\n\nThe following commented example (from <span class=\"inline-code\">global/cookieNotification.js)</span> shows a call to <span class=\"inline-code\">utils.hooks.on('cookie-privacy-notification', (event, privacyMessage)</span> to help comply with European Union privacy requirements:<br><p></p>\n\n<pre>/**\n * European websites must notify users of cookies to comply with European Union law.\n * This will alert shoppers that this website uses cookies.\n */\nexport default function () {\n    /*\n    // Here you can override the default browser alert box by hooking to the 'cookie-privacy-notification' hook.\n    utils.hooks.on('cookie-privacy-notification', (event, privacyMessage) => {\n        // You can make your own custom modal or alert box appear in your theme using the privacyMessage provided\n        myCustomAlert(privacyMessage);\n\n        // Call event.preventDefault() to prevent the default browser alert from occurring in stencil-utils\n        event.preventDefault();\n    });\n    */\n\n    utils.hooks.on('cookie-privacy-notification', (event) => {\n        event.preventDefault();\n\n        const $privacyDialog = $('.cookieMessage');\n        $privacyDialog.show();\n\n        $('body').on('click', '[data-privacy-accept]', () => {\n            utils.hooks.emit('cookie-privacy-accepted');\n            $privacyDialog.hide();\n        });\n    });\n} </pre><p></p> \n\n\n<h2> <A NAME=\"Countries\"></a>Countries Resources</h2>\n\nThese functions allow your theme or app to retrieve standardized country names, by numeric ID or by string.<br>\n\n<br><b>getById Signature</b><br>\n\nThe <span class=\"inline-code\">getById</span> function retrieves standardized country names by numeric ID:<br>\n\n<p></p><pre>utils.api.countries.getById(countryId, callback)</pre>\n\n <br>\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\">countryId</td>\n    <td class=\"\">Number</td>\n    <td class=\"\">Country code</td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody></table>\n\n\nThe following example a call to <span class=\"inline-code\">getById</span>, followed by a call to the <span class=\"inline-code\">getByName</span> function (described below):<br><p></p>\n\n<pre>    /**\n     *\n     * Get country data by id wrapper\n     *\n     * @param {Number} id\n     * @param {Function} callback\n     */\n    getById(id, callback) {\n        const url = this.endpoint + id;\n\n        this.remoteRequest(url, 'GET', {}, callback);\n    }\n\n    /**\n     * Get country data by country name\n     * @param name\n     * @param callback\n     */\n    getByName(name, callback) {\n        const url = this.endpoint + name;\n\n        this.remoteRequest(url, 'GET', {}, callback);\n    }\n}\n </pre><br>\n\n\n<b>getByName Signature</b><br>\n\nThe <span class=\"inline-code\">getByName</span> function retrieves states by country name, and returns an array of states that can be used in the callback:<br>\n\n<p></p><pre>utils.api.countries.getByName(countryName, callback)</pre>\n\n <br>\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\">countryName</td>\n    <td class=\"\">String</td>\n    <td class=\"\">Country name</td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody></table>\n\n\nIn the following example (from <span class=\"inline-code\">common/state-country.js</span>, <span class=\"inline-code\">getByName</span> is called after the initial if test:<br><p></p>\n\n<pre>    $('select[data-field-type=\"Country\"]').on('change', (event) => {\n        const countryName = $(event.currentTarget).val();\n\n        if (countryName === '') {\n            return;\n        }\n\n        utils.api.country.getByName(countryName, (err, response) => {\n            if (err) {\n                alert(context.state_error);\n\n                return callback(err);\n            }\n\n            const $currentInput = $('[data-field-type=\"State\"]');\n\n            if (!_.isEmpty(response.data.states)) {\n                // The element may have been replaced with a select, reselect it\n                const $selectElement = makeStateRequired($currentInput, context);\n\n                addOptions(response.data, $selectElement, options);\n                callback(null, $selectElement);\n            } else {\n                const newElement = makeStateOptional($currentInput, context);\n\n                callback(null, newElement);\n            }\n        });\n    }); </pre><p></p> \n\n\n<h2> <A NAME=\"ProdAttrib\"></a>Product Attributes Resource</h2>\n\nThe <span class=\"inline-code\">optionChange</span> function is fired when the customer selects a product option for the current cart item (for example, changing a shirt’s color from a default \"yellow\" to \"green\"):<br><br>\n\n<b>optionChange Signature</b><br>\n\n<p></p><pre>utils.api.productAttributes.optionChange(productId, params, callback)</pre>\n<br>\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\">params</td>\n    <td class=\"\">Object</td>\n    <td class=\"\">Contains a collection of IDs that map to product properties (color, size, etc.)</td>\n  </tr>\n  <tr>\n    <td class=\"\">productId</td>\n    <td class=\"\">Number</td>\n    <td class=\"\">ID for this product</td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody></table>\n\n\n<b>optionChange Examples</b><br>\n\nIn this example (from <span class=\"inline-code\">common/product-details.js</span>), <span class=\"inline-code\">optionChange</span> is called to update options in a Quick View modal:<br><p></p>\n\n<pre>        // Update product attributes. If we're in quick view and the product has options, then also update the initial view in case items are oos\n        if (_.isEmpty(productAttributesData) && hasOptions) {\n            const $productId = $('[name=\"product_id\"]', $form).val();\n\n            utils.api.productAttributes.optionChange($productId, $form.serialize(), (err, response) => {\n                const attributesData = response.data || {};\n\n                this.updateProductAttributes(attributesData);\n                this.updateView(attributesData);\n            });\n        } else {\n            this.updateProductAttributes(productAttributesData);\n        } </pre><p></p>\n\n\nIn this example (from <span class=\"inline-code\">cart.js</span>), <span class=\"inline-code\">optionChange</span> is called before the final if test:<br><p></p>\n\n<pre>    cartEditOptions(itemId) {\n        const modal = defaultModal();\n        const options = {\n            template: 'cart/modals/configure-product',\n        };\n\n        modal.open();\n\n        utils.api.productAttributes.configureInCart(itemId, options, (err, response) => {\n            modal.updateContent(response.content);\n\n            this.bindGiftWrappingForm();\n        });\n\n        utils.hooks.on('product-option-change', (event, option) => {\n            const $changedOption = $(option);\n            const $form = $changedOption.parents('form');\n            const $submit = $('input.button', $form);\n            const $messageBox = $('.alertMessageBox');\n            const item = $('[name=\"item_id\"]', $form).attr('value');\n\n            utils.api.productAttributes.optionChange(item, $form.serialize(), (err, result) => {\n                const data = result.data || {};\n\n                if (err) {\n                    alert(err);\n                    return false;\n                }  </pre><p></p>\n\n\n<h2> <A NAME=\"Product\"></a>Product Resource</h2>\n\nThe <span class=\"inline-code\">product.getById</span> function allows your code to retrieve, and to present, detailed product information by product ID.<br>\n\n<br><b>getById Signature</b><br>\n\n<p></p><pre>utils.api.product.getById(productId, params, callback)</pre>\n<br>\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\">productId</td>\n    <td class=\"\">Number</td>\n    <td class=\"\">ID for this product</td>\n  </tr>\n  <tr>\n    <td class=\"\">params</td>\n    <td class=\"\">Object</td>\n    <td class=\"\">Contains request options and/or presentation template</td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody></table>\n\n\nThe following example (from <span class=\"inline-code\">global/quick-view.js</span>) calls <span class=\"inline-code\">product.getById</span> to populate the Quick View modal:<br><p></p>\n\n<pre>    $('body').on('click', '.quickview', (event) => {\n        event.preventDefault();\n\n        const productId = $(event.currentTarget).data('product-id');\n\n        modal.open({ size: 'large' });\n\n        utils.api.product.getById(productId, { template: 'products/quick-view' }, (err, response) => {\n            modal.updateContent(response);\n\n            modal.$content.find('.productView').addClass('productView--quickView');\n\n            return new ProductDetails(modal.$content.find('.quickView'), context);\n        });\n    }); </pre><p></p>\n\n\n<h2> <A NAME=\"Search\"></a>Search Resource</h2>\n\nThe <span class=\"inline-code\">search</span> function allows you to present a customized user interface for search results.<br>\n\n<br><b>search Signature</b><br>\n\n<p></p><pre>utils.api.search.search(query, params, callback)</pre>\n<br>\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\">query</td>\n    <td class=\"\">String</td>\n    <td class=\"\">Contains the customer’s search query</td>\n  </tr>\n  <tr>\n    <td class=\"\">params</td>\n    <td class=\"\">Object</td>\n    <td class=\"\">Contains request options and/or presentation template</td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody>\n</table>"
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "CSS And Design Assets",
            "route": {
              "path": "/css-and-design-assets"
            },
            "data": {
              "children": [
                {
                  "title": "Navigating Stencil Design Assets",
                  "route": {
                    "path": "/navigating-stencil-design-assets"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Hello World!</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<h1>Hello World!</h1>"
                      }
                    ]
                  }
                },
                {
                  "title": "Components/Design Patterns",
                  "route": {
                    "path": "/components-design-patterns"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Hello World!</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<h1>Hello World!</h1>"
                      }
                    ]
                  }
                },
                {
                  "title": "Layouts Directory",
                  "route": {
                    "path": "/layouts-directory"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Hello World!</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<h1>Hello World!</h1>"
                      }
                    ]
                  }
                },
                {
                  "title": "Settings Directory",
                  "route": {
                    "path": "/settings-directory"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Hello World!</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<h1>Hello World!</h1>"
                      }
                    ]
                  }
                },
                {
                  "title": "Utilities Directory",
                  "route": {
                    "path": "/new-subpage-1"
                  },
                  "data": {}
                },
                {
                  "title": "Custom Sass Functions",
                  "route": {
                    "path": "/new-subpage"
                  },
                  "data": {}
                },
                {
                  "title": "Page Composition and Styling",
                  "route": {
                    "path": "/new-subpage-4"
                  }
                },
                {
                  "title": "Using Custom Fonts",
                  "route": {
                    "path": "/new-subpage-2"
                  }
                },
                {
                  "title": "Using and Updating Icons",
                  "route": {
                    "path": "/new-subpage-3"
                  }
                }
              ]
            }
          },
          {
            "title": "Custom Javascript Implementations ",
            "route": {
              "path": "/custom-javascript-implementations"
            },
            "data": {
              "children": [
                {
                  "title": "Adding Javascript to Your Stencil Theme",
                  "route": {
                    "path": "/adding-javascript"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Adding Javascript to Your Stencil Theme</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#adding_bundling-and-minification\">Bundling and Minification</a></li>\n    <li><a href=\"#adding_development-options\">Development Options</a></li>\n    <li><a href=\"#adding_using-npm\">Using npm (Node Package Manager)</a></li>\n    <li><a href=\"#adding_placing-modules\">Placing Modules in assets/js/</a></li>\n    <li><a href=\"#adding_theme-specific-js\">Theme-Specific JavaScript Modules</a></li>\n    <li><a href=\"#adding_mapping-page\">Mapping Page Types to JavaScript Modules</a></li>\n    <li><a href=\"#adding_mapping-custom\">Mapping Custom Templates to JavaScript Modules</a></li>\n    <li><a href=\"#adding_summary\">Summary</a></li>\n\t</ul>\n</div>\n\n\n\n\n\n\n\n"
                      },
                      {
                        "type": "text",
                        "data": "## Bundling and Minification\n\nA small Web application, such as an ecommerce theme, can include rich user interactions that depend on many small JavaScript and CSS modules. If we were to embed each of the JavaScript modules in a template file with a separate `<script>` tag, the shopper's browser would need to make separate HTTP requests to retrieve each module.\n\t\nIn some cases, it would take longer to set up the HTTP request than to download the small JavaScript module – leading to slower load times. On mobile devices, slow load times can be especially frustrating.\n\n### Bundling\nTo solve this problem, Stencil – like other modern front-end frameworks – bundles all the JavaScript modules into a single file (a bundle), allowing the shopper's browser to make only a single HTTP request. After the browser has downloaded the bundle of JavaScript modules, the browser caches them, speeding up the rest of the shopper's session.\n\n### Minification\nBeyond reducing the number of HTTP calls required to fetch all the required JavaScript modules, we can reduce the size of the individual JavaScript modules through minification. JavaScript minification removes white space and comments, shortens variable and function names, removes dead code, and more. The goal, in all cases, is to reduce the amount of bandwidth necessary to transmit the JavaScript module to the browser.",
                        "header": {
                          "anchor": "adding_bundling-and-minification"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Development Options\n\nWhen you add JavaScript to a theme, use one of the following techniques, so that Stencil will automatically bundle and minify your modules:\n\n* **Using npm:** Add third-party JavaScript modules to your theme with npm where possible.\n\n* **Place Modules in assets/js/:** For a JavaScript module that is not distributed via npm, add this module to your theme by creating a subdirectory within assets/js/ that contains your module.\n\n* **Theme-Specific JavaScript Modules:** Stencil themes include their own custom JavaScript modules for most page types. You can alter these page-type–specific modules by editing the files in assets/js/theme/*.js.\n\nThese techniques are outlined in the following sections.",
                        "header": {
                          "anchor": "adding_development-options"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Using npm (Node Package Manager)\n\nMany third-party JavaScript components are distributed with npm (Node Package Manager). When you use the npm command-line utility to add a JavaScript component to your theme, Stencil will automatically bundle and minify the component. To enable this bundling/minification, run each module's `npm install` command from the root directory of your theme.\n\n### Taking Over from npm\n\nnpm facilitates managing third-party JavaScript components by placing each JavaScript component – and any of its dependencies – in the correct directories. However, as a developer, you will still need to edit your theme files to wire up the JavaScript component to expose it on your storefront. You will find several examples of this on the following pages.",
                        "header": {
                          "anchor": "adding_using-npm"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Placing Modules in assets/js/\n\nYou can freely create subdirectories within `assets/js/`, to contain new JavaScript modules. The constraint is that all JavaScript files in each module must use the `.js` file extension.",
                        "header": {
                          "anchor": "adding_placing-modules"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Theme-Specific JavaScript Modules\n\nIn your theme's `assets/js/theme/` subdirectory, you will find a tree of JavaScript files. Each file is a JavaScript module. Some modules are for specific page types. Others are common modules that can be used in other modules. Still others are global modules that are available on every page.",
                        "header": {
                          "anchor": "adding_theme-specific-js"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Mapping Page Types to JavaScript Modules\n\nTo find the mapping from page types to modules in `assets/js/theme/`, examine the `PageClasses` object in the file: `assets/js/app.js`. Each `=>import(...)` function within this class maps a page type to the entry module for that page type. For example: When the `cart` page type is loaded in the browser, the JavaScript module named `cart` will be loaded.\n\n### Mapping Example in app.js\n\nHere is an excerpt of mappings from the Cornerstone base theme's `assets/js/app.js`:\n\n```\n[...]\nconst pageClasses = {\n    account_orderstatus: getAccount,\n    account_order: getAccount,\n    account_addressbook: getAccount,\n    [...]\n    createaccount: getLogin,\n    getnewpassword: getLogin,\n    forgotpassword: getLogin,\n    blog: () => import('./theme/blog'),\n    blog_post: () => import('./theme/blog'),\n    brand: () => import('./theme/brand'),\n    brands: () => import('./theme/brand'),\n    cart: () => import('./theme/cart'),\n    [...]\n}; \n```\n\n### Mapping Example in cart.js\n\nInside the `cart` module (`assets/js/theme/cart.js`), other modules are imported, and custom JavaScript methods for the cart module are created in the `Cart` class.\n\nHere is an excerpt from Cornerstone's `assets/js/theme/cart.js` file:\n\n```\nimport PageManager from './page-manager';\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport giftCertCheck from './common/gift-certificate-validator';\nimport utils from '@bigcommerce/stencil-utils';\nimport ShippingEstimator from './cart/shipping-estimator';\nimport { defaultModal } from './global/modal';\nimport swal from 'sweetalert2';\n\nexport default class Cart extends PageManager {\n    loaded(next) {\n        this.$cartContent = $('[data-cart-content]');\n        this.$cartMessages = $('[data-cart-status]');\n        this.$cartTotals = $('[data-cart-totals]');\n        this.$overlay = $('[data-cart] .loadingOverlay')\n            .hide(); // TODO: temporary until roper pulls in his cart components\n\n        this.bindEvents();\n\n        next();\n    }\n\n    cartUpdate($target) {\n        const itemId = $target.data('cart-itemid');\n        const $el = $(`#qty-${itemId}`);\n        const oldQty = parseInt($el.val(), 10);\n        const maxQty = parseInt($el.data('quantity-max'), 10);\n        const minQty = parseInt($el.data('quantity-min'), 10);\n        const minError = $el.data('quantity-min-error');\n        const maxError = $el.data('quantity-max-error');\n        const newQty = $target.data('action') === 'inc' ? oldQty + 1 : oldQty - 1;\n        [...]\n```",
                        "header": {
                          "anchor": "adding_mapping-page"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Mapping Custom Templates to JavaScript Modules\n\nIf you add [custom page templates]() to your theme, you can edit the same `assets/js/app.js` file to map each custom template to an appropriate JavaScript module.\n\nIn the example below, we have added the highlighted `if` statement to map a file called `my-custom-template`:\n\n```\nwindow.stencilBootstrap = function stencilBootstrap(pageType, contextJSON = null, loadGlobal = true) {\n    const context = JSON.parse(contextJSON || {});\n\n    return {\n        load() {\n            $(async () => {\n                let globalClass;\n                let pageClass;\n                let PageClass;\n\n\nif (context.template === 'pages/custom/page/my-custom-template') {\n           // do something, import a file, call a function ...\n}\n\n                [...] \n```\n\nIn the theme's `templates/layout/base.html` template, we've added the `{{inject 'template' template}}` just above `{{{snippet 'htmlhead'}}}` statement to inject the custom template:\n\n```\n<head>\n        <title>{{ head.title }}</title>\n        {{{ head.meta_tags }}}\n        {{{ head.config }}}\n\n        [...]\n\n        {{{head.scripts}}}\n        {{{head.rsslinks}}}\n\n        {{inject 'themeSettings' theme_settings}}\n        {{inject 'genericError' (lang 'common.generic_error')}}\n        {{inject 'maintenanceMode' settings.maintenance}}\n        {{inject 'urls' urls}}\n        {{inject 'template' template}} //injects the custom template\n        {{{snippet 'htmlhead'}}}\n    </head> \n\t\t\n\t\t```\n\n\n",
                        "header": {
                          "anchor": "adding_mapping-custom"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Summary\n\nTo review the basics of using JavaScript in your Stencil theme:\n\n* Stencil automatically bundles and minifies JavaScript modules to optimize page performance.\n\n* To insert custom JavaScript on a particular page in your theme, edit the JavaScript module that corresponds to the page's type.\n\n* To add files from third-party JavaScript modules to a theme, use npm, where possible.\n\n* To add JavaScript modules not distributed via npm, you can create new subdirectories within `assets/js/`.\n\n* Theme-Specific JavaScript modules are provided in the theme's `assets/js/theme/` subdirectory.\n\n* To find the mapping between modules in assets/js/theme/ and page types, examine the PageClasses object contained in `assets/js/app.js`.\n\n* You can map JavaScript modules to custom page templates by editing the same `assets/js/app.js` file.",
                        "header": {
                          "anchor": "adding_summary"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Basic Non NPM Example",
                  "route": {
                    "path": "/basic-non-npm-example"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Basic Non NPM Example</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#adding_locating-page\">Locating Page-Specific JavaScript</a></li>\n    <li><a href=\"#adding_adding-custom-js\">Adding Custom JS Functions</a></li>\n\t</ul>\n</div>\n\n\n\n"
                      },
                      {
                        "type": "text",
                        "data": "## Locating Page-Specific JavaScript \n\nIn this example, let's say that we want to display Hello world alerts when a shopper visits a blog page.\n\nIn Stencil's base Cornerstone theme, the JavaScript that runs on the blog page can be found in\n/cornerstone/assets/js/theme/blog.js. If we want to run additional JavaScript on this page, we can add it to the PageManager class in this file, which is empty by default.",
                        "header": {
                          "anchor": "adding_locating-page"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "body": "Prior to March 2017, the Cornerstone's default path name was `/stencil/`.",
                          "title": "Default Path Name Updated from \"stencil\" to \"cornerstone\""
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Adding Custom JS Functions \n\nIn the code example below, we have added three custom JavaScript functions (`blogHello`, `blogGreatday` and `blogGoodbye`) to the page by populating `PageManager`. Note how each function is called at a different time during the page's life cycle:\n\n\n```\nimport PageManager from '../page-manager';\n\nexport default class Blog extends PageManager {\n    blogHello() {\n        alert('Hello world from blog.js');\n    }\n    blogGreatday() {\n        alert('Have a great day from blog.js');\n    }\n    blogGoodbye() {\n        alert('Goodbye world from blog.js');\n    }\n    before(next) {\n        this.blogHello();\n        next();\n    }\n    loaded(next) {\n        this.blogGreatday();\n        next();\n    }\n    after(next) {\n        this.blogGoodbye();\n        next();\n    }\n}\n```",
                        "header": {
                          "anchor": "adding_adding-custom-js"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Basic NPM example",
                  "route": {
                    "path": "/new-subpage-2"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Basic <code>npm</code> Example</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#basic_what-were-building\">What We're Building</a></li>\n    <li><a href=\"#basic_set-up\"></a>Set Up Your Store</li>\n    <li><a href=\"#basic_install-dependencies\"></a>Install Dependencies</li>\n    <li><a href=\"#basic_configure-webpack\"></a>Configure Webpack loaders in webpack.conf.js</li>\n    <li><a href=\"#basic_import-dependencies\"></a>Import Dependencies</li>\n    <li><a href=\"#basic_configured-loaded-method\"></a>Configure the loaded() Method</li>\n\t</ul>\n</div>\n\n\n\n\n\n\n\n"
                      },
                      {
                        "type": "callout",
                        "data": {
                          "title": "Compatible with Cornerstone versions earlier than 2.x.x",
                          "body": "Because this example involves editing the `webpack.conf.js` file, the way this example is outlined will align with only with Cornerstone versions earlier than 2.x.x. This is due to the transition to Webpack 4 in Cornerstone 2.0.0, which deprecated the `webpack.conf.js` file.",
                          "type": "warning"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## What We're Building\n\nThis example will use the [Foundation-datepicker.js](http://foundation-datepicker.peterbeno.com/#basic-example) plugin to implement a datepicker for product pages' Delivery/Event Date fields."
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539276603841",
                        "header": {
                          "title": "Screenshot of final product"
                        },
                        "config": {
                          "bordered": true,
                          "maxWidth": "700",
                          "maxHeight": "700",
                          "centered": true,
                          "fluid": true
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Set Up Your Store\n\nTo test this example, you'll want your (sandbox or production) store to include at least a couple of products that have a `Delivery/Event Date` configured. (In production, you'd typically use this feature for things like seasonally themed products, temporary promotions, or event tickets.)\n\nFor product configuration steps in the BigCommerce control panel, please see this support article."
                      },
                      {
                        "type": "text",
                        "data": "## Install Dependencies\n\nUse the following command to install this example's required dependencies:\n\n`npm install --save-dev css-loader moment foundation-datepicker style-loader`\n\nThe above command's options are:\n\n* `--save-dev` saves the dependencies as `DevDependencies`; this flags them as required for development, but not at runtime. [This stack overflow thread](https://stackoverflow.com/questions/18875674/whats-the-difference-between-dependencies-devdependencies-and-peerdependencies) provides further context to this concept.\n\n* `css-loader` and `style-loader` are webpack loaders, used together:\n\t* [`css-loader`](https://github.com/webpack-contrib/css-loader) resolves `@import` and `url()` expressions in CSS files.\n\t* [`style-loader`](https://github.com/webpack-contrib/style-loader) generically loads stylesheets by injecting a `<style>` tag.\n\n* [`moment`](https://momentjs.com/) is a JavaScript component parses, validates, and displays dates and times.\n\n* `foundation-datepicker` specifies the datepicker package to install."
                      },
                      {
                        "type": "text",
                        "data": "## Configure Webpack loaders in webpack.conf.js\n\nThe [css]() and [style]() loaders are used to import CSS and to inject it into the DOM, respectively:\n\n```\n{\n    test: /\\.css$/,\n    loader: 'style-loader!css-loader',\n}\n```"
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539280227448",
                        "header": {
                          "title": "CSS and style loaders in context"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Import the Dependencies\n\nImport these new dependencies into `<theme-name>/assets/js/theme/product.js`.\n\nIn `<theme-name>/assets/js/app.js`, notice that there is a mapping between the product page and the `product.js` script:\n\n```\nconst PageClasses = {\n    mapping: {\n        ...\n        'pages/product': product,\n```\n\nThat is, when a user navigates to the product page, the `product.js` script is run. First its constructor will be run, followed by the methods `before`, `loaded`, and `after` – in that order."
                      },
                      {
                        "type": "text",
                        "data": "## Configure the loaded() Method\n\nWe'll use the `loaded` method to initialize our datepicker widget:\n\n```\nimport $ from 'jquery';\nimport PageManager from '../page-manager';\nimport Review from './product/reviews';\nimport collapsibleFactory from './common/collapsible';\nimport ProductDetails from './common/product-details';\nimport videoGallery from './product/video-gallery';\nimport { classifyForm } from './common/form-utils';\nimport 'foundation-datepicker/js/foundation-datepicker.min.js';\nimport 'foundation-datepicker/css/foundation-datepicker.min.css';\nimport moment from 'moment';\n\n...\n\nloaded(next) {\n    let validator;\n\n    // Init collapsible\n    collapsibleFactory();\n\n    this.productDetails = new ProductDetails($('.productView'), this.context);\n\n    videoGallery();\n\n    const $reviewForm = classifyForm('.writeReview-form');\n    const review = new Review($reviewForm);\n\n    $('body').on('click', '[data-reveal-id=\"modal-review-form\"]', () => {\n        validator = review.registerValidation();\n    });\n\n    $reviewForm.on('submit', () => {\n        if (validator) {\n            validator.performCheck();\n            return validator.areAll('valid');\n        }\n\n        return false;\n    });\n\n    let $deliveryDateMth = $('#deliveryDateMth');\n    let $deliveryDateDay = $('#deliveryDateDay');\n    let $deliveryDateYr = $('#deliveryDateYr');\n    let earliestDate = moment(this.context.product.event_date.date_start, \"MMM Do YYYY\");\n    let latestDate = moment(this.context.product.event_date.date_end, \"MMM Do YYYY\");\n\n    $('#deliveryDate').fdatepicker({\n        leftArrow:'<<',\n        rightArrow:'>>',\n        onRender: function (date) {\n            return moment(date).isBetween(earliestDate, latestDate, null, '[]') ? '' : 'disabled';\n        }\n    })\n    .on('changeDate', function(event) {\n        let date = event.date;\n        $deliveryDateMth.val(date.getMonth() + 1);\n        $deliveryDateDay.val(date.getDate());\n        $deliveryDateYr.val(date.getFullYear());\n    })\n    .data('datepicker');\n\n    next();\n}\n```\n\nHighlighted below is the new code added to the `loaded` method:"
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539275148248",
                        "header": {
                          "title": "Code addition to loaded method in product.js"
                        }
                      },
                      {
                        "type": "text",
                        "data": "Update the `<theme-name>/templates/components/products/product-view.html` template, replacing the existing `{{#if product.event_date}}` block with the following:\n\n```\n{{#if product.event_date}}\n    {{inject 'product' product}}\n    <div class=\"form-field\">\n        <label class=\"form-label form-label--alternate form-label--inlineSmall\">\n        {{product.event_date.name}}:\n        <small>{{lang 'common.required'}}</small>\n        </label>\n        <input type=\"text\" class=\"form-input\" id=\"deliveryDate\" name=\"EventDate[Date]\" required>\n        <input type=\"hidden\" id=\"deliveryDateMth\" name=\"EventDate[Mth]\">\n        <input type=\"hidden\" id=\"deliveryDateDay\" name=\"EventDate[Day]\">\n        <input type=\"hidden\" id=\"deliveryDateYr\" name=\"EventDate[Yr]\">\n    </div>\n{{/if}}\n```\n\nNote that we're \"injecting\" the product here, so we have access to its properties. This could be done closer to the root of the tree, but it's been placed here for proximity to the code that requires it.\n\nWe also needed to add form fields for the `EventDate[Mth]`, `EventDate[Day]`, and `EventDate[Yr]` data, which we update whenever the `changeDate` event occurs. This conforms to the data format that the server expects. These fields are hidden from the user.\n"
                      }
                    ]
                  }
                },
                {
                  "title": "Advanced NPM Example",
                  "route": {
                    "path": "/advanced-npm-example"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Advanced NPM Example</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#advanced_video-of-what\">Video of What We're Building</a></li>\n    <li><a href=\"#advanced_install-dependencies\"></a>Install Dependencies</li>\n    <li><a href=\"#advanced_import-dependencies\"></a>Import Dependencies</li>\n    <li><a href=\"#advanced_update-webpackconfjs\"></a>Update webpack.conf.js</li>\n    <li><a href=\"#advanced_update-appjs\"></a>Update app.js</li>\n    <li><a href=\"#advanced_add-the-xcoupondrawer\"></a>Add the <<code>x-coupon-drawer</code>> Element to the Page</li>\n    <li><a href=\"#advanced_call-initreact\"></a>Call initReact from base.html</li>\n    <li><a href=\"#advanced_create-an-assetsjscomp\"></a>Create an assets/js/components Folder</li>\n    <li><a href=\"#advanced_create-a-coupondrawerjs-file\"></a>Create a CouponDrawer.js File</li>\n    <li><a href=\"#advanced_create-a-verticallinear\"></a>Create a VerticalLinearStepper.js File</li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Video of What We're Building"
                      },
                      {
                        "type": "text",
                        "data": "## Install Dependencies"
                      },
                      {
                        "type": "text",
                        "data": "## Import Dependencies"
                      },
                      {
                        "type": "text",
                        "data": "## Update webpack.conf.js"
                      },
                      {
                        "type": "text",
                        "data": "## Update app.js"
                      },
                      {
                        "type": "text",
                        "data": ""
                      },
                      {
                        "type": "text",
                        "data": ""
                      },
                      {
                        "type": "text",
                        "data": ""
                      },
                      {
                        "type": "text",
                        "data": ""
                      },
                      {
                        "type": "text",
                        "data": ""
                      }
                    ]
                  }
                },
                {
                  "title": "Page Types and Life Cycle",
                  "route": {
                    "path": "/new-subpage"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Page Types and Life Cycle</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#adding_bundling-and-minification\">Bundling and Minification</a></li>\n    <li><a href=\"#adding_development-options\"></a>Development Options</li>\n\t</ul>\n</div>"
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Conditional-Logic Examples",
            "route": {
              "path": "/conditional-logic-examples"
            },
            "data": {
              "children": [
                {
                  "title": "Catalog Price Object: How Properties interact",
                  "route": {
                    "path": "/catalog-price-object"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Catalog Price Object: How Properties interact</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<h1>Hello World!</h1>"
                      },
                      {
                        "type": "text",
                        "data": ""
                      },
                      {
                        "type": "text",
                        "data": ""
                      }
                    ]
                  }
                },
                {
                  "title": "Cart Price Properties: Relationships",
                  "route": {
                    "path": "/cart-price-relationships"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Hello World!</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<h1>Hello World!</h1>"
                      }
                    ]
                  }
                },
                {
                  "title": "Calling Theme-Wide Variables via Handlebars",
                  "route": {
                    "path": "/calling-theme-wide-variables"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Hello World!</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<h1>Hello World!</h1>"
                      }
                    ]
                  }
                },
                {
                  "title": "Dynamic Content Rendering on Stencil Storefronts",
                  "route": {
                    "path": "/dynamic-content-rendering"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Hello World!</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<h1>Hello World!</h1>"
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Internationalization/Localization",
            "route": {
              "path": "/internationalization-and-localization"
            },
            "data": {
              "children": [
                {
                  "title": "Localizing Stores",
                  "route": {
                    "path": "/localizing-stores"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Localizing Stores</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#localizing_localization-touchpoints\">Localization Touchpoints Overview</a></li>\n    <li><a href=\"#localizing_translating-theme-files\">Translating Theme Files via Stencil CLI</a></li>\n    <li><a href=\"#localizing_localizing-checkout\">Localizing Checkout</a></li>\n    <li><a href=\"#localizing_localizing-control-panel\">Localizing Non-Theme Content</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Localization Touchpoints Overview \n\nYou can run a BigCommerce store in any single language of your choice. If you want to support multiple languages, we recommend setting up a separate store for each language. To fully localize a store into a language/region other than U.S. English, you will need to customize three areas:\n\nStorefront theme pages: Translate static strings. This requires adding translation files for your chosen non-English languages, via Stencil CLI.\n\nCheckout: Localizing checkout requires modifications both to theme files (in Stencil CLI) and to settings in the BigCommerce control panel.\n\nOutside your theme: Adjust other localization details via the BigCommerce control panel.\n\nThe following sections provide a linked summary of all the steps involved.",
                        "header": {
                          "anchor": "#localizing_localization-touchpoints"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Translating Theme Files via Stencil CLI\n\nThe core of localizing a store is to translate content on your theme's page templates into each language that you choose to support. You will need to abstract these templates' literal text strings into `{{lang}}` variables, then provide per-language JSON files that define these variables in corresponding key/value pairs.\n\nFor details on this process, see this section's remaining pages, starting with [Basis for Internationalization]().",
                        "header": {
                          "anchor": "#localizing_translating-theme-files"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Localizing Checkout\n\nLocalizing your theme's checkout and order confirmation pages requires specific steps in:\n* the corresponding templates \n* each of your JSON translation files \n* and in the BigCommerce control panel\n\n**Note:** _To localize your theme's checkout and/or order confirmation page, you must first enable [Optimized One-Page Checkout.]()_\n\nFor details, please see the following pages:\n\n* [Preparing Stencil Themes for Optimized One-Page Checkout]() is a **prerequisite** for the remaining checkout internationalization options below.\n\n* [Currency-Conversion Options]() covers displaying prices in alternate currencies.\n\n* [Multi-Language Checkout]() covers translating your checkout and/or order confirmation templates.",
                        "header": {
                          "anchor": "#localizing_localizing-checkout"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Localizing Control Panel Content\n\nThe remaining localization options reside outside your theme and are accessible through the BigCommerce control panel:\n\n* [Product Catalog](#product-catalog)\n* [Currency](#currency)\n* [Checkout Type](#checkout-type)\n* [Date Format](#date-format)\n* [Order Statuses](#order-statuses)\n* [Blog](#blog)\n* [Static Web Pages](#static-web-pages)\n* [Transactional Emails](#transactional-emails)\n* [Gift Certificates](#gift-certificates)\n\n**Note:** _The BigCommerce platform does not currently support translation of Transactional Emails or Gift Certificates into languages other than English, so we have rather provided a management best practice for each._\n\n\n### <div id=\"product-catalog\">Localizing the Product Catalog</div>\n\nYou must localize the store's product catalog separately from its theme. Each entry within a catalog can be set up in only one language, so you will want to localize a separate version of your catalog for each single-language store.\n\nFor an overview of populating the store catalog – including options for bulk-importing content that you can localize outside the BigCommerce platform – please see our support article on [Adding and Managing Your Product Catalog]().\n\n### <div id=\"currency\">Localizing Currency</div>\nEach store's default currency is configured in the BigCommerce control panel. For details, please see our support article on Changing Your Default Currency.\n\n### <div id=\"date-format\">Localizing Date Format</div>\nYou can set the appropriate date format for your store's language/region in the BigCommerce control panel (under Store Setup > Store Settings > Date & Timezone). For details, please see this support article.\n\n### <div id=\"order-statuses\">Localizing Order Statuses</div>\nThe order-status labels displayed on a BigCommerce storefront are configured outside your theme. You can translate each of these strings via the BigCommerce control panel's Orders > Order Statuses option. For instructions, please see the Customizing an Order Status Label support topic.\n\n### <div id=\"blog\">Localizing the Blog</div>\nYou manage blog entries through the BigCommerce control panel (under Storefront Content > Blog). You are free to add blog content in any language you choose. For details, please see this support article.\n\n### Localizing Static Web Pages\nIf you create static pages as Stencil custom templates, you can localize their content just like other theme pages' content. However, if you create custom pages via the BigCommerce control panel (under Storefront Content > Web Pages), you must also enter their localized content via the control panel; for details, please see this support article.\n\n### <div id=\"transactional-emails\">Managing Transactional Emails</div>\nBigCommerce does not currently provide native support for localizing transactional emails. To fully localize a store into a language other than English, the simplest solution is to disable the sending of BigCommerce native emails. You can access this option from the BigCommerce control panel's left nav in one of two locations (depending on your store's control-panel version):\n\nStorefront Design > My Themes > Design Options > More [drop-down list] > Emails\nNext, in the Enable column, uncheck the check box for each email type that you want to disable. (These toggles require no confirmation step.) For further details about managing BigCommerce transactional emails, please see this support article.\n\n### <div id=\"gift-certificates\">Managing Gift Certificates</div>\nThe BigCommerce platform does not currently support translation of gift certificates into languages other than English. To fully localize your store, you can choose to disable gift certificates via the BigCommerce control panel.",
                        "header": {
                          "anchor": "#localizing_localizing-control-panel"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Basis for Internationalization",
                  "route": {
                    "path": "/basis-for-internationalization"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Basis for Internationalization</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#basis_what-translates\">What Does and Doesn't Translate</a></li>\n    <li><a href=\"#basis_required\">Required Subdirectory</a></li>\n    <li><a href=\"#basis_schema\">The Schema</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## What Does and Doesn't Translate\n\nThe Stencil framework allows you to define multiple translations for each theme based on a predefined schema. Theme developers are not required to localize a theme in order to make it work. BigCommerce does not provide translations for the theme’s content, however, you have the option of localizing your themes for desired target languages, based on the provided schema.\n\n* In order for theme translation to occur, you must create a JSON file for each language you choose to support and include key/value pairs for the text blocks/parameters that you choose to translate. The following pages provide details for these steps.\n\n* The translated values will be displayed to visitors who have selected the corresponding language in their browser's locale preferences. The Stencil framework automatically detects the Accept-Language request HTTP header from the visitor's browser.\n\n* Where a Stencil theme contains no JSON file matching any of the visitor's preferred languages, it will fall back to the values in the default English-language JSON file.\n\n* Stencil's multi-language capabilities are currently limited to these particular strings that you specify within the theme. The Stencil framework does not currently translate content rendered from a store's catalog database – for example, products' names.\n\n* If you want to fully support multiple languages, we recommend that you set up a separate storefront for each language. This will enable you to thoroughly customize all of your content (including your product catalog) for each target audience."
                      },
                      {
                        "type": "text",
                        "data": "## Required Subdirectory\n\nWithin each theme, a top level `/lang/` subdirectory is reserved for internationalization. This `.../lang/` subdirectory, with its contained en.json file (which contains English-language defaults), must be present in order for a Stencil theme to function.\n\nYou can localize a theme by providing other appropriate .json translation files in the `.../lang/` subdirectory. One file is required for each language that you want to support. (These can include non-U.S. versions of English, each with their own spellings.)\n\nWithin these files, you would define key values corresponding to the text blocks in your theme's templates that you choose to abstract into translatable keys.\n"
                      },
                      {
                        "type": "text",
                        "data": "## The Schema\n\nName your translation files based on the <a href=\"https://tools.ietf.org/html/bcp47\">BCP47 specification</a> of language and region codes. For a summary of how these codes are designed, see the World Wide Web Consortium’s <a href=\"http://www.w3.org/International/articles/language-tags/\">overview</a>.<br>\n\n <br>\n\nYou can find a list of code subtags in the <a href=\"http://www.iana.org/assignments/language-subtag-registry\">IANA Language Subtag Registry</a>. These subtags are primitives that you can combine to create file names’ prefixes for individual regions. Here are some examples:\n\n<table>\n\t\t<tr>\n    <th>Localization file name</th>\n    <th>Corresponding regional language variant</th>\n    <th>Subtags used</th>\n  </tr>\n  <tr>\n    <td class=\"\">en.json</td>\n    <td class=\"\">English (default file)</td>\n    <td class=\"\">en (English)</td>\n  </tr>\n  <tr>\n    <td class=\"\">en-US.json</td>\n    <td class=\"\">American English</td>\n    <td class=\"\">en (English) + US (United States)</td>\n  </tr>\n  <tr>\n    <td class=\"\">en-AU.json</td>\n    <td class=\"\">Australian English</td>\n    <td class=\"\">en (English) + AU (Australia)</td>\n  </tr>\n  <tr>\n    <td class=\"\">fr.json</td>\n    <td class=\"\">French</td>\n    <td class=\"\">en (French)</td>\n  </tr>\n  <tr>\n    <td class=\"\">fr-CA.json</td>\n    <td class=\"\">Canadian French</td>\n    <td class=\"\">fr (French) + CA (Canada)</td>\n  </tr>\n</table>\n\n\nFor more examples of frequently-used codes, see the following linked table’s \"LCID string\" (middle) column: <a href=\"http://www.science.co.il/Language/Locale-codes.asp\">http://www.science.co.il/Language/Locale-codes.asp</a>."
                      },
                      {
                        "type": "text",
                        "data": "## Localization File Structure\n\nThe `.json` translation files have a straightforward structure of key-value pairs. Here is an example, from Stencil’s default `en.json` file:\n\n`\"welcome_back\": \"Welcome back, {name}\"`\n\nAbove, `\"welcome_back\"` is an arbitrary key name for a welcome message. The string `\"Welcome back, {name}\"` is its assigned value for English-language stores.\n\nIf you design your theme’s storefront pages to refer to this message by its generic key name `\"welcome_back\"`, they can pass its localized value in other languages, as that value is defined in each language’s `.json` file.\nKey-value pairs are grouped into objects, as you can see in this longer example:\n\n```\n{\n   \"header\": {\n    \"welcome_back\": \"Welcome back, {name}\"\n   },\n   \"prelaunch\": {\n    \"coming_soon\": \"Coming Soon\",\n    \"intro\": \"This store will be launching shortly. Please visit again!\"\n   },\n   \"cart\": {\n    \"items\": \"{NUM, plural, =0{(0 items)} one {(# item)} other {(# items)}}\",\n    \"label\": \"Cart\",\n    \"is_empty\": \"Your cart is empty\",\n     \"coupon_code\": \"Coupon Code\",\n    \"gift_certificate\": \"Gift Certificate\",\n    \"freeshipping\": \"Free Shipping\",\n    \"shipping_peritem\": \"Per Item Shipping\",\n    \"shipping_estimator\": {\n        \"add_info\": \"Add Info\",\n        \"select_a_country\": \"Select a Country\",\n        \"select_a_state\": \"Select a State\",\n        \"estimate_shipping\": \"Estimate Shipping\"\n    }\n   },\n}\n```"
                      }
                    ]
                  }
                },
                {
                  "title": "Invoking Translation Keys",
                  "route": {
                    "path": "/invoking-translation-keys"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Invoking Translation Keys</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#invoking_translation\">Translation Syntax</a></li>\n    <li><a href=\"#invoking_video\">Video Demo/a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Translation Syntax\n\nOnce keys and values are defined in the appropriate .json translation files, you invoke dynamic translation strings using the Stencil framework’s `{{lang}}` custom Handlebars helper. Your invocation would follow this generic format:\n\n`{{lang \"translation.key\" optionalVariable=”someValue”}}`\n\nHere is how this works. In a non-internationalized theme, a storefront page might include a static/dynamic string like this:\n\n`<a href=\"{{ urls.account }}\">Welcome Back <span>{{ customer.name }}</span></a>`\n\nThe corresponding internationalized version – ready to work with any language – would substitute the fully dynamic `{{ lang... }}` Handlebars helper shown below:\n\n`<a href=\"{{ urls.account }}\">{{ lang \"header.welcome_back\" name=customer.name }}</a>`",
                        "header": {
                          "anchor": "invoking_translation"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Video Demo\n\nWatch a video demonstration of how JSON translation files' key/value pairs interact with your templates' Handlebars statements to localize your storefront pages: \n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ygiRGfSrmnA\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>",
                        "header": {
                          "anchor": "invoking_video"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "body": "Be sure to set permission 644 (rw-r–r–) on any new translation files that you add. Without these permissions, running your theme locally will fail, with multiple error messages. Bundling your theme will also fail, blocking its upload to a store.",
                          "type": "warning",
                          "title": "File Permissions Required"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Features Supported",
                  "route": {
                    "path": "/features-supported"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Features Supported</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#implementation_cornerstone-example\">Automatic Language Detection</a></li>\n    <li><a href=\"#implementation_cornerstone-example\">Cascading Translations</a></li>\n\t\t<li><a href=\"#implementation_cornerstone-example\">Nested Plurality and Gender Support</a></li>\n\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "The .json translation files are loaded and parsed as UTF-8, so they should support virtually any natural language. The schema also supports the following features:"
                      },
                      {
                        "type": "text",
                        "data": "## Automatic Language Detection\n\nThe Stencil framework can automatically detect a localized language, based on the active shopper’s `\"Accept‑Language\"` header."
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Cascading Translations\n\nCascading works as follows: Assume that a Quebec/French-Canadian customer visits a storefront built with both `fr.json` and `fr‑CA.json` localization files. The framework places the `fr‑CA` locale \"on top of\" the base `fr locale`. Therefore, any strings missing from the `fr‑CA.json` file will “fall back” to definitions in the base `fr.json file`, providing at least approximate translations. This cascading works generally across languages and locales."
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Nested Plurality and Gender Support\nThe framework allows you to code conditional plurality for strings within each translation file. For example, your code within an English-language file could overload a single message to display in each of the following forms – depending on the actual value of its two numeric variables:\n\n* \"There are 3 items in 2 categories\"\n* \"There is 1 item in 2 categories\"\n* \"There are 2 items in 1 category\"\n\nHere is the markup that would handle the first three words in each example above, assuming appropriate parameters were inserted in the translation files:\n\n```\n<h2 class=\"modal-header-title\">\n   {{lang 'cart.added_to_cart.what_next' num_products=cart.quantity}} [...]\n</h2>\n```\n\nSimilarly, the framework supports per-language conditional coding of appropriate genders for pronouns and nouns."
                      }
                    ]
                  }
                },
                {
                  "title": "Implementation Example",
                  "route": {
                    "path": "/implementation-example"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Implementation Example</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#implementation_cornerstone-example\">Cornerstone Implementation Example</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "Here is an example based on this file within Cornerstone:\n`cornerstone/templates/components/cart/shipping-estimator.html`\n\nIn the excerpt below, each highlighted `{{lang...}}` statement is a Handlebars helper. Each of the statements abstracts the message indicated by its (English-language) key name to enable internationalization of that message:\n\n```\n<div class=\"shipping-estimator\" style=\"display: none;\">\n    <form class=\"estimator-form\">\n      <button class=\"shipping-estimate-hide\">{{lang 'cancel'}}</button>\n      <select name=\"shipping-country\">\n      <option>{{lang 'cart.shipping_estimator.select_a_country'}}</option>\n      {{#each countries}}\n          <option value=\"{{id}}\" {{#if selected}}selected=\"selected\"{{/if}}>\n                {{name}}\n          </option>\n      {{/each}}\n      </select>\n      <select name=\"shipping-state\">\n      <option>{{lang 'cart.shipping_estimator.select_a_state'}}</option>\n      {{#each states}}\n          <option value=\"{{id}}\" {{#if selected}}selected=\"selected\"{{/if}}>\n              {{name}}\n          </option>\n      {{/each}}\n      </select>\n      <input type=\"text\" name=\"shipping-zip\" value=\"{{selected_zip}}\">\n      <button class=\"shipping-estimate-submit\">{{lang 'cart.shipping_estimator.estimate_shipping'}}\n      </button>\n    </form>\n    <div class=\"shipping-quotes\"></div>\n</div>\n\n```\n\n\nIn the excerpts below, you can see that the default theme’s basic `.../lang/en.json` file includes matches, and value definitions, for each of the translation keys in the Handlebars helpers above:\n\n\n```\n{\n  \"header\": {\n        \"welcome_back\": \"Welcome back, {name}\"\n  },\n  ...\n      \"label\": \"Cart\",\n        \"is_empty\": \"Your cart is empty\",\n        \"coupon_code\": \"Coupon Code\",\n        \"gift_certificate\": \"Gift Certificate\",\n        \"freeshipping\": \"Free Shipping\",\n        \"shipping_peritem\": \"Per Item Shipping\",\n      \"shipping_estimator\": {\n            \"add_info\": \"Add Info\",\n          \"select_a_country\": \"Select a Country\",\n          \"select_a_state\": \"Select a State\",\n          \"estimate_shipping\": \"Estimate Shipping\"\n      }\n  },\n  \"common\": {\n        \"currency_converter\": \"Currency Converter\",\n        \"newsletter_signup\": \"Sign up for our newsletter\",\n        \"form_submit\": \"Submit\",\n        \"required\": \"Required\",\n        \"email_address\": \"Email Address\",\n      \"edit\": \"Edit\",\n      \"no\": \"No\",\n      \"yes\": \"Yes\",\n      \"cancel\": \"Cancel\",\n      \"share\": \"Share\",\n      \"delete\": \"Delete\",\n      \"public\": \"Public\",\n        \"private\": \"Private\",\n        \"view_all\": \"View All\",\n        \"paginator\": {\n            \"page_of\": \"Page {current} of {total}\"\n      },\n      ...\n```\n\n\nTranslation files for other languages would use the same format, to define these keys’ values in their respective languages.",
                        "header": {
                          "anchor": "#implementation_cornerstone-example"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Shipping Your Theme",
            "route": {
              "path": "/shipping-your-theme"
            },
            "data": {
              "children": [
                {
                  "title": "Sizing Your Theme",
                  "route": {
                    "path": "/sizing-your-theme"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Sizing Your Theme</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#sizing_sizing-your-theme\">Sizing Your Theme</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Sizing Your Theme\n\nYour theme should ideally bundle into an archive of only a few megabytes. BigCommerce imposes a hard limit of 50 MB, but most themes do not approach this limit unless they include many large static assets.\n\nIf your theme is unlikely to exceed 50 MB, you can skip past jump directly to [Bundling and Submitting a Theme]().\n\nA few themes, however, might exceed the 50 MB limit. In these cases, you can either\n[Shrink Your Theme with the help of WebDAV]() or [Stage Your Theme for CDN Delivery]() to restructure your theme to a size that's manageable for upload to BigCommerce.",
                        "header": {
                          "anchor": "sizing_sizing-your-theme"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Shrinking Your Theme ",
                  "route": {
                    "path": "/shrinking-your-theme"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Shrinking Your Theme by Excluding Static Assets Using WebDAV</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#shrinking_restructuring\">Restructuring Your Theme</a></li>\n    <li><a href=\"#shrinking_webdav-folders\">WebDAV Folders and Stencil Themes</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Restructuring Your Theme\n\nIn this section, you will first isolate static assets from your theme's local directory, then use WebDAV to cloud-host those assets, and finally reference those assets using Stencil's cdn Handlebars helper.\nFor an existing theme, make a backup of your whole <theme‑name> directory before proceeding.\n\nExamine your theme's `/assets/` subdirectory and/or its intended contents. Check for large static assets like images (especially in `/assets/img/`) and videos that are likely culprits in causing a bundled `.zip` file to go toward or beyond BigCommerce's 50 MB limit.\n\nUse WebDAV to upload these items to WebDAV's remote `/content/` directory. For WebDAV specifics, please see BigCommerce's Knowledge Base articles on:\n* [Connecting to WebDav]()\n* [WebDAV Folder Structure]()\n\nThroughout your theme, reference each of these assets using Stencil's `cdn` custom Handlebars helper – prepending the `webdav:` option to the `assetPath` parameter.\n\nPrepending `webdav:` will build a URL in the remote WebDAV directory. This allows your theme's deployed topology to diverge from any your local directory structure. As noted above, the `cdn` helper will treat `/content/` as the default/root WebDAV directory. So, for example, this statement:\n\n`<img src=\"{{cdn \"webdav:img/image.jpg\"}}\">`\n\nwill build the URL transformed below:\n\n`<img src=\"https://cdn.bcapp/3dsf74g/content/img/image.jpg\">`\n\nOn your local machine, move the large static assets to a location where the `stencil bundle` command will ignore them.\nThis can be a location outside your `<theme-name>` directory, or it can be the `<theme-name>/assets/cdn/ subdirectory`, which stencil bundle excludes from bundling. Separating these assets is necessary to exclude them from the next step.\n\nRun or re-run the `stencil bundle` command, from inside your streamlined `<theme‑name>` directory.\nOnce your resulting `.zip` file is 50 MB or smaller, upload it to BigCommerce, as described [here]().\n",
                        "header": {
                          "anchor": "shrinking_restructuring"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "type": "warning",
                          "body": "Both in production and locally, subdirectories of your theme's `assets/` directory – like `img/`,` js/`, and `fonts/` – are parallel to its `scss/` subdirectory. So within your CSS, path references to such assets should reflect this parallel relationship – for example: `../img/test.jpg`.",
                          "title": "URL References to Assets"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## WebDAV Folders and Stencil Themes\n\nIf you have used WebDAV in developing BigCommerce's earlier (Blueprint) generation of themes, you will see some differences when uploading Stencil themes.<br><br>\n\nThe directories accessible through WebDAV will dynamically change, depending on the type of theme that is active in the merchant's store, as follows:<p></p>\n\n<table>\n  <tr>\n    <td><b>Available while the merchant's active theme is Blueprint:</b></td>\n    <td class=\"\"><b>Available while the merchant's active\n      theme is Stencil:</b></td>\n  </tr>\n  <tr>\n    <td>/content/</td>\n    <td>/content/</td>\n  </tr>\n  <tr>\n    <td>/product_images/</td>\n    <td>/product_images/</td>\n  </tr>\n  <tr>\n    <td>/product_downloads/</td>\n    <td>/product_downloads/</td>\n  </tr>\n  <tr>\n    <td>/import_files/</td>\n    <td>/import_files/</td>\n  </tr>\n  <tr>\n    <td>/exports/</td>\n    <td>/exports/</td>\n  </tr>\n  <tr>\n    <td>/template/</td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>/mobile_template/</td>\n    <td>-</td>\n  </tr>\n </table>\n\n<i>The overall difference is that the WebDAV `/template/` and `/mobile_template/` directories are <b>not</b> available for Stencil themes. These templates must reside and remain within your Stencil theme's local directory and file structure.</i>",
                        "header": {
                          "anchor": "shrinking_webdav-folders"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Staging A Theme for CDN Delivery",
                  "route": {
                    "path": "/staging-a-theme"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Staging A Theme for CDN Delivery</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#staging_sizing-your-theme\">Organizing Your Theme</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Organizing Your Theme\n\nFor themes that would otherwise exceed BigCommerce's 50 MB limit on uploads, delivering your theme's large static assets via a CDN (content delivery network) is an alternative to the simpler WebDAV approach.\n\nThe advantage of this alternative is that all assets stay within your theme's directory, so your theme's local structure matches its deployed structure. The disadvantage is that the procedure outlined below requires the expense of a CDN.\n\nTo stage your theme for CDN delivery, you would locally store your large static assets within your theme's\n`<theme-name>/assets/cdn/` subdirectory. By design, the `stencil bundle` command omits this subdirectory's contents. So those contents do not count against the 50 MB limit on the resulting `.zip` file.\n\nThen, as you develop your theme, reference each of these assets using Stencil's `cdn` custom Handlebars helper, like below:\n\n`<img src=\"{{cdn \"webdav:img/image.jpg\"}}\">`\n\n**Note:** _The presumed WebDAV root directory is /content/. (So, in this example, the `image.jpg` file had been uploaded to the WebDAV `/content/` directory.) The presumed local directory is `<theme-name>/assets/`, so you can omit that path when referencing its contained files or subdirectories._\n\nWhen you are ready to upload your theme to BigCommerce, follow the procedure in [Bundling and Submitting a Theme](/stencil-docs/shipping-a-theme/bundling-and-submitting)."
                      }
                    ]
                  }
                },
                {
                  "title": "Bundling and Submitting a Theme",
                  "route": {
                    "path": "/bundling-and-submitting"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Bundling and Submitting a Theme</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#bundling_confirm-dependencies\">Confirm Dependencies</a></li>\n    <li><a href=\"#bundling_verify-directory\">Verify Directory and File Permissions</a></li>\n    <li><a href=\"#bundling_bundling-your-theme\">Bundling Your Theme</a></li>\n    <li><a href=\"#bundling_uploading-theme\">Uploading Your Theme</a></li>\n\t</ul>\n</div>\n\n\n\n\n\n\n\n\n"
                      },
                      {
                        "type": "text",
                        "data": "## Confirm Dependencies\n\nIf you have customized a theme originally downloaded from the BigCommerce Theme Marketplace: Before you package your theme, make sure your theme directory includes all the dependencies that BigCommerce requires for submission. \n\nFollow the link for your scenario:\n\nIf you downloaded a refreshed version of Stencil's default Cornerstone theme: Run `npm install` in the theme directory to install refreshed JavaScript dependencies, as outlined in [Installing Stencil](/stencil-docs/getting-started/installing-stencil#installing_installing-stencils-js-utilities).\n\nIf you downloaded a different Marketplace theme, and its [version was lower than 1.10.0]():\nYou must also run `jspm install` in the theme directory.",
                        "header": {
                          "anchor": "bundling_confirm-dependencies"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "body": "The `stencil bundle` and `stencil push` commands do not check for the dependencies that these build systems install. So if those dependencies are missing, these commands will not immediately report errors. However, your resulting .zip file will not properly upload to BigCommerce, and will not run properly on a storefront.",
                          "title": "No Automatic Check for Dependencies",
                          "type": "warning"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Verify Directory and File Permissions\n\nIf you have added any new subdirectories or files to your base theme, verify that you have:\n\nSet newly added directories to permission `755` (`drwxr-xr-x`).\nSet newly added files to permission `644` (`rw-r--r--`).",
                        "header": {
                          "anchor": "bundling_verify-directory"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "body": "Without these permissions, bundling your theme will fail, blocking its upload to BigCommerce.",
                          "title": "Writable Permissions Are Required",
                          "type": "warning"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Bundling Your Theme\n\nOnce you have verified the requirements above, you are ready to process and package your theme for upload to BigCommerce. Stencil CLI provides two options for creating a `.zip` file that contains all of your theme's essentials, while excluding redundant components. The options are either only bundling your theme, or bundling and pushing your theme. These options are available depending on how you've [authorized](/stencil-docs/getting-started/launching-stencil/authorizing-and-initializing) your theme:\n\n### Bundle Only \n\nThe `stencil bundle` command is available for all themes, whether they were initialized using OAuth or Basic-Auth tokens. To use it, just enter the following on your command line:\n\n`stencil bundle`\n\nThe `bundle` command will notify you of its progress and completion.\n\n\n####  Check/Adjust Zipfile's Size\n\nCheck the resulting `.zip` file's size before you proceed. The zipped bundle should be only a few megabytes. BigCommerce imposes a hard limit of 50 MB, and any file size approaching that is problematic. If your `.zip` file fits comfortably within the size limit above, jump directly to [Uploading Your Theme](bundling_uploading-your-theme). However, if your `.zip` file approaches or exceeds 50 MB, you must first use one of these procedures to restructure your theme to a size that's manageable for upload to BigCommerce:\n\n* [Shrinking Your Theme by Excluding Static Assets (WebDAV)]()\n* [Staging a Theme for CDN Delivery]()\n\n\n### Bundle and Push \n\nThe `stencil push` command is available only for themes that you have successfully initialized using an OAuth token (with `Themes:modify scope`). This command bundles your theme and uploads it to the associated store, in one continuous process.\n\nFor further requirements and usage details, please see the _Command-Line Upload_ in [Uploading Your Theme](bundling_uploading-your-theme) below.\n\nFor file-size error diagnostics and workarounds, please _Check/Adjust Zipfile's Size_ above.\n\n### Software Requirements / Resolving Lint Errors\n\n* Only use the `stencil bundle` or the `stencil push` command to process and package themes for submission. These commands generate `.zip` files that match BigCommerce's expected structure. They also generate metadata required for your theme to function properly.\n\n* Do not create `.zip` files using general-purpose archiving software. The resulting files will trigger errors upon upload to BigCommerce.\n\n* Do not open a bundled theme `.zip` file to add, delete, rename, or update files. Doing so will make your theme unusable on the production store.\n\n* If bundling your theme triggers multiple lint errors related to the `bundle.js` file, then your theme is missing the `.eslintignore` file. Please retrieve this file from the [Stencil Cornerstone repo](https://github.com/bigcommerce/cornerstone/blob/master/.eslintignore), then re-run `stencil bundle` or `stencil push`.\n",
                        "header": {
                          "anchor": "bundling_bundling-your-theme"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Uploading Your Theme\n\nBigCommerce provides two alternatives for uploading a theme to its associated BigCommerce store. You can perform either a Control Panel Upload, or a Command Line Upload. These options are available depending on how you've authorized your theme:\n\n### Control-Panel Upload (OAuth or Basic Auth)\n\nUploading your theme via the BigCommerce control panel's GUI is compatible with any store token (whether OAuth or Basic-Auth), and with any OAuth token scope, and with all versions of Stencil CLI. However, this option requires that you first use stencil bundle to package your theme into a .zip file. (Prepare your file according to Bundle Only above.)\n\nFor the upload steps in the control panel, see the [Uploading Custom Themes]() article in our Knowledge Base. \n\nFor error codes that you might encounter when uploading a theme – and corresponding workarounds, see [Troubleshooting Theme Uploads]().\n\n### Command-Line Upload (OAuth Required)\n\nThe stencil push command allows you to both bundle your theme and upload it to the store, with a single terminal command. To run stencil push, you must first:\n\nSuccessfully initialize your theme using an OAuth token that was created with the Themes:modify scope.\nInstall Stencil CLI version 1.12.0 or higher.\n\nTo check your current Stencil CLI version, enter `stencil --version` or `stencil -V` on the command line. If you need to update an earlier version, reinstall Stencil CLI.\n\n### Pushing a Theme Upload\n\nTo initiate bundling and upload, enter the following on the command line:\n\n`stencil push`\n\nStencil CLI is designed to display the same notifications, prompts, and selection options that you would receive when using the control panel's GUI. Below are some of the notifications and interactions you might see.\n\n### Successful Bundling\n\nStencil CLI will display `ok` confirmations, or `not ok` errors, or `warnings` for individual substeps in bundling and uploading your theme. If bundling is successful, you will next see a `Processing` progress bar to track the upload.",
                        "header": {
                          "anchor": "bundling_uploading-your-theme"
                        }
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539055887301"
                      },
                      {
                        "type": "text",
                        "data": "### Successful Upload\n\nUpon a successful upload, you will be prompted: `Would you like to apply your theme to your store at <storehash>? (y/N)` Any response except `y` or `Y` will be processed as \"No.\" You can always apply the theme later through the control panel.\n\n### Apply Which Variation?\n\nIf you chose to apply the newly uploaded theme, you will be prompted: `Which variation would you like to apply? (Use arrow keys)`"
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539055910721"
                      },
                      {
                        "type": "text",
                        "data": "Use your arrow keys to move the selection caret/highlight to the variation you want, and then press `Enter`.\n\nStencil CLI will then confirm which variation is active on the storefront."
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539055915081"
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Theme Quota Warning\n\nIf you run `stencil push` when your store's `My Themes` section has reached its [maximum of 20 themes](), you will be prompted to select at least one existing theme for deletion.\n\n",
                        "header": {
                          "anchor": "bunding_theme-quota"
                        }
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539055988142"
                      },
                      {
                        "type": "text",
                        "data": "Custom themes – which are available for selection – will have a circle to their left. Marketplace themes and the store's active theme – all of which are protected from deletion – will be flagged `(Disabled)`.\n\nUse your arrow keys to move the selection caret to each theme/version that you want to select. Then press the spacebar to select it. (Filled circles will indicate your selected themes/versions.)\n\nIf you are certain of your selections, you can next press `Enter` to delete the themes.\n\n"
                      },
                      {
                        "type": "callout",
                        "data": {
                          "body": "Once you press `Enter`, the selected themes will be deleted immediately, with no further confirmation.\n\nIf you have any doubts – especially about deleting multiple themes/versions – it is safest to delete them through the control panel GUI. This GUI allows you to compare uploaded versions, and to inspect their metadata.",
                          "title": " Select Carefully – No Confirmation",
                          "type": "error"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Other Bundling or Upload Errors\n\nFor any other `not ok` bundling or upload errors that you receive, please refer to these debugging guidelines Theme setup and sizing diagnostics in preceding sections throughout this page, or the following article titled [Troubleshooting Theme Uploads]().",
                        "header": {
                          "anchor": "bundling_other-bundling"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Adding ReCAPTCHA V2",
                  "route": {
                    "path": "/adding-recaptcha-v2"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Adding ReCAPTCHA V2</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#adding-recaptcha_better-spam-deterrence\">Better Spam Deterrence</a></li>\n    <li><a href=\"#adding-recaptcha_preloaded-themes\">Preloaded Themes</a></li>\n    <li><a href=\"#adding-recaptcha_how-to-upgrade\">How to Upgrade</a></li>\n\t</ul>\n</div>\n\n\n\n\n"
                      },
                      {
                        "type": "text",
                        "data": "## Better Spam Deterrence\n\nreCAPTCHA v1 was deprecated as of March 31, 2018.\nTo deter spam submission through storefront forms, BigCommerce now supports Google reCAPTCHA v2 challenges, to distinguish human customers/visitors from automated bots. We recommend that all storefront themes take advantage of this upgraded bot detection."
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Themes that Already Incorporate reCAPTCHA V2\n\nIf you have based your theme on a theme/version that already incorporates reCAPTCHA v2, you do not need to take any further action. Compliant themes/versions currently include:\n\n* Cornerstone 1.6.1 or higher\n* 22 Savile Row (all versions)\n* Arcade 1.13.0 or higher\n* Atelier 1.10.1 or higher\n* Bazaar 1.0.1 or higher\n* Capacity 1.12.0 or higher\n* Chelsea 1.12.0 or higher\n* Diamond 1.0.5 or higher\n* Exhibit 1.10.4 or higher\n* Flagship 1.10.6 or higher\n* Fortune 1.12.1 or higher\n* Foundry 1.10.1 or higher\n* Geneva 1.10.1 or higher\n* Hero 1.11.1 or higher\n* Lookbook 1.10.3 or higher\n* Merchant 1.12.0 or higher\n* Mogul 1.0.7 or higher\n* Parts Warehouse (all versions)\n* Peak 1.11.4 or higher\n* Prosper 1.10.2 or higher\n* Queen 1.0.3 or higher\n* Runway 1.11.2 or higher\n* Scales 1.0.2 or higher\n* Showroom 1.12.0 or higher\n* Soho 1.11.1 or higher\n* Solo 1.10.3 or higher\n* Spotlight 1.11.0 or higher\n* Supermarket (all versions)\n* Touch 1.0.1 or higher\n* Venture 1.11.4 or higher\n\nHowever, if your theme is built on an earlier version of these themes, or on a different base theme, follow the updating instructions in How to Upgrade below."
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## How to Upgrade\n\nTo add reCAPTCHA v2 support to a theme, you will need to update script references in three template files:\n\n* [Create-Account Template](https://github.com/bigcommerce/cornerstone/pull/951/files#diff-ecbae6e2b7d5bbf5c950d68878e79d99)\n* [Write-Review Template](https://github.com/bigcommerce/cornerstone/pull/951/files#diff-945a5d7f1563068188ae39df568cfd43)\n* [Contact-Us Template](https://github.com/bigcommerce/cornerstone/pull/951/files#diff-5351402159301e1c225752f03d9f1f8e)\n\nSee [PR #951 on the Cornerstone Github Repository](https://github.com/bigcommerce/cornerstone/pull/951/files) to see differential for each of the files that need to be modified and how."
                      }
                    ]
                  }
                },
                {
                  "title": "Troubleshooting Theme Uploads",
                  "route": {
                    "path": "/troubleshooting-theme-uploads"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Troubleshooting Theme Uploads</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#troubleshooting-theme-uploads_restrictions\">Restrictions</a></li>\n    <li><a href=\"#troubleshooting-theme-uploads_error-codes\">Error Codes</a></li>\n    <li><a href=\"#troubleshooting-theme-uploads_warnings\">Warnings</a></li>\n    <li><a href=\"#troubleshooting-theme-uploads_workarounds\">Workarounds and Further Info</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Restrictions\n\nCustom theme uploads must meet these restrictions:\n\n* You may upload a maximum of 20 custom themes at a time to the control panel's `Store Design` > `My Themes` section.\n\n* If you reach this maximum, you can delete custom themes to make room for more uploads.\n\n* Before uploading, you must package custom themes into a Stencil-specific `.zip` file format, using Stencil CLI's `stencil bundle` command.\n\n* A theme's `.zip` file must be no larger than 50 MB. If your file exceeds that size, please use either a WebDAV or a CDN upload to exclude large static assets.",
                        "header": {
                          "anchor": "troubleshooting-theme-uploads_restrictions"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Error Codes\n\n<table>\n  <tr>\n    <th>Error Code</th>\n    <th>Meaning</th>\n  </tr>\n  <tr>\n    <td>TR-100, -101, -700, -1200, -1300</td>\n    <td>A server error occurred.</td>\n  </tr>\n  <tr>\n    <td>TR-200</td>\n    <td>Problem uploading the theme.</td>\n  </tr>\n  <tr>\n    <td>TR-300</td>\n    <td>Invalid .zip file. (Among other possible root causes, this can indicate an included <code>bundle.js.map</code> source-map file that exceeds its size limit of 5 MB. As a workaround, move this file outside your theme directory before re-running <code>stencil bundle</code>).</td>\n  </tr>\n  <tr>\n    <td>TR-301</td>\n    <td>Failed to unzip file.</td>\n  </tr>\n  <tr>\n    <td>TR-400</td>\n    <td>The .zip contains restricted/invalid file(s) - e.g., a file with an invalid extension.</td>\n  </tr>\n  <tr>\n    <td>TR-500</td>\n    <td>The .zip file is larger than the 50MB limit.</td>\n  </tr>\n  <tr>\n    <td>TR-600</td>\n    <td>The .zip file is missing a required file (<code>theme-name/templates/pages/home.html</code>).</td>\n  </tr>\n  <tr>\n    <td>TR-601</td>\n    <td>The .zip file is missing some parsed template file(s); or, one or more non-<code>.html</code> files are present in the <code>theme-name/templates/</code></nobr> subdirectory.</td>\n  </tr>\n  <tr>\n    <td>TR-800</td>\n    <td>There was a problem processing the contained config.json file. <b>Please check the config.json documentation for required keys and for keys that require values.</b></td>\n  </tr>\n  <tr>\n    <td>TR-900</td>\n    <td>The contained config.json file is missing required developer information.</td>\n  </tr>\n  <tr>\n    <td>TR-901</td>\n    <td>A theme variation defined in the contained config.json file is missing its required external ID.</td>\n  </tr>\n  <tr>\n    <td>TR-902</td>\n    <td>Two or more theme variations defined in the contained config.json file share a external ID. All external IDs must be unique.</td>\n  </tr>\n  <tr>\n    <td>TR-1000</td>\n    <td>There was a problem processing the contained <a href=\"/docs/schemajson-metadata-for-theme-editor\">schema.json</a> file.</td>\n  </tr>\n  <tr>\n    <td>TR-1001</td>\n    <td>The theme is missing its required <a href=\"/docs/schemajson-metadata-for-theme-editor\">schema.json</a> file.</td>\n  </tr>\n  <tr>\n    <td class=\"\">TR-1400</td>\n    <td class=\"\">There was a problem processing template <a href=\"/docs/using-yaml-front-matter\">front matter</a>.</td>\n  </tr>\n  <tr>\n    <td>TR-1401</td>\n    <td>There was a database validation error when saving <a href=\"/docs/using-yaml-front-matter\">front matter</a> to the database.</td>\n  </tr>\n  <tr>\n    <td>TR-1500</td>\n    <td>There was a problem uploading your files, due to multi-threading (multiple simultaneous uploads). Please try again.</td>\n  </tr>\n  <tr>\n    <td>TR-1600</td>\n    <td>There was a temporary problem on our system. Please try again.</td>\n  </tr>\n  <tr>\n    <td>TR-1601</td>\n    <td>There was a problem processing screenshots.</td>\n  </tr>\n  <tr>\n    <td>TR-1700, -1800, -1801, -1802, -1803</td>\n    <td>System error, possibly temporary. Please try again.</td>\n  </tr>\n  <tr>\n    <td>TR-3402</td>\n    <td>You are not allowed to edit your active theme. [Please select <code>Make a Copy</code>, then edit the resulting copy of your theme.]</td>\n  </tr>\n  <tr>\n    <td>TR-4400</td>\n    <td>One or more values in the <code>config.json</code> file exceed the 64-character limit. (Can also indicate string lengths that exceed their limits in other JSON files.)</td>\n  </tr>\n </table>\n",
                        "header": {
                          "anchor": "troubleshooting-theme-uploads_error-codes"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Warnings\n\nWarnings will not block a theme's upload, but these onscreen and/or log messages notify you of problems within the zipped theme. Here are the warnings and their meanings:\n\n| Warning |\n|---|\n| (These messages do not have numeric codes) |\n| Issue in processing this theme's thumbnail screenshot (`composed_image`). |\n| Issue in processing this theme's full-size screenshot (`desktop_screenshot`). |\n| Issue in processing this theme's mobile [screenshot](/docs/configjson-reference#config-var-meta) (`mobile_screenshot`). |\n| Missing file: This theme does not support Theme Editor, as it is missing its required `[schema.json]` file. |\n| One or more of this theme's screenshots are not image files. |\n| Theme is missing a valid thumbnail image `composed_image`). |\n| Theme is missing a valid full-size image `desktop_screenshot`). |\n| Theme is missing a valid mobile image (`mobile_screenshot`). |\n| One or more of this theme's images is not of a supported file type. Valid filetypes are: `.jpg`, `.jpeg`, `.png`, `.gif`. |\n| Thumbnail (`composed_image`) image dimensions are not right. Expected 600 x 760 pixels. |\n| Full-size (`desktop_screenshot`) image dimensions are not right. Expected 2048 x 2600 pixels. |\n| Mobile (`mobile_screenshot`) image dimensions are not right. Expected 304 x 540 pixels. |\n| Too-large image file size for a theme screenshot `composed_image` (thumbnails), `desktop_screenshot`, or `mobile_screenshot`] . The maximum supported size is x, but the file's actual size is y. |",
                        "header": {
                          "anchor": "troubleshooting-theme-uploads_warnings"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Workarounds and Further Info\n\nIf a custom theme does not render properly after you upload and apply it to a storefront, make sure you have created the theme's `.zip` file using the `stencil bundle` command, on a Mac OS, Linux computer, or virtual machine. This will exclude Windows-specific errors that have occurred on some bundles.\n\nIf you repeatedly encounter the same error or warning and neither this page nor our KB resolves the problem, see support resources for theme developers in our [Developer Community](https://forum.bigcommerce.com/s/group/0F913000000HLjECAW/bigcommerce-developers).",
                        "header": {
                          "anchor": "troubleshooting-theme-uploads_workarounds"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        "blocks": [
          {
            "type": "html",
            "data": "<div class=\"cBrCommunityTheme\" style=\"display:block;\">\n  <div class=\"body-inner main-content\">\n    <div class=\"wrapper-for-sticky-footer-structure bg-x3lightgrey\">\n      <div class=\"header-pad\"></div>\n      <div>\n        <div class=\"siteforceContentArea\">\n          <div class=\"ui-widget\">\n            <div class=\"content-wrap\">\n              <div style=\"padding: 62px 0px 70px;background: url(&#x22;https://cdn6.bigcommerce.com/s-qtmbtj/product_images/uploaded_images/hero-bg.png&#x22;) center bottom no-repeat;background-repeat: repeat-x;background-position-y: 50%;\">\n                <div class=\"container\">\n                  <h1 class=\"h1 panel-title__text\">Stencil Documentation</h1>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div><!-- landing tiles -->\n        <div class=\"container siteforceContentArea\" style=\"margin-top: 10%; margin-bottom: 5%;\">\n          <div data-region-name=\"landingTiles\">\n            <div class=\"ui-widget\">\n              <div class=\"lift-content cBrLandingTiles\">\n                <div>\n                  <div class=\"container\">\n                    <div class=\"row row--pad\" style=\"background-color: #F6F7F9;\">\n                      <div class=\"column-md-12 column-lg-6 column--pad m-bottom-25\">\n                        <div class=\"panel-media\" id=\"community\">\n                          <div class=\"panel-media__wrap-icon\">\n                            <div class=\"panel-media__icon\">\n                              <img alt=\"\" src=\"https://via.placeholder.com/350x350\" srcset=\"https://via.placeholder.com/350x350\">\n                            </div>\n                          </div>\n                          <div class=\"panel-media__wrap-content\">\n                            <h4 class=\"h4 panel-media__title\"><a href=\"/api-docs/catalog/products/products-overview\">Getting Started</a></h4>\n                            <p class=\"panel-media__text type--sm\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent sed dictum sem. Nulla eu pellentesque erat. Fusce vitae purus vel tortor molestie pulvinar.</p>\n                          </div>\n                        </div>\n                      </div>\n                      <div class=\"column-md-12 column-lg-6 column--pad m-bottom-25\">\n                        <div class=\"panel-media\" id=\"blog\">\n                          <div class=\"panel-media__wrap-icon\">\n                            <div class=\"panel-media__icon\">\n                              <img alt=\"\" src=\"https://via.placeholder.com/350x350\" srcset=\"https://via.placeholder.com/350x350\">\n                            </div>\n                          </div>\n                          <div class=\"panel-media__wrap-content\">\n                            <h4 class=\"h4 panel-media__title\"><a href=\"/api-docs/api-reference\">Webhooks</a></h4>\n                            <p class=\"panel-media__text type--sm\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent sed dictum sem. Nulla eu pellentesque erat. Fusce vitae purus vel tortor molestie pulvinar.</p>\n                          </div>\n                        </div>\n                      </div>\n                      <div class=\"column-md-12 column-lg-6 column--pad m-bottom-25\">\n                        <div class=\"panel-media\" id=\"ideas\">\n                          <div class=\"panel-media__wrap-icon\">\n                            <div class=\"panel-media__icon\">\n                              <img alt=\"\" src=\"https://via.placeholder.com/350x350\" srcset=\"https://via.placeholder.com/350x350\">\n                            </div>\n                          </div>\n                          <div class=\"panel-media__wrap-content\">\n                            <h4 class=\"h4 panel-media__title\"><a href=\"/api-docs/getting-started/webhooks/about-webhooks\">Orders</a></h4>\n                            <p class=\"panel-media__text type--sm\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent sed dictum sem. Nulla eu pellentesque erat. Fusce vitae purus vel tortor molestie pulvinar.</p>\n                          </div>\n                        </div>\n                      </div>\n                      <div class=\"column-md-12 column-lg-6 column--pad m-bottom-25\">\n                        <div class=\"panel-media\" id=\"community\">\n                          <div class=\"panel-media__wrap-icon\">\n                            <div class=\"panel-media__icon\">\n                              <img alt=\"\" src=\"https://via.placeholder.com/350x350\" srcset=\"https://via.placeholder.com/350x350\">\n                            </div>\n                          </div>\n                          <div class=\"panel-media__wrap-content\">\n                            <h4 class=\"h4 panel-media__title\"><a href=\"/stencil-docs\">Storefront API's</a></h4>\n                            <p class=\"panel-media__text type--sm\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent sed dictum sem. Nulla eu pellentesque erat. Fusce vitae purus vel tortor molestie pulvinar.</p>\n                          </div>\n                        </div>\n                      </div>\n                      <div class=\"column-md-12 column-lg-6 column--pad m-bottom-25\">\n                        <div class=\"panel-media\" id=\"community\">\n                          <div class=\"panel-media__wrap-icon\">\n                            <div class=\"panel-media__icon\">\n                              <img alt=\"\" src=\"https://via.placeholder.com/350x350\" srcset=\"https://via.placeholder.com/350x350\">\n                            </div>\n                          </div>\n                          <div class=\"panel-media__wrap-content\">\n                            <h4 class=\"h4 panel-media__title\"><a href=\"/stencil-docs\">Catalog Products</a></h4>\n                            <p class=\"panel-media__text type--sm\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent sed dictum sem. Nulla eu pellentesque erat. Fusce vitae purus vel tortor molestie pulvinar.</p>\n                          </div>\n                        </div>\n                      </div>\n                      <div class=\"column-md-12 column-lg-6 column--pad\">\n                        <div class=\"panel-media\" id=\"community\">\n                          <div class=\"panel-media__wrap-icon\">\n                            <div class=\"panel-media__icon\">\n                              <img alt=\"\" src=\"https://via.placeholder.com/350x350\" srcset=\"https://via.placeholder.com/350x350\">\n                            </div>\n                          </div>\n                          <div class=\"panel-media__wrap-content\">\n                            <h4 class=\"h4 panel-media__title\"><a href=\"/stencil-docs\">List Your App</a></h4>\n                            <p class=\"panel-media__text type--sm\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent sed dictum sem. Nulla eu pellentesque erat. Fusce vitae purus vel tortor molestie pulvinar.</p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"empty-block-for-sticky-footer\"></div>\n        </div>\n        <footer class=\"footer\">\n          <div class=\"footer__top\">\n            <div class=\"container\">\n              <div class=\"footer__wrap-menu clr\" style=\"padding-left: 3%;\">\n                <ul class=\"footer__menu\">\n\t<li class=\"footer__menu-item\"><a class=\"footer__menu-link\" href=\"https://status.bigcommerce.com/\">API Status</a></li>\n                  <li class=\"footer__menu-item\"><a class=\"footer__menu-link\" href=\"https://www.bigcommerce.com/partners/\">Become a Partner</a></li>\n                  <li class=\"footer__menu-item\"><a class=\"footer__menu-link\" href=\"https://www.bigcommerce.com/partners/affiliates/\">Become an Affiliate</a></li>\n                  \n<li class=\"footer__menu-item\"><a class=\"footer__menu-link\" href=\"https://forum.bigcommerce.com/s/article/BigCommerce-Community-Guide\">Community Guide</a></li>\n<li class=\"footer__menu-item\"><a class=\"footer__menu-link\" href=\"https://forum.bigcommerce.com/s/article/Community-Code-of-Conduct\">Community Code of Conduct</a></li>\n<li class=\"footer__menu-item\"><a class=\"footer__menu-link\" href=\"https://forum.bigcommerce.com/s/article/Community-Terms-of-Use\">Community Terms of Use</a></li>\n<li class=\"footer__menu-item\"><a class=\"footer__menu-link\" href=\"https://www.bigcommerce.com/terms/api-terms/\">API Terms of Service</a></li>\n                </ul>\n              </div>\n            </div>\n          </div>\n          <div class=\"footer__bottom\">\n            <div class=\"container\">\n              <div class=\"row--pad clr\">\n                <div class=\"column-md-12 column-lg-6 column--pad\"><a class=\"footer__logo icon-svg-logo-alt\" href=\"#\"></a>\n                  <p class=\"footer__copy\">©2017 BigCommerce Pty. Ltd. Shopping Cart Software</p>\n                </div>\n                <div class=\"column-md-12 column-lg-6 column--pad\">\n                  <div class=\"footer__wrap-soc-sharing\">\n                    <ul class=\"footer__soc-sharing\">\n                      <li class=\"footer__soc-sharing-item\"><a class=\"footer__soc-sharing-link\" href=\"http://twitter.com/Bigcommerce\">Twitter</a></li>\n                      <li class=\"footer__soc-sharing-item\"><a class=\"footer__soc-sharing-link\" href=\"http://www.facebook.com/Bigcommerce\">Facebook</a></li>\n                      <li class=\"footer__soc-sharing-item\"><a class=\"footer__soc-sharing-link\" href=\"http://www.linkedin.com/company/bigcommerce\">Linkedin</a></li>\n                      <li class=\"footer__soc-sharing-item\"><a class=\"footer__soc-sharing-link\" href=\"http://www.youtube.com/BigcommerceDotCom\">Youtube</a></li>\n                      <li class=\"footer__soc-sharing-item\"><a class=\"footer__soc-sharing-link\" href=\"http://pinterest.com/bigcommerce/\">Pinterest</a></li>\n                      <li class=\"footer__soc-sharing-item\"><a class=\"footer__soc-sharing-link\" href=\"https://www.instagram.com/bigcommerce/\">Google +</a></li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </footer>\n      </div>\n    </div>\n  </div>\n</div>"
          }
        ]
      }
    }
  },
  "theme": {
    "background": "#3550b6"
  },
  "logo": "https://cdn6.bigcommerce.com/s-qtmbtj/product_images/uploaded_images/bigcommerce-logomark-darkbg.png"
}