{
  "title": "Dev Center",
  "header": {
    "nav": {
      "left": [
        {
          "title": "API Docs",
          "path": "/api-docs"
        },
        {
          "title": "Stencil Docs",
          "path": "/stencil-docs"
        },
        {
          "title": "Tools & Resources",
          "path": "/tools-resources"
        },
        {
          "title": "Changelog",
          "path": "/changelog"
        }
      ],
      "center": [],
      "right": [
        {
          "title": "My Apps",
          "path": ""
        },
        {
          "title": "Create Account",
          "path": ""
        }
      ]
    }
  },
  "pages": {
    "/": {
      "title": "",
      "data": {}
    },
    "/stencil-docs": {
      "title": "Stencil Docs",
      "data": {
        "children": [
          {
            "title": "Getting Started",
            "route": {
              "path": "/getting-started"
            },
            "data": {
              "children": [
                {
                  "title": "About Stencil",
                  "route": {
                    "path": "/about-stencil"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>About Stencil</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#about_what-is-stencil\"> What is Stencil?</a></li>\n\t\t<li><a href=\"#about_features-and-stack\"> Stencil Development Features and Technology Stack</a></li>\n\t\t<li><a href=\"#about_key-components\">Key Components: Video Demo</a></li>\n\t\t<li><a href=\"#about_blueprint\"> Blueprint (Legacy Framework) Documentation </a></li>\n\t</ul>\n</div>\n"
                      },
                      {
                        "type": "text",
                        "data": "## What is Stencil?\n\nStencil is the theming engine for the BigCommerce platform and for BigCommerce's Cornerstone theme, which is the foundation a developer needs to quickly start developing premium, custom themes with Stencil. \n\n[Cornerstone](https://github.com/bigcommerce/cornerstone) is available on Github as an open source software, and will be the Stencil engined theme we reference in this documentation in order to demonstrate Stencil's capabilities in a fully functioning storefront theme. Here is a demo of the [BigCommerce Cornerstone theme](http://cornerstone-light-demo.mybigcommerce.com/).\n\nStencil also provides features that allow merchants to customize a storefront's look and feel with no coding, making Stencil a powerful and useful engine for all audiences.",
                        "header": {
                          "anchor": "about_what-is-stencil"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Stencil Development Features and Technology Stack\n\nStencil's provides the following features, allowing BigCommerce theme developers to create beautiful, dynamic, and powerful storefronts.\n\n\n### Stencil Command Line Interface (Stencil CLI)\n\nThe Stencil CLI enables developers to locally develop and customize on any Stencil theme with no impact on a merchant's live storefront during the development process. When locally developing, you will have access to real-time Browsersync preview and testing across desktop, mobile, and tablet devices/viewports.\n\nStencil CLI runs on the Node.js runtime environment. Installing Node.js also provides the required npm package manager.\n\n### Logic-Based Templates\n\nStencil's logic based templates allow BigCommerce developers to customize storefront pages efficiently with the lightweight templating languge, Handlebars.js.  Handlebars allows you to efficiently embed dynamic and conditional logic onto your storefront pages.\n\n### Sass/SCSS Support\n\nStencils Sass and SCSS support allows developers to nest properties, variables, and mixins. Use the familiar Foundation framework (provided) or substitute your choice of framework.\n\nStencil's Cornerstone base theme uses a BigCommerce pattern library called Citadel, which is built on top of the ZURB Foundation framework, version 5.5.3. Stencil does not support Foundation 6.x, due to breaking changes introduced between versions 5.x and 6.x.\n\nFoundation offers the framework for creating a responsive theme. You have the option of swapping out Foundation for another framework, although doing so would require significant work.\n\nFoundation assets bundled with Cornerstone are located in these subdirectories: \n\n* `Cornerstone/assets/scss/settings/foundation/ `\n* `Cornerstone/assets/scss/components/foundation/`\n\nCitadel extends Foundation’s mixins and components to provide Stencil’s own mixins, extensible components, and utilities. These include drop-down lists, forms, and similar resources. Citadel resources are named according to BEM and SUIT CSS conventions. Classes are named functionally, rather than based on visual presentation or content. Our style guide is published here.\nCitadel assets bundled with Cornerstone are located in these Cornerstone subdirectories: \n\n* `Cornerstone/assets/scss/settings/citadel/`\n* `Cornerstone/assets/scss/components/citadel/`\n\nMore detailed information about the Citadel and Foundation SCSS components, and their naming conventions will be covered in *Components and Design Patterns*.\n\n### Page-specific Resource Definition\n\nSpecify the dynamic content you want to be displayed on your storefront pages with YAML formatted front matter.\n\n### Javascript Event Hooks\n\nYour Stencil themes can access remote objects through event hooks, using the hooks to trigger defined events based on shopper behavior. This will allow you to collect product data and optimize a shopper's experience.\n\nTo facilitate theme-building, BigCommerce provides the stencil-utils client-side JavaScript library for managing event hooks.\n\n---\n\n## Stencil Theme Editor\n\nThe Stencil Theme Editor is a browser-based tool that enables merchants to rapidly customize a theme's look and feel with no coding. \n\nBigCommerce theme developers' configuration choices determine which theme aspects merchants can customize, and the range of choices for each aspect.\n\nStencil's Theme Editor graphical interface enables merchants and store administrators to make styling changes to the theme currently applied to their storefront. \n\nAs a theme developer, you have the capability to define which style settings appear in the Stencil Theme Editor. You can grant access to colors, fonts, display/hiding of page features, and number of products/entries to display per feature.\n\n### Stencil Theme Variations\n\nEach Stencil theme can contain one to four variations. You can optimize individual variations for specific markets, audiences and styles – while still managing and distributing all of these variations as one theme.\nCornerstone comes with 3 variations: Cornerstone Light, Cornerstone Warm, and Cornerstone Bold.\n\n### Responsive, Mobile-Friendly Themes\n\nBigCommerce stores powered by Stencil allow shoppers to have a first class experience across any device.\n\n\n_Note that this is simply a summary Stencil's core features. Continue reading through the Stencil Developer Documentation to learn about Stencil's full capabilities._",
                        "header": {
                          "anchor": "about_features-and-stack"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Key Components: Video Demo\n\nWatch Stencil senior developer's tour of Stencil's key components:\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/p5SR8N0SeCg\" frameborder=\"0\" allowfullscreen></iframe>",
                        "header": {
                          "anchor": "about_key-components"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Blueprint (Legacy Framework) Documentation\n\nIf you are looking for information on Blueprint, BigCommerce's legacy theme framework, you can access that [here](/legacy/blueprint-themes).",
                        "header": {
                          "anchor": "about_blueprint"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Transitioning to Stencil",
                  "route": {
                    "path": "/transitionining-to-stencil"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Transitioning to Stencil</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#choosing-dev-path\"> Choosing a Development Path</a></li>\n\t\t<li><a href=\"#front-matter-quick-start\">Front-Matter Quick Start</a></li>\n    <li><a href=\"#handlebars-matter-quick-start\">Handlebars Quick Start</a></li>\n\t\t<li><a href=\"#seo-tips\">SEO Tips and Best Practices</a></li>\n\t\t<li><a href=\"#blueprint-to-stencil\">Blueprint to Stencil Features Map</a></li>\n    <li><a href=\"#interacting-with-api\">Interacting with the BigCommerce API</a></li>\n    <li><a href=\"#partnering-with-bc\">Partnering with BigCommerce</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Choosing a Development Path\n\nAre you approaching Stencil from a different theming framework, like Blueprint, BigCommerce's legacy framework? Or moving to the Stencil templating environment from a pure HTML and CSS-based design?\n\nYou have four (non-mutually exclusive) options for developing Stencil themes:\n\n* Find a Design & Solutions Partner\n* Light Customization using the Theme Editor\n* Light Customization using HTML and CSS\n* Adapting a Stencil Theme or Developing from Scratch\n\n###  Find a Design & Solutions Partner\n\nIf you prefer to have an expert collaborator customize your theme, we recommend working with one of our certified BigCommerce Design & Solutions Partners. Reference the following resources to do so:\n\n* [Partner Directory](https://partners.bigcommerce.com/directory/search?i=75)\n* [Working with a Design Partner](https://support.bigcommerce.com/articles/Learning/Working-with-a-Design-Partner) (Support Guide)\n\n### Light Customization with Stencil Theme Editor\n\nStencil can be customized without the use of any specialized development tools or techniques by using of the Stencil Theme Editor. The Stencil Theme Editor still enables customization of a theme's colors, typography, banners, headings, carousel, and footer. It also enables customization of broader layout characteristics, such as the number of products displayed in various panels, category pages, and brand pages.\n\nFor details, see the following support resources:\n\n* [Theme Editor](https://support.bigcommerce.com/s/article/Stencil-Themes)\n* [Personalizing Your Theme](https://support.bigcommerce.com/articles/Learning/Personalizing-your-New-Theme) \n\n### Light Customization with HTML and CSS\n\nIf you are most comfortable working in HTML and CSS, Stencil's *Edit Theme Files* feature allows you to directly edit most of your theme's files from the Control Panel. For details, see the following resources:\n\n* [Editing Stencil Theme Files](https://support.bigcommerce.com/s/article/Stencil-Themes#edit) \n* [Getting Started with the Stencil Framework](https://www.youtube.com/watch?v=waJ1dg_dAh8&index=11&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0) (Video overview of copying and editing a theme's files)\n\n### Adapt a Stencil Theme, or Develop from Scratch\n\nFor complete control over a theme's appearance and logic – including the ability to edit _all_ theme configuration files – you will want to use the Stencil Command-line interface, also known as the Stencil CLI.\n\nTo learn Stencil CLI's templating conventions, see Installing Stencil CLI. Also take a look at BigCommerce's [Getting Started with the Stencil Framework](https://www.youtube.com/playlist?list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0) video playlist.",
                        "header": {
                          "anchor": "choosing-dev-path"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Front-Matter Quick Start\n\nStencil templates start with a section of \"front matter\" where you can and concisely customize each page's design and layout details. \n\nThis front-matter section uses conventions from YAML, a simple, widely used markup language. If you haven't used these conventions before, refer to our [Front-Matter Overview](/stencil-docs/front-matter-attributes/front-matter-overview).",
                        "header": {
                          "anchor": "front-matter-quick-start"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Handlebars Quick Start\n\nStencil uses Handlebars.js to assemble dynamic content into the storefront pages that are displayed to shoppers. The dynamic content can be drawn from a few sources, like the store's catalog.\n\nHandlebars' syntax is quite simple, and it allows you to accomplish powerful JavaScript operations with minimal JavaScript code. To learn more about Handlebars.js, see these third-party tutorials: \n\n* [Learn Handlebars in 10 Minutes or Less](http://tutorialzine.com/2015/01/learn-handlebars-in-10-minutes/)\n* [A Beginner’s Guide to Handlebars](https://www.sitepoint.com/a-beginners-guide-to-handlebars/)\n* [Getting Started with Handlebars.js](http://blog.teamtreehouse.com/getting-started-with-handlebars-js)\n* [Handlebars interactive tutorial](http://tryhandlebarsjs.com/)",
                        "header": {
                          "anchor": "handlebars-quick-start"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## SEO Tips and Best Practices\n\nSearch-engine optimization (SEO) helps translate an elegant theme into a successful, high-conversion storefront. Because so many shoppers reach online stores through a search engine, a search-optimized site will be more visible – attracting more traffic. \n\nThe Stencil framework is [designed for high SEO performance](https://www.bigcommerce.com/improve-organic-traffic/). However, you will want to keep SEO in mind as you build out each theme and storefront. For guidelines, please see these BigCommerce support articles (which are a series of intermediate to advanced chapters in our Guide to SEO):\n\n* [SEO Do's and Don'ts](https://support.bigcommerce.com/s/article/What-is-SEO)\n* [Developing a Keyword Strategy](https://support.bigcommerce.com/articles/Learning/Developing-a-Keyword-Strategy/)\n* [SEO Success Essentials](https://support.bigcommerce.com/articles/Learning/Bigcommerce-SEO-Success-Essentials/)\n* [Advanced SEO on BigCommerce](https://support.bigcommerce.com/s/article/Advanced-SEO-on-Bigcommerce)\n\nAlso checkout our [Guide to Keyword Research](https://support.bigcommerce.com/s/article/Value-of-Keywords).",
                        "header": {
                          "anchor": "seo-tips"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Blueprint-to-Stencil Features Map \n\nThis following support and video resurces are designed to help you identify the Stencil counterparts to familiar Blueprint components.\n\n* [What to Consider When Changing Your Theme](https://support.bigcommerce.com/s/article/What-to-Consider-When-Changing-Your-Theme)\n* [Stencil and the BigCommerce Control Panel](https://www.youtube.com/watch?v=d2F6F8LJXzs&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0&index=2) (Video tour of Blueprint-to-Stencil  changes in the BigCommerce control panel)",
                        "header": {
                          "anchor": "blueprint-to-stencil"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Interacting with the BigCommerce API\n\nInteracting with the BigCommerce API\nBigCommerce's growing API resources enable application developers to create private scripts or apps that support a single store, or to create public apps offered to multiple stores via BigCommerce's App Marketplace.\n\nAs a theme developer, you can rely on apps to enhance your themes' capabilities, and to extend or complement the storefront features built into the BigCommerce platform. Popular app areas include inventory management, email marketing, coupons, reviews, shipping, tax accounting, and security. For more information, see BigCommerce's:\n\n* [App Marketplace](https://www.bigcommerce.com/apps/)\n* [API documentation](https://developer-beta.bigcommerce.com/api-docs)",
                        "header": {
                          "anchor": "interacting-with-api"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Partnering with BigCommerce\n\nDo we belong together? No formal business relationship is required to develop themes on the BigCommerce platform. However, consider applying to become a BigCommerce Design & Solutions Partner (DSP), in order to accelerate your development of new business and revenue. For details, see our:\n\n* Overview of BigCommerce Partnerships\n* Design & Solutions Partners – basics and application links\n* Technology Partners – basics and application links\n* Partnership Application",
                        "header": {
                          "anchor": "partnering-with-bc"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Supported Browsers",
                  "route": {
                    "path": "/supported-browsers"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Supported Browsers</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#desktop-and-mobile\">Supported Desktop and Mobile Browsers</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Supported Desktop and Mobile Browsers\n\nThe following browsers are supported for BigCommerce storefronts that use Stencil-based themes. \n\nThe browsers are sorted by popularity, beginning with the most popular browsers. Please ensure that your theme functions properly with all supported browsers.\n\n### Desktop Browsers\n\n* Google Chrome (latest edition)\n* Firefox (latest edition)\n* Internet Explorer 10 and 11\n* Safari (latest edition)\n* Microsoft Edge (latest edition)\n\n### Mobile Browsers \n\n* Android Chrome browser (latest edition)\n* iOS Safari browser (latest edition)",
                        "header": {
                          "anchor": "desktop-and-mobile"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "type": "warning",
                          "body": "Browser support will cease to be offered if browser usage falls below 2%.",
                          "title": "Usage Support"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Installing Stencil",
                  "route": {
                    "path": "/installing-stencil"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Installing Stencil</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#installing_video-demo\">Video Demo</a></li>\n    <li><a href=\"#installing_prerequisites\">Prerequisites by OS</a></li>\n    <li><a href=\"#installing_installing-the-stencil-cli\">Installing the Stencil Command Line Interface (CLI)</a></li>\n    <li><a href=\"#installing_cloning-cornerstone\">Cloning Cornerstone Using Github</a></li>\n    <li><a href=\"#installing_installing-stencils-js-utilities\">Installing Stencil's Javascript Utilities</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "Below you’ll find instructions on installing the Stencil CLI, cloning the Cornerstone theme, and installing Stencil’s Javascript utilities.\nEach OS has different prerequisites, so check the Prerequisites by OS section before attempting installation."
                      },
                      {
                        "type": "text",
                        "data": "## Video Demo\n\nWatch a brief demonstration of the Stencil installation and launch:\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/iWBrJalyM0A\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>",
                        "header": {
                          "anchor": "installing_video-demo"
                        }
                      },
                      {
                        "type": "tabs",
                        "data": {
                          "children": [
                            {
                              "title": " Mac OS Prerequisites",
                              "blocks": [
                                {
                                  "type": "html",
                                  "data": "<h1>Mac OS Prerequisites</h1>"
                                },
                                {
                                  "type": "html",
                                  "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3>On This Tab</h3>\n\t<ul>\n    <li><a href=\"#mac_xcode\">Installing Xcode</a></li>\n    <li><a href=\"#mac_nodejs\">Installing Node.js</a></li>\n    <li><a href=\"#mac_troubleshooting\">Troubleshooting</a></li>\n\t</ul>\n</div>\n"
                                },
                                {
                                  "type": "callout",
                                  "data": {
                                    "body": "These instructions have been tested on Mac OS X Yosemite. Dependencies for other platforms will be added upon further testing.",
                                    "title": "Platform Support"
                                  }
                                },
                                {
                                  "type": "text",
                                  "data": "## Installing Xcode \n\nYou must install the [Xcode development tools](https://developer.apple.com/xcode/) (latest stable version).",
                                  "header": {
                                    "anchor": "mac_xcode"
                                  }
                                },
                                {
                                  "type": "text",
                                  "data": "---"
                                },
                                {
                                  "type": "text",
                                  "data": "## Node.js \n\nStencil requires the <a href=\"https://nodejs.org/\">Node.js</a> runtime environment, version <a href=\"https://nodejs.org/en/blog/release/\">6.x or later</a>. We have tested Stencil on selected Node.js versions, from <a href=\"https://nodejs.org/en/blog/release/v6.10.3/\">6.10.3</a> to <a href=\"https://nodejs.org/en/blog/release/v7.9.0/\">7.9.0</a>. \n\nWe recommend that you install or update Node.js using <a href=\"https://github.com/creationix/nvm#installation\">nvm</a>. First install nvm, version <a href=\"https://github.com/creationix/nvm/tree/v0.31.0\">0.31.0</a>, as follows:\n\n```\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash\n```\n\nNext, explicitly install a supported Node.js version, using this convention:<br>\n\n```\nnvm install 6.4.0\n```",
                                  "header": {
                                    "anchor": "mac_nodejs"
                                  }
                                },
                                {
                                  "type": "callout",
                                  "data": {
                                    "body": "You can choose to instead download the latest x.x version of Node.js from the Node.js Foundation's archives, using URLs of the form: https://nodejs.org/dist/latest-v6.x/, https://nodejs.org/dist/latest-v7.x/, etc. We recommend installing only LTS (\"Long-Term Support\"/\"Mature and Dependable\") versions.",
                                    "title": "Notes on Dependencies"
                                  }
                                },
                                {
                                  "type": "text",
                                  "data": "---"
                                },
                                {
                                  "type": "text",
                                  "data": "## Troubleshooting\n\nIf you run into any problems with Stencil installation or launch, first consult [Troubleshooting Your Setup](/stencil-docs/getting-started/launching-stencil/troubleshooting-your-setup). \n\nIf that does not resolve your issue, consult our [Support resources](https://support.bigcommerce.com/s/), which include community and peer support via BigCommerce and Stack Overflow forums.\n",
                                  "header": {
                                    "anchor": "mac_troubleshooting"
                                  }
                                }
                              ]
                            },
                            {
                              "title": "Linux Prerequisites",
                              "blocks": [
                                {
                                  "type": "html",
                                  "data": "<h1>Linux Prerequisites</h1>"
                                },
                                {
                                  "type": "html",
                                  "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3>On This Tab</h3>\n\t<ul>\n    <li><a href=\"#linux_root\">Root Permissions</a></li>\n     <li><a href=\"#linux_git-client\">Git Client</a></li>\n     <li><a href=\"#linux_nodejs\">Node.js</a></li>\n      <li><a href=\"#linux_troubleshooting\">Troubleshooting</a></li>\n\t</ul>\n</div>"
                                },
                                {
                                  "type": "callout",
                                  "data": {
                                    "body": "These instructions have been tested on Linux/Ubuntu v.14.04.4. ",
                                    "title": "Platform Support"
                                  }
                                },
                                {
                                  "type": "text",
                                  "data": "## Root Permissions\n\nYou should have administrator/root permissions on your machine. (If not, you may need to precede some of the below commands with the `sudo` prefix.)",
                                  "header": {
                                    "anchor": "linux_root"
                                  }
                                },
                                {
                                  "type": "text",
                                  "data": "---"
                                },
                                {
                                  "type": "text",
                                  "data": "## Git Client\n\nYou must have a [Git client](https://git-scm.com/downloads) installed.",
                                  "header": {
                                    "anchor": "linux_git-client"
                                  }
                                },
                                {
                                  "type": "text",
                                  "data": "---"
                                },
                                {
                                  "type": "text",
                                  "data": "## Node.js\n\nStencil requires the Node.js runtime environment, version 6.x or later. We have tested Stencil on selected Node.js versions, from 6.10.3 to 7.9.0.\n\nWe recommend that you install or update Node.js using nvm. First install nvm, version 0.31.0, as follows:\n\n`curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash`\n\nNext, explicitly install a supported Node.js version, using this convention:\n\n`nvm install 6.4.0`",
                                  "header": {
                                    "anchor": "linux_nodejs"
                                  }
                                },
                                {
                                  "type": "text",
                                  "data": "---"
                                },
                                {
                                  "type": "text",
                                  "data": "## Troubleshooting\n\nIf you run into any problems with Stencil installation or launch, please first see our Troubleshooting Your Setup page. Next, please consult our Support resources, which include community/peer support via BigCommerce and Stack Overflow forums.",
                                  "header": {
                                    "anchor": "linux_troubleshooting"
                                  }
                                }
                              ]
                            },
                            {
                              "title": "Windows Prerequisites",
                              "blocks": [
                                {
                                  "type": "html",
                                  "data": "<h1>Windows Prerequisites</h1>"
                                },
                                {
                                  "type": "html",
                                  "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Tab </h3>\n\t<ul>\n     <li><a href=\"#windows_root-permissions\">Root Permissions</a></li>\n     <li><a href=\"#windows_git-client\">Git Client and Git BASH</a></li>\n     <li><a href=\"#windows_python-installation\">Python Installation</a></li>\n     <li><a href=\"#windows_python-node-config\">Python/Node Configuration</a></li>\n     <li><a href=\"#windows_node-installation\">Node.js Installation</a></li>\n     <li><a href=\"#windows_compiler-options\">C++ Compiler Options</a></li>\n    <li><a href=\"#windows_troubleshooting\">Troubleshooting</a></li>\n\t</ul>\n</div>"
                                },
                                {
                                  "type": "callout",
                                  "data": {
                                    "body": "The following instructions have been tested on Windows 10. Dependencies for other platforms will be added upon further testing.",
                                    "title": "Platform Support"
                                  }
                                },
                                {
                                  "type": "text",
                                  "data": "## Root Permissions\n\nYou must have authorization to run Powershell \"as administrator\" on your machine.",
                                  "header": {
                                    "anchor": "windows_root-permissions"
                                  }
                                },
                                {
                                  "type": "text",
                                  "data": "---"
                                },
                                {
                                  "type": "text",
                                  "data": "## Git Client and Git BASH\n\nYou must have a Git client installed. The Git for Windows distribution includes a Git client, and also provides the Git BASH emulator for command-line access. All commands should be run in Git Bash from here.",
                                  "header": {
                                    "anchor": "windows_git-client"
                                  }
                                },
                                {
                                  "type": "text",
                                  "data": "---"
                                },
                                {
                                  "type": "text",
                                  "data": "## Python Installation\n\nInstall [Python 2.7.x for Windows](https://www.python.org/downloads/windows/). This is required for Visual Studio's Windows Build Tools, installed below. **Python 3.x is not supported.**\n\nIn the installer dialog shown below, change the bottom default, so as to enable the `Add python.exe to Path` option. This provides global command-line access to Python.",
                                  "header": {
                                    "anchor": "windows_python-installation"
                                  }
                                },
                                {
                                  "type": "image",
                                  "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539115629012"
                                },
                                {
                                  "type": "text",
                                  "data": "---"
                                },
                                {
                                  "type": "text",
                                  "data": "## Node.js Installation\n\nStencil requires the [Node.js](https://nodejs.org/en/) runtime environment, version 6.x or later.\n\nOn Windows, we have tested Stencil CLI on selected Node.js version [7.10.0](https://nodejs.org/en/blog/release/v7.10.0/7.10.0). We recommend that you install only an LTS (\"Long-Term Support\"/\"Mature and Dependable\") version, and that you download that version's `.msi` installer (not its `.exe` binary).\n\n**Note:** _You can choose to instead download the latest x.x version of Node.js from the Node.js Foundation's archives, using URLs of the form: [https://nodejs.org/dist/latest-v8.x/](https://nodejs.org/dist/latest-v8.x/), [https://nodejs.org/dist/latest-v8.x/](https://nodejs.org/dist/latest-v8.x/), etc. In all cases, we recommend installing only LTS (\"Long-Term Support\"/\"Mature and Dependable\") versions, and that you download the .msi installer, not the .exe binary.\nHowever, please see the restriction on technical assistance in the Notes on Dependencies below._\n\nTo verify your Node.js installation or reinstallation, this [blog post](http://blog.teamtreehouse.com/install-node-js-npm-windows) provides Windows-specific tips and tests.",
                                  "header": {
                                    "anchor": "windows_node-installation"
                                  }
                                },
                                {
                                  "type": "callout",
                                  "data": {
                                    "body": "You will need to restart your computer to complete Node.js installation.",
                                    "type": "warning",
                                    "title": "Restart Required"
                                  }
                                },
                                {
                                  "type": "text",
                                  "data": "## Python/Node Configuration\n\nAfter installing both Python and Node.js, configure Python within the Node.js runtime environment by running this npm command:\n\n`npm config set python python2.7`",
                                  "header": {
                                    "anchor": "windows_python-node-config"
                                  }
                                },
                                {
                                  "type": "callout",
                                  "data": {
                                    "body": "The [node package manager](https://www.npmjs.com/) was installed as part of Node.js. As you proceed through Stencil CLI setup (and later refreshes), you will use this command-line utility to install packages/modules, and to configure and manage dependencies and their versions.",
                                    "title": "About Node Package Manager (npm)"
                                  }
                                },
                                {
                                  "type": "text",
                                  "data": "## C++ Compiler Options\n\nChoose to either install Turbo C++ or Visual Studio for your C++ Compiler.\n\n### Turbo C++\n\nYou can install Turbo C++ as a lighter version instead of Visual Studio. The installation takes about 5 minutes. After installation, a box opens that highlights the features of Turbo C++. This box can be closed since it is not needed to complete installation. If you prefer using Visual Studio then use the steps below.\n\n### Visual Studio Installation\nInstall MicroSoft Visual Studio. Stencil requires a 2013 or later release, Community Edition (free) or higher.\n\nBe sure to install Visual Studio's \"Common Tools\" component. You can also add this component later in the window shown below.\n\n### Visual Studio Version/Node Configuration\nFinally, configure Visual Studio within the Node.js runtime environment by running the following npm command.\n(Replace the 2015 parameter with 2013 or 2017, as needed, to match the Visual Studio release you have installed:)\n\n`npm config set msvs_version 2015`\n",
                                  "header": {
                                    "anchor": "windows_compiler-options"
                                  }
                                },
                                {
                                  "type": "callout",
                                  "data": {
                                    "title": "Notes on Dependencies",
                                    "body": "While alternate versions might also support Stencil, BigCommerce does not offer technical assistance on substitutions for, or customized versions of, the tested dependencies listed here.\n\nOnce Stencil is fully installed, you can check dependencies' installed versions by examining your `<theme-name>/package.jsonfile`."
                                  }
                                },
                                {
                                  "type": "text",
                                  "data": "## Troubleshooting\n\nIf you run into any problems with Stencil installation or launch, please first see our [Troubleshooting Your Setup](/stencil-docs/getting-started/launching-stencil/troubleshooting-your-setup) article. If that doesn't solve the issue, try consulting our [Support resources](https://forum.bigcommerce.com/s/group/0F913000000HLjECAW/bigcommerce-developers).",
                                  "header": {
                                    "anchor": "windows_troubleshooting"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        "header": {
                          "title": "Stencil Prerequisites by OS",
                          "anchor": "installing_prerequisites"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Installing the Stencil Command Line Interface\n\nThe first step toward developing on Stencil is to install the Stencil CLI. \n\nYou can do this via the following command (_If you are using Windows, you will need to run this command in git bash._):\n\n`npm install -g @bigcommerce/stencil-cli`\n\n### Items to Note\n\n* The command above requires <a href=\"https://www.npmjs.com/\">npm</a> to be installed in your local development environment.\n\n* In Windows, this `npm` command's execution might at times appear to freeze. However, the installer is running. \nGive it several minutes to complete installation.\n\n* On Mac OS machines with installed xcode, version 5.x, this `npm` command has generated errors of the form: \n`npm ERR! invalid: string_decoder`. The workaround is to upgrade xcode to the latest stable xcode version \n(7.3.1 as of this page's last revision). \n\n* If you receive a file-permissions error, and you did not install Node.js via <a href=\"https://github.com/creationix/nvm#installation\">nvm</a> (Node Version Manager), \nthen either install nvm now, or follow one of the workarounds on [this external page](https://docs.npmjs.com/getting-started/fixing-npm-permissions).",
                        "header": {
                          "anchor": "installing_installing-the-stencil-cli"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "body": "To ensure the Stencil CLI is compatible with all the changes introduced in Cornerstone 2.0.0, you must upgrade to the latest version of Stencil CLI (1.15.1) if using Cornerstone 2.x.x.\n\nOccasionally, you will receive a command line prompt to run the installation command when you restart your Stencil server. This occurs when BigCommerce publishes a critical fix in Stencil CLI, to resolve an issue like a newly discovered security exploit.",
                          "title": "CLI Force Upgrade and Cornerstone 2.0.0",
                          "type": "warning"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Cloning Cornerstone using Github\n\n_Windows users need to run this in git bash._\n\nNavigate to a directory where you would like to install a subdirectory for your theme. You must have appropriate write permissions in this directory. \n\nExecute the following command to clone Stencil's base theme, Cornerstone, into a new subdirectory named `/cornerstone/`\n\n`git clone https://github.com/bigcommerce/cornerstone.git`\n  \nIf the above command fails, and you are accessing GitHub anonymously, give the URL this alternate prefix:\n\n`git clone git://github.com/bigcommerce/cornerstone.git`\n\nIn the next step, you will install Stencil's [JavaScript utilities](/stencil-docs/getting-started/installing-stencil#installing_installing-stencils-js-utilities) to enable API access via Ajax.",
                        "header": {
                          "anchor": "installing_cloning-cornerstone"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "body": "If you are reinstalling over a base theme on which you have already begun development, first back up your theme's `.stencil` file. This contains your store URL, BigCommerce username and access tokens, and other basic settings. Preserving those settings will speed up initializing and launching the new version. If you would like to allow for complete rollback, back up your entire theme's directory.",
                          "type": "error",
                          "title": "Back Up before Reinstalling"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Installing Stencil's Javascript Dependencies\n\n_Windows users need to run this in git bash._\n\nComplete the following steps:\n\nNavigate to your Stencil theme directory. This example assumes that this target directory has the default name `cornerstone`.\n\n`cd cornerstone`\n\nNext, execute the following command inside of that directory:\n\t\n`npm install`\n\nThis will install the required npm modules to properly leverage the Stencil event framework.\n\nNow that your installation is complete, you can move on to [preparing your store/tokens](/stencil-docs/getting-started/authentication-and-tokens)",
                        "header": {
                          "anchor": "installing_installing-stencils-js-utilities"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Authentication & Tokens",
                  "route": {
                    "path": "/authentication-and-tokens"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Creating an API Account to Obtain OAuth Tokens</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#authentication_creating-an-api-account\">Creating an API Account</a></li>\n    <li><a href=\"#authentication_issuing-additional\">Issuing Additional Tokens</a></li>\n    <li><a href=\"#authentication_revoking-tokens\">Revoking Tokens</a></li>\n    <li><a href=\"#authentication_copying-oauth-tokens\">Copying OAuth Tokens</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "callout",
                        "data": {
                          "type": "error",
                          "body": "If you've successfully installed Stencil you're ready to create a BigCommerce API Account. \n_If you have not yet installed Stencil, see [Installing Stencil](/stencil-docs/getting-started/installing-stencil)._",
                          "title": "Status Check"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Creating an API Account \n\nFollow the steps below to create an API Account and obtain your OAuth Tokens.\n\n1. Using the store owner's credentials, log into the control panel of the store for which you are developing. \n\n2. From the left nav, select `Advanced Settings` > `API Accounts`.\n\n3. From the resulting Store API Accounts page, select the `Create API Account` button.\n\n4. Give your account a name that reflects its purpose.\n\n_The BigCommerce platform does not validate this name, however, we recommend naming accounts by purpose to help you keep track of which accounts you need to keep active. You should assign a name that will make the account's purpose clear to you and other store administrators._\n\n5. Under OAuth Scopes, set the Themes selector to either `modify` or `read-only`.\n\n_The read-only scope is sufficient to authorize/initialize a Stencil theme. However, the modify scope will achieve the same goal, while also authorizing this account to upload themes to the store from the command line._\n\n6. Click `Save`. \n\n_Doing so will display a modal, from which you can copy your `Client ID` and `Access Token` values. The modal will also prompt your browser to download a .txt file that contains your credentials. You will need these values to authorize and initialize your Stencil theme. If you're ready to do so now, move ahead to [Authorizing and Initializing Stencil](/stencil-docs/getting-started/launching-stencil/authorizing-and-initializing)._",
                        "header": {
                          "anchor": "authentication_creating-an-api-account"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "type": "warning",
                          "title": "Reserved Role",
                          "body": "Currently, only the store owner can create an OAuth API account according to the instructions below. Also, note that each store is limited to 50 accounts at a time."
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Issuing Additional Tokens\n\nTo issue store tokens for additional themes or developers, repeat the process outlined in Creating an API Account.\n\n(Even if you originally initialized your theme using a legacy API [Basic-Auth] token, you will need to generate any new tokens using the new OAuth flow.)\n\nYou can create up to 50 API accounts/tokens per store. If you hit this limit and still need to create new tokens, you will need to delete existing accounts. Deleting an account will invalidate the corresponding token, which will affect any developer using that token.\n",
                        "header": {
                          "anchor": "authentication_issuing-additional"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Revoking OAuth Tokens\n\n**Note**: After completing the below process, there is no undo. The following process completely deletes the selected account(s), revoking the corresponding token(s).\n\nIf you are completely sure you would like to revoke an existing OAuth store token, delete the corresponding Store API account with the following steps:\n\n1. Navigate to the Control Panel's `API Accounts` page.\n\n2. Select the trash-can button to the right of the account that you want to delete.\n\n_*You can also use the check boxes at left to select multiple accounts to delete them all at once._",
                        "header": {
                          "anchor": "authentication_revoking-tokens"
                        }
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1537421464104"
                      },
                      {
                        "type": "text",
                        "data": "## Copying OAuth Tokens \n\nTo access an existing OAuth token to authorize your theme:\n\n1. Open the `.txt` file that the BigCommerce control panel generated when you created the API account.\n\n_If you did not retain this file, you will need to generate a new token by repeating the Creating an API Account procedure._\n\n2. Note the Client ID and Access Token hashes in the file (or in the control-panel modal for your newly created token).\n\n3. If you are a merchant granting an outside theme developer access to your store, provide the Client ID and Access Token values to the developer. The developer will need these when [Authorizing and Initializing Stencil](/stencil-docs/getting-started/launching-stencil/authorizing-and-initializing). If you are a merchant developing a theme against your own store, you will use the same two values in the same [Authorizing and Initializing Stencil](/stencil-docs/getting-started/launching-stencil/authorizing-and-initializing) step.",
                        "header": {
                          "anchor": "authentication_copying-oauth-tokens "
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Launching Stencil",
                  "route": {
                    "path": "/launching-stencil"
                  },
                  "data": {
                    "children": [
                      {
                        "title": "Authorizing and Initializing Stencil",
                        "route": {
                          "path": "/authorizing-and-initializing"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Authorizing and Initializing Stencil</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#authorizing_prerequisites\">Prerequisites</a></li>\n    <li><a href=\"#authorizing_authorizing-oauth\">Authorizing with OAuth Tokens</a></li>\n\t</ul>\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## Prerequisites\n\nThe following are required from performing previous steps prior to authorizing and Initializing your Stencil theme:\n\n* An [API account](/stencil-docs/getting-started/authentication-and-tokens) with the Themes scope set to `read-only` or `modify`\n* a `Client ID` and `Access Token`, which are both generated when an API account is created\n\n**Note:** _`modify` access is required to run the `stencil push` command, which uploads and applies a theme to your store._",
                              "header": {
                                "anchor": "authorizing_prerequisites"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "If you are sharing a theme across storefronts, we strongly recommend that you clone a separate subdirectory (each containing its own `.stencil` file) for each store. This helps isolate and secure each merchant's data.\n\nYou can clone your `/cornerstone/` subdirectory now to create your first isolated copy, and then switch to the resulting new subdirectory to continue. (Prior to March 2017, Stencil's default subdirectory name was `/stencil/`.)",
                                "title": " Best Practice: Isolate Stores by Subdirectory"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Authorizing with OAuth Tokens\n\nUse these steps to authorize and initialize Stencil.\n\nUse the following steps to authorize your theme using an OAuth API account:\n\n1. Have your store API account's `Client ID` and `Access Token` hashes ready. \n(Refer back to [Authentication & Tokens](/stencil-docs/getting-started/authentication-and-tokens))\n\n2. Starting from the subdirectory for the appropriate theme (and store), initialize Stencil CLI by running the following command (_Windows users need to run this in git bash_):\n\n`stencil init`\n\n3. You will be prompted to provide the homepage URL of the production store against which you want to develop. This can be your own store, or a client store that you are customizing.\n\n4. Next, you will be prompted to enter the port where you would like to run your store on your local machine. This can be any port you like, but we recommend using port 3000.\n\n5. Next, you will be prompted: `What is your Stencil OAuth Client ID?` Enter your store API account's Client ID.\n\n(If you used this Client ID when you last ran `stencil init`, you'll see it hinted on the command line, and can just confirm it.)\n\n6. Finally, you will be prompted: `What is your Stencil OAuth Access Token?` If you entered these credentials when you last ran stencil init, you'll see the token hinted in cleartext. If not, paste your `Access Token` hash onto the command line. Then press Enter.\n\nYour terminal window should now confirm that you have successfully initialized Stencil CLI on your local machine. With Stencil CLI initialized, you are ready to start Stencil and begin development.",
                              "header": {
                                "anchor": "authorizing_authorizing-oauth"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Running Stencil Locally",
                        "route": {
                          "path": "/running-stencil-locally"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Running Stencil Locally</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#running_quick\">Quick Reference</a></li>\n    <li><a href=\"#running_local-launch-theme\">Local Launch: Theme Only</a></li>\n    <li><a href=\"#running_local-launch-theme-and-editor\">Local Launch: Theme and Theme Editor</a></li>\n    <li><a href=\"#running_disabling\">Local Launch: Disabling Caching</a></li>\n\t</ul>\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## Quick Reference\n\n<table> \n\t<tr>\n\t\t<th>Launch type</th>\n\t\t<th>Command</th>\n\t\t<th>Theme Port URL</th>\n\t\t<th>Theme Editor Port URL</th>\n\t</tr>\n\t<tr>\n\t\t<td>Theme Only</td>\n\t\t<td><code>stencil start</code></td>\n\t\t<td>http://localhost:3000 (or custom \n\t\tport)</td>\n\t\t<td>N/A</td>\n\t</tr>\n\t<tr>\n\t\t<td>Theme and Theme Editor</td>\n\t\t<td><code>stencil start -e</code>\n\t\t</td>\n\t\t<td>http://localhost:3000 (or custom \n\t\tport)</td>\n\t\t<td>http://localhost:8181</td>\n\t</tr>\n\t<tr>\n\t\t<td>Theme <b>and</b> Theme Editor \n\t\t</td>\n\t\t<td><code>stencil start -e --theme-\n\t\teditor-port 9000</code></td>\n\t\t<td>http://localhost:3000 (or custom \n\t\tport)</td>\n\t\t<td>http://localhost:9000\n(#### = custom port)</td>\n\t</tr>\n",
                              "header": {
                                "anchor": "running_quick"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Local Launch: Theme Only\n\nAfter initializing Stencil, issue the following command in your theme directory (_Windows users need to run this in git bash_):\n\n`stencil start`\n\nWhen you navigate to your designated port (e.g http://localhost:3000), you should see the storefront you selected with the local Stencil theme applied.\n\n## Troubleshooting Token Errors\n\nIf you receive the following error message, \n\n`Unauthorized, please use a valid username/token`\n\nthen store token authentication has failed.\n\nIn this case, please track back and review the following articles:\n\n* [Authentication & Tokens](/stencil-docs/getting-started/authentication-and-tokens): How to issue or reissue tokens in the BigCommerce control panel.\n* [Authorizing and Initializing Stencil:](/stencil-docs/getting-started/launching-stencil/authorizing-and-initializing): How to initialize Stencil with your username and token.",
                              "header": {
                                "anchor": "running_local-launch-theme"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Local Launch: Theme and Theme Editor\n\nIf you want to view or reconfigure the Theme Editor/Store Design settings, you can run Stencil locally while also launching a local version of Theme Editor. This will help you see the UX changes that result from editing the `schema.json` file. \n\nTo run Stencil locally while also launching a local version of Theme Editor, start in your theme directory and run the same command as above (`stencil start`), but append the `-e` option:\n\n`stencil start -e`\n\nThe Theme Editor server will run in parallel with the stencil theme at [http://localhost:8181](http://localhost:8181/).\n\n### Customizing Theme Editor's Port\n\nYou can override Theme Editor's default port by appending the \"--theme-editor-port [port]\" option. For example, to specify port `9000`, you would enter:\n\n`stencil start -e --theme-editor-port 9000\n`\n\nTo verify Theme Editor's launch, you would then go to http://localhost:9000. Using this option, you can specify any port between `1024` and `65535`.",
                              "header": {
                                "anchor": "running_local-launch-theme-and-editor"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Local Launch: Disabling Caching\n\nBy default, Stencil caches API resource data per storefront page. This minimizes server traffic while you develop your theme locally.\nIf you prefer to see your changes reflected immediately in your live store, you can turn off caching by appending the `--no-cache` or `-n` option:\n\n`stencil start --no-cache`\n`stencil start -n`\n\n### To re-enable caching:\n\nKill the current Stencil server (_ctrl + c will do the job_) and restart Stencil, this time omitting the `--no-cache` or `-n` option.\n\n`stencil start` \n",
                              "header": {
                                "anchor": "running_disabling"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Troubleshooting Your Setup",
                        "route": {
                          "path": "/troubleshooting-your-setup"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Troubleshooting Your Setup</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#troubleshooting_unsupported\">Unsupported Node Version</a></li>\n    <li><a href=\"#troubleshooting_npm-install\"><code>npm install</code> errors</a></li>\n    <li><a href=\"#troubleshooting_npm-install-stencil-init\">npm install and stencil init Errors</a></li>\n    <li><a href=\"#troubleshooting_stencil-init\">\"stencil init/stencil start errors</a></li>\n    <li><a href=\"#troubleshooting_stencil-start-missing-module\"><code>stencil start</code>/missing module Errors</a></li>\n    <li><a href=\"#troubleshooting_uncaught\">\"Uncaught TypeError: Illegal invocation\" error</a></li>\n    <li><a href=\"#troubleshooting_mac-os\">Mac OS: \"Xcode/iOS license...\" Errors upon Stencil Commands</a></li>\n    <li><a href=\"#troubleshooting_etimeout\">ETIMEOUT Errors on Node >4.4.0</a></li>\n    <li><a href=\"#troubleshooting_stencil-command-not-found\"><code>stencil</code> command not found</a></li>\n    <li><a href=\"#troubleshooting_500-errors\">500 Errors</a></li>\n    <li><a href=\"#troubleshooting_lint-errors\">Lint Errors upon Bundling</a></li>\n    <li><a href=\"#troubleshooting_module-not-found\">\"Module Not Found\" Errors upon Bundling</a></li>\n    <li><a href=\"#troubleshooting_short\">Short or Undescriptive JavaScript Diagnostics</a></li>\n    <li><a href=\"#troubleshooting_tr-300\">TR-300 Error upon Theme Upload</a></li>\n    <li><a href=\"#troubleshooting_uninstalling\">Uninstalling and Reinstalling Stencil CLI</a></li>\n\t</ul>\n</div>"
                            },
                            {
                              "type": "callout",
                              "data": {
                                "title": "First Check the Terminal Window",
                                "body": "For any unexpected behavior that you encounter while developing your Stencil theme, first check your terminal window where you started Stencil CLI. \n\nIn some cases, the terminal will provide a verbose error message specifying where to look for problems. In any case, it has the potential to provide further insight on the issue. Diagnostic suggestions are listed on this page for error messages that may not be helpful in revealing the issue you're experiencing."
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Unsupported Node Version\n\nIf you receive the following error message, please reinstall Node.js to a supported \"LTS\" (\"Long-Term Support\") version:\n\n```\nDebug: internal, implementation, error\n        TypeError: Uncaught error: Object #<Object> has no method 'parse'\n        at internals.implementation \n        (/usr/local/lib/node_modules/stencil-cli/server/plugins/CssCompiler/index.js:32:26)\n```\n\nOn Mac OS, we have tested Stencil CLI most robustly on Node.js version 4.4.0. On Linux, we have tested most robustly on version 4.1.2. On Windows, we have tested most robustly on version 4.6.1. You’ll find detailed steps (for each operating system) in these instructions' Installing Stencil Prerequisites by OS section.",
                              "header": {
                                "anchor": "troubleshooting_unsupported"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## `npm install` Errors\n\nThe following headings represent errors that may occur when running the `npm install` command. The content under each heading issues a fix for the issue.\n\n### \"Unmet Peer Dependency\"\n\nIf you get any `Unmet Peer Dependency` errors when issuing the `npm install` command – or at other times – make sure you are running the `npm install` command **inside** your theme directory.\n\nIf running the `npm install ` command inside your theme directory does not resolve the error, try one of the following:\n\n* Try removing your theme directory's `/node_modules/` subdirectory, by running `rm -rf node_modules`\n\n* Run the `npm cache clean` command\n\n* Re-run `npm install`\n\n\n### Permissions (EPERM or EACCES) Error\n\nIf you get a file-permissions error such as `EPERM` or `EACCES` when issuing the `npm install` command, try one of the workarounds listed on this [external](https://docs.npmjs.com/getting-started/fixing-npm-permissions) page. \n\n### \"js/bundle\" Errors\n\nIf you get errors of the following type upon executing the `stencil init` command:\n\n```\nPotentially unhandled rejection [6] TypeError: Error loading \"js/bundle\" \nat file:/Users/<username>/Desktop/Fortune-1.4.6/assets/js/bundle.js\n\nError evaluating file:/Users/<username>/Desktop/Fortune-1.4.6/assets/js/bundle.js\n\nCannot read property 'createElement' of undefined...\n```\n\ntry the following workaround:\n\n1. Download and unzip a fresh copy of the theme.\n\n3. Refresh theme dependencies by running `npm install && jspm install`\n\n3. Run `stencil init`.\n\n*You will see the same error message as before, but proceed.*\n\n4. Delete the `<theme-name>/assets/js/bundle.js` file.\n\n5. Run `stencil init` again.\nThis should now execute properly.\n6. Run `stencil start`\n\n8. Verify your theme's launch at: http://localhost:3000.",
                              "header": {
                                "anchor": "troubleshooting_npm-install"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## `npm install` and `stencil init` Errors\n\nIf you get unexpected error messages when issuing the `npm install` or `stencil init` commands, check your Node.js version and ensure it aligns with a version that is compatible for the Stencil framework.",
                              "header": {
                                "anchor": "troubleshooting_npm-install-stencil-init"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## `stencil init`/`stencil start` Errors\n\nIf you get unexpected error messages or unexpected results upon executing the `stencil init`, `stencil start`, or other Stencil CLI commands, make sure you are working in the subdirectory for the specific theme you intend to launch. \n\nOne way of checking what directory you are working in is by running the `pwd` command in your terminal.",
                              "header": {
                                "anchor": "troubleshooting_stencil-init"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## `stencil start`/missing module Errors\n\nIf executing `stencil start` provokes errors like the following\n\n```\nmodule.js:327\nthrow err;\n^\n\nError: Cannot find module 'webpack'\nat Function.Module._resolveFilename (module.js:325:15)\nat Function.Module._load (module.js:276:25)\nat Module.require (module.js:353:17)\nat require (internal/module.js:12:17)\nat Object. (/Users/jane.doe/themes/cornerstone/stencil.conf.js:2:15)\nat Module._compile (module.js:409:26)\nat Object.Module._extensions..js (module.js:416:10)\nat Module.load (module.js:343:32)\nat Function.Module._load (module.js:300:12)\nat Module.require (module.js:353:17)\n```\n\nswitch to your theme directory and run `npm install`. Running this command will add the missing JavaScript library dependencies.\n\nIf you receive the same error again after running `npm install`, you should completely uninstall and reinstall both the Stencil framework and Node.js.",
                              "header": {
                                "anchor": "troubleshooting_stencil-start-missing-module"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## \"Uncaught TypeError: Illegal invocation\" error\n\nIf you receive an `Uncaught TypeError: Illegal invocation` console error, and previously installed Stencil using the original jspm-based installation flow and later switched to our current webpack installation flow, please remove your theme's `/node_modules/` subdirectory, then re-run `npm install` inside your theme's directory.",
                              "header": {
                                "anchor": "troubleshooting_uncaught"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Mac OS: \"Xcode/iOS license...\" Errors upon Stencil Commands\n\nOn Mac OS, if you have recently installed a new version of Xcode, the command line will display the following error when you next try to use or reinstall Stencil: \n\n`error: Agreeing to the Xcode/iOS license requires admin privileges, please re-run as root via sudo.`\n\nTo resolve this error, do the following:\n* Launch Xcode.\n* Accept its user agreement.\n* Quit Xcode.\n* Re-execute your Stencil command.\n",
                              "header": {
                                "anchor": "troubleshooting_mac-os"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## ETIMEOUT Errors on Node >4.4.0\n\nIf you are running a version of Node.js higher than 4.4.0, and you receive an `ETIMEOUT` error when running Stencil CLI, re-install the latest version of Stencil CLI to resolve this error by following the workflow in Installing Stencil CLI/Framework.",
                              "header": {
                                "anchor": "troubleshooting_etimeout"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## `stencil` command not found\n\n### Reinstall Stencil CLI\n\nIf you receive the error message -bash: `stencil: command not found`, ensure that you have followed the steps on Installing Stencil CLI/Framework or attempt to reinstall the Stencil CLI. \n\n### Redirect Bash shell\n\nIf you receive the error message -bash: stencil: command not found, enter echo $NVM_DIR. If this command returns nothing, then run source ~/.bash_profile and try running running stencil commands again.\n\n### Check/Specify `nvm` Version\n\nIf you receive a `stencil: command not found` error message upon executing stencil start from inside your theme subdirectory: Check whether nvm has installed multiple versions of Node.js, by entering the following command:\n\n`ls ~/.nvm/versions/node`\n\nIf this reports more than one version, specify your platform's supported Node.js `<version_number>` by entering: \n\n`nvm use <version_number>`\n\nTo prevent this error from recurring, add the same `nvm use <version_number>` command to your ~/.bash_profile file.\n",
                              "header": {
                                "anchor": "troubleshooting_stencil-command-not-found"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## `stencil start` errors\n\n### \"Unauthorized...username/token\" Error\n\nIf executing the `stencil start` command generates an `Unauthorized, please use a valid username/token` error: Please make sure that the `.stencil` file contains the correct store URL. Also, verify that you have copied the correct username and token. If you continue to get the same error, please reissue tokens.\n\n### \"Unable to load registry %bitbucket%\"\n\nIf you have downloaded and installed a Marketplace theme (other than Cornerstone), and after running stencil start, received the error `Unable to load registry %bitbucket%`: Try this workaround.\n\n1. Back up your current theme directory/directories. \n(In a default installation, the theme directory is named `.../cornerstone/`. Prior to March 2017, this directory's name defaulted to `.../stencil/`. Use the same substitutions for other code examples on this page.)\n\n2. To ensure that you install refreshed dependencies, delete your `<theme-name>/node_modules/` and `<theme-name>/assets/jspm_packages/` subdirectories. (You can check installed versions of dependencies by examining your `<theme-name>/package.json` file.)\n\n3. Starting inside your theme directory, enter this alternate sequence of commands:\n\n```\nnpm install -g jspm-git\nnpm install\njspm config registries.bitbucket.baseurl git+ssh://git@bitbucket.org/\njspm config registries.bitbucket.handler jspm-git\njspm install\n```\n\n4. Re-launch your theme."
                            },
                            {
                              "type": "text",
                              "data": "## 500 Errors\n\nIf you see errors like or _similar_ to below:\n\n`{\"statusCode\":500,\"error\":\"Internal Server Error\",\"message\":\"An internal server error occurred\"}`\n\nthey often indicate a template syntax error, such as unmatched or missing punctuation. Check your terminal window for more details.",
                              "header": {
                                "anchor": "troubleshooting_500-errors"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Lint Errors upon Bundling\n\nIf bundling your theme triggers multiple lint errors related to the `bundle.js` file, your theme is missing the `.eslintignore` file. Please retrieve this file from the [Cornerstone repo](https://github.com/bigcommerce/cornerstone), then re-run `stencil bundle`.\n",
                              "header": {
                                "anchor": "troubleshooting_lint-errors"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## \"Module Not Found\" Errors upon Bundling\n\nIf you see the following error when running stencil bundle, this is a past bug that has since been corrected.\n\n`[ModuleNotFoundError: Module not found: Error: Cannot resolve module 'pace' in...]`\n\nTo remove the error, please update your Cornerstone version. ",
                              "header": {
                                "anchor": "troubleshooting_module-not-found"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Short or Undescriptive JavaScript Diagnostics\n\nIf JavaScript errors in your browser's developer tools are not reporting filenames and line numbers, try changing your `webpack.conf.js` file's sourcemap entry from:\n\n`devtool: 'eval-cheap-module-source-map'`\n\nto:\n\n`devtool: 'eval-source-map'`\n\nThe `eval-cheap-module-source-map` option performs faster rebuilds, but omits line numbers. The `eval-source-map` option is slower, but more verbose. ",
                              "header": {
                                "anchor": "troubleshooting_short"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## TR-300 Error upon Theme Upload\n\nIf uploading your theme triggers a TR-300 error, this can indicate an included source-map file (`bundle.js.map`) that exceeds its size limit of 5 MB. If your `bundle.js.map` exceeds that limit, the workaround is to move this file outside your theme directory before re-running `stencil bundle`. ",
                              "header": {
                                "anchor": "troubleshooting_tr-300"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Uninstalling and Reinstalling Stencil CLI\n\nIf you encounter persistent problems in initializing or starting Stencil, you have the option of completely removing Stencil CLI and doing a fresh reinstall. You would do so as follows:\n\n1. From your command line, issue the command:\n`npm uninstall -g @bigcommerce/stencil-cli`\n\n2. Navigate back to the Installing and Launching Stencil section and repeat all installation steps to reinstall dependencies and restore your theme, according to your development scenario.\n\nA more-drastic measure is to **also** uninstall and reinstall Stencil CLI's Node.js prerequisites (along with uninstalling Stencil CLI). We do not recommend this, as it might disable other Node.js applications on your local machine.",
                              "header": {
                                "anchor": "troubleshooting_uninstalling"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Stencil CLI Options and Commands",
                        "route": {
                          "path": "/stencil-cli-options-and-commands"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Stencil CLI Options and Commands</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#stencil_basic-cli\">Basic CLI Options and Commands</a></li>\n    <li><a href=\"#stencil_stencil-start\">Stencil Start Options</a></li>\n    <li><a href=\"#stencil_stencil-push\">Stencil Push Options</a></li>\n\t</ul>\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## Basic CLI Options and Commands\n\nThe syntax to run a basic Stencil CLI command is: `stencil <commands> [options] <parameter>`.\n\nTo see the basic options and commands that the Stencil CLI package supports, enter any of the following forms of the help option on your command line:\n\n`stencil <command> [option] <parameter>`\n\nTo see the basic options and commands that the Stencil CLI package supports, enter any of the following forms of the help option on your command line:\n\n```\nstencil\nstencil help\nstencil --help\nstencil -h\n```\n\nYour terminal window will display options and commands listed in the tables below. \n\t\n<table>\n  <tr>\n    <th>Option</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>-h, --help</td>\n    <td>Outputs usage information.</td>\n  </tr>\n  <tr>\n    <td>-V, --version</td>\n    <td>Outputs the version number (which is read from package.json file</span>).</td>\n  </tr>\n</table>\n\n<p></p>\n<table>\n  <tr>\n    <th>Command</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>init</td>\n    <td >Interactively creates a .stencil file, which configures how to run a BigCommerce store locally.</td>\n  </tr>\n  <tr>\n    <td>start</td>\n    <td>Starts up the BigCommerce store, using theme files in the current directory. \n\n<b>Note:</b> If stencil start generates an \"Unauthorized, please use a valid username/token error: Please make sure that the .stencil file contains the correct store URL and (for OAuth) the correct URL prefix). Also, verify that you have copied the correct credentials, as outlined here. If you continue to get the same error, please reissue tokens, as outlined here.\n    </td>\n  </tr>\n \n  \n  <tr>\n    <td>bundle</td>\n    <td>Bundles up the theme into a structured .zip file, which can be uploaded to BigCommerce. (Please see restrictions here).</td>\n  </tr>\n  \n  <tr>\n    <td></a>push</td>\n    <td>Bundles up the theme into a structured .zip file; then directly uploads (pushes) the .zip to BigCommerce.(Please see</nobr> usage instructions here. The same restrictions apply as for the bundle command.)</td>\n  </tr>\n  \n  <tr>\n    <td>release</td>\n    <td>Creates a new release in a theme's GitHub repository. Developers outside BigCommerce can use this for forks (not master) of Stencil's Cornerstone base theme, or for their own parallel themes independent of Cornerstone.</td>\n  </tr>\n    \n  <tr>\n    <td>help &lt;command&gt;</td>\n    <td>return all the options available to use for the specified command. For example, <code>stencil help bundle</code> will return the options that are available to use specifically with the stencil bundle command.\t\n    </td>\n  </tr>  \n</table>\n",
                              "header": {
                                "anchor": "#stencil_basic-cli"
                              }
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1538055264839",
                              "header": {
                                "title": "Basic Stencil CLI Options and Commands"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "title": "'stencil start' and 'stencil push' Options",
                                "body": "The `stencil start` and `stencil push` CLI Commands have additional custom options that can be used with the command, which are detailed below."
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Stencil Start Options\n\nTo see Stencil CLI's additional options for the `stencil start` command (described above), enter the following on your command line:\n\n`stencil help start` \n\nYour terminal screen should read similar to the image below.\n",
                              "header": {
                                "anchor": "#stencil_stencil-start"
                              }
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1538029681278",
                              "config": {
                                "maxWidth": "1300",
                                "maxHeight": "1300"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Stencil Push Options\n\nTo see Stencil CLI's additional options for the stencil push command (described above), enter the following on your command line:\n\n`stencil help push`\n\nYour terminal screen should read similar to the image below.",
                              "header": {
                                "anchor": "stencil_stencil-push"
                              }
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1538055086025",
                              "config": {
                                "maxHeight": "800",
                                "maxWidth": "800"
                              }
                            },
                            {
                              "type": "text",
                              "data": "You can use the `-f` or `--filename` option in cases where you have already run `stencil bundle` to bundle your theme, but the resulting .zip file has not yet uploaded to BigCommerce. Use the generated .zip file's **filename** as a parameter to identify the generated file in your theme directory. An example of the command is outlined below.\n\n`stencil push -f Cornerstone-2.3.2.zip`\n\nIn this example, `Cornerstone-2.3.2.zip` is the name of the file that was generated after running `stencil bundle`.\n\nWhen you run `stencil push` with the `-f` or `--filename` option, Stencil CLI skips all its bundling steps and diagnostics. It proceeds directly to uploading the specified file, displaying its processing progress bar to show upload status.\n\n"
                            }
                          ]
                        }
                      },
                      {
                        "title": "Cornerstone File Structure",
                        "route": {
                          "path": "/cornerstone-file-structure"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Cornerstone File Structure</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#cornerstone_cornerstone-file-structure\">The Cornerstone Theme File Structure</a></li>\n\t</ul>\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## The Cornerstone Theme File Structure\n\nCornerstone is the base Stencil theme, and it is also the default theme for all newly initialized local storefronts. Cornerstone provides the standard file structure, base design pattern, and default file assets necessary to start developing a custom storefront experience.\n\nThe Cornerstone file structure consists of four main subdirectories. Within those subdirectories, you'll be directed to specific files in the Development Quick Start tutorial and in Stencil reference material:\n\n### `template/pages`\n`templates/pages` contains all the base template pages used in a BigCommerce online storefront. The pages are grouped by page category. In order to prevent any rendering errors, please avoid changing page names. For details, please see Templates Files > Templates Direcotry > [Pages Subdirectory](/stencil-docs/template-files/templates-directory/pages-subdirectory).\n\n\n### `template/components`\n`templates/components` Components consist of code snippets and partials that can be reused throughout your theme. This directory is grouped by component type. For details, please see Templates Files > Templates Direcotry > [Components Subdirectory](/stencil-docs/template-files/templates-directory/components-subdirectory).\n\n### `template/layout`\n`templates/layout` define the overall structure (header, footer, etc.) for your storefront. You can implement multiple layouts here, for different use cases – to make it easy to switch between different look-and-feel variations for the same theme. For details, please see Templates Files > Templates Direcotry > [Layout Subdirectory](/stencil-docs/template-files/templates-directory/layout-subdirectory).\n\n### `assets/`\n`assets/` (images, CSS and JavaScript files) will be located in this directory. For details, please see CSS And Design Assets > [Assets Directory](/stencil-docs/css-and-design-assets/assets-directory).\n\n### `lang/`\n`lang/` contains translation files, including the required `en.json`. For details, please see the _Internationalization/Localization_ section of the documentation.\n\nWhen developing in your local environment, all files that you change in your Stencil theme directory (`/cornerstone/` in our default installation) will be reflected immediately at [http://localhost:3000](http://localhost:3000).\n",
                              "header": {
                                "anchor": "cornerstone_cornerstone-file-structure"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "blocks": []
                  }
                },
                {
                  "title": "Advanced Installation Options",
                  "route": {
                    "path": "/advanced-installation-options"
                  },
                  "data": {
                    "blocks": [],
                    "children": [
                      {
                        "title": "Navigating Your Setup Scenario",
                        "route": {
                          "path": "/navigating-your-setup-scenario"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Navigating Your Setup Scenario</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#navigating_illustration\">Illustration of Stencil's Setup Options</a></li>\n    <li><a href=\"#navigating_initial\">Intial Cornerstone Setup</a></li>\n    <li><a href=\"#navigating_download-and-install\">Download and Install a New Version of Cornerstone</a></li>\n    <li><a href=\"#navigating_download-marketplace\">Download a Marketplace Theme</a></li>\n    <li><a href=\"#navigating_implementing-custom-build\">Implementing a Custom Build System</a></li>\n    <li><a href=\"#navigating_blueprint-store\">Blueprint Store Launched Before January 26th, 2016</a></li>\n\t</ul>\n</div>"
                            },
                            {
                              "type": "callout",
                              "data": {
                                "type": "warning",
                                "title": "Notes on Dependencies",
                                "body": "Our installation instructions have been tested on Mac OS X Yosemite, Linux/Ubuntu v.14.04.4, and Windows. Dependencies for other platforms/releases will be added upon further testing.\n"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Illustration of Stencil's Setup Options\n\nThe diagram below visually illustrates _all_ currently supported workflows for setting up a Stencil theme. You will choose one pathway to setup Stencil for your store. The color codes for each setup scenario are as follows: \n\n* [Black arrows: Initial setup with the default Cornerstone theme.](#navigating_initial)\n\n* [Orange arrows: Refresh Cornerstone from Theme Marketplace.](#navigating_cornerstone-refresh)\n\n* [Purple arrows: Customize a theme (_other than_ Cornerstone) downloaded from Theme Marketplace.](#navigating_download-marketplace)\n\n* [Green arrows: Configure a custom JavaScript build system](#navigating_implementing-custom-build)\n\n* [Blue arrows: Adds onto any of the preceding four scenarios. If developing for a BigCommerce Blueprint production store launched before Jan. 26, 2016, you must add one extra step to enable Stencil in the store's control panel.](#navigating_blueprint-store)",
                              "header": {
                                "anchor": "navigating_illustration"
                              }
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1538540242143",
                              "config": {
                                "centered": true,
                                "fluid": true,
                                "bordered": true
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "title": "Detailed Steps Described Below",
                                "body": "Continue reading to get a detailed description and breakdown of the steps required for each setup scenario."
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Initial Cornerstone Setup \n\nThis is the workflow to start developing based on BigCommerce's default Cornerstone theme. This workflow uses Webpack as the JavaScript build system. Steps required:\n\n* [Install your necessary prerequisites](/stencil-docs/getting-started/installing-stencil#installing_prerequisites)\n* [Install Stencil CLI](/stencil-docs/getting-started/installing-stencil#installing_installing-the-stencil-cli)\n* [Clone the Cornerstone theme using Github](/stencil-docs/getting-started/installing-stencil#installing_cloning-cornerstone)\n* [Install JavaScript Utilities](stencil-docs/getting-started/installing-and-launching/installing-stencil-utils)\n* [Create an API Account to prepare store and tokens](/stencil-docs/getting-started/authentication-and-tokens#authentication_creating-an-api-account)\n\n\nOnce you have completed these steps, proceed to the _Launching Stencil_ section.",
                              "header": {
                                "anchor": "navigating_initial"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Download and Install a New Version of Cornerstone \n\nIf you would like to download and install a **new** version of Cornerstone from BigCommerce's Theme Marketplace, perform the following steps:\n\n* Ensure all necessary prerequisites are installed\n* [Ensure Stencil CLI is installed](/stencil-docs/getting-started/installing-stencil#installing_installing-the-stencil-cli)\n* [Download a new Cornerstone .zip file](/stencil-docs/getting-started/advanced-installation-options/downloading-the-cornerstone-theme#downloading_downloading-cornerstone-zip)\n* [Reinstall JavaScript Utilities](stencil-docs/getting-started/installing-and-launching/installing-stencil-utils)\n* Repeat steps in _Launching Stencil_",
                              "header": {
                                "anchor": "navigating_download-and-install"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Download a Marketplace Theme \n\nIf you would like to customize a theme _other than_ Cornerstone, follow the required steps to download a theme from BigCommerce's Theme Marketplace. This workflow requires BitBucket. Some earlier theme versions will also require additional steps for the jspm JavaScript build system. Steps required:\n\n* [Install all necessary prerequisites](/stencil-docs/getting-started/installing-stencil#installing_prerequisites)\n* [Install Stencil CLI](/stencil-docs/getting-started/installing-stencil#installing_installing-the-stencil-cli)\n* [Set up BitBucket and Download the Marketplace theme's .zip file](/stencil-docs/getting-started/advanced-installation-options/downloadining-a-marketplace-theme#downloading_setting-up-bitbucket)\n* [Install JavaScript Utilities within the Marketplace Theme](/stencil-docs/getting-started/installing-stencil#installing_installing-stencils-js-utilities)\n* [Create an API Account to Prepare Your Store and Tokens](/stencil-docs/getting-started/authentication-and-tokens#authentication_creating-an-api-account)\n* Complete the steps outlined in _Launching Stencil_",
                              "header": {
                                "anchor": "navigating_download-marketplace"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Implement a Custom JavaScript Build System \n\nThe Stencil framework currently uses Webpack 4 as its default Javascript Build system (jspm for older versions), but if you prefer, you can substitute this for a custom JavaScript build system such as Grunt. Steps recommended:\n\n* [Install all necessary prerequisites](/stencil-docs/getting-started/installing-stencil#installing_prerequisites)\n* [Install Stencil CLI](/stencil-docs/getting-started/installing-stencil#installing_installing-the-stencil-cli)\n* [Clone the Cornerstone theme using Github](/stencil-docs/getting-started/installing-stencil#installing_cloning-cornerstone)\n* [Install JavaScript Utilities](/stencil-docs/getting-started/installing-stencil#installing_installing-stencils-js-utilities)\n* [Configure your custom build system](/stencil-docs/getting-started/advanced-installation-options/configuring-webpack-or-custom-build)\n* [Create an API Account to Prepare Your Store and Tokens](/stencil-docs/getting-started/authentication-and-tokens)\n* Proceed to _Launching Stencil_",
                              "header": {
                                "anchor": "navigating_implementing-custom-build"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Blueprint Store Launched before January 26th, 2016\n\nIf your store is **both**:\n* running on a Blueprint theme\n* was launched before Jan. 26th, 2016 \n\nand you would like to enable Stencil development on it, you must perform the following steps:\n\n* Follow the installation path above that corresponds to your development scenario\n* Enable Stencil in the store’s control panel",
                              "header": {
                                "anchor": "navigating_blueprint-store"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Downloading the Cornerstone Theme",
                        "route": {
                          "path": "/downloading-the-cornerstone-theme"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Downloading the Cornerstone Theme from the BigCommerce Control Panel</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#downloading_downloading-cornerstone-zip\">Downloading the Cornerstone .zip file</a></li>\n    <li><a href=\"#downloading_reinstalling-dependencies\">Reinstalling Dependencies and Relaunching</a></li>\n    <li><a href=\"#downloading_next-steps\">Next Steps</a></li>\n\t</ul>\n</div>"
                            },
                            {
                              "type": "callout",
                              "data": {
                                "type": "error",
                                "title": "Back Up Before Reinstalling",
                                "body": "If you are reinstalling over a base theme on which you have already begun development, first back up at least your theme's .stencil file. This file contains your store URL, your BigCommerce username and access tokens, and other basic settings. Preserving those settings will speed up initializing and launching the new version. To allow complete rollback, back up your whole theme directory. (In a current default installation, this directory is named `cornerstone`. Prior to March 2017, this directory's name defaulted to `stencil`)."
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Downloading the Cornerstone .zip file from the Control Panel\n\n_If you have not yet added Cornerstone to your store, navigate to `Storefront` > `Themes Marketplace` and add the Cornerstone theme to your store._\n\nUse these steps to download a the Cornerstone theme from the store Control Panel: \n\n**Note:** The steps below are required only if you are downloading a clean copy of Stencil's default Cornerstone theme, specifically from the BigCommerce Theme Marketplace. \n\nIf you are downloading a Marketplace theme other than Cornerstone for customization, you must follow the workflow outlined in [Downloading a Marketplace Themes](/stencil-docs/getting-started/advanced-installation-options/downloadining-a-marketplace-theme).\n    \n* Go to `Storefront` -> `My Themes`.\n\n* Click the Cornerstone theme's thumbnail:\n\t* If Cornerstone is the store's currently active theme, click its image thumbnail at the top of the page, under the `Current Theme` heading.\n\t* If Cornerstone is _not_ the current theme, scroll down below the lower My Themes subheading, find, and click the Cornerstone thumbnail.\n\n_The Cornerstone theme's description should zoom to full-page and display a Theme Options drop-down list at the upper right._\n\n* From the `Theme Options` drop-down list, select `Download theme file` to download this Cornerstone release as it was refreshed on Theme Marketplace. \n\n* Unpack the zipped theme to a working directory. This can either be the directory where you have been developing your theme or a new directory.\n",
                              "header": {
                                "anchor": "#downloading_downloading-cornerstone-zip"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Reinstalling Dependencies and Relaunching\n\n* Ensure that your theme includes all current dependencies by repeating the [Stencil Utils installation.](/stencil-docs/getting-started/installing-and-launching/installing-stencil-utils) \n\n* To relaunch, repeat the steps listed in the _Launching Stencil_ section.\n",
                              "header": {
                                "anchor": "#downloading_reinstalling-dependencies"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Next Steps\n\nWhen you are ready to upload your custom theme to a store, follow the instructions in [Bundling and Uploading a Theme](/stencil-docs/prepare-and-upload-a-theme/bundling-and-uploading).",
                              "header": {
                                "anchor": "#downloading_next-steps"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "Distribution of Cornerstone-based themes is subject to BigCommerce's Cornerstone license, including the mandatory incorporation of BigCommerce's copyright statement.",
                                "title": "Distribution of Cornerstone-based Themes",
                                "type": "error"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Downloading a Marketplace Theme",
                        "route": {
                          "path": "/downloadining-a-marketplace-theme"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Downloading a Marketplace Theme from the BigCommerce Control Panel</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#downloading_setting-up-bitbucket\">Setting Up BitBucket SSH Keys</a></li>\n    <li><a href=\"#downloading_downloading-a-marketplace-theme\">Downloading a Marketplace Theme for Customization</a></li>\n    <li><a href=\"#downloading_checking-themes-version\">Checking the Theme's Version</a></li>\n    <li><a href=\"#downloading_jspm-steps\">jspm Steps for Earlier Versions</a></li>\n    <li><a href=\"#downloading_installing-modules\">Installing Modules (Webpack themes)</a></li>\n    <li><a href=\"#downloading_next-steps\">Next Steps</a></li>\n    </ul>\n</div>"
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "BitBucket registry access is required for all Marketplace themes (excluding Cornerstone). jspm Extra Steps (to enable jspm and jspm-git) are required only for theme versions earlier than v1.2.1, as outlined on this article.",
                                "title": "BitBucket Registry Access",
                                "type": "warning"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Setting Up BitBucket SSH Keys\n\nTo set up Stencil CLI for themes other than Cornerstone, you must authorize communication among your local system, the BitBucket registry, and GitHub.\n\n**Note:** _Steps beyond this point require that you have active accounts on both BitBucket and GitHub._\n\nTo authorize ongoing communication, you must set up a secure shell (SSH) key that is shared between BitBucket and GitHub. This is a multi-step process, which is beyond the scope of this documentation. However, we have tested the following instructions and found them to be reliable:\n\n* [Setting up SSH for Git on BitBucket](\nhttps://confluence.atlassian.com/bitbucket/set-up-ssh-for-git-728138079.html)\n\n_Follow the default instructions to create a key in your `~/.ssh/config`_\n\n* [Setting up SSH on GitHub (a series of linked steps)](\nhttps://help.github.com/articles/connecting-to-github-with-ssh/)\n\n",
                              "header": {
                                "anchor": "downloading_setting-up-bitbucket"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "Marketplace themes other than Cornerstone must be purchased in order to be downloadable.\n\nYou are entitled to customize a free or purchased theme for a store that you support. However, the theme's original creator retains rights to that theme's design. So, except for Cornerstone-based themes, you may not upload a derived theme to a public theme marketplace (whether BigCommerce's or third-party), nor sell it privately.",
                                "title": " Theme Access, Copyright/Ownership, and Distribution"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Downloading a Marketplace Theme for Customization\n\nUse these steps to download a theme (other than Cornerstone) available in the store control panel's Storefront Design area. \n\n1. If you have not yet added the theme to your store, start at Storefront Design > Themes Marketplace, and add the theme.\n\n2. Go to `Storefront Design` > `My Themes`.\n\n3. Click the theme's thumbnail:\n\t \n\t* To download the store's currently active theme, click the image thumbnail at the top of the page, under the Current Theme heading.\n\t\n\t* To download an inactive theme, scroll down below the lower My Themes subheading, and click the appropriate theme's thumbnail.\n\nYour selected theme will zoom up to a full-page description and display a Theme Options drop-down list at the upper right.\n\n4. Note the version number displayed under the theme's title and credits. At Checking the Theme's Version below, you will use this number to choose between two installation flows.\n\n5. From the Theme Options drop-down list, select the appropriate Download option. (The options visible depend on your theme's current state:)\n\n\t* Download current theme: Download the theme version that is now active on the storefront. (This option appears only if you selected the Current Theme.)\n\n\t* Download your latest customizations: Download the theme's most recently saved version. (This option appears only for themes that have been customized for this store.)\n\n\t* Download theme file: Download the theme as it was originally uploaded to Theme Marketplace. \n\n6. Unpack the zipped theme to a working directory.\n(In the remainder of this documentation, substitute this working directory's name for the default `stencil` path or the `theme-name` placeholder.)",
                              "header": {
                                "anchor": "downloading_downloading-a-marketplace-theme"
                              }
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1538543505088",
                              "header": {
                                "title": "Theme Options",
                                "subtitle": "Dropdown list options as related to step #5"
                              },
                              "config": {
                                "centered": true,
                                "fluid": true,
                                "bordered": true,
                                "maxWidth": "300",
                                "maxHeight": "300"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "Some versions of the BigCommerce control panel offer you shortcuts for steps 3–5 above, removing the need to click the theme card/thumbnail:\n\n* For your store's currently active theme, look for a version number to the right of the thumbnail. You can select the Advanced drop-down list to display options similar to those at step 5 above.\n\n* For inactive themes, look for a version number at the theme card's lower left. Also, you can select the \"...\" menu at the theme card's lower right to display options similar to those at step 5 above.",
                                "title": "Theme Download Shortcuts"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Checking the Theme's Version\n\nRefer to the theme's version number that you noted above at Downloading a Theme for Customization:\n\n* If the version number is 1.10.0 or higher, the theme uses Webpack as its JavaScript build system. Skip ahead to the simplified installation instructions in Installing Modules (Webpack Themes).\n\n* If the theme's version number is lower than 1.10.0, the theme uses jspm as its JavaScript build system. Follow the steps outlined on [jspm Steps for Earlier Versions]()\n",
                              "header": {
                                "anchor": "downloading_checking-themes-version"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "For version numbers below 1.10.0, consider using the options within control panel > My Themes to download a newer version of the same theme. This will allow you to jump ahead to the streamlined instructions below at Installing Modules (Webpack Themes).\n\n**Note**: These version numbers do not apply to the Cornerstone theme. All currently supported Cornerstone versions use Webpack, and can be refreshed using the even simpler refresh instructions in [Downloading the Cornerstone Theme]().",
                                "title": "Consider Updating Your Theme",
                                "type": "warning"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## jspm Steps for Earlier Versions\n\nSee [this legacy article](https://stencil.bigcommerce.com/v1.0/docs/legacy-configuring-with-jspm) to access the steps necessary for themes installed with jspm.",
                              "header": {
                                "anchor": "downloading_jspm-steps"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Installing Modules (Webpack themes)\n\nFor Marketplace themes whose version number is 1.10.0 or higher, simply use npm to install the modules required to access Stencil JavaScript events:\n\n1. Navigate to your theme directory. This example assumes that this target directory has the default name Cornerstone:\n\n`cd cornerstone`\n\n2. Within that directory, install the stencil-utils module to ensure that all your dependencies are up to date:\n\n`npm install`",
                              "header": {
                                "anchor": "downloading_installing-modules"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Next Steps\n\nTo authorize, initialize, and launch your theme, follow the steps in the _Launching Stencil_ section.\n\nLater, when you are ready to upload your customized theme to a store, you should follow the zipping and uploading instructions in Bundling and Submitting a Theme and Troubleshooting Theme Uploads.\n",
                              "header": {
                                "anchor": "downloading_next-steps"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "When you issue the `stencil init` command to authorize and initialize Stencil, you might receive error messages about resolving BitBucket as an SSH host. These errors occur when you have not recently logged into BitBucket.\n\nWhen prompted, enter the BitBucket password you used in Setting Up BitBucket SSH Keys above. This will clear the errors and allow you to proceed.",
                                "type": "warning",
                                "title": "BitBucket Reauthentication"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Theme Updates & Version Control",
                        "route": {
                          "path": "/theme-updates-and-version-control"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Theme Updates and Version Control</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#theme-updates_customizing\">Customizing Strategically for Easier Updates</a></li>\n    <li><a href=\"#theme-updates_goruck-best-pracs\">GoRuck's Best Practices for Handling Theme Updates</a></li>\n    <li><a href=\"#theme-updates_synchronizing-cornerstone\">Synchronizing Your Theme With Cornerstone's Updates</a></li>\n    <li><a href=\"#theme-updates_synchronizing-multiple\">Synchronizing Updates for Multiple Themes</a></li>\n\t</ul>\n</div>\n\n"
                            },
                            {
                              "type": "callout",
                              "data": {
                                "title": "Distributed Version Control via Git",
                                "body": "Many techniques discussed below rely on GitHub's _distributed version control_ model and features. For the underlying principles, please see [Git's own documentation](https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control)."
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Customizing Strategically for Easier Updates\n\nIn order to keep your store and Stencil theme performant, it's crucial to know the best way to set up your customized Stencil theme in order to smoothly incorporate future bug fixes, enhancements, and updates that are applied to the base theme. ",
                              "header": {
                                "anchor": "theme-updates_customizing"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## GoRuck's Best Practices for Handling Theme Updates\n\nThe guidelines provided are from Web Developement team from the BigCommerce client, [GoRuck](https://www.goruck.com/). \n\nGoRuck's scenario addresses maintaining a single custom theme that is based on a third-party Marketplace theme (a theme other than Cornerstone). These guidelines can also apply to maintaining a custom theme based on Stencil's default Cornerstone theme.\n\n### Handling and Managing Theme Updates\n\n_We've made significant changes to our theme, and one principle that I've found successful is isolating my changes as much as possible. I try to put my changes into their own files, whether they're changes to templates, JavaScript, or SCSS._\n\n_I also name all my files, CSS classes and identifiers, and JavaScript methods and classes with a `gr-` prefix (as an abbreviation for our company, GORUCK LLC). Also, any changes I make to standard theme files are identified with a comment, such as:_\n\n`//Go Ruck Customization`\n\t\t\n_For example, I have a file in `assets/scss/` named `gr-theme.scss`. All of the styles I've added to the theme are either in this file, or imported by this file. So for styling, my only changes to the theme itself are in a handful of places where I had to change an existing theme style (identified with a comment), plus this one line in `templates/layout/base.html`:_\n\n`{{{stylesheet '/assets/css/gr-theme.css'}}}`\n\n_I've found that this approach provides several advantages:_\n\n* It makes it easier to distinguish my custom code from code supplied by the default theme.\n* It makes it less likely that my code will get intermingled with the standard theme code. This, in turn, prevents my code from unexpectedly being affected by theme updates.\n* It makes it easier to merge base-theme updates into my theme code.\n\n### Comparing and Merging Theme Updates\n\n_Having isolated my changes as much as I can, I identify theme changes and updates by comparing base themes, rather than by comparing base themes to my customized theme. When a new version of the theme is released, I download the `.zip` file from the BigCommerce Control Panel._\n\n_I then use a desktop diff tool (Beyond Compare) to \ncompare the new version to the .zip file of the theme's previous release. I ignore changes in the .zip file's\n `meta/` and `parsed/` folders, and to its `manifest.json`, and do a `Compare Contents` on the rest of the files._\n\nUltimately, I need to examine the changes carefully, to identify any changes that might affect, or be affected by, my customizations. And I need to test thoroughly. But comparing the stock themes to each other reduces the number of changes I have to examine. \n\nAlso, because I isolate my changes, most of the theme changes can be copied directly into the corresponding file in my customized theme. In practice, this means that I can limit my testing to the areas affected by changes in the standard theme, rather than having to re-test all my own changes.\n\nI personally find that it is also helpful to migrate *every* theme update into my customized version, as the update is released. If I were to wait, and to allow changes to accumulate and become more substantial, I think it would be more difficult to adequately test – and correctly integrate – the changes. Similarly, I'm grateful to the developer of our base theme (Pixel Union) for updates that have always made small, incremental changes.\n\n### Dynamic Content Injection\n\n_We've also come up with a variety of techniques for dynamically placing content on a page. For example, we can dynamically add tabs to a product page, using content stored on our WebDAV. Similarly, we can inject content from an external file into the body of a page. This allows us to put something that appears in many places, like a sizing chart, in a single place where it can be easily updated._\n\n_Or, we can use the BigCommerce control panel's various HTML editors – for Products, Categories, and Content > Web Pages – to inject content into predefined \"dropzones\" (custom div's). This allows us to generate a wide variety of content pages using a single custom template._\n\nAll of these techniques minimize the complexity of merging base-theme updates into our customized theme. For further details and examples on how we implement these techniques, see [Dynamic Content Rendering on Stencil Storefronts](/stencil-docs/conditional-logic-examples/dynamic-content-rendering).",
                              "header": {
                                "anchor": "theme-updates_goruck-best-pracs"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Synchronizing Your Theme With Cornerstone's Updates\n\nThis section addresses two methods that will allow you to keep your customized Stencil theme up to date with Cornerstone's updates, enhancements, and bug fixes:\n\n* Updating Lightly Customized Themes\n* Updating Heavily Customized Themes\n\nWe've adapted these tips from one a Stencil theme developer who is an active member of the BigCommerce Community.\n\n### Updating Lightly Customized Themes\n\nIn this scenario, you can use Git's cherry-pick option to merge in specific Cornerstone commits.\n\nUse the Stencil Framework Release Notes to look up specific updates' commit hashes on the Cornerstone repository.\n\nSee this Stack Overflow explanation of how to use the cherry-pick option.\n\n### Updating Highly Customized Themes\n\nHere, unexpected errors from automatic merges can be time-consuming to undo. So, consider this handtooled approach:\n\nUse GitHub's Web interface to inspect each Cornerstone commit (change) of interest. Each commit will show you – for all changed files – a diff view highlighting any deletions (left/red) and any insertions (right/green).\n\nFor changes that you want to incorporate into your theme, access the source code.\n\nAs illustrated below, you can either access individual files via Github's Raw view, or you can download a .zip of the whole Cornerstone repo in order to access all files locally.\n\nManually edit the changes into your theme's affected files.\n\n### Accessing Individual Files\n\nIn the file-by-file approach: For each commit that you would like to incorporate into your custom theme, do the following for each of the commit's changed files.\n\nIn GitHub's diff view, click the View button at the upper right. (We show it highlighted with a red border and a tooltip.) You will see the file's full contents, as shown below.\n\nClick the Raw button at the upper right (which we show highlighted in red). This will reveal the file's full contents as plaintext – allowing you to copy and paste without picking up the table metadata used to display line numbering.\n\n### Downloading the Cornerstone Repository\n\nThis approach downloads all theme files at once, allowing you to copy/paste their relevant contents locally.\n\n1. Navigate to the [Cornerstone Github Repository](https://github.com/bigcommerce/cornerstone).\n2. On the right hand side of the page, click the green `Clone or download` button, and select Download ZIP.\n\n\n\n",
                              "header": {
                                "anchor": "theme-updates_synchronizing-cornerstone"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Synchronizing Updates for Multiple Themes\n\nThese tips run from simpler to more-complex scenarios, with a similar progression from simpler to more-complex tools.\n\n### Enlist Your Clients in Future-Proofing\nWarn your clients that editing their themes' .html files (via Edit Theme Files) will complicate future theme upgrades. Ask clients to keep a record of such changes, so that when you release a theme update, they can reapply their changes themselves.\n\n### Max Out Variations\nFor very simple theme differences (like changing color values), you can maintain a different theme variation per storefront or use case. Given Stencil's limit of four variations per theme, this approach obviously has limited scalability.\n\n### Customize Outside the Theme\nRely as much as possible on dynamic aspects of the BigCommerce control panel, like the Footer Scripts editor. (Control‑panel customizations are saved per store, without complicating your theme's codebase.) For other examples of control-panel options, please see Dynamic Content Injection above.\n\n### Use Conditional Logic within Master Templates\nFor subtle changes to a portion of a template file, use Handlebars helpers and conditionals to render different HTML for each client's flavor of the theme.\n\n### Parallel GitHub Repo's\nWhere different clients' theme flavors diverge into completely custom pages – for example, each client has a wildly different homepage layout – Git's systematic version control helps. You will probably want to fork or branch separate repo's, one per client, and maintain/update them in parallel.\n\nAs with relying on theme variations, this approach has limited scalability. Beyond a certain number of clients/themes (certainly by 10), it becomes cumbersome.\n\n### Buffered Updates to Multiple Themes\nFor greater scalability, you might choose to create your own master fork/branch of Cornerstone for your group of themes. Keep that fork/branch in sync with Cornerstone updates, then cascade the updates to theme-specific repo's that you fork/branch from this master. (This extends the approach of isolating customizations, outlined above.)",
                              "header": {
                                "anchor": "theme-updates_synchronizing-multiple"
                              }
                            }
                          ]
                        },
                        "config": {
                          "sidebar": {
                            "token": ""
                          }
                        }
                      },
                      {
                        "title": "Configuring Webpack or a Custom Build System",
                        "route": {
                          "path": "/configuring-webpack-or-custom-build"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Configuring Webpack or a Custom Build System</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#configuring_webpack-jspm-other\">Webpack, jspm, or Other JavaScript Managers</a></li>\n    <li><a href=\"#configuring_webpack-specific\">Webpack-Specific Configuration</a></li>\n    <li><a href=\"#configuring_build-system\">Build-System Configuration File</a></li>\n    <li><a href=\"#configuring_watched-folders\">Watched Folders: watchOptions Object</a></li>\n    <li><a href=\"#configuring_javascript-rebundling\">JavaScript Rebundling: development Function</a></li>\n    <li><a href=\"#configuring_theme-packaging\">Theme Packaging: production Function</a></li>\n\t</ul>\n</div>\n\n\n\n\n"
                            },
                            {
                              "type": "text",
                              "data": "## Webpack, jspm, or Other JavaScript Managers\n\nStencil themes are Node.js applications, and therefore contain dependencies on other JavaScript libraries. For the default Cornerstone theme, we provide the [Webpack](https://webpack.github.io/docs/) build manager to handle these dependencies. \n\nAs you develop and customize a theme based on Cornerstone, you have option to reconfigure Webpack's watched folders, and to even substitute a different build system. These options are explained below.\n\nAll themes in the BigCommerce Theme Marketplace use Webpack. However, older versions of certain themes used the jspm JavaScript dependency manager instead of Webpack. Please see this page to determine (by version number) whether you are developing based on one of these earlier versions, and to find the required jspm setup procedures.",
                              "header": {
                                "anchor": "configuring_webpack-jspm-other"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "type": "info",
                                "body": "The steps below are required only if you plan to modify or override the default Webpack-based workflow that installs with Stencil's default Cornerstone theme or and current theme in the BigCommerce Theme Marketplace. If you do not require these advanced configuration options, you can safely skip this page.",
                                "title": "Optional Workflow"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Webpack-Specific Javascript Diagnostics\n\nThe following Webpack configuration options can aid in troubleshooting.\n\nIf JavaScript errors in your browser's developer tools are not reporting filenames and line numbers, try changing your `webpack.conf.js` file's [sourcemap](https://webpack.js.org/guides/build-performance/#devtool) entry from:\n\n```\ndevtool: 'source-map'\n```\nto:\n\n```\ndevtool: 'eval-source-map'\n```\n\nThe `eval-source-map` option is slower, but more verbose. This [Webpack Devtool Configuration](https://webpack.js.org/configuration/devtool/) article provides an overview of all devtool options and details regarding each.",
                              "header": {
                                "anchor": "configuring_webpack-specific"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Build-System Configuration File\n\nTo take advantage of automatic JavaScript bundling and browser refresh, Stencil themes require the [`stencil.conf.js`](https://github.com/bigcommerce/cornerstone/blob/master/stencil.conf.js) file. If you would like to enable a custom build system, you will need to edit this file.\n\nWithin `stencil.conf.js`, Stencil CLI looks for the exported `watchOptions` object, and `development` and `production` callbacks, shown below. \n\nContinue reading to take a closer look at each of these three references.",
                              "header": {
                                "anchor": "configuring_build-system"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Watched Folders: watchOptions Object\n\nThe `watchOptions` object defines directories for the [Browsersync](https://browsersync.io/docs) preview engine to watch or ignore, in two respective lists. You are free to edit these lists:\n\n```\nvar watchOptions = {\n    // If files in these directories change, reload the page.\n    files: [\n        '/templates',\n        '/lang'\n    ],\n\n    //Do not watch files in these directories\n     ignored: [\n        '/assets/scss',\n        '/assets/less',\n        '/assets/css',\n        '/assets/dist',\n    ]\n};\n```",
                              "header": {
                                "anchor": "configuring_watched-folders"
                              }
                            },
                            {
                              "type": "text",
                              "data": "### JavaScript Rebundling: `development` Function\n\nUpon the command-line instruction `stencil start`, Stencil CLI will look for and call the `development` function. \n\nIn the base Cornerstone theme, we have created a Webpack watcher to trigger a browser reload whenever theme edits cause JavaScript to be rebundled to the theme's `bundle.js` file. This watcher uses options configured in the `webpack.conf.js` file passed by `webpackConfig`. So a JavaScript rebuild will refresh the browser:\n\n```\nfunction development() {\n    webpack(webpackConfig).watch({}, err => {\n        if (err) {\n            console.error(err.message, err.details);\n        }\n\n        process.send('reload');\n    });\n}\n```",
                              "header": {
                                "anchor": "configuring_javascript-rebundling"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Theme Packaging: `production` Function \n\nWhen you issue the command-line instruction `stencil bundle`, to process and package a completed theme for upload to a store, Stencil CLI will look for and call the `production` function. This function passes a callback as its first argument to support asynchronous builds. \n\nThe callback must be invoked somewhere inside the `production` function to notify Stencil CLI that the theme-specific build has completed and is ready to package:\n\n```\nfunction production() {\n    webpackConfig.watch = false;\n    webpackConfig.devtool = false;\n    webpackConfig.plugins.push(new webpack.LoaderOptionsPlugin({\n        minimize: true,\n    }));\n    webpackConfig.plugins.push(new webpack.optimize.UglifyJsPlugin({\n        comments: false,\n        compress: {\n            warnings: true,\n        },\n        sourceMap: false, // Toggle to turn on source maps.\n    }));\n\n    webpack(webpackConfig).run(err => {\n        if (err) {\n            console.error(err.message, err.details);\n            throw err;\n        }\n\n        process.send('done');\n    });\n}\n\nif (process.send) {\n    // running as a forked worker\n    process.on('message', message => {\n        if (message === 'development') {\n            development();\n        }\n\n        if (message === 'production') {\n            production();\n        }\n    });\n\n    process.send('ready');\n}\n```",
                              "header": {
                                "anchor": "configuring_theme-packaging"
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ],
              "blocks": []
            }
          },
          {
            "title": "Theme Development Quickstart",
            "route": {
              "path": "/development-quickstart"
            },
            "data": {
              "children": [
                {
                  "title": "Customizing a Theme",
                  "route": {
                    "path": "/customizing-a-theme"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Customizing a Theme</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#customizing_video\">Customizing a Theme: Video Series</a></li>\n\t\t<li><a href=\"#customizing_config-json\">Configuring config.json Keys</a></li>\n    <li><a href=\"#customizing_basic-changes\">Making Basic Design/Layout Changes</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Customizing a Theme: Video Series\n\nIf you prefer to consume by watching video tutorials, this video series will quickly get you started in editing and customizing your Stencil theme.\n\n1. [Customizing a Theme (Part 1) - Config.json and Templates Directory](https://www.youtube.com/watch?v=HORseXHq-nI&index=6&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0)\n2. [Customizing a Theme (Part 2) - Lang and Assets Directories](https://www.youtube.com/watch?v=OUg8ksWQGA0&index=7&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0)\n3. [Customizing a Theme (Part 3) - Custom Pages, Fonts, and Icons](https://www.youtube.com/watch?v=ZwrVN5QrEZY&index=8&list=PLwTYtMwfzbe7EZiIWPAmPtuwRHkY7BG-0)\n\nContinue reading if you would like information to supplement the videos, or if you would get started customizing your theme by reading and following along.",
                        "header": {
                          "anchor": "customizing_video"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Configuring config.json Keys\n\n**Note:** these instructions will refer to the top-level theme directory as _cornerstone_.\n\nThe first thing you must do when beginning theme developement is configure certain values in the [cornerstone/config.json file](https://github.com/bigcommerce/cornerstone/blob/master/config.json). For example, here are the first few key/value sets in Cornerstone's config.json:\n\n```\n{\n\"name\": \"Cornerstone\",\n\"version\": \"1.0.0\",\n\"meta\": {\n  \"price\": 0,\n   \"documentation_url\": \t\t\n   \"https://support.bigcommerce.com/articles/Public/Cornerstone-\n   \tTheme-Manual\",\n  ...\n  }\n}\n```\n\nFor further details about `config.json` settings and a breakdown of each key/value set, see the in-depth [config.json metadata article](/stencil-docs/stencil-theme-editor/config-json-metadata). \n\nThe next code block shows how you might change these values to reflect your own theme’s name, version number, price on Theme Marketplace, and documentation URL:\n\n```\n{\n\"name\": \"MyTheme\",\n\"version\": \"1.1.2\",\n\"meta\": {\n  \"price\": 10000,\n  \"documentation_url\": \"https://www.mywebsite.com/theme-docs/my-theme.html\",\n  ...\n  }\n}\n```",
                        "header": {
                          "anchor": "customizing_config-json"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Making Basic Design & Layout Changes\n\n### Changing the Footer’s Background Color (config.json)\n\nIn a browser, [load the local version](/stencil-docs/getting-started/launching-stencil/running-stencil-locally) of your storefront (by default, [http://localhost:3000](http://localhost:3000). Note the page footer’s appearance.\n\nNext, open your `<theme-name>/config.json` in a text editor. Change the page footer’s default background color to red, by changing the value `\"585858\"` to `\"#a96e6e\"` as indicated below:\n```\n{\n \"settings\": {\n  \"footer-backgroundColor\": \"#a96e6e\",\n  }\n}\n```\n\nThis new value will propagate through the theme’s CSS files and will globally change your footer. Refresh your store’s home page in your browser to verify the change.\n\n### Changing the Product Image Size (config.json and Handlebars)\n\nIn the `<theme-name>/config.json` file’s `\"settings\"` section, you can define theme-wide image sizes for rendering dynamic content. The excerpt below shows this section’s predefined keys and values (dimensions in pixels) for product thumbnails, galleries, and other standard sizes.\n\n```\n{\n  \"settings\": {\n     //...\n    \"logo_size\": \"250x100\",\n    \"brand_size\": \"190x250\",\n    \"gallery_size\": \"300x300\",\n    \"productgallery_size\": \"500x659\",\n    \"product_size\": \"500x659\",\n    \"productthumb_size\": \"100x100\",\n    \"thumb_size\": \"100x100\",\n    \"zoom_size\": \"1280x1280\",\n    \"blog_size\": \"190x250\",\n    // ...\n  },\n}\n```\n\nFor definitions of each key’s usage, please see the `config.json` reference. You can also create theme-wide custom sizes by defining new key/value pair properties in the `config.json` file.\n\nBelow is an example of code that calls one of the above variables, in Cornerstone's,`<theme-name>/templates/components/products/card.html` file. (This file defines the display of products’ panels or \"cards\" on multiple storefront pages.): \n\n\n```<img class=\"card-image\" src=\"{{getImage image 'productgallery_size' (cdn theme_settings.default_image_product)}}\" alt=\"{{image.alt}}\">\n```\n\nNote the `{{getImage image 'productgallery_size'}}` statement, a Handlebars reference to the standard `productgallery_size` size defined in config.json.\n\nFurther examples will guide you in customizing your storefront using the Handlebars templating language. \nFor now, open `config.json` and try redefining some of the default size values shown above. Then, refresh your storefront’s home page (or other pages or modals) in your browser, and note how the display of product images changes to match your new global size values.\n\n### Redesigning Page Elements (config.json and Handlebars)\n\nThe following example demonstrates how to redesign a storefront page’s layout by editing Handlebars statements in the page’s HTML. The goal here is simply to move the Product landing page’s \"Customers Also Viewed\" panel above that page’s \"Product Reviews\" panel.\n\nWith your storefront’s local version loaded in a browser, click through to any product, and note the relative positions of the \"Product Reviews\" and \"Customers Also Viewed\" panels.\n\nNext, open your working theme’s `<theme-name>/templates/components/products/tabs.html file`. As indicated below, delete or comment out the `similar_by_views` components that are shown below:\n\n```\n// delete the following component:\n  {{#if product.similar_by_views}}\n      <li class=\"tab\" role=\"presentational\">\n          <a class=\"tab-title\" href=\"#tab-similar\" role=\"tab\" tabindex=\"0\" aria-selected=\"false\" controls=\"tab-similar\">{{lang 'products.similar_by_views'}}</a>\n      </li>\n  {{/if}}\n</ul>\n\n\n// delete the following component:\n\n{{#if product.similar_by_views}}\n  <div role=\"tabpanel\" aria-hidden=\"true\" class=\"tab-content has-jsContent\" id=\"tab-similar\">\n      {{> components/products/carousel products=product.similar_by_views columns=6}}\n  </div>\n{{/if}}\n</div>\n```\n\nNow open your `/templates/pages/product.html` file. As indicated below (in bold), add the `similar_by_views` component with a reusable carousel wrapper:\n\n```\n{{#if product.videos.list.length}}\n  {{> components/products/videos product.videos}}\n{{/if}}\n\n{{#if product.similar_by_views}}\n   {{> components/products/carousel products=product.similar_by_views columns=6}}\n{{/if}}\n\n{{#if settings.show_product_reviews}}\n  {{> components/products/reviews reviews=product.reviews product=product urls=urls}}\n{{/if}}\n```\n\nIn your browser, refresh the product page, and check the new arrangement of these components.",
                        "header": {
                          "anchor": "customizing_basic-changes"
                        }
                      }
                    ],
                    "children": []
                  }
                },
                {
                  "title": "config.json Resource Interactions",
                  "route": {
                    "path": "/config-json-resource-interactions"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1><code>config.json</code> Interactions</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#config_new\">New Products Example</a></li>\n    <li><a href=\"#config_changing\">Changing Page Layout using Local Front Matter</a></li>\n    <li><a href=\"#config_retrieving\">Retrieving Specific config. Values through Sass</a></li>\n    <li><a href=\"#config_adding\">Adding/Removing Components</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "To customize your theme’s appearance at a global level, the values that you define in the \n`<theme-name>/config.json` file interact with local resources. Your config.json definitions set global defaults for templates, front-matter attributes, and Handlebars resources throughout your theme. You can also define custom variables in config.json, named according to your needs.\n\n## New Products Example\n\nTo see how interactions with `config.json` values work, first note the default values in `config.json` for the `homepage_new_products_count` and `product_list_display_mode` keys:\n\n```\n{\n\"settings\": {\n  \"homepage_new_products_count\": 12,\n  \"product_list_display_mode\": \"grid\",\n  }\n}\n```\n\nNext, open your `<theme-name>templates/pages/home.html` file. Highlighted in bold below is a statement that uses the theme-wide settings above to customize an API request to the server.\n\n(Note the reference to the `homepage_new_products_count` key in the file’s front matter, between the two \"---\" delimiters. If your current theme’s `home.html` front matter omits this `products:new:limit` definition, paste it in for this demonstration.)\n\n```\n---\nproducts:\n  new:\n    limit: {{theme_settings.homepage_new_products_count}}\n  featured:\n    limit: {{theme_settings.homepage_featured_products_count}}\n  top_sellers:\n    limit: {{theme_settings.homepage_top_products_count}}\ncarousel: {{theme_settings.homepage_show_carousel}}\nblog:\n    recent_posts:\n        limit: {{theme_settings.homepage_blog_posts_count}}\n---\n{{#partial \"hero\"}}\n\n<!-- [...] -->\n\n{{/partial}}\n{{> layout/base}}\n```\n\nIf you load your storefront’s home page (by default, [http://localhost:3000](http://localhost:3000), you should see a \"New Products\" section that displays 12 products in a grid.\n",
                        "header": {
                          "anchor": "config_new"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Changing Page Layout Using Local Front Matter\n\nLook again at your `<theme-name>templates/pages/home.html` file’s front matter. As in the New Products example above, note how the presence and number of featured products correlates to your theme’s `config.json` setting:\n\n```\n---\n[...]\nproducts:\n  featured:\n      limit: {{theme_settings.homepage_featured_products_count}}\n[...]\n---\n```\n\nNext, try changing the `limit: {{theme_settings.homepage_featured_products_count}}` statement in the `home.html` file to a hard-coded limit: 2, as indicated below in bold:\n\n```\n---\nproducts:\n  // [...]\n  featured:\n      limit: 2\n  // [...]  \n---\n\n<!-- [...] -->\n\n{{#partial \"page\"}}\n\n<!-- [...] -->\n\n<div class=\"main full\">\n  {{#if products.featured}}\n      {{> components/products/featured products=products.featured columns=2}}\n  {{/if}}\n</div>\n{{/partial}}\n{{> layout/base}}\n```\n\nIf you now reload your storefront’s home page in your browser, you should see the number of displayed \"Featured Products\" change from its default number (as specified in `config.json`) to two.\n",
                        "header": {
                          "anchor": "config_changing"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Retrieving Specific config.json Values through Sass\n\nIn `config.json`, global variables bring dynamic values into the framework. Sass imports these global variables’ values to gracefully handle data like theme-wide colors’ hexadecimal values, and to make the data available to Theme Editor. Here is one short snippet from `config.json`:\n\n```\n{\n// [...]\n\"color-highlight\": \"#00abc9\",\n\"color-highlightDark\": \"#f2f2f2\",\n\"color-highlightDarker\": \"#dfdfdf\",\n// [...]\n}\n```\n\nHere are the corresponding references in the default Stencil theme’s `<theme-name>/assets/scss/settings/global/color/_color.scss` file:\n\n```\n// [...]\n$color-highlight:       stencilColor(\"color-highlight\");\n$color-highlightDarker: stencilColor(\"color-highlightDarker\");\n$color-highlightDark:   stencilColor(\"color-highlightDark\");\n// [...]\n```\n\nIn `config.json`, try redefining one or more color variables to hex values of your choice. Then re-render your theme’s home page to see the effects.\n",
                        "header": {
                          "anchor": "config_retrieving"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Adding/Removing Components\n\nThe storefront properties that Stencil abstracts as Handlebars resources are completely portable between HTML files. For an example of how this works, first open any storefront page in a browser. In the page’s footer, note the appearance of product Categories.\n\nNext, open your `<theme-name>/templates/components/common/footer.html` file in a text editor. As indicated below, cut (or copy and comment out) the code section shown below (characterized by the strikethrough), and keep it on your Clipboard:\n\n```\n<footer class=\"footer\" role=\"contentinfo\">\n  <div class=\"container\">\n      <section class=\"footer-info\">\n          <!-- [...] -->\n<article class=\"footer-info-col footer-info-col--small\">\n  <h5 class=\"footer-info-heading\">{{lang 'footer.categories'}}</h5>\n  <ul class=\"footer-info-list\">\n      {{#each categories}}\n      <li>\n          <a href=\"{{url}}\">{{name}}</a>\n      </li>\n      {{/each}}\n  </ul>\n</article>\n```\n\nIf you now refresh the storefront page in your browser, the Categories list should disappear from the footer.\n\nNext, create a new `<theme-name>/templates/components/footer/ `subdirectory. Paste the code block from the previous cut/copy into a new file named `<theme-name>/templates/components/footer/categories.html`, and save it:\n\n```\n<article class=\"footer-info-col footer-info-col--small\">\n  <h5 class=\"footer-info-heading\">{{lang 'footer.categories'}}</h5>\n  <ul class=\"footer-info-list\">\n      {{#each categories}}\n      <li>\n          <a href=\"{{url}}\">{{name}}</a>\n      </li>\n      {{/each}}\n  </ul>\n</article>\n```\n\nNext, back in `/templates/components/common/footer.html`, add a reference to your new path/file, as indicated below in comments:\n\n```\n<footer class=\"footer\" role=\"contentinfo\">\n  <div class=\"container\">\n      <section class=\"footer-info\">\n          <!-- [...] -->\n          {{> components/footer/categories}}\n          <!-- [...] -->\n      </section>\n  </div>\n</footer>\n```\n\nIf you now refresh storefront pages in your browser, the Categories list should reappear in the footer. The component returns even though you have moved its data resources to an arbitrary new location, and referenced them indirectly.\n",
                        "header": {
                          "anchor": "config_adding"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Customizing Javascript",
                  "route": {
                    "path": "/customizing-javascript"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Customizing Javascript</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#customizing-javascript_customizing\">Customizing Javascript for Inidivudal Pages</a></li>\n    \t<li><a href=\"#customizing-javascript_bringing-handlebars\">Bringing Handlebars Context Values into JavaScript</a></li>\n\t\t<li><a href=\"#customizing-javascript_installing-various\">Installing Various JavaScript Libraries</a></li>\n    <li><a href=\"#customizing-example\">Example Links</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Customizing JavaScript for Individual Pages\n\nHere is a very simple example of customizing the JavaScript provided in the default Stencil theme.\nIn a text editor, open the `<theme-name>/assets/js/theme/product.js` file. At the top of the Product class, insert the \"Hello World\" statement shown in bold below:\n\n\t\n```\n\texport default class Product extends PageManager {\n  constructor() {\n      super();\n  }\n\n  before(next) {\n      next();\n  }\n\n  loaded(next) {\n      console.log(\"Hello World\");\n    // Init collapsible\n    collapsible();\n    [...]\n}\n```\n\t\nIn your browser, refresh any product-details pop-up or page to see your new `\"Hello World\"` message.\n",
                        "header": {
                          "anchor": "customizing-javascript_customizing"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Bringing Handlebars Context Values into JavaScript\n\nWithin Stencil pages, you can inject any variables from the Handlebars context into your client-side JavaScript. You do so by calling the Stencil custom Handlebars helper named `inject`, shown below:\n\n`{{inject 'productThumbSize' theme_settings.productthumb_size}}`\n\nYou could inject the above statement into a page template rendered with `page_type = \"Product\"` (for example: `<theme-name>/templates/pages/product.html`). Stencil’s `PageManager` class will be provided this context:\n\n```\nexport default class Product extends PageManager {\n  constructor() {\n      super();\n  }\n\n  before(next) {\n      next();\n  }\n\n  loaded(next) {\n      console.log(\"Hello World\");\n      console.log(this.context.productThumbSize);\n  }\n\n}\n```\n\nNote that the `console.log(this.context.themeImageSizes)`; statement will report your configured image size, following the `\"Hello World\"` message that you previously defined in the Customizing JavaScript for Individual Pages above.\n",
                        "header": {
                          "anchor": "customizing-javascript_bringing-handlebars"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Installing Various JavaScript Libraries\n\nOnce you have installed the default Stencil theme, you can add custom JavaScript libraries. To see how this works, find your favorite library on GitHub – for example: https://github.com/jquery/jquery.\n\nTo install this particular library for Stencil themes, you would entering the following on the command line:\n\n`npm install jquery`\n\nNext, you would open `<theme-name>/assets/js/theme/product.js`, and insert the statements excerpted below:\n\n```\nimport $ from 'jquery';\n\n$('.myElement').click(() => {\n    alert(\"You clicked myElement\");\n});\n```\n\nAs always, for specifics, refer to your chosen library’s documentation.\n\n\n",
                        "header": {
                          "anchor": "customizing-javascript_installing-various"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Example Links \n\nFor more-extended examples of adding custom JavaScript (whether your own or third-party) to a theme, please see this documentation's JavaScript Customization section.",
                        "header": {
                          "anchor": "customizing-example"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Rendering HTML with Ajax",
                  "route": {
                    "path": "/rendering-html-with-ajax"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Rendering HTML with Ajax</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#rendering_rendering-html\">Rendering HTML with Ajax</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Rendering HTML with Ajax\n\nStencil allows you to render dynamic components on the fly. For example, note this default code in `<theme-name>/templates/components/products/quick-view.html` (note also this file name, which Handlebars will reference later in this example):\n\n```\n<div class=\"modal-body quickView\">\n  <a href=\"#\" class=\"modal-close\" aria-label=\"Close\">&#215;</span></a>\n  {{> components/products/product-view}}\n</div>\n```\n\nTo render a different template, you would instead reference that template’s file name. For example, assume that you want to substitute a custom template that you’ve named: `<theme-name>/templates/components/products/quicker-view.html`.\n\nThis next code block is from the Stencil default theme’s `/assets/js/theme/global/quick-view.js` file. Note the `quicker-view.html` statements brought in to reference the new file name:\n\n```\nlet $modal = $('#modal'),\n  $modalContent = $('.modal-content', $modal),\n  $modalOverlay = $('.loadingOverlay', $modal),\n  modalModifierClasses = 'modal--large';\n\n$('body').on('click', '.quickview', (event) => {\n  let productId = $(event.currentTarget).data('product-id');\n\n  event.preventDefault();\n\n  // clear the modal\n  $modalContent.html('');\n  $modalOverlay.show();\n\n  // open modal\n  $modal.foundation('reveal', 'open');\n\n\t//quicker-view.html statement, replacing the standard template's quick-view.html template\n  utils.api.product.getById(productId, {template: 'products/quicker-view'}, function done(err, response) {\n      $modalOverlay.hide();\n      $modalContent.html(response);\n\n      return new ProductDetails($modalContent, context);\n  });\n});\nlet $modal = $('#modal'),\n  $modalContent = $('.modal-content', $modal),\n  $modalOverlay = $('.loadingOverlay', $modal),\n  modalModifierClasses = 'modal--large';\n\n$('body').on('click', '.quickview', (event) => {\n  let productId = $(event.currentTarget).data('product-id');\n\n  event.preventDefault();\n\n  // clear the modal\n  $modalContent.html('');\n  $modalOverlay.show();\n\n  // open modal\n  $modal.foundation('reveal', 'open');\n\n\t// \n  utils.api.product.getById(productId, {template: 'products/quicker-view'}, function done(err, response) {\n      $modalOverlay.hide();\n      $modalContent.html(response);\n\n      return new ProductDetails($modalContent, context);\n  });\n});\n```",
                        "header": {
                          "anchor": "rendering_rendering-html"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Testing and Debugging Your Theme",
                  "route": {
                    "path": "/testing-and-debugging-your-theme"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Testing and Debugging Your Theme</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#testing_testing-and-debugging\">Testing and Debugging Your Theme</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Testing and Debugging Your Theme\n\nThe Stencil framework provides built-in debugging tools to aid in your custom front-end development.\nWhen you want to see what data is available on the page you are working on, you can simply add the `debug` query string to your store’s localhost URL. Here is an example:\n\n`http://localhost:3000/product/this-is-a-sample-product?debug=context\n`\n\nThis will return a list of all the objects available on the page, in JSON syntax.\n\nIf you want to view the available JSON objects and rendered page at the same time, simply change the `debug` value to `bar`. Here is an example:\n\n`http://localhost:3000/product/this-is-a-sample-product?debug=bar`\n\n### Using Browsersync to Render the Store on Desktop/Tablet/Mobile for Testing\n\nThe Stencil framework uses Browsersync to help you rapidly test your storefront themes across devices of different viewports. After you launch Stencil with stencil start, your console window will display several IP addresses below the BigCommerce \"B\".\n\n```\n                                     `+h\n                                   `+ddd\n                                 .oddddd\n                               .oddddddd\n                             -sddddddddd\n                          `-sddddddddddd\n                         -shdddddddddddd\n                         ...-:+ydddddddd\n                    `......`   `+ddddddd\n                    -ddddddh-    ddddddd\n                `   .yyyyyyo.  `+ddddddd\n              .o/    `````    :ydddddddd\n            -ohd+   `//////:` `.sddddddd\n          -sdddd+   -ddddddds   `hdddddd\n        :sdddddd+   .sssssso-   `ddddddd\n      :ydddddddd+              -yddddddd\n    /yddddddddddy+++++++++++oshddddddddd\n `/hdddddddddddddddddddddddddddddddddddd\n/hdddddddddddddddddddddddddddddddddddddd\n_________________________\n\nBigCommerce Stencil\n_________________________\n\n[BS] Proxying: http://localhost:4001\n[BS] Access URLs:\n------------------------------------\n      Local: http://localhost:4000\n   External: http://172.24.4.28:4000\n------------------------------------\n         UI: http://localhost:3001\nUI External: http://172.24.4.28:3001\n------------------------------------\n[BS] Watching files...\n```\n\nNote the `External` IP address. You can copy/paste this URL to access the Browsersync server from multiple devices. Then, watch as scrolling and other actions sync up across devices. (Note: Firewalls and other security measures might interfere with this feature.)\n\nTo maximize the adoption of your themes, we recommend that you use such testing to design responsive themes that display and function well across multiple viewport sizes.\n",
                        "header": {
                          "anchor": "testing_testing-and-debugging"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Managing Theme Variations",
                  "route": {
                    "path": "/new-subpage"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Managing Theme Variations</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#managing_creating\">Creating and Naming a New Theme Variation </a></li>\n\t\t<li><a href=\"#managing_changing\">Changing a Theme Variation’s Font Family (config.json)</a></li>\n    <li><a href=\"#managing_preparing\">Preparing a Variation's Thumbnails</a></li>\n    <li><a href=\"#managing_using-cli\">Using Stencil CLI to Change Variations</a></li>\n    <li><a href=\"#managing_bundling-and-uploading\">Bundling and Uploading Your Theme</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Creating and Naming a New Theme Variation  (Cascading Settings from `config.json`)\n\nYou define variations in your `<theme-name>/config.json` file. From the default Stencil theme’s config.json, here is the Light variation’s definition, followed by the head of the `Bold` variation’s definition:\n\n```\n\"variations\": [\n{\n  \"name\": \"Light\",\n  \"id\": \"light\",\n  \"meta\": {\n    \"desktop_screenshot\": \"desktop_screenshot.jpg\",\n    \"mobile_screenshot\": \"mobile_screenshot.png\",\n    \"description\": \"This is the light style of the Stencil Theme\",\n    \"demo_url\": \"https://stencil-light.mybigcommerce.com\",\n    \"optimized_for\": [\"fashion\", \"image_heavy\", \"etc\"],\n    \"industries\": []\n  },\n{\n  \"name\": \"Bold\",\n  \"id\": \"bold\",\n...\n```\n\nTry inserting a new custom variation of your own, below the `\"Light\"` block shown above. Your variation’s definition might look something like this:\n\n```\n\"variations\": [\n...\n{\n  \"name\": \"MyCustomVariation\",\n  \"id\": \"my_custom_variation\",\n  \"meta\": {\n    \"desktop_screenshot\": \"my_custom_desktop_screenshot.jpg\",\n    \"mobile_screenshot\": \"my_custom_mobile_screenshot.png\",\n    \"description\": \"This is a really cool custom style of the Stencil Theme\",\n    \"demo_url\": \"https://stencil-custom.mybigcommerce.com\",\n    \"optimized_for\": [\"fashion\", \"image_heavy\", \"etc\"],\n    \"industries\": []\n  },\n{\n  \"name\": \"Bold\",\n  \"id\": \"bold\",\n...\n\"variations\": [\n...\n{\n  \"name\": \"MyCustomVariation\",\n  \"id\": \"my_custom_variation\",\n  \"meta\": {\n    \"desktop_screenshot\": \"my_custom_desktop_screenshot.jpg\",\n    \"mobile_screenshot\": \"my_custom_mobile_screenshot.png\",\n    \"description\": \"This is a really cool custom style of the Stencil Theme\",\n    \"demo_url\": \"https://stencil-custom.mybigcommerce.com\",\n    \"optimized_for\": [\"fashion\", \"image_heavy\", \"etc\"],\n    \"industries\": []\n  },\n{\n  \"name\": \"Bold\",\n  \"id\": \"bold\",\n...\n```",
                        "header": {
                          "anchor": "managing_creating"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Changing a Theme Variation’s Font Family (config.json)\n\nTo learn more about defining variations, see the `config.json` reference for details about each key’s usage and allowable values. \nIn particular, note the option to configure settings and variables that are scoped to each variation. For example, you could insert the `\"settings\":...”body-font-family”` block shown below, to set body text throughout this variation (only) to a specific typeface/family:\n\n```\n{\n  \"name\": \"MyCustomVariation\",\n  \"id\": \"my_custom_variation\",\n  \"settings\": {\n    ...\n    \"body-font-family\": \"MyCoolFont, AnotherFont, sans-serif\",\n    ...\n  }\n}\n```",
                        "header": {
                          "anchor": "managing_changing"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Preparing a Variation's Thumbnails\n\nFor details on preparing screenshots that enable merchants to preview each variation – and to preview your theme as a whole – in the BigCommerce control panel and Theme Marketplace, see [Preparing Thumbnail Images](/stencil-docs/stencil-theme-editor/preparing-thumbnail-images).\n",
                        "header": {
                          "anchor": "managing_preparing"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Using Stencil CLI to Change Variations\n\nTo locally test/debug a specific variation of your theme, launch it by invoking the Stencil CLI’s (command-line interface’s) `stencil start -v` switch. Depending on how you’ve named your variation in `config.json`, you would type something like this on the command line:\n\n`stencil start -v MyCustomVariation`",
                        "header": {
                          "anchor": "managing_using-cli"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Bundling and Uploading Your Theme\n\nIf at this stage you are ready to bundle and upload your theme, refer to [Bundling and Uploading](/stencil-docs/prepare-and-upload-a-theme/bunding-and-uploading) a Theme.\n",
                        "header": {
                          "anchor": "managing_bundling-and-uploading"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Stencil Theme Editor ",
            "route": {
              "path": "/stencil-theme-editor"
            },
            "data": {
              "children": [
                {
                  "title": "Stencil Theme Editor Overview",
                  "route": {
                    "path": "/stencil-theme-editor-overview"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Stencil Theme Editor Overview</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#stencil_stencil-theme-editor-overview\">Stencil Theme Editor</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Stencil Theme Editor\nThe [Stencil Theme Editor](https://forum.bigcommerce.com/s/article/Stencil-Themes?_ga=2.258361674.1984523106.1539568940-967431010.1523308107) is a Graphical User Interface (GUI) that allows BigCommerce merchants to modify a storefront's look and feel without manually entering any code. A merchant using the Stencil Theme Editor can customize a storefront theme by modifying characteristics from a variety of menu options such as Styles, Colors, Typography, Buttons, and more. Furthermore, the Stencil Theme Editor is a useful rapid-customization tool for developers. \n\nAs a theme developer, you not only have the opportunity to _use_ the theme editor to rapidly customize your theme, but also _configure your own settings_ for the Theme Editor. This will give merchants who download your theme the ability to use the Theme Editor with your theme in the ways you provide access to. Like previously mentioned, the Theme Editor by default allows merchants to customize everything from Styles, Colors, Typography, Buttons, and more. As a theme developer, you can choose and configure what features can be modified via the Theme Editor for the theme that you develop.\n\nTo configure and work with the Theme Editor GUI locally, run `stencil start -e` , and point your browser to `localhost:8181`, as described here. This allows you to see and test your personally configured Theme Editor from a merchant's point of view. \n\nThe remainder of this section guides you, as a developer, through configuring your own theme options.",
                        "header": {
                          "anchor": "stencil_stencil-theme-editor-overview"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "type": "error",
                          "body": "Open only one instance of Theme Editor at a time against each storefront. There is currently no synchronization mechanism for configuration changes made by multiple Theme Editor instances.",
                          "title": " Single Instance per Storefront"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Configuring Stencil Theme Editor",
                  "route": {
                    "path": "/configuring-stencil-theme-editor"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Configuring the Stencil Theme Editor</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#configuring_configuration-files\">Configuration Files</a></li>\n    <li><a href=\"#configuring_managing-keys\">Managing Keys between Versions</a></li>\n    <li><a href=\"#configuring_persistent-settings\">Persistent Settings Storage</a></li>\n    <li><a href=\"#configuring_theme-upgrades\">Theme Upgrades and Settings</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Configuration Files\n\nEach theme contains two related JSON files of key-value pairs: `config.json` and `schema.json`. These files' keys provide the following features:\n\nKeys that you include in `schema.json` – together with their corresponding `config.json` default values – define the settings that merchants can customize through the Theme Editor graphical interface.\nOther `config.json` keys contain metadata about the theme, such as the theme's name, version, and resource controls.\nKeys located under the `config.json > variations` object define variations of the theme. For example, a theme might have a \"Light\" variation and a \"Bold\" variation, each with different typography and colors. Each theme can include as many variations as you like.\nKeys located under both files' `settings` objects define the theme's look, feel, and functionality.\n\nFor documentation on the principal keys included in Stencil's reference Cornerstone theme, see this section's [config.json Metadata](/stencil-docs/development-quickstart/config-json-metadata) and [schema.json Metadata](/stencil-docs/development-quickstart/schema-json-metadata) entries. For an introduction to the graphical editor, see\n[Stencil Theme Editor Overview](/stencil-docs/stencil-theme-editor/stencil-theme-editor-overview).",
                        "header": {
                          "anchor": "configuring_configuration-files"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Managing Keys between Versions\n\nTo make sure revisions to your theme are backward-compatibile, we generally recommend that you manage keys in both your `config.json` and `schema.json` files in an additive way. Specific recommendations:\n\nAdding new keys is generally fine. (However, each key in `schema.json` must have a matching default in `config.json`.)\n* Use caution in deleting any key. Doing so can break your new theme version's backward compatibility.\n* We do not recommend renaming keys. Instead, we recommend introducing a new key, while maintaining the old key until it is no longer in use by anyone using an older version of your theme.\n* Each object within your `config.json` > `variations` object defines one theme variation. If you are adapting an existing theme and consciously want to remove one or more variations, you can do so by removing the corresponding key(s).",
                        "header": {
                          "anchor": "configuring_managing-keys"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Persistent Settings Storage\n\nWhen store administrators use Theme Editor to customize your theme for their store, the store's resulting configuration settings are saved to a separate configuration service at BigCommerce.",
                        "header": {
                          "anchor": "configuring_persistent-settings"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Theme Upgrades and Settings\n\nWhen a merchant upgrades your theme to a newer version, all key-value pairs that were saved to the BigCommerce configuration service are carried forward. For example, assume this customization/upgrade scenario:\n\nYou release your Star Glow theme, version 1. This theme's `config.json` includes a key named `logo_size`, establishing a default value of 100x250. The combination of the key and the value compose a `logo_size` setting.\nThe merchant uses Theme Editor to change the `logo_size` setting to 175x275. This customized setting is stored in the BigCommerce configuration service.\nYou release Star Glow, version 1.1. In this theme revision, you have changed the `logo_size` to 300x300.\nWhen the merchant applies Star Glow version 1.1 to their store, their custom `logo_size` setting of 175x275 remains in effect.\nIf you the merchant creates a second store and applies Star Glow version 1.1 to it, that store has no custom `logo_size` setting – so it will default to the new theme version's 300x300 value.",
                        "header": {
                          "anchor": "configuring_theme-upgrades"
                        }
                      }
                    ],
                    "children": []
                  }
                },
                {
                  "title": "schema.json/Theme Editor Metadata",
                  "route": {
                    "path": "/schema-json-metadata"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>schema.json/Theme Editor Metadata</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#schema_enabling\">Enabling Theme Editor</a></li>\n    <li><a href=\"#schema_best-practices\">Best Practices</a></li>\n    <li><a href=\"#schema_how-json\">How .json Entries Govern Theme Editor's UI</a></li>\n    <li><a href=\"#schema_theme-editor-data\">Theme Editor Data Types</a></li>\n    <li><a href=\"#schema_data-structure\">Theme Editor/schema.json Data Structure</a></li>\n    <li><a href=\"#schema_ui-scope\">Arbitrary UI Scope and Sequence</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Enabling Theme Editor\n\nTo provide merchants with Theme Editor support for your theme's settings, you must declare those settings in the theme's `<theme‑name>/schema.json file`. You must also include those settings in your theme's config.json file, templates, and Sass/CSS files. The basic division of labor is this:\n* `schema.json` is an array of objects, declaring which theme settings are editable in Theme Editor. These objects also declare all possible values to display in Theme Editor's GUI.\n* `config.json` assigns (and updates) a default value for each of the editable settings.\n* Each `schema.json` entry has an id element that maps it to its corresponding config.json entry. The id value identifies the relevant config.json key name.\n* For front-matter properties to be editable, your theme's Handlebars template must call certain Handlebars helpers to transform the config.json entries into JavaScript values.\n* For fonts to be editable, a Sass stylesheet must call certain custom Sass functions to transform the config.json font entries into CSS values.\n* For styles to be editable, a Sass stylesheet must call certain custom Handlebars helpers to transform the config.json entries into CSS values.\n\nAs users select options within the Theme Editor UI (and save their selections), Stencil will automatically rewrite `config.json` to record new defaults for the theme.\n\n### File Management Requirements\n\nSee Stencil's default Cornerstone theme for examples that fulfill all of the above requirements. However, remember these hard requirements:\n\n* For any theme setting (such as a Sass variable or a front-matter value) to be merchant-customizable,\nthat setting – and its possible values – must be present in `schema.json`. You must manually provide these declarations, according to the structure described here.\n\n* Also, each key that you create in schema.json must have a corresponding `config.json` key whose name matches its id value. This `config.json` key sets the default value (even if that is simply an empty string). A `schema.json` setting without an `id`-matched `config.json` key will not appear to users in the Theme Editor GUI.",
                        "header": {
                          "anchor": "schema_enabling"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Best Practices\n\nPlease follow these guidelines to head off errors upon theme upload, and to avoid possible loss of customizations made via the Theme Editor GUI at runtime:\n\n* Single-Instance Restriction per Storefront: We strongly recommend opening only one instance of Theme Editor, at a time, against each storefront. This is because there is currently no synchronization mechanism to reconcile configuration changes made by multiple Theme Editor instances. So `schema.json` will record the last changes made by any instance – but changes saved earlier by other instances might be lost.\n\n* Single-Storefront Restriction per Editor: In the current release, users can have only one storefront at a time open in Theme Editor. (A workaround is to open an \"Incognito\"/private-browsing window on an additional storefront, to bypass the cookie that imposes this restriction.)\n\n* File Name, Location, and Structure: Your theme's `schema.json` file must be named schema.json, must reside in the root of your `<theme-name>` subdirectory (e.g.: `/cornerstone/schema.json`), and must be valid JSON.\n\n* File Size: The maximum allowable size for a theme's `schema.json` file is 64 KB. Exceeding this limit will trigger an error upon uploading the theme to BigCommerce. (Other than this size constraint, there is no limit on the number of keys and values that you can place in a theme's `schema.json`.)\n\n",
                        "header": {
                          "anchor": "schema_best-practices"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## How .json Entries Govern Theme Editor's UI\n\nYour entries in the `schema.json` and `config.json` files directly shape users' options in Theme Editor:\n* Theme Variations always appear at the top of the Theme Editor panel. These variations are defined only in config.json, and their definition order in that file governs their display order in Theme Editor.\n* Merchants must select one variation to edit, at a time, in Theme Editor. The selections that they make in the remainder of Theme Editor's UI will apply to only that selected variation.\n* Theme Editor's remaining sequence of top-level (Section) headings corresponds directly to the sequence of top-level (Section) objects that you declare in `schema.json`\n\nThe options displayed within these expandable Section headings correspond directly to the keys/values that you nest within `schema.json`'s corresponding Section objects.\n\nIn all, the structure that you give your theme's `config.json` and `schema.json` files directly governs the UI that Theme Editor exposes to merchants. So these files provide your UI design tools.",
                        "header": {
                          "anchor": "schema_how-json"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Theme Editor Data Types\n\nTheme editor supports these data types:\n* color\n* font\n* select [drop-down list]\n* checkbox\n* imageDimension\n* text\n\nWithin `schema.json`, each object's data type is declared in a statement like the one highlighted here:\n\n```\n {\n        \"type\": \"color\",\n        \"label\": \"Text Color\",\n        \"id\": \"body-font-color\"\n      },\n```\n\n### Types versus \"heading\" Labels\n\nWithin `schema.json`, you will also see `\"type\": \"heading\"` statements like this one – highlighted earlier in the same object used for the above example:\n\n```\n {\n    \"name\": \"Colors\",\n    \"settings\": [\n      {\n        \"type\": \"heading\",\n        \"content\": \"General\"\n      },\n      {\n        \"type\": \"color\",\n        \"label\": \"Text Color\",\n        \"id\": \"body-font-color\"\n      },\n```\n\nThese `\"type\": \"heading\"` statements do not reference data types. Rather, they declare display captions for the Theme Editor UI's subcategories – the middle level nested within the Section headings, but outside the individual options from which merchants can select. (Those inner options are designated by `\"label\": <label-text>` statements.)",
                        "header": {
                          "anchor": "schema_theme-editor-data"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Theme Editor/schema.json Data Structure\n\nThe `schema.json` nesting structure that you just saw maps directly to the Theme Editor UI displayed to merchants: Below the Variations Section (whose data are imported from `config.json`), the order and nesting of options in Theme Editor's UI directly matches the order and nesting of your `schema.json` entries.\n",
                        "header": {
                          "anchor": "schema_data-structure"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Arbitrary UI Scope and Sequence\n\nOnce again: You are free to decide which properties of your theme to make editable in Theme Editor, and in which order to display them. Theme Editor can expose any set of properties, as long as your `schema.json` declares them using the data types that Theme Editor supports.",
                        "header": {
                          "anchor": "schema_ui-scope"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "config.json Metadata",
                  "route": {
                    "path": "/config-json-metadata"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1><code>config.json</code> Metadata</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#config_configjson-overview\">config.json Overview</a></li>\n    <li><a href=\"#config_keys-and-example\">Keys and Example Values</a></li>\n    <li><a href=\"#config_requirements-and-restrictions\">Requirements and Restrictions</a></li>\n    <li><a href=\"#config_video-demo\">Video Demo</a></li>\n\t</ul>\n</div>\n\n\n"
                      },
                      {
                        "type": "text",
                        "data": "## `config.json` Overview\n\nYou configure the `/<theme‑name>/config.json` file to properly manage each of your custom theme's front-end aspects. This `config.json` file’s functions are to:\n\n* Provide global context for Stencil’s CSS and Handlebars resources.\n* Provide values for the Theme Editor GUI to manage.\n* Provide metadata for your theme’s listing in the Theme Marketplace.\n* Define variations included in your theme.\n",
                        "header": {
                          "anchor": "config_configjson-overview"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Keys and Example Values \n\nBelow are the properties you can configure, with notes and example values from Stencil's Cornerstone reference theme. Note that keys here might appear in a different order than in the Cornerstone file:\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Format</th>\n    <th>Default/Examples</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>String</td>\n    <td>\"Stencil\"</td>\n\t\t<td>Theme’s name, as it will appear in the Theme Marketplace. (<b>Note:</b> Theme names should be composed of only the following characters: a-z, A-Z, 0-9, hyphen.)</td>\n  </tr>\n  <tr>\n    <td>version</td>\n    <td><a href=\"http://semver.org/\">SemVer</a></td>\n    <td>\"1.0.0\"</td>\n    <td>Theme’s version number, formatted asmajor.minor.patch.</td>\n  </tr>\n  <tr>\n    <td>meta</td>\n    <td>Object</td>\n    <td></td>\n    <td>BigCommerce will use this metadata to list themes in Theme Marketplace.(Theme variations also have their own metadata collections.)</td>\n  </tr>\n  <tr>\n    <td>price</td>\n    <td>Number</td>\n    <td>15000</td>\n    <td>Price, in cents, to purchase this theme in Theme Marketplace.</td>\n  </tr>\n  <tr>\n    <td>documentation_url</td>\n\t\t<td>String</td>\n\t\t<td><a href=\"https://support.bigcommerce.com/articles/Public/Cornerstone-Theme-Manual\">Cornerstone Theme Manual</a>\n\t\t</td>\n\t\t<td>URL of theme developer’s documentation site. This key is required to have a value.)</td>\n  </tr>\n  <tr>\n    <td>author_name</td>\n    <td>String</td>\n    <td>\"eCommerce Themes, Inc.\"</td>\n    <td>Name of the developer or partner creating the theme.(<b>Note: For a successful theme upload to BigCommerce, this key is required to have a value.</b>)</td>\n  </tr>\n  <tr>\n    <td>author_email</td>\n    <td>String</td>\n    <td>\"support@example.com\"</td>\n    <td>Contact/support email address for the developer or partner creating the theme.\n(<b>Note: For a successful theme upload to BigCommerce, this key is required to have a value.</b>)</td>\n  </tr>\n  <tr>\n    <td>author_support_url</td>\n    <td>String</td>\n    <td>\"http://example.com/contactus\"</td>\n    <td>Contact form/support URL for the developer or partner creating the theme.\n(<b>Note: For a successful theme upload to BigCommerce, this key is required to have a value.</b>)</td>\n  </tr>    \n  <tr>\n    <td>composed_image</td>\n    <td>String</td>\n    <td>\"composed_image.png\"</td>\n    <td>File name for a composed/mosaic screenshot of all variations of the theme, to appear on the \"My Themes\" page of purchased themes. The file-name value is arbitrary, but it must match the name of a file located in the <code>theme‑name/meta/</code> subdirectory.The actual file’s resolution must be 600 x 760 pixels (horizontal x vertical).</td>\n  </tr>\n  <tr>\n    <td>features</td>\n    <td>Array</td>\n    <td> [\"fully_responsive\", \"mega_navigation\", \"multi_tiered_sidebar_menu\", \"masonry_design\",\"frontpage_slideshow\",\"quick_add_to_cart\",\"switchable_product_view\",\"product_comparison_table\",\"complex_search_filtering\", \"customizable_product_selector\", \"cart_suggested_products\", \"free_customer_support\", \"free_theme_upgrades\", \"high_res_product_images\", \"product_filtering\", \"advanced_quick_view\", \"product_showcase\", \"persistent_cart\", \"one_page_check_out\", \"customized_check_out\", \"product_videos\"]</td>\n    <td>Array of exact feature names supported in this theme. The \"Default/Examples\" column lists the complete namespace. At least one of the values listed there must be present.</td>\n\t<td>These values are used as metadata for Theme Marketplace searches.</td>\n     <td> The <code>\"customized_check_out\"</code> value has a second function: It must be present if you want to enable <a href=\"https://support.bigcommerce.com/articles/Public/Optimized-Single-Page-Checkout\">Optimized One-Page Checkout</a> for your theme.</td>\n  </tr>\n  <tr>\n    <td>css_compiler</td>\n    <td>String</td>\n    <td>\"scss\"</td>\n    <td>CSS preprocessor; defaults to SCSS.</td>\n  </tr>\n  <tr>\n    <td>autoprefixer_cascade</td>\n    <td>Boolean</td>\n    <td>true</td>\n    <td>Whether to enable the Autoprefixer CSS postprocessor, to add vendor prefixes to CSS rules.</td>\n  </tr>\n  <tr>\n    <td>autoprefixer_browsers</td>\n    <td>Array</td>\n    <td>[\"last 3 versions\"]</td>\n    <td>Which legacy browsers <a href=\"https://github.com/postcss/autoprefixer\">Autoprefixer</a> should support, specified in <a href=\"https://github.com/ai/browserslist\">Browserslist</a> query format.</td>\n  </tr>\n  \n  <tr>\n    <td>settings</td>\n    <td></td>\n    <td></td>\n    <td>Display-oriented key names, and values, that you can arbitrarily set for your theme. Handlebars accesses the combined settings as the context variable <code>{{theme_settings}}</code>.Variations also have their own<code>settings</code> sections. Values that you set at the variation level will override global values that you set here (for corresponding key names, and within the scope of that variation).If you want to create a custom variable to use in Handlebars, either add it here within this theme-level <code>settings</code> section, or add it down in a variation-level <code>\">settings</code> section. You would access your arbitrarily named custom variable in Handlebars as <code>{{theme_settings.variablename}}</code>.\n\n\t\t\tHere is an example of a custom variable in the default theme’s <code>config.json</code>:\n\n<code>\"settings\": { \"homepage_featured_products_count\": 6,\n}</code>\n\nHere is the corresponding front matter in <code>home.html</code> that calls this variable. (Note that this is pure YAML – the <code>{{...}}</code> used to reference <code>config.json</code> variables within pages’ front matter do not constitute a Handlebars statement:)\n\n<code>\n---\nproducts:\n  featured:\n      limit: {{theme_settings.homepage_featured_products_count}}\n---\n</code> </td>\n</tr>\n  <tr>\n    <td>homepage_new_products_count</td>\n    <td>Number</td>\n    <td>12</td>\n    <td>Number of products to include in home page’s New Products section.</td>\n  </tr>\n  <tr>\n    <td>homepage_section-name_count,homepage_section-name_column_count</td>\n    <td>Number</td>\n    <td>[Varies]</td>\n    <td>Number of products, or columns, to include in the specified home-page section.</td>\n  </tr>\n  <tr>\n    <td>productpage_section-name_count</td>\n    <td>Number</td>\n    <td>[Varies]</td>\n    <td>Number of products to include in the specified section of product-details pages.</td>\n  </tr>\n  <tr>\n    <td>categorypage_products_per_page, brandpage_products_per_page, searchpage_products_per_page</td>\n    <td>Number</td>\n    <td>12</td>\n    <td>Number of products to include on each specified page type.</td>\n  </tr>\n\t<tr>\n    <td>homepage_show_carousel</td>\n    <td>Boolean</td>\n    <td>true</td>\n    <td>Defines whether to display an image carousel on the home page.</td>\n  </tr>  \n\t<tr>\n    <td>show_product_quick_view</td>\n    <td>Boolean</td>\n    <td>true</td>\n    <td>Defines whether to offer customers product Quick View modal windows.</td>\n  </tr>  \n\t<tr>\n    <td>show_powered_by</td>\n    <td>Boolean</td>\n    <td>true</td>\n    <td>Defines whether to display a \"Powered by BigCommerce\" credit in the sitewide footer.</td>\n  </tr>  \n\t<tr>\n    <td>show_accept_amex,\n      show_accept_visa, etc.\n    </td>\n    <td>Boolean</td>\n    <td>false</td>\n    <td>Each of these keys displays or hides a payment-method icon in the sitewide footer. The icons respectively identify credit-card issuers, PayPal, etc. If these keys are defined in schema.json, merchants can use the Theme Editor GUI to toggle each payment icon's visibility.</td>\n  </tr>\n  <tr>\n    <td>product_list_display_mode</td>\n    <td>String</td>\n    <td>\"grid\"</td>\n    <td>Default display mode for product lists. A <code>\"grid\"</code> value specifies grid format. Other entries trigger list format.</td>\n  </tr>\n  <tr>\n    <td>logo-position</td>\n    <td>String</td>\n    <td>\"center\", \"left\", \"right\"</td>\n    <td>Sets (horizontal) display alignment for store logo throughout the theme.</td>\n  </tr>\n \n<!-- Begin images section/intro: -->\n  <tr>\n    <td>[images]</td>\n    <td>\n    The following keys' values define storewide dimensions for named sizes. The <code>{{getImage}}</code> Handlebars helper can use member keys’ values to dynamically resize any images, up to a maximum target size of 4096x4096 pixels.\n    \nKey names like <code>\"logo_size\"</code> and <code>\"thumb_size\"</code> are arbitrary.\n\nFor example, this Handlebars expression:\n\n\t\t\t<code>{{getImage product.image \"thumb_size\"}}</code> will output the path to a 100x100-pixel image (assuming the <code>\"thumb_size\"</code> key retains its default value of <code>\"100x100\"</code>).\n\nBy defining or redefining these named sizes' values, in the format outlined below, you can automatically replicate the new sizes throughout your theme.</td>\n  </tr>\n  <!-- :End images intro: -->\n  \n  <tr>\n    <td><span class=\"indent1\">logo_size</span></td>\n    <td>String</td>\n    <td>250x100</td>\n    <td>Key/value pair defining global (storewide) display dimensions for the store logo. The value is a string defining the width and height &ndash; in that order &ndash; in pixels.</td>\n  </tr>\n  \n  <tr>\n    <td>gallery_size</td>\n    <td>String</td>\n    <td>300x300</td>\n    <td>Key/value pair defining storewide display dimensions for blog images (also available for other uses).</td>\n  </tr>\n\n  <tr>\n    <td>productgallery_size</td>\n    <td>String</td>\n    <td>300x300</td>\n    <td>Key/value pair defining storewide display dimensions for product-gallery images.</td>\n  </tr>\n\n  <tr>\n    <td>product_size</td>\n    <td>String</td>\n    <td>500x659</td>\n    <td>Key/value pair defining storewide display dimensions for standard/medium-sized product images.</td>\n  </tr>\n  \n  <tr>\n    <td>productthumb_size</td>\n    <td>String</td>\n    <td>100x100</td>\n    <td>Key/value pair defining storewide display dimensions for product-image thumbnails on the product details page.</td>\n  </tr>\n\n  <tr>\n    <td>thumb_size</td>\n    <td>String</td>\n    <td>100x100</td>\n    <td>Key/value pair defining storewide display dimensions for swatches, and for brand and category thumbnails.</td>\n  </tr>\n  \n  <tr>\n    <td>zoom_size</td>\n    <td>String</td>\n    <td>1280x1280</td>\n    <td>Key/value pair defining storewide display dimensions for zoomable product images on the product details page.</td>\n  </tr>\n<!-- :End images section-->\n\n<!-- Begin image URLs section: -->    \n  <tr>\n    <td>product_list_display_mode</td>\n    <td>String</td>\n    <td>\"grid\"</td>\n    <td>Default display mode for product lists. A <code>\"grid\"</code> value specifies grid format. Other entries trigger list format.</td>\n  </tr>\n  <tr>\n    <td>default_image_brand</td>\n    <td>String</td>\n    <td>/assets/img/BrandDefault.gif</td>\n    <td>Relative path to a default image representing brands.</td>\n  </tr>\n  <tr>\n    <td> <span class=\"indent1\"> default_image_product</td>\n    <td>String</td>\n    <td>/assets/img/ProductDefault.gif</td>\n    <td>Relative path to a default image representing products.</td>\n  </tr>\n  <tr>\n    <td>default_image_gift_certificate</td>\n    <td>String</td>\n    <td>/assets/img/GiftCertificate.png</td>\n    <td>Relative path to a default image representing gift certificates.</td>\n  </tr>\n<!-- :End image URLs section -->    \n  \n<!-- Begin fonts section: -->\n  <tr>\n    <td>body-font</td>\n    <td>String</td>\n    <td>\"Google_Karla_400\"</td>\n    <td>Font-family keys, with corresponding values.\nKeys are named by display purpose, and keys' names should end in <code>-font</code>. But naming is otherwise arbitrary. So you can freely define additional font families for your theme.Values should follow the format:\n\t\t\t<code>\n\t\t\t\tProviderName_Font+FamilyName\n    _OptionalWeightNumber\n\t\t\t\t</code>\n\nAs in this example:\n      <code>Google_Open+Sans_700</code> which specifies <code>Google Fonts</code> as the Provider, <code>Open Sans</code> as the Font Family, and <code>800</code> as the (optional) Weight attribute.\n\n(<b>Note:</b> The Provider; also called \"Foundry\" - is currently limited to Google Fonts.)\nStencil’s <a href=\"/docs/custom-sass-functions#FontFamily\">custom Sass functions</a> can process these keys’ values. E.g., to <span class=\"inline-code\">stencilFontFamily</span>, you could pass the (arbitrary) key name <span class=\"inline-code\">\"body-font\"</span>, and the function would process the value. Note that Sass requires explicit typing of inputs and outputs – e.g., <span class=\"inline-code\">stencilNumber</span> defaults to pixels – so you must specify any other units. Thus, for a\n\n      <pre>\"font‑size\" = 3</pre>\n      <p></p>\n\n<!--      <span class=\"indent1\"><span class=\"inline-code\">\"font‑size\" = 3</span></span><br> -->\n\n...this statement:<br><p></p>\n\n    <pre>stencilNumber(\"font-size\",\"rem\")\n    * 3</pre><p></p>\n\n<!--    <span class=\"indent1\"><span class=\"inline-code\">stencilNumber(\"font-size\",\"rem\")</span></span><br>   \n    <span class=\"indent1\"><span class=\"inline-code\">* 3</span></span><br> -->\n\n...will output:<br><p></p>\n\n    <pre>9rem</pre>\n    <p></p>\n\n<!--    <span class=\"indent1\"><span class=\"inline-code\">9rem</span></span><br><br> -->\n\n      (<b>Note:</b> To enable merchants to customize your themes' fonts via <NOBR>Theme Editor</nobr>, we recommend that you rely on Google Fonts, with no more than 25 typefaces per theme.)</td>\n  </tr>\n  <tr>\n    <td>         <span class=\"indent1\">headings-font</span></td>\n    <td>String</td>\n    <td>\"Google_Montserrat_400\"</td>\n    <td>Arbitrary key name, and value, for a font family and (optional) weight that can be applied to headings.</td>\n  </tr>\n  <tr>\n    <td>         <span class=\"indent1\">logo-font</span></td>\n    <td>String</td>\n    <td>\"Google_Oswald_300\"</td>\n    <td>Arbitrary key name, and value, for a font family and (optional) weight for logo text.</td>\n  </tr>\n  \n  <tr>\n    <td>         <span class=\"indent1\"><NOBR>fontSize-root,</nobr></span><br> <span class=\"indent1\"><NOBR>fontSize-h1</nobr>..</span><NOBR>fontSize-h6,</nobr><br> <span class=\"indent1\">etc.</span> </td>\n    <td>Number</td>\n    <td>14</td>\n    <td>Font-size keys, with corresponding values.<br><br>\n      \nThese keys' values provide defaults for options selectable in the Theme Editor GUI. Also, Stencil’s <a href=\"#CustomSassFn\">custom Sass functions</a> can process these values.<br><br> \n      \n      Here again, these keys are named by display purpose, but arbitrarily. So you can freely define additional font sizes for your theme.</td>\n  </tr>\n  \n  \n<!--Begin colors section:-->  \n  <tr>\n    <td>\n      <span class=\"indent1\"><NOBR>color-textBase</nobr></span>\n    </td>\n    <td>String</td>\n    <td>\"#4f4f4f\"</td>\n    <td>Color definitions, with corresponding hex values. These keys' values provide defaults for options selectable in the Theme Editor GUI.<br><br> \n      \n      Also, Stencil’s <a href=\"#CustomSassFn\">custom Sass functions</a> can process these values. E.g., to <span class=\"inline-code\">stencilColor</span>, you could pass the key name <span class=\"inline-code\">\"color-textBase\"</span>, and the function would return the <span class=\"inline-code\">\"#4f4f4f\"</span> value defined here.<br><br>\n      \n      The keys are named by display purpose &ndash; defining consistent colors for various parts of the theme in different states. But the keys are also named arbitrarily. So you can freely name and define new color keys for your theme.<br><br> \n      \n      (<b>Note:</b> Only a subset of the default <span class=\"inline-code\">config.json</span> file’s color definitions are listed here.) </td>\n  </tr>\n\n  <tr>\n    <td>   <span class=\"indent1\"><NOBR>color-textBase--hover,</nobr></span> <span class=\"indent1\"><NOBR>color-textBase--active,</nobr></span><br> <span class=\"indent1\">..</span><br> <span class=\"indent1\"><NOBR>color-textLink--active,</nobr></span><br> <span class=\"indent1\"><NOBR>color-textHeading,</nobr></span><br> <span class=\"indent1\">etc.</span></td>\n    <td>String</td>\n    <td>[Varies]</td>\n    <td>\"</td>\n  </tr>\n\n  <tr>\n    <td>color-primary</td>\n    <td>String</td>\n    <td>\"#4f4f4f\"</td>\n    <td>\"</td>\n  </tr>\n  \n  <tr>\n    <td>color-primaryDark</td>\n    <td>String</td>\n    <td>\"#454545\"</td>\n    <td>\"</td>\n  </tr>\n  <tr>\n    <td>color-primaryDarker</td>\n    <td>String</td>\n    <td>\"#2d2d2d\"</td>\n    <td>\"</td>\n  </tr>\n  <tr>\n    <td>color-primaryLight</td>\n    <td>String</td>\n    <td>\"#a5a5a5\"</td>\n    <td>\"</td>\n  </tr>\n  <tr>\n    <td>color-secondary</td>\n    <td>String</td>\n    <td>\"#ffffff\"</td>\n    <td>\"</td>\n  </tr>\n  <tr>\n    <td>color-secondaryDark</td>\n    <td>String</td>\n    <td>\"#f2f2f2\"</td>\n    <td>\"</td>\n  </tr>\n  <tr>\n    <td>         <span class=\"indent1\">color-secondaryDarker</span></td>\n    <td>String</td>\n    <td>\"#f2f2f2\"</td>\n    <td>\"</td>\n  </tr>\n<!-- :End colors section -->\n\n<!-- Begin Optimized checkout subsection/intro: -->\n  <tr>\n    <td> <span class=\"indent1\"> <a name=\"config-uco\"></a> [Optimized Checkout]</td>\n    <td colspan=\"3\">\n    The following are examples of keys that define default style properties for the Optimized Checkout page. Each key/value pair here corresponds to a class in the <span class=\"inline-code\">&lt;theme‑name&gt;/assets/scss/optimized-checkout.scss</span> file.\n\t</td>\n  </tr>\n  <!-- :End Optimized Checkout intro. -->\n  \n  <tr>\n    <td><span class=\"indent1\">optimizedCheckout-header-backgroundColor</span></td>\n    <td>String</td>\n    <td>#f7f7f7</td>\n    <td>Key/value pair defining default background color for the Optimized Checkout page's header.</td>\n  </tr>\n  \n  <tr>\n    <td><span class=\"indent1\">optimizedCheckout-show-backgroundImage</span></td>\n    <td>Boolean</td>\n    <td>false</td>\n    <td>Key/value pair defining whether to display a background image on the Optimized Checkout page.</td>\n  </tr>\n\n  <tr>\n    <td><span class=\"indent1\">optimizedCheckout-backgroundImage</span></td>\n    <td>String</td>\n    <td> &ndash; </td>\n    <td>Key/value pair containing file name of background image for the Optimized Checkout page.</td>\n  </tr>\n\n  <tr>\n    <td><span class=\"indent1\">optimizedCheckout-backgroundImage-size</span></td>\n    <td>String</td>\n    <td>1000x400</td>\n    <td>Key/value pair defining display size for background image on the Optimized Checkout page.</td>\n  </tr>\n\n  <tr>\n    <td><span class=\"indent1\">optimizedCheckout-show-logo</span></td>\n    <td>enum</td>\n    <td>none</td>\n    <td>Key/value pair defining whether to show logo on the Optimized Checkout page.</td>\n  </tr>\n\n  <tr>\n    <td><span class=\"indent1\">optimizedCheckout-logo</span></td>\n    <td>String</td>\n    <td> &ndash; </td>\n    <td>Key/value pair containing file name of background image for the Optimized Checkout page.</td>\n  </tr>\n\n  <tr>\n    <td><span class=\"indent1\">[...]</span></td>\n    <td>[...]</td>\n    <td> [...] </td>\n    <td>[...]<br> \n      (Multiple similar key/value pairs. For a more-complete list of the classes available, see Optimized One-Page Checkout Customization)</td>\n  </tr>\n<!-- :end Optimized checkout subsection -->  \n\n<!-- Begin read-only subsection-->\n  <tr>\n    <td>read_only_files</td>\n    <td>String array</td>\n    <td> \"/assets/scss/components/citadel\",<br> \"/assets/scss/components/foundation\",<br> \"/assets/scss/components/vendor\",<br> \"/assets/scss/vendor\",<br> \"/assets/scss/settings/citadel\",<br> \"/assets/scss/settings/foundation\",<br> \"/assets/scss/settings/vendor\",<br> \"/assets/scss/settings/normalize\" </td>\n    <td>Files and paths specified in this array will be viewable in the <a href=\"/docs/what-is-theme-editor\">Theme Editor</a> GUI, but not editable. Add any theme files/paths that you want to make read-only for store administrators using that editor.</td>\n  </tr>\n<!-- :end read-only subsection -->\n  \n<!-- Begin resources: section -->\n  <tr>\n    <td>resources</td>\n    <td></td>\n    <td></td>\n    <td>Global resources, inherited by all pages located directly within your <code><theme‑name>/templates/pages/</code> subdirectory.\n\n(This inheritance spares you from having to define them in front matter on every page. Here, the resources are defined in JSON rather than YAML format.)\n\nYou are free to add more global resources here – for example: <code>\"brands\": true</code> to display a brands list; or\n\t\t\t<code>\"blog\": \"posts\": \"limit\": 3</code> to display the top 3 blog posts. For syntax, see <a href=\"/docs/front-matter-variables#Front-ref-global\">Front-Matter Global Attributes</a>.</td>\n  </tr>\n  <tr>\n    <td>cart</td>\n    <td>Boolean</td>\n    <td>true</td>\n    <td>Defines whether to retrieve/display cart data <!--to display a shopping-cart icon/link--> in pages' chrome.</td>\n  </tr>\n  <tr>\n    <td>shop_by_brand</td>\n    <td>Boolean</td>\n    <td>true</td>\n    <td>Defines whether to include a quick-navigation list of brands in the footer. Adding this optional filter defines how many brands to load:\n\t\t\t<code>limit: number</code></td>\n  </tr>\n    \n  <tr>\n    <td>variations</td>\n    <td>Object</td>\n    <td></td>\n    <td>Collection of variation objects. Each contained object defines one variation on this overall theme. (A theme must contain at least one variation, and may contain up to four.)</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>String</td>\n    <td>\"Light\", \"Bold\",\"Warm\" (etc.)</td>\n    <td>An arbitrary name for this variation. This name is used in the Themes Marketplace and Theme Editor.</td>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>String</td>\n    <td>\"light\", \"bold\", \"warm\" (etc.)</td>\n    <td>A string ID for this variation. Arbitrarily named, but must be unique to this variation.\nThe Stencil framework’s database uses this unique ID to identify and process updates to variations.<br><br> \n\nWhen you submit an updated version of your theme to BigCommerce, IDs and settings for previously submitted variations must match those in previous submissions of your theme. You may add, but not remove, variations and settings in such resubmissions. You may rename variations for clarity.\n</td>\n  </tr>\n  <tr>\n    <td>settings</td>\n    <td></td>\n    <td></td>\n    <td>Variation-level counterpart to this theme’s theme-level <code>\"settings\"</code> object.\n\nValues that you set here will override theme-wide values for corresponding key names,  within the scope of this variation.\n\nYou can also create custom variables here, whose scope will be limited to this variation. Syntax is the same as for theme-wide custom variables.</td>\n  </tr>\n  <tr>\n    <td>meta</td>\n    <td>Object</td>\n    <td></td>\n    <td>Variation-level counterpart to this theme’s top-leve \"meta\" collection.\nBigCommerce will similarly use this collection’s values when listing themes in Theme Marketplace and Theme Editor.</td>\n  </tr>\n  <tr>\n    <td>\"desktop_screenshot\"</td>\n    <td>String</td>\n    <td>\"desktop_screenshot.png\"</td>\n    <td>File name for a screenshot of this variation’s large-format layout.\nThe key name is fixed. The file-name value is arbitrary, but it must match the name of a file located in the <code>theme‑name/meta/</code> subdirectory. If you are updating a variation, be sure to match this value to the intended file name.) The screenshot’s required dimensions are 2048 x 2600 pixels.</td>\n  </tr>\n  <tr>\n    <td>\"mobile_screenshot\"</td>\n    <td>String</td>\n    <td>\"mobile_screenshot.png\",</td>\n    <td>File name for a screenshot of this variation’s mobile-format layout.\nThe key name is fixed. The file-name value is arbitrary, but it must match the name of a file located in the <code>&lt;theme‑name&gt;/meta/</code> subdirectory. (If you are updating a variation, be sure to match this value to the intended file name.) The screenshot’s required dimensions are 304 x 540 pixels.</td>\n  </tr>\n  <tr>\n    <td>\"description\"</td>\n    <td>String</td>\n    <td>\"This is the light style of the Stencil Theme\"</td>\n    <td>Arbitrary text description for this variation. This description will appear in Themes Marketplace and Theme Editor.</td>\n  </tr>\n  <tr>\n    <td>\"demo_url\"</td>\n    <td>String</td>\n    <td>\"https://stencil-light.mybigcommerce.com\"</td>\n    <td>URL of your demo store, as set up on bigcommerce.com.</td>\n  </tr>\n  <tr>\n    <td>\"optimized_for”</td>\n    <td>Array</td>\n    <td>[\"arts_crafts\", \"animals_pets\", \"automotive_industrial\", \"electronics_computers\", \"fashion_jewelry\", \"food_beverage\",\"gifts_specialty\", \"health_beauty\",\"home_garden\", \"books_entertainment\",\"sports_recreation\",\"toys_games\",\"multi_purpose\",\"chrome_firefox_safari_ie_10\",\"mobile_tablet_desktop\",\"sales_discounts\",\"wholesale\",\"single_product\", \"large_catalog\", \"mobile\",\"clothing\",\"cosmetics\", \"home_appliances\",\"home_furnishings\", \"movies\",\"music\",\"digital_downloads\",\"outdoor_sports\",\"hunting_fishing\",\"video_games\"]</td>\n    <td>Array of metadata for Theme Marketplace searches - exact names of storefront types compatible with this theme. The \"Default/Examples\" column lists the complete namespace. At least one of the values listed there must be present.\n\t</td>\n  </tr>\n  <tr>\n    <td>“industries\"</td>\n    <td>Array</td>\n    <td>[\"arts_crafts\",\"animals_pets\",\"automotive_industrial\",\"electronics_computers\",\"fashion_jewelry\",\"food_beverage\",\"gifts_specialty\",\"health_beauty\",\"home_garden\",\"books_entertainment\",\"sports_recreation\",\"toys_games\"]\n\t</td>\n    <td>Array of optional metadata for Theme Marketplace, where these values will be used to support faceted searches. You may submit up to four values from the complete namespace listed in the \"Default/Examples\" column.</td>\n  </tr>\n</table>",
                        "header": {
                          "anchor": "config_keys-and-example"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Requirements and Restrictions\n\nYour theme's config.json file must meet the following requirements:\n\n* It must be named `config.json`, must reside in the root of your `<theme-name>` top level subdirectory (e.g.: `/cornerstone/config.json` or `/stencil/config.json`), and must be valid JSON.\n* The maximum allowable size for a theme's `config.json` file is 64 KB. Exceeding this limit will trigger an error upon uploading the theme to BigCommerce.\n* Each key's value is restricted to 64 characters. Exceeding this limit will similarly trigger an upload error.\n* Other than these size constraints, there is no limit on the number of keys and values that you can place in a theme's `config.json`.\n\n_Carefully check your theme against all the requirements listed here – including the required keys within the `meta` object and `variations` array. While some requirements are not enforced in local development, they will be validated (and will trigger errors) when you later upload your theme to BigCommerce._\n\n### Required Themewide Keys\nThe `config.json` file must contain at least the following keys, with appropriate values (as outlined above):\n\n*name\n* `version`\n* `settings` (which must itself be a valid JSON object)\n* `variations` (an array of at least one, and at most four, variation objects)\n* `meta` (an object; see specific requirements below)\n\n### Required `meta` Keys\n\nThe meta object must contain at least the following keys, with appropriate values:\n\n* `price`\n* `author_name`\n* `author_email`\n* `author_support_url`\n* `documentation_url`\n\nFor illustration, here is a commented excerpt:\n\n```\n{\n  ...\n  \"meta\": {\n    \"price\": 15000, // in cents; non-negative integer, minimum 0\n    \"author_name:\" \"eCommerce Themes, Inc.\", // Must be a string, not null\n    \"author_email\": \"support@example.com\", // Must be a string, should be a valid email address, not null\n    \"author_support_url\": \"http://example.com/contactus\", //  Must be a string, should be a valid URL, not null\n    \"documentation_url\": \"http://example.com/guide\", // Must be a string, limit of 255 characters,\n          not null\n    \"composed_image\": \"path/to/composed.png\", // Must be a string path to the composed-image file\n    \"features\": [ // Array of feature strings, all of which must be in the list enumerated here: \n          https://github.com/bigcommerce/theme-registry/blob/master/app/schemas/theme_config.json#L33\n      \"fully_responsive\" // Must include at least one feature, and no duplicate entries\n    ]\n  },\n  ...\n}\n```\n\n### Required `variation` Keys\n\nFor each variation that you choose to include in your theme (at least one is required), you must provide at least the following keys and sub-element, with appropriate values:\n\n* `name`\n* `id`\n* `meta` (an object, containing at least:)\n* `description`\n\nFor illustration, here is a redacted excerpt from Cornerstone:\n\n```\n\"variations\": [\n    {\n      \"name\": \"Light\",\n      \"id\": \"light\",\n      \"meta\": {\n        \"desktop_screenshot\": \"desktop_light.png\",\n        \"mobile_screenshot\": \"mobile_light.png\",\n        \"description\": \"Ideal for a wide range of businesses and brands, this design is fully responsive, simple, and ready for you to add your branding, logo, and products. ....\",\n    ...\n    }\n  ]\n```",
                        "header": {
                          "anchor": "config_requirements-and-restrictions"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Video Demo\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/VZYZsDoEOpQ\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>",
                        "header": {
                          "anchor": "config_video-demo"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Preparing Thumbnail Images",
                  "route": {
                    "path": "/preparing-thumbnail-images"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Preparing Thumbnail Images</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#preparing_where-and-how-merchants\">Where and How Merchants See Your Theme's Thumbnail Images</a></li>\n    <li><a href=\"#preparing_general-image\">General Image Requirements</a></li>\n    <li><a href=\"#preparing_themewide-composite\">Themewide Composite Image</a></li>\n    <li><a href=\"#preparing_variations\">Variations: Desktop/Mobile Screenshots</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Where and How Merchants See Your Theme's Thumbnail Images\n\nA complete Stencil theme includes screenshots to show off the theme on cards that appear in two locations within the BigCommerce Control Panel:\n\n* `Storefront` > `My Themes`: Each individual card displays a _themewide composite image_, which is an image that contains combination of screenshots of the theme's multiple variations. \n`Storefront` > `Themes Marketplace`: Each card displays one variation of your theme. The three variations of Cornerstone (Light, Warm, and Bold) are displayed across three separate cards.",
                        "header": {
                          "anchor": "preparing_where-and-how-merchants"
                        }
                      },
                      {
                        "type": "tabs",
                        "data": {
                          "children": [
                            {
                              "title": "Desktop View of 'My Themes'",
                              "blocks": [
                                {
                                  "type": "image",
                                  "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539625143199",
                                  "header": {
                                    "title": "Storefront > My Themes",
                                    "subtitle": "Each card contains a themewide composite image, showing all the variations of the theme in each. In this image, we see 3 variations for the Cornerstone theme and 4 for the Showroom theme."
                                  },
                                  "config": {
                                    "centered": true,
                                    "fluid": true,
                                    "bordered": true,
                                    "maxWidth": "600",
                                    "maxHeight": "900"
                                  }
                                }
                              ]
                            },
                            {
                              "title": "Desktop View of Themes Marketplace",
                              "blocks": [
                                {
                                  "type": "image",
                                  "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539624737619",
                                  "header": {
                                    "title": "Storefront > Themes Marketplace"
                                  }
                                }
                              ]
                            },
                            {
                              "title": "Mobile View of Themes Marketplace",
                              "blocks": [
                                {
                                  "type": "image",
                                  "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539625004658",
                                  "config": {
                                    "centered": true,
                                    "fluid": true,
                                    "bordered": true,
                                    "maxWidth": "500",
                                    "maxHeight": "1000"
                                  }
                                }
                              ]
                            }
                          ]
                        },
                        "header": {
                          "title": "How your theme will appear in the Control Panel and Theme Marketplace"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## General Image Requirements\n\nBelow are details about:\n* how to size and save these images to stage them within your theme's directory structure\n* how to reference the images in your `config.json` file.\n\nAll screenshots described below must meet the following specifications in order for the `stencil bundle` command to be able to process them:\n\n* Saved to a supported image file type: `.jpg/.jpeg`, `.png`, or `.gif`.\n* Be stored in your `<theme‑name>/meta/` subdirectory.\n\nAlso note that all of these screenshots must be in **portrait aspect ratio**, with specific resolutions listed under [Themewide Composite Image](#preparing_themewide-composite) below.",
                        "header": {
                          "anchor": "preparing_general-image"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Themewide Composite Image\n\nThe themewide composite image represents your theme in the Control Panel's `Storefront` > `My Themes` area, which shows merchants their currently available themes (including any custom uploaded themes). \n\nThis file will normally be a mosaic of screenshots from multiple variations within your theme. It must meet the following requirements, beyond the general specifications above:\n\n* Resolution of 600 x 760 pixels (horizontal x vertical).\n* File size smaller than 2 MB.\n* Arbitrary filename prefix, referenced in your `config.json` file as the \nmeta > composed_image key's value.\n\nHere is an example of a compliant file type and location:\n\n`<theme‑name>/meta/composed.png`\n\nHere is how you would reference this file within `config.json`:\n\n```\n{\n  [...]\n  \"meta\": {\n    [...]\n    \"composed_image\": \"composed.png\",\t\n    [...]\n}\n```",
                        "header": {
                          "anchor": "preparing_themewide-composite"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Variations: Desktop/Mobile Screenshots\n\nEach variation within your theme must be represented by two additional screenshots if you want that variation to appear in the control panel > Storefront > Themes Marketplace area, which shows merchants the themes that are available for download.\n\n### Desktop Screenshot\n\nThe first screenshot, showing your theme on a desktop viewport, must meet the following requirements beyond the general specifications above: \nResolution of 2048 x 2600 pixels (horizontal x vertical).\nFile size smaller than 5 MB.\nArbitrary filename prefix, referenced in your `config.json` file as the \n`<variation-name> > meta > desktop_screenshot` key's value.\n\t\n### Mobile Screenshot\n\nThe second screenshot, showing your theme on a mobile viewport, must meet the following requirements beyond the general specifications above: \n* Resolution of 304 x 540 pixels (horizontal x vertical).\n* File size smaller than 1 MB.\n* Arbitrary filename prefix, referenced in your config.json file as the \n`<variation-name> > meta > mobile_screenshot` key's value.\n\nHere is an example showing two files of compliant types and location:\n\n* `<theme‑name>/meta/desktop_bright.png`\n* `<theme‑name>/meta/mobile_bright.png`\t\n\nHere is how you would reference these files within `config.json`, for a variation named `Bright`:\n\n```\n [...]\n  \"variations\": [\n    {\n      \"name\": \"Bright\",\n      \"id\": \"bright\",\n      \"meta\": {\n        \"desktop_screenshot\": \"desktop_bright.png\",\n        \"mobile_screenshot\": \"mobile_bright.jpg\",\n    [...]\n    }\n  ]\n```",
                        "header": {
                          "anchor": "preparing_variations"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Theme Editor Troubleshooting",
                  "route": {
                    "path": "/theme-editor-troubleshooting"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Theme Editor Troubleshooting</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#theme-editor_empty\">Empty Drop-Down List in Theme Editor Panel</a></li>\n    <li><a href=\"#theme-editor_configured\">Configured Control Missing from Theme Editor Panel</a></li>\n    <li><a href=\"#theme-editor_theme-changes\">Theme Changes Not Saved from Theme Editor UI</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "callout",
                        "data": {
                          "title": "Check the Terminal Window",
                          "body": "For any unexpected behavior that you encounter while developing your Stencil theme, please also check the terminal window where you started Stencil CLI. In some cases, the terminal will provide a verbose error message specifying where to look for problems. For less-detailed error messages, we list diagnostic suggestions in this documentation."
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Empty Drop-Down List in Theme Editor Panel\n\n* **Symptom:** A drop-down list's outline appears below its configured label. However, the list appears to be empty.\n* **Likely Cause:** A default value specified in the theme's config.json file is not enumerated in the schema.json file.\n* **Resolution:** Update schema.json to include the config.json value.",
                        "header": {
                          "anchor": "theme-editor_empty"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Configured Control Missing from Theme Editor Panel\n\n* **Symptom:** A control that you have configured within schema.json is completely absent from the Theme Editor UI.\n* **Likely Cause:** The specified \"type\" is one of: text, text area, radio [button], or image.\n(Theme Editor does not currently support these data types.)\n* **Resolution:** Display the user option via one of the supported data types: color, font, select [drop-down list], or checkbox.",
                        "header": {
                          "anchor": "theme-editor_configured"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Theme Changes Not Saved from Theme Editor UI\n\n* **Symptom:** Changes saved in a browser's Theme Editor panel are not reflected in the storefront.\n* **Likely Cause:** Check whether multiple users are simultaneously using Theme Editor to customize the same storefront.\n* **Resolution:** We strongly recommend opening only one instance of Theme Editor, at a time, per storefront. BigCommerce currently provides no synchronization mechanism for configuration changes from multiple Theme Editor instances. So the storefront's `schema.json` will record the last changes made by any instance – but changes saved earlier by other instances might be lost.",
                        "header": {
                          "anchor": "theme-editor_theme-changes"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Front Matter",
            "route": {
              "path": "/front-matter"
            },
            "data": {
              "children": [
                {
                  "title": "Front Matter ",
                  "route": {
                    "path": "/front-matter-overview"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Front Matter Overview</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#front-matter-overview_declaring-objects\">Declaring Objects</a></li>\n    <li><a href=\"#front-matter-overview_yaml-syntax\">YAML Syntax – Requirements</a></li>\n    <li><a href=\"#front-matter-overview_filtering-attributes\">Filtering Attributes</a></li>\n    <li><a href=\"#front-matter-overview_combining-front-matter\">Combining Front Matter with Handlebars Attributes</a></li>\n    <li><a href=\"#front-matter-overview_default-versus-custom\">Default versus Custom Attributes, per Page</a></li>\n    <li><a href=\"#front-matter-overview_declaring-multiple\">Declaring Multiple Attributes</a></li>\n\t</ul>\n</div>\n\n\n\n\n\n\n"
                      },
                      {
                        "type": "text",
                        "data": "## Declaring Front-Matter Objects\n\nWhen you create a store page that requires specific attributes (such as 'New Products') to be displayed, you must first declare the object and attribute on the page in a front-matter block at the top of the page's HTML template file. The front matter block makes the attribute accessible on the page. Then, to display the attribute on the storefront page, you will reference the the object using Handlebars within the page's HTML.\nFor example, to display 'new products' on a storefront's home page, you first need to make new products accessible on the home page. To achieve this, include the following front matter block at the top of the [home.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/home.html) file to declare the products object with its new attribute. This allows a storefront's home page to access a store's \"New Products.\"\n\n```\n---\nproducts:\n    new:\n    \tlimit: {{theme_settings.homepage_new_products_count}}\n---\n```\n\n**Note:** A 'limit' is required for Product Objects to render on a storefront page. You can hard code the limit value or utilize handlebars.js to reference it from the theme's config.json file. In this case, the limit value is being referenced from the `settings` JSON object in the `config.json` file using handlebars.js. Information on required attributes is detailed in the Front Matter Attributes Reference. \n\nAfter including the front matter block at the top of the home.html file, the New Products attribute will be accessible in the home page's context. As previously stated, simply including the front matter block will not display the attribute on the page. In order to actually display the new products on the desired storefront page, you will refernce the attribute using Handlebars in the same file you have added the front matter block to.\nIn this example, we will include the following code in Cornerstone's [home.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/home.html) file to display New Products on our store's home page. \n\n\n```\n  {{#if products.new}}\n        {{> components/products/new products=products.new columns=theme_settings.homepage_new_products_column_count}}\n    {{/if}}\n```\n",
                        "header": {
                          "anchor": "front-matter-overview_declaring-objects"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## YAML Syntax – Requirements\n\nStencil front matter uses the conventions of [YAML]() (short for the recursive \"YAML Ain't Markup Language\"). Here are the YAML conventions you must follow in front matter:\n\nPlace the front-matter block at the top of your template.\nFence the beginning and end of the front-matter block with a row of three hyphens (---), as you see in the examples here.\nShow attribute > key relationship (or object > property relationship) by indenting the children. In the example above, products is the object,\nPlace a colon (:) directly after each attribute name, and directly after each key name. (Colons separate key:value pairs.)\nIdentifiers are case-sensitive.\n\n### Restrictions\n\nYou can use front matter to specify attributes on the tops of pages in your\n`<theme-name>/templates/pages/` subdirectory.\n\nYou **cannot** use front matter to accomplish this on pages in the following subdirectories:\n* `<theme-name>/templates/components/`\n* `<theme-name>/templates/layout/`\n* `<theme-name>/templates/pages/custom/` \n\n* Indent using only spaces, not tabs. (YAML forbids tabs, to avoid inconsistent encoding of tabs across platforms.) An indent of even one space indicates a child.\n\n* Front matter on a given page cannot exceed 64 KB.\n\n* If a front-matter directive contains an invalid option, Stencil CLI will silently ignore that option.\n\n",
                        "header": {
                          "anchor": "front-matter-overview_yaml-syntax"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Filtering Attributes\n\nSome attributes can accept indented keys, or key-value pairs, to further define the attribute. For example, limit is a key commonly used to restrict the number of objects to return for an attribute.\nTo return products similar to the product that a customer is currently viewing – with a limit of six – you would declare front matter as follows:\n\n```\n---\nproducts:\n    similar_by_views:\n        limit: 6\n---\n```\n\nMost keys have a default value, as listed in the [Front Matter Attributes]() Reference. Specifying the key without a value will call that default value. The default value for `similar_by_views:limit:` happens to be `4`, so inserting `limit` with no integer will display four products:\n\n```\n---\nproducts:\n    similar_by_views:\n        limit:\n---\n```\n",
                        "header": {
                          "anchor": "front-matter-overview_filtering-attributes"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "body": "To keep your pages lightweight, specify only the attributes you need per page. Also, use the limit key (with appropriate values) for attributes that accept it.",
                          "title": "Filtering for Faster Page Loads"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Combining Front Matter with Handlebars Attributes\n\nThe next example builds on front-matter object invocation and filtering, by showing a corresponding Handlebars statement in HTML. Here is how you would declare the `products` object to return four new products, and to then display each product’s name:\n\n```\n---\nproducts:\n    new:\n        limit: 4\n---\n\n<h1> This is the HTML for the new-products example </h1>\n{{#each products.new}}\n    <p>{{ name }}</p>\n{{/each}}\n```",
                        "header": {
                          "anchor": "front-matter-overview_combining-front-matter"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "body": "In the above HTML, the {{ name }} identifier calls an attribute of Stencil’s common product card model, which consolidates details about a given product. For this and other objects that you can access through HTML, please see our reference section on Handlebars objects.",
                          "title": " Reading the Handlebars"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Default versus Custom Attributes, per Page\n\nTo make templates readily useful, they automatically include a page’s default attributes. For example, a theme’s [product.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/product.html) page will automatically include a product attribute.\n\nHowever, if you want to include additional attributes on a page, you can declare those attributes in front matter using the conventions shown above. [The Declaring Objects](#front-matter-overview_declaring-objects) example shows the only way to display a \"new products\" storefront section, which requires front-matter invocation.",
                        "header": {
                          "anchor": "front-matter-overview_default-versus-custom"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Declaring Multiple Attributes\n\nBelow is an example that assumes you want to include a product’s reviews and also related products. To display images for the related products, the HTML statement `<img src=\"{{getImage image 'gallery'}}\">` relies on Stencil's `{{getImage}}` custom Handlebars helper:\n\n```\n---\nproduct:\n   reviews:\n       limit: 9\n   related_products:\n       limit: 10\n---\n\n\n<h2>{{ product.name }}</h2>\n{{#each product.reviews.list}}\n    <p>{{text}}</p>\n{{/each}}\n<h3>Related Products</h3>\n{{#each product.related_products}}\n  <img src=\"{{getImage image 'gallery'}}\">\n  <p>{{ name }}</p>\n{{/each}}\n```\n\n",
                        "header": {
                          "anchor": "front-matter-overview_declaring-multiple"
                        }
                      }
                    ]
                  },
                  "config": {
                    "sidebar": {
                      "token": "overview"
                    }
                  }
                },
                {
                  "title": "Front Matter Attributes",
                  "route": {
                    "path": "/front-matter-attributes-reference"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Front Matter Attributes Reference</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#front-matter-attributes-reference_global\">Global Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_category\">Category Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_blog\">Blog Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_product\">Product Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_brand\">Brand Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_brand-list\">Brand List Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_cart\">Cart Attributes</a></li>\n    <li><a href=\"#front-matter-attributes-reference_search\">Search Attributes</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Global Attributes\n\nGlobal attributes are available on all pages.\n\n<table>\n  <tr>\n    <th>Attribute</th>\n    <th>Option with Sample Assignment</th>\n    <th>Default Value</th>\n    <th>Details and Other \nAllowable Values/Results</th>\n  </tr>\n  <tr>\n    <td>customer:</td>\n    <td></td>\n    <td></td>\n    <td>Customer attributes are always included, and are available if the active shopper is logged in.</td>\n  </tr>\n\n  <tr>\n  \t<td></td>\n  \t<td>addresses: true</td>\n    <td>true – on address page\n\nnull – on all other pages</td>\n    <td>Boolean indicating whether to retrieve addresses for this customer.\n\nNo filtering available. Default sorting is by address id, from lowest to highest.\n\nnull or false: Do not retrieve addresses.\ntrue: Retrieve addresses.</td>\n  </tr>\n  \n  <tr>\n    <td></td>\n    <td>returns: true</td>\n    <td>true – on returns page\n\nnull – on all other pages</td>\n    <td>Boolean indicating whether to retrieve product-return requests for this customer.\n      \n      No filtering available.\n      \n      true: Retrieve requests.\n      \n      null or false: Do not retrieve requests.</td>\n  </tr>\n  \n  <tr>\n    <td></td>\n    <td>wishlists: <br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: No wishlists displayed.\n      <br><p></p>\n      &lt;number&gt; limits the number of wishlists displayed.\n      <br><p></p>\n      If &lt;number&gt; is not defined, retrieves an unlimited number of wishlists.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">orders: <br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">null</td>\n    <td class=\"\">Contains all orders, complete or not.\n      <br><p></p>\n      null: no orders displayed.\n      <br><p></p>\n      &lt;number&gt; limits the number of orders displayed.\n      <br><p></p>\n      If &lt;number&gt; is not defined, displays 20 orders. (Default sorting is by order id, from lowest to highest.)</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">recently_viewed_products:</td>\n    <td class=\"\">null</td>\n    <td class=\"\">Boolean indicating whether to display recently viewed products.<br><p></p>\n\nNo filtering available.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\">products:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">(When filtering/limiting, products' default sorting is by order id, from lowest to highest.)</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">featured: <br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: No featured products displayed.<br><p></p>\n&lt;number&gt; limits the number of featured products displayed.\n      <br><p></p>\n      If &lt;number&gt; is not set, defaults to 4 products.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">new:<br>\n      <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">\nnull</td>\n    <td class=\"\">null: No new products displayed.<br><p></p>\n&lt;number&gt; limits the number of new products displayed. Maximum allowable value is 25.\n      <br><p></p>\n      If &lt;number&gt; is not defined, defaults to 8 products.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">top_sellers: <br>\n      <span class=\"indent1\">limit:  &lt;number&gt;</span></td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: No top-selling products displayed.\n      <br><p></p>\n      &lt;number&gt; limits the number of top sellers displayed.\n      <br><p></p>\n      If &lt;number&gt; is not defined, defaults to all top sellers.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">carousel: true</td>\n    <td class=\"\"></td>\n  <td class=\"\">null</td>\n    <td class=\"\">Boolean indicating whether to display a carousel on storefront.\n      <br><p></p>\n      No filtering available.\n      <br><p></p>\n      null or false: No carousel display.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">blog:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">(Default sorting is by published_date, from most-recent to earliest.)</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">recent_posts:<br>\n      <span class=\"indent1\">limit: &lt;number&gt;</span>\n    </td>\n    <td class=\"\">20</td>\n    <td class=\"\">null: No recent blog posts displayed.\n      <br><p></p>      \n      &lt;number&gt; limits the number of recent blog posts displayed.\n      <br><p></p>      \n      If &lt;number&gt; is not defined, defaults to the maximum of 20 blog posts.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">summary: &lt;number&gt;</td>\n    <td class=\"\">100</td>\n    <td class=\"\"><!-- null: No summary characters displayed.<br><p></p> -->      \n      &lt;number&gt; sets the number of characters to display in each blog-post summary.\n      <br><p></p>\n      If &lt;number&gt; is not defined, displays 100 characters.</td>\n  </tr>\n  \n  <!-- <tr>\n    <td class=\"\">brands:<br>\n        <span class=\"indent1\">&lt;number&gt;</span></td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: Do not display a brand list.<br><p></p>\n&lt;number&gt; limits the number of brands to return.<br><p></p>\nIf &lt;number&gt; is not defined, returns all brands.</td>\n  </tr> -->\n  \n  <tr>\n    <td class=\"\">cart: true</td>\n    <td class=\"\"></td>\n    <td class=\"\">false</td>\n    <td class=\"\">Boolean indicating whether to retrieve cart data.<br><p></p>\ntrue: Return cart data.<br><p></p>\nfalse: Do not return cart data.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">categories: true</td>\n    <td class=\"\"></td>\n    <td class=\"\">false</td>\n    <td class=\"\">Boolean indicating whether to retrieve the <a href=\"docs/global-resources#Categories\">category tree</a> during an AJAX request.\n      <br><p></p>\n      true: Retrieve the category tree.\n      <br><p></p>\n      false: Do not retrieve the category tree.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">description: true</td>\n    <td class=\"\">\nfalse</td>\n    <td class=\"\">\nBoolean indicating whether to retrieve category descriptions dynamically from the database.\n      <br><p></p>\n      Set to true for themes that must display category descriptions when pages render. (This can slow page loads.)</td>\n  </tr>\n    \n  <tr>\n    <td class=\"\">shop_by_brand:</td>\n    <td class=\"\">limit: &lt;number&gt;</td>\n    <td class=\"\">null</td>\n    <td class=\"\">Typically used in a footer or sidebar.<br><p></p>\nnull: Do not display this brand list.<br><p></p>\n&lt;number&gt; limits the number of brands to return.<br><p></p>\nIf &lt;number&gt; is not defined, returns 10 brands, ordered by the number of products per brand.</td>\n  </tr>\n\n  <!-- <tr>\n    <td class=\"\">suggested_products:<br>\n  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; limit: &lt;number&gt;</td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: Do not display suggested products.<br><p></p>\n&lt;number&gt; limits the number of suggested products to return.<br><p></p>\nIf &lt;number&gt; is not defined, returns 4 suggested products.</td>\n  </tr> -->\n</table>",
                        "header": {
                          "anchor": "front-matter-attributes-reference_global"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Category Attributes \n\nCategory attributes are available in the context of a category.<br><br>\n\n<table>\n  <tr>\n    <td>Attribute</td>\n    <td>Option with Sample Assignment</td>\n    <td>Default Value</td>\n    <td>Details</td>\n  </tr>\n  <tr>\n    <td class=\"\">category:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n  </tr>\n\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">shop_by_price:</td>\n    <td class=\"\">\nfalse</td>\n    <td class=\"\">\nBoolean indicating whether to display Shop-by-Price controls.</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">products:<br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">\n16</td>\n    <td class=\"\">\nDefines the number of products displayed per page for this category. Range of possible values is 1&ndash;100 products.</td>\n  </tr>\n</table>",
                        "header": {
                          "anchor": "front-matter-attributes-reference_category"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Blog Attributes\n\nBlog attributes are available in the context of a blog.<br><br>\n\n<table>\n  <tr>\n    <td>Attribute</td>\n    <td>Sub-Attribute</td>\n    <td>Option with Sample Assignment</td>\n    <td>Default Value</td>\n    <td>Details</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">blog:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n  </tr>\n\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">posts:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">(Default sorting is by published_date, from most-recent to earliest.)</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">limit: &lt;number&gt;</td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: No blog posts displayed.<br><p></p>\n      &lt;number&gt; limits the number of blog posts displayed.<br><p></p>\n      Maximum is 20 blog posts per page.\n    </td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">pages: &lt;number&gt;</td>\n    <td class=\"\">5</td>\n    <td class=\"\">\nnull: No pagination.<br><p></p>\n      \n      &lt;number&gt; sets the number of pages to display in pagination links.<br><p></p>\n      \n      If &lt;number&gt; is not defined, defaults to 5 pages.\n    </td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">summary: &lt;number&gt;</td>\n    <td class=\"\">250</td>\n    <td class=\"\"> <!-- null: No summary characters displayed.<br><p></p> -->  \n      &lt;number&gt; sets the number of characters to display in each blog-post summary.<br><p></p>\nIf &lt;number&gt; is not defined, displays 250 characters.</td>\n  </tr>\n</table>",
                        "header": {
                          "anchor": "front-matter-attributes-reference_blog"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Product Attributes \n\nProduct attributes are available in the context of a product.\n\n<table>\n  <tr>\n    <td>Attribute</td>\n    <td>Option with Sample Assignment</td>\n    <td>Default Value</td>\n    <td>Details</td>\n  </tr>\n  <tr>\n    <td class=\"\">product:</td>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">(When filtering/limiting, products' default sorting is by order id, from lowest to highest.)</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">videos:<br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">\n[unlimited]</td>\n    <td class=\"\">If product.videos is not defined, no videos are returned.<br><p></p>\n      \n      If product.videos is defined, the default behavior is to return all videos. <!-- Check & correct this. --> <br><p></p>\n      \n      If product.videos.limit is also defined, &lt;number&gt; sets the maximum number of videos returned.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">images:<br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">\n[unlimited]</td>\n    <td class=\"\">If product.images is not defined, no images are returned.<br><p></p>\n      \n      If product.images is defined, you must also define product.images.limit, which throttles the number of images returned. <br><p></p>\nThe maximum allowable value for this option's &lt;number&gt; parameter is 5 images.</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">reviews: true<br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td>[false]</td>\n    <td>Boolean indicating whether to display product reviews.\n        \n      If product.reviews is present, and is not explicitly set to \"false\", reviews will appear.\n      \n      If &lt;number&gt; is not defined, defaults to 10 reviews.\n      (When filtering/limiting reviews, default sorting is by review id, from lowest to highest.)</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">related_products:<br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">\n[unlimited]</td>\n    <td class=\"\">Displays products that are related by name.<br><p></p>\n      \n      &lt;number&gt; limits the number of products displayed.<br><p></p>\n      \n      If &lt;limit&gt; is absent or undefined, the default behavior is to display all related products.<br><p></p> \n\nInserting “limit:” with no integer will display 0 products. </td>\n  </tr>\n  \n  <tr>\n    <td></td>\n    <td>similar_by_views:<br>\n        <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td>[unlimited]</td>\n    <td>Displays products similar to those displayed in the current page context.<br><p></p>\n      \n      &lt;number&gt; limits the number of products displayed.\n      \n      If &lt;limit&gt; is absent or undefined, default is to display 4 products.</td>\n  </tr>\n</table>",
                        "header": {
                          "anchor": "front-matter-attributes-reference_product"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Brand Attributes\n\nBrand attributes are available in the context of a brand.<br><br>\n\n<table>\n  <tr>\n    <td>Attribute</td>\n    <td>Option with Sample Assignment</td>\n    <td>Default Value</td>\n    <td>Details</td>\n  </tr>\n  <tr>\n    <td>brand:</td>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">products: <br>\n      <span class=\"indent1\">limit: &lt;number&gt;</span></td>\n    <td class=\"\">\n50</td>\n    <td class=\"\">\nDefines the number of products displayed per page for this brand. Range of possible values is 1&ndash;50 products.</td>\n  </tr>\n</table>",
                        "header": {
                          "anchor": "front-matter-attributes-reference_brand"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Brand List Attributes\n\nThese attributes are available in the context of a list of brands.<br><br>\n\n<table>\n  <tr>\n    <td>Attribute</td>\n    <td>Option with Sample Assignment</td>\n    <td>Default Value</td>\n    <td>Details</td>\n  </tr>\n  <tr>\n    <td>brands:</td>\n    <td></td>\n    <td></td>\n    <td>(When retrieving a collection of brands, default sorting is by brand id, from lowest to highest.)</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\">limit: &lt;number&gt;</td>\n    <td class=\"\">50</td>\n    <td class=\"\">\nSets the number of brands displayed in the list. If &lt;limit&gt; is not defined, returns all brands, up to a maximum of 50.</td>\n  </tr>\n</table>",
                        "header": {
                          "anchor": "front-matter-attributes-reference_brand-list"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Cart Attributes \n\nCart attributes are available in the context of a shopper's cart.\n\n<table>\n  <tr>\n    <td>Attribute</td>\n    <td>Sub-Attribute</td>\n    <td>Option with Sample Assignment</td>\n    <td>Default Value</td>\n    <td>Details</td>\n  </tr>\n  <tr>\n    <td>cart</td>\n    <td></td>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td></td>\n    <td>suggestions:</td>\n    <td></td>\n    <td></td>\n    <td>Suggested products to display to shopper, based on cart contents. <NOBR>(If enabled,</nobr> these suggestions appear only immediately after the shopper adds an item to the cart.)</td>\n  </tr>\n  <tr>\n    <td class=\"\"></td>\n    <td class=\"\"></td>\n    <td class=\"\">limit: &lt;number&gt;</td>\n    <td class=\"\">null</td>\n    <td class=\"\">null: Do not display suggested products.<br><p></p>\n&lt;number&gt; limits the number of suggested products to return.\nIf &lt;number&gt; is not defined, returns 4 suggested products.</td>\n  </tr>\n</table>",
                        "header": {
                          "anchor": "front-matter-attributes-reference_cart"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Search Attributes \n\nSearch attributes are available in the context of a search results page.\n\n<table>\n  <tr>\n    <td>Attribute</td>\n    <td>Sub-Attribute</td>\n    <td>Option with Sample Assignment</td>\n    <td>Default Value</td>\n    <td>Details</td>\n  </tr>\n  <tr>\n    <td>search</td>\n    <td></td>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td></td>\n    <td>product_results:</td>\n    <td></td>\n    <td></td>\n    <td></td>\n  </tr>\n\n  <tr>\n    <td></td>\n    <td></td>\n    <td>limit: &lt;number&gt;</td>\n    <td>16</td>\n    <td>\nDefines the number of product search results displayed per page. Range of possible values is 1&ndash;100 products.</td>\n  </tr>\n</table>",
                        "header": {
                          "anchor": "front-matter-attributes-reference_search"
                        }
                      }
                    ]
                  },
                  "config": {
                    "sidebar": {
                      "token": "Reference"
                    }
                  }
                }
              ]
            }
          },
          {
            "title": "Template Files",
            "route": {
              "path": "/template-files"
            },
            "data": {
              "children": [
                {
                  "title": "Templates Directory",
                  "route": {
                    "path": "/templates-directory"
                  },
                  "data": {
                    "children": [
                      {
                        "title": "Components Subdirectory",
                        "route": {
                          "path": "/components-subdirectory"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Components Subdirectory</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#components_components-subdirectory\">Components Subdirectory</a></li>\n    <li><a href=\"#components_naming-requirements\">Naming Requirements</a></li>\n\t</ul>\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## Components Subdirectory\n\nThe `/templates/components/` subdirectory contains Handlebars and HTML components (provided as `.html` files) to create page structure. You can reuse these code snippets and partials throughout your theme.\n\nYou can take a look at the Cornerstone components subdirectory and its contents in the [Github repository here](https://github.com/bigcommerce/cornerstone/tree/master/templates/components).\n\nSubdirectories of `/templates/components/` group together pages that serve a particular storefront function. For example, [here](https://github.com/bigcommerce/cornerstone/tree/master/templates/components/search) are the `.html` files contained in the `/search/` subdirectory.\n\nFurthermore, the [`/common/` subdirectory](https://github.com/bigcommerce/cornerstone/tree/master/templates/components/common) contains forms and icons resources, plus a collection of single-purpose files.",
                              "header": {
                                "anchor": "components_components-subdirectory"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Naming Requirements\n\n**Important:** Four children of the `/templates/components/` subdirectory each contain a set of templates whose file names must remain constant. However, you are free to move each set of template files to other path locations – as long as you keep each set together in one folder and specify the new location. Those folders are note below:\n\n* [common/forms](https://github.com/bigcommerce/cornerstone/tree/master/templates/components/common/forms)\n* [common/faceted-search/facets](https://github.com/bigcommerce/cornerstone/tree/master/templates/components/faceted-search/facets)\n* [common/products/customizations](https://github.com/bigcommerce/cornerstone/tree/master/templates/components/products/customizations)\n* [common/products/options](https://github.com/bigcommerce/cornerstone/tree/master/templates/components/products/options)",
                              "header": {
                                "anchor": "components_naming-requirements"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "You can use front matter to specify resources only on pages in the `/templates/pages/` subdirectory, not on pages here in the `/templates/components/` subdirectory.\n\nPlease bear in mind that if a front-matter directive contains an invalid option, Stencil CLI will silently ignore that option.",
                                "title": " Front-Matter Restrictions",
                                "type": "warning"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Layout Subdirectory",
                        "route": {
                          "path": "/layout-subdirectory"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Layout Subdirectory</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#layout_layout-subdirectory\">Layout Subdirectory</a></li>\n\t</ul>\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## Layout Subdirectory\n\nThe `/templates/layout/` subdirectory is where you assemble Handlebars resources to define your storefront site’s overall structure (header, footer, etc.). You can implement multiple layouts here for different use cases, making it easy to switch between different look-and-feel variations of the same theme.\n\nAs prototypes, we have provided a minimal [base.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/layout/base.html) page in this subdirectory. To develop your theme, you can copy and/or modify this prototype.\n\n**Note:** _Be sure to set permission `755 (drwxr-xr-x)` on any new _subdirectories_ that you add. Also, be sure to set permission `644 (rw-r--r--)` on any new _files_ that you add. Without these permissions, running your theme locally will fail with multiple error messages. Bundling your theme will also fail, blocking its upload to a store._",
                              "header": {
                                "anchor": "layout_layout-subdirectory"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "You can use front matter to specify resources only on pages in the `/templates/pages/` subdirectory, but **not** on pages here in the `/templates/layout/` subdirectory. If a front-matter directive contains an invalid option, Stencil CLI will silently ignore that option.",
                                "title": "Front Matter Restrictions",
                                "type": "warning"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Pages Subdirectory",
                        "route": {
                          "path": "/pages-subdirectory"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Pages Subdirectory</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#pages_pages-subdirectory\">Pages Subdirectory</a></li>\n    <li><a href=\"#pages_naming-requirements\">Naming Requirements</a></li>\n\t</ul>\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## Pages Subdirectory\n\nThe `/templates/pages/` subdirectory contains the complete set of base template pages used to construct a BigCommerce online store. These pages call resources from the `/templates/components/` and `/templates/layout/` subdirectories.\n\nChildren of [this subdirectory](https://github.com/bigcommerce/cornerstone/tree/master/templates/pages) group together pages that serve a particular **storefront function**. For example, you can view contents of the [/errors/](https://github.com/bigcommerce/cornerstone/tree/master/templates/pages/errors) and [/gift-certificate/](https://github.com/bigcommerce/cornerstone/tree/master/templates/pages/gift-certificate) subdirectories.\n\nThe subdirectory’s [.html files](https://github.com/bigcommerce/cornerstone/tree/master/templates/pages) are single-purpose pages.",
                              "header": {
                                "anchor": "pages_pages-subdirectory"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Naming Requirements\n\nDo not change the names of the `/templates/pages/` subdirectory or its contained files. These default names are required for the storefront to compile properly. You can, however, edit pages’ front‑matter and Handlebars resources to customize the storefront theme’s look and function.",
                              "header": {
                                "anchor": "pages_naming-requirements"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "type": "warning",
                                "body": "Pages in the `/templates/pages/` subdirectory are the **only** place you can insert and modify\nYAML front-matter attributes to customize the rendered storefront.",
                                "title": " Front-Matter Restriction"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Using Disqus with Stencil",
                        "route": {
                          "path": "/new-subpage"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Using Disqus with Stencil</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#using-disqus_disqus-overview\">Disqus Overview</a></li>\n    <li><a href=\"#using-disqus_stencil-blog\">Integrating Disqus with your Stencil blog</a></li>\n    <li><a href=\"#using-disqus_stencil-product-pages\">Integrating Disqus with your Stencil Product Pages</a></li>\n\t</ul>\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## Disqus Overview \n\nStencil themes have the ability to integrate with Disqus, a third party commenting system that allows users to leave blog comments on blog posts made with Stencil's Built-In Blog. Disqus can also be used with on Stencil product pages to allow comment and review threads on individual products.",
                              "header": {
                                "anchor": "using-disqus_disqus-overview"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Integrating Disqus with your Stencil blog\n\nTo use Disqus blog comments in Stencil, follow the steps below:\n\n1. Log in to your BigCommerce Control Panel\n2. Navigate to Storefront Design > My Themes\n3. Open Edit Theme Files for your theme\n4. Navigate to Templates > Pages > blog-post.html\n5. Paste your Disqus Universal Code before the closing {{/partial}} tag\n6. Save your files\n7. Apply your theme\n",
                              "header": {
                                "anchor": "using-disqus_stencil-blog"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Integrating Disqus with your Stencil Product Pages\n\n1. Log in to your BigCommerce Control Panel\n2. Navigate to Storefront Design > My Themes\n3. Open Edit Theme Files for your theme\n4. Navigate to Templates > Pages > product.html\n5. Paste your Disqus Universal Code before the closing {{/partial}} tag\n6. In the Disqus Universal Code that you have posted, there is a function that reads like below:\n\n```\n var disqus_config = function () {\n        this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable\n        this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable\n    };\n```\n\nChange the value of this.page.url to be `product.url;`, and the value of this.page.identifier to be `product.id`; so that the function now reads like below:\n\n```\nvar disqus_config = function () {\n        this.page.url = product.url;\n        this.page.identifier = product.id;\n    };\n```\n\n7. Save your files\n8. Apply your theme",
                              "header": {
                                "anchor": "using-disqus_stencil-product-pages"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Additional Resources\n* [Enabling Disqus for Product Reviews (Blueprint)](https://forum.bigcommerce.com/s/article/How-do-I-enable-Disqus-as-my-Comment-Service?_ga=2.224340315.1984523106.1539568940-967431010.1523308107#get-code)\n* [Using Disqus for Blog Comments](https://forum.bigcommerce.com/s/article/Using-Disqus-Comments?_ga=2.224340315.1984523106.1539568940-967431010.1523308107)"
                            }
                          ]
                        },
                        "config": {
                          "sidebar": {
                            "token": "tutorial"
                          }
                        }
                      }
                    ],
                    "blocks": []
                  }
                },
                {
                  "title": "Custom Templates",
                  "route": {
                    "path": "/custom-templates"
                  },
                  "data": {
                    "children": [
                      {
                        "title": "About Custom Templates",
                        "route": {
                          "path": "/about-custom-templates"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>About Custom Templates</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#custom-templates_about-custom\">About Custom Templates</a></li>\n\t\t<li><a href=\"#custom-templates_stencil-versus-blueprint\">Stencil versus Blueprint Themes</a></li>\n    <li><a href=\"#custom-templates_video-demo\">Video Demo</a></li>\n\t</ul>\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## About Custom Templates\n\nAbout Custom Templates\nThe Stencil framework allows theme developers and merchants to assign custom layout templates to storefront pages of the following types:\n\n* Brand\n* Category\n* Product\n* Page (meaning \"Web Pages\" – the BigCommerce control panel's designation for static store pages, which can include the store's home page)\n",
                              "header": {
                                "anchor": "custom-templates_about-custom"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Stencil versus Blueprint Themes\n\nIf you are migrating from BigCommerce's legacy Blueprint themes framework, please keep in mind these differences in how Stencil handles custom templates:\n\n* The brand option is entirely new in Stencil. If you are running on a Blueprint theme, you will not be able to create a custom template for brand pages.\n* Unlike Blueprint, Stencil does not require that custom templates' file names start with an underscore (_).\n* In the current Stencil release, you must create and bundle custom templates using Stencil CLI before you can upload the custom templates to stores. However, once you have created and uploaded templates, authorized store users can assign them to storefront pages through the control panel.",
                              "header": {
                                "anchor": "custom-templates_stencil-versus-blueprint"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Video Demo\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/qgaDX7bhmd8\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>",
                              "header": {
                                "anchor": "custom-templates_video-demo"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Authoring, Testing, & Uploading Custom Templates",
                        "route": {
                          "path": "/new-subpage-2"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Authoring, Testing, and Uploading Custom Templates</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#authoring-testing-uploading_authoring\">Authoring Templates</a></li>\n    <li><a href=\"#authoring-testing-uploading_local-mapping\">Local Mapping and Testing</a></li>\n\t\t<li><a href=\"#authoring-testing-uploading_theme-upload\">Theme Upload</a></li>\n\t\t<li><a href=\"#authoring-testing-uploading_troubleshooting\">Troubleshooting Template Authoring</a></li>\n\t</ul>\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## Authoring a Custom Template\n\nAs a the theme developer, you must first create the `custom` subdirectory in the `templates/pages` directory, and four required subdirectories inside of it (brand, category, product, page), which will result in the following directory paths:\n\n* templates/pages/custom/brand \n* custom/category/custom/category\n* custom/product/custom/product\n* custom/page/custom/page\n\nNext,  create the template HTML files, and then place them in the appropriate `<theme-name>/templates/pages/custom/` subdirectories corresponding to the types listed above. ",
                              "header": {
                                "anchor": "authoring-testing-uploading_authoring"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "type": "warning",
                                "body": "Be sure to set permission `755 (drwxr-x-r-x)` on any new subdirectories that you add.\nAlso, be sure to set permission `644 (rw-r–r–)` on any new files that you add.\n\nWithout these permissions, running your theme locally will fail with multiple error messages.\nBundling your theme will also fail, blocking its upload to a store.",
                                "title": "Subdirectory/File Permissions Required"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Local Mapping and Testing\n\nTo test your custom templates locally, you must edit your `<theme-name>/.stencil` file to create mappings between each local template and a corresponding URL. Within the `.stencil` file, look for the following section:\n\n```\n\"customLayouts\": {\n    \"product\": {},\n    \"brand\": {},\n    \"category\": {},\n    \"page\": {}\n  }\n```\n\nIn this section, you would populate keys to create mappings. As a simple example, assume that you have a product custom template named alternate-`product.html`, and you want to see that template locally at the URL: http://localhost:3000/test-url/. In this case, you must populate the product key as follows:\n\n```\n    \"product\": {\n    \t\"alternate-product.html\":\"/test-url/\"\n    },\n```\n\n### Expanded Mapping Example\n\nHere is a more-complete example in which the `brand`, `page`, and `category` keys are also populated:\n\n```\n{\n  \"normalStoreUrl\": \"http://cornerstone-light-demo.mybigcommerce.com\",\n  \"port\": 3000,\n  \"username\": \"stencil\",\n  \"token\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n  \"customLayouts\": {\n    \"product\": {\n      \"custom-product.html\": \"/custom-product/\"\n    },\n    \"brand\": {\n      \"custom-brand.html\": \"/brands/custombrand/\"\n    },\n    \"page\": {\n      \"custom-page.html\": \"/custom-page/\"\n    },\n    \"category\": {\n      \"custom-category.html\": \"/custom-category/\"\n    }\n  }\n}\n```\n\n### Mapping Requirements and Options\n\nIn the .stencil mapping examples above:\n\n* Each mapped URL must be a URL for a brand, category, product, or static page that is _already configured in the store_. This means that you cannot insert a placeholder URL that is an arbitrary string of letters, such as /abcdefghijklmnop/.\n* Each URL’s trailing slash is _optional_.\n* The HTML files must reside in either the brand, category, product, or page subdirectories.\n* All brand URLs are nested under the /brands/ parent. Use URL encoding with brand URLs.\n* That parent for brand URLs is /brands/ (plural), while the corresponding subdirectory for HTML files is /brand/ (singular).\n* After editing your `.stencil` file, you must restart stencil to see your changes locally. Enter `stencil start` on the command line, appending any appropriate switches for your workflow (e.g.: `stencil start -e -n`).\n\n### Why These URL Requirements?\n\nWhen you create a local custom template page for products, you expect that page to have access to all Stencil product objects. However, the server cannot readily determine the page type of each local custom template. So we give it a hint: We instruct the server to look at the page type of the URL to which you have mapped the template.\n\nIn the above `.stencil` configuration example’s final entry, the server will look at the URL `/custom‑category/` within the store, deduce that the page type is `category`, and return a category context to Stencil CLI. This allows Stencil CLI to properly display the page in the browser when you visit http://localhost:3000/custom‑category/ locally, or when shoppers visit the corresponding public store page.\n\n### Mapping Multiple URLs\nBeyond the single URL mapped to each template in the above examples, you have the option of mapping an array of URLs to each template. This is shown in the following example for the product template:\n\n```\n  \"customLayouts\": {\n    \"product\": {\n      \"featured-product.html\": [\"/special-product-one\", \"/special-product-two\"],\n      \"clearance-product.html\": \"/clearance-product\"\n    },\n    \"brands\": {},\n    \"categories\": {},\n    \"page\": {}\n  }\n}\n```",
                              "header": {
                                "anchor": "authoring-testing-uploading_local-mapping"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Theme Upload\n\nFinally, you must bundle and upload the theme to BigCommerce. See the Bundling and Uploading a Theme article for instructions on how to achieve this.",
                              "header": {
                                "anchor": "authoring-testing-uploading_theme-upload"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Troubleshooting Template Authoring\n\nHere are solutions to some known problems in locally authoring and testing custom templates:\n\n### Viewing Custom Brand Templates Locally\n\nIf you are having trouble viewing custom brand templates locally, ensure that the URL used in your .stencil file is of the form: /brands/brandname. This is necessary because all the brand pages are located under the /brands/ URL path.\nAlso, bear in mind that currently, all brand URLs are Unicode-encoded. So, for example, you should replace a hyphen with: %252d.\n\n### Outdated Stencil CLI\n\nIf you have an old version of Stencil CLI installed, it might lack support for custom templates. You can easily update your CLI by executing the following command:\n\n`npm install -g bigcommerce/stencil-cli`",
                              "header": {
                                "anchor": "authoring-testing-uploading_troubleshooting"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Assigning Templates to Pages",
                        "route": {
                          "path": "/assigining-templates-to-pages"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Assigning Templates to Pages</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#assigning_merchant-performed\">Merchant Performed Actions</a></li>\n\t\t<li><a href=\"#assigning_assigning-a-web-page\">Assigning a Web Page Template</a></li>\n    <li><a href=\"#assigning_assigning-a-product\">Assigning a Product, Brand, or Category Template</a></li>\n    <li><a href=\"#assigning_troubleshooting\">Troubleshooting Template Assignments</a></li>\n\t</ul>\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## Merchant Performed Actions\n\nOnce the developer has uploaded a theme to BigCommerce, the merchant (or other authorized store user) can assign custom templates to individual store pages in the BigCommerce Control Panel. The steps are similar whether assigning brands, categories, products, and static Web pages – with slight differences. Below, we show examples for assigning a Web Page and a Category. For further details, please see the [Stencil Custom Templates Knowledge Base article](https://forum.bigcommerce.com/s/article/Stencil-Themes#custom-template).",
                              "header": {
                                "anchor": "assigning_merchant-performed"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Assigining a Web Page Template\n\nStarting from the BigCommerce control panel's left navigation pane:\n\n1. Select `Storefront` > `Web Pages`.\n2. From the resulting `View Web Pages` display, select the existing Page \n3. Name to which you want to assign a custom template. (Or select `Create a Web Page` to define a new page.)\n4. From the resulting `Edit a Web Page` display, scroll down to the `Template Layout File` drop-down list. Then select your desired custom template from that list, as shown below.",
                              "header": {
                                "anchor": "assigning_assigning-a-web-page"
                              }
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539930165487",
                              "config": {
                                "centered": true,
                                "fluid": true,
                                "bordered": true,
                                "maxWidth": "600",
                                "maxHeight": "400"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "Some static page types do not allow you to assign custom templates. You can recognize these excluded pages because their `Edit a Web Page` display will not include a `Template Layout File` drop-down list.",
                                "title": "Static Pages You Can't Assign",
                                "type": "warning"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Assigning a Product, Brand, or Category Template\n\nStarting from the BigCommerce control panel's left navigation pane:\n\n1. Select `Products` > `View` (for a product page) `Products` > `Product Categories` (for a category page), or `Products` > `Brands` (for a brand page).\n2. Select the Product Name, Category Name, or Brand Name to which you want to assign a custom template. (Or select the `Add` or `Create` button at the upper left to define a new product, category, or band.)\n3. For a product page (only), you must select the `Other Details` tab to proceed to the next step.\n4. Scroll to the `Template Layout File` drop-down list, and select your desired custom template from that list, as shown below for a Category assignment.\n5. Click the Save & Exit or Save & Keep Editing button at the lower right.\n",
                              "header": {
                                "anchor": "assigning_assigning-a-product"
                              }
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539930552310",
                              "config": {
                                "fluid": true,
                                "centered": true,
                                "bordered": true,
                                "maxWidth": "500",
                                "maxHeight": "200"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Troubleshooting Template Assignments\n\nIn case of problems a custom template in the control panel: Check whether your theme's root directory contains a file named `manifest.json`.\nIf you theme's root directory contains the file, perofrm the following:\n* delete the `manifest.json` file\n* bundle the theme again with the `stencil bundle` command\n* upload the theme\n* apply the theme\n\nThis should enable assigning the template in the control panel.",
                              "header": {
                                "anchor": "assigning_troubleshooting"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Customizing Invoices",
                        "route": {
                          "path": "/new-subpage"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Customizing Invoices/h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#customizing_email\">Customizing the Email Invoice Template</a></li>\n\t\t<li><a href=\"#customizing_merchant\">Customizing the Merchant Printable Invoice</a></li>\n    <li><a href=\"#customizing_customer\">Customizing the Customer Printable Invoice/a></li>\n\t</ul>\n</div>"
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "The email invoice (invoice_email.html) is part of Email Templates in the Control Panel. Editing email templates is covered in the BigCommerce Knowledge Base [here](https://support.bigcommerce.com/articles/Public/Customizing-Emails?_ga=2.195511786.718421096.1540222570-967431010.1523308107#editing-email-templates).\n\nTypically, edits made through the Control Panel will be explicitly covered in the BigCommerce Knowledge Base. However, since the particular email template we are looking at is the invoice template and this article covers customization of all invoices, it is also covered in this article.",
                                "title": " Email Invoice as apart of Email Templates"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Customizing the Email Invoice Template\n\nThe email invoice template is the contents of the email that is sent to a customer after an order has been completed. The email invoice can be edited in the Control Panel in `Storefront` > `Email Templates` > `invoice_email.html`",
                              "header": {
                                "anchor": "customizing_email"
                              }
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1540376724645"
                            },
                            {
                              "type": "text",
                              "data": "After clicking the `edit` button on the right, the WYSIWYG Editor will appear. Follow the BigCommerce [Knowledge Base Article](https://support.bigcommerce.com/articles/Public/Invoices?&_ga=2.89197149.718421096.1540222570-967431010.1523308107#custom) to complete customization of the Invoice Email template."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Customizing the Merchant Printable Invoice\n\nThe Merchant Printable Invoice is the invoice that can be printed from the control panel in `Orders` > `View`. Clicking the `...` in the Action column will generate a list of options, one option being `Print Invoice`.",
                              "header": {
                                "anchor": "customizing_merchant"
                              }
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1540376852310",
                              "config": {
                                "centered": true,
                                "fluid": true,
                                "bordered": true,
                                "maxWidth": "200",
                                "maxHeight": "600"
                              }
                            },
                            {
                              "type": "text",
                              "data": "The invoice that is generated by clicking Print Invoice here relies on a template and variables from BigCommerce's legacy Blueprint themes framework. This invoice can be customized by performing the following steps:\n\n1. Download the [invoice_printable.zip](https://developer.bigcommerce.com/assets/invoice_printable.zip?_ga=2.86330846.718421096.1540222570-967431010.1523308107) file, which contains the skeleton of a printable invoice.\n\n2. Open the file in the text editor of your choice and edit the HTML file to match your desired customization."
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "To navigate through the Blueprint variables contained in the HTML skeleton, please see [this reference material](https://developer.bigcommerce.com/themes/blueprint/?_ga=2.194005739.718421096.1540222570-967431010.1523308107#store-wide-global-variables).\n\n",
                                "title": " Blueprint Variables and Customization\n"
                              }
                            },
                            {
                              "type": "text",
                              "data": "3. In the control panel, set your theme's checkout type to `Custom one-page checkout (for developers)`.\n\n(Use the steps in [this support article](https://support.bigcommerce.com/articles/Public/Checkout-Settings?_ga=2.86510302.718421096.1540222570-967431010.1523308107).)\n\n4. [Use WebDAV](https://support.bigcommerce.com/articles/Public/How-do-I-add-and-link-to-a-file-in-my-store?_ga=2.200813032.718421096.1540222570-967431010.1523308107#upload-a-file) to upload your customized HTML file to WebDAV's `/template/Snippets/` folder.\n\n* This folder becomes available once you enable Custom one-page checkout (for developers).\n* For specific steps, please see [this support article](https://support.bigcommerce.com/articles/Public/File-Access-WebDAV/?q=webdav&l=en_US&fs=Search&pn=1&_ga=2.200813032.718421096.1540222570-967431010.1523308107).\n* Also see [this page](/stencil-docs/prepare-and-upload-a-theme/shrinking-your-theme) about using WebDAV with Stencil themes.\n* We recommend the freeware WebDAV client CyberDuck (Windows and Mac OS), for which your store's control panel offers a downloadable connection file prefilled with most store credentials.\n\n5. Once you have completed the above steps, you are free to switch your theme's checkout type to `One-page checkout` or `Optimized one-page checkout`."
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Customizing the Customer Printable Invoice\n\nThe customer printable invoice is the printable invoice that is available on a storefront’s order page for **shoppers that have registered accounts with your store**.",
                              "header": {
                                "anchor": "customizing_customer"
                              }
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1540377767108"
                            },
                            {
                              "type": "text",
                              "data": "This invoice becomes available in a shopper’s orders after completing an order. A shopper can generate this invoice by clicking `Print Invoice` on the right-hand side of the page.\n\nAs a developer, you can customize this invoice by editing your theme’s `invoice.html` file that is present in your theme's files. In Cornerstone, this file is located in `/cornerstone/templates/pages/account/orders/invoice.html`."
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Customize Stencil Checkout",
                  "route": {
                    "path": "/customiz-stencil-checkout"
                  },
                  "data": {
                    "children": [
                      {
                        "title": "Enable & Restyle Optimized One-Page Checkout",
                        "route": {
                          "path": "/optimized-one-page-checkout"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Enable and Restyle Optimized One-Page Checkout</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#optimized_enable\">Enable Optimized One Page Checkout</a></li>\n    <li><a href=\"#optimized_working\">Working with the Optimized Checkout SCSS File</a></li>\n    <li><a href=\"#optimized_configuring\">Configuring the Desktop Viewport</a></li>\n    <li><a href=\"#optimized_classes\">Classes Available for Customization</a></li>\n    <li><a href=\"#optimized_providing\">Providing User Options in Theme Editor</a></li>\n\t</ul>\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## Enable Optimized One Page Checkout\n\nIn order to customize Stencil's Optimized One Page Checkout, you must first opt into BigCommerce's Optimized One-Page Checkout option if your store is not already running on Optimized One Page Checkout. To do so, use the following steps:\n\n1. Update your Stencil CLI installation to the most-recent version, as outlined here.\n\n2. Enable `Optimized One-Page Checkout` in the store's control panel, as shown below. For more details about using Optimized One-Page Checkout, see  the [Checkout Settings](https://support.bigcommerce.com/articles/Public/Checkout-Settings?_ga=2.265225801.718421096.1540222570-967431010.1523308107) support article.\n\n3. Within your theme's `config.json` file > `meta` section, make sure the `features` array includes the value `customized_checkout`, as shown below:\n\n```\n   \"meta\": {\n     [...]\n     \"features\": [\n       [...]\n       \"customized_checkout\"\n```\n\n4. Within your theme's `<theme-name>/templates/pages/` subdirectory, paste in a clean, uncustomized copy of the `checkout.html` and\n`order-confirmation.html` files. You can find default templates for each file on our [Cornerstone Github Repository]:\n\n* [checkout.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/checkout.html) file template\n* [order-confirmation.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/pages/order-confirmation.html) file template\n\n**Note:** _For Optimized One-Page Checkout to work properly, the `order-confirmation.html` template **must** be present in your theme. If this template is absent, shoppers will receive a server error upon submitting their order.(The corresponding template was named `order-complete.html` in earlier versions of Stencil themes. But that minimal template is **not** a substitute for the required current template.)_\n",
                              "header": {
                                "anchor": "optimized_enable"
                              }
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1540227949000",
                              "header": {
                                "title": "Choosing Optimized One Page Checkout in the Control Panel",
                                "subtitle": "Step #2 in the above description"
                              },
                              "config": {
                                "centered": true,
                                "fluid": true,
                                "bordered": true
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Working with the Optimized Checkout SCSS File \n\nCornerstone includes an SCSS file that styles the Optimized Checkout page. In your local installation, this file is located at `<theme-name>/assets/scss/optimized-checkout.scss`.\n\nYou can access the most recent version of this file in the Cornerstone Repo [here](https://github.com/bigcommerce/cornerstone/blob/master/assets/scss/optimized-checkout.scss), even if your theme is not based on Cornerstone.\n\nTo customize the checkout page, you are free to change classes' _contents_. However, **do not nest elements, nor change any class names**. BigCommerce imposes these restrictions because each class here maps to multiple Optimized Checkout elements. Changing the structure or naming would break updates available in future Optimized Checkout enhancements.\n",
                              "header": {
                                "anchor": "optimized_working"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Configuring the Desktop Viewport \n\nWithin the `optimized-checkout.scss` file, to set up Optimized Checkout's responsive features, you should configure the following breakpoint to define your preferred desktop viewport size:\n\n```\n    // TODO:\n    // Configure media query to be 'desktop' breakpoint size\n    // -----------------------------------------------------------------------------\n    @media (min-width: 801px) {\n        text-align: stencilString(\"optimizedCheckout-logo-position\");\n    }\n```",
                              "header": {
                                "anchor": "optimized_configuring"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Classes Available for Customization \n\nBelow are the classes provided in Cornerstone's `optimized-checkout.scss` file, with the corresponding page elements that they style. _These class names and mappings are subject to change, so please check the inline comments in the `optimized-checkout.scss` file that you downloaded with your current Cornerstone release._\n\n| **Class** | **Styles This Optimized One-Page Checkout Element:** |\n|---|---|\n| `.optimizedCheckout-header` | Page header. |\n| `.optimizedCheckout-headingPrimary` | Top-level headings. |\n| `.optimizedCheckout-headingSecondary` | Certain lower-level elements, such as descriptions of cart items. |\n| `.optimizedCheckout-overlay` | Shipping Method box. |\n| `.optimizedCheckout-contentPrimary` | Body text in the desktop `Order Summary`/`Order Confirmation` (cart contents); drop-down-list items; and text that summarizes completed steps. |\n| `.optimizedCheckout-contentSecondary` | Text labels on check boxes, and lower-level text in the desktop Order Summary. |\n| `.optimizedCheckout-button--primary` | `CONTINUE` button and final `PAY` button. |\n| `.optimizedCheckout-button--secondary` | `Edit` buttons.\n| `.optimizedCheckout-orderSummary` | Colors in the `Order Summary` mobile drawer/modal.\n| `.optimizedCheckout-step` | Large step-number indicators on the page's left side. |\n| `.optimizedCheckout-form-label` | Styles form fields like `Email Address` – the field's text-label color. | \n| `.optimizedCheckout-form-input` | Styles form fields like `Email Address` – the entry box's background and border colors. |\n",
                              "header": {
                                "anchor": "optimized_classes"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Providing User Options in Theme Editor\n\nAs with other aspects of your theme's styling, you can determine which aspects of Optimized One-Page Checkout users will be able to customize in Theme Editor. \n\nIn Stencil's Cornerstone base theme, each class/property available in `optimized-checkout.scss` has a corresponding key/value pair in the `config.json` file. For examples of these key/value pairs, see [this section]().\n\nFor examples of Theme Editor graphical controls exposed to users through elements included in Cornerstone's `schema.json` file, please see [this section]().",
                              "header": {
                                "anchor": "optimized_providing"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Currency Conversion",
                        "route": {
                          "path": "/currency-conversion"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Currency Conversion</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#currency_currency-conversion\">Currency-Conversion Options</a></li>\n\t</ul>\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## Currency-Conversion Options\n\nYou can enable the display of alternate currencies on your Stencil theme's Optimized One-Page Checkout and order confirmation pages.",
                              "header": {
                                "anchor": "currency_currency-conversion"
                              }
                            },
                            {
                              "type": "callout",
                              "data": {
                                "body": "The options on this page require that you first enable Optimized One-Page Checkout. Find instructions on how to do this in Enable and Restyle Optimized One-Page Checkout.\n\nNote that regardless of the display options that you set below, transactions will always be processed in the store's single default currency. To change that setting, see Changing Your Default Currency.",
                                "title": "Restrictions",
                                "type": "warning"
                              }
                            },
                            {
                              "type": "text",
                              "data": "To allow shoppers to view prices in multiple currencies, you will need to add the desired currencies via the BigCommerce control panel.\n\nShoppers will then be able to use the `Currency` drop-down list, throughout the storefront, to switch displayed prices among the currencies you have enabled.\n\nAt checkout, the shopper will still be billed in the store's default currency. As shown below, the checkout and cart templates will show an annotation about this, while flagging any converted total (in a shopper's selected alternate currency) as an `Estimated Total`:"
                            },
                            {
                              "type": "image",
                              "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1540232528988",
                              "config": {
                                "maxWidth": "400",
                                "maxHeight": "600",
                                "centered": true,
                                "fluid": true,
                                "bordered": true
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Multi Language Checkout",
                        "route": {
                          "path": "/multi-language-checkout"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Multi Language Checkout</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#multi_multi-lang\">Multi Language Setup</a></li>\n    <li><a href=\"#multi_browsing\">Browsing Hidden Translation Keys</a></li>\n    <li><a href=\"#multi_adding\">Adding Your Own Translation Values</a></li>\n    <li><a href=\"#multi_localized\">Localized Country and State Names</a></li>\n    <li><a href=\"#multi_stencils-overall\">Stencil's Overall Limits on Translation</a></li>\n\t</ul>\n</div>"
                            },
                            {
                              "type": "text",
                              "data": "## Multi-Language Setup \n\nIn Stencil's default Cornerstone theme, both the Optimized One-Page Checkout and the order confirmation pages contain Handlebars abstracted {{lang}} statements to facilitate automatic translation into different locales' natural languages.\n\nIn the default checkout page template (located at `<theme-name>/templates/pages/checkout.html`), one example that you can directly view is the page header:\n\n`<h1 class=\"is-srOnly\">{{lang 'checkout.title'}}`\n\nThese `{{lang}}` statements, like the example above, enable automatic rendering of their parameters into languages that shoppers have selected in their browser preferences.",
                              "header": {
                                "anchor": "multi_multi-lang"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Browsing Hidden Translation Keys\n\nBigCommerce exposes only part of the checkout page's structure through the local template referenced above. For security purposes – and also to offer all stores new checkout features simultaneously – most checkout content is hidden.\n\nThis hidden content includes many more key/value pairs that support translation. However, you can see all the available keys – with their default English-language values – in this [sample `en.json` file](https://developer.bigcommerce.com/assets/opt-checkout-en.json)\n",
                              "header": {
                                "anchor": "multi_browsing"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Adding Your Own Translation Values\n\nYou can provide values for all of checkout's supported translation keys – for all the languages you want to support – even without direct access to the hidden parts of the checkout template. Here is how:\n\n1. Download and unzip a local copy of the sample file linked above.\n\n2. Copy the file's entire contents to your clipboard:\n\n```\n{\n \"optimized_checkout\": {\n     \"address\": {\n         \"address_line_1_label\": \"Address Line 1\",\n         \"address_line_1_required_error\": \"Address Line 1 is required\",\n         \"address_line_2_label\": \"Address Line 2\",\n         \"address_line_2_required_error\": \"Address Line 1 is required\",\n         \"address_not_recognized_heading\": \"We did not recognize your address\",\n         \"city_label\": \"City\",\n         [...]\n         \"order_without_support_number_text\": \"An email will be sent containing information about your purchase. If you have any questions about your purchase, email us at <a ng-href=\\\"mailto:{supportEmail}?Subject=Order {orderNumber}\\\" target=\\\"_top\\\">{supportEmail}</a>.\",\n         \"thank_you_customer_heading\": \"Thank you {name}!\",\n         \"thank_you_heading\": \"Thank you!\",\n         \"order_status_update_facebook_messenger_heading\": \"Get instant updates of your order to Messenger\"\n     }\n }\n}\n```\n\n3. Paste this whole optimized_checkout JSON block into your theme's en.json file, and into an xx.json file for each language into which you want to translate your checkout page's text. (To see requirements for naming and deploying these translation files, please this documentation's Internationalization section.)\n\n4. Replace the keys' values with appropriate phrases in each file's target language.",
                              "header": {
                                "anchor": "multi_adding"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Localized Country and State Names \n\nIn the Optimized One-Page Checkout page's `Shipping Address` and `Billing Address` fields, BigCommerce currently provides automatic translation of drop-down lists' displayed `Country` and `State` names into 12 supported languages. Here are the steps for enabling this translation:\n\n1. As for the translation options described above, you must enable Optimized One-Page Checkout.\n\n2. Within your `<theme-name>/lang/` subdirectory, you must provide a `xx.json` file with the appropriate two-letter prefix for one or more of the `Supported Languages` in the Naming Requirements table below. (The naming conventions we follow are explained on this page.)\n\n3. We recommend that you populate that file with the checkout-specific keys/values covered above at Adding Your Own Translation Values. This is not strictly necessary to translate the drop-down lists, but it is necessary to provide a consistent translation of the surrounding Address sections. You do not need to provide any keys/values for the Country/State names, whose translations are predefined within the BigCommerce platform.\n\n4. As with the translation options described above, the storefront will automatically display the translated `Country/State` names to visitors who have selected one of the supported languages in their browser's locale preferences.\n\n### Country/State Translation – Naming Requirements\n\nBigCommerce Optimized One-Page Checkout will currently translate displayed `Country/State` names if your Stencil theme includes `.../lang/xx.json` files named as shown below.\n\n| Supported Language | Required Translation File Name |\n|------|------|\n|  German | `de.json` |\n| Spanish | `es.json` |\n| French | `fr.json` |\n| Hindi | `hi.json` |\n| Italian | `it.json` |\n| Japanese | `ja.json` |\n| Korean | `ko.json` |\n| Dutch | `nl.json` |\n| Punjabi | `pa.json` |\n| Tamil | `ta.json` |\n| Chinese Simplified | `zh-TW.json` |\n| Chinese Traditional | `zh.json` |",
                              "header": {
                                "anchor": "multi_localized"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Stencil's Overall Limits on Translation\n\n* Your theme's content will translate only to the extent that you have created JSON files in your `<theme-name>/lang/` subdirectory for each language that you choose to support, and have included key/value pairs for the parameters (beyond `Country/State`) that you choose to translate.\n\n* Stencil's multi-language capabilities are currently limited to these specific strings that you specify within the theme. The Stencil framework does not currently translate content rendered from a store's database – for example, products' names.\n\n* Within these limitations, if you intend to do business internationally, we recommend that you specify appropriate alternate-language strings for key parts of your storefront, product catalog, and checkout. Doing so will make browsing, purchasing, and payment easier for users in your target market(s). For an overview of all localization options, please see Localizing Stores.",
                              "header": {
                                "anchor": "multi_stencils-overall"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Checkout/Confirmation Injection Options",
                        "route": {
                          "path": "/checkout-confirmation-injection"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Checkout/Confirmation Injection Options</h1>"
                            },
                            {
                              "type": "html",
                              "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#checkout_adding\">Adding Storewide Styles</a></li>\n    <li><a href=\"#checkout_applying-storewide-header\">Applying Storewide Header</a></li>\n    <li><a href=\"#checkout_applying-storewide-scripts\">Applying Storewide Scripts</a></li>\n    <li><a href=\"#checkout_adding-trust-seals\">Adding Trust Seals</a></li>\n    <li><a href=\"#checkout_app-injection\">Checkout App Injection</a></li>\n\t</ul>\n</div>\n  \n"
                            },
                            {
                              "type": "text",
                              "data": "## Adding Storewide Styles \n\nA prerequisite for the next two options is to add themewide styles to your Checkout or Order Confirmation page. To do so, add this statement:\n\n`{{{stylesheet '/assets/css/theme.css'}}}`\n\n...before this statement, which is already present at the head of each template:\n\n`{{{ checkout.checkout_head }}}`",
                              "header": {
                                "anchor": "checkout_adding"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## Applying Storewide Header \n\nYou can replace each page's predefined header with your storewide header. To do so, first add themewide styles as described above. Next, replace the following code block (if present):\n\n```\n<header class=\"checkoutHeader optimizedCheckout-header\">\n    <div class=\"checkoutHeader-content\">\n        <h1 class=\"is-srOnly\">{{lang 'checkout.title'}}</h1>\n        <h2 class=\"checkoutHeader-heading\">\n            <a class=\"checkoutHeader-link\" href=\"{{urls.home}}\">\n                {{#if checkout.header_image}}\n                    <img alt=\"{{settings.store_logo.title}}\" class=\"checkoutHeader-logo\" id=\"logoImage\" src=\"{{ checkout.header_image }}\"/>\n                {{ else }}\n                    <span class=\"header-logo-text\">{{settings.store_logo.title}}</span>\n                {{/if}}\n            </a>\n        </h2>\n    </div>\n</header>\n```\n\nwith this simple Handlebars statement:\n\n`{{> components/common/header }}`\n\nEnsure that you paste it before this **existing** statement:\n\n`{{{ checkout.checkout_head }}}`\n\n",
                              "header": {
                                "anchor": "checkout_applying-storewide-header"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Applying Storewide Scripts \n\nYou have the following options to add and customize headers and footers, on either or both templates:\n\n* Adding your themewide header/footer.\n* Adding themewide scripts (for analytics, etc.).\n* Adding both.\n\nIf you are working on a theme that does not have the scripts already enabled, here are the steps to enable these options:\n\n1. Add themewide styles, as described above.\n\n2. Towards the top of the checkout template (`checkout.html`), add this Handlebars statement to enable header scripts:\n\n`{{{ head.scripts }}}`\n\nAdd it between these existing statements, so it will ultimately read as shown below.\n\n```\n<script type=\"text/javascript\">\n    window.language = {{{langJson 'optimized_checkout'}}};\n</script>\n\n{{{head.scripts}}}\n\n{{/partial}}\n\n{{#partial \"page\"}}\n```\n\nAdditionally, at the bottom of the checkout template (`checkout.html`), add this Handlebars statement to enable footer scripts:\n\n`{{{ footer.scripts }}}`\n\nAdd it between these existing statements, so it will ultimately read as shown below.\n\n```\n    {{{ checkout.checkout_content }}}\n\n    {{{ footer.scripts }}}\n\n    {{/partial}}\n```\n\n3. Towards the top of the order confirmation template (`order-confirmation.html`), add this Handlebars statement to enable header scripts:\n\n`{{{ head.scripts }}}`\n\nAdd it between these existing statements, so it will ultimately read as shown below.\n\n```\n<script type=\"text/javascript\">\n    window.language = {{{langJson 'optimized_checkout'}}};\n</script>\n\n{{{head.scripts}}}\n\n{{/partial}}\n\n{{#partial \"page\"}}\n```\n\nAdditionally, at the bottom of the order confirmation template (`order-confirmation.html`), insert this Handlebars statement:\n\n`{{{ footer.scripts }}}`\n\nInsert it between these existing statements, so it will ultimately read as shown below.\n\n```\n{{{ checkout.order_confirmation_content }}}\n\n{{{ footer.scripts }}}\n\n{{/partial}}\n```\n\n4. In your store's BigCommerce control panel, ensure that you have inserted any desired script text in the `Storefront` > `Script Manager` field.",
                              "header": {
                                "anchor": "checkout_applying-storewide-scripts"
                              }
                            },
                            {
                              "type": "text",
                              "data": "---"
                            },
                            {
                              "type": "text",
                              "data": "## Adding Trust Seals \n\nTo add a trust seal to either template:\n\n1. Generate a code snippet (seal script) from your trust-seal provider. You can find instructions for GeoTrust seals in [this BigCommerce KB article](https://support.bigcommerce.com/articles/Public/Adding-a-GeoTrust-SSL-seal-to-your--footer?_ga=2.254356814.718421096.1540222570-967431010.1523308107). (Instructions for other providers will vary.)\n\n2. Copy and paste the seal script into your checkout or order confirmation template, before or after the `{{{ checkout.checkout_content }}}` Handlebars statement.",
                              "header": {
                                "anchor": "checkout_adding-trust-seals"
                              }
                            },
                            {
                              "type": "text",
                              "data": "## App Injection: Script Examples \n\nWith BigCommerce's extensible software, there are a variety of ways to add scripts to your store. The steps above outline only one method of adding header and footer scripts to your store, which is by directly editing the theme files.\n\nAs mentioned in the App Injection Script Examples, you can use BigCommerce's Script Manager and Script API to inject scripts to your store. The Script Manager user interface is available to store owners and other users via granted permission directly in the Control Panel, or scripts can be programmatically injected into the store by developers using the Scripts API. These are the recommended methods as they allow seamless and intuitive injection of scripts.\n\nThe following sections present examples of scripts that inject popular apps into the checkout/order confirmation sequence.\n\n### Olark Live Chat \n\nAs an example of injecting an app from the BigCommerce Apps Marketplace, you could enable the Olark Live Chat app on either page by by using the script manager or our new Scripts API:\n\n```\n<!-- begin olark code -->\n<script type=\"text/javascript\" async>\n;(function(o,l,a,r,k,y){if(o.olark)return;\nr=\"script\";y=l.createElement(r);r=l.getElementsByTagName(r)[0];\ny.async=1;y.src=\"//\"+a;r.parentNode.insertBefore(y,r);\ny=o.olark=function(){k.s.push(arguments);k.t.push(+new Date)};\ny.extend=function(i,j){y(\"extend\",i,j)};\ny.identify=function(i){y(\"identifyv\",k.i=i)};\ny.configure=function(i,j){y(\"configure\",i,j);k.c[i]=j};\nk=y._={s:[],t:[+new Date],c:{},l:a};\n})(window,document,\"static.olark.com/jsclient/loader.js\");\n/* Add configuration calls bellow this comment */\nolark.identify('4080-493-10-1035');</script>\n<!-- end olark code -->\n```\n\n### Bluecheck Age Verification\n\nSimilarly, you could enable the Bluecheck age-verification app by using the script manager or our new Scripts API:\n\n```\n<!-- Bluecheck AV Start Here -->\n   <script src=\"https://api.bluecheck.me/modal/latest/custom/bigcommerce.js\"></script>\n   <script src='//api.bluecheck.me/age-gate/v2/loader.js.php?domain_token=[user-token-value]'></script>\n   <span style='display:none' id='bc_selected_shipping_info'>%%GLOBAL_ShippingAddress%%</span>\n   <span style='display:none' id='bc_selected_billing_info'>%%GLOBAL_BillingAddress%%</span>\n   <span style='display:none' id='bc_customer_acct_email'>%%GLOBAL_CurrentCustomerEmail%%</span>\n   <span style='display:none' id='bc_customer_acct_id'>%%GLOBAL_CurrentCustomerID%%</span>\n   <span style='display:none' id='bc_customer_acct_fname'>%%GLOBAL_CurrentCustomerFirstName%%</span>\n   <span style='display:none' id='bc_customer_acct_lname'>%%GLOBAL_CurrentCustomerLastName%%</span>\n   <!-- Bluecheck AV End Here -->\n```\n\n### Rebillia Recurring Billing\n\nTo add the Rebillia app, you could add the following tags by using the script manager or our new Scripts API:\n\n```\n<div id='rebillia_overlay'></div>\n\n<script src=\"https://js.braintreegateway.com/v2/braintree.js\"></script>\n\n<script type=\"text/javascript\" src=\"https://js.stripe.com/v2/\"></script>\n\n<script type=\"text/javascript\">\nfunction customerJWT(a){var b=\"r1sc6nvnnhed377cozp2bfwfa69cfz5\",c=new XMLHttpRequest;c.onreadystatechange=function(){if(4==c.readyState)if(200==c.status){var b=new XMLHttpRequest;b.open(\"GET\",\"https://demo.rebillia.com/storefront/login/\"+c.responseText,!0),b.withCredentials=!0,b.send()}else if(404==c.status){var d=new XMLHttpRequest;params=\"bc_email=\"+a,d.open(\"POST\",\"https://demo.rebillia.com/storefront/login/guest\",!0),d.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\"),d.withCredentials=!0,d.send(params)}else console.log(\"Something went wrong\")},c.open(\"GET\",\"/customer/current.jwt?app_client_id=\"+b,!0),c.send()}var currentcustomeremail=\"%%GLOBAL_CurrentCustomerEmail%%\",shopPath=\"%%GLOBAL_ShopPathSSL%%\",domainName=\"https://demo.rebillia.com\",domainURL=\"https://demo.rebillia.com/\";$(document).ready(function(){$.getScript(domainName+\"/js/embed-common.js\");var a=window.location.href.match(/[^\\/]+$/);if(a&&a.length){var b=a[0].split(\".\");\"account\"!=b[0]&&\"checkout\"!=b[0]&&\"finishorder\"!=b[0]||$.getScript(domainName+\"/js/embed-\"+b[0]+\".js\"),\"account\"==b[0]&&customerJWT()}});\n</script>\n```\n\n### Conversion Tracking: Conversions on Demand \n\nHere is one final example of an app that you could enable by using the script manager or our new Scripts API. This example enables Conversions on Demand:\n\n```\n<script type='text/javascript'>// <![CDATA[\n    var cod_page_guid = 'CHECKOUT';\n    var COD_CONFIG = {'platform':'bigcommerce', 'stoken':'as2_bcmarket_org'};\n        (function(){\n            var divCOD = document.createElement('div');\n            divCOD.id = 'codScripts';\n            var bodytag = document.getElementsByTagName('body')[0];\n            bodytag.appendChild(divCOD);\n            var cod = document.createElement('script');\n            cod.type = 'text/javascript';\n            cod.src = 'https://www.conversionsondemand.com/codadmin2/framework/cod-scripts-loader.js';\n            var s = document.getElementById('codScripts');\n            s.parentNode.insertBefore(cod, s);\n        })(COD_CONFIG);\n// ]]></script>\n```\n\n### Google Analytics: Addrexx Address Verification \n\nThe Addrexx app is integrated to the Checkout or Order Confirmation page via the BigCommerce control panel's Google Analytics box, rather than through injection directly into either Stencil template file. Here is the corresponding script to enter into the control panel:\n\n```\n<!-- START  Addrexx -->\n<script type=\"text/javascript\">\nwwPage = window.location.href;\nif (wwPage.indexOf(\"billing_address\") >= 0 || wwPage.indexOf(\"create_account\") >= 0 || wwPage.indexOf(\"shipping_address\") >= 0 || wwPage.indexOf(\"checkout\") >= 0) {\nfunction loadaddrexx() {\n    var _cc_url = \"xxredda.s3.amazonaws.com/bcmarket/loader.js\";\n    var _cc_s = document.createElement('script');\n    _cc_s.type = 'text/javascript';\n    _cc_s.src = ((\"http:\" === document.location.protocol) ? \"http:\" : \"https:\") + \"//\" + _cc_url;\n    document.getElementsByTagName(\"head\")[0].appendChild(_cc_s);\n};\nloadaddrexx();\n}\n</script>\n<!-- END  Addrexx -->\n```\n",
                              "header": {
                                "anchor": "checkout_app-injection"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Checkout JS SDK",
                        "route": {
                          "path": "/checkout-js-sdk"
                        },
                        "data": {
                          "children": [
                            {
                              "title": "Getting Started in Vanilla JS",
                              "route": {
                                "path": "/getting-started-in-vanilla-js"
                              },
                              "config": {
                                "sidebar": {
                                  "token": "Tutorial"
                                }
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Getting Started in Vanilla JS</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#getting-started_installing\">Installing the Checkout JS SDK</a></li>\n    <li><a href=\"#getting-started_creating\">Creating a <code>checkout.js</code> file</a></li>\n    <li><a href=\"#getting-started_mapping\">Mapping the <code>checkout.js</code> file to the checkout page type</a></li>\t\n    <li><a href=\"#getting-started_preparing\">Preparing the <code>checkout.html</code> template file</a></li>\t\n    <li><a href=\"#getting-started_logging\">Logging the Checkout Object</a></li>\t\n    <li><a href=\"#getting-started_next-steps\">Next Steps</a></li>\t\n</ul>\n</div>\n\n\n\n\n\n\n"
                                  },
                                  {
                                    "type": "text",
                                    "data": "The Checkout JS SDK is a JavaScript library of methods for performing actions related to checkout. It includes methods for logging in a customer, adding addresses to the checkout object, and surfacing the shipping and payment methods that a merchant has configured. It’s everything you need to build your own custom checkout page on BigCommerce.\n\nWe have provided a [sample checkout app](https://github.com/bigcommerce/checkout-sdk-js-example) built in React; the React sample app is a great place to get started if you prefer to build within a framework. However, because the SDK is built in vanilla JS, it’s framework agnostic. To illustrate that point, this tutorial will walk through the first steps for building a custom checkout directly into the theme files using vanilla JS. At the end of the tutorial, you will have installed the Checkout SDK, created a new JavaScript module for your icustom checkout, and console logged the checkout object.\n\nBefore we get started, ensure your theme is setup for local development using Stencil CLI. See [Installing Stencil](/stencil-docs/getting-started/installing-stencil) if you have not already done this.\n"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Installing the Checkout JS SDK\n\n1. Open your terminal and navigate to your theme’s directory.\n\nFor example, `cd cornerstone`\n\n2. Run the following command: \n\n`npm install --save @bigcommerce/checkout-sdk`\n",
                                    "header": {
                                      "anchor": "getting-started_installing"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Creating a `checkout.js` file\n\n1. In your text editor, open your theme and create a new file in the assets/js/theme directory.\n\n2. Save the file as checkout.js. You can name your checkout JavaScript file anything you like, but the subsequent steps of this tutorial will assume the filename checkout.js.\n\n3. Add the following to your `checkout.js` file:\n\n```\nimport PageManager from './page-manager';\nimport { createCheckoutService } from '@bigcommerce/checkout-sdk';\n\nconst service = createCheckoutService();\n\nexport default class Checkout extends PageManager {\n\tasync onReady() {\n\t\tconst state = await service.loadCheckout();\nconsole.log(state.data.getCheckout());\n\t}\n}\n```\n\nImporting and extending the PageManager abstract class sets the page context for the `checkout.js` module. We also `import { createCheckoutService }` from the Checkout SDK. \n\nThe async keyword ensures that `onReady()` returns a Promise; the await keyword waits until the Promise resolves to load the checkout. Async/await is supported in nearly all modern browsers, but if you need to support older browsers like IE, you will require the [Promise polyfill](https://github.com/stefanpenner/es6-promise).\n\n4. Save the file. ",
                                    "header": {
                                      "anchor": "getting-started_creating"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Mapping the `checkout.js` file to the checkout page type\n\n1. Open the `app.js` file in your text editor.\n\n2. Add the following to map your checkout.js file to the checkout page type:\n`checkout: () => import('./theme/checkout'),`",
                                    "header": {
                                      "anchor": "getting-started_mapping"
                                    }
                                  },
                                  {
                                    "type": "image",
                                    "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1540242854920",
                                    "config": {
                                      "centered": true,
                                      "fluid": true,
                                      "bordered": true
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "3. Save the file."
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Preparing the `checkout.html` template file\n\n1. Open the `checkout.html` file in your text editor.\n2. Comment out the `{{{ checkout.checkout_content }}}` statement:\n<!--{{{ checkout.checkout_content }}}-->\n\n3. On the next line, add the following:\n```\n<script>window.__webpack_public_path__ = \"{{cdn 'assets/dist/'}}\";</script>\n<script src=\"{{cdn 'assets/dist/theme-bundle.main.js'}}\"></script>\n\n<script>\n    window.stencilBootstrap(\"{{page_type}}\", {{jsContext}}).load();\n</script>\n\n```\n\n4. Save the file.\n\n",
                                    "header": {
                                      "anchor": "getting-started_preparing"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Logging the Checkout Object\n\n1. Navigate to the storefront and open your browser console.\n2. Add an item to your cart and proceed to the checkout page. The checkout page will be blank below the header.\n3. Note the checkout object logged to the console. \n",
                                    "header": {
                                      "anchor": "getting-started_logging"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Next Steps\n\nBuild out your custom checkout page by entering your HTML into the `checkout.html` file and JavaScript into checkout.js. For detailed documentation on all of the Checkout SDK library methods visit the [SDK GitHub repository](https://github.com/bigcommerce/checkout-sdk-js).",
                                    "header": {
                                      "anchor": "getting-started_next-steps"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "title": "React.js Custom Checkout",
                              "route": {
                                "path": "/implement-a-custom-checkout"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Implementing a Custom React.js Checkout to Cornerstone using the BigCommerce Checkout SDK</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#implement_tutorial-overview\">Tutorial Overview</a></li>\n    <li><a href=\"#implement_steps\">Steps to Implement a Custom React Checkout</a></li>\n    <li><a href=\"#implement_additional\">Additional Resources</a></li>\t\n</ul>\n</div>\n"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Tutorial Overview\n\nThis tutorial will take you through the steps to implement a custom checkout built with React to the Cornerstone Theme. The checkout will utilize BigCommerce's Checkout SDK. This tutorial assumes Cornerstone 2.4.0 as a starting point.",
                                    "header": {
                                      "anchor": "implement_tutorial-overview"
                                    }
                                  },
                                  {
                                    "type": "callout",
                                    "data": {
                                      "type": "error",
                                      "body": "Please note that the provided checkout example is a good starting and reference point, but is **NOT production ready**. You should **not** use this custom checkout in production as it stands.",
                                      "title": "Checkout Example NOT production ready!"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Steps to Implement a Custom React Checkout in Cornerstone\n\n### Tutorial Prerequisites\n\nBefore beginning this tutorial, you will need to have the Stencil CLI installed.\n\nIf you do not yet have Stencil CLI installed, complete the steps in [Installing the Stencil CLI](stencil-docs/getting-started/installing-and-launching/installing-the-stencil-cli).\n\n### Install Dependencies\n\nThe React app used to demonstrate the Checkout SDK has a few additional dependencies.\nIn your theme directory (e.g. /stencil/cornerstone), run the following command:\n\n`npm install --save react react-dom react-text-mask classnames accounting babel-preset-react css-loader node-sass sass-loader style-loader @bigcommerce/checkout-sdk`\n\n\n### Update webpack.common.js\n\nThe React app includes .jsx files which will not be resolved using the default webpack configuration in Cornerstone. Additionally, loaders must be registered for .jsx and .scss files.\n\n**Note:** _Cornerstone 2.0 and above uses Webpack 4 which does **not** use a `webpack.conf.js` file like earlier Webpack versions. Instead, we will modify `webpack.common.js`._\n\n#### Register .jsx and .scss loaders\n\nIn webpack.common.js, add the following objects to the `rules` array:\n\n```\n{\n  test: /\\.jsx$/,\n  exclude: /node_modules/,\n  use: {\n      loader: \"babel-loader\",\n      options: {\n          presets: ['react'],\n      },\n  }\n},\n\n{\n  test: /\\.scss$/,\n  use:  [\n      'style-loader',\n      {\n          loader: 'css-loader',\n          options: {\n              modules: true\n          }\n      },\n      'sass-loader'\n  ],\n},\n```\n\nNext, in webpack.common.js, add the following property to the `resolve` object:\n\n\n`extensions: ['.js', '.jsx']`\n\n\n### Add React Checkout Components to Theme\n\n1. Clone or download BigCommerce's [Checkout SDK JS Example](https://github.com/bigcommerce/checkout-sdk-js-example) **outside** of your theme directory\n\n`git clone git@github.com:bigcommerce/checkout-sdk-js-example.git`\n\n2. In your theme directory, navigate to `/assets/js/` and create a `checkout-app` directory (i.e. `/assets/js/checkout-app`)\n\n3. Copy the contents of `/checkout-sdk-js-example/src` into your new `/assets/js/checkout-app` directory \n\n\n### Import Dependencies\n\nEdit `/assets/js/app.js` and add the following lines toward the beginning with the other import statements:\n\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Checkout from './checkout-app/Checkout/checkout';\n```\n\n### Define a Function to Initialize React\n\nEdit `/assets/js/app.js` and add the following lines to the end:\n\n```\nwindow.initReact = function initReact() {\n    ReactDOM.render(\n        React.createElement(Checkout, null, null),\n        document.getElementById('checkout-app')\n    );\n};\n```\n\n### Customize the Checkout Template\n\n1. Edit `/templates/pages/checkout.html` and add the following lines between `{{{ footer.scripts }}}` and `{{/partial}}`\n\n```\n<script src=\"{{cdn 'assets/dist/theme-bundle.main.js'}}\"></script>\n \n<script type=\"text/javascript\" defer>\n    // Exported in app.js\n    window.initReact();\n</script>\n```\n\n2. In `/templates/pages/checkout.html`, replace `{{{ checkout.checkout_content }}}` with the following:\n\n```<div id=\"checkout-app\"></div>```\n\n### Congratulations!\n\nYou should now be able to view your example React checkout by running the `stencil start` command in your theme directory and navigating to your storefront at [http://localhost:3000](http://localhost:3000).\n\nYou can make further customizations to the checkout by modifying the React components in `/assets/js/checkout-app`.",
                                    "header": {
                                      "anchor": "implement_steps"
                                    }
                                  },
                                  {
                                    "type": "tabs",
                                    "data": {
                                      "children": [
                                        {
                                          "title": "webpack.common.js",
                                          "blocks": [
                                            {
                                              "type": "code",
                                              "data": "LodashPlugin = require('lodash-webpack-plugin'),\npath = require('path'),\nwebpack = require('webpack');\n\n// Common configuration, with extensions in webpack.dev.js and webpack.prod.js.\nmodule.exports = {\nbail: true,\ncontext: __dirname,\nentry: {\n  main: './assets/js/app.js',\n},\nmodule: {\n  rules: [\n      {\n          test: /\\.js$/,\n          include: /(assets\\/js|assets\\\\js|stencil-utils)/,\n          use: {\n              loader: 'babel-loader',\n              options: {\n                  plugins: [\n                      'dynamic-import-webpack', // Needed for dynamic imports.\n                      'lodash', // Automagically tree-shakes lodash.\n                      'transform-regenerator', // Transforms async and generator functions.\n                  ],\n                  presets: [\n                      ['env', {\n                          loose: true, // Enable \"loose\" transformations for any plugins in this preset that allow them.\n                          modules: false, // Don't transform modules; needed for tree-shaking.\n                          useBuiltIns: true, // Tree-shake babel-polyfill.\n                      }],\n                  ],\n              },\n          },\n      },\n      {\n          test: /jquery-migrate/,\n          use: 'imports-loader?define=>false',\n      },\n      {\n          test: /\\.jsx$/,\n          exclude: /node_modules/,\n          use: {\n              loader: \"babel-loader\",\n              options: {\n                  presets: ['react'],\n              },\n          }\n      },\n      {\n          test: /\\.scss$/,\n          use:  [\n              'style-loader',\n              {\n                  loader: 'css-loader',\n                  options: {\n                      modules: true\n                  }\n              },\n              'sass-loader'\n          ]\n      }\n  ],\n},\noutput: {\n  chunkFilename: 'theme-bundle.chunk.[name].js',\n  filename: 'theme-bundle.[name].js',\n  path: path.resolve(__dirname, 'assets/dist'),\n},\nplugins: [\n  new CleanPlugin(['assets/dist'], {\n      verbose: false,\n      watch: false,\n  }),\n  new LodashPlugin, // Complements babel-plugin-lodash by shrinking its cherry-picked builds further.\n  new webpack.ProvidePlugin({\n      $: 'jquery',\n      jQuery: 'jquery',\n      'window.jQuery': 'jquery',\n  }),\n],\nresolve: {\n  alias: {\n      'jquery-migrate': path.resolve(__dirname, 'node_modules/jquery-migrate/dist/jquery-migrate.min.js'),\n      jstree: path.resolve(__dirname, 'node_modules/jstree/dist/jstree.min.js'),\n      lazysizes: path.resolve(__dirname, 'node_modules/lazysizes/lazysizes.min.js'),\n      pace: path.resolve(__dirname, 'node_modules/pace/pace.min.js'),\n      'slick-carousel': path.resolve(__dirname, 'node_modules/slick-carousel/slick/slick.min.js'),\n      'svg-injector': path.resolve(__dirname, 'node_modules/svg-injector/dist/svg-injector.min.js'),\n      sweetalert2: path.resolve(__dirname, 'node_modules/sweetalert2/dist/sweetalert2.min.js'),\n  },\n  extensions: ['.js', '.jsx'],\n},\n};\n",
                                              "header": {
                                                "title": "webpack.common.js"
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "title": "app.js",
                                          "blocks": [
                                            {
                                              "type": "code",
                                              "data": "__webpack_public_path__ = window.__webpack_public_path__; // eslint-disable-line\n\nimport 'babel-polyfill';\nimport $ from 'jquery';\nimport 'jquery-migrate';\nimport Global from './theme/global';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Checkout from './checkout-app/Checkout/checkout';\n\nconst getAccount = () => import('./theme/account');\nconst getLogin = () => import('./theme/auth');\nconst pageClasses = {\n    account_orderstatus: getAccount,\n    account_order: getAccount,\n    account_addressbook: getAccount,\n    shippingaddressform: getAccount,\n    account_new_return: getAccount,\n    'add-wishlist': () => import('./theme/wishlist'),\n    account_recentitems: getAccount,\n    account_downloaditem: getAccount,\n    editaccount: getAccount,\n    account_inbox: getAccount,\n    account_saved_return: getAccount,\n    account_returns: getAccount,\n    login: getLogin,\n    createaccount_thanks: getLogin,\n    createaccount: getLogin,\n    getnewpassword: getLogin,\n    forgotpassword: getLogin,\n    blog: () => import('./theme/blog'),\n    blog_post: () => import('./theme/blog-post'),\n    brand: () => import('./theme/brand'),\n    brands: () => import('./theme/brands'),\n    cart: () => import('./theme/cart'),\n    category: () => import('./theme/category'),\n    compare: () => import('./theme/compare'),\n    page_contact_form: () => import('./theme/contact-us'),\n    error: () => import('./theme/errors'),\n    404: () => import('./theme/404-error'),\n    giftcertificates: () => import('./theme/gift-certificate'),\n    giftcertificates_balance: () => import('./theme/gift-certificate'),\n    giftcertificates_redeem: () => import('./theme/gift-certificate'),\n    default: () => import('./theme/home'),\n    page: () => import('./theme/page'),\n    product: () => import('./theme/product'),\n    amp_product_options: () => import('./theme/product'),\n    search: () => import('./theme/search'),\n    rss: () => import('./theme/rss'),\n    sitemap: () => import('./theme/sitemap'),\n    newsletter_subscribe: () => import('./theme/subscribe'),\n    wishlist: () => import('./theme/wishlist'),\n    wishlists: () => import('./theme/wishlist'),\n};\n\n/**\n * This function gets added to the global window and then called\n * on page load with the current template loaded and JS Context passed in\n * @param pageType String\n * @param contextJSON\n * @returns {*}\n */\nwindow.stencilBootstrap = function stencilBootstrap(pageType, contextJSON = null, loadGlobal = true) {\n    const context = JSON.parse(contextJSON || '{}');\n\n    return {\n        load() {\n            $(async () => {\n                // Load globals\n                if (loadGlobal) {\n                    Global.load(context);\n                }\n\n                // Find the appropriate page loader based on pageType\n                const pageClassImporter = pageClasses[pageType];\n                if (typeof pageClassImporter === 'function') {\n                    const PageClass = (await pageClassImporter()).default;\n                    PageClass.load(context);\n                }\n            });\n        },\n    };\n};\n\nwindow.initReact = function initReact() {\n    ReactDOM.render(\n        React.createElement(Checkout, null, null),\n        document.getElementById('checkout-app')\n    );\n};\n",
                                              "header": {
                                                "title": "app.js"
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "title": "checkout.html",
                                          "blocks": [
                                            {
                                              "type": "code",
                                              "data": "{{#partial \"head\"}}\n \n{{{ checkout.checkout_head }}}\n{{{ stylesheet '/assets/css/optimized-checkout.css' }}}\n{{ getFontsCollection }}\n \n<script type=\"text/javascript\">\n    window.language = {{{langJson 'optimized_checkout'}}};\n</script>\n \n{{{head.scripts}}}\n \n{{/partial}}\n \n{{#partial \"page\"}}\n<header class=\"checkoutHeader optimizedCheckout-header\">\n    <div class=\"checkoutHeader-content\">\n        <h1 class=\"is-srOnly\">{{lang 'checkout.title'}}</h1>\n        <h2 class=\"checkoutHeader-heading\">\n            <a class=\"checkoutHeader-link\" href=\"{{urls.home}}\">\n                {{#if checkout.header_image}}\n                    <img alt=\"{{settings.store_logo.title}}\" class=\"checkoutHeader-logo\" id=\"logoImage\" src=\"{{ checkout.header_image }}\"/>\n                {{ else }}\n                    <span class=\"header-logo-text\">{{settings.store_logo.title}}</span>\n                {{/if}}\n            </a>\n        </h2>\n    </div>\n</header>\n \n<div id=\"checkout-app\"></div>\n \n{{{ footer.scripts }}}\n<script src=\"{{cdn 'assets/dist/theme-bundle.main.js'}}\"></script>\n \n<script type=\"text/javascript\" defer>\n    // Exported in app.js\n    window.initReact();\n</script>\n{{/partial}}\n \n{{> layout/empty}}",
                                              "header": {
                                                "title": "checkout.html"
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "header": {
                                      "title": "Examples of files after completing this tutorial"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Additional Resources\n\n* [www.reactjs.org](www.reactjs.org)\n* [www.reactjs.org/tutorial/tutorial.html](www.reactjs.org/tutorial/tutorial.html) (Tutorial on the basics of React)\n* [https://webpack.js.org/concepts/](https://webpack.js.org/concepts/)",
                                    "header": {
                                      "anchor": "implement_additional\""
                                    }
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "tutorial"
                                }
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Handlebars Syntax and Helpers",
            "route": {
              "path": "/handlebars-syntax-and-helpers"
            },
            "data": {
              "children": [
                {
                  "title": "Handlebars.js",
                  "route": {
                    "path": "/handlebars-overview"
                  },
                  "config": {
                    "sidebar": {
                      "token": "Overview"
                    }
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Handlebars.js Overview</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_handlebars-js\">Handlebars.js</a></li>\n    <li><a href=\"#handlebars_template\">Template Logic</a></li>\n    <li><a href=\"#handlebars_custom\">Custom Handlebars Helpers</a></li>\n    <li><a href=\"#handlebars_stencil\">Stencil Handlebars Resources</a></li>\n    <li><a href=\"#handlebars_rendering\">Rendering Special Characters</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Handlebars.js\n\nHandlebars is a minimal templating language that allows you to create dynamic and robust templates for any BigCommerce storefront. A Handlebars template looks just like a regular HTML page, with the addition of Handlebars expressions for all dynamic logic that you embed into the page.\n\nA Handlebars expression begins with: ``{{`` and ends with: ``}}``.\n\nHere is a basic example that accesses the title and body variables:\n\n```\n<div class=\"entry\">\n<div class=\"entry\">\n  <h1>{{ title }}</h1>\n  <div class=\"body\">\n    {{ body }}\n  </div>\n</div>\n```\n\nIn production, Handlebars statements run on the server side, generating HTML that the shopper's browser receives.\n\nFor a thorough overview of how to use Handlebars inside your templates, please review the Handlebars documentation and tutorials located at http://handlebarsjs.com/.",
                        "header": {
                          "anchor": "handlebars_handlebars-js"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Template Logic\n\nWith Handlebars, it’s easy to embed logic right into your templates. Handlebars has built-in helpers for widely used logic and iterator functions. You can find a list of all built-in Handlebars helpers here.",
                        "header": {
                          "anchor": "handlebars_template"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Custom Handlebars Helpers\n\nBigCommerce has extended the built-in Handlebars helpers with certain custom Handlebars helpers. For details, please proceed to the reference section.",
                        "header": {
                          "anchor": "handlebars_custom"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Stencil Handlebars Resources\n\nFor a comprehensive reference to the Stencil data objects that you can manipulate via Handlebars statements, please see the Stencil Object Model Reference.",
                        "header": {
                          "anchor": "handlebars_stencil"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Rendering Special Characters\n\nBy default, Handlebars HTML-escapes values returned by a Handlebars `{{ expression }}`. So, where a Handlebars expression's referenced content includes special characters, those characters will render literally on the storefront as HTML entities.\n\nIn the example above, assume that the HTML referenced by `{{ title }}` contains an ampersand and a \"straight\" apostrophe. You will see the entities &amp; and &#039; displayed literally on the storefront, instead of the intended characters & and '. Similar display errors will be triggered by apostrophes, quotation marks, primes, and other extended characters.\n\nThe workaround is to place the Handlebars variable in triple braces, like this: `{{{ title }}}`. Handlebars documentation refers to this technique as a \"triple-stash.\"",
                        "header": {
                          "anchor": "handlebars_rendering"
                        }
                      }
                    ],
                    "children": []
                  }
                },
                {
                  "title": "Handlebars Helpers",
                  "route": {
                    "path": "/handlebars-helpers-reference"
                  },
                  "data": {
                    "blocks": [],
                    "children": [
                      {
                        "title": "Array Helpers",
                        "route": {
                          "path": "/array-helpers"
                        },
                        "data": {
                          "children": [
                            {
                              "title": "Standard Array Helpers",
                              "route": {
                                "path": "/standard-array-helpers"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Standard Array Helpers</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_after\">{{after}}</a></li>\n    <li><a href=\"#handlebars_arrayify\">{{arrayify}}</a></li>\n    <li><a href=\"#handlebars_before\">{{before}}</a></li>\n    <li><a href=\"#handlebars_eachindex\">{{eachIndex}}</a></li>\n    <li><a href=\"#handlebars_filter\">{{filter}}</a></li>\n    <li><a href=\"#handlebars_first\">{{first}}</a></li>\n    <li><a href=\"#handlebars_foreach\">{{forEach}}</a></li>\n    <li><a href=\"#handlebars_inarray\">{{inArray}}</a></li>\n    <li><a href=\"#handlebars_isarray\">{{isArray}}</a></li>\n    <li><a href=\"#handlebars_last\">{{last}}</a></li>\n    <li><a href=\"#handlebars_lengthequal\">{{lengthEqual}}</a></li>\n    <li><a href=\"#handlebars_map\">{{map}}</a></li>\n    <li><a href=\"#handlebars_some\">{{some}}</a></li>\n    <li><a href=\"#handlebars_sort\">{{sort}}</a></li>\n    <li><a href=\"#handlebars_sortby\">{{sortBy}}</a></li>\n    <li><a href=\"#handlebars_withafter\">{{withAfter}}</a></li>\n    <li><a href=\"#handlebars_withbefore\">{{withBefore}}</a></li>\n    <li><a href=\"#handlebars_withfirst\">{{withFirst}}</a></li>\n    <li><a href=\"#handlebars_withlast\">{{withLast}}</a></li>\n    <li><a href=\"#handlebars_withsort\">{{withSort}}</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "The following standard array helpers are supported on the Stencil framework.\n\n## {{after}}\n\nReturns all of the items in an array after the specified index. Opposite of [before](#before).\n\nGiven the array `['a', 'b', 'c']`:\n\n#### Parameters\n\n* `array` {Array}: Collection.\n* `n` {Number}: Starting index (number of items to exclude).\n* `returns` {Array}: Array exluding `n` items.\n\n#### Example\n\n```handlebars\n{{after array 1}}\n//=> '[\"c\"]'\n```",
                                    "header": {
                                      "anchor": "handlebars_after"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{arrayify}}\n\nCasts the given `value` to an array.\n\n#### Parameters\n\n* `value` {any}\n* `returns` {Array}\n\n#### Example\n\n```handlebars\n{{arrayify \"foo\"}}\n//=> '[\"foo\"]'\n```",
                                    "header": {
                                      "anchor": "handlebars_arrayify"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{before}}\n\nReturns all of the items in the collection before the specified count. Opposite of [after](#after).\n\nGiven the array `['a', 'b', 'c']`:\n\n#### Parameters\n\n* `array` {Array}\n* `n` {Number}\n* `returns` {Array}: Array excluding items after the given number.\n\n#### Example\n\n```handlebars\n{{before array 2}}\n//=> '[\"a\", \"b\"]'\n```",
                                    "header": {
                                      "anchor": "handlebars_before"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{eachIndex}}\n\n#### Parameters\n\n* `array` {Array}\n* `options` {Object}\n* `returns` {String}\n\n#### Example\n\n```handlebars\n{{#eachIndex collection}}\n  {{item}} is {{index}}\n{{/eachIndex}}\n```\n\n### {{filter}}\n\nBlock helper that filters the given array. Renders the block for values that evaluate to `true`; otherwise, returns the inverse block.\n\n#### Parameters\n\n* `array` {Array}\n* `value` {any}\n* `options` {Object}\n* `returns` {String}\n\n#### Example\n\n```handlebars\n{{#filter array \"foo\"}}AAA{{else}}BBB{{/filter}}\n//=> 'BBB\n```",
                                    "header": {
                                      "anchor": "handlebars_eachindex"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{first}}\n\nReturns the first item, or first `n` items, of an array.\n\n#### Parameters\n\n* `array` {Array}\n* `n` {Number}: Number of items to return, starting at `0`.\n* `returns` {Array}\n\n#### Example\n\nGiven the array `['a', 'b', 'c', 'd', 'e']`:\n\n```handlebars\n{{first array 2}}\n//=> '[\"a\", \"b\"]'\n```",
                                    "header": {
                                      "anchor": "handlebars_first"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{forEach}}\n\nIterates over each item in an array, and exposes the current item in the array as context to the inner block. In addition to the current array item, the helper exposes the following variables to the inner block:\n\n* `index`\n* `total`\n* `isFirst`\n* `isLast`\n\nAlso, `@index` is exposed as a private variable, and additional private variables may be defined as hash arguments.\n\n#### Parameters\n\n* `array` {Array}\n* `returns` {String}\n\n#### Example\n\n```js\nvar accounts = [\n{'name': 'John', 'email': 'john@example.com'},\n{'name': 'Malcolm', 'email': 'malcolm@example.com'},\n{'name': 'David', 'email': 'david@example.com'}\n];\n\n// example usage\n// {{#forEach accounts}}\n//   <a href=\"mailto:{{ email }}\" title=\"Send an email to {{ name }}\">\n//     {{ name }}\n//   </a>{{#unless isLast}}, {{/unless}}\n// {{/forEach}}\n```",
                                    "header": {
                                      "anchor": "handlebars_foreeach"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{inArray}}\n\nBlock helper that renders the block if an array has the given `value`. Optionally, you can specify an inverse block to render when the array does not have the given value.\n\n#### Parameters\n\n* `array` {Array}\n* `value` {any}\n* `options` {Object}\n* `returns` {String}\n\n#### Example\n\nGiven the array `['a', 'b', 'c']`:\n\n```handlebars\n{{#inArray array \"d\"}}\n  foo\n{{else}}\n  bar\n{{/inArray}}\n//=> 'bar'\n```",
                                    "header": {
                                      "anchor": "handlebars_inarray"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{isArray}}\n\nReturns true if `value` is an es5 array.\n\n#### Parameters\n\n* `value` {any}: The value to test.\n* `returns` {Boolean}\n\n#### Example\n\n```handlebars\n{{isArray \"abc\"}}\n//=> 'false'\n```",
                                    "header": {
                                      "anchor": "handlebars_isarray"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{last}}\n\nReturns the last item, or last `n` items, of an array. Opposite of [first](#first).\n\n#### Parameters\n\n* `array` {Array}\n* `n` {Number}: Number of items to return, starting with the last item.\n* `returns` {Array}\n\n#### Example\n\nGiven the array `['a', 'b', 'c', 'd', 'e']`:\n\n```handlebars\n{{last array 2}}\n//=> '[\"d\", \"e\"]'\n```",
                                    "header": {
                                      "anchor": "handlebars_last"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{lengthEqual}}\n\nBlock helper that compares the length of the given array to the number passed as the second argument. If the array length is equal to the given `length`, the block is returned. Otherwise, you have the option of returning an inverse block.\n\n#### Parameters\n\n* `array` {Array}\n* `length` {Number}\n* `options` {Object}\n* `returns` {String}\n\n#### Example\n\nGiven the array `['a', 'b', 'c', 'd', 'e']`:\n\n```handlebars\n{{#lengthEqual array 10}}AAA{{else}}BBB{{/lengthEqual}}\n//=> 'BBB'\n```",
                                    "header": {
                                      "anchor": "handlebars_lengthequal"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{map}}\n\nReturns a new array, created by calling `function` on each element of the given `array`.\n\n#### Parameters\n\n* `array` {Array}\n* `fn` {Function}\n* `returns` {String}\n\n#### Example\n\nGiven an array `['a', 'b', 'c']`:\n\n```js\n// register `double` as a helper\nfunction double(str) {\n  return str + str;\n}\n// then used like this:\n// {{map array double}}\n//=> '[\"aa\", \"bb\", \"cc\"]'\n```",
                                    "header": {
                                      "anchor": "handlebars_map"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{some}}\n\nBlock helper that returns the block *if* the callback returns true for some value in the given array.\n\n#### Parameters\n\n* `array` {Array}\n* `cb` {Function}: Callback function.\n* {Options}: Handlebars-provided options object.\n* `returns` {Array}\n\n#### Example\n\nGiven the array `[1, 'b', 3]`:\n\n```handlebars\n{{#some array isString}}\n  Render me if the array has a string.\n{{else}}\n  Render me if it doesn't.\n{{/some}}\n//=> 'Render me if the array has a string.'\n```",
                                    "header": {
                                      "anchor": "handlebars_some"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{sort}}\n\nSorts the given `array`. If an array of objects is passed, you may optionally pass (as the second argument) a `key` to sort on. Alternatively, you may pass a sorting function as the second argument.\n\n#### Parameters\n\n* `array` {Array}: The array to sort.\n* `key` {String|Function}: The object key to sort by, or a sorting function.\n\n#### Example\n\nGiven an array `['b', 'a', 'c']`:\n\n\n```handlebars\n{{sort array}}\n//=> '[\"a\", \"b\", \"c\"]'\n```",
                                    "header": {
                                      "anchor": "handlebars_sort"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{sortBy}}\n\nSorts an `array`. If an array of objects is passed, you may optionally pass a `key` to sort on as the second argument. You may alternatively pass a sorting function as the second argument.\n\n#### Parameters\n\n* `array` {Array}: The array to sort.\n* `props` {String|Function}: One or more properties to sort by, or sorting functions to use.\n\n#### Example\n\nGiven an array `[{a: 'zzz'}, {a: 'aaa'}]`:\n\n```handlebars\n{{sortBy array \"a\"}}\n//=> '[{\"a\":\"aaa\"}, {\"a\":\"zzz\"}]'\n```",
                                    "header": {
                                      "anchor": "handlebars_sortby"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{withAfter}}\n\nUse the items in the array, _after_ the specified index, as context inside a block. Opposite of [withBefore](#withBefore).\n\n#### Parameters\n\n* `array` {Array}\n* `idx` {Number}\n* `options` {Object}\n* `returns` {Array}\n\n#### Example\n\nGiven the array `['a', 'b', 'c', 'd', 'e']`:\n\n```handlebars\n{{#withAfter array 3}}\n  {{this}}\n{{/withAfter}}\n//=> \"de\"\n```",
                                    "header": {
                                      "anchor": "handlebars_withafter"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{withBefore}}\n\nUse the items in the array, _before_ the specified index, as context inside a block. Opposite of [withAfter](#withAfter).\n\n#### Parameters\n\n* `array` {Array}\n* `idx` {Number}\n* `options` {Object}\n* `returns` {Array}\n\n#### Example\n\nGiven the array `['a', 'b', 'c', 'd', 'e']`:\n\n```handlebars\n{{#withBefore array 3}}\n  {{this}}\n{{/withBefore}}\n//=> 'ab'\n```",
                                    "header": {
                                      "anchor": "handlebars_withbefore"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{withFirst}}\n\nUses a collection's first item inside a Handlebars block expression. Opposite of [withLast](#withLast).\n\n#### Parameters\n\n* `array` {Array}\n* `idx` {Number}\n* `options` {Object}\n* `returns` {String}\n\n#### Example\n\nGiven the array `['a', 'b', 'c']`:\n\n```handlebars\n{{#withFirst array}}\n  {{this}}\n{{/withFirst}}\n//=> 'a'\n```",
                                    "header": {
                                      "anchor": "handlebars_withfirst"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{withLast}}\n\nUse the last item, or `n` items, in an array as context inside a block. Opposite of [withFirst](#withFirst).\n\n#### Parameters\n\n* `array` {Array}\n* `idx` {Number}: The starting index.\n* `options` {Object}\n* `returns` {String}\n\n#### Example\n\nGiven the array `['a', 'b', 'c']`:\n\n```handlebars\n{{#withLast array}}\n  {{this}}\n{{/withLast}}\n//=> 'c'\n```",
                                    "header": {
                                      "anchor": "handlebars_withlast"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{withSort}}\n\nBlock helper that sorts a collection and exposes the sorted collection as context inside the block.\n\n#### Parameters\n\n* `array` {Array}\n* `prop` {String}\n* `options` {Object}: Specify `reverse=\"true\"` to reverse the array.\n* `returns` {String}\n\n#### Example\n\nGiven the array `['b', 'a', 'c']`:\n\n```handlebars\n{{#withSort array}}{{this}}{{/withSort}}\n//=> 'abc'\n```",
                                    "header": {
                                      "anchor": "handlebars_withsort"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "title": "Custom Array Helpers",
                              "route": {
                                "path": "/custom-array-helpers"
                              },
                              "data": {
                                "children": [],
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Custom Array Helpers</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_itemat\">{{itemAt}}</a></li>\n    <li><a href=\"#handlebars_join\">{{join}}</a></li>\n    <li><a href=\"#handlebars_limit\">{{limit}}</a></li>\n    <li><a href=\"#handlebars_pluck\">{{pluck}}</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{itemAt}}\n\n_Block helper that returns the item at the specified index._\n\n#### Parameters\n\n* `array` {Array}\n* `idx` {Number}\n* `returns` {any} `value`\n\n#### Example\n\nGiven the array `['a', 'b', 'c']`:\n\n```handlebars\n{{itemAt array 1}}\n//=> 'b'\n```",
                                    "header": {
                                      "anchor": "handlebars_itemat"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{join}}\n\nThe `join` helper is custom to Stencil. It joins an array of string items, with separators. It returns a string. \n\n#### Parameters\n\n- `values`: {Array}\n- `separator`: {String}\n- `limit=<number>`: An optional limit.",
                                    "header": {
                                      "anchor": "handlebars_join"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{limit}}\n\nThe `limit` helper is custom to Stencil. It limits the number of items returned from an array variable, and returns a new array.\n\n#### Parameters\n\n- `data`: {Array}\n- `limit`: {Number}\n\n#### {{limit}} Example \n\nAssume that `{{cart.items}}` would return 10 items. You could use this helper to limit that behavior to only the first four items, by specifying: \n\n```\n{{limit cart.items 4}}\n```",
                                    "header": {
                                      "anchor": "handlebars_limit"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{pluck}}\n\nThe `pluck` helper is custom to Stencil. For one specified search key(s), it retrieves corresponding values from some or all elements in a specified collection. \n\nThe `pluck` helper returns the retrieved values in a comma-separated string. This helper's general form is:\n\n```\n{{pluck ([limit] <collection> [<limit-value>]) '<search-key>'}}\n```\n\n#### Parameters\n\n- `limit`, `limit-value`: Optional parameters to limit the number of results returned.\n- `collection`: The collection to search.\n- `search-key`: The string to search for.\n\n\n#### {{pluck}} Example 1\n\nAssume that the `categories` collection contains:\n\n```\ncategories: [\n  { \"id\": 1, \"name\": \"Bakeware\" },\n  { \"id\": 2, \"name\": \"Cookware\" },\n  { \"id\": 3, \"name\": \"Cutlery\" }\n]\n```\n\nIn this case, this Handlebars statement:\n\n```\n{{pluck (limit categories 2) 'name'}}\n```\n\n...would return:\n\n```\n\"Bakeware,Cookware\"\n```\n\n#### {{pluck}} Example 2\n\nIf the `categories` themselves each contained an image object, then you could use dot notation to access that image object's children:\n\n```\ncategories: [\n  { \"id\": 1, \"name\": \"Bakeware\", \"image\": { \"data\": \"http://...\", \"alt\": \"Bakeware image\"} },\n  { \"id\": 2, \"name\": \"Cookware\" \"image\": { \"data\": \"http://...\", \"alt\": \"Cookware image\"} },\n  { \"id\": 3, \"name\": \"Cutlery\" \"image\": { \"data\": \"http://...\", \"alt\": \"Cutlery image\"} }\n]\n```\n\nIn this case, this Handlebars statement:\n\n```\n{{pluck (limit categories 2) 'image.data'}}\n```\n\n...would return a comma-separated list of image URLs.\n",
                                    "header": {
                                      "anchor": "handlebars_pluck"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Collection Helpers",
                        "route": {
                          "path": "/collection-helpers"
                        },
                        "data": {
                          "children": [
                            {
                              "title": "Standard Collection Helpers",
                              "route": {
                                "path": "/standard-collection-helpers"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Collection Helpers</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_isEmpty\">{{isEmpty}}</a></li>\n    <li><a href=\"#handlebars_iterate\">{{iterate}}</a></li>\n    <li><a href=\"#handlebars_length\">{{length}}</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "The following standard helpers are available to handle collections.\n\n## {{isEmpty}}\n\nBlock helper that returns a block *if* the given collection is empty. If the collection is not empty, returns the inverse block (if supplied).\n\n#### Parameters\n\n* `collection` {Object}\n* `options` {Object}\n* `returns` {String}",
                                    "header": {
                                      "anchor": "handlebars_isEmpty"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{iterate}}\n\nIterates over an array or object.\n\n#### Parameters\n\n* `context` {Object|Array}: The collection to iterate over.\n* `options` {Object}\n* `returns` {String}",
                                    "header": {
                                      "anchor": "handlebars_iterate"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{length}}\n\nReturns the length of the given collection. When using a string literal in the template, the string must be value JSON. See the example below. Otherwise, pass in an array or object from the context.\n\n#### Parameters\n\n* `value` {Array|Object|String}\n* `returns` {Number}: The length of the value.\n\n#### Example\n\n```handlebars\n{{length '[\"a\", \"b\", \"c\"]'}}\n//=> 3\n\n//=> myArray = ['a', 'b', 'c', 'd', 'e'];\n{{length myArray}}\n//=> 5\n\n//=> myObject = {'a': 'a', 'b': 'b'};\n{{length myObject}}\n//=> 2\n```",
                                    "header": {
                                      "anchor": "handlebars_length"
                                    }
                                  }
                                ]
                              }
                            }
                          ],
                          "blocks": []
                        }
                      },
                      {
                        "title": "Comparison Helpers",
                        "route": {
                          "path": "/new-subpage"
                        },
                        "data": {
                          "blocks": [],
                          "children": [
                            {
                              "title": "Standard Comparison Helpers",
                              "route": {
                                "path": "/standard-comparison-helpers"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Standard Comparison Helpers</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_and\">{{and}}</a></li>\n    <li><a href=\"#handlebars_gt\">{{gt}}</a></li>\n    <li><a href=\"#handlebars_gte\">{{gte}}</a></li>\n    <li><a href=\"#handlebars_has\">{{has}}</a></li>\n    <li><a href=\"#handlebars_eq\">{{eq}}</a></li>\n    <li><a href=\"#handlebars_ifeven\">{{ifeven}}</a></li>\n    <li><a href=\"#handlebars_ifnth\">{{ifNth}}</a></li>\n    <li><a href=\"#handlebars_ifodd\">{{ifOdd}}</a></li>\n    <li><a href=\"#handlebars_is\">{{is}}</a></li>\n    <li><a href=\"#handlebars_isnt\">{{isnt}}</a></li>\n    <li><a href=\"#handlebars_lt\">{{lt}}</a></li>\n    <li><a href=\"#handlebars_lte\">{{lte}}</a></li>\n    <li><a href=\"#handlebars_neither\">{{neither}}</a></li>\n    <li><a href=\"#handlebars_unlesseq\">{{unlessEq}}</a></li>\n    <li><a href=\"#handlebars_unlessgt\">{{unlessGt}}</a></li>\n    <li><a href=\"#handlebars_unlesslt\">{{unlesslt}}</a></li>\n    <li><a href=\"#handlebars_gteq\">{{{unlessGteq}}</a></li>\n    <li><a href=\"#handlebars_lteq\">{{{unlessLteq}}</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "The following standard helpers are available to handle comparisons.\n\n## {{and}}\n\nBlock helper that renders the block if *both* of the given values are truthy. If you specify an inverse block, it will be rendered when falsy.\n\n#### Parameters\n\n* `a` {any}\n* `b` {any}\n* `options` {Object}: Handlebars-provided options object.\n* `returns` {String}",
                                    "header": {
                                      "anchor": "handlebars_and"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{gt}}\n\nBlock helper that renders a block if `a` is *greater than* `b`.\n\nIf an inverse block is specified, it will be rendered when falsy. You may optionally use the `compare=\"\"` hash argument for the second value.\n\n#### Parameters\n\n* `a` {String}\n* `b` {String}\n* `options` {Object}: Handlebars-provided options object.\n* `returns` {String}: Block, or inverse block if specified and falsy.",
                                    "header": {
                                      "anchor": "handlebars_gt"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{gte}}\n\nBlock helper that renders a block if `a` is *greater than or equal to* `b`.\n\nIf an inverse block is specified, it will be rendered when falsy. You may optionally use the `compare=\"\"` hash argument for the second value.\n\n#### Parameters\n\n* `a` {String}\n* `b` {String}\n* `options` {Object}: Handlebars-provided options object\n* `returns` {String}: Block, or inverse block if specified and falsy.",
                                    "header": {
                                      "anchor": "handlebars_gte"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{has}}\n\nBlock helper that renders a block if `value` has `pattern`. If an inverse block is specified, it will be rendered when falsy.\n\n#### Parameters\n\n* `val` {any}: The value to check.\n* `pattern` {any}: The pattern to check for.\n* `options` {Object}: Handlebars-provided options object.\n* `returns` {String}",
                                    "header": {
                                      "anchor": "handlebars_has"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{eq}}\n\nBlock helper that renders a block if `a` is *equal to* `b`. If an inverse block is specified,  it will be rendered when falsy. You may optionally use the `compare=\"\"` hash argument for the second value.\n\n#### Parameters\n\n* `a` {String}\n* `b` {String}\n* `options` {Object}: Handlebars-provided options object.\n* `returns` {String}: Block, or inverse block if specified and falsy.",
                                    "header": {
                                      "anchor": "handlebars_eq"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{ifEven}}\n\nReturns `true` if the given value is an even number.\n\n#### Parameters\n\n* `number` {Number}\n* `options` {Object}: Handlebars-provided options object\n* `returns` {String}: Block, or inverse block if specified and falsy.\n\n#### Example\n\n```handlebars\n{{#ifEven value}}\n  render A\n{{else}}\n  render B\n{{/ifEven}}\n```",
                                    "header": {
                                      "anchor": "handlebars_ifeven"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{ifNth}}\n\nConditionally renders a block *if* dividing the `a` operand by `b` yields a remainder of zero. If you specify an inverse block, it will be rendered when the remainder is *not* zero.\n\n#### Parameters\n\n* {}: {Number}\n* {}: {Number}\n* `options` {Object}: Handlebars-provided options object.\n* `returns` {String}: Block, or inverse block if specified and falsy.",
                                    "header": {
                                      "anchor": "handlebars_ifNth"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{ifOdd}}\n\nBlock helper that renders a block if `value` is *an odd number*. If an inverse block is specified, it will be rendered when falsy.\n\n#### Parameters\n\n* `value` {Object}\n* `options` {Object}: Handlebars-provided options object.\n* `returns` {String}: Block, or inverse block if specified and falsy.\n\n#### Example\n\n```handlebars\n{{#ifOdd value}}\n  render A\n{{else}}\n  render B\n{{/ifOdd}}\n```",
                                    "header": {
                                      "anchor": "handlebars_ifOdd"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{is}}\n\nBlock helper that renders a block if `a` is *equal to* `b`. If an inverse block is specified, it will be rendered when falsy.\n\n#### Parameters\n\n* `a` {any}\n* `b` {any}\n* `options` {Object}: Handlebars-provided options object.\n* `returns` {String}",
                                    "header": {
                                      "anchor": "handlebars_is"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{isnt}}\n\nBlock helper that renders a block if `a` is *not equal to* `b`. If an inverse block is specified, it will be rendered when falsy.\n\n#### Parameters\n\n* `a` {String}\n* `b` {String}\n* `options` {Object}: Handlebars-provided options object.\n* `returns` {String}",
                                    "header": {
                                      "anchor": "handlebars_isnt"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{lt}}\n\nBlock helper that renders a block if `a` is *less than* `b`.\n\nIf an inverse block is specified, it will be rendered when falsy. You may optionally use the `compare=\"\"` hash argument for the second value.\n\n#### Parameters\n\n* `context` {Object}\n* `options` {Object}: Handlebars-provided options object.\n* `returns` {String}: Block, or inverse block if specified and falsy.",
                                    "header": {
                                      "anchor": "handlebars_lt"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{lte}}\n\nBlock helper that renders a block if `a` is *less than or equal to* `b`.\n\nIf an inverse block is specified, it will be rendered when falsy. You may optionally use the `compare=\"\"` hash argument for the second value.\n\n#### Parameters\n\n* `a` {String}\n* `b` {String}\n* `options` {Object}: Handlebars-provided options object.\n* `returns` {String}: Block, or inverse block if specified and falsy.",
                                    "header": {
                                      "anchor": "handlebars_lte"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{neither}}\n\nBlock helper that renders a block if *neither of* the given values are truthy. If you specify an inverse block, it will be rendered when falsy.\n\n#### Parameters\n\n* `a` {any}\n* `b` {any}\n* `options` {}: Handlebars options object.\n* `returns` {String}: Block, or inverse block if specified and falsy.",
                                    "header": {
                                      "anchor": "handlebars_neither"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{unlessEq}}\n\nBlock helper that always renders the inverse block *unless `a` is equal to `b`*.\n\n#### Parameters\n\n* `a` {String}\n* `b` {String}\n* `options` {Object}: Handlebars-provided options object.\n* `returns` {String}: Inverse block by default, or block if falsy.",
                                    "header": {
                                      "anchor": "handlebars_unlesseq"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{unlessGt}}\n\nBlock helper that always renders the inverse block *unless `a` is greater than `b`*.\n\n#### Parameters\n\n* `context` {Object}\n* `options` {Object}: Handlebars-provided options object.\n* `returns` {String}: Inverse block by default, or block if falsy.",
                                    "header": {
                                      "anchor": "handlebars_unlessgt"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{unlessLt}}\n\nBlock helper that always renders the inverse block *unless `a` is less than `b`*.\n\n#### Parameters\n\n* `context` {Object}\n* `options` {Object}: Handlebars-provided options object.\n* `returns` {String}: Block, or inverse block if specified and falsy.",
                                    "header": {
                                      "anchor": "handlebars_unlesslt"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{unlessGteq}}\n\nBlock helper that always renders the inverse block *unless `a` is greater than or equal to `b`*.\n\n#### Parameters\n\n* `context` {Object}\n* `options` {Object}: Handlebars-provided options object.\n* `returns` {String}: Block, or inverse block if specified and falsy.",
                                    "header": {
                                      "anchor": "handlebars_unlessgteq"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{unlessLteq}}\n\nBlock helper that always renders the inverse block *unless `a` is less than or equal to `b`*.\n\n#### Parameters\n\n* `context` {Object}\n* `options` {Object}: Handlebars-provided options object.\n* `returns` {String}: Block, or inverse block if specified and falsy.",
                                    "header": {
                                      "anchor": "handlebars_unlesslteq"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Control Flow Helpers",
                        "route": {
                          "path": "/new-subpage"
                        },
                        "data": {
                          "blocks": [],
                          "children": [
                            {
                              "title": "Conditional Control Flow Helpers",
                              "route": {
                                "path": "/conditional-control-flow-helpers"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Conditional Control Flow Helpers</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_if\">{{if}}</a></li>\n    <li><a href=\"#handlebars_unless\">{{unless}}</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "The following helpers provide control structures that test for conditions, and branch accordingly.\n\n## {{if}}\n\nThe `if` helper has been customized for Stencil, and has the following syntax:\n\n```\n{{#if <statement>}}\n  ... \n{{else if}}  /* optional else-if block */\n  ...\n{{else}}  /* optional else block */\n  ...\n{{/if}}\n```\n\nThe `<statement>` that the `if` helper evaluates can take these forms:\n\n- An object, as in: `{{#if object}}`.\n- A comparison expression, as in: `{{#if <lvalue> <operator> <rvalue>}}`.\n\n\nWhen you pass only one parameter to the `if` helper, it will return the following:\n- For an array parameter, the array's length.\n- For an empty object, a value of `false`.",
                                    "header": {
                                      "anchor": "handlebars_if"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{unless}}\n\nThe `unless` helper is logically the opposite of the [`if` helper](#if), subject to the [restrictions](#unless_restrix) below. The syntax for `unless` can be found in the official Handlebars documentation [here](http://handlebarsjs.com/builtin_helpers.html).\n\n#### Formal Example\n\n```\n{{#unless statement}}\n   ... /* block to display/execute unless statement is true */\n{{/unless}}\n```\n\n#### Restrictions\n\nStatements using `unless` can refer to: \n\n* Objects, as in: `{{#unless object}}`.\n\nUnlike the `if` helper,  `unless` on the Stencil framework does not support operators for comparison expressions. \nSo, for example, the following expression would throw an error:\n\n```\n{{#unless this.alt \"===\" \"hidden\"}}\n```\n\nA workaround for this logic is to recast the expression as `if`/not-equal-to. So the following expression would be valid:\n\n```\n{{#if this.alt \"!==\" \"hidden\"}}\n```\n\n#### Stencil Example \n\nHere is a usage example from Stencil's Cornerstone base theme: The `templates/pages/search.html` template displays search results. In this template's section that displays search suggestions, an `#unless` loop determines what to output for the final result:\n\n```\n{{#each category_results}}\n<li class=\"category-suggestion\">\n    {{#each this}}\n        <a href=\"{{url}}\">{{name}}</a>\n        {{#unless @last}} > {{/unless}}\n    {{/each}}\n</li>\n{{/each}}\n```\n\n### Nested if/else Statements to Test for if/and Conditions\n\nHandlebars does not provide an `if`/`and` conditional structure. However, to test for multiple conditions, you can nest `if`/`else` statements, as shown in this example:\n\n```\n <nav class=\"navigation\">\n      <ul>\n        {{#each nav_items}}\n            {{#if name '===' 'About Us'}}\n            {{else}}\n              {{#if name '===' 'Contact Us'}}\n              {{else}}\n                <li>\n                  <a class=\"top-level-nav-link\" href=\"{{url}}\">\n                    {{name}}\n                  </a>\n                </li>\n              {{/if}}\n            {{/if}}\n        {{/each}}\n      </ul>\n    </nav>\n```\n",
                                    "header": {
                                      "anchor": "handlebars_unless"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "title": "Loop Control Flow Helpers",
                              "route": {
                                "path": "/loop-control-flow-helpers"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Loop Control Flow Helpers</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_any\">{{any}}</a></li>\n    <li><a href=\"#handlebars_all\">{{all}}</a></li>\n    <li><a href=\"#handlebars_contains\">{{contains}}</a></li>\n    <li><a href=\"#handlebars_each\">{{each}}</a></li>\n    <li><a href=\"#handlebars_for\">{{for}}</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "The following helpers are used to control loop execution.\n\n## {{any}}\n\nThe `any` helper is custom to Stencil. It checks whether at least one parameter evaluates to `true`.  Parameters can be of different types (strings, numbers, arrays, or collections).\n\n#### Examples\n\nFormally, the `any` helper is invoked as shown here:\n\n```\n{{#any items selected=true}} \n  ... /* block to display if any items have selected=true */\n{{/any}}\n```\n\nA usage example is http://cornerstone-light-demo.mybigcommerce.com/shop-all/garden, a category page in Stencil's Cornerstone base theme that does _not_ have faceted search turned on. Shoppers will see \"Shop by price\" filters instead of product filters. \n\nThe Stencil code controlling this component resides in the theme's `templates/components/category/shop-by-price.html` file. In this component, the `{{#any...` Handlebars helper is used to determine whether a shopper has selected one of the filters, and whether a \"reset\" button needs to be displayed:\n\n```\n{{#any shop_by_price selected=true}}\n    <li class=\"navList-item\">\n        <a href=\"{{category_url}}\" class=\"navList-action\">\n            {{lang 'category.reset'}}\n        </a>\n    </li>\n{{/any}}\n```",
                                    "header": {
                                      "anchor": "handlebars_any"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{all}}\n\nThe `all` helper is custom to Stencil. It checks whether _all_ parameters evaluate to `true`. Parameters can be of different types (strings, numbers, arrays, or collections).\n\n#### Example\n\n```\n{{#all items theme_settings.optionA theme_settings.optionB}}\n  ... /* block to display, if all items evaluate to true */\n{{/all}}\n```",
                                    "header": {
                                      "anchor": "handlebars_all"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{contains}}\n\nThe `contains` helper is custom to Stencil. It checks whether the second parameter is included in the first parameter (typically a collection).\n\n#### Example\n\n```\n{{#contains fonts \"Roboto\"}}\n  ... /* block to display, if any items contain \"Roboto\" */\n{{/contains}}\n```",
                                    "header": {
                                      "anchor": "handlebars_contains"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{each}}\n\nThe syntax for the `each` helper can be found in the official Handlebars documentation [here](http://handlebarsjs.com/builtin_helpers.html).\n\n#### Example\n\n```\n{{#each array | object}}\n  ...\n{{else}} /* optional block to execute if the the list is empty */\n  ...\n{{/each}}\n```\n\n#### Notes\n\n- Within an each block, use `{{this}}` to reference the current item.\n- Within an each block, use `{{@index}}` to reference the current item's index number.\n- When iterating through objects, `{{@key}}` returns the current key name.\n- `{{each}}` loops can be nested.",
                                    "header": {
                                      "anchor": "handlebars_each"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{for}}\n\nThe `for` helper is a custom Stencil helper. In particular, this helper is limited to 100 iterations, in order to protect against infinite loops. \n\nThe `for` helper has the following syntax, where parameters `<from>` and `<to>` are numbers, and `<context>` is an object:\n\n```\n{{#for <from> <to> <context>}}\n  ...\n{{/for}}\n```",
                                    "header": {
                                      "anchor": "handlebars_for"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Date Helpers",
                        "route": {
                          "path": "/date-helpers"
                        },
                        "data": {
                          "blocks": [
                            {
                              "type": "html",
                              "data": "<h1>Date Helpers</h1>"
                            },
                            {
                              "type": "text",
                              "data": ""
                            }
                          ],
                          "children": [
                            {
                              "title": "Standard Date Helpers",
                              "route": {
                                "path": "/standard-date-helpers"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Standard Date Helpers</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_moment\">{{moment}}</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "The following standard Handlebars helper handles dates.\n\n## {{moment}}\n\nExposes `helper-date` as `moment`.",
                                    "header": {
                                      "anchor": "handlebars_moment"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "HTML Helpers",
                        "route": {
                          "path": "/html-helpers"
                        },
                        "data": {
                          "blocks": [],
                          "children": [
                            {
                              "title": "Standard HTML Helpers",
                              "route": {
                                "path": "/standard-html-helpers"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Standard HTML Helpers</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_ellipsis\">{{ellipsis}}</a></li>\n    <li><a href=\"#handlebars_sanitize\">{{sanitize}}</a></li>\n    <li><a href=\"#handlebars_ul\">{{ul}}</a></li>\n    <li><a href=\"#handlebars_ol\">{{ol}}</a></li>\n    <li><a href=\"#handlebars_thumbnailimage\">{{thumbnailImage}}</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "The following standard helpers are available to handle HTML content.\n\n## {{ellipsis}}\n\nTruncates a string to the specified `length`, and appends an elipsis, `…`.\n\n#### Parameters\n\n* `str` {String}\n* `length` {Number}: The desired length of the returned string.\n* `returns` {String}: The truncated string.\n\n#### Example\n\n```js\n{{ellipsis \"<span>foo bar baz</span>\", 7}}\n//=> 'foo bar…'\n```",
                                    "header": {
                                      "anchor": "handlebars_ellipsis"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{sanitize}}\n\nStrips HTML tags from a string, so that only the text nodes are preserved.\n\n#### Parameters\n\n* `str` {String}: The string of HTML to sanitize.\n* `returns` {String}\n\n#### Example\n\n```js\n{{sanitize \"<span>foo</span>\"}}\n//=> 'foo'\n```",
                                    "header": {
                                      "anchor": "handlebars_sanitize"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{ul}}\n\nBlock helper for creating unordered lists (`<ul></ul>`).\n\n#### Parameters\n\n* `context` {Object}\n* `options` {Object}\n* `returns` {String}",
                                    "header": {
                                      "anchor": "handlebars_ul"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{ol}}\n\nBlock helper for creating ordered lists  (`<ol></ol>`).\n\n#### Parameters\n\n* `context` {Object}\n* `options` {Object}\n* `returns` {String}",
                                    "header": {
                                      "anchor": "handlebars_ol"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{thumbnailImage}}\n\nReturns a `<figure>` with a thumbnail linked to a full picture.\n\n#### Parameters\n\n* `context` {Object}: Object with values/attributes to add to the generated elements:\n* `context.alt` {String}\n* `context.src` {String}\n* `context.width` {Number}\n* `context.height` {Number}\n* `returns` {String}: HTML `<figure>` element with image and optional caption/link.\n",
                                    "header": {
                                      "anchor": "handlebars_thumbnailimage"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Image Helpers",
                        "route": {
                          "path": "/image-helpers"
                        },
                        "data": {
                          "blocks": [],
                          "children": [
                            {
                              "title": "Custom Image Helpers",
                              "route": {
                                "path": "/custom-image-helpers"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Custom Image Helpers</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_getimage\">{{getImage}}</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "The Stencil framework provides the following custom helper to manage images.\n\n## {{getImage}}\n\nThe `getImage` helper is custom to Stencil. It returns the URL for an image of the specified size. Values for the size parameter are defined in the `config.json` file’s `settings` section.\n\nThis helper's parameters are:\n\n- `stencilImage`: a StencilImage.\n- `size`: a string.\n- `defaultImage` (optional): a string. \n\nHere is an example: \n\n```\n{{getImage image \"thumbnail\"}}\n``` \n\nYou can use the optional `defaultImage` parameter to specify an image that will be displayed in cases where the passed `stencilImage` value is null.\n\n",
                                    "header": {
                                      "anchor": "handlebars_getimage"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Inflection Helpers",
                        "route": {
                          "path": "/inflection-helpers"
                        },
                        "data": {
                          "blocks": [],
                          "children": [
                            {
                              "title": "Standard Inflection Helpers",
                              "route": {
                                "path": "/standard-inflection-helpers"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Standard Inflection Helpers</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_inflect\">{{inflect}}</a></li>\n    <li><a href=\"#handlebars_ordinalize\">{{ordinalize}}</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "The following standard helpers are available to transform strings.\n\n### {{inflect}}\n\nHandles singular/plural forms.\n\n#### Parameters\n\n* `count` {Number}\n* `singular` {String}: The singular form\n* `plural` {String}: The plural form\n* `include` {String}\n* `returns` {String}",
                                    "header": {
                                      "anchor": "handlebars_inflect"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{ordinalize}}\n\nReturns an ordinalized number (as a string).\n\n#### Parameters\n\n* `val` {String}: The value to ordinalize.\n* `returns` {String}: The ordinalized number.\n\n#### Example\n\n```handlebars\n{{ordinalize 1}}\n//=> '1st'\n{{ordinalize 21}}\n//=> '21st'\n{{ordinalize 29}}\n//=> '29th'\n{{ordinalize 22}}\n//=> '22nd'\n```",
                                    "header": {
                                      "anchor": "handlebars_ordinalize"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Injection Helpers",
                        "route": {
                          "path": "/injection-helpers"
                        },
                        "data": {
                          "blocks": [],
                          "children": [
                            {
                              "title": "Custom Injection Helpers",
                              "route": {
                                "path": "/injection-helpers"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Custom Injection Helpers</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_cdn\">{{cdn}}</a></li>\n    <li><a href=\"#handlebars_getfontscollection\">{{getFontsCollection}}</a></li>\n    <li><a href=\"#handlebars_inject-and-jscontext\">{{inject}} and {{jsContext}}</a></li>\n    <li><a href=\"#handlebars_stylesheet\">{{stylesheet}}</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "The Stencil framework provides the following custom helpers to inject various resources into a page context:\n\n## {{cdn}}\n\nThe `cdn` helper is custom to Stencil. It is a URL transformer for content delivery networks.\n\nWhen you reference static assets that you have locally staged outside your `<theme-name>` directory and uploaded using WebDAV, place the `webdav:` prefix before each corresponding `assetPath` parameter. For example, a link like:\n\n```\n<img src=\"{{cdn \"webdav:img/image.jpg\"}}\">\n```\n\n...will be transformed to a result like:\n\n```\n<img src=\"https://cdn.bcapp/3dsf74g/content/img/image.jpg\">\n```\n\nThe presumed WebDAV root directory is `/content/`. (So, in this example, the `image.jpg` file has been uploaded to the WebDAV `/content/` directory.) The presumed local directory is `<theme-name>/assets/`, so you can omit that path when referencing its contained files or subdirectories.\n\n\n#### CDN Custom Endpoints\n\nYou can define custom CDN endpoints to use with the `cdn` Handlebars helper. This facilitates including large, high-resolution image assets in themes, without exceeding BigCommerce's [50 MB limit](docs/bundling-and-submitting-a-theme#ship-zip-small) when bundling the theme for upload to BigCommerce. \n\nYou could use a local version of the image in development, and a version on a CDN (for exampe, Imgix) in production. To do so, define custom CDN endpoints in your theme's [`config.json` file](/docs/configjson-reference#config-theme-settings), as highlighted in this example:\n\n```\n{\n  \"name\": \"Cornerstone\",\n  \"version\": \"1.3.5\",\n  \"settings\": {\n    \"homepage_new_products_count\": 12,\n    \"homepage_featured_products_count\": 8,\n    \"cdn\": {\n      \"customcdn\": \"https://bigcommerce.customcdn.net\"\n          }\n     }\n}\n\n \n```\n\nAfter defining an endpoint, you can use the short name in the same way as you would use a `webdav:` abbreviation:\n\n```\n<img src=\"{{cdn \"customcdn:img/image.jpg\"}}\" />\n```\n\nIn local development, that helper would return:\n\n<pre>&lt;img src=\"<b>/assets/cdn/</b>customcdn/img/image.jpg\" /&gt;\n</pre>\n\nWhereas in production, it would return:\n\n```\n<img src=\"https://bigcommerce.customcdn.net/img/image.jpg\" />\n```\n\nAs highlighted above, the helper is configured to rewrite *local* URLs to a `<theme-name>/assets/cdn/` subfolder. The `stencil bundle` command will exclude this local `assets/cdn/` subfolder from the bundle that it creates. This filtering circumvents the 50 MB size limit on the resulting .zip file.\n"
                                  },
                                  {
                                    "type": "text",
                                    "data": "### <a name=\"fonts\"></a> {{getFontsCollection}}\n\nThe `getFontsCollection` helper is custom to Stencil. It returns a link tag that loads all selected font collections. It takes no parameters.",
                                    "header": {
                                      "anchor": "handlebars-getfontscollection"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{inject}} and {{jsContext}}\n\nOccasionally, your theme's client-side application code might need to incorporate dynamic data from the template context. Stencil provides two custom Handlebars helpers to help you achieve this: `inject`  and `jsContext`.\n\n#### About the {{inject}} Helper\n\nThe `inject` helper collects data definitions for injection into the `jsContext` variable. It composes a JSON object containing a subset of the template context to be sent to the browser. Parameters of the `inject` helper are:\n\n- `key`: a string.\n- `value`: multiple types supported. \n\nAn `inject` call takes this form:\n\n```\n{{inject \"stringBasedKey\" contextValue}}\n```\n\n#### About the {{jsContext}} Helper\n\nThe `jsContext` helper takes no parameters; it simply returns a JSON object containing all data collected by the `inject` helper. To retrieve the parsable JSON object, just call `{{jsContext}}` after all of the `{{inject}}` calls.\n\n\n#### {{inject}} + {{jsContext}} Example 1\n\nTo set up the product name in your client-side app, you can do the following, if you are in the context of a product:\n\n```\n{{inject \"myProductName\" product.title}}\n\n<script>\n// Note the lack of quotes around the jsContext handlebars helper, it becomes a string automatically.\nvar jsContext = JSON.parse({{jsContext}}); \n\n// jsContext would output \"{\\\"myProductName\\\": \\\"Sample Product\\\"}\" which can feed directly into \nyour JavaScript.\n\nconsole.log(jsContext.myProductName); // Will output: Sample Product\n</script>\n```\n\n##### Notes on Example 1\n\nYou can compose your JSON object across multiple pages to create a different set of client-side data, depending on the currently loaded template context.\n\nThe Stencil theme makes the `jsContext` available on the active page scoped. It also makes it available on the global `PageManager` objects, as `this.context`.\n\n#### {{inject}} Example 2\n\nThe following code uses `inject` to add all product IDs into JavaScript on category pages. It resides in a theme's `<theme-name>/templates/pages/category.html` template. Note the two `inject` calls directly under the front matter:\n\n```\n---\ncategory:\n    shop_by_price: true\n    products:\n        limit: {{theme_settings.categorypage_products_per_page}}\n---\n{{inject \"categoryProductsPerPage\" theme_settings.categorypage_products_per_page}}\n{{inject \"productIds\" (pluck category.products 'id')}}\n{{#partial \"head\"}}\n    {{#if pagination.category.previous}}\n        <link rel=\"prev\" href=\"{{pagination.category.previous}}\">\n    {{/if}}\n    {{#if pagination.category.next}}\n        <link rel=\"next\" href=\"{{pagination.category.next}}\">\n    {{/if}}\n{{/partial}}\n\n{{#partial \"page\"}}\n\n{{> components/common/breadcrumbs breadcrumbs=breadcrumbs}}\n{{#if category.image}}\n    <img src=\"{{getImage category.image 'zoom_size'}}\">\n{{/if}}\n<h1 class=\"page-heading\">{{category.name}}</h1>\n{{{category.description}}}\n{{{snippet 'categories'}}}\n<div class=\"page\">\n    <aside class=\"page-sidebar\" id=\"faceted-search-container\">\n        {{> components/category/sidebar}}\n    </aside>\n\n    <main class=\"page-content\" id=\"product-listing-container\">\n        {{#if category.products}}\n            {{> components/category/product-listing}}\n        {{else}}\n            <p>{{lang 'categories.no_products'}}</p>\n        {{/if}}\n    </main>\n</div>\n\n{{/partial}}\n{{> layout/base}}\n```",
                                    "header": {
                                      "anchor": "handlebars_inject-and-jscontext"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{stylesheet}}\n\nThe `stylesheet` helper is custom to Stencil. It renders a link tag to insert a stylesheet into your theme. (This is required if you want Theme Editor to rewrite the stylesheet file when a merchant customizes their theme.) This helper returns an HTML string.\n\n#### Parameters\n\n- path: String containing the path to the theme's CSS stylesheet file.\n- Other parameters are optional, appended in the form: `key=\"value\"`.\n\n#### Example\n\n```\n{{{stylesheet \"assets/css/style.css\" class=\"myStylesheet\"}}}\n```",
                                    "header": {
                                      "anchor": "handlebars_stylesheet"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Markdown Helpers",
                        "route": {
                          "path": "/markdown-helpers"
                        },
                        "data": {
                          "blocks": [],
                          "children": [
                            {
                              "title": "Standard Markdown Helpers",
                              "route": {
                                "path": "/standard-markdown-helpers"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Standard Markdown Helpers</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_markdown\">{{markdown}}</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "The following standard helper is available to convert markdown.\n\n## {{markdown}}\n\nBlock helper that converts a string of inline markdown to HTML.\n\n#### Parameters\n\n* `context` {Object}\n* `options` {Object}\n* `returns` {String}\n\n#### Example\n\n```html\n{{#markdown}}\n# Foo\n{{/markdown}}\n//=> <h1>Foo</h1>\n```",
                                    "header": {
                                      "anchor": "handlebars_markdown"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Math Helpers",
                        "route": {
                          "path": "/math-helpers"
                        },
                        "data": {
                          "blocks": [],
                          "children": [
                            {
                              "title": "Standard Math Helpers",
                              "route": {
                                "path": "/standard-math-helpers"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Standard Math Helpers</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_add\">{{add}}</a></li>\n    <li><a href=\"#handlebars_subtract\">{{subtract}}</a></li>\n    <li><a href=\"#handlebars_divide\">{{divide}}</a></li>\n    <li><a href=\"#handlebars_multiply\">{{multiply}}</a></li>\n    <li><a href=\"#handlebars_floor\">{{floor}}</a></li>\n    <li><a href=\"#handlebars_ceil\">{{ceil}</a></li>\n    <li><a href=\"#handlebars_round\">{{round}}</a></li>\n    <li><a href=\"#handlebars_sum\">{{sum}}</a></li>\n    <li><a href=\"#handlebars_avg\">{{avg}}</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "The following standard helpers are available to handle mathematical operations.\n\n### {{add}}\n\nReturns the sum of `a` plus `b`.\n\n#### Parameters\n\n* `a` {Number}\n* `b` {Number}",
                                    "header": {
                                      "anchor": "handlebars_add"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{subtract}}\n\nReturn the differnece of `a` minus `b`.\n\n#### Parameters\n\n* `a` {Number}\n* `b` {Number}",
                                    "header": {
                                      "anchor": "handlebars_subtract"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{divide}}\n\nDivides `a` by `b`.\n\n#### Parameters\n\n* `a` {Number}: numerator\n* `b` {Number}: denominator",
                                    "header": {
                                      "anchor": "handlebars_divide"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{multiply}}\n\nMultiplies `a` by `b`.\n\n#### Parameters\n\n* `a` {Number}: factor\n* `b` {Number}: multiplier",
                                    "header": {
                                      "anchor": "handlebars_multiply"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{floor}}\n\nGets the `Math.floor()` of the given value.\n\n#### Parameters\n\n* `value` {Number}",
                                    "header": {
                                      "anchor": "handlebars_floor"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{ceil}}\n\nGets the `Math.ceil()` [ceiling] of the given value.\n\n#### Parameters\n\n* `value` {Number}",
                                    "header": {
                                      "anchor": "handlebars_ceil"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{round}}\n\nRounds the given value.\n\n#### Parameters\n\n* `value` {Number}",
                                    "header": {
                                      "anchor": "handlebars_round"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{sum}}\n\nReturns the sum of all numbers in the given array.\n\n#### Parameters\n\n* `array` {Array}: Array of numbers to add up.\n* `returns` {Number}\n\n#### Example\n\n```handlebars\n{{sum \"[1, 2, 3, 4, 5]\"}}\n//=> '15'\n```",
                                    "header": {
                                      "anchor": "handlebars_sum"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{avg}}\n\nReturns the average of all numbers in the given array.\n\n#### Parameters\n\n* `array` {Array}: Array of numbers to add up and average.\n* `returns` {Number}\n\n#### Example\n\n```handlebars\n{{avg \"[1, 2, 3, 4, 5]\"}}\n//=> '3'\n```",
                                    "header": {
                                      "anchor": "handlebars_avg"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Number Helpers",
                        "route": {
                          "path": "/number-helpers"
                        },
                        "data": {
                          "children": [
                            {
                              "title": "Standard Number Helpers",
                              "route": {
                                "path": "/standard-number-helpers"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Standard Number Helpers</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_addcommas\">{{addCommas}}</a></li>\n    <li><a href=\"#handlebars_phonenumber\">{{phoneNumber}}</a></li>\n    <li><a href=\"#handlebars_random\">{{random}}</a></li>\n    <li><a href=\"#handlebars_toabbr\">{{toAbbr}}</a></li>\n    <li><a href=\"#handlebars_toexponential\">{{toExponential}}</a></li>\n    <li><a href=\"#handlebars_tofixed\">{{toFixed}}</a></li>\n    <li><a href=\"#handlebars_tofloat\">{{toFloat}}</a></li>\n    <li><a href=\"#handlebars_toint\">{{toInt}}</a></li>\n    <li><a href=\"#handlebars_toprecision\">{{toPrecision}}</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "The following standard helpers are available to handle and transform numbers.\n\n### {{addCommas}}\n\nAdds commas to numbers.\n\n#### Parameters\n\n* `num` {Number}\n* `returns` {Number}",
                                    "header": {
                                      "anchor": "handlebars_addcommas"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{phoneNumber}}\n\nConverts a string or number to a formatted phone number.\n\n#### Parameters\n\n* `num` {Number|String}: The phone number to format, e.g., `8005551212`\n* `returns` {Number}: The formatted phone number: `(800) 555-1212`",
                                    "header": {
                                      "anchor": "handlebars_phonenumber"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{random}}\n\nGenerates a random number between two values.\n\n#### Parameters\n\n* `min` {Number}\n* `max` {Number}\n* `returns` {String}",
                                    "header": {
                                      "anchor": "handlebars_random"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{toAbbr}}\n\nAbbreviates numbers to the given number of `precision`. This is for general numbers, not size in bytes.\n\n#### Parameters\n\n* `number` {Number}\n* `precision` {Number}\n* `returns` {String}",
                                    "header": {
                                      "anchor": "handlebars_toabbr"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{toExponential}}\n\nReturns a string, representing the given number in exponential notation.\n\n#### Parameters\n\n* `number` {Number}\n* `fractionDigits` {Number}: Optional. An integer specifying the number of digits to use after the decimal point. Defaults to as many digits as necessary to specify the number.\n* `returns` {Number}\n\n#### Example\n\n```js\n{{toExponential number digits}};\n```",
                                    "header": {
                                      "anchor": "handlebars_toexponential"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{toFixed}}\n\nFormats the given number, using fixed-point notation.\n\n#### Parameters\n\n* `number` {Number}\n* `digits` {Number}: Optional. The number of digits to use after the decimal point. This can be a value between 0 and 20, inclusive, and implementations may optionally support a larger range of values. If this argument is omitted, it is treated as 0.\n* `returns` {Number}",
                                    "header": {
                                      "anchor": "handlebars_tofixed"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{toFloat}}\n\n#### Parameters\n\n* `number` {Number}\n* `returns` {Number}",
                                    "header": {
                                      "anchor": "handlebars_tofloat"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{toInt}}\n\n#### Parameters\n\n* `number` {Number}\n* `returns` {Number}",
                                    "header": {
                                      "anchor": "handlebars_toint"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{toPrecision}}\n\n#### Parameters\n\n* `number` {Number}\n* `precision` {Number}: Optional. The number of significant digits.\n* `returns` {Number}",
                                    "header": {
                                      "anchor": "handlebars_toprecision"
                                    }
                                  }
                                ]
                              }
                            }
                          ],
                          "blocks": []
                        }
                      },
                      {
                        "title": "Object Helpers",
                        "route": {
                          "path": "/object-helpers"
                        },
                        "data": {
                          "blocks": [],
                          "children": [
                            {
                              "title": "Standard Object Helpers",
                              "route": {
                                "path": "/standard-object-helpers"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Standard Object Helpers</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_extend\">{{extend}}</a></li>\n    <li><a href=\"#handlebars_forin\">{{forIn}}</a></li>\n    <li><a href=\"#handlebars_forown\">{{forOwn}}</a></li>\n    <li><a href=\"#handlebars_topath\">{{toPath}}</a></li>\n    <li><a href=\"#handlebars_get\">{{get}}</a></li>\n    <li><a href=\"#handlebars_getobject\">{{getObject}}</a></li>\n    <li><a href=\"#handlebars_hasown\">{{hasOwn}}</a></li>\n    <li><a href=\"#handlebars_isobject\">{{isObject}}</a></li>\n    <li><a href=\"#handlebars_merge\">{{merge}}</a></li>\n    <li><a href=\"#handlebars_jsonparse\">{{JSONparse}}</a></li>\n    <li><a href=\"#handlebars_jsonstringify\">{{JSONstringify}}</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "The following standard helpers are available to handle objects.\n\n## {{extend}}\n\nExtends the context with the properties of other objects. A shallow merge is performed to avoid mutating the context.\n\n#### Parameters\n\n* `objects` {Object}: One or more objects to extend.\n* `returns` {Object}",
                                    "header": {
                                      "anchor": "handlebars_extend"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{forIn}}\n\nBlock helper that iterates over the properties of an object, exposing each key and value on the context.\n\n#### Parameters\n\n* `context` {Object}\n* `options` {Object}\n* `returns` {String}",
                                    "header": {
                                      "anchor": "handlebars_forin"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{forOwn}}\n\nBlock helper that iterates over the *own* properties of an object, exposing each key and value on the context.\n\n#### Parameters\n\n* `obj` {Object}: The object to iterate over.\n* `options` {Object}\n* `returns` {String}",
                                    "header": {
                                      "anchor": "handlebars_forown"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{toPath}}\n\nTakes arguments and, if they are string or number, converts them to a dot-delineated object property path.\n\n#### Parameters\n\n* `prop` {String|Number}: The property segments to assemble (can be multiple).\n* `returns` {String}",
                                    "header": {
                                      "anchor": "handlebars_topath"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{get}}\n\nUses property paths (`a.b.c`) to get a value or nested value from the context. Works as a regular helper or block helper.\n\n#### Parameters\n\n* `prop` {String}: The property to get, optionally using dot notation for nested properties.\n* `context` {Object}: The context object.\n* `options` {Object}: The Handlebars options object, if used as a block helper.\n* `returns` {String}",
                                    "header": {
                                      "anchor": "handlebars_get"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{getObject}}\n\nUses property paths (`a.b.c`) to get an object from the context. Unlike the `get` helper, this helper will return the actual object, including the given property key. Also, this helper does not work as a block helper.\n\n#### Parameters\n\n* `prop` {String}: The property to get, optionally using dot notation for nested properties.\n* `context` {Object}: The context object.\n* `returns` {String}",
                                    "header": {
                                      "anchor": "handlebars_getobject"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{hasOwn}}\n\nReturns true if `key` is an own, enumerable property of the given `context` object.\n\n#### Parameters\n\n* `key` {String}\n* `context` {Object}: The context object.\n* `returns` {Boolean}\n\n#### Example\n\n```handlebars\n{{hasOwn context key}}\n```",
                                    "header": {
                                      "anchor": "handlebars_hasown"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{isObject}}\n\nReturns true if `value` is an object.\n\n#### Parameters\n\n* `value` {String}\n* `returns` {Boolean}\n\n#### Example\n\n```handlebars\n{{isObject \"foo\"}}\n//=> false\n```",
                                    "header": {
                                      "anchor": "handlebars_isobject"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{merge}}\n\nDeeply merges the properties of the given `objects` with the context object.\n\n#### Parameters\n\n* `object` {Object}: The target object. Pass an empty object to shallow-clone.\n* `objects` {Object}\n* `returns` {Object}",
                                    "header": {
                                      "anchor": "handlebars_merge"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{JSONparse}}\n\nBlock helper that parses a string using `JSON.parse`, then passes the parsed object to the block as context.\n\n#### Parameters\n\n* `string` {String}: The string to parse.\n* `options` {Object}: Handlebars options object.",
                                    "header": {
                                      "anchor": "handlebars_jsonparse"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "---"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{JSONstringify}}\n\nStringifies an object using `JSON.stringify`.\n\n#### Parameters\n\n* `obj` {Object}: Object to stringify.\n* `returns` {String}\n",
                                    "header": {
                                      "anchor": "handlebars_jsonstringify"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Operator Helpers",
                        "route": {
                          "path": "/operator-helpers"
                        },
                        "data": {
                          "blocks": [],
                          "children": [
                            {
                              "title": "Standard Operator Helpers",
                              "route": {
                                "path": "/standard-operator-helpers"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Standard Operator Helpers</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_comparison\">Comparison Operators</a></li>\n    <li><a href=\"#handlebars_or\">{{or}}</a></li>\n    <li><a href=\"#handlebars_typeof\">{{forOwn}}</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Comparison Operators\n\nThe following helpers are available to handle comparisons.\n\n| Helper | Definition |\n|--|--|\n|`==`| equal to |\n|`===`| equal to and equal type |\n|`!=`| not equal |\n|`<`| less than |\n|`>`| greater than |\n|`<=`| less than or equal to |\n|`>=`| greater than or equal to |\n\n### Equal to and Equal Type Example\n\nTo compare a string, use the `===` operator, as in this example from `templates/components/common/share.html`: \n\n```\n  {{#if service '===' 'facebook'}}\n    <svg>\n      <use xlink:href=\"#icon-facebook\"/>\n    </svg>\n  {{/if}}\n```\n\n### Not Equal or Not Equal Type Example\n\nTo improvise a `!==` (not equal or not equal type) comparison operator in Handlebars, you can use an [if](#if)/else structure as shown in this example:\n\n```\n  <nav class=\"navigation\">\n      <ul>\n        {{#each nav_items}}\n            {{#if name '===' 'About Us'}}\n            {{else}}\n              <li>\n                <a class=\"top-level-nav-link\" href=\"{{url}}\">\n                  {{name}}\n                </a>\n              </li>\n            {{/if}}\n        {{/each}}\n      </ul>\n    </nav>\n```",
                                    "header": {
                                      "anchor": "handlebars-comparison"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Logical {{or}} Operator\n\nThe `or` operator has been customized for Stencil. It checks whether at least one of its parameters evaluates to true, and has the following syntax:\n\n```\n{{#or 1 0 0 0 0 0 0}} \n  ... /* execute this block if OR evaluates to true */\n{{/or}}\n```\n\n### Example\n\nHere is a usage example from Stencil's Cornerstone base theme, where it displays the cart's contents. The `templates/components/cart/content.html` template uses the `or` operator to determine whether an item contains either product options _or_ configurable fields. If at least one condition is true, the template displays an edit link for the item:\n\n```\n{{#or options configurable_fields}}\n    <a href=\"#\" data-item-edit=\"{{id}}\">{{lang 'cart.checkout.change'}}</a>\n{{/or}}\n```\n\n### Parameters \n\nThe `or` operator's parameters are one or more strings, numbers, arrays, or collections. Parameters can be of mixed types. ",
                                    "header": {
                                      "anchor": "handlebars_or"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{typeof}} Operator\n\nThe `typeof` operator returns the JavaScript type of a variable, such as:\n\n- string\n- number\n- boolean\n- object\n\nBy design, an array will return a `typeof` value of `object`.\n\n### Example\n\n```\n<script>\n    if (typeof(addthis) === \"object\") {\n        addthis.toolbox('.addthis_toolbox');\n    }\n</script>\n```",
                                    "header": {
                                      "anchor": "handlebars_typeof"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "String Helpers",
                        "route": {
                          "path": "/string-helpers"
                        },
                        "data": {
                          "children": [
                            {
                              "title": "Custom String Helpers",
                              "route": {
                                "path": "/custom-string-helpers"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Custom String Helpers</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_block\">{{block}}</a></li>\n    <li><a href=\"#handlebars_concat\">{{concat}}</a></li>\n    <li><a href=\"#handlebars_dynamiccompoenent\">{{dynamicComponent}}</a></li>\n    <li><a href=\"#handlebars_json\">{{json}}</a></li>\n    <li><a href=\"#handlebars_lang\">{{lang}}</a></li>\n    <li><a href=\"#handlebars_nl2br\">{{nl2br}}</a></li>\n    <li><a href=\"#handlebars_partial\">{{partial}}</a></li>\n    <li><a href=\"#handlebars_replace\">{{replace}}</a></li>\n    <li><a href=\"#handlebars_tolowercase\">{{toLowerCase}}</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "The following custom helpers are available to manipulate strings:\n\n## {{block}} \n\nThe `block` string helper is custom to Stencil. It defines a block of content, which can be overwritten by the [partial](#partial-helper) helper.",
                                    "header": {
                                      "anchor": "handlebars_block"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{concat}}\n\nThe `concat` helper is custom to Stencil. It concatenates two string objects from the page's context, which are passed as parameters. It returns a new string object.\n\n#### Example\n\n```\n{{concat breadcrumbs.[0].name breadcrumbs.[0].url}}\n```",
                                    "header": {
                                      "anchor": "handlebars_concat"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{dynamicComponent}}\n\nThe `dynamicComponent` string helper is custom to Stencil. It inserts a dynamic partial from within the path that is supplied as its parameter.",
                                    "header": {
                                      "anchor": "handlebars_dynamiccomponent"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{json}}\n\nThe `json` string helper is custom to Stencil. You can use this helper to convert a JavaScript string object (from the page's context) into a JSON string object.",
                                    "header": {
                                      "anchor": "handlebars_json"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{lang}}\n\nThe `lang` string helper is custom to Stencil. It maps keys to translation files, based on the locale indicated by the visitor’s browser. Its parameters are the following keys:\n\n- `translationKey`: a string.\n- `options`: key-value pairs.",
                                    "header": {
                                      "anchor": "handlebars_lang"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{nl2br}}\n\nThe `nl2br` helper is custom to Stencil. You can call this helper on a string object from the page's context, to convert its contained newline characters (`\\r\\n`, `\\n\\r`, `\\r`, `\\n`) to `<br>` tags. The `nl2br` helper returns a new string object.\n\n#### Example\n\nThis Handlebars statement:\n\n```\n{{nl2br settings.address}}\n```\n\n...will take this example string:\n\n```\n\"settings\": {\n  \"address\": \"\\r\\n685 Market St\\r\\nSan Francisco\\r\\n94105\\r\\nCA\\r\\n\"\n}\n```\n\n...and return\n\n```\n\"<br>685 Market St<br>San Francisco<br>94105<br>CA<br>\"\n```",
                                    "header": {
                                      "anchor": "handlebars_nl2br"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{partial}}\n\nThe `partial` string helper is custom to Stencil. It overrides block content defined by the [block](#block-helper) helper.",
                                    "header": {
                                      "anchor": "handlebars_partial"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{replace}}\n\nThe `replace` string helper is custom to Stencil. It searches for the first parameter within the second parameter and, if it finds it, replaces the first parameter with the contents of the specified Handlebars block.\n\nFor example, the following code would search for the string `needle` within the scope defined by `haystack`. If found, it would replace that string with the Handlebars block defined by `<context...replacement>`:\n\n```\n{{#replace \"needle\" haystack}}\n  {{<context to use as a replacement>}}\n{{/replace}}\n```",
                                    "header": {
                                      "anchor": "handlebars_replace"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{toLowerCase}}\n\nThe `toLowerCase` helper is custom to Stencil. Use this helper to return a copy of a string object, in all-lowercase. The helper returns a new string object.\n\n#### Example\n\nThis Handlebars statement:\n\n```\n{{toLowerCase head.title}}\n```\n\n...will take this example string:\n\n```\n\"head\": {\n  \"title\": \"This is my TEST Store\"\n}\n```\n\n...and return:\n\n```\n\"this is my test store\"\n```",
                                    "header": {
                                      "anchor": "handlebars_toLowerCase"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "title": "Standard String Helpers",
                              "route": {
                                "path": "/new-subpage"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Standard String Helpers</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_camelcase\">{{camelcase}}</a></li>\n    <li><a href=\"#handlebars_capitalize\">{{capitalize}}</a></li>\n    <li><a href=\"#handlebars_capitalizeall\">{{capitalizeAll}}</a></li>\n    <li><a href=\"#handlebars_center\">{{center}}</a></li>\n    <li><a href=\"#handlebars_chop\">{{chop}}</a></li>\n    <li><a href=\"#handlebars_dashcase\">{{dashcase}}</a></li>\n    <li><a href=\"#handlebars_dotcase\">{{dotcase}}</a></li>\n    <li><a href=\"#handlebars_hyphenate\">{{hyphenate}}</a></li>\n    <li><a href=\"#handlebars_isstring\">{{isString}}</a></li>\n    <li><a href=\"#handlebars_lowercase\">{{lowercase}}</a></li>\n    <li><a href=\"#handlebars_occurrences\">{{occurrences}}</a></li>\n    <li><a href=\"#handlebars_pascalcase\">{{pascalcase}}</a></li>\n    <li><a href=\"#handlebars_pathcase\">{{pathcase}}</a></li>\n    <li><a href=\"#handlebars_plusify\">{{plusify}}</a></li>\n    <li><a href=\"#handlebars_reverse\">{{reverse}}</a></li>\n    <li><a href=\"#handlebars_sentence\">{{sentence}}</a></li>\n    <li><a href=\"#handlebars_snakecase\">{{snakecase}}</a></li>\n    <li><a href=\"#handlebars_split\">{{split}}</a></li>\n    <li><a href=\"#handlebars_startsWith\">{{startsWith}}</a></li>\n    <li><a href=\"#handlebars_titleize\">{{titleize}}</a></li>\n    <li><a href=\"#handlebars_trim\">{{trim}}</a></li>\n    <li><a href=\"#handlebars_uppercase\">{{uppercase}}</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{camelcase}}\n\ncamelCases the characters in the given `string`.\n\n#### Parameters\n\n* `string` {String}: The string to camelcase.\n* `returns` {String}\n\n#### Example\n\n```js\n{{camelcase \"foo bar baz\"}};\n//=> 'fooBarBaz'\n```",
                                    "header": {
                                      "anchor": "handlebars_camelcase"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{capitalize}}\n\nCapitalizes the first word in a sentence.\n\n#### Parameters\n\n* `str` {String}\n* `returns` {String}\n\n#### Example\n\n```handlebars\n{{capitalize \"foo bar baz\"}}\n//=> \"Foo bar baz\"\n```",
                                    "header": {
                                      "anchor": "handlebars_capitalize"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{capitalizeAll}}\n\nCapitalizes all words in a string.\n\n#### Parameters\n\n* `str` {String}\n* `returns` {String}\n\n#### Example\n\n```handlebars\n{{capitalizeAll \"foo bar baz\"}}\n//=> \"Foo Bar Baz\"\n```",
                                    "header": {
                                      "anchor": "handlebars_capitalizeall"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{center}}\n\nCenters a string, using non-breaking spaces.\n\n#### Parameters\n\n* `str` {String}\n* `spaces` {String}\n* `returns` {String}",
                                    "header": {
                                      "anchor": "handlebars_center"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{chop}}\n\nLike `trim`, but removes both extraneous whitespace *and non-word characters* from the beginning and end of a string.\n\n#### Parameters\n\n* `string` {String}: The string to chop.\n* `returns` {String}\n\n#### Example\n\n```js\n{{chop \"_ABC_\"}}\n//=> 'ABC'\n\n{{chop \"-ABC-\"}}\n//=> 'ABC'\n\n{{chop \" ABC \"}}\n//=> 'ABC'\n```",
                                    "header": {
                                      "anchor": "handlebars_chop"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{dashcase}}\n\ndash-cases the characters in `string`. Replaces non-word characters and periods with hyphens.\n\n#### Parameters\n\n* `string` {String}\n* `returns` {String}\n\n#### Example\n\n```js\n{{dashcase \"a-b-c d_e\"}}\n//=> 'a-b-c-d-e'\n```",
                                    "header": {
                                      "anchor": "handlebars_dashcase"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{dotcase}}\n\ndot.cases the characters in `string`.\n\n#### Parameters\n\n* `string` {String}\n* `returns` {String}\n\n#### Example\n\n```js\n{{dotcase \"a-b-c d_e\"}}\n//=> 'a.b.c.d.e'\n```",
                                    "header": {
                                      "anchor": "handlebars_dotcase"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{hyphenate}}\n\nReplaces spaces in a string with hyphens.\n\n#### Parameters\n\n* `str` {String}\n* `returns` {String}\n\n#### Example\n\n```handlebars\n{{hyphenate \"foo bar baz qux\"}}\n//=> \"foo-bar-baz-qux\"\n```",
                                    "header": {
                                      "anchor": "handlebars_hyphenate"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{isString}}\n\nReturns true if `value` is a string.\n\n#### Parameters\n\n* `value` {String}\n* `returns` {Boolean}\n\n#### Example\n\n```handlebars\n{{isString \"foo\"}}\n//=> 'true'\n```",
                                    "header": {
                                      "anchor": "handlebars_isstring"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{lowercase}}\n\nLowercases all characters in the given string.\n\n#### Parameters\n\n* `str` {String}\n* `returns` {String}\n\n#### Example\n\n```handlebars\n{{lowercase \"Foo BAR baZ\"}}\n//=> 'foo bar baz'\n```",
                                    "header": {
                                      "anchor": "handlebars_lowercase"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{occurrences}}\n\nReturns the number of occurrences of `substring` within the given `string`.\n\n#### Parameters\n\n* `str` {String}\n* `substring` {String}\n* `returns` {Number}: Number of occurrences.\n\n#### Example\n\n```handlebars\n{{occurrences \"foo bar foo bar baz\" \"foo\"}}\n//=> 2\n```",
                                    "header": {
                                      "anchor": "handlebars_occurrences"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{pascalcase}}\n\nPascalCases the characters in `string`.\n\n#### Parameters\n\n* `string` {String}\n* `returns` {String}\n\n#### Example\n\n```js\n{{pascalcase \"foo bar baz\"}}\n//=> 'FooBarBaz'\n```",
                                    "header": {
                                      "anchor": "handlebars_pascalcase"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{pathcase}}\n\npath/cases the characters in `string`.\n\n#### Parameters\n\n* `string` {String}\n* `returns` {String}\n\n#### Example\n\n```js\n{{pathcase \"a-b-c d_e\"}}\n//=> 'a/b/c/d/e'\n```",
                                    "header": {
                                      "anchor": "handlebars_pathcase"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{plusify}}\n\nReplaces spaces in the given string with pluses.\n\n#### Parameters\n\n* `str` {String}: The input string\n* `returns` {String}: Input string with spaces replaced by plus signs\n\n#### Example\n\n```handlebars\n{{plusify \"foo bar baz\"}}\n//=> 'foo+bar+baz'\n```",
                                    "header": {
                                      "anchor": "handlebars_plusify"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{reverse}}\n\nReverses a string.\n\n#### Parameters\n\n* `str` {String}\n* `returns` {String}\n\n#### Example\n\n```handlebars\n{{reverse \"abcde\"}}\n//=> 'edcba'\n```",
                                    "header": {
                                      "anchor": "handlebars_reverse"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{sentence}}\n\nSentence-cases the given string.\n\n#### Parameters\n\n* `str` {String}\n* `returns` {String}\n\n#### Example\n\n```handlebars\n{{sentence \"hello world. goodbye world.\"}}\n//=> 'Hello world. Goodbye world.'\n```",
                                    "header": {
                                      "anchor": "handlebars_sentence"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{snakecase}}\n\nsnake_cases the characters in the given `string`.\n\n#### Parameters\n\n* `string` {String}\n* `returns` {String}\n\n#### Example\n\n```js\n{{snakecase \"a-b-c d_e\"}}\n//=> 'a_b_c_d_e'\n```",
                                    "header": {
                                      "anchor": "handlebars_snakecase"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{split}}\n\nSplits `string` at the given `character`.\n\n#### Parameters\n\n* `string` {String}: The string to split.\n* `returns` {String} `character`: Default is `,`\n\n#### Example\n\n```js\n{{split \"a,b,c\" \",\"}}\n//=> ['a', 'b', 'c']\n```",
                                    "header": {
                                      "anchor": "handlebars_split"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{startsWith}}\n\nTests whether a string begins with the given prefix.\n\n#### Parameters\n\n* `prefix` {String}\n* `testString` {String}\n* `options` {String}\n* `returns` {String}\n\n#### Example\n\n```handlebars\n{{#startsWith \"Goodbye\" \"Hello, world!\"}}\n  Whoops\n{{else}}\n  Bro, do you even hello world?\n{{/startsWith}}\n```",
                                    "header": {
                                      "anchor": "handlebars_startswith"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{titleize}}\n\nTitle-cases the given string.\n\n#### Parameters\n\n* `str` {String}\n* `returns` {String}\n\n#### Example\n\n```handlebars\n{{titleize \"this is title case\"}}\n//=> 'This Is Title Case'\n```",
                                    "header": {
                                      "anchor": "handlebars_titleize"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{trim}}\n\nRemoves extraneous whitespace from the beginning and end of a string.\n\n#### Parameters\n\n* `string` {String}: The string to trim.\n* `returns` {String}\n\n#### Example\n\n```js\n{{trim \" ABC \"}}\n//=> 'ABC'\n```",
                                    "header": {
                                      "anchor": "handlebars_trim"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{uppercase}}\n\nUppercases all of the characters in the given string. If used as a block helper, it will uppercase the entire block. This helper\ndoes not support inverse blocks.\n\n#### Parameters\n\n* `str` {String}: The string to uppercase.\n* `options` {Object}: Handlebars options object.\n* `returns` {String}",
                                    "header": {
                                      "anchor": "handlebars_uppercase"
                                    }
                                  }
                                ]
                              }
                            }
                          ],
                          "blocks": []
                        }
                      },
                      {
                        "title": "URL Helpers",
                        "route": {
                          "path": "/url-helpers"
                        },
                        "data": {
                          "children": [
                            {
                              "title": "Standard URL Helpers",
                              "route": {
                                "path": "/standard-url-helpers"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_encodeuri\">{{encodeURI}}</a></li>\n    <li><a href=\"#handlebars_decodeurl\">{{decodeURI}}</a></li>\n    <li><a href=\"#handlebars_urlresolve\">{{urlResolve}}</a></li>\n    <li><a href=\"#handlebars_urlparse\">{{urlParse}}</a></li>\n    <li><a href=\"#handlebars_stripquerystring\">{{stripQuerystring}}</a></li>\n    <li><a href=\"#handlebars_stripprotocol\">{{stripProtocol}}</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "The following standard helpers are available to transform URLs.\n\n\n### {{encodeURI}}\n\nEncodes a Uniform Resource Identifier (URI) component, by replacing each instance of certain characters by one, two, three, or four escape sequences that represent the UTF-8 encoding of the character.\n\n#### Parameters\n\n* `str` {String}: The un-encoded string.\n* `returns` {String}: The encoded string.",
                                    "header": {
                                      "anchor": "handlebars_encodeuri"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{decodeURI}}\n\nDecodes a Uniform Resource Identifier (URI) component.\n\n#### Parameters\n\n* `str` {String}\n* `returns` {String}",
                                    "header": {
                                      "anchor": "handlebars_decodeuri"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{urlResolve}}\n\nTakes a base URL, and an href URL, and resolves them as a browser would for an anchor tag.\n\n#### Parameters\n\n* `base` {String}\n* `href` {String}\n* `returns` {String}",
                                    "header": {
                                      "anchor": "handlebars_urlresolve"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{urlParse}}\n\nParses a `url` string into an object.\n\n#### Parameters\n\n* `str` {String}: URL string.\n* `returns` {String}: Returns stringified JSON.",
                                    "header": {
                                      "anchor": "handlebars_urlparse"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{stripQuerystring}}\n\nStrips the query string from a `url`.\n\n#### Parameters\n\n* `url` {String}\n* `returns` {String}: The URL without the queryString.",
                                    "header": {
                                      "anchor": "handlebars_stripquerystring"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "### {{stripProtocol}}\n\nStrips the protocol from a `url`.\n\nUseful for displaying media that might have an `http` protocol on secure connections. Will change `http://foo.bar` to `//foo.bar`\n\n#### Parameters\n\n* `str` {String}\n* `returns` {String}: The URL with the `http` protocol stripped.",
                                    "header": {
                                      "anchor": "handlebars_stripprotocol"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Miscellaneous Helpers",
                        "route": {
                          "path": "/misc-helpers"
                        },
                        "data": {
                          "children": [
                            {
                              "title": "Standard Miscellaneous Helpers",
                              "route": {
                                "path": "/standard-miscellaneous-helpers"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Standard Miscellaneous Helpers</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#handlebars_default\">{{default}}</a></li>\n    <li><a href=\"#handlebars_option\">{{option}}</a></li>\n    <li><a href=\"#handlebars_noop\">{{noop}}</a></li>\n    <li><a href=\"#handlebars_withhash\">{{withHash}}</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "The following standard helpers are also supported on the Stencil framework.\n\n## {{default}}\n\nReturns the first value, if that value is defined; otherwise, returns the \"default\" value.\n\n#### Parameters\n\n* `value` {any}\n* `defaultValue` {any}\n* `returns` {String}",
                                    "header": {
                                      "anchor": "handlebars_default"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{option}}\n\nGiven the context `{options: {a: {b: {c: 'ddd'}}}}`, returns the given value of `prop` from `this.options`.\n\n#### Parameters\n\n* `prop` {String}\n* `returns` {any}\n\n#### Example\n\n```handlebars\n{{option \"a.b.c\"}}\n<!-- results => `ddd` -->\n```",
                                    "header": {
                                      "anchor": "handlebars_option"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{noop}}\n\nBlock helper that renders the block without taking any arguments.\n\n#### Parameters\n\n* `options` {Object}\n* `returns` {String}",
                                    "header": {
                                      "anchor": "handlebars_noop"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## {{withHash}}\n\nBlock helper that builds the context for the block from the options hash.\n\n#### Parameters\n\n* `options` {Object}: Handlebars-provided options object.",
                                    "header": {
                                      "anchor": "handlebars_withhash"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "config": {
                    "sidebar": {
                      "token": "Reference"
                    }
                  }
                }
              ]
            }
          },
          {
            "title": "Stencil Object Model ",
            "route": {
              "path": "/stencil-object-model-reference"
            },
            "data": {
              "children": [
                {
                  "title": "Stencil Objects",
                  "route": {
                    "path": "/stencil-objects"
                  },
                  "data": {
                    "children": [
                      {
                        "title": "Global Objects & Properties",
                        "route": {
                          "path": "/global-objects"
                        },
                        "data": {
                          "children": [
                            {
                              "title": "Global Objects & Properties ",
                              "route": {
                                "path": "/global-objects-and-properties-overview"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Global Objects and Properties Overview</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#global_global-objects\">Global Objects and Properties Overview</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Global Objects Overview \n\nGlobal objects and properties are common components shared across the entire BigCommerce storefront. The objects/properties covered in this subsection are:\n\n* [Banner](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/banner)\n* [Breadcrumbs](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/breadcrumbs)\n* [Categories](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/)\n* [Currency Selector](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/breadcrumbs)\n* [Faceted Search](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/faceted-search)\n* [Featured Products](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/featured-products)\n* [Footer](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/footer)\n* [Carousel](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/carousel)\n* [HTML Head](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/html-head)\n* [Is_Ajax](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/is-ajax)\n* [Login](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/login)\n* [New Products](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/new-products)\n* [Page Content](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/page-content)\n* [Pages](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/pages)\n* [Page Type](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/page-type)\n* [Pagination](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/pagination)\n* [Search](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/search)\n* [Settings](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/settings)\n* [Sitemap](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/sitemap)\n* [Social Links](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/social-links)\n* [Template](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/template)\n* [Top Sellers](/stencil-docs/stencil-object-model-reference/stencil-objects/global-objects/top-sellers)",
                                    "header": {
                                      "anchor": "global_global-objects"
                                    }
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "Overview"
                                }
                              }
                            },
                            {
                              "title": "Banner",
                              "route": {
                                "path": "/banner"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Banners</h1>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "<b>Description:</b> Elements of marketing banners at page’s top and/or bottom\n\n<b>Handlebars Expressions:</b> `{{banner}}`, `{{{banner}}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n\t\t<td><b>banners</b></td>\n    <td>Blocks of static HTML content to define banners</td>\n  </tr>\n  <tr>\n\t\t<td><i>top</i></td>\n    <td>Array of HTML content/strings, for custom top-banner content; banners are populated from the BigCommerce control panel</td>\n  </tr>\n  <tr>\n\t\t<td><i>bottom</i></td>\n    <td>Array of HTML content/strings, for custom bottom-banner content; banners are populated from the BigCommerce control panel</td>\n  </tr>\n</table>"
                                  },
                                  {
                                    "type": "callout",
                                    "data": {
                                      "title": " Handlebars Formatting Exception",
                                      "type": "warning",
                                      "body": "Where a banner contains HTML, the banner helper must be placed in triple braces, as in this\nexample: `{{{banner}}}`. (Double braces would escape the HTML.)\n\n"
                                    }
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "global object"
                                }
                              }
                            },
                            {
                              "title": "Breadcrumbs",
                              "route": {
                                "path": "/breadcrumbs"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Breadcrumbs</h1>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "<b>Description:</b> Defines a page's breadcrumbs – available on virtually all pages that have a breadcrumb trail\n\n<b>Handlebars Expression:</b> `{{breadcrumbs}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Displayed name of this breadcrumb element</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL of this breadcrumb element</td>\n  </tr>\n</table>"
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "global object"
                                }
                              }
                            },
                            {
                              "title": "Categories",
                              "route": {
                                "path": "/categories"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Categories</h1>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "<b>Description:</b> A list of all product categories shown in the current page context; default sorting is by category id, from lowest to highest\n\n<b>Handlebars Expression:</b> `{{categories}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>ID of the top-level category listed</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Name of the top-level category</td>\n  </tr>\n  <tr>\n    <td>description</td>\n    <td>Description of the top-level category (optional - when requested in front matter)</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL to the category page</td>\n  </tr>\n  <tr>\n    <td>count</td>\n    <td>Number of products in this category</td>\n  </tr>\n  <tr>\n\t\t<td><b>children</b></td>\n\t\t<td>List of child categories for this top-level category (<i>children properties</i> below)</td>\n  </tr>\n  <tr>\n\t\t<td><i>id</i></td>\n    <td>ID of the child category</td>\n  </tr>\n  <tr>\n\t\t<td><i>name</i></td>\n    <td>Name of the child category</td>\n  </tr>\n    <tr>\n\t\t\t<td><i>description</i></td>\n    <td>Description of the child category (optional - when requested in front matter)</td>\n  </tr>\n  <tr>\n\t\t<td><i>url</i></td>\n    <td>URL of the child category</td>\n  </tr>\n  <tr>\n\t\t<td><i>count</i></td>\n    <td>Number of products in this child category</td>\n  </tr>\n</table>"
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "global object"
                                }
                              }
                            },
                            {
                              "title": "Currency Selector",
                              "route": {
                                "path": "/currency-selector"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Currency Selector</h1>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "<b>Description:</b> A list of all supported currencies, and the currency that is actively in use in the storefront\n\n<b>Handlebars Expression:</b> `{{currency_selector}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>active_currency_id</td>\n    <td>ID of the currency actively in use in the storefront</td>\n  </tr>\n  <tr>\n    <td>active_currency_flag</td>\n    <td>Country flag used to represent the active currency</td>\n  </tr>\n  <tr>\n    <td>active_currency_name</td>\n    <td>Name of the active currency</td>\n  </tr>\n  <tr>\n    <td>active_currency_code</td>\n    <td>Code for the active currency</td>\n  </tr>\n  <tr>\n\t\t<td><b>currencies</b></td>\n    <td>List of all the currencies supported for this storefront (each contains properties listed below)</td>\n  </tr>\n  <tr>\n\t\t<td><i>is_active</i></td>\n    <td>Boolean that indicates whether this currency is active for use in the storefront</td>\n  </tr>\n  <tr>\n\t\t<td><i>switch_url</i></td>\n    <td>The URL to invoke a switch to this currency</td>\n  </tr>\n  <tr>\n\t\t<td><i>id</i></td>\n    <td>ID of the currency</td>\n  </tr>\n  <tr>\n\t\t<td><i>name</i></td>\n    <td>Name of the currency</td>\n  </tr>\n  <tr>\n\t\t<td><i>flag</i></td>\n    <td>Country flag used to visually represent the currency</td>\n  </tr>\n</table>"
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "global object"
                                }
                              }
                            },
                            {
                              "title": "Faceted Search",
                              "route": {
                                "path": "/faceted-search"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Faceted Search</h1>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "<b>Description:</b> Faceted-search object for searching globally, by category, or by brand\n\n<b>Handlebars Expression:</b> `{{faceted_search}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>facets</td>\n    <td>List of all search facets available</td>\n  </tr>\n  <tr>\n\t\t<td><b>selected</b></td>\n\t\t<td>Container for the selected search facets (selected facets contain properties below</i>)</td>\n  </tr>\n  <tr>\n    <td><i>remove_all_url<i></td>\n    <td>URL to remove all selected search restrictions</td>\n  </tr>\n  <tr>\n    <td><i>items<i></td>\n    <td>Currently enabled search facets</td>\n  </tr>\n</table>"
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "global object"
                                }
                              }
                            },
                            {
                              "title": "Featured Products",
                              "route": {
                                "path": "/featured-products"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Featured Products</h1>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "<b>Description:</b> A list of all the featured products for the BigCommerce storefront\n\n<b>Handlebars Expression:</b> `{{products.featured}}`\n\n<b>Object Properties:</b> References the product card model.\n\n<b> Usage Example: </b>\n\nFrom Stencil's base Cornerstone theme, the example below displays the global `{{products.featured}}` object on the `<theme-name>/templates/pages/home.html` page template.\n\nFirst, to declare the object, the following front mattermust be placed at the top of this template. This particular declaration also limits the number of featured products to be displayed:\n\n```\n---\nproducts:\n    [...]\n    featured:\n        limit: {{theme_settings.homepage_featured_products_count}}\n---\n```\nThe `homepage_featured_products_count` limit is one of two relevant variables defined in Cornerstone's `config.json` file, here:\n\n```\n  \"settings\": {\n    [...]\n    \"homepage_featured_products_count\": 8,\n    [...]\n    \"homepage_featured_products_column_count\": 4,\n    [...]    \n```\n\nIn the body of the `home.html` template, the following Handlebars conditional statement displays the featured-products object declared above:\n\n```\n    {{#if products.featured}}\n        {{> components/products/featured products=products.featured columns=theme_settings.homepage_featured_products_column_count}}\n    {{/if}}\n```\n\nThis statement formats the featured-products display according to the `homepage_featured_products_column_count` variable, also defined in the `config.json` excerpt above."
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "global object"
                                }
                              }
                            },
                            {
                              "title": "Footer",
                              "route": {
                                "path": "/footer"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Footer</h1>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "<b>Description:</b>The footer content for each storefront page\n\n<b>Handlebars Expression:</b> `{{footer}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>sitemap_url</td>\n    <td>The URL to the sitemap, based on store’s SEO setting</td>\n  </tr>\n  <tr>\n    <td>scripts</td>\n    <td>Scripts to be loaded after the HTML has loaded; includes performance metrics</td>\n  </tr>\n</table>"
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "global object"
                                }
                              }
                            },
                            {
                              "title": "Carousel",
                              "route": {
                                "path": "/carousel"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Carousel</h1>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "<b>Description:</b> A list of images, text, and style assets for a storefront’s image slide show\n\n<b>Handlebars Expression: </b> `{{carousel}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  \n  <tr>\n    <td>swap_frequency</td>\n    <td>Indicates how often (in seconds) the slides will change; the value must be between 1 and 90,000 seconds</td>\n  </tr>\n  \n  <tr>\n\t\t<td><b>slides</b></td>\n\t\t<td>Object containing properties for each slide in the slideshow (<i>each slide contains the below properties: image, alt_text, url, heading, heading_color, text, text_color, button_text, button_text_color</i>)</td>\n  </tr>\n  <tr>\n    <td><i>image</i></td>\n    <td>Path to the image file used on this slide</td>\n  </tr>\n  <tr>\n\t\t<td><i>alt_text</i></td>\n    <td>Alt text for the image</td>\n  </tr>\n  <tr>\n\t\t<td><i>url</i></td>\n    <td>URL to which the image will link</td>\n  </tr>\n  <tr>\n    <td>heading</td>\n    <td>Heading message defined by the merchant</td>\n  </tr>\n  <tr>\n\t\t<td><i>heading_color</i></td>\n    <td>Color of the heading text</td>\n  </tr>\n  <tr>\n\t\t<td><i>text</i></td>\n    <td>Subheading defined by the merchant</td>\n  </tr>\n  <tr>\n\t\t<td><i>text_color</i></td>\n    <td>Color of the subheading text</td>\n  </tr>\n  <tr>\n\t\t<td><i>button_text</i></td>\n    <td>Text displayed on a call-to-action button defined by the merchant</td>\n  </tr>\n  <tr>\n\t\t<td><i>button_text_color</i></td>\n    <td>Color of the button</td>\n  </tr>\n</table>"
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "global object"
                                }
                              }
                            },
                            {
                              "title": "HTML Head",
                              "route": {
                                "path": "/html-head"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "text",
                                    "data": "<b>Description:</b> Data to be included in the HTML `<head>` element<br>\n\n<b>Handlebars Expression:</b>`{{head}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>character_set</td>\n    <td>The character set to specify</td>\n  </tr>\n  <tr>\n    <td>meta_tags</td>\n    <td>Meta tags to improve store SEO</td>\n  </tr>\n  <tr>\n    <td>title</td>\n    <td>Current page’s title</td>\n  </tr>\n  <tr>\n    <td>stylesheets</td>\n    <td>CSS files to be included</td>\n  </tr>\n  <tr>\n    <td>scripts</td>\n    <td>Scripts to be loaded in the &lt;head&gt; tag</td>\n  </tr>\n  <tr>\n    <td>favicon</td>\n    <td>The store’s favicon (Favorite icon)</td>\n  </tr>\n  <tr>\n    <td>rsslinks</td>\n    <td>RSS feeds to improve SEO</td>\n  </tr>\n</table>"
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "global object"
                                }
                              }
                            },
                            {
                              "title": "Is_ajax",
                              "route": {
                                "path": "/is-ajax"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Is_Ajax</h1>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "<b>Description:</b> Boolean; returns `true` if the current executing request is an Ajax request\n\n<b>Handlebars Expression:</b> `{{is_ajax}}`\n\nNo properties available for this object."
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "global object"
                                }
                              }
                            },
                            {
                              "title": "Login",
                              "route": {
                                "path": "/login"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Login</h1>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "<b>Description: </b>Object to handle customer login details<br>\n\n<b>Handlebars Expression:</b> `{{forms.login}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>came_from_checkout</td>\n    <td>Boolean indicating whether the customer submitted login information at checkout</td>\n  </tr>\n  <tr>\n    <td>error</td>\n    <td>BC-defined message to display when customer’s login fails</td>\n  </tr>\n</table>"
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "global object"
                                }
                              }
                            },
                            {
                              "title": "New Products ",
                              "route": {
                                "path": "/new-products"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>New Products</h1>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "<b>Description:</b> A list of new products for the BigCommerce storefront\n\n<b>Handlebars Expression:</b>`{{products.new}}`\n\n<b>Object Properties:</b> References the product card model.\n\n<b> Usage Example:</b>\n\nTo access the global `{{products.new}}` object on your page, you must first use front matter to declare the object at the top of your page template. For example, you would place this front-matter declaration at the top of your template file:\n\n```\n---\nproducts:\n    new:\n---\n```"
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "global object"
                                }
                              }
                            },
                            {
                              "title": "Page Content ",
                              "route": {
                                "path": "/page-content"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Page Content</h1>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "<b>Description:</b> Defines elements of merchant’s store page\n\n<b>Handlebars Expression:</b> `{{page}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>title</td>\n    <td>Page title, to be used as the HTML title tag</td>\n  </tr>\n  <tr>\n    <td>description</td>\n    <td>Description for the page, to be used as the HTML `meta > description` tag</td>\n  </tr>\n  <tr>\n    <td>content</td>\n    <td >HTML content of the page</td>\n  </tr>\n  <tr>\n\t\t<td><b>sub_pages</b> (each subpage will have the properties below: <i>title</i>, <i>url</i>)</td>\n    <td>Array of child pages</td>\n  </tr>\n  <tr>\n\t\t<td><i>title</i></td>\n    <td>Title of this child page</td>\n  </tr>\n  <tr>\n\t\t<td><i>url</i></td>\n    <td>URL of this child page</td>\n  </tr>\n</table>"
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "global object"
                                }
                              }
                            },
                            {
                              "title": "Pages",
                              "route": {
                                "path": "/pages"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Pages</h1>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "<b>Description:</b> A list of all web content pages for the BigCommerce storefront<br>\n\n<b>Handlebars Expression:</b> `{{pages}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Name of the page</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL of the page</td>\n  </tr>\n  <tr>\n\t\t<td><b>children</b></td>\n\t\t<td>List of child pages for this page (each child page will have a <i>name</i> and <i>url</i>)</td>\n  </tr>\n  <tr>\n\t\t<td><i>name</i></td>\n    <td>Name of the child page</td>\n  </tr>\n  <tr>\n\t\t<td><i>url</i></td>\n    <td>URL of the child page</td>\n  </tr>\n</table>"
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "global object"
                                }
                              }
                            },
                            {
                              "title": "Page Type Property",
                              "route": {
                                "path": "/page-type-property"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Page Type Property</h1>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "<b>Description:</b> A string representing the type of page currently displayed. <br>\n\n<b>Handlebars Expression:</b> `{{page_type}}`\n\n<b>Values:</b> The four most-commonly-used values for `{{page_type}}` are:\n\n* default (for a home page)\n* product (for a product page)\n* category (for a category page)\n* page (for a Web [static] page)\n\nAll possible values for `{{page_type}}` are:\n\n| account | shippingaddressform | account_new_return | \n|---|---|---|\n| account_addressbook | account_downloaditem | account_inbox | \n| editaccount | account_orderstatus | account_orders | \n| invoice_print | account_order | account_recentitems | \n| account_saved_return | account_returns | wishlists | \n| add-wishlist | wishlist | createaccount_thanks | \n| createaccount | forgotpassword | login | \n| getnewpassword | blog | blog_post | \n| brand | brands | cart | \n| category | compare | 403 | \n| 404 | error | giftcertificates_balance | \n| giftcertificates | giftcertificates_redeem | default | \n| page | page_contact_form | product | \n| rss | search | sitemap | \n| newsletter_subscribe | unsubscribe | hibernation | \n| maintenance |\n\n"
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "global object"
                                }
                              }
                            },
                            {
                              "title": "Pagination",
                              "route": {
                                "path": "/pagination"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Pagination</h1>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "<b>Description:</b> Defines pagination of storefront pages\n\n<b>Handlebars Expression:</b> `{{pagination}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>next</td>\n    <td>Link to next page, if any</td>\n  </tr>\n  <tr>\n    <td>previous</td>\n    <td>Link to previous page, if any</td>\n  </tr>\n  <tr>\n    <td>sort</td>\n    <td>Field to sort by</td>\n  </tr>\n  <tr>\n    <td>current</td>\n    <td>Number representing which page (in the current collection) the customer is viewing</td>\n  </tr>\n  <tr>\n    <td>total</td>\n    <td>Total number of results, across all pages</td>\n  </tr>\n  <tr>\n\t\t<td><b>links</b></td>\n    <td>Array of pages that surround the current page; displayed as a set of links, dynamically sized based on the current page number (each link in the array contains the below properties: <i>url, number</i>)</td>\n  </tr>\n  <tr>\n\t\t<td><i>url</i></td>\n    <td>URL to this page of results</td>\n  </tr>\n  <tr>\n\t\t<td><i>number</i></td>\n    <td>The page number of this link, based on an index starting at 1</td>\n  </tr>\n</table>"
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "global object"
                                }
                              }
                            },
                            {
                              "title": "Search ",
                              "route": {
                                "path": "/search"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Search</h1>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "<b>Description:</b> Defines search parameters for the merchant’s site<br>\n\n<b>Handlebars Expression:</b> `{{forms.search}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>query</td>\n    <td>Active search query, if available</td>\n  </tr>\n\n  <tr>\n    <td>section</td>\n    <td>Active search-results section: either content or product</td>\n  </tr>\n  \n  <tr>\n    <td>content_url</td>\n    <td>URL to the content section</td>\n  </tr>\n  \n  <tr>\n    <td>product_url</td>\n    <td>URL to the product section</td>\n  </tr>\n  \n  \n  <tr>\n    <td>name</td>\n    <td>Brand name</td>\n  </tr>\n  <tr>\n    <td>suggested_query</td>\n    <td>An alternative query – related to the current query – that can be offered to substitute for misspelled entries</td>\n  </tr>\n  <tr>\n    <td>has_suggestions</td>\n    <td>Boolean – true if there is at least one of brand results, category results, or a (non-null) suggested_query</td>\n  </tr>\n  <tr>\n    <td>brand_results</td>\n    <td>Array of brands that match the search query; default sorting is by brand id, from lowest to highest</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL of the brand</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Displayed name for the brand</td>\n  </tr>\n  <tr>\n    <td>category_results</td>\n    <td>An array of category paths matching the search query; used to populate category suggestions</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL of the category</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Displayed name for the category</td>\n  </tr>\n  <tr>\n    <td>values</td>\n    <td>Values of the submitted search form</td>\n  </tr>\n  <tr>\n    <td>brand</td>\n    <td>Any brand ID that customer has selected from drop-down list</td>\n  </tr>\n  <tr>\n    <td>price_from</td>\n    <td>Any minimum price the customer has specified</td>\n  </tr>\n  <tr>\n    <td>price_to</td>\n    <td>Any maximum price the customer has specified</td>\n  </tr>\n  <tr>\n    <td>featured_products</td>\n    <td>Whether customer has chosen to view featured products: null = no preference; 1 = only featured products; 2 = only non-featured products</td>\n  </tr>\n  <tr>\n    <td>free_shipping</td>\n    <td>Value indicating customer’s preference for free shipping within search results: null = no preference; 1 = free shipping only; 2 = paid shipping only</td>\n  </tr>\n  <tr>\n    <td>result_count</td>\n    <td>Combined number of returned results for product and content search</td>\n  </tr>\n  <tr>\n    <td>category_options</td>\n    <td>Array of options to present to customer as search-by-category fields</td>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>Category ID</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Displayed name of the category</td>\n  </tr>\n  <tr>\n    <td>state</td>\n    <td>If category contains children, and customer selects a child category: Whether that category’s display will default to closed (collapsed) or opened (expanded)</td>\n  </tr>\n  <tr>\n    <td>children</td>\n    <td>Array of objects representing a child category; recursively replicates the structure of its parent</td>\n  </tr>\n  <tr>\n    <td>content_results</td>\n    <td>Search results across blog posts and storefront pages (not products or categories)</td>\n  </tr>\n  <tr>\n    <td>title</td>\n    <td>Title of the result (title embedded in blog post or page)</td>\n  </tr>\n  <tr>\n    <td>content</td>\n    <td>Summary of text from the blog post or page (first 200 characters)</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL to the result</td>\n  </tr>\n  <tr>\n    <td>type</td>\n    <td>Either post (for blog posts) or page (for storefront pages)</td>\n  </tr>\n  <tr>\n\t\t<td><b>product_results</b></td>\n    <td>Results of customer’s last search by product (each result contains the below properties)</td>\n  </tr>\n  <tr>\n\t\t<td><i>products</i></td>\n    <td>List of search results for a product; points to <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/common-product-card-model\">product card model</a></td>\n  </tr>\n  <tr>\n    <td><i>show_compare</i></td>\n    <td>Boolean corresponding to merchant’s control-panel selection whether or not to enable product comparisons </td>\n  </tr>\n  <tr>\n    <td><i>faceted_search_enabled</i></td>\n    <td>Boolean that defines whether product-filtering search is enabled for the store</td>\n  </tr>\n  <tr>\n    <td><i>facets</i></td>\n    <td>All available search filters</td>\n  </tr>\n  <tr>\n    <td><i>pagination</i></td>\n    <td>References pagination model</td>\n  </tr>\n  <tr>\n    <td><i>selected</i></td>\n    <td>Currently selected filters</td>\n  </tr>\n</table>\n"
                                  }
                                ],
                                "children": []
                              },
                              "config": {
                                "sidebar": {
                                  "token": "global object"
                                }
                              }
                            },
                            {
                              "title": "Settings",
                              "route": {
                                "path": "/settings"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Settings</h1>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "<b>Description:</b> Common settings shared across every BigCommerce storefront<br>\n\n<b>Handlebars Expression:</b> `{{settings}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>account_creation_enabled</td>\n    <td>Site-wide boolean value that indicates whether to allow customers to create accounts</td>\n  </tr>\n  <tr>\n    <td>show_product_rating</td>\n    <td>Site-wide boolean value that indicates whether to display product ratings (in numeric or star format) to visitors</td>\n  </tr>\n  <tr>\n    <td>show_product_reviews</td>\n    <td>Site-wide boolean value that indicates whether to display full-text product reviews to visitors</td>\n  </tr>\n  <tr>\n    <td>show_newsletter_box</td>\n    <td>Site-wide boolean value that indicates whether to display a mailing-list invite to visitors</td>\n  </tr>\n  <tr>\n    <td> gift_certificates_enabled</td>\n    <td>Site-wide boolean value that indicates whether to enable the gift certificate system for this store</td>\n  </tr>\n  \n  <tr>\n    <td> blog_enabled</td>\n    <td>Site-wide boolean value that indicates whether the blog is visible for this store</td>\n  </tr>\n  \n  <tr>\n    <td>show_wishlist</td>\n    <td>Site-wide boolean value that indicates whether to allow customers to create wishlists</td>\n  </tr>\n  <tr>\n    <td>base_url</td>\n    <td>The normal shop URL</td>\n  </tr>\n  <tr>\n    <td>client_ip_address</td>\n    <td>IP address of the customer browsing the store</td>\n  </tr>\n  <tr>\n    <td>secure_base_url</td>\n    <td>The SSL-enabled, secure, shop URL</td>\n  </tr>\n  <tr>\n    <td>address</td>\n    <td>Store’s complete physical address, as entered by merchant in the Store Profile</td>\n  </tr>\n  <tr>\n    <td>store_name</td>\n    <td>Name of the BigCommerce store</td>\n  </tr>\n  \n  <tr>\n\t\t<td><b>store_logo</b></td>\n\t\t<td>The store’s logo (logo will contain a <i>title</i> and <i>image</i>)</td>\n  </tr>\n  <tr>\n\t\t<td><i>title</i></span></td>\n    <td>Title for the logo - the text configured in the control panel under <code>Storefront Design</code> > <code>Design Options</code> > <code>Logo</code></td>\n  </tr>\n  <tr>\n\t<td><i>image</i></td>\n    <td>Optional image file, as a Stencil image object</td>\n  </tr>\n\t\n  <tr>\n    <td>privacy_cookie</td>\n    <td>If enabled, a string containing merchant-customizable text for (European Union&ndash;required) cookie-setting notification; if disabled, a boolean with a value of <code>false</code></td>\n  </tr>\n\t\n  <tr>\n\t<td><b>urls</b></td>\n    <td>Global URLs that the template can access – for example, the template could link to the cart page using <code>{{urls.cart}}</code> (Each global URL contains <i>home, account, brands, gift_certificate, auth, product, cart, checkout, rss properties, contact_us_submit, search, compare, sitemap, and subscribe</i> properties)</td>\n  </tr>\n  <tr>\n\t<td><i>home</i></td>\n    <td>Store’s home page</td>\n  </tr>\n  <tr>\n\t<td><i><b>account</b></i></td>\n\t<td>Collection of (customer and storefront) account-related URLs. (Accounts contain <i>index, orders, update_action, returns, addresses, inbox, send_message, add_address, wishlists, details, and recent items</i> properties)</td>\n  </tr>\n  <tr>\n\t<td><i>index</i></td>\n    <td>Account index page</td>\n  </tr>\n  <tr>\n\t<td><i><b>orders</b></i></td>\n\t<td>Collection of orders-related URLs. (Orders contains <i>all</i> and <i>save_new_return</i> properties) </td>\n  </tr>\n  <tr>\n\t<td><i>all</i></td>\n    <td>List of all orders</td>\n  </tr>\n  <tr>\n\t<td><i>save_new_return</i></td>\n    <td>URL to submit a New Return form</td>\n  </tr>\n  <tr>\n    <td><i>update_action<i></td>\n    <td>URL to submit an Edit Account form</td>\n  </tr>\n  <tr>\n\t\t<td><i>returns</i></td>\n    <td>List of returns</td>\n  </tr>\n  <tr>\n\t\t<td><i>addresses</i></td>\n    <td>List of addresses; default sorting is by address id, from lowest to highest</td>\n  </tr>\n  <tr>\n\t\t<td><i>inbox</i></td>\n    <td>List of messages in customer’s inbox</td>\n  </tr>\n  <tr>\n\t\t<td><i>send_message</i></td>\n    <td>URL to submit a message to the merchant</td>\n  </tr>\n  <tr>\n\t\t<td><i>add_address</i></td>\n    <td>Link to Add Address form</td>\n  </tr>\n  <tr>\n\t\t<td><b>wishlists</b></td>\n\t\t<td>Collection of wishlist-related URLs. (Wishlists contain <i>add, edit, delete,</i> and <i>all</i> properties)</td>\n  </tr>\n  <tr>\n\t\t<td><i>add</i></td>\n    <td>URL to the Add Wishlist form</td>\n  </tr>\n  <tr>\n\t\t<td><i>edit</i></td>\n    <td>URL to the Edit Wishlist form</td>\n  </tr>\n  <tr>\n\t\t<td><i>delete</i></td>\n    <td>URL to delete a wishlist</td>\n  </tr>\n  <tr>\n\t\t<td><i>all</i></td>\n    <td>URL to view all wishlists</td>\n  </tr>\n  <tr>\n\t\t<td><i>details</i></td>\n    <td>URL to the Edit Account form</td>\n  </tr>\n  <tr>\n\t\t<td><i>recent_items</i></td>\n    <td>URL to a list of recently viewed items</td>\n  </tr>\n  <tr>\n\t\t<td><i>brands</i></td>\n    <td>URL to view all brands; default sorting is by brand id, from lowest to highest</td>\n  </tr>\n  <tr>\n\t<td><b>gift_certificate</b></td>\n\t<td>Collection of gift-certificate–related URLs (gift certificate contains <i>purchase, redeem, and balance</i> properties)</td>\n  </tr>\n  <tr>\n\t<td><i>purchase</i></td>\n\t<td><i>URL to a form for purchasing a gift certificate</i></td>\n  </tr>\n  <tr>\n\t<td><i>redeem</i></td>\n\t<td><i>URL to view redemption information</i></td>\n  </tr>\n  <tr>\n\t<td><i>balance</i></td>\n    <td>URL to check the balance of a gift certificate</td>\n  </tr>\n  <tr>\n\t\t<td><b>auth</b></td>\n    <td>Collection of authorization-related URLs. (auth contains <i>login, check_login, create_account, save_new_account, forgot_password, send_password_email, save_new_password, logout</i> properties) </td>\n  </tr>\n  <tr>\n\t\t<td><i>login</i></td>\n    <td>URL to the login form</td>\n  </tr>\n  <tr>\n\t\t<td><i>check_login</i></td>\n    <td>URL to which to submit the login form</td>\n  </tr>\n  <tr>\n\t\t<td><i>create_account</i></td>\n    <td>URL to the Create Account form page</td>\n  </tr>\n  <tr>\n\t\t<td><i>save_new_account</i></td>\n    <td>URL to which to submit the Create Account form</td>\n  </tr>\n  <tr>\n\t\t<td><i>forgot_password</i></td>\n    <td>URL to the Forgot Password form</td>\n  </tr>\n  <tr>\n\t\t<td><i>send_password_email</i></td>\n    <td>Submission URL for the Forgot Password form</td>\n  </tr>\n  <tr>\n\t\t<td><i>save_new_password</i></td>\n    <td>Submission URL for saving a new password</td>\n  </tr>\n  <tr>\n\t\t<td><i>logout</i></td>\n    <td>URL for customer to log out of their account</td>\n  </tr>\n  <tr>\n    <td><b><i>product</i></b></td>\n\t\t<td>Collection of product-related URLs (product contains the <i>post_review</i> property)</td>\n  </tr>\n  <tr>\n\t\t<td><i>post_review</i></td>\n    <td>URL to submit a Write Review form </td>\n  </tr>\n  <tr>\n\t\t<td><i>cart</i></td>\n    <td>URL to the cart page</td>\n  </tr>\n  <tr>\n\t\t<td><b><i>checkout</i></b></td>\n\t\t<td>Collection of checkout related URLs (Contains the <i>single_address</i> and <i>multiple_address</i> properties)</td>\n  </tr>\n  <tr>\n\t\t<td><i>single_address</i></td>\n    <td>URL for the customer to check out with a single shipping address</td>\n  </tr>\n  <tr>\n    <td>multiple_address</td>\n    <td>URL for the customer to check out with multiple shipping addresses </td>\n  </tr>\n  <tr>\n\t\t<td><b><i>rss</i></b></td>\n\t\t<td>Collection of RSS-related URLs. (Contains the <i>products, blog, and blog_atom products</i>)</td>\n  </tr>\n  <tr>\n    <td>products</td>\n    <td>Collection of product-feed–related URLs. (Contains the <i>new, new_atom, popular, popular_atom, featured, featured_atom, search, search_atom, blog, and blog_atom</i> properties)</td>\n  </tr>\n  <tr>\n\t\t<td><i>new</i></td>\n    <td>RSS feed of new products</td>\n  </tr>\n  <tr>\n\t\t<td><i>new_atom</i></td>\n    <td>RSS feed of new products, in Atom format</td>\n  </tr>\n  <tr>\n\t\t<td><i>popular</i></td>\n    <td>RSS feed of popular products</td>\n  </tr>\n  <tr>\n\t\t<td><i>popular_atom</i></td>\n    <td>RSS feed of popular products, in Atom format</td>\n  </tr>\n  <tr>\n\t\t<td><i>featured</i></td>\n    <td>RSS feed of featured products</td>\n  </tr>\n  <tr>\n\t\t<td><i>featured_atom</i></td>\n    <td>RSS feed of featured products, in Atom format</td>\n  </tr>\n  <tr>\n\t\t<td><i>search</i></td>\n    <td>RSS feed of products matching the active search query</td>\n  </tr>\n  <tr>\n\t\t<td><i>search_atom</i></td>\n    <td>RSS feed of products matching the active search query, in Atom format</td>\n  </tr>\n  <tr>\n\t\t<td><i>blog</i></td>\n    <td>RSS feed of recent blog posts</td>\n  </tr>\n  <tr>\n\t\t<td><i>blog_atom</i></td>\n    <td>RSS feed of recent blog posts, in Atom format</td>\n  </tr>\n  <tr>\n\t\t<td><i>contact_us_submit</i></td>\n    <td>URL to submit the Contact Us form</td>\n  </tr>\n  <tr>\n\t\t<td><i>search</i></td>\n    <td>URL to submit a search request</td>\n  </tr>\n  <tr>\n\t\t<td><i>compare</i></td>\n    <td>A string containing the URL to the products comparison page</td>\n  </tr>\n  <tr>\n\t\t<td><i>sitemap</i></td>\n    <td>URL to the sitemap</td>\n  </tr>\n  <tr>\n\t\t<td><i><b>subscribe</b></i></td>\n\t\t<td>Collection of subscription-related URLs (contains the <i>action</i> property)</td>\n  </tr>\n  <tr>\n\t\t<td><i>action</i></td>\n    <td>URL to which the the newsletter subscription will be submitted</td>\n  </tr>\n  <tr>\n\t\t<td><b>money</b></td>\n    <td>List of child items that define the store’s default currency formatting (Contains the <i>currency_token, currency_location, decimal_token, decimal_places, thousands_token</i> properties)</td>\n  </tr>\n  <tr>\n\t\t<td><i>currency_token</i></td>\n    <td>Symbol for the currency</td>\n  </tr>\n  <tr>\n\t\t<td><i>currency_location</i></td>\n    <td>Whether currency symbol appears at left or right of the quantity</td>\n  </tr>\n  <tr>\n\t\t<td><i>decimal_token</i></td>\n    <td>Symbol for decimal separator</td>\n  </tr>\n  <tr>\n\t\t<td><i>decimal_places</i></td>\n    <td>Number of decimal places to display</td>\n  </tr>\n  <tr>\n\t\t<td><i>thousands_token</i></td>\n    <td>Symbol for thousands separator</td>\n  </tr>\n  <tr>\n    <td>returns_enabled</td>\n    <td>Boolean that indicates whether the control-panel setting for the returns system is enabled</td>\n  </tr>\n  <tr>\n    <td>tax_label</td>\n    <td>Defines the Tax Label (VAT, Sales Tax, etc.) that a merchant can set in the control panel’s Settings > Tax page for display to customers</td>\n  </tr>\n  <tr>\n\t\t<td><b>add_this</b></td>\n    <td>Object that defines links for the AddThis social sharing component (contains the <i>buttons</i> property)</td>\n  </tr>  \n  <tr>\n\t\t<td><i><b>buttons</i></b></td>\n\t\t<td>Array of buttons to display for <code>AddThis</code> social sharing (contains the <i>service and annotation</i> properties)</td>\n  </tr>\n  <tr>\n\t\t<td><i>service</i></td>\n    <td>String containing the name of this button's social-media service (<code>facebook</code>, <code>email</code>, <code>print</code>, <code>twitter</code>, <code>linkedin</code>, <code>google</code>, etc.)</td>\n  </tr>\n  <tr>\n\t\t<td><i>annotation</i></td>\n    <td>String containing HTML attributes associated with this button</td>\n  </tr>\n    \n  <tr>\n\t\t<td><b>maintenance</b></td>\n    <td>Object that manages information about the store when in maintenance (offline) mode. (maintenance contains the <i>header, message, and notice</i> properties)</td>\n  </tr>  \n  <tr>\n\t\t<td><i>header</i></td>\n    <td>If store is in maintenance mode, string containing header text for the \"Down for Maintenance\" window displayed to visitors; otherwise, <code>null</code></td>\n  </tr>\n  <tr>\n\t\t<td><i>message</i></td>\n    <td>If store is in maintenance mode, string containing merchant-customizable body text (and optionally, HTML) for the \"Down for Maintenance\" window displayed to visitors; otherwise, <code>null</code></td>\n  </tr>\n  <tr>\n\t\t<td><i>notice</i></td>\n    <td>If store is in maintenance mode, one of three strings identifying the store's status, and generating a corresponding text notice to merchants about how to proceed: <code>AdminPrelaunchNotice</code> for preview stores, <code>AdminMaintenanceNotice</code> for active stores taken down for maintenance, or <code>AdminHibernationModeNotice</code> for deactivated stores; otherwise, <code>null</code>\n  </tr>\n    \n  <tr>\n    <td>phone_number</td>\n    <td>The contact phone number for the store</td>\n  </tr>  \n\n  <tr>\n    <td>rss_item_limit</td>\n    <td>An integer that sets a limit on the number of RSS items to display</td>\n  </tr>\n\n  <tr>\n\t\t<td><b>password_requirements</b></td>\n    <td>Collection of properties representing BigCommerce requirements for customer-account passwords. (Contains the <i>alpha, numeric, minlength, and error properties</i>)</td>\n  </tr>\n  <tr>\n\t\t<td><i>alpha</i></td>\n    <td>Regular expression representing required/acceptable alphabetic characters</td>\n  </tr>\n  <tr>\n\t\t<td><i>numeric</i></td>\n    <td>Regular expression representing required/acceptable numeric characters</td>\n  </tr>\n  <tr>\n\t\t<td><i>minlength</i></td>\n    <td>Integer representing minimum acceptable password length</td>\n  </tr>\n  <tr>\n\t\t<td><i>error</i></td>\n    <td>String that passes a standard error message for noncompliant passwords</td>\n  </tr>\n  \n  <tr>\n\t\t<td><b>measurements</b></td>\n    <td>Collection of units-of-measure definitions, to be used when displaying product details. (Contains the <i>length</i> and <i>weight</i> properties)</td>\n  </tr>\n  <tr>\n\t\t<td><i>length</i></span></td>\n    <td>Units of measure for product length</td>\n  </tr>\n  <tr>\n\t<td><i>weight</i></td>\n    <td>Units of measure for product weight</td>\n  </tr>\n\n  <tr>\n\t<td><b>[Time and date settings]</b></td>\n    <td>[The four settings below are configured in the control panel under <NOBR><span class=\"inline-code\">Store Setup> <code>Store Settings</code> > <code>Language & Date</code> > <code>Date Settings</code>. Date formats follow <a href=\"http://us3.php.net/manual/en/function.date.php\">php conventions.</a></td>\n  </tr>\n\n  <tr>\n\t\t<td><i>store_time_zone</i></td>\n\t\t<td>Store's time zone, as selected in the control panel's <code>Your Timezone</code> drop-down list</td>\n  </tr>\n\n  <tr>\n\t\t<td><i>store_dst_correction</i></td>\n    <td>Whether or not this time zone observes Daylight Saving Time (boolean), as set by the control panel's <code>Enable DST Correction</code> check box</td>\n  </tr>\n\n  <tr>\n\t\t<td><i>display_date_format</i></td>\n    <td>Brief display format/pattern for dates, as configured in the control panel's <code>Display Date Format</code> field</td>\n  </tr>\n\n  <tr>\n\t\t<td><i>extended_display_date_format</i></td>\n    <td>Extended display format/pattern for dates, as configured in the control panel's <code>Extended Display Date Format</code> field</td>\n  </tr>   \n</table>"
                                  }
                                ],
                                "children": []
                              },
                              "config": {
                                "sidebar": {
                                  "token": "global object"
                                }
                              }
                            },
                            {
                              "title": "Sitemap",
                              "route": {
                                "path": "/sitemap"
                              },
                              "data": {
                                "children": [],
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Sitemap</h1>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "<b>Description:</b>A list of all sitemap properties for this BigCommerce storefront: pages, categories, and brands.<br>\n\n<b>Handlebars Expression:</b> `{{sitemap}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td>subsection_url</td>\n    <td>URL to subsection content (pages, categories, brands) of the sitemap</td>\n  </tr>\n  <tr>\n    <td>label</td>\n    <td>Subsection title (pages, categories, brands)</td>\n  </tr>\n  <tr>\n\t\t<td><b>body</b></td>\n    <td>List of all sitemap subsections (url, label, children)</td>\n  </tr>\n  <tr>\n\t\t<td><i>url</i></td>\n\t\t<td><i>URL to the page, category, or brand</i></td>\n  </tr>\n  <tr>\n\t\t<td><i>label</i></td>\n    <td>Label of the page, category, or brand</td>\n  </tr>\n  <tr>\n\t\t<td><i><b>children<b></i></td>\n    <td>Nested list of children within pages or categories; will be null for brands (contains the below <i>url and label</i> properties)</td>\n  </tr>\n  <tr>\n\t\t<td><i>url</i></td>\n    <td>URL to the child page or category</td>\n  </tr>\n  <tr>\n\t\t<td><i>label</i></td>\n    <td>Label for the child page or category</td>\n  </tr>\n</table>"
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "global object"
                                }
                              }
                            },
                            {
                              "title": "Social Links",
                              "route": {
                                "path": "/social-links"
                              },
                              "data": {
                                "children": [],
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Social Links</h1>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "<b>Description:</b> Array of all social-media site links for the storefront<br>\n\n<b>Handlebars Expression:</b> `{{social_media}}`\n\n<b>Object Properties:</b><br><br>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Internal name of this social-media platform (e.g., \"googleplus\")</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL to point to, set by merchant in control panel (https://www.facebook.com/BigCommerce, etc.)</td>\n  </tr>\n  <tr>\n    <td>position</td>\n    <td>Display sort order for this platform within the social-media list</td>\n  </tr>\n  <tr>\n    <td>display_name</td>\n    <td>Displayed/formatted name of this social-media platform (e.g., “Google+”) </td>\n  </tr>\n</table>"
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "global object"
                                }
                              }
                            },
                            {
                              "title": "Template Property",
                              "route": {
                                "path": "/template-property"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Template Property</h1>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "<b>Description:</b> A string containing the name of the root template currently being rendered in the page context. <br>\n\n<b>Handlebars Expression:</b> `{{template}}`\n\n<b>Values:</b> Values will reflect each theme's specific directory structure. Possible values include:\n\n* `pages/home`\n* `pages/brand` (for brand pages)\n* `pages/brands`\n* `pages/cart`\n* `pages/category` (for category pages)\n* `pages/contact-us`\n* `pages/page` (for Web [static] pages)\n* `pages/product` (for product pages)\n* `pages/errors/404`\n* `pages/auth/login`\n* `pages/custom/product/<some_page_name>` (for a custom product page)\n(etc.)"
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "global object"
                                }
                              }
                            },
                            {
                              "title": "Top Sellers",
                              "route": {
                                "path": "/top-sellers"
                              },
                              "data": {
                                "children": [],
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Top Sellers</h1>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "<b>Description:</b> Object to display a sidebar of top-selling products<br>\n\n<b>Handlebars Expression:</b> `{{products.top_sellers}}`\n\n<b>Object Properties:</b> References the <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/common-product-card-model\"> product card model </a>\n\n<b>Usage Example:</b>\n\nTo access the global`{{products.top_sellers}}` object on your page, you must first use [front matter](/stencil-docs/front-matter/front-matter-attributes-reference) to declare the object at the top of your page template. For example, you would place this front-matter declaration at the top of your template file:\n\n```\n---\nproducts:\n    top_sellers:\n---\n```"
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "global object"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Common Objects",
                        "route": {
                          "path": "/common-objects"
                        },
                        "data": {
                          "children": [
                            {
                              "title": "Common Objects",
                              "route": {
                                "path": "/new-subpage"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Common Objects Overview</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#common_common-objects\">Common Objects Overview</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "Certain Stencil objects can be accessed through multiple other Stencil objects. For example, the image object is exposed through the Category, Product, Product Options, and other objects. Its structure is consistent for all objects/properties that access it. \n\nThis consistent behavior is true for each of the common objects documented in the following subsection: \n\n * [Catalog Price](/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/catalog-price)\n * [Price](/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price)\n * [Price Range](/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price-range)\n * [Stencil Image](/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/stencil-image)\n * [Common Product Card Model](/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/common-product-card-model)\n"
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "Overview"
                                }
                              }
                            },
                            {
                              "title": "Catalog Price ",
                              "route": {
                                "path": "/catalog-price"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Catalog Price</h1>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "<b>Description:</b> Exposes catalog price- and currency-related properties in both raw numeric, and formatted string, formats.\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n\t\t<td><b>with_tax</b></td>\n\t\t<td>Price including tax (includes the <i>formatted</i> and <i>value</i> properties)</td>\n  </tr>\n  <tr>\n\t\t<td><i>formatted</i></td>\n    <td>String representation of the above price, including currency formatting</td>\n  </tr>\n  <tr>\n\t\t<td><i>value</i></td>\n    <td>Raw numeric value of the above price</td>\n  </tr>\n  <tr>\n\t\t<td><b>without_tax</b></td>\n\t\t<td>Price excluding tax (includes <i>formatted and value</i> properties)</td>\n  </tr>\n  <tr>\n\t\t<td><i>formatted</i></td>\n    <td>String representation of the above price, including currency formatting</td>\n  </tr>\n  <tr>\n\t\t<td><i>value</i></td>\n    <td>Raw numeric value of the above price</td>\n  </tr>\n  \n  <tr>\n\t\t<td><b>non_sale_price_with_tax</b></td>\n    <td>Non-sale price, including tax. Can be displayed alongside standard <a href=\"#with_tax\">with_tax</a> during sale events. (Includes <i>formatted and value</i> properties)</td>\n  </tr>\n  <tr>\n\t\t<td><i>formatted</i></td>\n    <td>String representation of the above price, including currency formatting</td>\n  </tr>\n  <tr>\n    <td><i>value</i></td>\n    <td>Raw numeric value of the above price</td>\n  </tr>\n  <tr>\n\t\t<td><b>non_sale_price_without_tax</b></td>\n    <td>Non-sale price, excluding tax. Can be displayed alongside standard <a href=\"#without_tax\">without_tax</a> during sale events. (Includes <i>formatted</i> and <i>value</i> properties) </td>\n  </tr>\n  <tr>\n\t\t<td><i>formatted</i></td>\n    <td>String representation of the above price, including currency formatting</td>\n  </tr>\n  <tr>\n\t\t<td><i>value</i></td>\n    <td>Raw numeric value of the above price</td>\n  </tr>\n \n  <tr>\n\t\t<td><b>rrp_with_tax</b></td>\n    <td>List (i.e., manufacturer’s suggested retail) price, including tax (Includes <i>formatted</i> and <i>value</i> properties)</td>\n  </tr>\n  <tr>\n\t\t<td><i>formatted</i></td>\n    <td>String representation of the above price, including currency formatting</td>\n  </tr>\n  <tr>\n\t\t<td><i>value</i></td>\n    <td>Raw numeric value of the above price</td>\n  </tr>\n  <tr>\n\t\t<td><b>rrp_without_tax</b></td>\n    <td>List (i.e., suggested retail) price, excluding tax (Includes <i>formatted</i> and <i>value</i> properties)</td>\n  </tr>\n  <tr>\n\t\t<td><i>formatted</i></td>\n    <td>String representation of the above price, including currency formatting</td>\n  </tr>\n  <tr>\n\t\t<td><i>value</i></td>\n    <td>Raw numeric value of the above price</td>\n  </tr>\n  <tr>\n\t\t<td><b>saved</b></td>\n    <td>Amount customer saved, compared to list price (Includes <i>formatted</i> and <i>value</i> properties) </td>\n  </tr>\n  <tr>\n\t\t<td><i>formatted</i></td>\n    <td>String representation of the above price, including currency formatting</td>\n  </tr>\n  <tr>\n\t\t<td><i>value</i></td>\n    <td>Raw numeric value of the above price</td>\n  </tr>\n  <tr>\n    <td>tax_label</td>\n    <td>Tax label (VAT, sales tax, etc.) displayed to customers</td>\n  </tr>\n  \n  <tr>\n    <td>price_range</td>\n    <td><a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price-range\">See Price Range Object</a> </td>\n\t</tr>   \n   <tr>\n\t\t <td><b>map_price</b></td>\n    <td>Minimum advertised price (Includes <i>formatted</i> and <i>value</i> properties)</td>\n  </tr>\n  <tr>\n\t\t<td><i>formatted</i></td>\n    <td>String representation of the above price, including currency formatting</td>\n  </tr>\n  <tr>\n\t\t<td><i>value</i></td>\n    <td>Raw numeric value of the above price</td>\n  </tr>\n</table>\n\n<b>Available through:</b> \n\n<b>Object/Property:</b> `{{product.price}}`"
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "Common object"
                                }
                              }
                            },
                            {
                              "title": "Price ",
                              "route": {
                                "path": "/price"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Price</h1>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "<b>Description:</b> Exposes price- and currency-related properties in both raw numeric, and formatted string, formats. \n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>formatted</td>\n    <td>String representation of the price, including currency formatting</td>\n  </tr>\n  <tr>\n    <td>value</td>\n    <td>Raw numeric value of the price</td>\n  </tr>\n</table>\n\n<b>Available through:</b>\n\n<b>Common Object:</b> <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/common-product-card-model\">Common Product Card Model</a>\n\n<b>Object:</b> `{{category.shop_by_price}}`"
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "Common Object"
                                }
                              }
                            },
                            {
                              "title": "Price Range ",
                              "route": {
                                "path": "/price-range"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Price Range</h1>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "<b>Description:</b> For products with several variants with different prices, a price range is available which exposes the minimum and maximum variant price.\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td> <A NAME=\"with_tax\"></a> min</td>\n    <td>The minimum variant price for the product, in the form of a <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/common-product-card-model\">Catalog Price Common Object</a></td>\n  </tr>\n  <tr>\n    <td> <A NAME=\"without_tax\"></a> max</td>\n    <td>The maximum variant price for the product, in the form of a <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/common-product-card-model\">Catalog Price Common Object</a>\n</td>\n  </tr>\n</table>\n\n<b>Available through:</b>\n\n<b>Object/Property:</b><code>{{product.price}</code></a> "
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "Common Object"
                                }
                              }
                            },
                            {
                              "title": "Stencil Image",
                              "route": {
                                "path": "/stencil-image"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Stencil Image</h1>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "<b>Description:</b> Exposes a URL and an \"alt\" string for images used in the Stencil framework\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>data</td>\n    <td>Internal URL to product or category image</td>\n  </tr>\n  <tr>\n    <td>alt</td>\n    <td>Corresponding text to display for missing images, accessible screen readers, etc.</td>\n  </tr>\n</table>\n\n<b>Available through:</b> \n\n<b>Stencil Handlebars Helper:</b> `{{getImage}}`\n\n<b>Common Object:</b> <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/common-product-card-model\">Common Product Card Model</a> \n\n<b>Object/Property:</b> `{{category.image}}`\n\n<b>Arrays/Elements:</b> `{{product.options.image}}`, `{{product.images}}`, `{{downloads.items.images}}`, `{{downloads.items.thumbnail}}`, `{{category.subcategories.image}}`, `{{order.items.image}}`, `{{customer.orders.image}}`, `{{brands.image}}`, `{{order.items.shipping_rows.image}}` \n\n<b> Usage Example: </b> \n\n`{{getImage image \"thumbnail\"}}`"
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": " Common Object"
                                }
                              }
                            },
                            {
                              "title": "Common Product Card Model",
                              "route": {
                                "path": "/common-product-card-model"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Common Product Card Model</h1>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "<b>Description:</b> A model for a product’s basic, primary properties. Typically used for list components that show multiple products, each in its own \"card\" or panel.\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>ID of the product </td>\n  </tr>\n  <tr>\n    <td>sku</td>\n    <td>The product's SKU (stock keeping unit)/product code, as a string; if the SKU field is not populated, then null\n </td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Name of the product</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL to product detail page for the product</td>\n  </tr>\n  <tr>\n    <td>availability</td>\n    <td>Typical shipping time for the product; used to populate \"Usually ships within…\" fields</td>\n  </tr>\n  <tr>\n    <td>rating</td>\n    <td>Product’s rating</td>\n  </tr>\n  <tr>\n    <td>ratings</td>\n    <td>Number of reviews on which the rating is based</td>\n  </tr>\n  <tr>\n\t\t<td><b>brand</b></td>\n    <td>Brand properties for the product (includes the name property</td>\n  </tr>\n  <tr>\n    <td><i>name</i></td>\n    <td>Product’s brand name</td>\n  </tr>\n  <tr>\n    <td>add_to_cart_url</td>\n    <td>URL that adds this product to customer’s cart</td>\n  </tr>\n  <tr>\n    <td>price</td>\n    <td class=\"\">References the <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/catalog-price\">catalog price object</a>, to access price properties in both raw-numeric and formatted/string formats</td>\n  </tr>\n  <tr>\n    <td>summary</td>\n    <td>Summary description of the product</td>\n  </tr>\n  <tr>\n    <td>image</td>\n    <td>Default image for the product, in <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/stencil-image\">Stencil image format</a> <!-- <a href=\"/docs/handlebars-image-helpers\">Stencil image format</a> --> </td>\n  </tr>\n  <tr>\n    <td>images</td>\n    <td>Array of a product's images, in <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/stencil-image\">Stencil image format</a>; currently limited to 5 images </td>\n  </tr>\n  <tr>\n    <td>date_added</td>\n    <td>Date the product was added to this BigCommerce storefront</td>\n  </tr>\n  <tr>\n    <td>pre_order</td>\n    <td>Product’s availability for pre-order</td>\n  </tr>\n  <tr>\n    <td>release_date</td>\n    <td>Release date, if the product is set to pre-order status</td>\n  </tr>\n  <tr>\n    <td>show_cart_action</td>\n    <td>Boolean that indicates whether the product is available for purchase</td>\n  </tr>\n  <tr>\n    <td>has_options</td>\n    <td>Boolean that indicates whether customer is required to specify options when ordering the product</td>\n  </tr>\n  \n  <tr>\n    <td>stock_level</td>\n    <td>If inventory tracking is turned on: The number of items available for sale (0 or more). If inventory tracking is turned off: A \"null\" string. </td>\n  </tr>\n     \n  <tr>\n    <td>low_ stock_level</td>\n    <td>If inventory tracking is turned on: Sets a threshold low-stock level. You can use conditional logic to display a \"limited availability\" badge if the <code>stock_level</code> property's value falls below this threshold. If inventory tracking is turned off: A \"null\" string. </td>\n  </tr>\n   \n  <tr>\n    <td>qty_in_cart</td>\n    <td>Quantity of this item in the customer’s cart</td>\n  </tr>\n  <tr>\n    <td>out_of_stock_message</td>\n    <td>Text to display when the product is out of stock</td>\n  </tr>\n  \n  <tr>\n\t\t<td><b>custom_fields</b></td>\n    <td>Array of <a href=\"https://support.bigcommerce.com/articles/Public/Custom-Fields\">custom fields</a> for this product; custom fields can be used for purposes like: alternate brand name, merchandising title for the product, product type, \"gift idea\" indicator, etc.\n</td>\n  </tr>\n\n  <tr>\n\t\t<td><i>id</i></td>\n    <td>Unique (integer) identifier for this custom field</td>\n  </tr>\n\n  <tr>\n    <td><i>name</i></td>\n    <td>Name of this custom field</td>\n  </tr>\n\n  <tr>\n    <td><i>value</i></td>\n    <td>Value for this custom field</td>\n  </tr>\n</table>\n\n<b>Available through:</b>\n\n<b>Object:</b> <code>{{comparisons}} </code> \n\n<b>Arrays/Elements:</b> <code>{{product.related_products}}, {{product.similar_by_views}}, {{category.products}}, {{cart.suggested_products}}, {{customer.recently_viewed_products}} </code>\n\n<!-- :\"Common Product Card Model\" moved from \"Product Objects\" page -->"
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": " Common Object"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "title": "Other Objects/Properties",
                        "route": {
                          "path": "/new-subpage"
                        },
                        "data": {
                          "children": [
                            {
                              "title": "Other Objects & Properties ",
                              "route": {
                                "path": "/other-objects-and-properties-overview"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Other Objects and Properties Overview</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#other-objects_other-objects-and-props\">Other Objects and Properties Overview</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Other Objects & Properties Overview\n\nThis section covers the following objects. Note that in this section, each of the following reference pages contains multiple objects. For example, the Product Objects reference page contains all objects related to products not already covered, such as :\n\n\nProduct Objects\nCategory Objects\nBrand Objects\nCart Objects\nCustomer Objects\nBlog Objects\nForms Objects\n</ul>"
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "Overview"
                                }
                              }
                            },
                            {
                              "title": "Product",
                              "route": {
                                "path": "/product-objects"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Product Objects</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#product-objects_product\">Product</a></li>\n    <li><a href=\"#product-objects_product-reviews\">Product Reviews</a></li>\n    <li><a href=\"#product-objects_related-products\">Related Products</a></li>\n    <li><a href=\"#product-objects_similar-products\">Similar Products by Customer Views</a></li>\n    <li><a href=\"#product-objects_product-videos\">Product Videos</a></li>\n    <li><a href=\"#product-objects_compare\">Compare</a></li>\n    <li><a href=\"#product-objects_download\">Download Item</a></li>\n    <li><a href=\"#product-objects_product-other\">Product Other Details</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "callout",
                                    "data": {
                                      "body": "Also see Common Objects > Common Product Card Model, which documents the product object returned in collections.",
                                      "title": "Other Product Objects"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Product\n\n<b>Description:</b> Default property that provides detailed product data. Called on the default `<theme-name>/templates/pages/product.html`and `<theme-name>/templates/pages/amp/product.html` templates, and on several partials in the `<theme-name>/templates/components/` subdirectory: \n\n* `account/returns-list.html`, \n* `cart/item-options.html`, \n* `products/add-to-cart.html`, \n* `products/event-date.html`, \n* `products/modals/writeReview.html`, \n* `products/price.html`, \n* `products/product-view.html`,\n* `amp/products/product-options.html`, \n* `amp/products/product-view.html`, and \n* `amp/products/product-view-details.html`.\n\n<b>Handlebars Expression:</b> `{{product}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>Unique ID for the product</td>\n  </tr>\n  <tr>\n    <td>sku</td>\n    <td>Default product variant when no options are selected</td>\n  </tr>\n   <tr>\n    <td>mpn</td>\n    <td>Manufacturer Part Number</td>\n  </tr>\n   <tr>\n    <td>gtin</td>\n    <td>Global Trade Item Number</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL to the product detail page</td>\n  </tr>\n  <tr>\n    <td>upc</td>\n    <td>Optional UPC code for the product</td>\n  </tr>\n  <tr>\n    <td>title</td>\n    <td>Displayed name of the product</td>\n  </tr>\n  <tr>\n    <td>description</td>\n    <td>(HTML) description of the product</td>\n  </tr>\n  <tr>\n    <td>detail_messages</td>\n    <td>Status messages for display at the top of the product page</td>\n  </tr>\n  <tr>\n    <td>min_purchase_quantity</td>\n    <td>Minimum quantity that can be purchased at once</td>\n  </tr>\n  <tr>\n    <td>max_purchase_quantity</td>\n    <td>Maximum quantity that can be purchased at once</td>\n  </tr>\n  <tr>\n    <td>can_purchase</td>\n    <td>Boolean that indicates whether the product is available for purchase</td>\n  </tr>\n  <tr>\n    <td>out_of_stock</td>\n    <td>Boolean that indicates whether the product is out of stock</td>\n  </tr>\n  <tr>\n    <td>out_of_stock_message</td>\n    <td>Merchant-defined label to display when a product is out of stock</td>\n  </tr>\n  <tr>\n    <td>cart_url</td>\n    <td>URL to the customer’s shopping cart</td>\n  </tr>\n  <tr>\n    <td>add_to_wishlist_url</td>\n    <td>URL to add the product to the customer’s wishlist</td>\n  </tr>\n  <tr>\n    <td><div id=\"customizations\"></id>customizations </td>\n    <td>Product customizations (for example, a T-shirt size); these correspond to <a href=\"https://support.bigcommerce.com/articles/Public/What-are-configurable-fields-and-how-do-I-create-them\">configurable fields</a></nobr> and <a href=\"https://support.bigcommerce.com/articles/Public/Product-Options-Text-Fields#numbers\">numeric-text</a> <a href=\"https://support.bigcommerce.com/articles/Public/Adding-Product-Options\">product options</a> in the BigCommerce control panel</td>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>Customization ID</td>\n  </tr>\n  <tr>\n    <td>display_name</td>\n    <td>Label for this customization, as displayed to customers</td>\n  </tr>\n  <tr>\n    <td>type</td>\n    <td>Customization type [<code>text</code>|<code>textarea</code>|<code>NumbersOnlyText</code>|<code>checkbox</code>|<code>select</code>|<code>file</code>]</td>\n  </tr>\n  <tr>\n    <td>required</td>\n    <td>Boolean value that indicates whether customer must specify this customization in order to buy the product</td>\n  </tr>\n  <tr>\n    <td>condition</td>\n    <td>Boolean value indicating whether to display this product's condition (new, used, or refurbished)</td>\n  </tr>\n  <tr>\n    <td>prefill</td>\n    <td>Optional string value to prefill this field</td>\n  </tr>\n  <tr>\n    <td>&lt;values&gt;</td>\n    <td>For <code>select</code> type, array of strings listing the available options</td>\n  </tr>\n  <tr>\n    <td>\n      <!-- <span class=\"inline-code\">&lt;textarea</span>=\"\"> -->\n      <code>&lt;file_types&gt;</code></td>\n    <td>For <code>file</code> type, string representing the types of allowed files</td>\n  </tr>\n  <tr>\n    <td><code>&lt;file_size&gt;</code></td>\n    <td>For <code>file</code> type, string representing the maximum file size allowed</td>\n  </tr>\n  \n<!-- Inserted new properties here for NumbersOnlyText type, MERC-159: -->\n  <tr>\n    <td>integer_only</td>\n    <td>For <code>NumbersOnlyText</code> type, boolean value indicating whether to restrict customer's entries to whole numbers only</td>\n  </tr>\n  <tr>\n    <td>default</td>\n    <td>For <code>NumbersOnlyText</code> type, optional string representing a default number that customers can see and overwrite</td>\n  </tr>\n  <tr>\n    <td>limit_input</td>\n    <td>For <code>NumbersOnlyText</code> type, boolean indicating whether to impose any limits on the numeric values that customers can enter as strings</td>\n  </tr>\n  <tr>\n    <td>limit_input_option</td>\n    <td>For <code>NumbersOnlyText</code> type and <code>limit_input</code> = <code>true</code>, the type of limit: <code>lowest</code> or <code>highest</code></td>\n  </tr>\n  <tr>\n    <td>lowest</td>\n    <td>For <code>NumbersOnlyText</code> type and <code>limit_input</code> = <code>true</code>,  minimum allowable value; a value of <code>0</code> imposes no limit</td>\n  </tr>\n  <tr>\n    <td>highest</td>\n    <td>For <code>NumbersOnlyText</code> type and <code>limit_input</code> = <code>true</code>,  maximum allowable value; a value of <code>0</code> imposes no limit</td>\n  </tr>\n<!-- End of customizations child object -->\n  \n<!-- Inserted new child object here for swatches, MERC-81: -->\n  <tr>\n    <td><a name=\"swatch-options\"></a>options</td>\n    <td>Options for color and pattern swatches displayed for this product</td>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>Product ID</td>\n  </tr>\n  <tr>\n    <td>type</td>\n    <td>String indicating size, color, swatch, etc.</td>\n  </tr>\n  <tr>\n    <td>display_name</td>\n    <td>Option Name displayed in control panel for this option</td>\n  </tr>\n  <tr>\n    <td>required</td>\n    <td>Boolean value that indicates whether customer must specify this option in order to buy the product</td>\n  </tr>\n  <tr>\n    <td>condition</td>\n    <td>Boolean value indicating whether to display this product's condition (new, used, or refurbished)</td>\n  </tr>\n  <tr>\n    <td>values</td>\n    <td>Array of data (color) or image (pattern) values</td>\n  </tr>\n  <tr>\n    <td>label</td>\n    <td>Internal label for this value (not normally displayed to shoppers)</td>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>ID for this value, unique within this values array</td>\n  </tr>\n  <tr>\n    <td>selected</td>\n    <td>Boolean indicating whether this value is preselected as the option's default value, upon page load</td>\n  </tr>\n  <tr>\n    <td>data</td>\n    <td>Each <code>values</code> member can contain either a <span class=\"inline-code\">data</span> or an <span class=\"inline-code\">image</span> member; <span class=\"inline-code\">data</span> denotes a color</td>\n  </tr>\n  <tr>\n    <td><color value></td>\n    <td>Hex code for this color</td>\n  </tr>\n  <tr>\n    <td>image</td>\n    <td>\n      Each <code>values</code> member can contain either a <code>data</code> or an <code>image</code> member; <code>image</code> denotes a pattern, in <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/stencil-image\">Stencil image object format</a>. (Note: This <code>image</code> value replaces the <code>{{pattern}}</code> property, which was limited to 18 x 18 pixels, and will be deprecated.)</td>\n  </tr>\n<!-- ^ Inserted new object above for swatches, https://jira.bigcommerce.com/browse/MERC-81 -->\n  \n  <tr>\n    <td><a name=\"price\"></a> price </td>\n    <td>References the <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price\">catalog price object</a>, to access the product’s price</td>\n  </tr>\n  <tr>\n    <td>weight</td>\n    <td>Weight of the default variant</td>\n  </tr>\n  <tr>\n    <td>height</td>\n    <td>Height of the default variant</td>\n  </tr>\n  <tr>\n    <td>width</td>\n    <td>Width of the default variant</td>\n  </tr>\n  <tr>\n    <td>depth</td>\n    <td>Depth of the default variant</td>\n  </tr>\n  <tr>\n    <td>rating</td>\n    <td>Rating for the product</td>\n  </tr>\n  <tr>\n    <td>num_reviews</td>\n    <td>Number of reviews the product has</td>\n  </tr>\n  <tr>\n    <td>bulk_discount_rates </td>\n    <td>List of discount rates for the current product</td>\n  </tr>\n  <tr>\n    <td>condition</td>\n    <td>Condition of the product</td>\n  </tr>\n  <tr>\n    <td>stock_level</td>\n    <td>Current stock level of the product; will be null if storefront stock display is disabled by the merchant, or if the product lacks inventory tracking</td>\n  </tr>\n  <tr>\n    <td>shipping</td>\n    <td>Shipping properties for the product</td>\n  </tr>\n  <tr>\n    <td>fixed</td>\n    <td>Boolean that indicates whether the product’s shipping price is fixed</td>\n  </tr>\n  <tr>\n    <td>price</td>\n    <td><a href=\"https://stencil.bigcommerce.com/docs/price-common-object\">Price object</a> that defines the shipping cost for this product (if shipping cost is fixed)</td>\n  </tr>\n  <tr>\n    <td>calculated</td>\n    <td>Boolean that indicates whether the product’s shipping price is calculated at checkout</td>\n  </tr>\n  <tr>\n    <td>stock_label</td>\n    <td>Shows whether the product stock level is for on-hand merchandise or pre-orders.</td>\n  </tr>\n  <tr>\n    <td>availability</td>\n    <td>Optional availability message set by the merchant</td>\n  </tr>\n  <tr>\n    <td>pre_order</td>\n    <td>Availability of the product for pre-order</td>\n  </tr>\n  <tr>\n    <td>release_date</td>\n    <td>Release date, if the product is set to pre-order status</td>\n  </tr>\n  <tr>\n    <td>error_message</td>\n    <td>Potential error on the page (e.g.: out of stock, form validations)</td>\n  </tr>\n  <tr>\n    <td>gift_wrapping</td>\n    <td>Whether or not gift wrapping is enabled</td>\n  </tr>\n  <tr>\n    <td>brand</td>\n    <td>Brand of the product</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Displayed name of the brand</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL to the brand page</td>\n  </tr>\n  <tr>\n    <td>main_image</td>\n    <td>Primary image to display when the product details page loads</td>\n  </tr>\n  <tr>\n    <td>images</td>\n    <td>List of all images for this product, in <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/stencil-image\">Stencil image format</a> (as configured in config.json; used with the <code>{{getImage}}</a></code> Handlebars helper)</td>\n  </tr>\n  <tr>\n    <td>pinterest_js</td>\n    <td>Property to display Pinterest button</td>\n  </tr>\n  <tr>\n    <td>facebook_like</td>\n    <td>Property to display Facebook Like button</td>\n  </tr>\n  <tr>\n    <td>warranty</td>\n    <td>Optional warranty text set by the merchant</td>\n  </tr>\n  <tr>\n    <td>search_keywords</td>\n    <td>Optional search keywords that merchants may enter in the control panel’s \"Add a Product\" or “Edit a Product” page, to characterize the product in meta tags and storefront searches </td>\n  </tr>\n\n  <tr>\n    <td>tags</td>\n    <td>Keywords by which this product can also be identified</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Name of the tag</td>\n  </tr>\n  \n  <tr>\n    <td>custom_fields</td>\n    <td>Extra details to display about the product </td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Custom field name</td>\n  </tr>\n  <tr>\n    <td>value</td>\n    <td>Custom field value</td>\n  </tr>\n  <tr>\n    <td>event_date</td>\n    <td>Property to handle a date-based product</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Name of the event</td>\n  </tr>\n  <tr>\n    <td> date_start</td>\n    <td>Event’s start date range</td>\n  </tr>\n  <tr>\n    <td> date_end</td>\n    <td>Event’s end date range</td>\n  </tr>\n  <tr>\n    <td> earliest_year</td>\n    <td>Event’s starting year</td>\n  </tr>\n  <tr>\n    <td>latest_year</td>\n    <td>Event’s ending year</td>\n  </tr>\n    <td>type</td>\n    <td>Type of event</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "product-objects_product"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Product Reviews\n\n<b>Description:</b> A list of reviews related to this product. When filtering/limiting, reviews' default sorting is by review id, from lowest to highest. (Called on the default <code>&lt;theme-name&gt;/templates/pages/product.html</code><code>&lt;theme-name&gt;/templates/components/</code> subdirectory: \n* <code>products/product-view.html</code>,\n* <code>products/modals/writeReview.html</code>, and \n* <code>amp/products/product-view.html</code>.)\n\n<b>Handlebars Expression:</b> <code>{{product.reviews}}</code>\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>start</td>\n    <td>The review that starts the current page of reviews</td>\n  </tr>\n  <tr>\n    <td>total</td>\n    <td>Total number of reviews</td>\n  </tr>\n  <tr>\n    <td>end</td>\n    <td>Last review on this page</td>\n  </tr>\n  <tr>\n    <td>show_review_email</td>\n    <td>Boolean that indicates whether the Write Review form should have an input field for the reviewer’s e-mail address</td>\n  </tr>\n  <tr>\n    <td>captcha</td>\n    <td>reCAPTCHA public key (for validating human versus bot visitors)</td>\n  </tr>\n  <tr>\n    <td>pagination</td>\n    <td>References the pagination model</td>\n  </tr>\n  <tr>\n    <td>list </td>\n    <td>List of reviews</td>\n  </tr>\n  <tr>\n    <td> rating</td>\n    <td>Product’s rating (1–5 stars)</td>\n  </tr>\n  <tr>\n    <td> title</td>\n    <td>Title of the review</td>\n  </tr>\n  <tr>\n    <td> date</td>\n    <td>Date the product was reviewed</td>\n  </tr>\n  <tr>\n    <td> text</td>\n    <td>Text content of the product review</td>\n  </tr>\n  <tr>\n    <td> name</td>\n    <td>Name of the person providing the review</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "product-objects_product-reviews"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Related Products\n\n<b>Description:</b> A list of products related to this product. (Called on the default <NOBR><span class=\"inline-code\">&lt;theme-name&gt;/templates/components/products/tabs.html</span></nobr> partial.)<br>\n\n<b>Handlebars Expression:</b> <code>{{product.related_products}}</code><br>\n\n<b>Object Properties: </b>References the <a href=\"/docs/common-product-card-model\">product card model</a>.<br><br>\n",
                                    "header": {
                                      "anchor": "product-objects_related-products"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Similar Products by Customer Views\n\n<b>Description:</b> A list of products similar to a given product, based on customer’s product browsing history. (Called on the default <code>&lt;theme-name&gt;/templates/components/products/tabs.html</code> partial.)\n\n<b>Handlebars Expression:</b> <code>{{product.similar_by_views}}</code>\n\n<b>Object Properties:</b> References the <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/common-product-card-model\">product card model</a>.\n",
                                    "header": {
                                      "anchor": "product-objects_similar-products"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Product Videos\n\n<b>Description:</b> A list of videos for a given product. (Called on the default <code>&lt;theme-name&gt;/templates/pages/product.html</code> template, and on the <code>&lt;theme-name&gt;/templates/components/amp/products/product-view.html</code> partial.)\n\n<b>Handlebars Expression:</b> <code>{{product.videos}}</code>\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>ID of the product video</td>\n  </tr>\n  <tr>\n    <td>title_short</td>\n    <td>Short title of the product video</td>\n  </tr>\n  <tr>\n    <td>title_long</td>\n    <td>Long title of the product video</td>\n  </tr>\n  <tr>\n    <td>description_long</td>\n    <td>Long description of the product video</td>\n  </tr>\n  <tr>\n    <td>description_short</td>\n    <td>Short description of the product video</td>\n  </tr>\n  <tr>\n    <td>length</td>\n    <td>Duration of the product video</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "product-objects_product-videos"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Compare\n\n<b>Description:</b> Property to display an array of products on product comparison pages. (Called on the default <code>&lt;theme-name&gt;/templates/pages/compare.html</code> template.)\n\n<b>Handlebars Expression:</b> <code>{{comparisons}}</code>\n\n<b>Object Properties:</b> References the <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/common-product-card-model\">product card model</a>, plus the additional fields listed here:<br>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>availability</td>\n    <td>How long this product usually takes to ship</td>\n  </tr>\n  <tr>\n    <td>brand</td>\n    <td>Object containing brand data for this product</td>\n  </tr>\n  <tr>\n    <td>url</span></td>\n    <td>Brand URL for this product</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Brand name for this product</td>\n  </tr>\n  <tr>\n    <td>remove_url</td>\n    <td>URL to remove this product/column from the comparison</td>\n  </tr>\n  <tr>\n    <td>custom_fields</td>\n    <td>Array of additional product details – size, color, book's ISBN, DVD's release date, etc. – as name/value pairs</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Displayed name for this custom field</td>\n  </tr>\n  <tr>\n    <td>value</td>\n    <td>Value for this custom field’s entry</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "product-objects_compare"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Download Item\n\n<b>Description:</b> Property for digital (non-physical) products. (Called on the default <code>&lt;theme-name&gt;/templates/pages/account/download-item.html</code>template.)\n\n<b>Handlebars Expression:</b> <code>{{downloads}}</code>\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>order_id</td>\n    <td>ID for this order</td>\n  </tr>\n  <tr>\n    <td>product_name</td>\n    <td>Name of the digital product</td>\n  </tr>\n  <tr>\n    <td>items</td>\n    <td>Array of product components</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Name of this digital item</td>\n  </tr>\n  <tr>\n    <td>expired</td>\n    <td>Boolean indicating whether customer’s access/subscription to this item has expired</td>\n  </tr>\n  <tr>\n    <td>days_remaining</td>\n    <td>Number of days left in customer’s access/subscription to this item</td>\n  </tr>\n  <tr>\n    <td>downloads_remaining</td>\n    <td>Number of times customer may download this item</td>\n  </tr>\n  <tr>\n    <td>size</td>\n    <td>File size of this digital item (string, responsively formatted as: 240 KB, 1.1 MB, etc.)</td>\n  </tr>\n  <tr>\n    <td>description</td>\n    <td>Description (if entered by merchant) for this item</td>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>ID for this item</td>\n  </tr>\n  <tr>\n    <td>images</td>\n    <td>List of all images for the product associated with this list of downloadable items (in <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/stencil-image\">Stencil image format</a>)</td>\n  </tr>\n  <tr>\n    <td>thumbnail</td>\n    <td>\"Primary\" image for the product associated with this list of downloadable items (in <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/stencil-image\">Stencil image format</a>)</td>\n  </tr>\n</table>\n",
                                    "header": {
                                      "anchor": "product-objects_download"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Product Other Details\n\n<b>Description:</b> Property to display custom product details (such as a book's ISBN code, a DVD's release date, etc.). (Called on the default <code>&lt;theme-name&gt;/templates/components/products/product-view.html</code> and <code>&lt;theme-name&gt;/templates/components/amp/products/product-view-details.html</code> partials.)\n\n<b>Handlebars Expression:</b> <code>{{product.custom_fields}}</code>\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Displayed name for this category of information</td>\n  </tr>\n  <tr>\n    <td>value</td>\n    <td>Displayed value for this product’s entry</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "product-objects_product-other"
                                    }
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "objects"
                                }
                              }
                            },
                            {
                              "title": "Category",
                              "route": {
                                "path": "/category-objects"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Category Objects</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#category_category\">Category</a></li>\n    <li><a href=\"#category_category-products\">Category Products</a></li>\n    <li><a href=\"#category_category-shop\">Category Shop by Price</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Category\n\n<b>Description:</b> The category object for the page calling the object. When retrieving a collection of categories, default sorting is by category <code>id</code>, from lowest to highest. (Called on the default <code>&lt;theme-name&gt;/templates/pages/category.html</code> template, and on several partials in the <code>&lt;theme-name&gt;/templates/components/</code> subdirectory: <code>category/shop-by-price.html</code>,<code>category/sidebar.html</code>, and <code>amp/category/subcategories.html</code>)\n\n<b>Handlebars Expression:</b> `{{category}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>Unique ID for the category </td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Merchant-defined category name</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL for the category-specific page</td>\n  </tr>\n  <tr>\n    <td>description</td>\n    <td>Merchant-defined description of the category</td>\n  </tr>\n  <tr>\n    <td>image</td>\n    <td>Image representing this category, in <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/stencil-image\">Stencil image format</a></td>\n  </tr>\n  \n  <tr>\n    <td>subcategories</td>\n    <td>List of any child categories</td>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td class=\"\">Unique ID for the subcategory </td>\n  </tr>\n<!-- :New for MERC-268 -->\n  <tr>\n    <td>name</td>\n    <td class=\"\">Name of the subcategory</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL to the subcategory</td>\n  </tr>\n\n  <tr>\n    <td>description</td>\n    <td class=\"\">Merchant-defined description of the subcategory</td>\n  </tr>\n  <tr>\n    <td>image</td>\n    <td>Image representing this subcategory, in <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/stencil-image\">Stencil image format</a></td>\n  </tr> \n  <tr>\n    <td>product_count</td>\n    <td>Number of products in the subcategory. (Counts at the current level only &ndash; not recursive to deeper levels.)</td>\n  </tr>\n  <tr>\n  \t<td>detail_messages</td>\n    <td>Message displayed when a product is out of stock, and inventory settings are configured to redirect to a category: \"Sorry, the product you tried to view is currently out of stock, here are some similar products we have available.\" (This phrasing is set by the BigCommerce App.)</td>\n  </tr>\n  <tr>\n    <td>show_compare</td>\n    <td>Boolean that defines whether to show controls for product comparison</td>\n  </tr>\n  <tr>\n    <td>show_add_to_cart</td>\n    <td>Boolean that defines whether to show an Add to Cart button for this category</td>\n  </tr>\n  <tr>\n    <td>total_products</td>\n    <td>Count of the number of products in the category</td>\n  </tr>\n  <tr>\n    <td>faceted_search_enabled</td>\n    <td>Boolean that defines whether product-filtering search is enabled for the store</td>\n  </tr>\n  <tr>\n    <td>facets</td>\n    <td>Available search facets</td>\n  </tr>\n  <tr>\n    <td>pagination</td>\n    <td>References the pagination model</td>\n  </tr>\n  <tr>\n    <td>selected</td>\n    <td>Selected search facets</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "#category_category"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Category Products\n\n<b>Description:</b> A list of products associated with this category. (Called on the default <code>&lt;theme-name&gt;/templates/pages/category.html</code>template, and on the <code>&lt;theme-name&gt;/templates/components/category/product-listing.html</code> partial.)\n\n<b>Handlebars Expression:</b> `{{category.products}}`\n\n<b>Object Properties:</b> References the product card model.",
                                    "header": {
                                      "anchor": "category_category-products"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Category Shop by Price \n\n<b>Description:</b> A list of price ranges, to enable customers to set price limits within a product category. Called on the default<code>&lt;theme-name&gt;/templates/components/category/shop-by-price.html</code> and <code>&lt;theme-name&gt;/templates/components/category/sidebar.html</code> partials.)\n\n<b>Handlebars Expression:</b> `{{category.shop_by_price}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL of price-filtered product results for this category</td>\n  </tr>\n  <tr>\n    <td>low</td>\n    <td><a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price\">Price object</a> that defines the minimum price boundary </td>\n  </tr>\n  <tr>\n    <td>high</td>\n    <td><a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price\">Price object</a> that defines the maximum price boundary</td>\n  </tr>\n  <tr>\n    <td>selected</td>\n    <td><a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price\">Price object</a> that defines the currently selected price range</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "category_category-shop"
                                    }
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "objects"
                                }
                              }
                            },
                            {
                              "title": "Brand",
                              "route": {
                                "path": "/brand-objects"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Brand Objects</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#brand_brand-list\">Brand List</a></li>\n    <li><a href=\"#brand_brand\">Brand</a></li>\n    <li><a href=\"#brand_shop-by-brand\">Category Shop by Price</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Brand List\n\n<b>Description:</b> A list of brands with their basic data. Default sorting is by brand id, from lowest to highest. (Called on the default `<theme-name>/templates/pages/brands.html` template.)\n\n<b>Handlebars Expression:</b> `{{brands}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL to this brand’s products listing</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Name of the brand</td>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>Internal identifier for the brand </td>\n  </tr>\n  <tr>\n    <td>image</td>\n    <td>Stencil image object (if any) for the brand</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "brand_brand-list"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## <div id=\"Brand\"></a>Brand\n\n<b>Description:</b> The brand object for the page calling the object. (Called on the default `<theme-name>/templates/pages/brand.html` template.)\n\n<b>Handlebars Expression:</b> `{{brand}}`\n\n<b>Object Properties:</b>\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>show_compare</td>\n    <td>Boolean corresponding to merchant’s control panel selection whether or not to enable product comparisons</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL of the brand page</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Name of the brand </td>\n  </tr>\n  <tr>\n    <td>pagination</td>\n    <td>References the pagination model</td>\n  </tr>\n  <tr>\n    <td>image</td>\n    <td>Image used to visually represent the brand (i.e., logo)</td>\n  </tr>\n  <tr>\n    <td>faceted_search_enabled</td>\n    <td>Boolean that defines whether product-filtering search is enabled for the store</td>\n  </tr>\n  <tr>\n    <td>facets</td>\n    <td>A list of all possible search filters for this brand</td>\n  </tr>\n  <tr>\n    <td>products</td>\n    <td>An array of product card models</a></td>\n  </tr>\n  <tr>\n    <td>selected</td>\n    <td>An array of selected facets</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "brand_brand"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Shop by Brand\n\n<b>Description:</b> Objects to enable customers to shop by brand. Returns top 10 brands, by product count. (Called on the default `<theme-name>/templates/components/brand/sidebar.html` and `<theme-name>/templates/components/common/footer.html` partials.)\n\n<b>Handlebars Expression:</b> `{{shop_by_brand}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>links</td>\n    <td>Array of links to individual brands</td>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>ID for this brand</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL for this brand</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Name of this brand</td>\n  </tr>\n  <tr>\n    <td>count</td>\n    <td>Number of products matching this brand</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "brand_shop-by-brand"
                                    }
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "Objects"
                                }
                              }
                            },
                            {
                              "title": "Cart",
                              "route": {
                                "path": "/cart-objects"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Cart Objects</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#cart_cart\">Cart</a></li>\n    <li><a href=\"#cart_cart-items\">Cart Items</a></li>\n    <li><a href=\"#cart_strikeout\">Strikeout Pricing Example</a></li>\n    <li><a href=\"#cart_cart-status\">Cart Status Message</a></li>\n    <li><a href=\"#cart_suggested\">Suggested Products</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Cart\n\n<b>Description:</b> The cart-specific properties for the current session<br>\n\n<b>Handlebars Expression:</b> `{{cart}}`\n\n<b>Object Properties:</b><br><br>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td class=\"\">quantity</td>\n    <td class=\"\">Total number of items in the cart</td>\n  </tr>\n  <tr>\n    <td class=\"\">additional_checkout_buttons</td>\n    <td class=\"\">Generates checkout buttons for third-party payments (PayPal, Google Checkout, etc.)</td>\n  </tr>\n  <tr>\n    <td class=\"\">show_primary_checkout_button</td>\n    <td class=\"\">Boolean that determines whether to show a checkout button</td>\n  </tr>\n  <tr>\n    <td class=\"\">show_multiple_address_shipping</td>\n    <td class=\"\">Boolean: If >1 physical items are in the cart, and checkout button is displayed: whether to also display the \"Ship to multiple addresses\"/\"Multiple Shipping Addresses” user option</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">discount</td>\n    <td class=\"\">Discount being applied to the cart in the current session</td>\n  </tr>\n  <tr>\n    <td class=\"\">gift_wrapping_cost</td>\n    <td class=\"\"><a href=\"/docs/price-common-object\">Price object</a> that defines the cost associated with adding gift wrapping to the items in the cart</td>\n  </tr>\n  <tr>\n    <td class=\"\">sub_total</td>\n    <td class=\"\"><a href=\"/docs/price-common-object\">Price object</a> that defines the total cost of all the items in the cart. Might or might not include tax, based on the tax display settings the merchant has configured. Excludes shipping, discounts, and gift wrapping.</td>\n  </tr>\n  <tr>\n    <td class=\"\">grand_total</td>\n    <td class=\"\"><a href=\"/docs/price-common-object\">Price object</a> that defines the total cost of all the items in the cart. <NOBR>Incorporates estimated</nobr> shipping, discounts, taxes, and gift wrapping.</td>\n  </tr>\n  <tr>\n    <td class=\"\">shipping_handling</td>\n    <td class=\"\">Current configuration of the shipping estimator for this session’s current cart; will be null/undefined if the cart contains no physical products</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">handling_cost</span></td>\n    <td class=\"\"><a href=\"/docs/price-common-object\">Price object</a> that defines the handling cost for the carted items (if any)</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">show_estimator</span></td>\n    <td class=\"\">Boolean indicating whether the merchant wants to show the shipping estimator to customers</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent2\"> countries</span></td>\n    <td class=\"\">Countries available to ship to</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent2\"> states</span></td>\n    <td class=\"\">List of states/provinces/regions for the country</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent2\"> selected_state</span></td>\n    <td class=\"\">The state/province/region that the customer selected for the shipping estimate</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"><span class=\"indent2\"> selected_zip</span></td>\n    <td class=\"\">The ZIP/postal code that the customer selected for the shipping estimate</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"><span class=\"indent2\"> selected_city</span></td>\n    <td class=\"\">The city/town that the customer selected for the shipping estimate</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\"><span class=\"indent2\"> shipping_cost</span></td>\n    <td class=\"\"><a href=\"/docs/price-common-object\">Price object</a> that defines shipping cost</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent2\"> provider</span></td>\n    <td class=\"\">Shipping provider associated with this shipping estimate</td>\n  </tr>\n  <tr>\n    <td class=\"\">coupons</td>\n    <td class=\"\">List of coupons applied to the cart; default sorting is by coupon <span class=\"inline-code\">id</span>, from lowest to highest</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> id</span></td>\n    <td class=\"\">Unique ID of the coupon</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> code</span></td>\n    <td class=\"\">Code associated with the coupon</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> discount</span></td>\n    <td class=\"\">Discount associated with the coupon</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> type</span></td>\n    <td class=\"\">Coupon type</td>\n  </tr>\n  <tr>\n    <td class=\"\">gift_certificates</td>\n    <td class=\"\">List of gift certificates applied to the cart</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> id</span></td>\n    <td class=\"\">Unique system ID for the gift certificate</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> code</span></td>\n    <td class=\"\">Customer code used to identify the gift certificate</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> remaining</span></td>\n    <td class=\"\"><a href=\"/docs/price-common-object\">Price object</a> that defines the amount remaining on the gift certificate</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> used</span></td>\n    <td class=\"\"><a href=\"/docs/price-common-object\">Price object</a> that defines the amount already used on the gift certificate</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> remove_url</span></td>\n    <td class=\"\">URL to remove gift certificate from the cart</td>\n  </tr>\n  <tr>\n    <td class=\"\">taxes</td>\n    <td class=\"\">List of all applicable taxes for the cart</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> name</span></td>\n    <td class=\"\">Name of the applied tax</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> cost</span></td>\n    <td class=\"\"><a href=\"/docs/price-common-object\">Price object</a> that defines the cost of the applied tax</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> included</span></td>\n    <td class=\"\">Boolean that indicates whether taxes are included in the total price for the cart’s contents</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "cart_cart"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Cart Items\n\n<b>Description:</b> A list of items added to the cart in the current session\n\n<b>Handlebars Expression:</b> `{{cart.items}}</span>`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td class=\"\">id</td>\n    <td class=\"\">Unique system ID for the item in the cart</td>\n  </tr>\n  <tr>\n    <td class=\"\">quantity</td>\n    <td class=\"\">Quantity of the item being ordered</td>\n  </tr>\n  <tr>\n    <td class=\"\">type</td>\n    <td class=\"\">String indicating the type of purchase: either \"Item\" or \"GiftCertificate\"</td>\n  </tr>\n  <tr>\n    <td class=\"\">can_modify</td>\n    <td class=\"\">Boolean indicating whether the customer may modify the quantity of, or remove, this cart item</td>\n  </tr>\n  <tr>\n    <td class=\"\">remove_url</td>\n    <td class=\"\">URL to remove this item from the cart</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">sku</td>\n    <td class=\"\">SKU for this cart item</td>\n  </tr>\n  \n  <tr>\n    <td class=\"\">If type == Item</td>\n    <td class=\"\">If the item in the cart is a purchasable product, these properties are available:</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">product_id</span></td>\n    <td class=\"\">Product ID for the cart item</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">name</span></td>\n    <td class=\"\">Product name of the cart item</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">url</span></td>\n    <td class=\"\">Link to the product page for the cart item</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">availability</span></td>\n    <td class=\"\">An optional availability message set by the merchant</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">image</span></td>\n    <td class=\"\">Product image for the cart item</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">event_date</span></td>\n    <td class=\"\">Chosen event date for event-based products</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">show_wrapping_options</span></td>\n    <td class=\"\">Boolean indicating whether the wrapping options are shown</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">rrp</span></td>\n    <td class=\"\"><a href=\"/docs/price-common-object\">Price object</a> that defines the cart item's list price (MSRP); can be used to display struck-out list prices, as explained <a href=\"#strikeout\">here</a></td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">price</span></td>\n    <td class=\"\"><a href=\"/docs/price-common-object\">Price object</a> that defines the unit price of the cart item, after discounts; to see how this and the next three price properties relate to each other, please see <a href=\"/docs/cart-price-properties\">Cart Price Properties</a></td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">price_discounted</span></td>\n    <td class=\"\"><a href=\"/docs/price-common-object\">Price object</a> that defines the unit price, after all cart discounts and promotions</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">total</span></td>\n    <td class=\"\"><a href=\"/docs/price-common-object\">Price object</a> that defines the total price (price * quantity) of the cart item</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">total_discounted</span></td>\n    <td class=\"\"><a href=\"/docs/price-common-object\">Price object</a> that defines the total price (price * quantity), after all cart discounts and promotions</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">brand</span></td>\n    <td class=\"\">Brand properties</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent2\"> name</span></td>\n    <td class=\"\">The product’s brand name</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">release_date</span></td>\n    <td class=\"\">If a pre-order product was added to the cart,  displays a message about when the item is expected to ship to the customer</td>\n  </tr>\n  <tr>\n    <td class=\"\">gift_wrapping</td>\n    <td class=\"\">Gift-wrapping options</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> name</span></td>\n    <td class=\"\">Name of the gift-wrapping option</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> price</span></td>\n    <td class=\"\"><a href=\"/docs/price-common-object\">Price object</a> that defines the price of the gift-wrapping option</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> message</span></td>\n    <td class=\"\">Customer-defined message for the gift wrapping </td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> remove_url</span></td>\n    <td class=\"\">URL to remove the gift-wrapping option</td>\n  </tr>\n  <tr>\n    <td class=\"\">options</td>\n    <td class=\"\">Options chosen when product was added to cart</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> name</span></td>\n    <td class=\"\">Name of the option</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> value</span></td>\n    <td class=\"\">Value of the option</td>\n  </tr>\n  \n  <tr>\n<td class=\"\"><a name=\"bulk_pricing\"></a>bulk_pricing</td>\n    <td class=\"\">Properties for applying bulk-pricing discounts to cart items</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> base_price </span></td>\n    <td class=\"\">Price per item before any bulk discount applied</td>\n  </tr>\n\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> discount_amount </span></td>\n    <td class=\"\">Bulk-discount amount per item, if applicable; otherwise, null</td>\n  </tr>  \n\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> discount_percentage </span></td>\n    <td class=\"\">Bulk-discount percentage per item, if applicable; otherwise, null</td>\n  </tr>  \n   \n  <tr>\n    <td class=\"\">configurable_fields</td>\n    <td class=\"\">Custom product fields set when product was added to cart</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> name</span></td>\n    <td class=\"\">Name of the custom option</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> value</span></td>\n    <td class=\"\">Value of the custom option</td>\n  </tr>\n  <tr>\n    <td class=\"\">If type == GiftCertificate</td>\n    <td class=\"\">If the item in the cart is a gift certificate, these properties are available:</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> name</span></td>\n    <td class=\"\">Sender’s name </td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> edit_url</span></td>\n    <td class=\"\">URL to edit the gift certificate</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> recipient</span></td>\n    <td class=\"\">Recipient’s name</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> price</span></td>\n    <td class=\"\"><a href=\"/docs/price-common-object\">Price object</a> that defines the gift certificate’s basic price</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\"> total</span></td>\n    <td class=\"\"><a href=\"/docs/price-common-object\">Price object</a> that defines the gift certificate’s total cost, with applicable taxes included</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "cart_cart-items"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Strikeout Pricing Example\n\nAs a theme developer, you can use the `{{cart.items.rrp}}` property to display strike-out pricing in the Cart context. Here is the general approach:\n\nIn your `<theme-name>/templates/components/cart/content.html` file, as you iterate over the list of items in the cart, you would check each item's `type`. (No `rrp` property is available where the `type` is `GiftCertificate`.)\n\nIf the type is `Item`, then you would check the {{cart.items.rrp}} value. If the value is _not_ `null`, then you would know that you can display a strike-out price for the item. Below is a sample code skeleton:\n\n```\n{{#each cart.items}}\n   ...\n  {{#if type '==' 'GiftCertificate'}}\n      {{#if rrp}}\n          ... /* your code to display strike-thru pricing */\n      {{else}}\n          ... /* your code to display normal pricing */\n      {{/if}}\n  {{/if}}\n ```\n\nFor further details about catalog price properties, please see [Catalog Price Object: How Properties Interact](/stencil-docs/conditional-logic-examples/catalog-price-object). For usage examples of the `{{cart.items}}` `price` and `total` properties, please see [Cart Price Properties](/stencil-docs/conditional-logic-examples/cart-price-relationships).",
                                    "header": {
                                      "anchor": "cart_strikeout"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Cart Status Message\n\n<b>Description:</b> A list of relevant messages for the cart in the current session\n\n<b>Handlebars Expression:</b> `{{cart.status_messages}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>message</td>\n    <td>System-generated messages for the cart</td>\n  </tr>\n  <tr>\n    <td>type</td>\n    <td>Type of message: error, info, or success</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "cart_cart-status"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Suggested Products\n\n<b>Description:</b> A list of suggested products, based on cart contents; displays only if enabled by the `cart.suggestions` front-matter attribute, and only immediately after a product is added to the cart\n\n<b>Handlebars Expression:</b> `{{cart.suggested_products}}`\n\n<b>Object Properties:</b> References standard product card model.",
                                    "header": {
                                      "anchor": "cart_suggested"
                                    }
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "Objects"
                                }
                              }
                            },
                            {
                              "title": "Customer",
                              "route": {
                                "path": "/customer-objects"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Customer Objects</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#customer_customer\">Customer</a></li>\n    <li><a href=\"#customer_order-details\">Order Details</a></li>\n    <li><a href=\"#customer_recent-items\">Recent Items</a></li>\n    <li><a href=\"#customer_customer-wishlists\">Customer Wishlists</a></li>\n    <li><a href=\"#customer_wishlist-details\">Wishlist Details</a></li>\n    <li><a href=\"#customer_account-order-shipments\">Account Order Shipments</a></li>\n    <li><a href=\"#customer_account-orders\">Account Orders</a></li>\n    <li><a href=\"#customer_account-returns\">Account Returns</a></li>\n    <li><a href=\"#customer_account-new-returns\">Account New Return</a></li>\n    <li><a href=\"#customer_create-account\">Create Account</a></li>\n    <li><a href=\"#customer_shipping-addresses\">Shipping Addresses</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Customer\n\n<b>Description:</b> Customer-specific properties for a storefront customer object. When filtering/limiting, customers' default sorting is by customer id, from lowest to highest. (Called on several partials in the `<theme-name>/templates/components/` subdirectory: \n`page/contact-us-form.html`,\n`common/subscription-form.html`,\n`account/address-list.html`,\n`account/messages-form.html`, and\n`account/wishlist-list.html`.)\n\n<b>Handlebars Expression:</b> `{{customer}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>Customer’s ID</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Customer’s name</td>\n  </tr>\n  <tr>\n    <td>email</td>\n    <td>Customer’s email address</td>\n  </tr>\n  <tr>\n    <td>phone</td>\n    <td>Customer’s phone number</td>\n  </tr>\n\n  <tr>\n    <td>store_credit</td>\n    <td>Customer’s store credit</td>\n  </tr>\n\n  <tr>\n    <td>customer_group_id</td>\n    <td>ID of this customer's group</td>\n  </tr>\n\n  <tr>\n    <td>customer_group_name</td>\n    <td>Name of this customer's group</td>\n  </tr>  \n  \n  <tr>\n    <td>num_new_messages</td>\n    <td>Number of unread messages for this customer</td>\n  </tr>\n  <tr>\n    <td>num_wishlists</td>\n    <td>Number of wishlists for this customer</td>\n  </tr>\n  <tr>\n    <td>shipping_address</td>\n    <td>Shipping address used for the order</td>\n  </tr>\n  <tr>\n    <td>id</span></td>\n    <td>Unique, system-generated ID</td>\n  </tr>\n  <tr>\n    <td>first_name</span></td>\n    <td>Customer’s shipping (first) name</td>\n  </tr>\n  <tr>\n    <td>last_name</td>\n    <td>Customer’s shipping (last) name</td>\n  </tr>\n  <tr>\n    <td>company</td>\n    <td>Customer's shipping company name</td>\n  </tr>\n  <tr>\n    <td>address1</td>\n    <td>Customer's shipping address, first line</td>\n  </tr>\n  <tr>\n    <td>address2</td>\n    <td>Customer's shipping address, second line</td>\n  </tr>\n  <tr>\n    <td>city</td>\n    <td>Customer's shipping city</td>\n  </tr>\n  <tr>\n    <td>state</td>\n    <td>Customer's shipping state</td>\n  </tr>\n  <tr>\n    <td>zip</td>\n    <td>Customer's shipping zip</td>\n  </tr>\n  <tr>\n    <td>country</td>\n    <td>Customer's shipping country</td>\n  </tr>\n  <tr>\n    <td>phone</td>\n    <td>Customer's shipping phone number</td>\n  </tr>\n  <tr>\n    <td>state_id</td>\n    <td>ID for customer's shipping state/province/region\n</td>\n  </tr>\n  <tr>\n    <td>country_id</td>\n    <td>ID for customer's shipping country</td>\n  </tr>\n  <tr>\n    <td>destination</td>\n    <td>Type of delivery destination: residential or business/commercial</td>\n  </tr>\n  <tr>\n    <td>last_used</td>\n    <td>Timestamp when this address was last used as a shipping address</td>\n  </tr>\n  <tr>\n    <td>form_session_id</td>\n    <td>Used for custom shipping forms</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "customer_customer"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## <div id=\"OrderDet\"></div>Order Details\n\n<b>Description:</b> The order properties for a specific order, usable on the order details page. (Called on the default `<theme-name>/templates/pages/account/orders/details.html` and `<theme-name&gt;/templates/pages/account/orders/invoice.html` templates, and on the `<theme-name&gt;/templates/components/account/order-contents.html` partial.)\n\n<b>Handlebars Expression:</b> `{{order}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td>date</td>\n    <td>Date of the order</td>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>Unique, system-generated ID</td>\n  </tr>\n  <tr>\n    <td>total</td>\n    <td>Price object that defines the order’s total value</td>\n  </tr>\n  <tr>\n    <td>status</td>\n    <td>Order status code</td>\n  </tr>\n  <tr>\n    <td>status_text</td>\n    <td>Status text associated with the status code for the order</td>\n  </tr>\n  <tr>\n    <td>returns_enabled</td>\n    <td>Boolean that indicates whether merchant allows products from the order to be returned</td>\n  </tr>\n  <tr>\n    <td>reorder_url</td>\n    <td>URL to place reorders for items in this order</td>\n  </tr>\n  <tr>\n    <td>invoice_url</td>\n    <td>URL to display an invoice for this order</td>\n  </tr>\n  <tr>\n    <td>is_complete</td>\n    <td>Boolean indicating that the order has been completed</td>\n  </tr>\n  <tr>\n    <td>comments</td>\n    <td>Customer’s message about the order</td>\n  </tr>\n  <tr>\n    <td>is_digital</td>\n    <td>Boolean indicating whether the order will be delivered digitally</td>\n  </tr>\n  <tr>\n    <td>items</td>\n    <td>List of items for the order</td>\n  </tr>\n  <tr>\n    <td>order_product_id</span></td>\n    <td>Product ID</td>\n  </tr>\n  <tr>\n    <td>name</span></td>\n    <td>Product Name</td>\n  </tr>\n  <tr>\n    <td>quantity</span></td>\n    <td>Quantity Ordered</td>\n  </tr>\n  <tr>\n    <td>refunded</span></td>\n    <td>Price object that defines the value of this product that has been refunded</td>\n  </tr>\n  <tr>\n    <td>event_date</td>\n    <td>A chosen event date for the product</td>\n  </tr>\n  <tr>\n    <td>price</td>\n    <td>Price object that defines the product’s price</td>\n  </tr>\n  <tr>\n    <td>shipping_rows</td>\n    <td>Array of shipping addresses, for each item in the order</td>\n  </tr>\n  <tr>\n    <td>address</td>\n    <td>Street address to ship to</td>\n  </tr>\n  <tr>\n    <td>city</td>\n    <td>City to ship to</td>\n  </tr>\n  <tr>\n    <td>state</td>\n    <td>State to ship to</td>\n  </tr>\n  <tr>\n    <td>zip</td>\n    <td>Postal/ZIP code to ship to</td>\n  </tr>\n  <tr>\n    <td>country</td>\n    <td>Country to ship to</td>\n  </tr>\n  <tr>\n    <td>gift_wrapping_name</td>\n    <td>Name of the gift-wrapping option used</td>\n  </tr>\n  <tr>\n    <td>type</td>\n    <td>Type of purchase; value is one of: physical, digital, giftcertificate</td>\n  </tr>\n  <tr>\n    <td>download_url</td>\n    <td>URL at which customer can download digital item</td>\n  </tr>\n  <tr>\n    <td>image</td>\n    <td>The image of the order’s first product, in Stencil image format </td>\n  </tr>\n  <tr>\n    <td>show_reorder\n</td>\n    <td>Boolean indicating whether the customer should see a button for reordering items on the Account Order Details page</td>\n  </tr>\n  <tr>\n    <td>reorder_message</td>\n    <td>An error message to be displayed when the customer attempts to reorder items that can’t be reordered</td>\n  </tr>\n  <tr>\n    <td>options</td>\n    <td>A list of options selected when this product was purchased</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Display name for the option (\"Small\", “Medium”, etc.)</td>\n  </tr>\n  <tr>\n    <td>value</td>\n    <td>Value that customer selected for the option</td>\n  </tr>\n  <tr>\n    <td>billing_address</td>\n    <td>Billing address used for the order</td>\n  </tr>\n  <tr>\n    <td>full_name</td>\n    <td>Customer's billing name</td>\n  </tr>\n  <tr>\n    <td>company</td>\n    <td>Customer's billing company name</td>\n  </tr>\n  <tr>\n    <td>address_lines</td>\n    <td>Customer's billing address</td>\n  </tr>\n  <tr>\n    <td>city</td>\n    <td>Customer's billing city</td>\n  </tr>\n  <tr>\n    <td>state</td>\n    <td>Customer's billing state</td>\n  </tr>\n  <tr>\n    <td>country</td>\n    <td>Customer billing country</td>\n  </tr>\n  <tr>\n    <td>zip</td>\n    <td>Customer billing ZIP</td>\n  </tr>\n  <tr>\n    <td>phone</td>\n    <td>Customer billing phone number</td>\n  </tr>\n  <tr>\n    <td>shipping_address_count</td>\n    <td>Number of shipping addresses the customer has specified for this order</td>\n  </tr>\n  <tr>\n    <td>shipping_address</td>\n    <td>Shipping address used for the order</td>\n  </tr>\n  <tr>\n    <td>full_name</td>\n    <td>Customer's shipping name</td>\n  </tr>\n  <tr>\n    <td>company</td>\n    <td>Customer's shipping company name</td>\n  </tr>\n  <tr>\n    <td>address_lines</td>\n    <td>Customer's shipping address</td>\n  </tr>\n  <tr>\n    <td>city</td>\n    <td>Customer's shipping city</td>\n  </tr>\n  <tr>\n    <td>state</td>\n    <td>Customer's shipping state</td>\n  </tr>\n  <tr>\n    <td>country</td>\n    <td>Customer's shipping country</td>\n  </tr>\n  <tr>\n    <td>zip</td>\n    <td>Customer's shipping zip</td>\n  </tr>\n  <tr>\n    <td>phone</td>\n    <td>Customer's shipping phone number</td>\n  </tr>\n  <tr>\n    <td>payment_method</td>\n    <td>Customer’s payment method for this order (payment gateway)</td>\n  </tr>\n  <tr>\n    <td>card_number_last_four</td>\n    <td>Last four digits of customer’s credit card</td>\n  </tr>\n  <tr>\n    <td>total_rows</td>\n    <td>A list of “total” rows containing total pricing information</td>\n  </tr>\n  <tr>\n    <td>label</td>\n    <td>The label of the total row (Subtotal, Tax, Grand Total, etc.)</td>\n  </tr>\n</table>\n",
                                    "header": {
                                      "anchor": "customer_order-details"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Recent Items\n\n<b>Description:</b> Items the customer has recently viewed. (Called on the default `<theme-name>/templates/pages/account/recent-items.html` template.)\n\n<b>Handlebars Expression:</b> <span class=\"inline-code\">{{customer.recently_viewed_products}}</span>\n\n<b>Object Properties:</b> References the standard product card model.",
                                    "header": {
                                      "anchor": "customer_recent-items"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Customer Wishlists\n\n<b>Description:</b> Array of product wishlists, specific to this store, for the customer. (Called on the default `<theme-name>/templates/components/account/wishlist-list.html` partial.)\n\n<b>Handlebars Expression:</b> `{{customer.wishlists}}` \n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>Unique system ID of the wishlist</td>\n  </tr>\n  <tr>\n    <td>num_items</td>\n    <td>Number of items in the wishlist</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Customer-defined name of the wishlist</td>\n  </tr>\n  <tr>\n    <td>is_public</td>\n    <td>Boolean value indicating whether the wishlist is publicly available </td>\n  </tr>\n  <tr>\n    <td>is_editable</td>\n    <td>Boolean indicating whether the \"Remove Item\" button, and account navigation controls, are displayed (i.e., whether the customer viewing the wishlist is this wishlist’s owner)</td>\n  </tr>\n  <tr>\n    <td>token</td>\n    <td>Unique public token for the wishlist</td>\n  </tr>\n  <tr>\n    <td>view_url</td>\n    <td>URL to view the wishlist</td>\n  </tr>\n  <tr>\n    <td>edit_url</td>\n    <td>URL to edit the wishlist</td>\n  </tr>\n  <tr>\n    <td>delete_url</td>\n    <td>URL to delete the wishlist</td>\n  </tr>\n  <tr>\n    <td>share_url</td>\n    <td>URL to share the wishlist</td>\n  </tr>\n</table>\n",
                                    "header": {
                                      "anchor": "customer_customer-wishlists"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## <div id=\"WishDet\"></div>Wishlist Details\n\n<b>Description:</b> Wishlist information for a specific wishlist. (Called on the default `<theme-name>/templates/pages/account/wishlist-details.html` template and `<theme-name>/templates/components/account/wishlist-item-list.html`partial.)\n\n<b>Handlebars Expression:</b> `{{wishlist}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>Unique system ID for the wishlist</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Customer-defined name of the wishlist</td>\n  </tr>\n  <tr>\n    <td>is_public</td>\n    <td>Boolean value indicating whether the wishlist is publicly available </td>\n  </tr>\n  <tr>\n    <td>token</td>\n    <td>Unique public token for the wishlist</td>\n  </tr>\n  <tr>\n    <td>share_url</td>\n    <td>URL used to share the wishlist</td>\n  </tr>\n  <tr>\n    <td>items</td>\n    <td>List of items in the wishlist; extends the product card model, adding the extra properties below:</td>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>Unique system ID for this wishlist item</td>\n  </tr>\n  <tr>\n    <td>product_id</td>\n    <td>Product ID for the item</td>\n  </tr>\n  <tr>\n    <td>remove_url</td>\n    <td>URL to remove the product from the wishlist</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "customer_wishlist-details"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Account Order Shipments\n\n<b>Description:</b> Objects to manage shipments associated with a specific order details for the current customer. (Called on the default <NOBR><span class=\"inline-code\">&lt;theme-name&gt;/templates/pages/account/orders/details.html</span></nobr> template.) <br>\n\n<b>Handlebars Expression:</b> `{{shipments}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>date_shipped</td>\n    <td>Shipping date for this shipment</td>\n  </tr>\n  <tr>\n    <td>shipping_provider</td>\n    <td>Carrier for this shipment</td>\n  </tr>\n  <tr>\n    <td>shipping_method</td>\n    <td>Shipping method for this shipment</td>\n  </tr>\n  <tr>\n    <td>show_shipping_method</td>\n    <td>Boolean indicating whether to display the shipping method to the customer</td>\n  </tr>\n  <tr>\n    <td>shipping_track</td>\n    <td>Tracking information for this shipment</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>Tracking URL for this shipment</td>\n  </tr>\n  <tr>\n    <td>number</td>\n    <td>Tracking number for this shipment</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "customer_account-order-shipments"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## <div du=\"Orders\"></div>Account Orders\n\n<b>Description:</b> Objects to manage completed orders for the current customer. By default, orders sort by order id, from lowest to highest. (Called on the default `<theme-name>/templates/pages/account/orders/all.html`and `<theme-name&gt;/templates/pages/account/orders/completed.html`  templates, and on the `<theme-name>/templates/components/account/orders-list.html` partial.)\n\n<b>Handlebars Expression:</b>`{{customer.orders}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td>pagination</td>\n    <td>References pagination model</td>\n  </tr>\n  <tr>\n    <td>date</td>\n    <td>Date this order was placed</td>\n  </tr>\n  <tr>\n    <td>last_update_date</td>\n    <td>Date this order was last updated</td>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>ID for this order</td>\n  </tr>\n  <tr>\n    <td>total</td>\n    <td>Total value of this order</td>\n  </tr>\n  <tr>\n    <td>status</td>\n    <td>Status of this order (\"Completed\" or other)</td>\n  </tr>\n  <tr>\n    <td>return_url</td>\n    <td>URL for returning items in this order</td>\n  </tr>\n  <tr>\n    <td>reorder_url</td>\n    <td>URL for reordering items in this order</td>\n  </tr>\n  <tr>\n    <td>details_url</td>\n    <td>URL for details about this order</td>\n  </tr>\n  <tr>\n    <td>payment_instructions</td>\n    <td>Text field defined by merchant as to payment instructions for manual gateways such as “Bank Deposit”</td>\n  </tr>\n  <tr>\n    <td>image</td>\n    <td>Image of the order’s first product, in Stencil image format</td>\n  </tr>\n  <tr>\n    <td>items</td>\n    <td>Array of products in this order</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Name of this product</td>\n  </tr>\n  <tr>\n    <td>quantity</td>\n    <td>Quantity of this product ordered</td>\n  </tr>\n  <tr>\n    <td>refunded</td>\n    <td>Price object that defines the amount of this product that has been refunded</td>\n  </tr>\n  <tr>\n    <td>expected_release_date</td>\n    <td>Expected ship date if the product is set to pre-order status</td>\n  </tr>\n  <tr>\n    <td>type</span></td>\n    <td>Type of purchase; value is one of: physical, digital, giftcertificate</td>\n  </tr>\n  <tr>\n    <td>download_url</td>\n    <td>URL for customer to download a digital product</td>\n  </tr>\n  <tr>\n    <td>image</td>\n    <td>The image for this ordered product</td>\n  </tr>\n  <tr>\n    <td>options</td>\n    <td>Array of additional product details (size, color, etc.), as name/value pairs</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Displayed name for this category of information</td>\n  </tr>\n  <tr>\n    <td>value</td>\n    <td>Displayed value for this product’s entry</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "customer_account-orders"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## <div id=\"Returns\"></div>Account Returns\n\n<b>Description:</b> Objects to manage returns for the current customer. (Called on the default `<theme-name>/templates/pages/account/returns.html` template.) <br>\n\n<b>Handlebars Expression:</b> `{{customer.returns}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td>date_requested</td>\n    <td>Date on which the customer requested this return</td>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>The ID for this return</td>\n  </tr>\n  <tr>\n    <td>quantity</td>\n    <td>Quantity of items returned</td>\n  </tr>\n  <tr>\n    <td>reason</td>\n    <td>Reason for return; merchants can define actions beyond the default strings created with each store, which are: Received Wrong Product, Wrong Product Ordered, Not Satisfied With The Product, and There Was A Problem With The Product</td>\n  </tr>\n  <tr>\n    <td>action</td>\n    <td>Return action; merchants can define actions beyond the default set created with each store (Repair, Replacement, or Store Credit)</td>\n  </tr>\n  <tr>\n    <td>comments</td>\n    <td>Comments that the customer entered with the return request</td>\n  </tr>\n  <tr>\n    <td>status</td>\n    <td>Status of the return: Pending, Received, Authorized, Repaired, \nRefunded, Rejected, or Cancelled</td>\n  </tr>\n  <tr>\n    <td>product</td>\n    <td>Array of products included in the return</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL for this product</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Name of this product</td>\n  </tr>\n  <tr>\n    <td>options</td>\n    <td>Array of additional product details (size, color, etc.), as name/value pairs</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Displayed name for this category of information</td>\n  </tr>\n  <tr>\n    <td>value</td>\n    <td>Displayed value for this product’s entry</td>\n  </tr>\n  <tr>\n    <td>image</td>\n    <td>Image for this product</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "customer_account-returns"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## <div id=\"NewReturn\"></div>Account New Return\n\n<b>Description:</b> Objects to handle a new return for the current customer. (Called on the default `<theme-name>/templates/pages/account/add-return.html` template.)\n\n<b>Handlebars Expression:</b> `{{forms.return}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td>order_id</td>\n    <td>ID for the original order</td>\n  </tr>\n  <tr>\n    <td>reasons</td>\n    <td>Reasons for return</td>\n  </tr>\n  <tr>\n    <td>actions</td>\n    <td>Return actions: an array of strings arbitrarily defined by the merchant: refund, exchange, credit, etc.</td>\n  </tr>\n  <tr>\n    <td>order_products</td>\n    <td>Array of products from the order that are available to return</td>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>ID for the product</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Name of this product</td>\n  </tr>\n  <tr>\n    <td>product_id</td>\n    <td>ID for this product</td>\n  </tr>\n  <tr>\n    <td>price</td>\n    <td>Price object that defines this product’s price</td>\n  </tr>\n  <tr>\n    <td>quantity</td>\n    <td>Quantity of the product returned</td>\n  </tr>\n  <tr>\n    <td>options</td>\n    <td>Array of additional product details (size, color, etc.), as name/value pairs</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Displayed name for this category of information</td>\n  </tr>\n  <tr>\n    <td>value</td>\n    <td>Displayed value for this product’s entry</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "customer_account-new-return"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## <div id=\"CreateAccount\"></div>Create Account\n\n<b>Description:</b> Object to enable the current customer to create a store account. (Called on the default `<theme-name&gt;/templates/pages/auth/create-account.html` template.)\n\n<b>Handlebars Expression:</b> `{{forms.create_account}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td>recaptcha</td>\n    <td>Objects for integrating the Google reCAPTCHA service to distinguish human visitors from ’bots (automated agents)</td>\n  </tr>\n  <tr>\n    <td>enabled</td>\n    <td>Boolean indicating whether reCAPTCHA is enabled for this store</td>\n  </tr>\n  <tr>\n    <td>public_key</td>\n    <td>Public key (site key) that reCAPTCHA returns upon merchant’s enabling CAPTCHA security in Store Settings > Display Settings</td>\n  </tr>\n  <tr>\n    <td>address_fields</td>\n    <td>Array of form fields that define each shipping address for this customer; for details, see <a href=\"https://github.com/bigcommerce/cornerstone/tree/master/templates/components/common/forms\">this repo</a></td>\n  </tr>\n  <tr>\n    <td>class_name</td>\n    <td>Specifies a CSS class (defined in the theme's `/assets/scss/` subdirectory) to apply to a field within the array; for corresponding control-panel steps, see\n <NOBR><a href=\"https://support.bigcommerce.com/articles/Public/Editing-Form-Fields#advanced-settings\">this support article</a></td>\n  </tr>\n  <tr>\n    <td>account_fields</td>\n    <td>Object of form fields; for details, see <a href=https://github.com/bigcommerce/cornerstone/tree/master/templates/components/common/forms>this repo</a>\n  </tr>\n  <tr>\n    <td>class_name</td>\n    <td>Specifies a CSS class to apply to a field within the array; for corresponding control-panel steps, see:\n <a href=\"https://support.bigcommerce.com/articles/Public/Editing-Form-Fields#advanced-settings\">this support article</a></td>\n  </tr>\n  <tr>\n    <td>error</td>\n    <td>BCApp generated message to display when customer’s account creation fails</td>\n  </tr>\n  <tr>\n    <td>checking_out</td>\n    <td>Boolean indicating whether customer created the account during a purchase checkout</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "customer_create-account"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## <div id=\"ShipAddress\"></div>Shipping Addresses\n\n<b>Description:</b> Object to enable the customer to enter shipping and contact information. (Called on the default `<theme-name>/templates/components/account/address-list.html` partial.)\n\n<b>Handlebars Expression:</b>`{{customer.addresses}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>id</td>\n    <td>ID for this shipping address</td>\n  </tr>\n  <tr>\n    <td>customer_id</td>\n    <td>ID for this customer</td>\n  </tr>\n  <tr>\n    <td>first_name</td>\n    <td>First name to ship to</td>\n  </tr>\n  <tr>\n    <td>last_name</td>\n    <td>Last name to ship to</td>\n  </tr>\n  <tr>\n    <td>company</td>\n    <td>Company name to ship to</td>\n  </tr>\n  <tr>\n    <td>address1</td>\n    <td>Street (etc.) address, first line</td>\n  </tr>\n  <tr>\n    <td>address2</td>\n    <td>Street (etc.) address, second line</td>\n  </tr>\n  <tr>\n    <td>city</td>\n    <td>City to ship to</td>\n  </tr>\n  <tr>\n    <td>state</td>\n    <td>State/province/region to ship to</td>\n  </tr>\n  <tr>\n    <td>zip</td>\n    <td>Postal/ZIP code to ship to</td>\n  </tr>\n  <tr>\n    <td>country</td>\n    <td>Country to ship to</td>\n  </tr>\n  <tr>\n    <td>phone</td>\n    <td>Addressee’s phone number</td>\n  </tr>\n  <tr>\n    <td>state_id</td>\n    <td>ID for destination state/province/region</td>\n  </tr>\n  <tr>\n    <td>country_id</td>\n    <td>ID for destination country</td>\n  </tr>\n  <tr>\n    <td>destination</td>\n    <td>residential or commercial</td>\n  </tr>\n  <tr>\n    <td>last_used</td>\n    <td>Boolean, indicating whether this was the last-used shipping address for this customer</td>\n  </tr>\n  <tr>\n    <td>full_name</td>\n    <td>Full name of addressee</td>\n  </tr>\n  <tr>\n    <td>edit_url</td>\n    <td>URL for customer to edit this shipping address</td>\n  </tr>\n  <tr>\n    <td>delete_url</td>\n    <td>URL for customer to delete this shipping address </td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "customer_shipping-addresses"
                                    }
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "Objects"
                                }
                              }
                            },
                            {
                              "title": "Blog ",
                              "route": {
                                "path": "/new-subpage"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Blog Objects</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#blog_blog\">Blog</a></li>\n    <li><a href=\"#blog_blog-post\">Blog Post</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "_These objects are called on the default `<theme-name>/templates/components/blog/post.html` partial._\n\n## Blog\n\n<b>Description:</b> Blog-specific properties for the blog feature within BigCommerce storefronts \n\n<b>Handlebars Expression:</b> `{{blog}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <td>Property</td>\n    <td>Description</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Blog name</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>Blog custom url</td>\n  </tr>\n  <tr>\n    <td>pagination</td>\n    <td>References pagination model</td>\n  </tr>\n  <tr>\n    <td>posts </td>\n    <td>A list of posts for the blog index; default sorting is by date_published,<br> from most-recent to earliest</td>\n  </tr>\n  <tr>\n    <td>author</td>\n    <td>Author of the blog post</td>\n  </tr>\n  <tr>\n    <td>title</td>\n    <td>Title of the blog post</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL of the blog entry</td>\n  </tr>\n  <tr>\n    <td>body</td>\n    <td>Body of the blog entry</td>\n  </tr>\n  <tr>\n    <td>thumbnail</td>\n    <td>Image thumbnail for the blog entry, in <a href=\"/docs/stencil-image-common-object\">Stencil image format</a></td>\n  </tr>\n  <tr>\n    <td>date_published</td>\n    <td>Date the blog entry was published</td>\n  </tr>\n  <tr>\n    <td>social</td>\n    <td>Social media tags for the blog entry</td>\n  </tr>\n  <tr>\n    <td>tags </td>\n    <td>Tags for the blog</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Name for the tag</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL for the tag</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "blog_blog"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Blog Post\n\n<b>Description:</b> Individual blog post object\n\n<b>Handlebars Expression:</b> `{{blog.post}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>author</td>\n    <td>Author of the blog post</td>\n  </tr>\n  <tr>\n    <td>title</td>\n    <td>Title of the blog post</td>\n  </tr>\n  <tr>\n    <td>url</td>\n    <td>URL of the blog entry</td>\n  </tr>\n  <tr>\n    <td>body</td>\n    <td>Body of the blog entry</td>\n  </tr>\n  <tr>\n    <td>thumbnail</td>\n    <td>Image thumbnail for the blog entry, in <a href=\"stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/stencil-image\">Stencil image format</a></td>\n  </tr>\n  <tr>\n    <td>date_published</td>\n    <td>Date the blog entry was published</td>\n  </tr>\n  <tr>\n    <td>social</td>\n    <td>Social media tags for the blog entry</td>\n  </tr>\n  <tr>\n    <td>tags </td>\n    <td>Tags for the blog</td>\n  </tr>\n  <tr>\n    <td> name</td>\n    <td>Name for the tag</td>\n  </tr>\n  <tr>\n    <td> url</td>\n    <td>URL for the tag</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "blog_blog-post"
                                    }
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "Objects"
                                }
                              }
                            },
                            {
                              "title": "Forms",
                              "route": {
                                "path": "/forms-objects"
                              },
                              "data": {
                                "blocks": [
                                  {
                                    "type": "html",
                                    "data": "<h1>Forms Objects</h1>"
                                  },
                                  {
                                    "type": "html",
                                    "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#forms_account\">Account Form</a></li>\n    <li><a href=\"#forms_account-address\">Account Address Form</a></li>\n    <li><a href=\"#forms_wishlist\">Wishlist Form</a></li>\n    <li><a href=\"#forms_gift-certificate\">Gift Certificate Form</a></li>\n    <li><a href=\"#forms_contact-us\">Contact Us Form</a></li>\n\t</ul>\n</div>"
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Account Form\n\n<b>Description:</b> The form object used to edit a customer object. <br>\n\n<b>Handlebars Expression:</b> <code>{{forms.account}}</code>\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td class=\"\">first_name</td>\n    <td class=\"\">First name of the customer being edited</td>\n  </tr>\n  <tr>\n    <td class=\"\">last_name</td>\n    <td class=\"\">Last name of the customer being edited</td>\n  </tr>\n  <tr>\n    <td class=\"\">company_name</td>\n    <td class=\"\">Company of the customer being edited</td>\n  </tr>\n  <tr>\n    <td class=\"\">phone</td>\n    <td class=\"\">Phone number of the customer being edited</td>\n  </tr>\n  <tr>\n    <td class=\"\">error</td>\n    <td class=\"\">Message to display (generated by the BigCommerce App) when customer’s account edit fails</td>\n  </tr>\n  <tr>\n    <td class=\"\">success</td>\n    <td class=\"\">Message to display (generated by the BigCommerce App) when customer’s account edit succeeds</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "forms_account"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Account Address Form \n\n<b>Description:</b> Form object presented to customers in the Add/Edit Address page. Called on the default <NOBR><span class=\"inline-code\">&lt;theme-name&gt;/templates/components/account/address-list.html</span></nobr> partial and <NOBR><span class=\"inline-code\">&lt;theme-name&gt;/templates/pages/account/add-address.html</span></nobr> template. <br>\n\n<b>Handlebars Expression:</b> <code>{{forms.address}}</code>\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td class=\"\">address_id</td>\n    <td class=\"\">ID for this shipping address</td>\n  </tr>\n  <tr>\n    <td class=\"\">shipping_fields</td>\n    <td class=\"\">Array of form fields that define each shipping address for this customer; for details, see this repo:\nhttps://github.com/bigcommerce/cornerstone/tree/master/templates/components/common/forms</td>\n  </tr>\n  <tr>\n    <td class=\"\">action</td>\n    <td class=\"\">URL to the proper handler (Update Address versus Save New Address)</td>\n  </tr>\n  <tr>\n    <td class=\"\">error</td>\n    <td class=\"\">Message to display when form entry fails (defined by the BigCommerce App)</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "forms_account-address"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Wishlist Form\n\n<b>Description:</b> Form object presented to customers on the Add/Edit Wishlist page. Called on the default <code>&lt;theme-name&gt;/templates/components/account/add-wishlist.html</code> partial and <code>&lt;theme-name&gt;/templates/pages/account/add-wishlist.html</code> template.\n\n<b>Handlebars Expression:</b> `{{forms.wishlist}}`\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Displayed name for this wishlist</td>\n  </tr>\n  <tr>\n    <td class=\"\">id</td>\n    <td class=\"\">ID for this wishlist</td>\n  </tr>\n  <tr>\n    <td class=\"\">is_public</td>\n    <td class=\"\">Boolean indicating whether this wishlist is displayed to other store visitors</td>\n  </tr>\n  <tr>\n    <td class=\"\">errors</td>\n    <td class=\"\">Message to display when form entry fails (generated by the BigCommerce App)</td>\n  </tr>\n  <tr>\n    <td class=\"\">action</td>\n    <td class=\"\">URL to the proper handler (Update Wish List versus Save New Wish List)</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "forms_wishlist"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Gift Certificate Form\n\n<b>Description:</b><b><em> </em></b>Form object used to create and edit a gift certificate object for the merchant's store. Called on the default <NOBR><span class=\"inline-code\">&lt;theme-name&gt;templates/pages/gift-certificate/purchase.html</span></nobr> template. <br>\n\n<b>Handlebars Expression:</b> <code>{{forms.gift_certificate}}</code>\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>editing</td>\n    <td>Whether the current context is editing a gift certificate in the cart, or adding a new gift certificate</td>\n  </tr>\n  <tr>\n    <td>can_use_custom_amount</td>\n    <td>Whether the customer can enter free-text input (otherwise, must select from a drop-down list)</td>\n  </tr>\n  <tr>\n    <td>amount_options</td>\n    <td>If can_use_custom_amount is disabled, this variable fills the dropdown with the available options, in <a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price\">price object</a> form</td>\n  </tr>\n  <tr>\n    <td>minimum</td>\n    <td><a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price\">Price object</a> that defines the minimum amount a customer can enter (when can_use_custom_amount is enabled)</td>\n  </tr>\n  <tr>\n    <td>maximum</td>\n    <td><a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price\">Price object</a> that defines the minimum amount a customer can enter  (when can_use_custom_amount is enabled)</td>\n  </tr>\n  <tr>\n    <td>expires_in_days</td>\n    <td>If the gift certificates expire, this will be non-0 numerical days</td>\n  </tr>\n  <tr>\n    <td>errors</td>\n    <td>Server-side validation errors from the form’s submission</td>\n  </tr>\n  <tr>\n    <td>themes</td>\n    <td>A list of active gift-certificate themes (Birthday, Celebration, General, etc.), each stored as an object containing corresponding display and value children</td>\n  </tr>\n\n  <tr>\n    <td>display</td>\n    <td>Birthday, Celebration, General, etc.</td>\n  </tr>\n  <tr>\n    <td>value</td>\n    <td class=\"\">Birthday.html, Celebration.html, General.html, etc.</td>\n  </tr>\n  \n  <tr>\n    <td>action</td>\n    <td>The action for the form</td>\n  </tr>\n  <tr>\n    <td>cart_item_id</td>\n    <td>If editing, this is the cart item id being edited.</td>\n  </tr>\n  <tr>\n    <td>values</td>\n    <td>An array of the form values for prefilling</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">to_name</span></td>\n    <td class=\"\">The recipient's name</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">to_email</span></td>\n    <td class=\"\">To email address</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">from_name</span></td>\n    <td class=\"\">The sender’s name</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">from_email</span></td>\n    <td class=\"\">From email address</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">message</span></td>\n    <td class=\"\">An optional custom message</td>\n  </tr>\n  <tr>\n    <td class=\"\"><span class=\"indent1\">amount</span></td>\n    <td class=\"\"><a href=\"/stencil-docs/stencil-object-model-reference/stencil-objects/common-objects/price\">Price object</a> that defines the amount of the gift certificate</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "forms_gift-certificate"
                                    }
                                  },
                                  {
                                    "type": "text",
                                    "data": "## Contact Us Form \n\n<b>Description:</b>Form object used to manage merchants’ \"Contact Us\" pages. Called on the default <code>&lt;theme-name&gt;/templates/pages/contact-us.html</code>template. \n\n<b>Handlebars Expression:</b> <code>{{forms.contact}}</code>\n\n<b>Object Properties:</b>\n\n<table>\n  <tr>\n    <th>Property</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td>success</td>\n    <td>Boolean indicating whether form was just submitted</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>Boolean indicating whether name input is enabled for the form</td>\n  </tr>\n  <tr>\n    <td>company</td>\n    <td>Boolean indicating whether company-name input is enabled for the form</td>\n  </tr>\n  <tr>\n    <td>phone</td>\n    <td>Boolean indicating whether phone-number input is enabled for the form</td>\n  </tr>\n  <tr>\n    <td>order</td>\n    <td>Boolean indicating whether order-number input is enabled for the form</td>\n  </tr>\n  <tr>\n    <td>rma</td>\n    <td>Boolean indicating whether RMA (Return Merchandise Authorization) input is enabled for the form</td>\n  </tr>\n  <tr>\n    <td>page_id</td>\n    <td>Page ID for this contact page (there can be multiple contact pages)</td>\n  </tr>\n  <tr>\n    <td>captcha_url</td>\n    <td>URL to provide an image file for a CAPTCHA field</td>\n  </tr>\n  <tr>\n    <td>text</td>\n    <td>Text content to display above the form</td>\n  </tr>\n  <tr>\n    <td>error</td>\n    <td>Potential error that occurred during previous form submission</td>\n  </tr>\n</table>",
                                    "header": {
                                      "anchor": "forms_contact-us"
                                    }
                                  }
                                ]
                              },
                              "config": {
                                "sidebar": {
                                  "token": "Objects"
                                }
                              }
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "config": {
                    "sidebar": {
                      "token": "Reference"
                    }
                  }
                }
              ],
              "blocks": []
            },
            "config": {
              "sidebar": {
                "token": ""
              }
            }
          },
          {
            "title": "CSS And Design Assets",
            "route": {
              "path": "/css-and-design-assets"
            },
            "data": {
              "children": [
                {
                  "title": "Assets Directory",
                  "route": {
                    "path": "/assets-directory"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Assets Directory</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#assets_the-assets-directory\">The <code>assets</code> Directory</a></li>\n    <li><a href=\"#assets_video-demo\">Video Demo</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## The `assets` Directory\n\nEach Stencil theme’s `<theme-name>/assets/` directory contains CSS, JavaScript, and image assets that help create the design of storefront pages. A minimal `<theme-name>/assets/` directory contains the files and subdirectories that you can view on the [Cornerstone Github Repository](https://github.com/bigcommerce/cornerstone/tree/master/assets).\n\nWe will go further into detail about the subdirectories within `/assets/` below: \n\n### The `cdn` Subdirectory\n\nThe `/cdn/` subdirectory is designed to contain large static assets that you will upload to a content delivery network, separately from the rest of your theme. For this reason – and by design – the contents of this directory (only) are excluded from theme bundling. For details, see Staging a Theme for CDN Delivery.\n\n### The `fonts` Subdirectory\n\nThe `/fonts/` subdirectory contains local versions of theme-specific fonts.\n\n### The `icons` Subdirectory\n\nThe `/icons/` subdirectory contains .svg files for icons used within a theme.\n\n### The `img` Subdirectory\n\nThe `/img/` subdirectory contains images used in the theme’s display – background images, sprites, and other images not related to store content.\n\nYou would typically reference these image assets using Stencil's cdn Handlebars helper. For example, generically:\n\n`<img src=\"{{cdn 'assets/img/image.jpg'}}\">`\n\nOr, with a realistic file name:\n\n`<img src=\"{{cdn 'assets/img/size-chart.png'}}\">`\n\n**Note:** For Stencil themes only, images that use the default zoom library pass through Akami Image Manager. This chooses the best image to serve based on device. To bypass the image optimization, include imbypass=on as a query parameter in the image url. This will serve un-optimized images.\n\n`<img src=\"{{cdn 'webdav:img/image.jpg?imbypass=on'}}\">`\n\n`<img src=\"{{getImage settings.store_logo.image 'logo_size'}}?imbypass=on\">`\n\n`<img src=\"{{cdn 'assets/img/image.jpg?imbypass=on'}}\">`\n\n### The `js` Subdirectory\n\nThe `/js/` subdirectory contains general JavaScript files used in the theme.\n\n### The `scss` Subdirectory\n\nThe `/scss/` subdirectory contains theme-specific CSS resources.",
                        "header": {
                          "anchor": "assets_the-assets-directory"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "type": "warning",
                          "title": " Production-Safe Image References",
                          "body": "To avoid unexpected 404 errors on your production store, we recommend that you use short relative paths in your SCSS to reference images in your `/img/` subdirectory. So, for example, use references of the form:\n`background: url('../img/header-bg.png');` rather than references of the form:\n`background: url('/assets/img/header-bg.png');`\n\n"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Video Demo\n\nWatch a video tour of the `/assets/` directory, its `/scss/` subdirectory, interactions between CSS and `config.json` values, Stencil custom Sass functions, and the `/img/` subdirectory.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/zUDNgprOEts\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n",
                        "header": {
                          "anchor": "assets_video-demo"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "type": "warning",
                          "body": "This section's remaining pages list certain restrictions on changing some subdirectories' structure, contents, and file names.\n\nIn parts of your theme's directory tree where you are free to add new subdirectories and files, be sure to:\n\n* Set newly added directories to permission `755 (drwxr-xr-x)`.\n* Set newly added files to permission `644 (rw-r--r--)`.\n* Without these permissions, running your theme locally will fail, with multiple error messages. Bundling your theme will also fail, blocking its upload to a store.",
                          "title": " Directory and File Restrictions/Permissions\n"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Components Directory & Design Patterns",
                  "route": {
                    "path": "/stencil-design-patterns"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Components Directory and Design Patterns</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#components_design-patterns\">Design Patterns</a></li>\n    <li><a href=\"#components_components-directory\">Components Directory</a></li>\n    <li><a href=\"#components_citadel-sub\">The <code>citadel</code> Subdirectory</a></li>\n    <li><a href=\"#components_foundation-sub\">The <code>foundation</code> Subdirectory</a></li>\n    <li><a href=\"#components_stencil-sub\">The <code>stencil</code> Subdirectory</a></li>\n    <li><a href=\"#components_vendor-sub\">The <code>vendor</code> Subdirectory</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Design Patterns\n\nStencil themes include an internal pattern library called Citadel, which consumes the ZURB Foundation framework. Foundation provides the basis for creating responsive themes. Citadel extends the Foundation framework’s mixins and components to provide Stencil’s own mixins, extensible components, and utilities.\n\n**Note:** _Citadel is based specifically on Foundation 5.5.3, which installs with the Stencil framework. (Direct download link is [here](https://github.com/zurb/foundation-sites/releases/tag/v5.5.3); documentation is [here](https://foundation.zurb.com/sites/docs/v/5.5.3/).) We do not support Foundation 6.x, due to breaking changes introduced between versions 5.x and 6.x._\n\nA theme developer might use drop-down lists, forms, and similar resources from Citadel’s design patterns. The design/style language underlying these Citadel resources is the Sass/SCSS preprocessor.",
                        "header": {
                          "anchor": "components_design-patterns"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Components Directory \n\nCitadel design patterns reside in the `<theme-name>/assets/scss/components/` subdirectory. The components subdirectory contains the 4 following subdirectories:\n* `/citadel/`, \n* `/foundation/`,\n* `/stencil/`, and \n* `/vendor/`.\n\n\nYou can see the components directory and its children present in the [Cornerstone Theme Github Repository](https://github.com/bigcommerce/cornerstone/tree/master/assets/scss/components).",
                        "header": {
                          "anchor": "components_components-directory"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## The `citadel` Subdirectory\n\nThe `components/citadel` subdirectory contains Citadel-specific resources. The resources are named according to our [style guide](https://github.com/bigcommerce/sass-style-guide), which follows [BEM](http://getbem.com/naming/) and [SUIT CSS](https://github.com/suitcss/suit/blob/master/doc/naming-conventions.md) naming conventions: Class names are structured, and hyphens are meaningful (that is, hyphens are not used merely to separate words). \n\nAs a general rule, classes here are named functionally, not based on their visual presentation or their content. Here are some prototypes and examples:\n\n* `componentName` (for example: `.dropdown or .buttonGroup`)\n\n* `componentName--modifierName` (for example: `.dropdown--dropUp` or `.button--primary`)\n\n* `componentName-descendantName` (for example: `.dropdown-item`)\n\n* `componentName.is-stateOfComponent` (for example: `.dropdown.is-active`)\n\n* `u-utilityName` (for example: `.u-textTruncate`)\n\n* Abstractly: `[<namespace>-]<componentName>[--modifierName|-descendentName]`\n\n### Components versus Utilities\n\nOur naming scheme makes an architectural distinction between components and utilities. Components are defined as custom elements that enclose specific semantics, styling, and behavior. Our syntax for naming them is:\n\n`<componentName>[--modifierName|-descendantName]`\n\nComponent names are in camel case. We have tried to choose names that are as short as possible, but as long as necessary. For example:\n\n* `.nav`, not `.navigation`; but:\n* `.button`, not `.btn`\n\nUtility classes are defined as low-level, structural and positional traits. Utilities can be applied directly to any element. Multiple utilities can be used together, and utilities can be used alongside component classes.\n\nTo make HTML patterns as reusable as possible, we have used utility classes sparingly, reserving them for component-level styling.\n\nOur syntax for naming utilities is camel case, prefixed with a `u-` namespace:\n\n`u-<utilityName>`\n\n### Variables and Mixins\n\nCitadel variables and mixins follow similar naming conventions.\n\nVariables are things that can change over time. Their names are in camel case, and show context:\n\n` [<componentName>[--modifierName][-descendentName]-<propertyName>\n-<variablename>[--<modifierName>]`\n\nMixins follow regular camel-case naming conventions. Namespacing is not universally required for mixins. However, where a mixin has been created for a utility, its name matches the utility’s name, including `u-` namespacing:\n\n```\n@mixin buttonVariant;\n@mixin u-textTruncate;\n```",
                        "header": {
                          "anchor": "components_citadel-sub"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## `foundation` Subdirectory\n\nThe `/components/foundation/` subdirectory contains files installed by the [ZURB Foundation framework](https://foundation.zurb.com/showcase/about.html). (Stencil's Foundation support is limited to version 5.5.3.)\n",
                        "header": {
                          "anchor": "components_foundation-sub"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## `stencil` Subdirectory\n\nThe `/components/stencil/` subdirectory contains CSS files unique to Stencil themes, which are used to create specific page elements within the themes. You can view this subdirectory and all its children in the [Cornerstone Theme Github Repository](https://github.com/bigcommerce/cornerstone/tree/master/assets/scss/components/stencil).\n\nThis subdirectory’s children contain CSS for the following page elements:\n\nThis subdirectory’s children contain CSS for the following page elements:\n\n<p></p><table>\n  <tbody><tr>\n    <th>Subdirectory</th>\n    <th>UI Element/Purpose</th>\n  </tr>\n  <tr>\n    <td>account</td>\n    <td>Customer account details</td>\n  </tr>\n  <tr>\n    <td>addressBox</td>\n    <td>Customer shipping addresses</td>\n  </tr>\n  <tr>\n    <td>addReturn</td>\n    <td>Add a product-return request</td>\n  </tr>\n  <tr>\n    <td>banners</td>\n    <td>Banners displayed across storefront’s top and bottom</td>\n  </tr>\n  <tr>\n    <td>blocker</td>\n    <td>Position .blocker element above another element, to prevent a user action</td>\n  </tr>\n  <tr>\n    <td>compare</td>\n    <td>Layout for product-comparison table</td>\n  </tr>\n  <tr>\n    <td>facetedSearch</td>\n    <td>Faceted-search toggle (on/off), navigation list, and filters</td>\n  </tr>\n  <tr>\n    <td>facetLabel</td>\n    <td>Labels for faceted-search display</td>\n  </tr>\n  <tr>\n    <td>heroCarousel</td>\n    <td>Carousel of prominent (\"hero\") images</td>\n  </tr>\n  <tr>\n    <td>navPages</td>\n    <td>Styles for page navigation, with responsive layout</td>\n  </tr>\n  <tr>\n    <td>navUser</td>\n    <td>Styles for cart counter, quick search</td>\n  </tr>\n  <tr>\n    <td>productCarousel</td>\n    <td>Carousel of product images</td>\n  </tr>\n  <tr>\n    <td>productReviews</td>\n    <td>Styles for product reviews</td>\n  </tr>\n  <tr>\n    <td>productView</td>\n    <td>Product display (with thumbnails suppressed for mobile/tablet), product details, product options (size, color, etc.), product sharing</td>\n  </tr>\n  <tr>\n    <td>quickView</td>\n    <td>Quick-view modal window for a selected product</td>\n  </tr>\n  <tr>\n    <td>ribbon</td>\n    <td>Top-right text badges, for messages like \"On sale\"</td>\n  </tr>\n  <tr>\n    <td>socialLinks</td>\n    <td>Styles for social-media links</td>\n  </tr>\n  <tr>\n    <td>tags</td>\n    <td>Styles for blog-post tags</td>\n  </tr>\n  <tr>\n    <td>toggleLink</td>\n    <td>Styles for collapsible/expandable components</td>\n  </tr>\n  <tr>\n    <td>writeReview</td>\n    <td>Styles for product-review submission form</td>\n  </tr>\n</tbody></table>\n",
                        "header": {
                          "anchor": "components_stencil-sub"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## `vendor` Subdirectory\n\nThe `/components/vendor/` subdirectory contains the consumed version of framework components from your chosen provider. There is some renaming of these components to match Stencil naming conventions.",
                        "header": {
                          "anchor": "components_vendor-sub"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Layouts, Utilities, & Settings Directories",
                  "route": {
                    "path": "/layouts-and-utilities-directory"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>The <code>layouts</code>, <code>utilities</code>, and <code>settings</code> Directories</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#layouts-utilities-settings_the-layouts-directory\">The <code>layouts</code> Directory</a></li>\n    <li><a href=\"#layouts-utilities-settings_the-utilities-directory\">The <code>utilities</code> Directory</a></li>\n    <li><a href=\"#layouts-utilities-settings_the-settings-directory\">The <code>settings</code> Directory</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## The `layouts` Directory\n\nThe `<theme-name>/assets/scss/layouts/` subdirectory contains `.scss` files that provide default styling for major layout components of theme pages. You can see the `/layouts/` subdirectory's internal structure on the [Cornerstone Github Repository](https://github.com/bigcommerce/cornerstone/tree/master/assets/scss/layouts)",
                        "header": {
                          "anchor": "layouts-utilities-settings_the-layouts-directory"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## The `utilities` Directory\n\nThe `<theme-name>/assets/scss/utilities` subdirectory contains mixins and tools, beyond the Citadel library, that help create UI’s. You can apply these CSS snippets to your HTML for quick prototyping when you need a unique, yet repeatable, style.\n\nEvery utility in this subdirectory will have both a class and a mixin. For example, consider the utility `truncatedText:` You can use it by applying the class `.u-truncatedText`, or by applying the mixin @include u-truncatedText;.",
                        "header": {
                          "anchor": "layouts-utilities-settings_the-utilities-directory"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## The `settings` Directory\n\nThe `<theme-name>/assets/scss/settings/` subdirectory contains SCSS variables for your framework. Files here map directly to components. If present, these variables override defaults in consumed libraries. The `/settings/` subdirectory's internal structure can be viewed at the [Cornerstone Github Repository](https://github.com/bigcommerce/cornerstone/tree/master/assets/scss/settings) \n\t\nThe nested subdirectory for your chosen framework contains a file that includes that framework’s variables. (For example, in the default Stencil theme, this file is: `/settings/foundation/_foundation.scss`.)\n\nWithin each subdirectory nested at the ultimate level is one primary file, `_settings.scss`, that imports all other variables that have been broken into logical files (such as `_colors.scss`, `_typography.scss`, and `_z-index.scss`).\n\t\n### Sass Stylesheet Support for Theme Fonts\n\t\nTo support Theme Editor, your theme's Sass stylesheet must call Stencil's custom Sass functions to transform fonts specified in the theme's `config.json` file. You must call these functions on each `config.json` font key whose value you want to make available to Sass variables.\n\nThe default Stencil theme includes these function calls in this stylesheet:\n`<theme-name>/assets/scss/settings/foundation/type/_settings.scss`. However, if your theme relies on a Sass framework other than Foundation, the relevant stylesheet will be a different .scss file name within `<theme-name>/assets/scss/`.\n\n\t\n### How to Enable Fonts for Theme Editor\n\nAssume that your theme's `config.json` contains the following key name and value (the details of both are arbitrary, but the key name must end in `-font`, and the value must follow a defined format):\n\t\n`\"headings-font\": \"Google_Open+Sans_700\"`\n\t\nIn your Sass stylesheet, you would call the stencilFontFamily and stencilFontWeight custom Sass functions on the corresponding `config.json` key name:\n\t\n```\n$body-font-family: stencilFontFamily(\"body-font\");\n$body-font-weight: stencilFontWeight(\"body-font\");\n```\n\nThese functions would extract the corresponding `config.json` values as:\n\n```\n$body-font-family: 'Open Sans';\n$body-font-weight: 700;\n```\n\t\nThis transformation allows you to use the `$body-font-family` and `$body-font-weight` variables wherever needed in your theme. If a merchant uses Theme Editor to select a different font family and/or weight, the variables will propagate the change throughout your theme.\n",
                        "header": {
                          "anchor": "layouts-utilities-settings_the-settings-directory"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Custom Sass Functions",
                  "route": {
                    "path": "/custom-sass-functions"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Custom Sass Functions</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#custom-sass-functions_stencilcolor\">stencilColor Function</a></li>\n    <li><a href=\"#custom-sass-functions_stencilfontfamily\">stencilFontFamily Function</a></li>\n    <li><a href=\"#custom-sass-functions_stencilfontweight\">stencilFontWeight Function</a></li>\n    <li><a href=\"#custom-sass-functions_stencilnumber\">stencilNumber Function</a></li>\n    <li><a href=\"#custom-sass-functions_stencilstring\">stencilString Function</a></li>\n    <li><a href=\"#custom-sass-functions_stencilimage\">stencilImage Function</a></li>\n    <li><a href=\"#custom-sass-functions_compiling-custom-sass-files\">Compiling Custom Sass Files</a></li>\n\t</ul>\n</div>\n"
                      },
                      {
                        "type": "text",
                        "data": "## stencilColor Function\n\nstencilColor accepts (as a string) the key name of a color that you have defined in config.json as editable. It returns the color’s hexadecimal value.\n\nIn Stencil's Cornerstone (1.4.0) base theme, the optimized-checkout.scss file sets the background color for the page's header with the following code:\n\n```\n.optimizedCheckout-header {\n    background-color: stencilColor(\"optimizedCheckout-header-backgroundColor\");\n    // scss-lint:disable StringQuotes\n    background-image: url(stencilImage('optimizedCheckout-backgroundImage', 'optimizedCheckout-backgroundImage-size'));\n    // scss-lint:enable StringQuotes\n    background-size: cover;\n    ...\n}\n```\n\nThe above CSS fetches the background-color property's value by using the stencilColor() function to retrieve the optimizedCheckout-header-backgroundColor key's current value.\n\nThat optimizedCheckout-header-backgroundColor key is defined, and assigned a default value, in config.json. However, merchants can use Theme Editor to change the value at any time. So using this stencilColor() call, the key's current value (which might have been altered from the static default value in config.json) will be fetched from a BigCommerce settings server.",
                        "header": {
                          "anchor": "custom-sass-functions_stencilcolor"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## stencilFontFamily Function\n\nstencilFontFamily accepts (as a string) the name of a font key that you have defined in config.json. It returns the corresponding font-family value, also as a string. For a key named \"headings-font\" and defined as Google Open Sans, stencilFontFamily would return a value like this to Sass variables:\n\n`$headings-‐font-‐family: 'Open Sans';`\n\n(The above example's name and definition in config.json are both arbitrary.)\n\nYour Sass stylesheet must call stencilFontFamily for each config.json font key whose font-family value you want to provide to Sass variables. You would call the function in the following format (again assuming a key arbitrarily named \"headings-font\"):\n\n`$headings-font-family: stencilFontFamily(\"headings-font\");`",
                        "header": {
                          "anchor": "custom-sass-functions_stencilfontfamily"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## stencilFontWeight Function\n\nstencilFontWeight accepts (as a string) the key name of a font that you have defined in config.json. It returns (as an integer) the corresponding font-weight value. For a key arbitrarily named \"headings-font\" and defined as 700, it would return a value like this to Sass variables:\n\n`$headings-‐font-‐weight: 700;`\n\nYour Sass stylesheet may optionally call stencilFontWeight for each config.json font key whose weight value you want to provide to Sass variables. You would call the function in the following format:\n\n`$headings-font-weight: stencilFontWeight(\"headings-font\");`",
                        "header": {
                          "anchor": "custom-sass-functions_stencilfontweight"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## stencilNumber Function\n\n`stencilNumber` accepts (as a string) a key name that you have defined in `config.json` as editable. It also accepts (also as a string) an _optional_ second parameter to define the unit. (This second parameter’s value defaults to `\"px\"`.) It returns the corresponding numeric value, postfixed with the defined unit.\n\nYou can use this function with arithmetical operators. For example, assume that your `config.json` contains a `\"font-size\"` value of `\"3\"`. The following statement would evaluate to `9rem`.\n\n`stencilNumber(\"font-size\", \"rem\") * 3`",
                        "header": {
                          "anchor": "custom-sass-functions_stencilnumber"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## stencilString Function\n\n`stencilString` accepts (as a string) a key name that you have defined in `config.json` as editable. It returns (also as a string) the key’s value. This function is used for purposes like defining font family names, or defining paths to images.",
                        "header": {
                          "anchor": "custom-sass-functions_stencilstring"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## stencilImage Function\n\n`stencilImag`e accepts (as a string) a key name for an image url that you have defined in `config.json`. It also accepts (as a string) the key name for the image size that you have defined in `config.json`. It returns the string value of the image URL and the size.",
                        "header": {
                          "anchor": "custom-sass-functions_stencilimage"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Compiling Custom Sass Files\n\nIf you want to add your own custom Sass files, initiate auto-compilation of those files by including the associated tag in your HTML markup. Cornerstone's Sass file is named:\n\n`/cornerstone/assets/scss/theme.scss`\n\nTo add a custom Sass file, place it at this path location, using an arbitrary filename prefix as shown:\n\n`<theme-name>/assets/scss/<your-theme-or-file-name>.scss`\n\nFor example, to use the Foundation Sass framework, you might need:\n\n`<theme-name>/assets/scss/main.scss`\n`<theme-name>/assets/scss/widgets.scss`\n\nNext, be sure the following tag is included within your `<theme-name>/templates/layout/base.html` file’s `<head>` tag, to compile your Sass to the specified object file:\n\n`{{stylesheet '/assets/css/theme.css'}}`\n\nWhile `stencil start` is running, it will recompile your custom Sass files to the specified `<theme-name>/assets/css/theme.css` file. (Note that this object file’s name is always the same, and is independent of your custom Sass files’ names.) For an additional example, please see Replacing Content Blocks.\n",
                        "header": {
                          "anchor": "custom-sass-functions_compiling-custom-sass-files"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "type": "warning",
                          "body": "The Stencil framework is designed to support your incorporation of custom Sass files/frameworks. However, BigCommerce does not offer technical assistance on substitutions for, or customized versions of, Stencil's default dependencies.",
                          "title": "Before You Customize"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Page Composition and Styling",
                  "route": {
                    "path": "/page-composition-and-styling"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Page Composition and Styling</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#page-composition_referencing-css-stylesheet\">Referencing a CSS Stylesheet</a></li>\n    <li><a href=\"#page-composition_template-composition\">Template Composition</a></li>\n\t</ul>\n</div>\n\n\n\n\n"
                      },
                      {
                        "type": "text",
                        "data": "## Referencing a CSS Stylesheet\n\nTo apply CSS styling to a page in your theme, make sure that page's code includes a reference to the stylesheet you want to use. This example does so using the `{{partial}}` and `{{cdn}}` custom Handlebars helpers:\n\n```\n{{#partial \"head\"}}\n    <link href=\"{{cdn '/assets/css/invoice.css'}}\" rel=\"stylesheet\">\n{{/partial}}\n```",
                        "header": {
                          "anchor": "page-composition_referencing-css-stylesheet"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Template Composition\n\nTemplate composition is a valuable Stencil feature. By defining blocks of overrideable content, your themes can insert templates on a per-page basis, while sharing code that is common to the whole theme.\n\n### Defining Content Blocks\n\nA base template defines content blocks by name. The following snippet uses `{{block}}` custom Handlebars helpers to define three content blocks, respectively named `head`, `hero`, and `page`:\n\n```\n// templates/layout/base.html\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>{{ head.title }}</title>\n        {{#block \"head\"}} {{/block}}\n    </head>\n    <body>\n        <div class=\"body\">\n\t\t    {{#block \"hero\"}} {{/block}}\n\t\t    <div class=\"container\">\n\t\t        {{#block \"page\"}} {{/block}}\n\t\t    </div>\n\t\t    {{> components/common/modal}}\n        </div>\n    </body>\n</html>\n```\n\n### Replacing Content Blocks\n\nPages can use a base template, replacing the defined blocks with their own content. This example replaces content for the head and page blocks:\n\n```\n//templates/pages/account/orders/invoice.html\n{{#partial \"head\"}}\n    <link href=\"{{cdn '/assets/css/invoice.css'}}\" rel=\"stylesheet\">\n{{/partial}}\n\n{{#partial \"page\"}}\n    <p>An invoice for a particular order would go here</p>\n{{/partial}}\n{{> layout/empty}}\n```\n\n### Matching Partials with Blocks\n\nWe recommend that, for any given name defined within the template rendering path, you maintain a 1:1 mapping of partials to blocks.",
                        "header": {
                          "anchor": "page-composition_template-composition"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Using Custom Fonts",
                  "route": {
                    "path": "/using-custom-fonts"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Using Custom Fonts</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#using-custom-fonts_stage-the-fonts\">Stage the Fonts</a></li>\n    <li><a href=\"#using-custom-fonts_reference-fonts\">Reference Fonts in Templates' <code>head</code></a></li>\n    <li><a href=\"#using-custom-fonts_video-demo\">Video Demo</a></li>\n    <li><a href=\"#using-custom-fonts_update-the-css\">Update the CSS</a></li>\n\t</ul>\n</div>\n"
                      },
                      {
                        "type": "callout",
                        "data": {
                          "type": "warning",
                          "title": "Custom Fonts Unavailable on Theme Editor",
                          "body": "On the current Stencil framework, custom fonts that you incorporate using this process will not be available for selection in Theme Editor."
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Stage the Fonts\n\nFirst, acquire your custom fonts. In this logo scenario, we'll assume the single (nonexistent) font `MyFontFile.ttf`.\nNext, [use WebDav to upload each custom font](). (Upload to WebDAV's default `/content/` folder.)\n",
                        "header": {
                          "anchor": "using-custom-fonts_stage-the-fonts"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Reference Fonts in Templates' `<head>`\n\nNext, edit the appropriate template files' `<head>` sections to reference your custom fonts. In this logo example, you would edit the `/cornerstone/templates/layout/base.html` file's `<head>` section to insert the following code, which references the custom font you just uploaded:\n\t\n```\n<style type=\"text/css\" media=\"screen, print\">\n           @font-face {\n               font-family: \"MyFont\";\n               src: url(\"{{cdn 'webdav:MyFontFile.ttf'}}\");\n           }\n</style>\n```",
                        "header": {
                          "anchor": "using-custom-fonts_reference-fonts"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Video Demo\n\nWatch a video demonstration of referencing custom fonts in your template files' `<head>` sections: \n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/-w7Hbn_p_pw\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>",
                        "header": {
                          "anchor": "using-custom-fonts_video-demo"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Update the CSS\n\nFinally, update the appropriate CSS to reference the same font. Here, you would edit the `/cornerstone/assets/scss/layouts/header/_header.scss` file to include the two lines below `.header-logo-text`:\n\n```\n.header-logo-text {\ndisplay: block;\n   font-family: 'MyFont';\n   [...]\n}\n```",
                        "header": {
                          "anchor": "using-custom-fonts_update-the-css"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "title": "Notes",
                          "body": "* The cdn custom Handlebars helper assumes WebDAV's default /content/ folder, so there is no need to specify that folder.\n* Fonts staged via WebDAV, as in the above example, will not show up in the local version of your theme."
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Using and Updating Icons",
                  "route": {
                    "path": "/using-and-updating-icons"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Using and Updating Icons</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#using-and-updating-icons_installing-grunt\">Installing Grunt</a></li>\n    <li><a href=\"#using-and-updating-icons_calling-theme-icons\">Calling Theme Icons</a></li>\n    <li><a href=\"#using-and-updating-icons_adding-new-icons\">Adding New Icons</a></li>\n    <li><a href=\"#using-and-updating-icons_video-demo\">Video Demo</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Installing Grunt\n\nSome of a Stencil theme's static assets are handled with the Grunt JavaScript automator, where required. This means that you have some dependencies on both Grunt and npm. To get started:\n\nFirst, make sure you have Grunt installed globally on your machine:\n\n`npm install -g grunt-cli`\n\nThen, from your theme's root directory, run:\n\n`npm install`\n",
                        "header": {
                          "anchor": "using-and-updating-icons_installing-grunt"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Calling Theme Icons \n\nA Stencil theme's icons are delivered via a single SVG sprite, which is embedded on the page in\n`<theme-name>templates/layout/base.html`. This sprite is generated via the Grunt task `grunt svgstore`.\n\nThe task takes individual SVG files for each icon (in the theme's `assets/icons/` subdirectory) and bundles\nthem together, to be inlined on the top of the theme, inside a Handlebars partial.\n\nYou can then call each icon in a similar way to an inline image, via:\n\n`<svg><use xlink:href=\"#icon-svgFileName\" /></svg>`\n\nThe ID of each SVG icon you call is based on the filename of the icon you want, with `icon-` prepended.\nFor example:\n\n`xlink:href=\"#icon-facebook\"`",
                        "header": {
                          "anchor": "using-and-updating-icons_calling-theme-icons"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Adding New Icons\n\nSimply add your new icon SVG file to the `assets/icons/ `folder. Then, from your theme's root directory, run `grunt svgstore` or just `grunt`.",
                        "header": {
                          "anchor": "using-and-updating-icons_adding-new-icons"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Video Demo\n\nWatch a video demonstration of installing Grunt and using it to update your theme's SVG sprite with custom icons: \n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/-w7Hbn_p_pw\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n",
                        "header": {
                          "anchor": "using-and-updating-icons_video-demo"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Event Hooks",
            "route": {
              "path": "/adding-event-hooks-to-your-theme"
            },
            "data": {
              "children": [
                {
                  "title": "Event Hook Overview and Examples",
                  "route": {
                    "path": "/event-hook-overview-and-examples"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Event Hook Overview and Examples</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#event_event-hook\">Event Hook Overview</a></li>\n    <li><a href=\"#event_cookie-notification\">Cookie Notification Example</a></li>\n    <li><a href=\"#event_cart-dialog\">Cart Dialog Example</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Event Hook Overview \n\nStencil themes provide access to remote resources through data tags and event hooks. Developers can use these hooks to trigger defined events: A theme can hook to an event to perform its own actions or calculations, based on shopper behavior.\n\nYour Stencil themes incorporate these resources by importing the stencil-utils module, using this statement:\n\n`import utils from '@bigcommerce/stencil-utils';`",
                        "header": {
                          "anchor": "event_event-hook"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Cookie Notification Example\n\nIn the JavaScript-only example below, the `cookie-privacy-notification` hook enables customization of the alert window that displays European Union–required cookie notifications:\n\nFirst, ensure you have loaded the `stencil-utils` package with the following command:\n\n`import utils from '@bigcommerce/stencil-utils';`\n\nEuropean websites must notify users of cookies to comply with European Union law.\nThe following code implements hook that will alert shoppers that the website uses cookies.\n\n```\nexport default function() {\n\n  // Here you can override the default browser alert box by\n  // hooking to the 'cookie-privacy-notification' hook.\n  utils.hooks.on('cookie-privacy-notification', (event, privacyMessage) => {\n\n    // You can make your own custom modal or alert box\n    // appear in your theme using the privacyMessage provided\n    myCustomAlert(privacyMessage);\n\n    // Call event.preventDefault() to prevent the default\n    // browser alert from occurring in stencil-utils\n    event.preventDefault();\n  });\n}\n```\n\nA theme could listen for the `cookie-privacy-notification` event to override the browser’s default notification UI.\n",
                        "header": {
                          "anchor": "event_cookie-notification"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Cart Dialog Example\n\nIn the following code snippet from Cornerstone in [templates/components/products/product-view.html](https://github.com/bigcommerce/cornerstone/blob/master/templates/components/products/product-view.html), note the data tag named `data‑cart‑item‑add`:\n\n```\n<form class=\"form\" method=\"post\" action=\"{{product.cart_url}}\"\n    enctype=\"multipart/form-data\" data-cart-item-add>\n```\n\nThis data tag enables the emission of the `cart‑item‑add` event in this next snippet:\n\n```\n/*  \n * Import all product-specific js \n */\n[...]\nimport utils from '@bigcommerce/stencil-utils';\n[...]\naddProductToCart() {\n    utils.hooks.on('cart-item-add', (event) => {\n        event.preventDefault();\n    });\n}\n```\n",
                        "header": {
                          "anchor": "event_cart-dialog"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Remote API Example",
                  "route": {
                    "path": "/remote-api-example"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Remote API Example</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#remote_remote-api-example\">Remote API Example</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Remote API Example\n\nClient-side JavaScript can access event hooks directly, without using Handlebars statements. By setting up listeners for these events, you can exercise granular control over your storefront’s user interface. For example, you can pop up custom windows when certain events occur.\n\nBelow is an example implemented within a Stencil theme. This code adds an item to the shopping cart, and displays the result in a custom modal dialog rather than a cart page.\n\n_This particular example uses certain conventions of ES6 JavaScript (also known as ECMAScript 6 or\nECMAScript 2015)._\n\nHere is the signature of the cart.itemAdd function used below, with parameters for product ID, quantity, and options:\n\n`itemAdd(FormData, callback)`\n\nHere is the signature of the cart.getContent function used further down:\n\n`getContent(options, callback)`\n\nThis first complete code snippet calls `cart.itemAdd`, catches any errors, and displays the cart contents in a modal dialog: \n\n```\n // Add item to cart\n        utils.api.cart.itemAdd(new FormData(form), (err, response) => {\n            const errorMessage = err || response.data.error;\n\n            $addToCartBtn\n                .val(originalBtnVal)\n                .prop('disabled', false);\n\n            this.$overlay.hide();\n\n            // Guard statement\n            if (errorMessage) {\n                // Strip the HTML from the error message\n                const tmp = document.createElement('DIV');\n                tmp.innerHTML = errorMessage;\n\n                return alert(tmp.textContent || tmp.innerText);\n            }\n\n            // Open preview modal and update content\n            if (this.previewModal) {\n                this.previewModal.open();\n\n                this.updateCartContent(this.previewModal, response.data.cart_item.hash);\n            } else {\n                this.$overlay.show();\n                // if no modal, redirect to the cart page\n                this.redirectTo(response.data.cart_item.cart_url || this.context.urls.cart);\n            }\n        });\n```\n\nThis final code snippet calls `cart.getContent` to fetch the cart contents, then display it in a preview format, which is specified by a `template` option with a value of `cart/preview`:\n\n```\n  /**\n     * Get cart contents\n     *\n     * @param {String} cartItemHash\n     * @param {Function} onComplete\n     */\n    getCartContent(cartItemHash, onComplete) {\n        const options = {\n            template: 'cart/preview',\n            params: {\n                suggest: cartItemHash,\n            },\n            config: {\n                cart: {\n                    suggestions: {\n                        limit: 4,\n                    },\n                },\n            },\n        };\n\n        utils.api.cart.getContent(options, onComplete);\n    }\n```",
                        "header": {
                          "anchor": "remote_remote-api-example"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Data Tags & Event Hooks",
                  "route": {
                    "path": "/data-tags-event-hooks-reference"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Data Tags/Event Hook Reference</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#data_stencil-data-tags\">Stencil Data Tags and Event Hooks</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Stencil Data Tags and Event Hooks\nStencil themes provide the following chains of data tags, delegated DOM (Document Object Model) events, emitted Stencil event hooks, and Stencil event parameter(s).\n\n### Cart Item Added\n\nHook for items added to the customer’s shopping cart.\n\n**Function Signature:**\n\n```\nitemAdd() {\n    this.$body.on('submit', '[data-cart-item-add]', (event) => {\n        this.emit('cart-item-add', event, event.target);\n    });\n}\n```\n\n<table>\n\t<tr>\n\t\t<th>Data Tag</th>\n\t\t<th>Delegated DOM Event</th>\n\t\t<th>Stencil Event/Hook</th>\n\t\t<th>Stencil Event Parameter(s)</th>\n\t</tr>\n\t<tr>\n\t\t<td>data-cart-item-add</td>\n\t\t<td>submit</td>\n\t\t<td>cart-item-add</td>\n\t\t<td>event, event.target</td>\n\t</tr>\n</table>\n\n### Faceted-Search Events\n\nHooks for faceted-search selections that the customer initiates or submits.\n\n**Function Signature**\n\n```\nsearchEvents() {\n  this.$body.on('click', '[data-faceted-search-facet]', (event) => {\n        this.emit('facetedSearch-facet-clicked', event);\n  });\n \n  this.$body.on('submit', '[data-faceted-search-range]', (event) => {\n        this.emit('facetedSearch-range-submitted', event);\n  });\n}\n\n```\n\n<table>\n\t<tr>\n\t\t<th>Data Tag</th>\n\t\t<th>Delegated DOM Event</th>\n\t\t<th>Stencil Event/Hook</th>\n\t\t<th>Stencil Event Parameter(s)</th>\n\t</tr>\n\t<tr>\n\t\t<td>data-faceted-search-facet</td>\n\t\t<td>click</td>\n\t\t<td>facetedSearch-facet-clicked</td>\n\t\t<td>event</td>\n\t</tr>\n\t<tr>\n\t\t<td>data-faceted-search-range</td>\n\t\t<td>submit</td>\n\t\t<td>facetedSearch-range-submitted</td>\n\t\t<td>event</td>\n\t</tr>\n</table>",
                        "header": {
                          "anchor": "data_stencil-data-tags"
                        }
                      }
                    ]
                  },
                  "config": {
                    "sidebar": {
                      "token": "Reference"
                    }
                  }
                },
                {
                  "title": "stencil-utils",
                  "route": {
                    "path": "/stencil-utils-api-reference"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>stencil-utils API Reference</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#remote_remote-api-example\">stencil-utils API Reference</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "<h2> <A NAME=\"API-js\"></a>API [api.js]</h2>\n\nThe <span class=\"inline-code\">api.getPage()</span> function allows you to add Ajax functionality to your themes.<br>\n\n<br> <span id=\"getpage\"> <b>getPage Signature</b> </span> <br>\n\nThe following statement passes <code>url</code> and <code>options</code> arguments to the <code>api.getPage()</code> function:\n\n<code>utils.api.getPage(url, options, callback)</code>\n\n<table>\n  <tbody><tr>\n    <th>Argument</th>\n    <th>Type</th>\n    <th>Description/Usage</th>\n  </tr>\n  <tr>\n    <td class=\"\">url</td>\n    <td class=\"\">String</td>\n    <td class=\"\">URL to which you want to send a request (for example: localhost:4000/cart.php)</td>\n  </tr>\n  <tr>\n    <td class=\"\">options</td>\n    <td class=\"\">Object</td>\n    <td class=\"\">Can contain <span class=\"inline-code\">template</span>, <span class=\"inline-code\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FormData\">FormData</a></span> (for POST methods), <span class=\"inline-code\">params</span>&nbsp;(for GET methods), and/or <span class=\"inline-code\">config</span>. <br><br>    \n      The <span class=\"inline-code\">template</span> option allows you to select a particular template, or an array of templates, for rendering one page. Each value must correspond to a file present in the theme's <span class=\"inline-code\">templates/components/</span> subdirectory. <br><br>\n      The <span class=\"inline-code\">config</span> option can be used to pass extra resources, corresponding to attributes that are valid in a page's <a href=\"/docs/using-yaml-front-matter\">front matter</a>, as an object.\n    </td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody></table>\n\nThe <span class=\"inline-code\">config</span> argument works like front matter: it encapsulates JSON. For a usage example of <span class=\"inline-code\">config</span>, see <NOBR><a href=\"/docs/remote-api-example\">Remote API Example</a></nobr>. <br><br>",
                        "header": {
                          "anchor": "remote_remote-api-example"
                        }
                      },
                      {
                        "type": "text",
                        "data": "### getPage Example\n\nIn the following example (from <code>common/faceted-search.js</code>), <code>api.getPage()</code> is called to help execute an <code>updateView()</code> function:\n\n```\nupdateView() {\n        $(this.options.blockerSelector).show();\n\n        api.getPage(urlUtils.getUrl(), this.requestOptions, (err, content) => {\n            $(this.options.blockerSelector).hide();\n\n            if (err) {\n                throw new Error(err);\n            }\n\n            // Refresh view with new content\n            this.refreshView(content);\n        });\n    }\n```"
                      },
                      {
                        "type": "text",
                        "data": "## Cart API \n\nThe following functions allow your theme to work with cart contents in customized ways.\n\n<b>itemAdd Signature</b>\n\nThe <code>itemAdd</code> function allows your code to add an item to the cart, with options:\n\n```\nutils.api.cart.itemAdd(<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FormData\">FormData</a>, callback)\n```\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\"><A NAME=\"CartAPI-FormData\"></a>formData</td>\n    <td class=\"\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FormData\">FormData</a> object </td>\n    <td class=\"\">Contains all details about the added item and its product options</td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody></table>\n\n\n<span id=\"itemAddEx\"> <b>itemAdd Example</b> </span> <br>\n\n<span class=\"inline-code\">itemAdd</span> is called at the head of the following example (from <span class=\"inline-code\">common/product-details.js</span>) to populate the cart:<br><p></p>\n\n<pre>        // Add item to cart\n        utils.api.cart.itemAdd(new FormData(form), (err, response) => {\n            const errorMessage = err || response.data.error;\n\n            $addToCartBtn\n                .val(originalBtnVal)\n                .prop('disabled', false);\n\n            this.$overlay.hide();\n\n            // Guard statement\n            if (errorMessage) {\n                // Strip the HTML from the error message\n                const tmp = document.createElement('DIV');\n                tmp.innerHTML = errorMessage;\n\n                return alert(tmp.textContent || tmp.innerText);\n            }\n\n            // Open preview modal and update content\n            if (this.previewModal) {\n                this.previewModal.open();\n\n                this.updateCartContent(this.previewModal, response.data.cart_item.hash);\n            } else {\n                this.$overlay.show();\n                // if no modal, redirect to the cart page\n                this.redirectTo(response.data.cart_item.cart_url || this.context.urls.cart);\n            }\n        }); </pre><br>\n\n\n<b>itemUpdate Signature</b><br>\n\nThe <code>itemUpdate</code> function allows your code to update a specified cart item’s quantity:\n\n`utils.api.cart.itemUpdate(itemId, qty, callback)`\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\">itemId</td>\n    <td class=\"\">String</td>\n    <td class=\"\">The item’s ID</td>\n  </tr>\n  <tr>\n    <td class=\"\">qty</td>\n    <td class=\"\">Integer</td>\n    <td class=\"\">The item’s quantity in the cart</td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody></table>\n\n<span id=\"itemUpdateEx\"> <b>itemUpdate  Example</b> </span> <br>\n\nIn the following example (from <span class=\"inline-code\">cart.js</span>), <span class=\"inline-code\">itemUpdate</span> is called just before the final if/else test for an empty cart:<br><p></p>\n\n<pre>    cartUpdate($target) {\n        const itemId = $target.data('cartItemid');\n        const $el = $(`#qty-${itemId}`);\n        const oldQty = parseInt($el.val(), 10);\n        const maxQty = parseInt($el.data('quantityMax'), 10);\n        const minQty = parseInt($el.data('quantityMin'), 10);\n        const minError = $el.data('quantityMinError');\n        const maxError = $el.data('quantityMaxError');\n        const newQty = $target.data('action') === 'inc' ? oldQty + 1 : oldQty - 1;\n\n        // Does not quality for min/max quantity\n        if (newQty < minQty) {\n            return swal({\n                text: minError,\n                type: 'error',\n            });\n        } else if (maxQty > 0 && newQty > maxQty) {\n            return swal({\n                text: maxError,\n                type: 'error',\n            });\n        }\n\n        this.$overlay.show();\n\n        utils.api.cart.itemUpdate(itemId, newQty, (err, response) => {\n            this.$overlay.hide();\n\n            if (response.data.status === 'succeed') {\n                // if the quantity is changed \"1\" from \"0\", we have to remove the row.\n                const remove = (newQty === 0);\n\n                this.refreshContent(remove);\n            } else {\n                $el.val(oldQty);\n                swal({\n                    text: response.data.errors.join('\\n'),\n                    type: 'error',\n                });\n            }\n        });\n    } </pre><br>\n\n\n<b>itemRemove Signature</b><br>\n\nThe <span class=\"inline-code\">itemRemove</span> function allows your code to remove items from the cart:<br>\n\n<p></p><pre>utils.api.cart.itemRemove(itemId, callback)</pre>\n <br>\n\n<table>\n  <tbody>\n\t<tr>\n    <th>Argument</td>\n    <th>Type</td>\n    <th>Description/Usage</td>\n  </tr>\n  <tr>\n    <td>itemId</td>\n    <td>String</td>\n    <td>The item’s ID</td>\n  </tr>\n  <tr>\n    <td>callback</td>\n    <td>Function</td>\n    <td>Asynchronous function call to handle the results</td>\n  </tr>\n\t</tbody>\n</table>\n\n\n<span id=\"itemRemoveEx\"> <b>itemRemove Example</b> </span><br>\n\nIn the following example (from <span class=\"inline-code\">cart.js</span>), <span class=\"inline-code\">itemRemove</span> is called before the if/else test:<br><p></p>\n\n<pre>    cartRemoveItem(itemId) {\n        this.$overlay.show();\n        utils.api.cart.itemRemove(itemId, (err, response) => {\n            if (response.data.status === 'succeed') {\n                this.refreshContent(true);\n            } else {\n                alert(response.data.errors.join('\\n'));\n            }\n        });\n    } </pre><br>\n\n\n<b>update Signature</b><br>\n\nThe <span class=\"inline-code\">update</span> function allows your code to update the set of items in the cart:<br>\n\n<p></p><pre>utils.api.cart.update(itemId, qty, callback)</pre>\n\n <br>\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\">items</td>\n    <td class=\"\">Array</td>\n    <td class=\"\">The items in the cart</td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody></table>\n\n\n<b>update Example</b><br>\n\nThe following example shows a call to <span class=\"inline-code\">update</span> within the <span class=\"inline-code\">itemUpdate</span> function:<br><p></p>\n\n<pre>    /**\n    itemUpdate(itemId, qty, callback) {\n        let callbackArg = callback;\n        let items;\n\n        if (Array.isArray(itemId) && typeof qty === 'function') {\n            callbackArg = qty;\n            items = itemId;\n        } else {\n            items = [\n                {\n                    id: itemId,\n                    quantity: qty,\n                },\n            ];\n        }\n\n        this.update(items, (err, response) => {\n            const emitData = {\n                items,\n                err,\n                response,\n            };\n\n            Hooks.emit('cart-item-update-remote', emitData);\n            callbackArg(err, response);\n        });\n    } </pre><br>\n\n\n<b>getItemGiftWrappingOptions Signature</b><br>\n\nThe <span class=\"inline-code\">getItemGiftWrappingOptions</span> function allows your code to retrieve gift-wrapping options for the current cart item, in customized ways:<br><p></p>\n\n\n<pre>utils.api.cart.getItemGiftWrappingOptions(itemId, callback)</pre>\n<br>\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\">itemId</td>\n    <td class=\"\">String</td>\n    <td class=\"\">The cart item</td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody></table>\n\n\n<b>getItemGiftWrappingOptions Example</b> <br>\n\nThe following example (from <span class=\"inline-code\">cart.js</span>) calls <span class=\"inline-code\">getItemGiftWrappingOptions</span> to display gift-wrapping options in a modal:<br><p></p>\n\n<pre>    bindGiftWrappingEvents() {\n        const modal = defaultModal();\n\n        $('[data-item-giftwrap]').on('click', (event) => {\n            const itemId = $(event.currentTarget).data('item-giftwrap');\n            const options = {\n                template: 'cart/modals/gift-wrapping-form',\n            };\n\n            event.preventDefault();\n\n            modal.open();\n\n            utils.api.cart.getItemGiftWrappingOptions(itemId, options, (err, response) => {\n                modal.updateContent(response.content);\n\n                this.bindGiftWrappingForm();\n            });\n        });\n    } </pre><br>\n\n\n<b>submitItemGiftWrappingOption Signature</b><br>\n\nThe <span class=\"inline-code\">submitItemGiftWrappingOption</span> function allows your code to handle the customer’s gift-wrapping selection for the current cart item:<br><p></p>\n\n<pre>utils.api.cart.submitItemGiftWrappingOption(itemId, qty, callback)</pre>\n<br>\n\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\">itemId</td>\n    <td class=\"\">String</td>\n    <td class=\"\">The cart item</td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody></table>\n\n\n<b>submitItemGiftWrappingOption Example</b> <br>\n\nThis commented example shows a simple call to <span class=\"inline-code\">submitItemGiftWrappingOption</span>:\n\n<pre>    /**\n     * Submit giftwrapping options\n     *\n     * @param {String} itemId\n     * @param {Function} callback\n     */\n    submitItemGiftWrappingOption(itemId, params, callback) {\n        this.remoteRequest(`/gift-wrapping/${itemId}`, 'POST', { params }, callback);\n    } </pre><br>\n\n\n<b>getContent Signature</b><br>\n\nThe <span class=\"inline-code\">getContent</span> function allows your code to display the cart contents in customized ways:<br>\n\n<p></p><pre>utils.api.cart.getContent(options, callback)</pre>\n<br>\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\"><A NAME=\"getContent-options\"></a>options</td>\n    <td class=\"\">Object</td>\n    <td class=\"\">Template containing content and totals children</td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody></table>\n\n<span id=\"getContentEx\"> <b>getContent Examples</b> </span> <br>\n\nThe following example (from <span class=\"inline-code\">common/product-details.js</span>) a call to <span class=\"inline-code\">getContent</span>, set up by a prior call to <span class=\"inline-code\">getCartContent</span>:<br><p></p>\n\n<pre>    /**\n     * Get cart contents\n     *\n     * @param {String} cartItemHash\n     * @param {Function} onComplete\n     */\n    getCartContent(cartItemHash, onComplete) {\n        const options = {\n            template: 'cart/preview',\n            params: {\n                suggest: cartItemHash,\n            },\n            config: {\n                cart: {\n                    suggestions: {\n                        limit: 4,\n                    },\n                },\n            },\n        };\n\n        utils.api.cart.getContent(options, onComplete);\n    } </pre><p></p>\n\nThis example (from <span class=\"inline-code\">cart.js</span>) shows a call to <span class=\"inline-code\">getContent</span> within the <span class=\"inline-code\">refreshContent</span> function:<br><p></p>\n\n<pre>    refreshContent(remove) {\n        const $cartItemsRows = $('[data-item-row]', this.$cartContent);\n        const $cartPageTitle = $('[data-cart-page-title]');\n        const options = {\n            template: {\n                content: 'cart/content',\n                totals: 'cart/totals',\n                pageTitle: 'cart/page-title',\n                statusMessages: 'cart/status-messages',\n            },\n        };\n\n        this.$overlay.show();\n\n        // Remove last item from cart? Reload\n        if (remove && $cartItemsRows.length === 1) {\n            return window.location.reload();\n        }\n\n        utils.api.cart.getContent(options, (err, response) => {\n            this.$cartContent.html(response.content);\n            this.$cartTotals.html(response.totals);\n            this.$cartMessages.html(response.statusMessages);\n\n            $cartPageTitle.replaceWith(response.pageTitle);\n            this.bindEvents();\n            this.$overlay.hide();\n\n            const quantity = $('[data-cart-quantity]', this.$cartContent).data('cart-quantity') || 0;\n\n            $('body').trigger('cart-quantity-update', quantity);\n        });\n    } </pre><p></p> \n\nHere is a final example of a call to <span class=\"inline-code\">getContent</span>, from <span class=\"inline-code\">global/cart-preview.js</span>:<br><p></p>\n\n<pre>    $cart.on('click', (event) => {\n        const options = {\n            template: 'common/cart-preview',\n        };\n\n        // Redirect to full cart page\n        //\n        // https://developer.mozilla.org/en-US/docs/Browser_detection_using_the_user_agent\n        // In summary, we recommend looking for the string 'Mobi' anywhere in the User Agent to detect a mobile device.\n        if (/Mobi/i.test(navigator.userAgent)) {\n            return event.stopPropagation();\n        }\n\n        event.preventDefault();\n\n        $cartDropdown\n            .addClass(loadingClass)\n            .html($cartLoading);\n        $cartLoading\n            .show();\n\n        utils.api.cart.getContent(options, (err, response) => {\n            $cartDropdown\n                .removeClass(loadingClass)\n                .html(response);\n            $cartLoading\n                .hide();\n        });\n    }); </pre><br>\n\n\n<b><A NAME=\"getShippingQuotes\"></a>getShippingQuotes Signature</b><br>\n\nThe <span class=\"inline-code\">getShippingQuotes</span> function allows your code to retrieve shipping-cost quotes for the cart’s contents. It returns <span class=\"inline-code\">shippingQuote</span> objects that contain IDs. You must follow <span class=\"inline-code\">getShippingQuotes</span> by calling <span class=\"inline-code\"><a href=\"#submitShippingQuotes\">submitShippingQuote</a></span> on a <span class=\"inline-code\">quoteId</span>:<br>\n\n<p></p><pre>utils.api.cart.getShippingQuotes(params, renderWith, callback)</pre>\n<br>\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\">params</td>\n    <td class=\"\">Object</td>\n    <td class=\"\">Contains country_id, state_id, and zip_code</td>\n  </tr>\n  <tr>\n    <td class=\"\">template</td>\n    <td class=\"\">String/  Array/ Object</td>\n    <td class=\"\">The template to use for rendering</td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody></table>\n\n\n<b>getShippingQuotes and submitShippingQuote Example</b> <br><p></p>\n\nThe following example (from <span class=\"inline-code\">cart/shipping-estimator.js</span>) shows calls to both <span class=\"inline-code\">getShippingQuotes</span> and <span class=\"inline-code\">submitShippingQuote</span>:<br><p></p>\n\n<pre>    bindEstimatorEvents() {\n        const $estimatorContainer = $('.shipping-estimator');\n        const $estimatorForm = $('.estimator-form');\n\n        $estimatorForm.on('submit', (event) => {\n            const params = {\n                country_id: $('[name=\"shipping-country\"]', $estimatorForm).val(),\n                state_id: $('[name=\"shipping-state\"]', $estimatorForm).val(),\n                city: $('[name=\"shipping-city\"]', $estimatorForm).val(),\n                zip_code: $('[name=\"shipping-zip\"]', $estimatorForm).val(),\n            };\n\n            event.preventDefault();\n\n            utils.api.cart.getShippingQuotes(params, 'cart/shipping-quotes', (err, response) => {\n                $('.shipping-quotes').html(response.content);\n\n                // bind the select button\n                $('.select-shipping-quote').on('click', (clickEvent) => {\n                    const quoteId = $('.shipping-quote:checked').val();\n\n                    clickEvent.preventDefault();\n\n                    utils.api.cart.submitShippingQuote(quoteId, () => {\n                        location.reload();\n                    });\n                });\n            });\n        }); </pre><br>\n\n<A NAME=\"submitShippingQuote\"></a> <b>submitShippingQuote Signature</b><br>\n\nThe <span class=\"inline-code\">submitShippingQuote</span> function must be called after <span class=\"inline-code\"><a href=\"#getShippingQuotes\">getShippingQuote</a></span>, which returns <span class=\"inline-code\">shippingQuote</span> objects that contain IDs. The cart page renders the shipping quotes. When the user selects one of the quotes, this function sends that <span class=\"inline-code\">quoteId</span> to the backend:<br>\n\n`utils.api.cart.submitShippingQuote(quoteId, callback)`\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\">quoteId</td>\n    <td class=\"\">Number</td>\n    <td class=\"\">ID for a shipping quote returned by <span class=\"inline-code\"><a href=\"#getShippingQuotes\">getShippingQuotes</a></span></td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody></table>\n\n(For sample code, please see <b>getShippingQuotes and submitShippingQuote Example</b>, above.)<br><br>\n\n\n<b>applyCode Signature</b><br>\n\nThe <span class=\"inline-code\">applyCode</span> function applies a coupon code or gift certificate to the cart:<br>\n\n<p></p><pre>utils.api.cart.applyCode(code, callback)</pre>\n<br>\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\">code</td>\n    <td class=\"\">String</td>\n    <td class=\"\">Alphanumeric representation of the coupon or gift-certificate code</td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody></table>\n\nIn the following example (from <span class=\"inline-code\">cart.js</span>),  <span class=\"inline-code\">applyCode</span> is called before the final if/else test to apply a coupon code:<br><p></p>\n\n<pre>    bindPromoCodeEvents() {\n        const $couponContainer = $('.coupon-code');\n        const $couponForm = $('.coupon-form');\n        const $codeInput = $('[name=\"couponcode\"]', $couponForm);\n\n        $('.coupon-code-add').on('click', (event) => {\n            event.preventDefault();\n\n            $(event.currentTarget).hide();\n            $couponContainer.show();\n            $('.coupon-code-cancel').show();\n            $codeInput.focus();\n        });\n\n        $('.coupon-code-cancel').on('click', (event) => {\n            event.preventDefault();\n\n            $couponContainer.hide();\n            $('.coupon-code-cancel').hide();\n            $('.coupon-code-add').show();\n        });\n\n        $couponForm.on('submit', (event) => {\n            const code = $codeInput.val();\n\n            event.preventDefault();\n\n            // Empty code\n            if (!code) {\n                return alert($codeInput.data('error'));\n            }\n\n            utils.api.cart.applyCode(code, (err, response) => {\n                if (response.data.status === 'success') {\n                    this.refreshContent();\n                } else {\n                    alert(response.data.errors.join('\\n'));\n                }\n            });\n        });\n    } </pre><p></p>"
                      },
                      {
                        "type": "text",
                        "data": "## Cookie Resource\n\nThis resource allows you to override a browser’s default alert box for cookie notifications.\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\">privacyMessage</td>\n    <td class=\"\">Merchant-defined message informing customers of storefront’s cookie usage (e.g., to comply with E.U. notification requirement)</td>\n  </tr>\n</tbody>\n</table>\n\n\n<b>Cookie Examples:</b> \n\nThe following commented example (from <span class=\"inline-code\">global/cookieNotification.js)</span> shows a call to <span class=\"inline-code\">utils.hooks.on('cookie-privacy-notification', (event, privacyMessage)</span> to help comply with European Union privacy requirements:<br><p></p>\n\n```\n/**\n * European websites must notify users of cookies to comply with European Union law.\n * This will alert shoppers that this website uses cookies.\n */\nexport default function () {\n    /*\n    // Here you can override the default browser alert box by hooking to the 'cookie-privacy-notification' hook.\n    utils.hooks.on('cookie-privacy-notification', (event, privacyMessage) => {\n        // You can make your own custom modal or alert box appear in your theme using the privacyMessage provided\n        myCustomAlert(privacyMessage);\n\n        // Call event.preventDefault() to prevent the default browser alert from occurring in stencil-utils\n        event.preventDefault();\n    });\n    */\n\n    utils.hooks.on('cookie-privacy-notification', (event) => {\n        event.preventDefault();\n\n        const $privacyDialog = $('.cookieMessage');\n        $privacyDialog.show();\n\n        $('body').on('click', '[data-privacy-accept]', () => {\n            utils.hooks.emit('cookie-privacy-accepted');\n            $privacyDialog.hide();\n        });\n    });\n} \n\n```"
                      },
                      {
                        "type": "text",
                        "data": "## Countries Resources\n\nThese functions allow your theme or app to retrieve standardized country names, by numeric ID or by string.<br>\n\n<br><b>getById Signature</b>\n\nThe <code>getById</code> function retrieves standardized country names by numeric ID:\n\n`utils.api.countries.getById(countryId, callback)`\n\n <br>\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\">countryId</td>\n    <td class=\"\">Number</td>\n    <td class=\"\">Country code</td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n\t</tbody>\n</table>\n\n\nThe following example a call to <code>getById</code>, followed by a call to the <span class=\"inline-code\">getByName</span> function (described below):<br><p></p>\n\n```\n/**\n     *\n     * Get country data by id wrapper\n     *\n     * @param {Number} id\n     * @param {Function} callback\n     */\n    getById(id, callback) {\n        const url = this.endpoint + id;\n\n        this.remoteRequest(url, 'GET', {}, callback);\n    }\n\n    /**\n     * Get country data by country name\n     * @param name\n     * @param callback\n     */\n    getByName(name, callback) {\n        const url = this.endpoint + name;\n\n        this.remoteRequest(url, 'GET', {}, callback);\n    }\n}\n```\n\n<b>getByName Signature</b>\n\nThe <span class=\"inline-code\">getByName</span> function retrieves states by country name, and returns an array of states that can be used in the callback:<br>\n\n<p></p><pre>utils.api.countries.getByName(countryName, callback)</pre>\n\n <br>\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\">countryName</td>\n    <td class=\"\">String</td>\n    <td class=\"\">Country name</td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody></table>\n\n\nIn the following example (from <span class=\"inline-code\">common/state-country.js</span>, <span class=\"inline-code\">getByName</span> is called after the initial if test:<br><p></p>\n\n```\n$('select[data-field-type=\"Country\"]').on('change', (event) => {\n        const countryName = $(event.currentTarget).val();\n\n        if (countryName === '') {\n            return;\n        }\n\n        utils.api.country.getByName(countryName, (err, response) => {\n            if (err) {\n                alert(context.state_error);\n\n                return callback(err);\n            }\n\n            const $currentInput = $('[data-field-type=\"State\"]');\n\n            if (!_.isEmpty(response.data.states)) {\n                // The element may have been replaced with a select, reselect it\n                const $selectElement = makeStateRequired($currentInput, context);\n\n                addOptions(response.data, $selectElement, options);\n                callback(null, $selectElement);\n            } else {\n                const newElement = makeStateOptional($currentInput, context);\n\n                callback(null, newElement);\n            }\n        });\n    }); \n```"
                      },
                      {
                        "type": "text",
                        "data": "## Product Attributes Resource\n\nThe `optionChange` function is fired when the customer selects a product option for the current cart item (for example, changing a shirt’s color from a default \"yellow\" to \"green\"):\n\n<b>optionChange Signature</b>\n\n`utils.api.productAttributes.optionChange(productId, params, callback)`\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\">params</td>\n    <td class=\"\">Object</td>\n    <td class=\"\">Contains a collection of IDs that map to product properties (color, size, etc.)</td>\n  </tr>\n  <tr>\n    <td class=\"\">productId</td>\n    <td class=\"\">Number</td>\n    <td class=\"\">ID for this product</td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody></table>\n\n\n<b>optionChange Examples</b><br>\n\nIn this example (from <span class=\"inline-code\">common/product-details.js</span>), <span class=\"inline-code\">optionChange</span> is called to update options in a Quick View modal:<br><p></p>\n\n<pre>        // Update product attributes. If we're in quick view and the product has options, then also update the initial view in case items are oos\n        if (_.isEmpty(productAttributesData) && hasOptions) {\n            const $productId = $('[name=\"product_id\"]', $form).val();\n\n            utils.api.productAttributes.optionChange($productId, $form.serialize(), (err, response) => {\n                const attributesData = response.data || {};\n\n                this.updateProductAttributes(attributesData);\n                this.updateView(attributesData);\n            });\n        } else {\n            this.updateProductAttributes(productAttributesData);\n        } </pre><p></p>\n\n\nIn this example (from <code>cart.js</code>), <code>optionChange</code> is called before the final if test:\n\n```  \n\t\t\t\tcartEditOptions(itemId) {\n        const modal = defaultModal();\n        const options = {\n            template: 'cart/modals/configure-product',\n        };\n\n        modal.open();\n\n        utils.api.productAttributes.configureInCart(itemId, options, (err, response) => {\n            modal.updateContent(response.content);\n\n            this.bindGiftWrappingForm();\n        });\n\n        utils.hooks.on('product-option-change', (event, option) => {\n            const $changedOption = $(option);\n            const $form = $changedOption.parents('form');\n            const $submit = $('input.button', $form);\n            const $messageBox = $('.alertMessageBox');\n            const item = $('[name=\"item_id\"]', $form).attr('value');\n\n            utils.api.productAttributes.optionChange(item, $form.serialize(), (err, result) => {\n                const data = result.data || {};\n\n                if (err) {\n                    alert(err);\n                    return false;\n                }\n```"
                      },
                      {
                        "type": "text",
                        "data": "## Product Resource\n\nThe `product.getById` function allows your code to retrieve, and to present, detailed product information by product ID.\n\n<b>getById Signature</b>\n\n`utils.api.product.getById(productId, params, callback)`\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\">productId</td>\n    <td class=\"\">Number</td>\n    <td class=\"\">ID for this product</td>\n  </tr>\n  <tr>\n    <td class=\"\">params</td>\n    <td class=\"\">Object</td>\n    <td class=\"\">Contains request options and/or presentation template</td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n\t</tbody>\n</table>\n\n\nThe following example (from `global/quick-view.js`) calls `product.getById` to populate the Quick View modal:\n\n```\t\t\t\t\n\t\t\t\t$('body').on('click', '.quickview', (event) => {\n        event.preventDefault();\n\n        const productId = $(event.currentTarget).data('product-id');\n\n        modal.open({ size: 'large' });\n\n        utils.api.product.getById(productId, { template: 'products/quick-view' }, (err, response) => {\n            modal.updateContent(response);\n\n            modal.$content.find('.productView').addClass('productView--quickView');\n\n            return new ProductDetails(modal.$content.find('.quickView'), context);\n        });\n    }); \n```"
                      },
                      {
                        "type": "text",
                        "data": "## Search Resource\n\nThe `search` function allows you to present a customized user interface for search results.\n\n<b>search Signature</b>\n\n<p></p><pre>utils.api.search.search(query, params, callback)</pre>\n<br>\n\n<table>\n  <tbody><tr>\n    <td class=\"\">Argument</td>\n    <td class=\"\">Type</td>\n    <td class=\"\">Description/Usage</td>\n  </tr>\n  <tr>\n    <td class=\"\">query</td>\n    <td class=\"\">String</td>\n    <td class=\"\">Contains the customer’s search query</td>\n  </tr>\n  <tr>\n    <td class=\"\">params</td>\n    <td class=\"\">Object</td>\n    <td class=\"\">Contains request options and/or presentation template</td>\n  </tr>\n  <tr>\n    <td class=\"\">callback</td>\n    <td class=\"\">Function</td>\n    <td class=\"\">Asynchronous function call to handle the results</td>\n  </tr>\n</tbody>\n</table>"
                      }
                    ]
                  },
                  "config": {
                    "sidebar": {
                      "token": "API Reference"
                    }
                  }
                }
              ]
            }
          },
          {
            "title": "Custom Javascript Implementations ",
            "route": {
              "path": "/custom-javascript-implementations"
            },
            "data": {
              "children": [
                {
                  "title": "Adding Javascript to a Stencil Theme",
                  "route": {
                    "path": "/adding-javascript"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Adding Javascript to Your Stencil Theme</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#adding_bundling-and-minification\">Bundling and Minification</a></li>\n    <li><a href=\"#adding_development-options\">Development Options</a></li>\n    <li><a href=\"#adding_using-npm\">Using npm (Node Package Manager)</a></li>\n    <li><a href=\"#adding_placing-modules\">Placing Modules in assets/js/</a></li>\n    <li><a href=\"#adding_theme-specific-js\">Theme-Specific JavaScript Modules</a></li>\n    <li><a href=\"#adding_mapping-page\">Mapping Page Types to JavaScript Modules</a></li>\n    <li><a href=\"#adding_mapping-custom\">Mapping Custom Templates to JavaScript Modules</a></li>\n    <li><a href=\"#adding_summary\">Summary</a></li>\n\t</ul>\n</div>\n\n\n\n\n\n\n\n"
                      },
                      {
                        "type": "text",
                        "data": "## Bundling and Minification\n\nA small Web application, such as an ecommerce theme, can include rich user interactions that depend on many small JavaScript and CSS modules. If we were to embed each of the JavaScript modules in a template file with a separate `<script>` tag, the shopper's browser would need to make separate HTTP requests to retrieve each module.\n\t\nIn some cases, it would take longer to set up the HTTP request than to download the small JavaScript module – leading to slower load times. On mobile devices, slow load times can be especially frustrating.\n\n### Bundling\nTo solve this problem, Stencil – like other modern front-end frameworks – bundles all the JavaScript modules into a single file (a bundle), allowing the shopper's browser to make only a single HTTP request. After the browser has downloaded the bundle of JavaScript modules, the browser caches them, speeding up the rest of the shopper's session.\n\n### Minification\nBeyond reducing the number of HTTP calls required to fetch all the required JavaScript modules, we can reduce the size of the individual JavaScript modules through minification. JavaScript minification removes white space and comments, shortens variable and function names, removes dead code, and more. The goal, in all cases, is to reduce the amount of bandwidth necessary to transmit the JavaScript module to the browser.",
                        "header": {
                          "anchor": "adding_bundling-and-minification"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Development Options\n\nWhen you add JavaScript to a theme, use one of the following techniques, so that Stencil will automatically bundle and minify your modules:\n\n* **Using npm:** Add third-party JavaScript modules to your theme with npm where possible.\n\n* **Place Modules in assets/js/:** For a JavaScript module that is not distributed via npm, add this module to your theme by creating a subdirectory within assets/js/ that contains your module.\n\n* **Theme-Specific JavaScript Modules:** Stencil themes include their own custom JavaScript modules for most page types. You can alter these page-type–specific modules by editing the files in assets/js/theme/*.js.\n\nThese techniques are outlined in the following sections.",
                        "header": {
                          "anchor": "adding_development-options"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Using npm (Node Package Manager)\n\nMany third-party JavaScript components are distributed with npm (Node Package Manager). When you use the npm command-line utility to add a JavaScript component to your theme, Stencil will automatically bundle and minify the component. To enable this bundling/minification, run each module's `npm install` command from the root directory of your theme.\n\n### Taking Over from npm\n\nnpm facilitates managing third-party JavaScript components by placing each JavaScript component – and any of its dependencies – in the correct directories. However, as a developer, you will still need to edit your theme files to wire up the JavaScript component to expose it on your storefront. You will find several examples of this on the following pages.",
                        "header": {
                          "anchor": "adding_using-npm"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Placing Modules in assets/js/\n\nYou can freely create subdirectories within `assets/js/`, to contain new JavaScript modules. The constraint is that all JavaScript files in each module must use the `.js` file extension.",
                        "header": {
                          "anchor": "adding_placing-modules"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Theme-Specific JavaScript Modules\n\nIn your theme's `assets/js/theme/` subdirectory, you will find a tree of JavaScript files. Each file is a JavaScript module. Some modules are for specific page types. Others are common modules that can be used in other modules. Still others are global modules that are available on every page.",
                        "header": {
                          "anchor": "adding_theme-specific-js"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Mapping Page Types to JavaScript Modules\n\nTo find the mapping from page types to modules in `assets/js/theme/`, examine the `PageClasses` object in the file: `assets/js/app.js`. Each `=>import(...)` function within this class maps a page type to the entry module for that page type. For example: When the `cart` page type is loaded in the browser, the JavaScript module named `cart` will be loaded.\n\n### Mapping Example in app.js\n\nHere is an excerpt of mappings from the Cornerstone base theme's `assets/js/app.js`:\n\n```\n[...]\nconst pageClasses = {\n    account_orderstatus: getAccount,\n    account_order: getAccount,\n    account_addressbook: getAccount,\n    [...]\n    createaccount: getLogin,\n    getnewpassword: getLogin,\n    forgotpassword: getLogin,\n    blog: () => import('./theme/blog'),\n    blog_post: () => import('./theme/blog'),\n    brand: () => import('./theme/brand'),\n    brands: () => import('./theme/brand'),\n    cart: () => import('./theme/cart'),\n    [...]\n}; \n```\n\n### Mapping Example in cart.js\n\nInside the `cart` module (`assets/js/theme/cart.js`), other modules are imported, and custom JavaScript methods for the cart module are created in the `Cart` class.\n\nHere is an excerpt from Cornerstone's `assets/js/theme/cart.js` file:\n\n```\nimport PageManager from './page-manager';\nimport $ from 'jquery';\nimport _ from 'lodash';\nimport giftCertCheck from './common/gift-certificate-validator';\nimport utils from '@bigcommerce/stencil-utils';\nimport ShippingEstimator from './cart/shipping-estimator';\nimport { defaultModal } from './global/modal';\nimport swal from 'sweetalert2';\n\nexport default class Cart extends PageManager {\n    loaded(next) {\n        this.$cartContent = $('[data-cart-content]');\n        this.$cartMessages = $('[data-cart-status]');\n        this.$cartTotals = $('[data-cart-totals]');\n        this.$overlay = $('[data-cart] .loadingOverlay')\n            .hide(); // TODO: temporary until roper pulls in his cart components\n\n        this.bindEvents();\n\n        next();\n    }\n\n    cartUpdate($target) {\n        const itemId = $target.data('cart-itemid');\n        const $el = $(`#qty-${itemId}`);\n        const oldQty = parseInt($el.val(), 10);\n        const maxQty = parseInt($el.data('quantity-max'), 10);\n        const minQty = parseInt($el.data('quantity-min'), 10);\n        const minError = $el.data('quantity-min-error');\n        const maxError = $el.data('quantity-max-error');\n        const newQty = $target.data('action') === 'inc' ? oldQty + 1 : oldQty - 1;\n        [...]\n```",
                        "header": {
                          "anchor": "adding_mapping-page"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Mapping Custom Templates to JavaScript Modules\n\nIf you add [custom page templates]() to your theme, you can edit the same `assets/js/app.js` file to map each custom template to an appropriate JavaScript module.\n\nIn the example below, we have added the highlighted `if` statement to map a file called `my-custom-template`:\n\n```\nwindow.stencilBootstrap = function stencilBootstrap(pageType, contextJSON = null, loadGlobal = true) {\n    const context = JSON.parse(contextJSON || {});\n\n    return {\n        load() {\n            $(async () => {\n                let globalClass;\n                let pageClass;\n                let PageClass;\n\n\nif (context.template === 'pages/custom/page/my-custom-template') {\n           // do something, import a file, call a function ...\n}\n\n                [...] \n```\n\nIn the theme's `templates/layout/base.html` template, we've added the `{{inject 'template' template}}` just above `{{{snippet 'htmlhead'}}}` statement to inject the custom template:\n\n```\n<head>\n        <title>{{ head.title }}</title>\n        {{{ head.meta_tags }}}\n        {{{ head.config }}}\n\n        [...]\n\n        {{{head.scripts}}}\n        {{{head.rsslinks}}}\n\n        {{inject 'themeSettings' theme_settings}}\n        {{inject 'genericError' (lang 'common.generic_error')}}\n        {{inject 'maintenanceMode' settings.maintenance}}\n        {{inject 'urls' urls}}\n        {{inject 'template' template}} //injects the custom template\n        {{{snippet 'htmlhead'}}}\n    </head> \n\t\t\n\t\t```\n\n\n",
                        "header": {
                          "anchor": "adding_mapping-custom"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Summary\n\nTo review the basics of using JavaScript in your Stencil theme:\n\n* Stencil automatically bundles and minifies JavaScript modules to optimize page performance.\n\n* To insert custom JavaScript on a particular page in your theme, edit the JavaScript module that corresponds to the page's type.\n\n* To add files from third-party JavaScript modules to a theme, use npm, where possible.\n\n* To add JavaScript modules not distributed via npm, you can create new subdirectories within `assets/js/`.\n\n* Theme-Specific JavaScript modules are provided in the theme's `assets/js/theme/` subdirectory.\n\n* To find the mapping between modules in assets/js/theme/ and page types, examine the PageClasses object contained in `assets/js/app.js`.\n\n* You can map JavaScript modules to custom page templates by editing the same `assets/js/app.js` file.",
                        "header": {
                          "anchor": "adding_summary"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Basic Non NPM Example",
                  "route": {
                    "path": "/basic-non-npm-example"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Basic Non NPM Example</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#adding_locating-page\">Locating Page-Specific JavaScript</a></li>\n    <li><a href=\"#adding_adding-custom-js\">Adding Custom JS Functions</a></li>\n\t</ul>\n</div>\n\n\n\n"
                      },
                      {
                        "type": "text",
                        "data": "## Locating Page-Specific JavaScript \n\nIn this example, let's say that we want to display Hello world alerts when a shopper visits a blog page.\n\nIn Stencil's base Cornerstone theme, the JavaScript that runs on the blog page can be found in\n/cornerstone/assets/js/theme/blog.js. If we want to run additional JavaScript on this page, we can add it to the PageManager class in this file, which is empty by default.",
                        "header": {
                          "anchor": "adding_locating-page"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "body": "Prior to March 2017, the Cornerstone's default path name was `/stencil/`.",
                          "title": "Default Path Name Updated from \"stencil\" to \"cornerstone\""
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Adding Custom JS Functions \n\nIn the code example below, we have added three custom JavaScript functions (`blogHello`, `blogGreatday` and `blogGoodbye`) to the page by populating `PageManager`. Note how each function is called at a different time during the page's life cycle:\n\n\n```\nimport PageManager from '../page-manager';\n\nexport default class Blog extends PageManager {\n    blogHello() {\n        alert('Hello world from blog.js');\n    }\n    blogGreatday() {\n        alert('Have a great day from blog.js');\n    }\n    blogGoodbye() {\n        alert('Goodbye world from blog.js');\n    }\n    before(next) {\n        this.blogHello();\n        next();\n    }\n    loaded(next) {\n        this.blogGreatday();\n        next();\n    }\n    after(next) {\n        this.blogGoodbye();\n        next();\n    }\n}\n```",
                        "header": {
                          "anchor": "adding_adding-custom-js"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Basic NPM example",
                  "route": {
                    "path": "/new-subpage-2"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Basic <code>npm</code> Example</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#basic_what-were-building\">What We're Building</a></li>\n    <li><a href=\"#basic_set-up\">Set Up Your Store</a></li>\n    <li><a href=\"#basic_install-dependencies\">Install Dependencies</a></li>\n    <li><a href=\"#basic_configure-webpack\">Configure Webpack loaders in webpack.conf.js</a></li>\n    <li><a href=\"#basic_import-dependencies\">Import Dependencies</a></li>\n    <li><a href=\"#basic_configured-loaded-method\">Configure the loaded() Method</a></li>\n\t</ul>\n</div>\n\n\n\n\n\n\n\n"
                      },
                      {
                        "type": "callout",
                        "data": {
                          "title": "Compatible with Cornerstone versions earlier than 2.x.x",
                          "body": "Because this example involves editing the `webpack.conf.js` file, the way this example is outlined will align with only with Cornerstone versions earlier than 2.x.x. This is due to the transition to Webpack 4 in Cornerstone 2.0.0, which deprecated the `webpack.conf.js` file.",
                          "type": "warning"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## What We're Building\n\nThis example will use the [Foundation-datepicker.js](http://foundation-datepicker.peterbeno.com/#basic-example) plugin to implement a datepicker for product pages' Delivery/Event Date fields."
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539276603841",
                        "header": {
                          "title": "Screenshot of final product"
                        },
                        "config": {
                          "bordered": true,
                          "maxWidth": "700",
                          "maxHeight": "700",
                          "centered": true,
                          "fluid": true
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Set Up Your Store\n\nTo test this example, you'll want your (sandbox or production) store to include at least a couple of products that have a `Delivery/Event Date` configured. (In production, you'd typically use this feature for things like seasonally themed products, temporary promotions, or event tickets.)\n\nFor product configuration steps in the BigCommerce control panel, please see this support article."
                      },
                      {
                        "type": "text",
                        "data": "## Install Dependencies\n\nUse the following command to install this example's required dependencies:\n\n`npm install --save-dev css-loader moment foundation-datepicker style-loader`\n\nThe above command's options are:\n\n* `--save-dev` saves the dependencies as `DevDependencies`; this flags them as required for development, but not at runtime. [This stack overflow thread](https://stackoverflow.com/questions/18875674/whats-the-difference-between-dependencies-devdependencies-and-peerdependencies) provides further context to this concept.\n\n* `css-loader` and `style-loader` are webpack loaders, used together:\n\t* [`css-loader`](https://github.com/webpack-contrib/css-loader) resolves `@import` and `url()` expressions in CSS files.\n\t* [`style-loader`](https://github.com/webpack-contrib/style-loader) generically loads stylesheets by injecting a `<style>` tag.\n\n* [`moment`](https://momentjs.com/) is a JavaScript component parses, validates, and displays dates and times.\n\n* `foundation-datepicker` specifies the datepicker package to install."
                      },
                      {
                        "type": "text",
                        "data": "## Configure Webpack loaders in webpack.conf.js\n\nThe [css]() and [style]() loaders are used to import CSS and to inject it into the DOM, respectively:\n\n```\n{\n    test: /\\.css$/,\n    loader: 'style-loader!css-loader',\n}\n```"
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539280227448",
                        "header": {
                          "title": "CSS and style loaders in context"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Import the Dependencies\n\nImport these new dependencies into `<theme-name>/assets/js/theme/product.js`.\n\nIn `<theme-name>/assets/js/app.js`, notice that there is a mapping between the product page and the `product.js` script:\n\n```\nconst PageClasses = {\n    mapping: {\n        ...\n        'pages/product': product,\n```\n\nThat is, when a user navigates to the product page, the `product.js` script is run. First its constructor will be run, followed by the methods `before`, `loaded`, and `after` – in that order."
                      },
                      {
                        "type": "text",
                        "data": "## Configure the loaded() Method\n\nWe'll use the `loaded` method to initialize our datepicker widget:\n\n```\nimport $ from 'jquery';\nimport PageManager from '../page-manager';\nimport Review from './product/reviews';\nimport collapsibleFactory from './common/collapsible';\nimport ProductDetails from './common/product-details';\nimport videoGallery from './product/video-gallery';\nimport { classifyForm } from './common/form-utils';\nimport 'foundation-datepicker/js/foundation-datepicker.min.js';\nimport 'foundation-datepicker/css/foundation-datepicker.min.css';\nimport moment from 'moment';\n\n...\n\nloaded(next) {\n    let validator;\n\n    // Init collapsible\n    collapsibleFactory();\n\n    this.productDetails = new ProductDetails($('.productView'), this.context);\n\n    videoGallery();\n\n    const $reviewForm = classifyForm('.writeReview-form');\n    const review = new Review($reviewForm);\n\n    $('body').on('click', '[data-reveal-id=\"modal-review-form\"]', () => {\n        validator = review.registerValidation();\n    });\n\n    $reviewForm.on('submit', () => {\n        if (validator) {\n            validator.performCheck();\n            return validator.areAll('valid');\n        }\n\n        return false;\n    });\n\n    let $deliveryDateMth = $('#deliveryDateMth');\n    let $deliveryDateDay = $('#deliveryDateDay');\n    let $deliveryDateYr = $('#deliveryDateYr');\n    let earliestDate = moment(this.context.product.event_date.date_start, \"MMM Do YYYY\");\n    let latestDate = moment(this.context.product.event_date.date_end, \"MMM Do YYYY\");\n\n    $('#deliveryDate').fdatepicker({\n        leftArrow:'<<',\n        rightArrow:'>>',\n        onRender: function (date) {\n            return moment(date).isBetween(earliestDate, latestDate, null, '[]') ? '' : 'disabled';\n        }\n    })\n    .on('changeDate', function(event) {\n        let date = event.date;\n        $deliveryDateMth.val(date.getMonth() + 1);\n        $deliveryDateDay.val(date.getDate());\n        $deliveryDateYr.val(date.getFullYear());\n    })\n    .data('datepicker');\n\n    next();\n}\n```\n\nHighlighted below is the new code added to the `loaded` method:"
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539275148248",
                        "header": {
                          "title": "Code addition to loaded method in product.js"
                        }
                      },
                      {
                        "type": "text",
                        "data": "Update the `<theme-name>/templates/components/products/product-view.html` template, replacing the existing `{{#if product.event_date}}` block with the following:\n\n```\n{{#if product.event_date}}\n    {{inject 'product' product}}\n    <div class=\"form-field\">\n        <label class=\"form-label form-label--alternate form-label--inlineSmall\">\n        {{product.event_date.name}}:\n        <small>{{lang 'common.required'}}</small>\n        </label>\n        <input type=\"text\" class=\"form-input\" id=\"deliveryDate\" name=\"EventDate[Date]\" required>\n        <input type=\"hidden\" id=\"deliveryDateMth\" name=\"EventDate[Mth]\">\n        <input type=\"hidden\" id=\"deliveryDateDay\" name=\"EventDate[Day]\">\n        <input type=\"hidden\" id=\"deliveryDateYr\" name=\"EventDate[Yr]\">\n    </div>\n{{/if}}\n```\n\nNote that we're \"injecting\" the product here, so we have access to its properties. This could be done closer to the root of the tree, but it's been placed here for proximity to the code that requires it.\n\nWe also needed to add form fields for the `EventDate[Mth]`, `EventDate[Day]`, and `EventDate[Yr]` data, which we update whenever the `changeDate` event occurs. This conforms to the data format that the server expects. These fields are hidden from the user.\n"
                      }
                    ]
                  }
                },
                {
                  "title": "Advanced NPM Example",
                  "route": {
                    "path": "/advanced-npm-example"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Advanced NPM Example</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#advanced_video-of-what\">Video of What We're Building</a></li>\n    <li><a href=\"#advanced_install-dependencies\">Install Dependencies</a></li>\n    <li><a href=\"#advanced_import-dependencies\">Import Dependencies</a></li>\n    <li><a href=\"#advanced_update-webpackconfjs\">Update webpack.conf.js</a></li>\n    <li><a href=\"#advanced_update-appjs\">Update app.js</a></li>\n    <li><a href=\"#advanced_add-the-xcoupondrawer\">Add the <<code>x-coupon-drawer</code>> Element to the Page</a></li>\n    <li><a href=\"#advanced_call-initreact\">Call initReact from base.html</a></li>\n    <li><a href=\"#advanced_create-an-assetsjscomp\">Create an assets/js/components Folder</a></li>\n    <li><a href=\"#advanced_create-a-coupondrawerjs-file\">Create a CouponDrawer.js File</a></li>\n    <li><a href=\"#advanced_create-a-verticallinear\">Create a VerticalLinearStepper.js File</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Video of What We're Building\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/sudvuxJFxKc\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>",
                        "header": {
                          "anchor": "advanced_video-of-what"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Install Dependencies\n\nMaterial-UI requires the `react-tap-event-plugin` module. Also, `document-register-element` is needed to polyfill `document.registerElement`. The babel presets and plugins are needed to support `Object.assign`, `react`, and `Material-UI`, respectively:\n\n```\nnpm install -save-dev document-register-element material-ui react react-dom react-tap-event-plugin  \nnpm install -save-dev babel-plugin-transform-object-assign babel-preset-react babel-preset-stage-1\n```",
                        "header": {
                          "anchor": "advanced_install-dependencies"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Import Dependencies\n\nNext, import the new dependencies into `<theme-name>/assets/js/app.js`\n\nNote the `CouponDrawer` import at the bottom. This file doesn't yet exist, but we'll shortly create a React component with this name:",
                        "header": {
                          "anchor": "advanced_import-dependencies"
                        }
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1540279579178",
                        "header": {
                          "title": "app.js imports"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Update webpack.conf.js\n\nUpdate webpack.conf.js with the new presets and plug-ins, as shown here:",
                        "header": {
                          "anchor": "advanced_update-webpackconfjs"
                        }
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1540279603654",
                        "header": {
                          "title": "webpack.config.js: presets and plugins"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Update app.js\n\nAdd the following code to the bottom of `<theme-name>/assets/js/app.js`:\n\n```\nwindow.initReact = function(contextJSON = '{}') {\n    injectTapEventPlugin();\n    const context = JSON.parse(contextJSON);\n    const proto = Object.create(HTMLElement.prototype, {\n        attachedCallback: {\n            value: function() {\n                const mountPoint = document.createElement('span');\n                const attrs = [].reduce.call(this.attributes, (memo, attr) => {\n                    memo[attr.name] = attr.value;\n                    return memo;\n                }, {});\n                const data = Object.assign({}, context, attrs);\n\n                this.appendChild(mountPoint);\n                ReactDOM.render(\n                    <MuiThemeProvider>\n                        <CouponDrawer data={data} />\n                    </MuiThemeProvider>,\n                    mountPoint\n                );\n            }\n        }\n    });\n    document.registerElement('x-coupon-drawer', {prototype: proto});\n}\n```\n\nThis sets up a handler for attaching an `<x-coupon-drawer>` element to the page. We're using React here to render the `CouponDrawer` component. This block of code was taken and modified from https://facebook.github.io/react/docs/web-components.html#using-react-in-your-web-components.",
                        "header": {
                          "anchor": "advanced_update-appjs"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Add the `<x-coupon-drawer>` Element to the Page \n\nAdd this in `<theme-name>/templates/layout/base.html`. (See the image below.) We're using this layout template for this example, although you would follow the same steps in any other template.",
                        "header": {
                          "anchor": "advanced_add-the-xcoupondrawer"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Call initReact from base.html \n\nAdd a call to `window.initReact`. We're continuing to work with the `base.html` page for this example. Notice that we're also passing in the jsContext here. The `initReact` method will merge this context with an object created from the attributes placed upon the `<x-coupon-drawer>`, and will pass the combined data along to the React component.",
                        "header": {
                          "anchor": "advanced_call-initreact"
                        }
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1540279254389",
                        "header": {
                          "title": "base.html setup"
                        },
                        "config": {
                          "centered": true,
                          "fluid": true,
                          "bordered": true
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Create an assets/js/components Folder \n\nWe'll store our React components here.",
                        "header": {
                          "anchor": "advanced_create-an-assetsjscomp"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Create a CouponDrawer.js File\n\nCreate a `<theme-name>/assets/js/components/CouponDrawer.js` file. Populate this file with the following code block (which is adapted from http://www.material-ui.com/#/components/drawer):\n\n```\nimport React from 'react';\nimport Drawer from 'material-ui/Drawer';\nimport AppBar from 'material-ui/AppBar';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport VerticalLinearStepper from './VerticalLinearStepper';\n\nexport default class CouponDrawer extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {open: false};\n  }\n\n  handleToggle = () => this.setState({open: !this.state.open});\n\n  render() {\n    return (\n      <div>\n        <RaisedButton\n          label=\"Click here to get a coupon!\"\n          onTouchTap={this.handleToggle}\n        />\n        <Drawer width={200} openSecondary={true} open={this.state.open} >\n          <AppBar title=\"Coupon magic\" titleStyle={{fontSize: 14}} />\n          <VerticalLinearStepper />\n        </Drawer>\n      </div>\n    );\n  }\n}\n```",
                        "header": {
                          "anchor": "advanced_create-a-coupondrawerjs-file"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Create a VerticalLinearStepper.js File\n\nCreate a `<theme-name>/assets/js/components/VerticalLinearStepper.js` file. Populate this file with the following code block:\n\n```\nimport React from 'react';\nimport {\n  Step,\n  Stepper,\n  StepButton,\n  StepContent,\n} from 'material-ui/Stepper';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport FlatButton from 'material-ui/FlatButton';\nimport TextField from 'material-ui/TextField';\n\n/**\n * A basic vertical non-linear implementation\n */\nclass VerticalLinearStepper extends React.Component {\n\n  constructor(props) {\n      super(props);\n  }\n\n  state = {\n    stepIndex: 0,\n  };\n\n  handleNext = () => {\n    const {stepIndex} = this.state;\n    if (stepIndex < 2) {\n      this.setState({stepIndex: stepIndex + 1});\n    }\n  };\n\n  handlePrev = () => {\n    const {stepIndex} = this.state;\n    if (stepIndex > 0) {\n      this.setState({stepIndex: stepIndex - 1});\n    }\n  };\n\n  renderStepActions(step) {\n    return (\n      <div style={{margin: '12px 0'}}>\n        <RaisedButton\n          label=\"Next\"\n          disableTouchRipple={true}\n          disableFocusRipple={true}\n          primary={true}\n          onTouchTap={this.handleNext}\n          style={{marginRight: 12}}\n        />\n        {step > 0 && (\n          <FlatButton\n            label=\"Back\"\n            disableTouchRipple={true}\n            disableFocusRipple={true}\n            onTouchTap={this.handlePrev}\n          />\n        )}\n      </div>\n    );\n  }\n\n  render() {\n    const {stepIndex} = this.state;\n\n    return (\n      <div style={{maxWidth: 380, maxHeight: 400, margin: 'auto'}}>\n        <Stepper\n          activeStep={stepIndex}\n          linear={false}\n          orientation=\"vertical\"\n        >\n          <Step>\n            <StepButton onTouchTap={() => this.setState({stepIndex: 0})}>\n              Do this\n            </StepButton>\n            <StepContent>\n              <p>\n                Navigate to <a href=\"http://example.com\">here</a> and get your code.\n              </p>\n              {this.renderStepActions(0)}\n            </StepContent>\n          </Step>\n          <Step>\n            <StepButton onTouchTap={() => this.setState({stepIndex: 1})}>\n              Then this\n            </StepButton>\n            <StepContent>\n              <TextField hintText=\"Enter your code here\" style={{height: 100, width: 100}}/>\n              {this.renderStepActions(1)}\n            </StepContent>\n          </Step>\n          <Step>\n            <StepButton onTouchTap={() => this.setState({stepIndex: 2})}>\n              Collect your coupon!\n            </StepButton>\n            <StepContent>\n              <p>\n                <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/9b/Wikipedia_mobile_en.svg/296px-Wikipedia_mobile_en.svg.png\"/>\n              </p>\n              {this.renderStepActions(2)}\n            </StepContent>\n          </Step>\n        </Stepper>\n      </div>\n    );\n  }\n}\n\nexport default VerticalLinearStepper;\n```\n\nThe above code block was adapted from http://www.material-ui.com/#/components/stepper.",
                        "header": {
                          "anchor": "advanced_create-a-verticallinear"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "body": "We must register a custom element to set up the \"root\" of every React component we create. However, within a React component, we can import other React components without having to register them. For example, here we register x-coupon-drawer as a custom element that renders the React CouponDrawer component. However, within CouponDrawer, we can simply import the VerticalLinearStepper component needing to set it up in the same way.",
                          "title": " Note on the VerticalLinearStepper.js Example"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Page Types and Life Cycle",
                  "route": {
                    "path": "/new-subpage"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Page Types and Life Cycle</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#page-types_stencil-utils\">stencil-utils Library</a></li>\n    <li><a href=\"#page-types_javascript-api\">JavaScript API</a></li>\n    <li><a href=\"#page-types_callback\">Callback Methods</a></li>\n    <li><a href=\"#page-types_javascript\">JavaScript Template Context Injection</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## stencil-utils Library\n\n[stencil-utils](/stencil-docs/adding-event-hooks-to-your-theme/stencil-utils-api-reference) is our supporting library for events and remote interactions.\n\n",
                        "header": {
                          "anchor": "page-types_stencil-utils"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Javascript API\n\nStencil themes include an API for running JavaScript on a per-page basis. To properly write JavaScript for your theme, you will have the following page types available to you:\n\n* \"pages/account/addresses\"\n* \"pages/account/add-address\"\n* \"pages/account/add-return\"\n* \"pages/account/add-wishlist\"\n* \"pages/account/recent-items\"\n* \"pages/account/download-item\"\n* \"pages/account/edit\"\n* \"pages/account/return-saved\"\n* \"pages/account/returns\"\n* \"pages/auth/login\"\n* \"pages/auth/account-created\"\n* \"pages/auth/create-account\"\n* \"pages/auth/new-password\"\n* \"pages/blog\"\n* \"pages/blog-post\"\n* \"pages/brand\"\n* \"pages/brands\"\n* \"pages/cart\"\n* \"pages/category\"\n* \"pages/compare\"\n* \"pages/errors\"\n* \"pages/gift-certificate/purchase\"\n* \"pages/gift-certificate/balance\"\n* \"pages/gift-certificate/redeem\"\n* \"global\"\n* \"pages/home\"\n* \"pages/order-complete\"\n* \"pages/page\"\n* \"pages/product\"\n* \"pages/search\"\n* \"pages/sitemap\"\n* \"pages/subscribed\"\n* \"page/account/wishlist-details\"\n* \"pages/account/wishlists\"\n\nThese page types correspond to the pages within your theme. Each of these page types maps to an ES6 module that extends the base `PageManager` abstract class:\n\n```\n   export default class Blog extends PageManager {\n        constructor() {\n            //Setup code goes here – attach to internals, and use internals as you would 'this'\n        }\n    }\n```",
                        "header": {
                          "anchor": "page-types_javascript-api"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Callback Methods\n\nWithin `PageManager`, you will see methods that are available from all your classes. But three methods are especially important. The following methods have the signature `func (callback)`, with the callback taking `callback(err)` in case of an error.\n\n### before(callback)\n\nWhen this method is implemented in your class, the code contained will be executed after the constructor but before the `loaded()` method. This will provide a shim for your code before your main implementation logic could run.\n\n```\n export default class Blog extends PageManager {\n        constructor() {\n            //Setup code goes here\n        }\n        before(callback) {\n            //Code that should be ran before any other code in this class\n\n            //Callback must be called to move on to the next method\n            callback();\n        }\n    }\n```\n\n### loaded(callback)\n\nThis method will be called when the constructor has ran and `before()` has executed. Main implementation code should live in the `loaded()` method.\n\n```\n export default class Blog extends PageManager {\n        constructor() {\n            //Setup code goes here\n        }\n        loaded(callback) {\n            //Main implementation logic here\n\n            //Callback must be called to move on to the next method\n            callback();\n        }\n    }\n```\n\n### after(callback)\n\nThis method is for any cleanup that may need to happen, and it will be executed after `before()` and `loaded()`.\n\n```\n    export default class Blog extends PageManager {\n        constructor() {\n            //Set up code goes here\n        }\n        after(callback) {\n            //Main implementation logic here\n\n            //Callback must be called to move on to the next method\n            callback();\n        }\n    }\n```\n\n\n\n\n",
                        "header": {
                          "anchor": "page-types_callback"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## JavaScript Template Context Injection\n\nOccasionally, you might need to use dynamic data from the template context within your theme's client-side application code. Two helpers are provided to help achieve this.\n\nThe `inject` helper allows you to compose a json object with a subset of the template context to be sent to the browser:\n\n`{{inject \"stringBasedKey\" contextValue}}`\n\nTo retrieve the parsable JSON object, just call `{{jsContext}}` after all of the `{{inject}}` calls.\n\nFor example, to set up the product name in your client-side app, you can do this if you're in the context of a product:\n\n```\n{{inject \"myProductName\" product.title}}\n\n<script>\n// Note the lack of quotes around the jsContext handlebars helper, it becomes a string automatically.\nvar jsContext = JSON.parse({{jsContext}}); //jsContext would output \"{\\\"myProductName\\\": \\\"Sample Product\\\"}\" which can feed directly into your JavaScript\n\nconsole.log(jsContext.myProductName); // Will output: Sample Product\n</script>\n```\n\nYou can compose your JSON object across multiple pages, to create a different set of client-side data depending on the currently loaded template context.\n\nStencil's Cornerstone base theme makes the `jsContext` available as `this.context`, both on the active page scoped and on global `PageManager` objects.\n\n\n\n\n\n",
                        "header": {
                          "anchor": "page-types_javascript"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Conditional-Logic Examples",
            "route": {
              "path": "/conditional-logic-examples"
            },
            "data": {
              "children": [
                {
                  "title": "Catalog Price Object: How Properties Interact",
                  "route": {
                    "path": "/catalog-price-object"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Catalog Price Object: How Properties Interact</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#catalog-price_price-prop-overview\">Price Properties Overview</a></li>\n    <li><a href=\"#catalog-price_cost-price\">Cost Price</a></li>\n    <li><a href=\"#catalog-price_basic-price-example\">Basic Price Example – No \"Sale Price\" Defined</a></li>\n    <li><a href=\"#catalog-price_sale-price-defined\">\"Sale Price\" Defined Example</a></li>\n    <li><a href=\"#catalog-price_prices-and-conditional\">Prices and Conditional Logic – Special for You!</a></li>\n    <li><a href=\"#catalog-price_including-and-or-excluding\">Including and/or Excluding Tax</a></li>\n    <li><a href=\"#catalog-price_tax-sale-price\">Tax/Sale Price Interactions</a></li>\n    <li><a href=\"#catalog-price_mapping-of-control\">Mapping of Control-Panel Options to Catalog Price Properties</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Price Properties Overview\n\nFor each product in a catalog, merchants can use BigCommerce's control panel options to set multiple prices for a product. \n\nAs a theme developer seeking ways to more effectively merchandise products, you might want to engineer your theme to utilize this information and highlight the savings that a merchant is providing over the list price, commonly known as the manufacturer's suggested retail price (MSRP). In order to do this, you will need to reference the correct property that the Stencil catalog price object returns for each product. \n\nThis page explains how the properties interact with each other, and with control-panel options. We will also include an example of building conditional logic around a price property.",
                        "header": {
                          "anchor": "catalog-price_price-prop-overview"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Cost Price\n\nThe Cost Price property is never returned to the storefront. This is by design. Generally, merchants would not want to reveal the true cost of goods to shoppers. Rather, the cost price field is meant to be consumed by reports and third-party accounting integrations.",
                        "header": {
                          "anchor": "catalog-price_cost-price"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Basic Price Example – No `Sale Price` Defined\n\nAssume that the merchant has defined a product’s price like this in the BigCommerce Control Panel:",
                        "header": {
                          "anchor": "catalog-price_basic-price-example"
                        }
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539813608717",
                        "header": {
                          "title": "Item without sale price defined"
                        },
                        "config": {
                          "centered": true,
                          "fluid": true,
                          "bordered": true,
                          "maxWidth": "650",
                          "maxHeight": "350"
                        }
                      },
                      {
                        "type": "text",
                        "data": "In the photo above:\n\n* The `Price` field contains this product’s standard store price.\n* The `Excluding Tax` indicator to the right of the `Price` field is applicable to the whole column of price fields.\n* The `Cost Price` field will not be returned, for reasons described above.\n* The `Retail Price` field contains the list price (also known as MSRP).\n* No `Sale Price has` been set here.\n\n\nA corresponding Stencil `price` object for the product will be structured as follows:\n\n```\n\"product\": {\n  \"price\": {\n    \"without_tax\": {\"formatted\": \"$150.00\",\"value\": 150},\n    \"rrp_without_tax\": {\"formatted\": \"$250.00\",\"value\": 250},\n    \"saved\": {\"formatted\": \"$100.00\",\"value\": 100},\n    \"tax_label\": \"Tax\"\n  }\n}\n```\nItems to note about the Stencil `price` object above: \n\n* The `without_tax` property represents the standard store price (the control panel’s `Price` field).\n* The `rrp_without_tax` property represents the list price or MSRP. (Here, `rrp` is short for \"regular retail price.\")\n* The `saved` property is the computed difference between the `without_tax` versus `rrp_without_tax` values.\n\n"
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## `Sale Price` Defined Example\n\nThis example below is identical, except that here the merchant has assigned the product a discounted `Sale Price` of `$123`:",
                        "header": {
                          "anchor": "catalog-price_sale-price-defined"
                        }
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539837943099",
                        "header": {
                          "title": "Item with sale price defined"
                        },
                        "config": {
                          "maxWidth": "600",
                          "maxHeight": "300",
                          "centered": true,
                          "fluid": true,
                          "bordered": true
                        }
                      },
                      {
                        "type": "text",
                        "data": "A corresponding Stencil price object for the product will be structured as shown below. \n\n```\n\"product\": {\n  \"price\": {\n    \"without_tax\": {\"formatted\": \"$123.00\",\"value\": 123},\n    \"non_sale_price_without_tax\": {\"formatted\": \"$150.00\",\"value\": 150},\n    \"rrp_without_tax\": {\"formatted\": \"$250.00\",\"value\": 250},\n    \"saved\": {\"formatted\": \"$127.00\",\"value\": 127},\n    \"tax_label\": \"Tax\"\n  }\n}\n```\n\nItems to note regarding the Stencil `price` object above: \n\n* The product’s effective price is the `Sale Price` which appears in the object’s `without_tax` property.\n* The regular store price is now displayed in an added property called `non_sale_price_without_tax`.\n\n"
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Prices and Conditional Logic – Special for You! \n\nStencil structures product prices as described above for backward compatibility with the BigCommerce platform's traditional treatment of prices. As a theme developer, this behavior enables you to embed logic that determines whether to display a strikeout (struck-out) price on the storefront.\n\nThe example below tests for the presence of the `non_sale_price_without_tax` property. If it is present, that means that the product has a sale price, so the page will display the regular store price struck-out:\n\n```\n  {{#if price.non_sale_price_without_tax}}\n     ... [some code to display on-sale strikeout pricing] ...\n  {{/if}}\n```",
                        "header": {
                          "anchor": "catalog-price_prices-and-conditional"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Including and/or Excluding Tax \n\nDepending on how the store has been set up in the control panel’s `Store Setup > Tax > Configure Tax Display Settings`, the price object’s properties will represent prices including tax, excluding tax, or in both ways.\n\nThis setting affects not only how values are returned in the Stencil framework, but also how the values appear on storefront pages:",
                        "header": {
                          "anchor": "catalog-price_including-and-or-excluding"
                        }
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539842045139",
                        "header": {
                          "title": "Configure Tax Display Settings"
                        },
                        "config": {
                          "centered": true,
                          "fluid": true,
                          "bordered": true,
                          "maxWidth": "600",
                          "maxHeight": "400"
                        }
                      },
                      {
                        "type": "text",
                        "data": "Below is an example of a Stencil `price` object that returns properties’ values both including, and excluding, tax. Here, we have configured a flat 10% tax rate:\n\n```\n\"product\": {\n  \"price\": {\n    \"with_tax\": {\"formatted\": \"$165.00\",\"value\": 165},\n    \"without_tax\": {\"formatted\": \"$150.00\",\"value\": 150},\n    \"rrp_with_tax\": {\"formatted\": \"$275.00\",\"value\": 275},\n    \"rrp_without_tax\": {\"formatted\": \"$250.00\",\"value\": 250},\n    \"saved\": {\"formatted\": \"$110.00\",\"value\": 110},\n    \"tax_label\": \"Tax\"\n  }\n}\n```\n\nItems to note:\n\n* The `with_tax` property is new in this example, and represents the `without_tax` value plus a 10% tax markup.\n* The `rrp_with_tax` property is new as well, and represents the `rrp_without_tax` value plus a 10% tax markup.\n*You would see the same new properties and values if the control-panel setting had been `Including tax`, rather than `Including and excluding tax`. But these properties/vaues would not be added for a control-panel seting of Excluding tax."
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Tax/Sale Price Interactions \n\nHere is the same example – values both including and excluding tax, and a flat 10% tax rate – but we have also defined a sale price for the product:\n\n```\n\"product\": {\n  \"price\": {\n    \"with_tax\": {\"formatted\": \"$135.30\",\"value\": 135.3},\n    \"without_tax\": {\"formatted\": \"$123.00\",\"value\": 123},\n    \"rrp_with_tax\": {\"formatted\": \"$275.00\",\"value\": 275},\n    \"rrp_without_tax\": {\"formatted\": \"$250.00\",\"value\": 250},\n    \"saved\": {\"formatted\": \"$139.70\",\"value\": 139.7},\n    \"non_sale_price_without_tax\": {\"formatted\": \"$150.00\",\"value\": 150},\n    \"non_sale_price_with_tax\": {\"formatted\": \"$165.00\",\"value\": 165},\n    \"tax_label\": \"Tax\"\n  }\n}\n```\n\nHere again:\n\n* The `with_tax` property represents the without_tax value, plus a 10% tax markup.\n* The `rrp_with_tax` property represents the `rrp_without_tax` value, plus a 10% tax markup.\n\nNew here:\n\n* The `non_sale_price_without_tax` and `non_sale_price_with_tax` properties are added, to represent the standard store price (respectively) without and with tax.\n* The saved value is now based on the difference between the `with_tax` versus `non_sale_price_with_tax` values.\n* You would see the same results if the control-panel setting had been Including tax, rather than Including and excluding tax. But these properties/values would not be added for a control-panel seting of Excluding tax.",
                        "header": {
                          "anchor": "catalog-price_tax-sale-price"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Mapping of Control-Panel Options to Catalog Price Properties\n\nThis table shows how price options available in the BigCommerce control panel relate to properties returned on the Stencil framework.\n\n<table>\n  <tr>\n    <th>Control-Panel Field</th>\n    <th>Stencil Catalog Price Object and Property</th>\n    <th>Notes</th>\n  </tr>\n\n  <tr>\n    <td>Retail Price (excluding tax)</td>\n\t\t<td><code>{{ product.price.rrp_without_tax }}</code></td>\n    <td>Typically used to represent the product’s list price (MSRP).</td>\n  </tr>\n\n  <tr>\n    <td>Retail Price (including tax)</td>\n\t\t<td><code>{{ product.price.rrp_with_tax }}</code></td>\n    <td>Typically used to represent the product’s list price (MSRP), including tax.</td>\n  </tr>\n\n  <tr>\n    <td>Price (excluding tax)</td>\n\t\t<td><code>{{ product.price.non_sale_price_without_tax }}</code></td>\n    <td>The standard store price for the product.</td>\n  </tr>\n\n  <tr>\n    <td>Price (including tax)</td>\n\t\t<td><code>{{ product.price.non_sale_price_with_tax }}</code></td>\n    <td>The standard store price for the product, with tax.</td>\n  </tr>\n  \n  <tr>\n    <td>Sale Price (excluding tax)</td>\n\t\t<td><code>{{ product.price.without_tax }}</code></td>\n    <td>This product’s discounted/sale price.</td>\n  </tr>\n  \n  <tr>\n    <td>Sale Price (including tax)</td>\n    <td>{{ product.price.with_tax }}</td>\n    <td>This product’s discounted/sale price, with tax.</td>\n  </tr>\n  \n  <tr>\n    <td>[No control-panel field]</td>\n    <td>{{ product.price.saved }}</td>\n    <td>The customer’s savings on the effective price versus list price.</td>\n  </tr>\n</table>",
                        "header": {
                          "anchor": "catalog-price_mapping-of-control"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Cart Price Properties: Relationships",
                  "route": {
                    "path": "/cart-price-relationships"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Cart Price Properties: Relationships</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#cart-price_cart-price-props\">Cart Price Properties: Relationships</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Cart Price Properties: Relationships\n\nThis page shows the relationship of price properties available on the `{{cart.items}}` object. These properties' values cascade as follows.\n\nFor a single cart item, the `rrp` property contains the list price, also known as MSRP:\n\n```\n\"rrp\": { \n  \"formatted\": \"$130.00\",\n  \"value\": 130\n}\n```\n\nLet's assume that the standard store price for this item is actually $100.00, and that these bulk discount rules are applied:\n\n```\n\"bulk_pricing\": { \n  \"base_price\": {\n    \"formatted\": \"$100.00\",\n    \"value\": 100\n  },\n  \"discount_percentage\": 5,  \n  \"discount_amount\": null\n}\n```\n\nWithin `{{cart.items}}`, the `price` property contains the item's price after bulk discounts, but before cart discounts and promotions:\n\n```\n\"price\": { \n  \"formatted\": \"$95.00\",\n  \"value\": 95\n}\n```\n\nThe `price_discounted` property contains the item's price after cart discounts and promotions:\n\n```\n\"price_discounted\": {  \n  \"formatted\": \"$85.50\",\n  \"value\": 85.5\n}\n```\n\n",
                        "header": {
                          "anchor": "cart-price_cart-price-props"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Calling Theme-Wide Variables via Handlebars",
                  "route": {
                    "path": "/calling-theme-wide-variables"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Calling Theme-Wide Variables via Handlebars</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#calling-theme-wide_calling-theme-wide\">Calling Theme-Wide Variables via Handlebars</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Calling Theme-Wide Variables via Handlebars\n\nAs shown in an earlier Quick Start example, you can reference variables from `config.json` in a theme template's front matter. But you can also call any `config.json` variable within a template's HTML/Handlebars body, by using a Handlebars expression that precedes the variable with `theme_settings`.\n\nBelow, from Cornerstone's `templates/pages/home.html`, is a code snippet that provides three examples:\n\n```\n<div class=\"main full\">\n    {{#if products.featured}}\n        {{> components/products/featured products=products.featured\n            columns=theme_settings.homepage_featured_products_column_count}}\n    {{/if}}\n\n    {{#if products.top_sellers}}\n        {{> components/products/top products=products.top_sellers\n            columns=theme_settings.homepage_top_products_column_count}}\n    {{/if}}\n\n    {{#if products.new}}\n        {{> components/products/new products=products.new \n            columns=theme_settings.homepage_new_products_column_count}}\n    {{/if}}\n</div> \n```\n\nAbove, each `if` conditional statement tests whether one of the three products attributes (Featured Products, Top Sellers/Popular Brands, or New Products) is declared within this template's front matter. If so, for the corresponding section on this page, it sets the local column count to match the theme-wide `theme_settings...._column_count value` defined in `config.json`.",
                        "header": {
                          "anchor": "calling-theme-wide_calling-theme-wide"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Dynamic Content Rendering on Stencil Storefronts",
                  "route": {
                    "path": "/dynamic-content-rendering"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Dynamic Content Rendering on Stencil Storefronts</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#dynamic-content_why-dynamic-content\">Why Dynamic Content?: Dropzones, Dynamic Tabs, and Snippets</a></li>\n    <li><a href=\"#dynamic-content_dropzones\">Dropzones</a></li>\n    <li><a href=\"#dynamic-content_dynamic-tabs\">Dynamic Tabs</a></li>\n    <li><a href=\"#dynamic-content_snippets\">Snippets</a></li>\n    <li><a href=\"#dynamic-content_recap\">Recap</a></li>\n  </ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "_We're gratefully sharing techniques devised by Ken Utting, Web Developer for BigCommerce client goruck.com_.\n\n## Why Dynamic Content?: Dropzones, Dynamic Tabs, and Snippets\n\nAt GORUCK, we've customized our Stencil theme (currently using the [Merchant](https://www.bigcommerce.com/theme/merchant-light/?_ga=2.52710120.1984523106.1539568940-967431010.1523308107) theme) to provide several ways to update our site content without requiring changes to the theme itself. This allows our content folks to make changes to our theme without having to wait on our software developers.\n\nAlso, by pushing content out of the theme, these techniques reduce the differences between our customized theme and the out-of-the-box (base) theme – which makes it easier to integrate ongoing updates into our theme. Finally, these techniques allow us share identical content across pages without copying and pasting.\n\nThree techniques in particular have proven useful to us. We call them Dropzones, Dynamic Tabs, and Snippets. There is nothing particularly special to GORUCK about these techniques, so there is no reason you can't adopt them for your own store/theme.\n\n### Building on the Control Panel\n\nThe BigCommerce control panel provides an HTML editor where you can enter custom content for Products, Categories, and custom static pages (Storefront > Web Pages). However, we encountered the following limitations:\n\nThe HTML editor will remove a number of tags, particularly style and script tags.\n\nWithout changes like the ones we made at GORUCK (described below), all the content will be placed in a single location on the page.\n\nAt GORUCK, we needed the ability to inject arbitrary HTML into our page, and to place that content at various specific page locations. To achieve this, we developed the three techniques described below.",
                        "header": {
                          "anchor": "dynamic-content_why-dynamic-content"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Dropzones\n\nLet's say that at the top of your category pages, you want to display a full-width, category-specific, image. And at the bottom of these pages, you want to display a category-specific message or image gallery.\n\nOne possibility is to define a custom page for every category. But aside from the work involved to set this up, every time you added or removed a category, you would need to add or remove a custom page from your theme. And of course, it's possible that you would also want control like this on product pages, and on other pages on your storefront.\n\nA more general solution we implemented was to create a small set of custom pages: one for categories, one for products, and so on. Each of the custom pages contains a few `div` elements that define dropzones for that page.\n\nWith these dropzones defined, we can then populate them with dynamic content specific to any instance of the page. Here is an example of a dropzone that places an image gallery at the bottom of a category page:",
                        "header": {
                          "anchor": "dynamic-content_dropzones"
                        }
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539874696853",
                        "header": {
                          "title": "Dropzone that places an image gallery at the bottom of a category page"
                        }
                      },
                      {
                        "type": "text",
                        "data": "### Dropzones HTML\n\nThe HTML for a dropzone is simply something like:\n\n`<div id=\"gr-dropzone-top\"></div>`\n\nwhere the div's `id` defines the dropzone's name.\n\nThen, using the BigCommerce **control panel's custom HTML editor** (in this example, the Categories editor), we place our content inside div tags that specify the dropzone where the content should be inserted. Here is a simple example:\n\n```\n<div class=\"gr-dropzone\" data-gr-zone=\"gr-dropzone-top\">\n    <p>This content will be placed in a dropzone at the top of the page, because that dropzone has the id matching our data-gr-zone attribute.</p>\n</div>\n```\n\n### Dropzones HTML Example\n\nHere is an example of some HTML that we actually use:\n\n```\n<div class=\"gr-dropzone\" data-gr-zone=\"gr-dropzone-bottom\">\n    <h3>GORUCK GEAR IN THE FIELD</h3>\n    <div id=\"bv-grid-gallery\" data-gr-groups=\"goruck-rm-group\" data-gr-tags=\"gear\"></div>\n</div>\n```\n\n### Dropzones JavaScript\n\nThe content is moved from the default location to the dropzone by JavaScript we added to the PageManager class. In BigCommerce's Cornerstone base theme, Pixel Union's Merchant theme, and other Stencil themes, PageManager is the parent class of all page classes. So, its methods get invoked on every page. This makes it a great place to put code like this, which needs to run every time a page is loaded.\n\nWe modified our theme's PageManager.before method to invoke a new method named `gr_moveHtmlToDropzones`:\n\n```\n gr_moveHtmlToDropzones () {\n        $(\".gr-dropzone\").each(function () {\n            const $this = $(this);\n            const zoneId = $this.data(\"gr-zone\");\n            if (zoneId) {\n                $(\"#\" + zoneId).html($this.html());   // copy the html to where it should be\n                $this.remove();             // remove the html from its temporary location\n            } else {\n                console.warn(\"PageManager.gr_moveHtmlToDropzones: dropzone has no target.\");\n            }\n        });\n    }\n```\n\nFinally, in our .scss file, we set the `.gr-dropzone` class to display: none. This prevents the content from appearing on the page in the wrong location before PageManager has a chance to move it into the dropzone.",
                        "header": {
                          "anchor": "dynamic-content_dropzones"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Dynamic Tabs\n\nOur Stencil base theme presents information on our product pages in several tabs. We wanted to introduce several new tabs, and to vary the tabs by product category and brand. Additionally, we wanted the ability to store a tab's content in an external file, on our WebDAV or CDN (content delivery network).\n\nBy storing content in an external file, we can share identical content across pages, without copying and pasting. Also, changes to the content can be made just once, and be reflected on all our pages.\n\nSo we implemented a feature we call Dynamic Tabs. Dynamic Tabs are similar to dropzones, in that they allow you to use the control panel's HTML editor to provide content, while moving it to a specific location on the page. In this case, our content will appear in a tab.\n\nIn the example below, we use this technique to place the `RIGHT BY YOU` tab in the fourth position:",
                        "header": {
                          "anchor": "dynamic-content_dynamic-tabs"
                        }
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539874970240"
                      },
                      {
                        "type": "text",
                        "data": "### Dynamic Tabs HTML\n\nThere are two versions of the HTML. The first is designed for a tab you want to drop in using a page's own HTML:\n\n```\n<div class=\"gr-tab\" data-gr-position=\"POSITION\" data-gr-title=\"TITLE\"> \n     CONTENT \n</div>\n```\n\nThe second version is designed for a tab that gets its content from an external file:\n\n```\n<div class=\"gr-tab\" data-gr-content=\"CONTENT URL\">\n</div>\n```\n\nIn this second case, the HTML in that external file must start with the POSITION and TITLE information:\n\n```\n<input id=\"gr-tab-data\" type=\"hidden\" data-gr-position=\"POSITION\" data-gr-title=\"TITLE\" /> \n CONTENT\n```\n\n### Dynamic Tabs Parameters\n\nPOSITION is a number, which determines where the dynamic tab will be put. For example, a POSITION of 3 means that the tab will be placed after the third tab.\n\nWe use a POSITION of 0 to place a tab ahead of the first tab. If the POSITION attribute is omitted, the tab will be placed after all the other tabs. (Note that if you add multiple dynamic tabs, any POSITION that you specify must account for the previously inserted dynamic tabs.)\n\nTITLE is the text you want to display as the tab's title. For example: Our Guarantee.\n\nCONTENT is any arbitrary HTML, and is displayed when the user clicks on the tab's title.\n\n### Dynamic Tabs HTML Example\n\nTo create the RIGHT BY YOU tab in the screenshot above, we added this code to our base theme's templates/pages/product.html template:\n\n```\n<!-- GORUCK Customization: pull in a dynamic tab -->\n  <div class=\"gr-tab\" data-gr-content=\"/content/tabs/dynamicTab1.html?v=14\">\n  </div>\n```\n\nThis tells our code to pull in a file named `dynamicTab1.html`, located in our WebDAV's `/content/tabs/` folder. The querystring is used just to defeat caching.\n\nHere are the contents of our `dynamicTab1.html` file:\n\n```\n<input id=\"gr-tab-data\" type=\"hidden\" data-gr-position=\"3\" data-gr-title=\"Right By You\"/>\n<div class=\"container container-small gr-rightbyyou\">\n  <div style=\"display: flex; flex-direction: column\">\n    <div style=\"display: flex\">\n      <div>\n        <img style=\"display: block; width: 100px; max-width: 100px; margin-right: 24px\" \n        src=\"https://content.goruck.com/2017site/products/free-returns-icon.png\" height=\"auto\"/>\n      </div>\n    <div>\n      <h3 style=\"margin-top: 0\">Free &amp; Easy Returns</h3>\n      <p>Don't like it? Send it back for free. Returnable in like-new condition within 30 days and \n      every order comes with a free return shipping label. Too easy.</p>\n    </div>\n  </div>\n\n  <div style=\"display: flex; margin-top: 12px\">\n    <div>\n      <img style=\"display: block; width: 100px; max-width: 100px; margin-right: 24px\" \n      src=\"https://content.goruck.com/2017site/products/challenge-excellence.png\" height=\"auto\"/>\n    </div>\n\n    <div>\n      <h3 style=\"margin-top: 0\">Challenge Excellence</h3>\n      <p>We have two grades, A and F and A- rounds down. Excellence is the standard and please hold us to it, \n      we want you to love your gear as much as we do.</p>\n    </div>\n  </div>\n\n  <div style=\"display: flex; margin-top: 12px\">\n    <div>\n      <img style=\"display: block; width: 100px; max-width: 100px; margin-right: 24px\" \n      src=\"https://content.goruck.com/2017site/products/customer-service-icon.png\" height=\"auto\"/>\n    </div>\n      <div>\n        <h3 style=\"margin-top: 0\">Do Right By People</h3>\n        <p>Our goal is to run a company our grandfathers would be proud of. And the central tenet \n        &mdash; an oldie but a goodie &mdash; is that we do whatever it takes to do right by people.\n        Contact us at <a href=\"https://goruck.zendesk.com/hc/en-us/requests/new\" target=\"_blank\">\n        team@goruck.com</a> with any questions and we'll get back to you ASAP.</p>\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n### Dynamic Tabs Javascript \n\nAgain, the JavaScript code to implement Dynamic Tabs is invoked in the PageManager class' before method. The Dynamic Tabs code is more complex, and it relies on other classes we wrote to get content from the external server and cache it in the browser.\n\nNevertheless, none of it is rocket science. The three classes involved are 250 lines of code. Interested readers are invited to contact me via the BigCommerce Developers forum for more information about the implementation.\n\n"
                      },
                      {
                        "type": "text",
                        "data": "## Snippets\n\nSnippets are similar to Dynamic Tabs, in that they allow you to use the BigCommerce control panel's HTML editor to provide content, but pull it from a separate file. This allows you to share common content across multiple pages.\n\nAlso, because the control panel's HTML editor strips out stylesheets, this is a good way to provide page-specific styles for a page.\n\nWe use snippets at GORUCK to display our sizing charts, as shown below. This makes sense since because we have a handful of charts that need to be shared across many products, so we don't want to copy and paste each chart for every product that needs it."
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539878331668",
                        "config": {
                          "centered": true,
                          "fluid": true,
                          "bordered": true,
                          "maxWidth": "650",
                          "maxHeight": "350"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Snippets HTML\n\nHere is the format of the HTML that needs to placed on each page that uses the snippet:\n\n```\n<div class=\"gr-snippet\" data-gr-content=\"CONTENT URL\">\n     <em>Loading...</em>\n</div>\n```\n\nThe external file can contain any arbitrary HTML and CSS, and the styled HTML is displayed in the page location where the `gr-snippet` div is located.\n\n### Snippets JavaScript\n\nLike Dropzones and Dynamic Tabs, the Snippets code is invoked in `PageManager`'s `before` method. Snippets adds just another 50 lines of JavaScript code to the theme, also relying on the same code that Dynamic Tabs uses to get the external file and cache it in the browser.\n\n",
                        "header": {
                          "anchor": "dynamic-content_snippets"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Recap \n\nAt GORUCK, we've developed a number of techniques that allow us to separate our content from our theme. These techniques have proved valuable to us, because they allow us to:\n\n* Keep our content development and software development workflows separate.\n* Reduce modifications to our theme, which simplifies merging updates from our theme provider.\n* Share content across multiple pages.\n* Tailor our content based on product category and brand.",
                        "header": {
                          "anchor": "dynamic-content_recap"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Internationalization/Localization",
            "route": {
              "path": "/internationalization-and-localization"
            },
            "data": {
              "children": [
                {
                  "title": "Localizing Stores",
                  "route": {
                    "path": "/localizing-stores"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Localizing Stores</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#localizing_localization-touchpoints\">Localization Touchpoints Overview</a></li>\n    <li><a href=\"#localizing_translating-theme-files\">Translating Theme Files via Stencil CLI</a></li>\n    <li><a href=\"#localizing_localizing-checkout\">Localizing Checkout</a></li>\n    <li><a href=\"#localizing_localizing-control-panel\">Localizing Control Panel Content</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Localization Touchpoints Overview \n\nYou can run a BigCommerce store in any single language of your choice. If you want to support multiple languages, we recommend setting up a separate store for each language. To fully localize a store into a language/region other than U.S. English, you will need to customize three areas:\n\nStorefront theme pages: Translate static strings. This requires adding translation files for your chosen non-English languages, via Stencil CLI.\n\nCheckout: Localizing checkout requires modifications both to theme files (in Stencil CLI) and to settings in the BigCommerce control panel.\n\nOutside your theme: Adjust other localization details via the BigCommerce control panel.\n\nThe following sections provide a linked summary of all the steps involved.",
                        "header": {
                          "anchor": "localizing_localization-touchpoints"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Translating Theme Files via Stencil CLI\n\nThe core of localizing a store is to translate content on your theme's page templates into each language that you choose to support. You will need to abstract these templates' literal text strings into `{{lang}}` variables, then provide per-language JSON files that define these variables in corresponding key/value pairs.\n\nFor details on this process, see this section's remaining pages, starting with [Basis for Internationalization](/stencil-docs/internationalization-and-localization/basis-for-internationalization).",
                        "header": {
                          "anchor": "localizing_translating-theme-files"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Localizing Checkout\n\nLocalizing your theme's checkout and order confirmation pages requires specific steps in:\n* the corresponding templates \n* each of your JSON translation files \n* and in the BigCommerce control panel\n\n**Note:** _To localize your theme's checkout and/or order confirmation page, you must first enable [Optimized One-Page Checkout.](/stencil-docs/template-files/customiz-stencil-checkout/optimized-one-page-checkout#optimized_enable)_\n\nFor details, please see the following pages:\n\n* [Enabling Optimized One-Page Checkout](/stencil-docs/template-files/customiz-stencil-checkout/optimized-one-page-checkout#optimized_enable) is a **prerequisite** for the remaining checkout internationalization options below.\n\n* [Currency-Conversion Options](/stencil-docs/template-files/customiz-stencil-checkout/currency-conversion) covers displaying prices in alternate currencies.\n\n* [Multi-Language Checkout](/stencil-docs/template-files/customiz-stencil-checkout/multi-language-checkout) covers translating your checkout and/or order confirmation templates.",
                        "header": {
                          "anchor": "localizing_localizing-checkout"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Localizing Control Panel Content\n\nThe remaining localization options reside outside your theme and are accessible through the BigCommerce control panel:\n\n* [Product Catalog](#product-catalog)\n* [Currency](#currency)\n* [Date Format](#date-format)\n* [Order Statuses](#order-statuses)\n* [Blog](#blog)\n* [Static Web Pages](#static-web-pages)\n* [Transactional Emails](#transactional-emails)\n* [Gift Certificates](#gift-certificates)\n\n**Note:** _The BigCommerce platform does not currently support translation of Transactional Emails or Gift Certificates into languages other than English, so we have rather provided a management best practice for each._\n\n### <div id=\"product-catalog\">Localizing the Product Catalog</div>\n\nYou must localize the store's product catalog separately from its theme. Each entry within a catalog can be set up in only one language, so you will want to localize a separate version of your catalog for each single-language store.\n\nFor an overview of populating the store catalog – including options for bulk-importing content that you can localize outside the BigCommerce platform – please see our support article on Adding and Managing Your Product Catalog.\n\n### <div id=\"currency\">Localizing Currency</div>\nEach store's default currency is configured in the BigCommerce control panel. For details, please see our support article on Changing Your Default Currency.\n\n### <div id=\"date-format\">Localizing Date Format</div>\nYou can set the appropriate date format for your store's language/region in the BigCommerce control panel (under Store Setup > Store Settings > Date & Timezone). For details, please see this support article.\n\n### <div id=\"order-statuses\">Localizing Order Statuses</div>\nThe order-status labels displayed on a BigCommerce storefront are configured outside your theme. You can translate each of these strings via the BigCommerce control panel's Orders > Order Statuses option. For instructions, please see the Customizing an Order Status Label support topic.\n\n### <div id=\"blog\">Localizing the Blog</div>\nYou manage blog entries through the BigCommerce control panel (under Storefront Content > Blog). You are free to add blog content in any language you choose. For details, please see this support article.\n\n### <div id=\"static-web-pages\">Localizing Static Web Pages</div>\nIf you create static pages as Stencil custom templates, you can localize their content just like other theme pages' content. However, if you create custom pages via the BigCommerce control panel (under Storefront Content > Web Pages), you must also enter their localized content via the control panel; for details, please see this support article.\n\n### <div id=\"transactional-emails\">Managing Transactional Emails</div>\nBigCommerce does not currently provide native support for localizing transactional emails. To fully localize a store into a language other than English, the simplest solution is to disable the sending of BigCommerce native emails. You can access this option from the BigCommerce control panel's left nav in one of two locations (depending on your store's control-panel version):\n\n`Storefront Design` > `My Themes` > `Design Options` > `More` (drop-down list) > `Emails`\nNext, in the Enable column, uncheck the check box for each email type that you want to disable. (These toggles require no confirmation step.) For further details about managing BigCommerce transactional emails, please see this support article.\n\n### <div id=\"gift-certificates\">Managing Gift Certificates</div>\nThe BigCommerce platform does not currently support translation of gift certificates into languages other than English. To fully localize your store, you can choose to disable gift certificates via the BigCommerce control panel.",
                        "header": {
                          "anchor": "localizing_localizing-control-panel"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Basis for Internationalization",
                  "route": {
                    "path": "/basis-for-internationalization"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Basis for Internationalization</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#basis_what-translates\">What Does and Doesn't Translate</a></li>\n    <li><a href=\"#basis_required\">Required Subdirectory</a></li>\n    <li><a href=\"#basis_schema\">The Schema</a></li>\n    <li><a href=\"#basis_localization-file\">Localization File Structure</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## What Does and Doesn't Translate\n\nThe Stencil framework allows you to define multiple translations for each theme based on a predefined schema. Theme developers are not required to localize a theme in order to make it work. BigCommerce does not provide translations for the theme’s content, however, you have the option of localizing your themes for desired target languages, based on the provided schema.\n\n* In order for theme translation to occur, you must create a JSON file for each language you choose to support and include key/value pairs for the text blocks/parameters that you choose to translate. The following pages provide details for these steps.\n\n* The translated values will be displayed to visitors who have selected the corresponding language in their browser's locale preferences. The Stencil framework automatically detects the Accept-Language request HTTP header from the visitor's browser.\n\n* Where a Stencil theme contains no JSON file matching any of the visitor's preferred languages, it will fall back to the values in the default English-language JSON file.\n\n* Stencil's multi-language capabilities are currently limited to these particular strings that you specify within the theme. The Stencil framework does not currently translate content rendered from a store's catalog database – for example, products' names.\n\n* If you want to fully support multiple languages, we recommend that you set up a separate storefront for each language. This will enable you to thoroughly customize all of your content (including your product catalog) for each target audience.",
                        "header": {
                          "anchor": "basis_what-translates"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Required Subdirectory\n\nWithin each theme, a top level `/lang/` subdirectory is reserved for internationalization. This `.../lang/` subdirectory, with its contained en.json file (which contains English-language defaults), must be present in order for a Stencil theme to function.\n\nYou can localize a theme by providing other appropriate .json translation files in the `.../lang/` subdirectory. One file is required for each language that you want to support. (These can include non-U.S. versions of English, each with their own spellings.)\n\nWithin these files, you would define key values corresponding to the text blocks in your theme's templates that you choose to abstract into translatable keys.\n",
                        "header": {
                          "anchor": "basis_required"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## The Schema\n\nName your translation files based on the <a href=\"https://tools.ietf.org/html/bcp47\">BCP47 specification</a> of language and region codes. For a summary of how these codes are designed, see the World Wide Web Consortium’s <a href=\"http://www.w3.org/International/articles/language-tags/\">overview</a>.<br>\n\n <br>\n\nYou can find a list of code subtags in the <a href=\"http://www.iana.org/assignments/language-subtag-registry\">IANA Language Subtag Registry</a>. These subtags are primitives that you can combine to create file names’ prefixes for individual regions. Here are some examples:\n\n<table>\n\t\t<tr>\n    <th>Localization file name</th>\n    <th>Corresponding regional language variant</th>\n    <th>Subtags used</th>\n  </tr>\n  <tr>\n    <td>en.json</td>\n    <td>English (default file)</td>\n    <td>en (English)</td>\n  </tr>\n  <tr>\n    <td>en-US.json</td>\n    <td>American English</td>\n    <td>en (English) + US (United States)</td>\n  </tr>\n  <tr>\n    <td>en-AU.json</td>\n    <td>Australian English</td>\n    <td>en (English) + AU (Australia)</td>\n  </tr>\n  <tr>\n    <td>fr.json</td>\n    <td>French</td>\n    <td>en (French)</td>\n  </tr>\n  <tr>\n    <td class=\"\">fr-CA.json</td>\n    <td class=\"\">Canadian French</td>\n    <td class=\"\">fr (French) + CA (Canada)</td>\n  </tr>\n</table>\n\n\nFor more examples of frequently-used codes, see the following linked table’s \"LCID string\" (middle) column: <a href=\"http://www.science.co.il/Language/Locale-codes.asp\">http://www.science.co.il/Language/Locale-codes.asp</a>.",
                        "header": {
                          "anchor": "basis_schema"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Localization File Structure\n\nThe `.json` translation files have a straightforward structure of key-value pairs. Here is an example, from Stencil’s default `en.json` file:\n\n`\"welcome_back\": \"Welcome back, {name}\"`\n\nAbove, `\"welcome_back\"` is an arbitrary key name for a welcome message. The string `\"Welcome back, {name}\"` is its assigned value for English-language stores.\n\nIf you design your theme’s storefront pages to refer to this message by its generic key name `\"welcome_back\"`, they can pass its localized value in other languages, as that value is defined in each language’s `.json` file.\nKey-value pairs are grouped into objects, as you can see in this longer example:\n\n```\n{\n   \"header\": {\n    \"welcome_back\": \"Welcome back, {name}\"\n   },\n   \"prelaunch\": {\n    \"coming_soon\": \"Coming Soon\",\n    \"intro\": \"This store will be launching shortly. Please visit again!\"\n   },\n   \"cart\": {\n    \"items\": \"{NUM, plural, =0{(0 items)} one {(# item)} other {(# items)}}\",\n    \"label\": \"Cart\",\n    \"is_empty\": \"Your cart is empty\",\n     \"coupon_code\": \"Coupon Code\",\n    \"gift_certificate\": \"Gift Certificate\",\n    \"freeshipping\": \"Free Shipping\",\n    \"shipping_peritem\": \"Per Item Shipping\",\n    \"shipping_estimator\": {\n        \"add_info\": \"Add Info\",\n        \"select_a_country\": \"Select a Country\",\n        \"select_a_state\": \"Select a State\",\n        \"estimate_shipping\": \"Estimate Shipping\"\n    }\n   },\n}\n```",
                        "header": {
                          "anchor": "basis_localization-file"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Invoking Translation Keys",
                  "route": {
                    "path": "/invoking-translation-keys"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Invoking Translation Keys</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#invoking_translation\">Translation Syntax</a></li>\n    <li><a href=\"#invoking_video\">Video Demo</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Translation Syntax\n\nOnce keys and values are defined in the appropriate .json translation files, you invoke dynamic translation strings using the Stencil framework’s `{{lang}}` custom Handlebars helper. Your invocation would follow this generic format:\n\n`{{lang \"translation.key\" optionalVariable=”someValue”}}`\n\nHere is how this works. In a non-internationalized theme, a storefront page might include a static/dynamic string like this:\n\n`<a href=\"{{ urls.account }}\">Welcome Back <span>{{ customer.name }}</span></a>`\n\nThe corresponding internationalized version – ready to work with any language – would substitute the fully dynamic `{{ lang... }}` Handlebars helper shown below:\n\n`<a href=\"{{ urls.account }}\">{{ lang \"header.welcome_back\" name=customer.name }}</a>`",
                        "header": {
                          "anchor": "invoking_translation"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Video Demo\n\nWatch a video demonstration of how JSON translation files' key/value pairs interact with your templates' Handlebars statements to localize your storefront pages: \n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ygiRGfSrmnA\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>",
                        "header": {
                          "anchor": "invoking_video"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "body": "Be sure to set permission 644 (rw-r–r–) on any new translation files that you add. Without these permissions, running your theme locally will fail, with multiple error messages. Bundling your theme will also fail, blocking its upload to a store.",
                          "type": "warning",
                          "title": "File Permissions Required"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Features Supported",
                  "route": {
                    "path": "/features-supported"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Features Supported</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#implementation_automatic-language-detection\">Automatic Language Detection</a></li>\n    <li><a href=\"#implementation_cascading-translations\">Cascading Translations</a></li>\n\t\t<li><a href=\"#implementation_nested-plurality\">Nested Plurality and Gender Support</a></li>\n\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Automatic Language Detection\n\nThe Stencil framework can automatically detect a localized language, based on the active shopper’s `\"Accept‑Language\"` header.",
                        "header": {
                          "anchor": "implementation_automatic-language-detection"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Cascading Translations\n\nCascading works as follows: Assume that a Quebec/French-Canadian customer visits a storefront built with both `fr.json` and `fr‑CA.json` localization files. The framework places the `fr‑CA` locale \"on top of\" the base `fr locale`. Therefore, any strings missing from the `fr‑CA.json` file will “fall back” to definitions in the base `fr.json file`, providing at least approximate translations. This cascading works generally across languages and locales.",
                        "header": {
                          "anchor": "implementation_cascading-translations"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Nested Plurality and Gender Support\nThe framework allows you to code conditional plurality for strings within each translation file. For example, your code within an English-language file could overload a single message to display in each of the following forms – depending on the actual value of its two numeric variables:\n\n* \"There are 3 items in 2 categories\"\n* \"There is 1 item in 2 categories\"\n* \"There are 2 items in 1 category\"\n\nHere is the markup that would handle the first three words in each example above, assuming appropriate parameters were inserted in the translation files:\n\n```\n<h2 class=\"modal-header-title\">\n   {{lang 'cart.added_to_cart.what_next' num_products=cart.quantity}} [...]\n</h2>\n```\n\nSimilarly, the framework supports per-language conditional coding of appropriate genders for pronouns and nouns.",
                        "header": {
                          "anchor": "implementation_nested-plurality"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Implementation Example",
                  "route": {
                    "path": "/implementation-example"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Implementation Example</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#implementation_cornerstone-example\">Cornerstone Implementation Example</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Cornerstone Implementation Example\n\nHere is an example based on this file within Cornerstone:\n`cornerstone/templates/components/cart/shipping-estimator.html`\n\nIn the excerpt below, each highlighted `{{lang...}}` statement is a Handlebars helper. Each of the statements abstracts the message indicated by its (English-language) key name to enable internationalization of that message:\n\n```\n<div class=\"shipping-estimator\" style=\"display: none;\">\n    <form class=\"estimator-form\">\n      <button class=\"shipping-estimate-hide\">{{lang 'cancel'}}</button>\n      <select name=\"shipping-country\">\n      <option>{{lang 'cart.shipping_estimator.select_a_country'}}</option>\n      {{#each countries}}\n          <option value=\"{{id}}\" {{#if selected}}selected=\"selected\"{{/if}}>\n                {{name}}\n          </option>\n      {{/each}}\n      </select>\n      <select name=\"shipping-state\">\n      <option>{{lang 'cart.shipping_estimator.select_a_state'}}</option>\n      {{#each states}}\n          <option value=\"{{id}}\" {{#if selected}}selected=\"selected\"{{/if}}>\n              {{name}}\n          </option>\n      {{/each}}\n      </select>\n      <input type=\"text\" name=\"shipping-zip\" value=\"{{selected_zip}}\">\n      <button class=\"shipping-estimate-submit\">{{lang 'cart.shipping_estimator.estimate_shipping'}}\n      </button>\n    </form>\n    <div class=\"shipping-quotes\"></div>\n</div>\n\n```\n\n\nIn the excerpts below, you can see that the default theme’s basic `.../lang/en.json` file includes matches, and value definitions, for each of the translation keys in the Handlebars helpers above:\n\n\n```\n{\n  \"header\": {\n        \"welcome_back\": \"Welcome back, {name}\"\n  },\n  ...\n      \"label\": \"Cart\",\n        \"is_empty\": \"Your cart is empty\",\n        \"coupon_code\": \"Coupon Code\",\n        \"gift_certificate\": \"Gift Certificate\",\n        \"freeshipping\": \"Free Shipping\",\n        \"shipping_peritem\": \"Per Item Shipping\",\n      \"shipping_estimator\": {\n            \"add_info\": \"Add Info\",\n          \"select_a_country\": \"Select a Country\",\n          \"select_a_state\": \"Select a State\",\n          \"estimate_shipping\": \"Estimate Shipping\"\n      }\n  },\n  \"common\": {\n        \"currency_converter\": \"Currency Converter\",\n        \"newsletter_signup\": \"Sign up for our newsletter\",\n        \"form_submit\": \"Submit\",\n        \"required\": \"Required\",\n        \"email_address\": \"Email Address\",\n      \"edit\": \"Edit\",\n      \"no\": \"No\",\n      \"yes\": \"Yes\",\n      \"cancel\": \"Cancel\",\n      \"share\": \"Share\",\n      \"delete\": \"Delete\",\n      \"public\": \"Public\",\n        \"private\": \"Private\",\n        \"view_all\": \"View All\",\n        \"paginator\": {\n            \"page_of\": \"Page {current} of {total}\"\n      },\n      ...\n```\n\n\nTranslation files for other languages would use the same format, to define these keys’ values in their respective languages.",
                        "header": {
                          "anchor": "#implementation_cornerstone-example"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Prepare & Upload a Theme",
            "route": {
              "path": "/prepare-and-upload-a-theme"
            },
            "data": {
              "children": [
                {
                  "title": "Checking a Theme's Size",
                  "route": {
                    "path": "/checking-a-themes-size"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Checking a Theme's Size</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#checking_checking\">Checking a Theme's Size</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Checking a Theme's Size\n\nYour theme should ideally bundle into an archive of only a few megabytes. BigCommerce imposes a hard limit of 50 MB, but most themes do not approach this limit unless they include many large static assets.\n\nIf your theme is unlikely to exceed 50 MB, you can skip past jump directly to Bundling and Uploading a Theme.\n\nA few themes, however, might exceed the 50 MB limit. In these cases, you can either Shrink Your Theme with the help of WebDAV or Stage Your Theme for CDN Delivery to restructure your theme to a size that's manageable for upload to BigCommerce.",
                        "header": {
                          "anchor": "checking_checking"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Shrinking A Theme ",
                  "route": {
                    "path": "/shrinking-your-theme"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Shrinking a Theme by Excluding Static Assets Using WebDAV</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#shrinking_restructuring\">Restructuring a Theme</a></li>\n    <li><a href=\"#shrinking_webdav-folders\">WebDAV Folders and Stencil Themes</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Restructuring Your Theme\n\nIn this section, you will first isolate static assets from your theme's local directory, then use WebDAV to cloud-host those assets, and finally reference those assets using Stencil's cdn Handlebars helper.\nFor an existing theme, make a backup of your whole <theme‑name> directory before proceeding.\n\nExamine your theme's `/assets/` subdirectory and/or its intended contents. Check for large static assets like images (especially in `/assets/img/`) and videos that are likely culprits in causing a bundled `.zip` file to go toward or beyond BigCommerce's 50 MB limit.\n\nUse WebDAV to upload these items to WebDAV's remote `/content/` directory. For WebDAV specifics, please see BigCommerce's Knowledge Base articles on:\n* [Connecting to WebDav]()\n* [WebDAV Folder Structure]()\n\nThroughout your theme, reference each of these assets using Stencil's `cdn` custom Handlebars helper – prepending the `webdav:` option to the `assetPath` parameter.\n\nPrepending `webdav:` will build a URL in the remote WebDAV directory. This allows your theme's deployed topology to diverge from any your local directory structure. As noted above, the `cdn` helper will treat `/content/` as the default/root WebDAV directory. So, for example, this statement:\n\n`<img src=\"{{cdn \"webdav:img/image.jpg\"}}\">`\n\nwill build the URL transformed below:\n\n`<img src=\"https://cdn.bcapp/3dsf74g/content/img/image.jpg\">`\n\nOn your local machine, move the large static assets to a location where the `stencil bundle` command will ignore them.\nThis can be a location outside your `<theme-name>` directory, or it can be the `<theme-name>/assets/cdn/ subdirectory`, which stencil bundle excludes from bundling. Separating these assets is necessary to exclude them from the next step.\n\nRun or re-run the `stencil bundle` command, from inside your streamlined `<theme‑name>` directory.\nOnce your resulting `.zip` file is 50 MB or smaller, upload it to BigCommerce, as described [here]().\n",
                        "header": {
                          "anchor": "shrinking_restructuring"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "type": "warning",
                          "body": "Both in production and locally, subdirectories of your theme's `assets/` directory – like `img/`,` js/`, and `fonts/` – are parallel to its `scss/` subdirectory. So within your CSS, path references to such assets should reflect this parallel relationship – for example: `../img/test.jpg`.",
                          "title": "URL References to Assets"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## WebDAV Folders and Stencil Themes\n\nIf you have used WebDAV in developing BigCommerce's earlier (Blueprint) generation of themes, you will see some differences when uploading Stencil themes.<br><br>\n\nThe directories accessible through WebDAV will dynamically change, depending on the type of theme that is active in the merchant's store, as follows:<p></p>\n\n<table>\n  <tr>\n    <td><b>Available while the merchant's active theme is Blueprint:</b></td>\n    <td class=\"\"><b>Available while the merchant's active\n      theme is Stencil:</b></td>\n  </tr>\n  <tr>\n    <td>/content/</td>\n    <td>/content/</td>\n  </tr>\n  <tr>\n    <td>/product_images/</td>\n    <td>/product_images/</td>\n  </tr>\n  <tr>\n    <td>/product_downloads/</td>\n    <td>/product_downloads/</td>\n  </tr>\n  <tr>\n    <td>/import_files/</td>\n    <td>/import_files/</td>\n  </tr>\n  <tr>\n    <td>/exports/</td>\n    <td>/exports/</td>\n  </tr>\n  <tr>\n    <td>/template/</td>\n    <td>-</td>\n  </tr>\n  <tr>\n    <td>/mobile_template/</td>\n    <td>-</td>\n  </tr>\n </table>\n\n<i>The overall difference is that the WebDAV `/template/` and `/mobile_template/` directories are <b>not</b> available for Stencil themes. These templates must reside and remain within your Stencil theme's local directory and file structure.</i>",
                        "header": {
                          "anchor": "shrinking_webdav-folders"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Staging A Theme for CDN Delivery",
                  "route": {
                    "path": "/staging-a-theme"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Staging A Theme for CDN Delivery</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n    <li><a href=\"#staging_sizing-your-theme\">Organizing Your Theme</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Organizing Your Theme\n\nFor themes that would otherwise exceed BigCommerce's 50 MB limit on uploads, delivering your theme's large static assets via a CDN (content delivery network) is an alternative to the simpler WebDAV approach.\n\nThe advantage of this alternative is that all assets stay within your theme's directory, so your theme's local structure matches its deployed structure. The disadvantage is that the procedure outlined below requires the expense of a CDN.\n\nTo stage your theme for CDN delivery, you would locally store your large static assets within your theme's\n`<theme-name>/assets/cdn/` subdirectory. By design, the `stencil bundle` command omits this subdirectory's contents. So those contents do not count against the 50 MB limit on the resulting `.zip` file.\n\nThen, as you develop your theme, reference each of these assets using Stencil's `cdn` custom Handlebars helper, like below:\n\n`<img src=\"{{cdn \"webdav:img/image.jpg\"}}\">`\n\n**Note:** _The presumed WebDAV root directory is /content/. (So, in this example, the `image.jpg` file had been uploaded to the WebDAV `/content/` directory.) The presumed local directory is `<theme-name>/assets/`, so you can omit that path when referencing its contained files or subdirectories._\n\nWhen you are ready to upload your theme to BigCommerce, follow the procedure in [Bundling and Submitting a Theme](/stencil-docs/shipping-a-theme/bundling-and-submitting).",
                        "header": {
                          "anchor": "staging_sizing-your-theme"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Bundling and Uploading a Theme",
                  "route": {
                    "path": "/bundling-and-uploading"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Bundling and Uploading a Theme</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#bundling_confirm-dependencies\">Confirm Dependencies</a></li>\n    <li><a href=\"#bundling_verify-directory\">Verify Directory and File Permissions</a></li>\n    <li><a href=\"#bundling_bundling-your-theme\">Bundling Your Theme</a></li>\n    <li><a href=\"#bundling_uploading-your-theme\">Uploading Your Theme</a></li>\n    <li><a href=\"#bundling_other-bundling\">Other Bundling or Upload Errors</a></li>\n\t</ul>\n</div>\n\n\n\n\n\n\n\n\n"
                      },
                      {
                        "type": "text",
                        "data": "## Confirm Dependencies\n\nIf you have customized a theme originally downloaded from the BigCommerce Theme Marketplace: Before you package your theme, make sure your theme directory includes all the dependencies that BigCommerce requires for submission. \n\nFollow the link for your scenario:\n\nIf you downloaded a refreshed version of Stencil's default Cornerstone theme: Run `npm install` in the theme directory to install refreshed JavaScript dependencies, as outlined in [Installing Stencil](/stencil-docs/getting-started/installing-stencil#installing_installing-stencils-js-utilities).\n\nIf you downloaded a different Marketplace theme, and its [version was lower than 1.10.0]():\nYou must also run `jspm install` in the theme directory.",
                        "header": {
                          "anchor": "bundling_confirm-dependencies"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "body": "The `stencil bundle` and `stencil push` commands do not check for the dependencies that these build systems install. So if those dependencies are missing, these commands will not immediately report errors. However, your resulting .zip file will not properly upload to BigCommerce, and will not run properly on a storefront.",
                          "title": "No Automatic Check for Dependencies",
                          "type": "warning"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Verify Directory and File Permissions\n\nIf you have added any new subdirectories or files to your base theme, verify that you have:\n\nSet newly added directories to permission `755` (`drwxr-xr-x`).\nSet newly added files to permission `644` (`rw-r--r--`).",
                        "header": {
                          "anchor": "bundling_verify-directory"
                        }
                      },
                      {
                        "type": "callout",
                        "data": {
                          "body": "Without these permissions, bundling your theme will fail, blocking its upload to BigCommerce.",
                          "title": "Writable Permissions Are Required",
                          "type": "warning"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Bundling Your Theme\n\nOnce you have verified the requirements above, you are ready to process and package your theme for upload to BigCommerce. Stencil CLI provides two options for creating a `.zip` file that contains all of your theme's essentials, while excluding redundant components. The options are either only bundling your theme, or bundling and pushing your theme. These options are available depending on how you've [authorized](/stencil-docs/getting-started/launching-stencil/authorizing-and-initializing) your theme:\n\n### Bundle Only \n\nThe `stencil bundle` command is available for all themes, whether they were initialized using OAuth or Basic-Auth tokens. To use it, just enter the following on your command line:\n\n`stencil bundle`\n\nThe `bundle` command will notify you of its progress and completion.\n\n\n####  Check/Adjust Zipfile's Size\n\nCheck the resulting `.zip` file's size before you proceed. The zipped bundle should be only a few megabytes. BigCommerce imposes a hard limit of 50 MB, and any file size approaching that is problematic. If your `.zip` file fits comfortably within the size limit above, jump directly to [Uploading Your Theme](bundling_uploading-your-theme). However, if your `.zip` file approaches or exceeds 50 MB, you must first use one of these procedures to restructure your theme to a size that's manageable for upload to BigCommerce:\n\n* [Shrinking Your Theme by Excluding Static Assets (WebDAV)]()\n* [Staging a Theme for CDN Delivery]()\n\n\n### Bundle and Push \n\nThe `stencil push` command is available only for themes that you have successfully initialized using an OAuth token (with `Themes:modify scope`). This command bundles your theme and uploads it to the associated store, in one continuous process.\n\nFor further requirements and usage details, please see the _Command-Line Upload_ in [Uploading Your Theme](bundling_uploading-your-theme) below.\n\nFor file-size error diagnostics and workarounds, please _Check/Adjust Zipfile's Size_ above.\n\n### Software Requirements / Resolving Lint Errors\n\n* Only use the `stencil bundle` or the `stencil push` command to process and package themes for submission. These commands generate `.zip` files that match BigCommerce's expected structure. They also generate metadata required for your theme to function properly.\n\n* Do not create `.zip` files using general-purpose archiving software. The resulting files will trigger errors upon upload to BigCommerce.\n\n* Do not open a bundled theme `.zip` file to add, delete, rename, or update files. Doing so will make your theme unusable on the production store.\n\n* If bundling your theme triggers multiple lint errors related to the `bundle.js` file, then your theme is missing the `.eslintignore` file. Please retrieve this file from the [Stencil Cornerstone repo](https://github.com/bigcommerce/cornerstone/blob/master/.eslintignore), then re-run `stencil bundle` or `stencil push`.\n",
                        "header": {
                          "anchor": "bundling_bundling-your-theme"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Uploading Your Theme\n\nBigCommerce provides two alternatives for uploading a theme to its associated BigCommerce store. You can perform either a Control Panel Upload, or a Command Line Upload. These options are available depending on how you've authorized your theme:\n\n### Control-Panel Upload (OAuth or Basic Auth)\n\nUploading your theme via the BigCommerce control panel's GUI is compatible with any store token (whether OAuth or Basic-Auth), and with any OAuth token scope, and with all versions of Stencil CLI. However, this option requires that you first use stencil bundle to package your theme into a .zip file. (Prepare your file according to Bundle Only above.)\n\nFor the upload steps in the control panel, see the [Uploading Custom Themes]() article in our Knowledge Base. \n\nFor error codes that you might encounter when uploading a theme – and corresponding workarounds, see [Troubleshooting Theme Uploads]().\n\n### Command-Line Upload (OAuth Required)\n\nThe stencil push command allows you to both bundle your theme and upload it to the store, with a single terminal command. To run stencil push, you must first:\n\nSuccessfully initialize your theme using an OAuth token that was created with the Themes:modify scope.\nInstall Stencil CLI version 1.12.0 or higher.\n\nTo check your current Stencil CLI version, enter `stencil --version` or `stencil -V` on the command line. If you need to update an earlier version, reinstall Stencil CLI.\n\n### Pushing a Theme Upload\n\nTo initiate bundling and upload, enter the following on the command line:\n\n`stencil push`\n\nStencil CLI is designed to display the same notifications, prompts, and selection options that you would receive when using the control panel's GUI. Below are some of the notifications and interactions you might see.\n\n### Successful Bundling\n\nStencil CLI will display `ok` confirmations, or `not ok` errors, or `warnings` for individual substeps in bundling and uploading your theme. If bundling is successful, you will next see a `Processing` progress bar to track the upload.",
                        "header": {
                          "anchor": "bundling_uploading-your-theme"
                        }
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539055887301"
                      },
                      {
                        "type": "text",
                        "data": "### Successful Upload\n\nUpon a successful upload, you will be prompted: `Would you like to apply your theme to your store at <storehash>? (y/N)` Any response except `y` or `Y` will be processed as \"No.\" You can always apply the theme later through the control panel.\n\n### Apply Which Variation?\n\nIf you chose to apply the newly uploaded theme, you will be prompted: `Which variation would you like to apply? (Use arrow keys)`"
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539055910721"
                      },
                      {
                        "type": "text",
                        "data": "Use your arrow keys to move the selection caret/highlight to the variation you want, and then press `Enter`.\n\nStencil CLI will then confirm which variation is active on the storefront."
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539055915081"
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Theme Quota Warning\n\nIf you run `stencil push` when your store's `My Themes` section has reached its [maximum of 20 themes](), you will be prompted to select at least one existing theme for deletion.\n\n",
                        "header": {
                          "anchor": "bunding_theme-quota"
                        }
                      },
                      {
                        "type": "image",
                        "data": "//s3.amazonaws.com/user-content.stoplight.io/6116/1539055988142"
                      },
                      {
                        "type": "text",
                        "data": "Custom themes – which are available for selection – will have a circle to their left. Marketplace themes and the store's active theme – all of which are protected from deletion – will be flagged `(Disabled)`.\n\nUse your arrow keys to move the selection caret to each theme/version that you want to select. Then press the spacebar to select it. (Filled circles will indicate your selected themes/versions.)\n\nIf you are certain of your selections, you can next press `Enter` to delete the themes.\n\n"
                      },
                      {
                        "type": "callout",
                        "data": {
                          "body": "Once you press `Enter`, the selected themes will be deleted immediately, with no further confirmation.\n\nIf you have any doubts – especially about deleting multiple themes/versions – it is safest to delete them through the control panel GUI. This GUI allows you to compare uploaded versions, and to inspect their metadata.",
                          "title": " Select Carefully – No Confirmation",
                          "type": "error"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Other Bundling or Upload Errors\n\nFor any other `not ok` bundling or upload errors that you receive, please refer to these debugging guidelines Theme setup and sizing diagnostics in preceding sections throughout this page, or the following article titled [Troubleshooting Theme Uploads]().",
                        "header": {
                          "anchor": "bundling_other-bundling"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Adding ReCAPTCHA V2",
                  "route": {
                    "path": "/adding-recaptcha-v2"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Adding ReCAPTCHA V2</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#adding-recaptcha_better-spam-deterrence\">Better Spam Deterrence</a></li>\n    <li><a href=\"#adding-recaptcha_themes\">Themes that Already Incorporate reCAPTCHA V2</a></li>\n    <li><a href=\"#adding-recaptcha_how-to-upgrade\">How to Upgrade</a></li>\n\t</ul>\n</div>\n\n\n\n\n"
                      },
                      {
                        "type": "text",
                        "data": "## Better Spam Deterrence\n\nreCAPTCHA v1 was deprecated as of March 31, 2018.\nTo deter spam submission through storefront forms, BigCommerce now supports Google reCAPTCHA v2 challenges, to distinguish human customers/visitors from automated bots. We recommend that all storefront themes take advantage of this upgraded bot detection.",
                        "header": {
                          "anchor": "adding-recaptcha_better-spam-deterrence"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## Themes that Already Incorporate reCAPTCHA V2\n\nIf you have based your theme on a theme/version that already incorporates reCAPTCHA v2, you do not need to take any further action. Compliant themes/versions currently include:\n\n* Cornerstone 1.6.1 or higher\n* 22 Savile Row (all versions)\n* Arcade 1.13.0 or higher\n* Atelier 1.10.1 or higher\n* Bazaar 1.0.1 or higher\n* Capacity 1.12.0 or higher\n* Chelsea 1.12.0 or higher\n* Diamond 1.0.5 or higher\n* Exhibit 1.10.4 or higher\n* Flagship 1.10.6 or higher\n* Fortune 1.12.1 or higher\n* Foundry 1.10.1 or higher\n* Geneva 1.10.1 or higher\n* Hero 1.11.1 or higher\n* Lookbook 1.10.3 or higher\n* Merchant 1.12.0 or higher\n* Mogul 1.0.7 or higher\n* Parts Warehouse (all versions)\n* Peak 1.11.4 or higher\n* Prosper 1.10.2 or higher\n* Queen 1.0.3 or higher\n* Runway 1.11.2 or higher\n* Scales 1.0.2 or higher\n* Showroom 1.12.0 or higher\n* Soho 1.11.1 or higher\n* Solo 1.10.3 or higher\n* Spotlight 1.11.0 or higher\n* Supermarket (all versions)\n* Touch 1.0.1 or higher\n* Venture 1.11.4 or higher\n\nHowever, if your theme is built on an earlier version of these themes, or on a different base theme, follow the updating instructions in How to Upgrade below.",
                        "header": {
                          "anchor": "adding-recaptcha_themes"
                        }
                      },
                      {
                        "type": "text",
                        "data": "---"
                      },
                      {
                        "type": "text",
                        "data": "## How to Upgrade\n\nTo add reCAPTCHA v2 support to a theme, you will need to update script references in three template files:\n\n* [Create-Account Template](https://github.com/bigcommerce/cornerstone/pull/951/files#diff-ecbae6e2b7d5bbf5c950d68878e79d99)\n* [Write-Review Template](https://github.com/bigcommerce/cornerstone/pull/951/files#diff-945a5d7f1563068188ae39df568cfd43)\n* [Contact-Us Template](https://github.com/bigcommerce/cornerstone/pull/951/files#diff-5351402159301e1c225752f03d9f1f8e)\n\nSee [PR #951 on the Cornerstone Github Repository](https://github.com/bigcommerce/cornerstone/pull/951/files) to see differential for each of the files that need to be modified and how.",
                        "header": {
                          "anchor": "adding-recaptcha_how-to-upgrade"
                        }
                      }
                    ]
                  }
                },
                {
                  "title": "Troubleshooting Theme Uploads",
                  "route": {
                    "path": "/troubleshooting-theme-uploads"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "html",
                        "data": "<h1>Troubleshooting Theme Uploads</h1>"
                      },
                      {
                        "type": "html",
                        "data": "<div class=\"otp\" id=\"no-index\">\n\t<h3> On This Page </h3>\n\t<ul>\n\t\t<li><a href=\"#troubleshooting-theme-uploads_restrictions\">Restrictions</a></li>\n    <li><a href=\"#troubleshooting-theme-uploads_error-codes\">Error Codes</a></li>\n    <li><a href=\"#troubleshooting-theme-uploads_warnings\">Warnings</a></li>\n    <li><a href=\"#troubleshooting-theme-uploads_workarounds\">Workarounds and Further Info</a></li>\n\t</ul>\n</div>"
                      },
                      {
                        "type": "text",
                        "data": "## Restrictions\n\nCustom theme uploads must meet these restrictions:\n\n* You may upload a maximum of 20 custom themes at a time to the control panel's `Store Design` > `My Themes` section.\n\n* If you reach this maximum, you can delete custom themes to make room for more uploads.\n\n* Before uploading, you must package custom themes into a Stencil-specific `.zip` file format, using Stencil CLI's `stencil bundle` command.\n\n* A theme's `.zip` file must be no larger than 50 MB. If your file exceeds that size, please use either a WebDAV or a CDN upload to exclude large static assets.",
                        "header": {
                          "anchor": "troubleshooting-theme-uploads_restrictions"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Error Codes\n\n<table>\n  <tr>\n    <th>Error Code</th>\n    <th>Meaning</th>\n  </tr>\n  <tr>\n    <td>TR-100, -101, -700, -1200, -1300</td>\n    <td>A server error occurred.</td>\n  </tr>\n  <tr>\n    <td>TR-200</td>\n    <td>Problem uploading the theme.</td>\n  </tr>\n  <tr>\n    <td>TR-300</td>\n    <td>Invalid .zip file. (Among other possible root causes, this can indicate an included <code>bundle.js.map</code> source-map file that exceeds its size limit of 5 MB. As a workaround, move this file outside your theme directory before re-running <code>stencil bundle</code>).</td>\n  </tr>\n  <tr>\n    <td>TR-301</td>\n    <td>Failed to unzip file.</td>\n  </tr>\n  <tr>\n    <td>TR-400</td>\n    <td>The .zip contains restricted/invalid file(s) - e.g., a file with an invalid extension.</td>\n  </tr>\n  <tr>\n    <td>TR-500</td>\n    <td>The .zip file is larger than the 50MB limit.</td>\n  </tr>\n  <tr>\n    <td>TR-600</td>\n    <td>The .zip file is missing a required file (<code>theme-name/templates/pages/home.html</code>).</td>\n  </tr>\n  <tr>\n    <td>TR-601</td>\n    <td>The .zip file is missing some parsed template file(s); or, one or more non-<code>.html</code> files are present in the <code>theme-name/templates/</code></nobr> subdirectory.</td>\n  </tr>\n  <tr>\n    <td>TR-800</td>\n    <td>There was a problem processing the contained config.json file. <b>Please check the config.json documentation for required keys and for keys that require values.</b></td>\n  </tr>\n  <tr>\n    <td>TR-900</td>\n    <td>The contained config.json file is missing required developer information.</td>\n  </tr>\n  <tr>\n    <td>TR-901</td>\n    <td>A theme variation defined in the contained config.json file is missing its required external ID.</td>\n  </tr>\n  <tr>\n    <td>TR-902</td>\n    <td>Two or more theme variations defined in the contained config.json file share a external ID. All external IDs must be unique.</td>\n  </tr>\n  <tr>\n    <td>TR-1000</td>\n    <td>There was a problem processing the contained <a href=\"/docs/schemajson-metadata-for-theme-editor\">schema.json</a> file.</td>\n  </tr>\n  <tr>\n    <td>TR-1001</td>\n    <td>The theme is missing its required <a href=\"/docs/schemajson-metadata-for-theme-editor\">schema.json</a> file.</td>\n  </tr>\n  <tr>\n    <td class=\"\">TR-1400</td>\n    <td class=\"\">There was a problem processing template <a href=\"/docs/using-yaml-front-matter\">front matter</a>.</td>\n  </tr>\n  <tr>\n    <td>TR-1401</td>\n    <td>There was a database validation error when saving <a href=\"/docs/using-yaml-front-matter\">front matter</a> to the database.</td>\n  </tr>\n  <tr>\n    <td>TR-1500</td>\n    <td>There was a problem uploading your files, due to multi-threading (multiple simultaneous uploads). Please try again.</td>\n  </tr>\n  <tr>\n    <td>TR-1600</td>\n    <td>There was a temporary problem on our system. Please try again.</td>\n  </tr>\n  <tr>\n    <td>TR-1601</td>\n    <td>There was a problem processing screenshots.</td>\n  </tr>\n  <tr>\n    <td>TR-1700, -1800, -1801, -1802, -1803</td>\n    <td>System error, possibly temporary. Please try again.</td>\n  </tr>\n  <tr>\n    <td>TR-3402</td>\n    <td>You are not allowed to edit your active theme. [Please select <code>Make a Copy</code>, then edit the resulting copy of your theme.]</td>\n  </tr>\n  <tr>\n    <td>TR-4400</td>\n    <td>One or more values in the <code>config.json</code> file exceed the 64-character limit. (Can also indicate string lengths that exceed their limits in other JSON files.)</td>\n  </tr>\n </table>\n",
                        "header": {
                          "anchor": "troubleshooting-theme-uploads_error-codes"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Warnings\n\nWarnings will not block a theme's upload, but these onscreen and/or log messages notify you of problems within the zipped theme. Here are the warnings and their meanings:\n\n| Warning |\n|---|\n| (These messages do not have numeric codes) |\n| Issue in processing this theme's thumbnail screenshot (`composed_image`). |\n| Issue in processing this theme's full-size screenshot (`desktop_screenshot`). |\n| Issue in processing this theme's mobile [screenshot](/docs/configjson-reference#config-var-meta) (`mobile_screenshot`). |\n| Missing file: This theme does not support Theme Editor, as it is missing its required `[schema.json]` file. |\n| One or more of this theme's screenshots are not image files. |\n| Theme is missing a valid thumbnail image `composed_image`). |\n| Theme is missing a valid full-size image `desktop_screenshot`). |\n| Theme is missing a valid mobile image (`mobile_screenshot`). |\n| One or more of this theme's images is not of a supported file type. Valid filetypes are: `.jpg`, `.jpeg`, `.png`, `.gif`. |\n| Thumbnail (`composed_image`) image dimensions are not right. Expected 600 x 760 pixels. |\n| Full-size (`desktop_screenshot`) image dimensions are not right. Expected 2048 x 2600 pixels. |\n| Mobile (`mobile_screenshot`) image dimensions are not right. Expected 304 x 540 pixels. |\n| Too-large image file size for a theme screenshot `composed_image` (thumbnails), `desktop_screenshot`, or `mobile_screenshot`] . The maximum supported size is x, but the file's actual size is y. |",
                        "header": {
                          "anchor": "troubleshooting-theme-uploads_warnings"
                        }
                      },
                      {
                        "type": "text",
                        "data": "## Workarounds and Further Info\n\nIf a custom theme does not render properly after you upload and apply it to a storefront, make sure you have created the theme's `.zip` file using the `stencil bundle` command, on a Mac OS, Linux computer, or virtual machine. This will exclude Windows-specific errors that have occurred on some bundles.\n\nIf you repeatedly encounter the same error or warning and neither this page nor our KB resolves the problem, see support resources for theme developers in our [Developer Community](https://forum.bigcommerce.com/s/group/0F913000000HLjECAW/bigcommerce-developers).",
                        "header": {
                          "anchor": "troubleshooting-theme-uploads_workarounds"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        ],
        "blocks": [
          {
            "type": "html",
            "data": "<div class=\"docs-landing bg-bclightblue\">        \n<div class=\"cBrLandingTiles\">\n          <div class=\"ui-widget\">\n            <div>\n              <div style=\"padding: 62px 0px 0px;\">\n                <div class=\"container\">\n                  <h1 class=\"h1 panel-title__text-dark\">Stencil Documentation</h1>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div><!-- landing tiles -->\n        <div class=\"cBrLandingTiles\" style=\"margin-bottom: 5%;\">\n          <div data-region-name=\"landingTiles\">\n            <div class=\"ui-widget\">\n              <div class=\"lift-content\">\n                <div>\n                  <div>\n                    <div class=\"row row--pad\">\n                      <div class=\"column-md-12 column-lg-6 column--pad m-bottom-25\"><a class=\"cursor-pointer\" href=\"https://github.com/bigcommerce/cornerstone\" target=\"_blank\">\n                        <div class=\"panel-media doc-landing\">\n                          <div class=\"panel-media__wrap-icon\">\n                            <div class=\"panel-media__icon\">\n                              <img alt=\"\" src=\"https://store-qtmbtj.mybigcommerce.com/template/images/Github-Branch.svg\">\n                            </div>\n                          </div>\n                          <div class=\"panel-media__wrap-content\">\n                            <h4 class=\"h4 panel-media__title\">Contribute to Cornerstone</h4>\n                            <p class=\"panel-media__text type--sm\">Get involved. Join a community of open source developers and contribute to Cornerstone.</p>\n                          </div>\n                        </div>\n                        </a>\n                      </div>\n                      <div class=\"column-md-12 column-lg-6 column--pad m-bottom-25\"><a class=\"cursor-pointer\" href=\"/stencil-docs/getting-started/installing-stencil\">\n                        <div class=\"panel-media doc-landing\">\n                          <div class=\"panel-media__wrap-icon\">\n                            <div class=\"panel-media__icon\">\n                              <img alt=\"\" src=\"https://store-qtmbtj.mybigcommerce.com/template/images/Install-Stencil.svg\">\n                            </div>\n                          </div>\n                          <div class=\"panel-media__wrap-content\">\n                            <h4 class=\"h4 panel-media__title\">Installing Stencil</h4>\n                            <p class=\"panel-media__text type--sm\">Start here. Set up your local development environment and begin customizing a theme.</p>\n                          </div>\n                        </div>\n                        </a>\n                      </div>\n                      <div class=\"column-md-12 column-lg-6 column--pad m-bottom-25\"><a class=\"cursor-pointer\" href=\"/stencil-docs/development-quickstart/customizing-a-theme\">\n                        <div class=\"panel-media doc-landing\">\n                          <div class=\"panel-media__wrap-icon\">\n                            <div class=\"panel-media__icon\">\n                              <img alt=\"\" src=\"https://store-qtmbtj.mybigcommerce.com/template/images/Getting-Started.svg\">\n                            </div>\n                          </div>\n                          <div class=\"panel-media__wrap-content\">\n                            <h4 class=\"h4 panel-media__title\">Customization Quick Start</h4>\n                            <p class=\"panel-media__text type--sm\">Start customizing your storefront design fast with our hands-on Quick Start.</p>\n                          </div>\n                        </div>\n                        </a>\n                      </div>\n                      <div class=\"column-md-12 column-lg-6 column--pad m-bottom-25\"><a class=\"cursor-pointer\" href=\"/stencil-docs/handlebars-syntax-and-helpers/handlebars-overview\">\n                        <div class=\"panel-media doc-landing\">\n                          <div class=\"panel-media__wrap-icon\">\n                            <div class=\"panel-media__icon\">\n                              <img alt=\"\" src=\"https://store-qtmbtj.mybigcommerce.com/template/images/Handlebars.svg\">\n                            </div>\n                          </div>\n                          <div class=\"panel-media__wrap-content\">\n                            <h4 class=\"h4 panel-media__title\">Handlebars Helpers Reference</h4>\n                            <p class=\"panel-media__text type--sm\">Power up your code. Make your theme dynamic with Handlebars logic.</p>\n                          </div>\n                        </div>\n                        </a>\n                      </div>\n                      <div class=\"column-md-12 column-lg-6 column--pad m-bottom-25\"><a class=\"cursor-pointer\" href=\"/stencil-docs/stencil-object-model-reference/stencil-objects\">\n                        <div class=\"panel-media doc-landing\">\n                          <div class=\"panel-media__wrap-icon\">\n                            <div class=\"panel-media__icon\">\n                              <img alt=\"\" src=\"https://store-qtmbtj.mybigcommerce.com/template/images/Stencil-Object-Reference.svg\">\n                            </div>\n                          </div>\n                          <div class=\"panel-media__wrap-content\">\n                            <h4 class=\"h4 panel-media__title\">Object Model Reference</h4>\n                            <p class=\"panel-media__text type--sm\">Access all the data Stencil has to offer. Browse our reference for store objects and properties available via Handlebars.</p>\n                          </div>\n                        </div>\n                        </a>\n                      </div>\n                      <div class=\"column-md-12 column-lg-6 column--pad\"><a class=\"cursor-pointer\" href=\"/stencil-docs/front-matter/front-matter-overview\">\n                        <div class=\"panel-media doc-landing\">\n                          <div class=\"panel-media__wrap-icon\">\n                            <div class=\"panel-media__icon\">\n                              <img alt=\"\" src=\"https://store-qtmbtj.mybigcommerce.com/template/images/Front-Matter.svg\">\n                            </div>\n                          </div>\n                          <div class=\"panel-media__wrap-content\">\n                            <h4 class=\"h4 panel-media__title\">Front Matter Reference</h4>\n                            <p class=\"panel-media__text type--sm\">Declare page resources. Adjust layouts and reference front matter expressions for each page type.</p>\n                          </div>\n                        </div>\n                        </a>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n  </div>"
          }
        ]
      }
    }
  },
  "theme": {
    "background": "#3550b6"
  },
  "logo": "https://cdn6.bigcommerce.com/s-qtmbtj/product_images/uploaded_images/bigcommerce-logomark-darkbg.png"
}